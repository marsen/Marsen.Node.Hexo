<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Marsen</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.marsen.me/"/>
  <updated>2018-02-28T09:33:56.323Z</updated>
  <id>http://blog.marsen.me/</id>
  
  <author>
    <name>Marsen L.</name>
    <email>thisismysoul@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一年後的我想要什麼？</title>
    <link href="http://blog.marsen.me/2018/02/12/2018/next_year/"/>
    <id>http://blog.marsen.me/2018/02/12/2018/next_year/</id>
    <published>2018-02-11T18:12:47.000Z</published>
    <updated>2018-02-28T09:33:56.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="你的目標是什麼"><a href="#你的目標是什麼" class="headerlink" title="你的目標是什麼?"></a>你的目標是什麼?</h2><p><strong>自由</strong><br>什麼是自由？</p>
<ol>
<li>經濟上的自由</li>
<li>情感上的自由</li>
<li>時間上的自由</li>
</ol>
<p>一年後的我想要什麼?</p>
<ol>
<li>被動收入 -&gt; 我要更多的錢 去購買低風險</li>
<li>更高的薪資</li>
<li>更有成就感的工作</li>
<li>更多的選擇</li>
<li>健康的身體</li>
<li>更多享受生活</li>
</ol>
<p>一年後的我想要什麼?</p>
<ol>
<li>更高的薪資<ol>
<li>維持現狀 K (x)</li>
<li>跳糟 K*1.3 </li>
<li>爭取加薪 K*1.1</li>
<li>獎金與分紅 </li>
</ol>
</li>
<li>更有成就感的工作(什麼是成就感)？    <ol>
<li>擁有可以引以為豪的產品<ol>
<li>拆解單體為服務導向</li>
<li>架構升級</li>
<li>自動化測試</li>
</ol>
</li>
<li>分享與教學<pre><code>1. Blog
2. 內/外部sharing
3. 單元測試導入        
</code></pre></li>
</ol>
</li>
<li>更多的選擇<ol>
<li>技術轉移<ol>
<li>Web 技術 轉移 為 Service導向技術<br> 1.</li>
<li>container 技術</li>
<li>cloud 技術        </li>
</ol>
</li>
<li>技術提昇<br> 1.</li>
</ol>
</li>
</ol>
<p>而這些目標需要什麼才能爭取到?</p>
<p>e.g.專業,經驗,技能,興趣,熱情,團隊合作,…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;你的目標是什麼&quot;&gt;&lt;a href=&quot;#你的目標是什麼&quot; class=&quot;headerlink&quot; title=&quot;你的目標是什麼?&quot;&gt;&lt;/a&gt;你的目標是什麼?&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;自由&lt;/strong&gt;&lt;br&gt;什麼是自由？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;經濟上的自
    
    </summary>
    
    
      <category term="C#" scheme="http://blog.marsen.me/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>[翻譯]C# 的常見錯誤</title>
    <link href="http://blog.marsen.me/2018/02/12/2018/csharp_common_mistakes_1/"/>
    <id>http://blog.marsen.me/2018/02/12/2018/csharp_common_mistakes_1/</id>
    <published>2018-02-11T18:12:47.000Z</published>
    <updated>2018-02-25T02:06:23.444Z</updated>
    
    <content type="html"><![CDATA[<h2 id="出處"><a href="#出處" class="headerlink" title="出處"></a>出處</h2><p><a href="http://www.dotnetcurry.com/csharp/1417/csharp-common-mistakes" target="_blank" rel="external">http://www.dotnetcurry.com/csharp/1417/csharp-common-mistakes</a></p>
<h2 id="線上工具"><a href="#線上工具" class="headerlink" title="線上工具"></a>線上工具</h2><p><a href="https://dotnetfiddle.net" target="_blank" rel="external">https://dotnetfiddle.net</a></p>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>C#是個好棒棒的言語,但是它仍會有超乎你想像的行為,<br>而且就算你是有經驗的開發者,你也要看一看這篇文章.<br>這篇文章不講幹話,還會給你代碼喔  </p>
<p><img src="http://www.dotnetcurry.com/images/csharp/basics/csharp-quiz.jpg" alt="C# Quiz"></p>
<h3 id="Null-Value"><a href="#Null-Value" class="headerlink" title="Null Value"></a>Null Value</h3><p>Null 很危險啦, 你別在 Null 身上調用方法<br>(譯注:在公司的維運人員應該還蠻常見這個錯誤的 一ω一)  </p>
<blockquote>
<p>We are all aware that null values can be dangerous, if not handled properly.<br>Dereferencing a null-valued variable (i.e. calling a method on it or accessing one of its properties)<br>will result in a NullReferenceException, as demonstrated with the following sample code:  </p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">object</span> nullValue = <span class="literal">null</span>;</div><div class="line"><span class="keyword">bool</span> areNullValuesEqual = nullValue.Equals(<span class="literal">null</span>);</div></pre></td></tr></table></figure>
<p>就安全的角度,好像我們要不停的檢查 reference type 是不是 null ,<br>雖然這件事常常發生,好像也很難說成是非預期的行為了…<br>(譯注:又有種中槍的感覺)  </p>
<blockquote>
<p>To be on the safer side, we should always make sure that reference type values are not null before dereferencing them.<br>Failing to do so could result in an unhandled exception in a specific edge case.<br>Although such a mistake occasionally happens to everyone, we could hardly call it unexpected behavior.  </p>
</blockquote>
<p>看看這個代碼, null 值在 runtime 的時候不會有 type 的  </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">string</span> nullString = (<span class="keyword">string</span>)<span class="literal">null</span>;</div><div class="line"><span class="keyword">bool</span> isStringType = nullString <span class="keyword">is</span> <span class="keyword">string</span>;</div></pre></td></tr></table></figure>
<p><strong>No</strong>, null 值在 runtime 的時候不會有 type 的<br><strong>No</strong>, null 值在 runtime 的時候不會有 type 的<br><strong>No</strong>, null 值在 runtime 的時候不會有 type 的<br>很重要所以說三次,<br>當然你也別想呼叫 <code>GetType()</code> 方法  </p>
<blockquote>
<p>The correct answer is <strong>No</strong>.  </p>
<p>A null value has no type at runtime.  </p>
<p>In a way, this also affects reflection.<br>Of course, you can’t call GetType() on a null value because a NullReferenceException would get thrown:  </p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">object</span> nullValue = <span class="literal">null</span>;</div><div class="line">Type nullType = nullValue.GetType();</div></pre></td></tr></table></figure>
<p>純量呢？</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> intValue = <span class="number">5</span>;</div><div class="line">Nullable&lt;<span class="keyword">int</span>&gt; nullableIntValue = <span class="number">5</span>;</div><div class="line"><span class="keyword">bool</span> areTypesEqual = intValue.GetType() == nullableIntValue.GetType();</div></pre></td></tr></table></figure>
<p>那我們可不可能用反射(reflection)區分 nullable 跟 non-nullable 的值？<br>答案是不可能, 看看後面的代碼  </p>
<blockquote>
<p>Is it possible to distinguish between a nullable and a non-nullable value type using reflection?  </p>
<p>The answer is <strong>No</strong>.  </p>
<p>The same type will be returned for both variables in the above code: System.Int32.<br>This does not mean that reflection has no representation for Nullable<t>, though.  </t></p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Type intType = <span class="keyword">typeof</span>(<span class="keyword">int</span>);</div><div class="line">Type nullableIntType = <span class="keyword">typeof</span>(Nullable&lt;<span class="keyword">int</span>&gt;);</div><div class="line"><span class="keyword">bool</span> areTypesEqual = intType == nullableIntType;</div></pre></td></tr></table></figure>
<p>上面兩段程式在runtime拿到的type很不一樣喔,<br>一個是<code>System.Int32</code>一個是 <code>System.Nullable&#39;1\[System.Int32\]</code>  </p>
<h3 id="當-null-遇上多載方法-Handling-Null-values-in-Overloaded-methods"><a href="#當-null-遇上多載方法-Handling-Null-values-in-Overloaded-methods" class="headerlink" title="當 null 遇上多載方法 (Handling Null values in Overloaded methods)"></a>當 null 遇上多載方法 (Handling Null values in Overloaded methods)</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">string</span> <span class="title">OverloadedMethod</span>(<span class="params"><span class="keyword">object</span> arg</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"object parameter"</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">string</span> <span class="title">OverloadedMethod</span>(<span class="params"><span class="keyword">string</span> arg</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"string parameter"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面有兩個<code>OverloadedMethod</code><br>猜猜看,傳入 null 時會呼叫哪一個方法？  </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = OverloadedMethod(<span class="literal">null</span>);</div></pre></td></tr></table></figure>
<p>有人會猜編譯失敗嗎？<br>MAGIC ! 竟然可以編譯成功, 而回傳的值是 <strong>“string parameter”</strong> ,<br>一般來說,在編譯時期會作型別檢查,相同簽章的方法參數可以被轉型成另一個型別時,是可以編譯成功的喔.<br>而有明確型別的方法將被優先調用(譯注:求這段.Net Framework的原碼來看一下,知道的人請告訴我)  </p>
<p>如果要指定 null 參數呼叫的多載方法就要對 null 轉型唷,可以參考下面的方法.  </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = OverloadedMethod((<span class="keyword">object</span>)<span class="literal">null</span>);</div></pre></td></tr></table></figure>
<h3 id="算術運算-Arithmetic-Operations"><a href="#算術運算-Arithmetic-Operations" class="headerlink" title="算術運算 (Arithmetic Operations)"></a>算術運算 (Arithmetic Operations)</h3><p>好像很少用位移運算吼？<br>回憶一下 左移移 右移移  </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> shifted = <span class="number">0</span>b1 &lt;&lt; <span class="number">1</span>; <span class="comment">// = 0b10</span></div></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> shifted = <span class="number">0</span>b1 &gt;&gt; <span class="number">1</span>; <span class="comment">// = 0b0</span></div></pre></td></tr></table></figure>
<p>bits 跑到底並不會重頭開始喔,一直移位到爆掉就變 0 了.<br>(這裡會用32是因為 int 是32bit的數值,你可以試試放超過32的數值到for loop裡會發生什麼事)  </p>
<blockquote>
<p>The bits don’t wrap around when they reach the end.<br>That’s why the result of the second expression is 0.<br>The same would happen if we shifted the bit far enough to the left (32 bits because integer is a 32-bit number):  </p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> shifted = <span class="number">0</span>b1;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</div><div class="line">&#123;</div><div class="line">shifted = shifted &lt;&lt; <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>The result would again be 0.  </p>
</blockquote>
<p>那我們是不是可以一次移32bit,讓它一次變成0呢？<br>靠北啊 竟然不行捏, 你只會拿到 1,<br>這跟運算子(operator)基本運算有關,在作位元運算的時候,<br>會拿第一個運算數除以第二個運算數後取餘數,<br>這導致我們只會拿 32 % 32 的結果 , 也就是 1 啦<br>(譯注:這段其實我不是很確定,如果錯誤請糾正)  </p>
<blockquote>
<p>However, the bit shifting operators have a second operand.<br>Instead of shifting to the left by 1 bit 32 times, we can shift left by 32 bits and get the same result.  </p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> shifted = <span class="number">0</span>b1 &lt;&lt; <span class="number">32</span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>Right? <strong>Wrong.</strong>  </p>
<p>The result of this expression will be 1. Why?  </p>
<p>Because that’s how the operator is defined. Before applying the operation,<br>the second operand will be normalized to the bit length of the first operand with the modulo operation,<br>i.e. by calculating the remainder of dividing the second operand by the bit length of the first operand.  </p>
<p>The first operand in the example we just saw was a 32-bit number, hence: 32 % 32 = 0.<br>Our number will be shifted left by 0 bits. That’s not the same as shifting it left by 1 bit 32 times.  </p>
</blockquote>
<p>好棒棒 你竟然可以看到這裡,<br>那我們繼續討論 &amp; (and) 跟 | (or) 運算子吧,<br>這兩個運算子跟一般的運算子有點不一樣  </p>
<ul>
<li>通常只要看運算子的第一個運算數就能得知結果  </li>
<li>在有掛 [Flag] atturibute的列舉它們好好用(看一下範例)  </li>
</ul>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[Flags]</div><div class="line"><span class="keyword">private</span> <span class="keyword">enum</span> Colors</div><div class="line">&#123;</div><div class="line">    None = <span class="number">0</span>b0,</div><div class="line">    Red = <span class="number">0</span>b1,</div><div class="line">    Green = <span class="number">0</span>b10,</div><div class="line">    Blue = <span class="number">0</span>b100</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Colors color = Colors.Red | Colors.Green;</div><div class="line"><span class="keyword">bool</span> isRed = (color &amp; Colors.Red) == Colors.Red;</div></pre></td></tr></table></figure>
<p>上面這個刮號可不能省略喔, 因為(&amp;)運算符的優先順序低於(==)運算符,<br>不過這段程式沒有刮號的話連編譯都不會過,真是好加在<br>另外在 .NET framework 4.0 之後的版本提供更棒的方法去檢查flags  </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> isRed = color.HasFlag(Colors.Red);</div></pre></td></tr></table></figure>
<h3 id="Math-Round"><a href="#Math-Round" class="headerlink" title="Math.Round()"></a>Math.Round()</h3><p>猜一下這個值會是多少？  </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rounded = Math.Round(<span class="number">1.5</span>);</div></pre></td></tr></table></figure>
<p>猜2的就答對了, 下一題<br>猜一下這個值會是多少？  </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rounded = Math.Round(<span class="number">2.5</span>);</div></pre></td></tr></table></figure>
<p>還是2 ,<br>因為預設會取最接近的偶數</p>
<blockquote>
<p><strong>No.</strong> The result will be 2 again. By default,<br>the midpoint value will be rounded to the nearest even value.<br>You could provide the second argument to the method to request such behavior explicitly:  </p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rounded = Math.Round(<span class="number">2.5</span>, MidpointRounding.ToEven);</div></pre></td></tr></table></figure>
<p>這個行為可以透過<code>MidpointRounding</code>參數改變  </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rounded = Math.Round(<span class="number">2.5</span>, MidpointRounding.AwayFromZero);</div></pre></td></tr></table></figure>
<p>另外要小心浮點數的精度問題,<br>以下的例子結果會是1,( 因為float的0.1實際上小於0.1 一ω一 )<br>這提醒我們在處理精確數值時,應轉換成整數處理.<br>(譯注:使用 <a href="https://dotnetfiddle.net" target="_blank" rel="external">dotnetfiddle</a> 時並不會有這個問題, 在windows 環境下測試的確會有問題)  </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">value</span> = <span class="number">1.4</span>f;</div><div class="line"></div><div class="line"><span class="keyword">var</span> rounded = Math.Round(<span class="keyword">value</span> + <span class="number">0.1</span>f);</div></pre></td></tr></table></figure>
<h3 id="類別初始化"><a href="#類別初始化" class="headerlink" title="類別初始化"></a>類別初始化</h3><p>最佳實踐建我我們應該避免在建構子初始化類別,<br>特別是靜態建構子.<br>在初始化一個類別的順序如下</p>
<ol>
<li>靜態欄位</li>
<li>靜態建構子</li>
<li>實體欄位</li>
<li>實體建構子</li>
</ol>
<p>看看這個例子<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Config</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> ThrowException &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FailingClass</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="title">FailingClass</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (Config.ThrowException)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>當我們嚐試實例化FailingClass時,你會得到Exception;<br>值得注意的事,你拿到的會是<code>TypeInitializationException</code><br>而並不是<code>InvalidOperationException</code>,  </p>
<p>那麼我們是不是可以試著透過try catch補捉錯誤,<br>並修改靜態屬性,重新實體化class呢？<br><strong>答案是不行</strong></p>
<p>一個靜態建構值,如果它拋出一個異常,<br>那麼無論何時你想創建一個實例或以任何其他方式訪問這個類,<br>這個異常都會被重新拋出.  </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> failedInstance = <span class="keyword">new</span> FailingClass();</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> (TypeInitializationException) &#123; &#125;</div><div class="line">Config.ThrowException = <span class="literal">false</span>;</div><div class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> FailingClass();</div></pre></td></tr></table></figure>
<p>這個類別在程序重啟前是不能再被使用了(會拋出錯誤),<br>這在 C# 是個非常糟糕的實踐,<br>千萬別這樣設計你的類別.  </p>
<blockquote>
<p>The static constructor for a class is only called once.<br>If it throws an exception, then this exception will be rethrown<br>whenever you want to create an instance or access the class in any other way.  </p>
<p>The class becomes effectively unusable until the process (or the application domain) is restarted.<br>Yes, having even a minuscule chance that the<br>static constructor will throw an exception, is a very bad idea.  </p>
</blockquote>
<h4 id="繼承與類別初始化"><a href="#繼承與類別初始化" class="headerlink" title="繼承與類別初始化"></a>繼承與類別初始化</h4><p>繼承的類別初始化執行順序更加複雜,看看下面的例子</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseClass</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseClass</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        VirtualMethod(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">VirtualMethod</span>(<span class="params"><span class="keyword">int</span> dividend</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> dividend / <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DerivedClass</span> : <span class="title">BaseClass</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> divisor;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DerivedClass</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        divisor = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">int</span> <span class="title">VirtualMethod</span>(<span class="params"><span class="keyword">int</span> dividend</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">base</span>.VirtualMethod(dividend / divisor);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>當我們初始化 DerivedClass</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> DerivedClass();</div></pre></td></tr></table></figure>
<p>你會得到一個除0的錯誤 <code>DivideByZeroException</code><br>這與執行順序有關</p>
<ol>
<li>呼叫 BaseClass 建構子</li>
<li>執行 DerivedClass VirtualMethod (overrid BaseClass)</li>
<li>divisor 未賦值拋出 <code>DivideByZeroException</code></li>
</ol>
<h2 id="多形-Polymorphism"><a href="#多形-Polymorphism" class="headerlink" title="多形 Polymorphism"></a>多形 Polymorphism</h2><p>這個例子只是要說明多形的概念與應用,<br>你可以透過轉形呼叫基底類別的方法.  </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> DerivedClass();</div><div class="line"><span class="keyword">var</span> result = instance.Method(); <span class="comment">// -&gt; Method in DerivedClass</span></div><div class="line">result = ((BaseClass)instance).Method(); <span class="comment">// -&gt; Method in BaseClass</span></div><div class="line"><span class="comment">// The correct answer is: by using the new modifier.</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseClass</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">string</span> <span class="title">Method</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Method in BaseClass "</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DerivedClass</span> : <span class="title">BaseClass</span> </div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> new <span class="keyword">string</span> <span class="title">Method</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Method in DerivedClass"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>It’s typically used to hide the interface methods from the consumers of the class implementing it,<br>unless they cast the instance to that interface.<br>But it works just as well if we want to have two different implementations of a method inside a single class.<br>It’s difficult to think of a good reason for doing it, though.</p>
</blockquote>
<p>另外一個例子是明確實作介面方法,<br>如果你的類別已經有同名的方法的話.<br>雖然沒有什麼好理由建議你這樣作.<br>(譯注:實務上我有在遇到歷史共業這樣作過…)  </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">var instance = new DerivedClass();</div><div class="line">var result = instance.Method(); // -&gt; Method in DerivedClass</div><div class="line">result = ((IInterface)instance).Method(); // -&gt; Method belonging to IInterface</div><div class="line">It’s explicit interface implementation.</div><div class="line"></div><div class="line">public interface IInterface</div><div class="line">&#123;</div><div class="line">    string Method();</div><div class="line">&#125;</div><div class="line"> </div><div class="line">public class DerivedClass : IInterface</div><div class="line">&#123;</div><div class="line">    public string Method()</div><div class="line">    &#123;</div><div class="line">        return "Method in DerivedClass";</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    string IInterface.Method()</div><div class="line">    &#123;</div><div class="line">        return "Method belonging to IInterface";</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">It’s</div></pre></td></tr></table></figure>
<h2 id="迭代器-Iterators"><a href="#迭代器-Iterators" class="headerlink" title="迭代器 Iterators"></a>迭代器 Iterators</h2><p>小心 Iterators 的陷阱<br>看看以下<a href="https://dotnetfiddle.net/BxfF0d" target="_blank" rel="external">代碼</a>:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> IEnumerable&lt;<span class="keyword">int</span>&gt; <span class="title">GetEnumerable</span>(<span class="params">StringBuilder log</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> context = <span class="keyword">new</span> Context(log))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> Enumerable.Range(<span class="number">1</span>, <span class="number">5</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Context</span> : <span class="title">IDisposable</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> StringBuilder log;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span>(<span class="params">StringBuilder log</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.log = log;</div><div class="line">        <span class="keyword">this</span>.log.AppendLine(<span class="string">"Context created"</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.log.AppendLine(<span class="string">"Context disposed"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假設我們 foreach 呼叫 GetEnumerable 方法,<br>你預期 Context 類別會有什麼樣的行為？<br>我們會印出以下的output嗎？</p>
<blockquote>
<p>Context created<br>1<br>2<br>3<br>4<br>5<br>Context disposed</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> log = <span class="keyword">new</span> StringBuilder();</div><div class="line"><span class="keyword">foreach</span> (<span class="function"><span class="keyword">var</span> number <span class="keyword">in</span> <span class="title">GetEnumerable</span>(<span class="params">log</span>))</span></div><div class="line">&#123;</div><div class="line">    log.AppendLine(<span class="string">$"<span class="subst">&#123;number&#125;</span>"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不是的,<br>實際上印出的是</p>
<blockquote>
<p>Context created<br>Context disposed<br>1<br>2<br>3<br>4<br>5</p>
</blockquote>
<p>這點很重要,<br>因為實務上你很有可能 using dbconnetion 之類的物件,<br>那麼你在取得真正的資料之前,<br>你的連線就已經中斷了 </p>
<blockquote>
<p>This means that in our real world database example, the code would fail –<br>the connection would be closed before the values could be read from the database.</p>
</blockquote>
<p>看看以下的<a href="https://dotnetfiddle.net/IgJaak" target="_blank" rel="external">修正</a></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> IEnumerable&lt;<span class="keyword">int</span>&gt; <span class="title">GetEnumerable</span>(<span class="params">StringBuilder log</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> context = <span class="keyword">new</span> Context(log))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> i <span class="keyword">in</span> Enumerable.Range(<span class="number">1</span>, <span class="number">5</span>))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>譯注:看到這裡對 <code>yield return</code> 的使用情境才比較有感啊…</p>
<p>如果你不太熟<code>yield return</code>,其實它只是個語法糖,允許增量執行,<br>參考以下範例,或許能更容易理解</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> IEnumerable&lt;<span class="keyword">int</span>&gt; <span class="title">GetCustomEnumerable</span>(<span class="params">StringBuilder log</span>)</span></div><div class="line">&#123;</div><div class="line">    log.AppendLine(<span class="string">"before 1"</span>);</div><div class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    log.AppendLine(<span class="string">"before 2"</span>);</div><div class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">    log.AppendLine(<span class="string">"before 3"</span>);</div><div class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">3</span>;</div><div class="line">    log.AppendLine(<span class="string">"before 4"</span>);</div><div class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">4</span>;</div><div class="line">    log.AppendLine(<span class="string">"before 5"</span>);</div><div class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">5</span>;</div><div class="line">    log.AppendLine(<span class="string">"before end"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> log = <span class="keyword">new</span> StringBuilder();</div><div class="line">log.AppendLine(<span class="string">"before enumeration"</span>);</div><div class="line"><span class="keyword">foreach</span> (<span class="function"><span class="keyword">var</span> number <span class="keyword">in</span> <span class="title">GetCustomEnumerable</span>(<span class="params">log</span>))</span></div><div class="line">&#123;</div><div class="line">    log.AppendLine(<span class="string">$"<span class="subst">&#123;number&#125;</span>"</span>);</div><div class="line">&#125;</div><div class="line">log.AppendLine(<span class="string">"after enumeration"</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>before enumeration<br>before 1<br>1<br>before 2<br>2<br>before 3<br>3<br>before 4<br>4<br>before 5<br>5<br>before end<br>after enumeration</p>
</blockquote>
<p>值得注意的事, 如果你在loop當中重複執行以上的代碼,<br>那麼 Iterators 也會重複執行</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> log = <span class="keyword">new</span> StringBuilder();</div><div class="line"><span class="keyword">var</span> enumerable = GetCustomEnumerable(log);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span>; i++)</div><div class="line">&#123;</div><div class="line">    log.AppendLine(<span class="string">$"enumeration #<span class="subst">&#123;i&#125;</span>"</span>);</div><div class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> number <span class="keyword">in</span> enumerable)</div><div class="line">    &#123;</div><div class="line">        log.AppendLine(<span class="string">$"<span class="subst">&#123;number&#125;</span>"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>輸出如下,可以明顯看到 <code>GetCustomEnumerable</code> 方法,<br>實際上被隱含的執行了兩次,<br>這在 Code Review 的階段也是難以被察覺的.</p>
<blockquote>
<p>enumeration #1<br>before 1<br>1<br>before 2<br>2<br>before 3<br>3<br>before 4<br>4<br>before 5<br>5<br>before end<br>enumeration #2<br>before 1<br>1<br>before 2<br>2<br>before 3<br>3<br>before 4<br>4<br>before 5<br>5<br>before end</p>
</blockquote>
<p>比較好的作法是將 <code>IEnumerable</code> ToList(),<br>如果你真的需要對 <code>IEnumerable</code> 的結果作 loop 的操作</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> log = <span class="keyword">new</span> StringBuilder();</div><div class="line"><span class="keyword">var</span> enumerable = GetCustomEnumerable(log).ToList();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span>; i++)</div><div class="line">&#123;</div><div class="line">    log.AppendLine(<span class="string">$"enumeration #<span class="subst">&#123;i&#125;</span>"</span>);</div><div class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> number <span class="keyword">in</span> enumerable)</div><div class="line">    &#123;</div><div class="line">        log.AppendLine(<span class="string">$"<span class="subst">&#123;number&#125;</span>"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>輸出結果</p>
<blockquote>
<p>before 1<br>before 2<br>before 3<br>before 4<br>before 5<br>before end<br>enumeration #1<br>1<br>2<br>3<br>4<br>5<br>enumeration #2<br>1<br>2<br>3<br>4<br>5</p>
</blockquote>
<h2 id="譯者小結"><a href="#譯者小結" class="headerlink" title="譯者小結"></a>譯者小結</h2><p>如果真的能夠預期所有的行為的開發人員,<br>真的是好棒棒,<br>對我來說 static class constructor 的行為是超乎預期的,<br>然後對 <code>yield return</code> 的使用場景更有感覺了.<br>本來預計農曆年就可以完成的翻譯,<br>竟然也拖了這麼久,看來我英文還是不行啊. </p>
<p>希望對大家有幫助,也請多多看原文 :)</p>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;出處&quot;&gt;&lt;a href=&quot;#出處&quot; class=&quot;headerlink&quot; title=&quot;出處&quot;&gt;&lt;/a&gt;出處&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.dotnetcurry.com/csharp/1417/csharp-common-mistakes
    
    </summary>
    
    
      <category term="C#" scheme="http://blog.marsen.me/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>AWS 註冊到建立安全性帳戶</title>
    <link href="http://blog.marsen.me/2018/01/26/cloud_learn/aws_startup_with_iam/"/>
    <id>http://blog.marsen.me/2018/01/26/cloud_learn/aws_startup_with_iam/</id>
    <published>2018-01-26T06:24:16.000Z</published>
    <updated>2018-02-28T10:30:00.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="該知道的事"><a href="#該知道的事" class="headerlink" title="該知道的事"></a>該知道的事</h2><ol>
<li>僅作為學習 AWS 的過程記錄用</li>
<li>可能對你有幫助</li>
<li>可能對你沒幫助</li>
<li>有沒有幫助都歡迎你提出問題與討論 </li>
</ol>
<h2 id="創建帳號"><a href="#創建帳號" class="headerlink" title="創建帳號"></a>創建帳號</h2><p>這段蠻簡單的,不贅敘<br>特別一提的事<code>可以使用有VISA的金融卡作金額控管</code><br>比起信用卡動輒數萬到數十萬的額度,<br>金融卡可以更彈性,而且精準的控制預算.</p>
<p>另外說一下,現在AWS有一年的免費額度(已經有好一陣子了),<br><del>在註冊流程跳過付款方式的設定,</del><br><del>實際上也是可以操作的AWS的(目前只有設定IAM).</del><br>(2018/01/31更新)<br>確定<code>可以使用有VISA的金融卡</code>開戶,<br>另外當要實際使用 AWS 的服務時 EX: EC2, Lambda etc…<br>需要綁定信用卡(VISA金融卡也可以)才能繼續使用.</p>
<p>綁定的過程會需要輸入電話,<br>AWS 會撥一通電話給你,<br>螢幕上會出現4個數字,<br>照畫面輸入即可完成信用卡(VISA金融卡)的驗証.</p>
<h2 id="權限控管"><a href="#權限控管" class="headerlink" title="權限控管"></a>權限控管</h2><h3 id="Root-User"><a href="#Root-User" class="headerlink" title="Root User"></a>Root User</h3><p><img src="https://i.imgur.com/kRBApSO.jpg" alt=""><br>完成註冊後,一開始只能使用email登入,這個帳號可以存取AWS所有服務.<br>AWS<strong>不建議使用Root User作為日常的管理帳戶, Root User 應該只被用來建立第一個IAM</strong></p>
<h4 id="重點項目"><a href="#重點項目" class="headerlink" title="重點項目"></a>重點項目</h4><ol>
<li><p>Root User 啟用 <a href="https://aws.amazon.com/iam/details/mfa/" target="_blank" rel="external">MFA</a><br><img src="https://i.imgur.com/X3T5poV.jpg" alt=""><br>首先要下載驗証程式(Google Authenticator),<br>然後下一步到以下畫面時, 用Authenticator掃瞄QR Code,<br><strong>連續輸入兩次授權碼(輸入完第一組後,等待新的授權碼出現再輸入)</strong><br><img src="https://i.imgur.com/viNBe2p.jpg" alt=""><br>可以在 <a href="https://console.aws.amazon.com/iam/home" target="_blank" rel="external">IAM Console</a> 檢查成功了沒<br><img src="https://i.imgur.com/JcC9NVz.jpg" alt=""></p>
</li>
<li><p>建立 IAM User 與指定 Group 權限<br>AWS IAM 的權限觀念是透過 User 與 Group 來組合的,<br>權限是授與 Group , 而 User 隸屬於 Group 便擁有其權限,<br>同時 AWS 提供多組(347組)預設的 Policies, 讓人選擇<br>當然也可以建立自已的 Policy.<br><em>*不確定有沒有反向的 Policy ,</em><br><em>如果有當不同的 Group Policy 有衝突時該如何處理.</em></p>
</li>
</ol>
<p><img src="https://i.imgur.com/Ry9M2sj.jpg" alt=""><br>建立使用者時, 使用AutoGenerated Password時<br>要記得取得 password<br>在最後一步會按下show就會顯示<br><img src="https://i.imgur.com/8DOmpsg.jpg" alt=""></p>
<ol>
<li>設定 AWS Account ID 與 Alias<br><img src="https://i.imgur.com/ETV1LMR.jpg" alt=""></li>
</ol>
<h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h2><ol>
<li>如何禁用 Root user 登入 ? 可以停用而不刪除一個 user account 嗎？<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">root account 無法停用</div><div class="line">IAM User 可以透過 disable passwd 方式停用</div><div class="line">root account 基本的 practice</div><div class="line">1. 啟用 MFA</div><div class="line">2. 移除 Access Creditenail</div><div class="line">概念就跟 Winodws Administrator or Linux root 一樣</div><div class="line">需要時再用</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul>
<li><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html" target="_blank" rel="external">Root User Account</a></li>
<li><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#create-iam-users" target="_blank" rel="external">建立第一個IAM USER</a></li>
</ul>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;該知道的事&quot;&gt;&lt;a href=&quot;#該知道的事&quot; class=&quot;headerlink&quot; title=&quot;該知道的事&quot;&gt;&lt;/a&gt;該知道的事&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;僅作為學習 AWS 的過程記錄用&lt;/li&gt;
&lt;li&gt;可能對你有幫助&lt;/li&gt;
&lt;li&gt;可能對你沒幫助&lt;/
    
    </summary>
    
    
      <category term="AWS" scheme="http://blog.marsen.me/tags/AWS/"/>
    
      <category term="IAM" scheme="http://blog.marsen.me/tags/IAM/"/>
    
      <category term="Root User" scheme="http://blog.marsen.me/tags/Root-User/"/>
    
  </entry>
  
  <entry>
    <title>[好文分享]應用部署的六種策略</title>
    <link href="http://blog.marsen.me/2018/01/07/2018/six_strategies_for_application_deployment/"/>
    <id>http://blog.marsen.me/2018/01/07/2018/six_strategies_for_application_deployment/</id>
    <published>2018-01-07T10:47:51.000Z</published>
    <updated>2018-01-30T16:29:44.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引用出處"><a href="#引用出處" class="headerlink" title="引用出處"></a>引用出處</h2><ul>
<li><a href="https://thenewstack.io/deployment-strategies/" target="_blank" rel="external">原文出處</a></li>
<li><a href="https://itw01.com/22ULE7O.html" target="_blank" rel="external">中譯出處</a></li>
</ul>
<h2 id="正文開始"><a href="#正文開始" class="headerlink" title="正文開始"></a>正文開始</h2><p>目前有各種各樣的技術來將新應用部署到生產環境，<br>所以權衡對系統和終端使用者的影響降至最少，選擇正確的方式是非常重要的。<br>本文將著重討論如下部署策略：   </p>
<ul>
<li>重建部署：版本A下線後版本B上線 </li>
<li>滾動部署（滾動更新或者增量釋出）：版本B緩慢更新並替代版本A </li>
<li>藍綠部署：版本B並行與版本A釋出，然後流量切換到版本B </li>
<li>金絲雀部署：版本B向一部分使用者釋出，然後完全放開 </li>
<li>A/B部署布：版本B只向特定條件的使用者釋出 </li>
<li>影子部署：版本B接受真實的流量請求，但是不產生響應 </li>
</ul>
<p>我們來看一下每個策略最適合哪種使用者使用場景。<br>爲了簡化，我們使用 <a href="https://kubernetes.io" target="_blank" rel="external">Kubernetes</a> ，並用 <a href="https://github.com/ContainerSolutions/k8s-deployment-strategies" target="_blank" rel="external">Minikube</a> 進行例子演示。<br>每個策略的配置例子和詳細步驟都可以在這個 <a href="https://github.com/ContainerSolutions/k8s-deployment-strategies" target="_blank" rel="external">git倉庫</a> 上找到。   </p>
<h3 id="重建部署"><a href="#重建部署" class="headerlink" title="重建部署"></a>重建部署</h3><p>重建策略是一個冗餘的方式，它包含下線版本A，然後部署版本B。<br>這個方式意味著服務的宕機時間依賴於應用下線和啟動耗時。<br><img src="/images/2018/six_strategies_for_application_deployment/recreate.gif" alt=""></p>
<p>優點： </p>
<ul>
<li>便於設定 </li>
<li>應用狀態完整更新 </li>
</ul>
<p>缺點： </p>
<ul>
<li>對使用者影響很大，預期的宕機時間取決於下線時間和應用啟動耗時 </li>
</ul>
<h3 id="滾動部署"><a href="#滾動部署" class="headerlink" title="滾動部署"></a>滾動部署</h3><p>滾動部署策略是指通過逐個替換應用的所有例項，<br>來緩慢釋出應用的一個新版本。<br>通常過程如下：<br>在負載排程後有個版本A的應用例項池，<br>一個版本B的例項部署成功，可以響應請求時，<br>該例項被加入到池中。<br>然後版本A的一個例項從池中刪除並下線。<br>考慮到滾動部署依賴於系統，<br>可以調整如下引數來增加部署時間： </p>
<ul>
<li>並行數，最大批量執行數：同時釋出例項的數目 </li>
<li>最大峰值：考慮到當前例項數，例項可以加入的數目 </li>
<li>最大不可用數：在滾動更新過程中不可用的例項數<br><img src="/images/2018/six_strategies_for_application_deployment/ramped.gif" alt=""><br>優點： </li>
<li>便於設定 </li>
<li>版本在例項間緩慢釋出 </li>
<li>對於能夠處理資料重平衡的有狀態應用非常方便<br>缺點： </li>
<li>釋出/回滾耗時 </li>
<li>支援多個API很困難 </li>
<li>無法控制流量 </li>
</ul>
<h2 id="藍綠部署"><a href="#藍綠部署" class="headerlink" title="藍綠部署"></a>藍綠部署</h2><p>藍綠部署策略與滾動部署不同，<br>版本B（綠）同等數量的被並排部署在版本A（藍）旁邊。<br>當新版本滿足上線條件的測試後，<br>流量在負載均衡層從版本A切換到版本B。<br><img src="/images/2018/six_strategies_for_application_deployment/blue-green.gif" alt=""><br>優點： </p>
<ul>
<li>實時釋出、回滾 </li>
<li>避免版本衝突問題，整個應用狀態統一一次切換<br>缺點： </li>
<li>比較昂貴因為需要雙倍的資源 </li>
<li>在釋放版本到生產環境之前，整個平臺的主流程測試必須執行 </li>
<li>處理有狀態的應用很棘手 </li>
</ul>
<h3 id="金絲雀部署"><a href="#金絲雀部署" class="headerlink" title="金絲雀部署"></a>金絲雀部署</h3><p>金絲雀部署是指逐漸將生產環境流量從版本A切換到版本B。<br>通常流量是按比例分配的。<br>例如90%的請求流向版本A，10%的流向版本B。<br>這個技術大多數用於缺少足夠測試，或者缺少可靠測試，<br>或者對新版本的穩定性缺乏信心的情況下。<br><img src="/images/2018/six_strategies_for_application_deployment/canary.gif" alt=""><br>優點： </p>
<ul>
<li>版本面向一部分使用者釋出 </li>
<li>方便錯誤評估和效能監控 </li>
<li>快速回滾<br>缺點： </li>
<li>釋出緩慢 </li>
</ul>
<h3 id="A-B測試"><a href="#A-B測試" class="headerlink" title="A/B測試"></a>A/B測試</h3><p>A/B測試是指在特定條件下將一部分使用者路由到新功能上。<br>它通常用於根據統計來制定商業決策，而不是部署策略。<br>然而，他們是相關的，可以在金絲雀部署方式上新增額外功能來實現，所以我們這裏簡要介紹一下。<br>這個技術廣泛用於測試特定功能的切換，併發布使用佔大部分的版本。<br>下面是可以用於在版本間分散流量的條件：  </p>
<ul>
<li>瀏覽器cookie </li>
<li>查詢引數 </li>
<li>地理位置 </li>
<li>技術支援：瀏覽器版本、螢幕尺寸、作業系統等 </li>
<li>語言<br><img src="/images/2018/six_strategies_for_application_deployment/a-b.gif" alt=""><br>優點： </li>
<li>多個版本並行執行 </li>
<li>完全控制流量分佈<br>缺點： </li>
<li>需要智慧負載均衡 </li>
<li>對於給定的會話，很難定位問題，分散式跟蹤是必須的 </li>
</ul>
<h3 id="影子部署"><a href="#影子部署" class="headerlink" title="影子部署"></a>影子部署</h3><p>影子部署是指在版本A旁邊釋出版本B，<br>將版本A進來的請求同時分發到版本B，<br>同時對生產環境流量無影響。<br>這是測試新特徵在產品負載上表現的很好用的方式。<br>當滿足上線要求後，則觸發釋出新應用。<br>這個技術配置非常複雜，而且需要特殊條件，尤其是分出請求。<br>例如一個購物車平臺，如果你想影子測試支付服務，<br>你可能最終會是使用者為他們的訂單支付兩次。<br>這種情況下，可以通過建立一個模擬的服務來重複響應使用者的請求。<br><img src="/images/2018/six_strategies_for_application_deployment/shadow.gif" alt=""><br>優點： </p>
<ul>
<li>可以使用生產環境流量進行效能測試 </li>
<li>對使用者無影響 </li>
<li>直到應用的穩定性和效能滿足要求後才釋出<br>缺點： </li>
<li>雙倍資源，成本昂貴 </li>
<li>不是真實使用者測試，可能出現誤導 </li>
<li>配置複雜 </li>
<li>某種情況下需要模擬服務 </li>
</ul>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>部署應用有很多種方法，實際採用哪種方式取決於需求和預算。<br>當釋出到開發或者模擬環境時，重建或者滾動部署是一個好選擇。<br>當釋出到生產環境時，滾動部署或者藍綠部署通常是一個好選擇，<br>但是新平臺的主流程測試是必須的。<br>藍綠部署和影子部署對預算有更高的要求，因為需要雙倍資源。<br>如果應用缺乏測試或者對軟體的功能和穩定性影響缺乏信心，<br>那麼可以使用金絲雀部署或者AB測試或者影子釋出。<br>如果業務需要根據地理位置、語言、作業系統或者瀏覽器特徵等這樣引數來給一些特定的使用者測試，那麼可以採用AB測試技術。<br>最後但並不是最不重要的，影子釋出很複雜，且需要額外工作來模擬響應分支流量請求，<br>當可變操作（郵件、銀行等）呼叫外部依賴時這是必須的，<br>這個技術在升級新資料庫是非常有用，使用影子流量來監控負載下的系統性能。<br>下表可以幫助你選擇正確的策略：<br><img src="/images/2018/six_strategies_for_application_deployment/deployment_strategies.png" alt=""><br>取決於雲服務提供商和平臺，如下文件是理解部署的很好開始：   </p>
<ul>
<li>Amazon Web Services </li>
<li>Docker Swarm </li>
<li>Google Cloud </li>
<li>Kubernetes<br>我希望這是有用的，如果有任何問題或者反饋，可以在下面評論<br>(正文結束)</li>
</ul>
<h2 id="補充表格翻譯"><a href="#補充表格翻譯" class="headerlink" title="補充表格翻譯"></a>補充表格翻譯</h2><table>
<thead>
<tr>
<th>策略</th>
<th>服務不斷線</th>
<th>真實環境測試</th>
<th>目標客戶分群</th>
<th>預算成本</th>
<th>退版時間</th>
<th>使用者影響</th>
<th>複雜度</th>
</tr>
</thead>
<tbody>
<tr>
<td>重建部署</td>
<td>✖</td>
<td>✖</td>
<td>✖</td>
<td>★☆☆</td>
<td>★★★</td>
<td>★★★</td>
<td>☆☆☆</td>
</tr>
<tr>
<td>滾動部署</td>
<td>✔</td>
<td>✖</td>
<td>✖</td>
<td>★☆☆</td>
<td>★★★</td>
<td>★☆☆</td>
<td>★☆☆</td>
</tr>
<tr>
<td>藍綠部署</td>
<td>✔</td>
<td>✖</td>
<td>✖</td>
<td>★★★</td>
<td>☆☆☆</td>
<td>★★☆</td>
<td>★★☆</td>
</tr>
<tr>
<td>金絲雀部署</td>
<td>✔</td>
<td>✔</td>
<td>✖</td>
<td>★☆☆</td>
<td>★☆☆</td>
<td>★☆☆</td>
<td>★★☆</td>
</tr>
<tr>
<td>A/B部署</td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
<td>★☆☆</td>
<td>★☆☆</td>
<td>★☆☆</td>
<td>★★★</td>
</tr>
<tr>
<td>影子部署</td>
<td>✔</td>
<td>✔</td>
<td>✖</td>
<td>★★★</td>
<td>☆☆☆</td>
<td>☆☆☆</td>
<td>★★★</td>
</tr>
</tbody>
</table>
<p>非常實用的文章,可惜中譯的圖片並非gif,原文的超聯結也掉失,<br>特別重新修正以上問題,留作記錄</p>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引用出處&quot;&gt;&lt;a href=&quot;#引用出處&quot; class=&quot;headerlink&quot; title=&quot;引用出處&quot;&gt;&lt;/a&gt;引用出處&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://thenewstack.io/deployment-strategies/&quot; 
    
    </summary>
    
    
      <category term="Kubernetes" scheme="http://blog.marsen.me/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>代碼審查與交付的戰爭ー標準、風格與原則</title>
    <link href="http://blog.marsen.me/2018/01/04/2018/coding_standard_and_coding_style_and_principle/"/>
    <id>http://blog.marsen.me/2018/01/04/2018/coding_standard_and_coding_style_and_principle/</id>
    <published>2018-01-03T16:51:27.000Z</published>
    <updated>2018-01-30T16:29:44.594Z</updated>
    
    <content type="html"><![CDATA[<h6 id="Coding-Standard-Code-Review-Pull-Request-amp-Delivery"><a href="#Coding-Standard-Code-Review-Pull-Request-amp-Delivery" class="headerlink" title="Coding Standard / Code Review / Pull Request &amp; Delivery"></a>Coding Standard / Code Review / Pull Request &amp; Delivery</h6><p><img src="https://i.imgur.com/tssraf0.jpg" alt=""></p>
<h2 id="故事背景"><a href="#故事背景" class="headerlink" title="故事背景"></a>故事背景</h2><ol>
<li>團隊的部署流程是 Github Flow 與 Git Flow 混用 , 給它起個名字叫 GG Flow 好了.</li>
<li>GG Flow 的過程需要開發人員需要透過 <strong>Pull Request</strong> 將修改推送給產品 </li>
<li>擁有權限 Merge Pull Request 的成員被叫作 Reviewer</li>
<li>Reviewer 通常由較資深人員或部門主管擔任,所以通常有比較多的<del>無用</del>會議要開</li>
<li>Reviewer 在 Merge 之前需要作 <strong>Code Review</strong></li>
<li>Reviewer 需要遵循 <strong>Coding Standard</strong> 作 Code Review</li>
</ol>
<h2 id="實務面臨的問題與副作用"><a href="#實務面臨的問題與副作用" class="headerlink" title="實務面臨的問題與副作用"></a>實務面臨的問題與副作用</h2><h4 id="Coding-Standard-並不能考慮到所有狀況"><a href="#Coding-Standard-並不能考慮到所有狀況" class="headerlink" title="Coding Standard 並不能考慮到所有狀況"></a>Coding Standard 並不能考慮到所有狀況</h4><ol>
<li>所以 Reviewers 會定期針對不同的狀況開會討論 Coding Standard<ul>
<li>Coding Standard 會<strong>不定期改變</strong> , 但是透過Reviewer佈達的方式,讓第一線的RD其實難以知道其全貌.</li>
<li>Coding Standard 改變後不會全面的翻改程式,實務上是作到哪裡改到哪裡</li>
<li>以上兩點導致 Source Code 裡面有很多符合不同時期的 Coding Standard 的 Code</li>
<li>任一個時間點, 誰都無法保証完全符合最新的 Coding Standard </li>
</ul>
</li>
<li>人性,開發者會<del>COPY/PASTE 方法開發</del>參考Legacy Code開發<ul>
<li>Legacy Code 不符合新的 Coding Standard</li>
<li>Reviewer 也是人, 所以 Code Review 時也會疏漏,而 Merge 進去不符合新的 Coding Standard 的 Code</li>
<li>所以 Source Code 裡面還是有很多不同時期的 Coding Standard 的 Code</li>
</ul>
</li>
<li>回歸一開始的問題 Coding Standard 並不能考慮到所有狀況 <ul>
<li>還沒有開會前, 不同的 Reviewer 會有不同的想法</li>
<li>開會後,在執行Code Review時, 不同的 Reviewer 會有不同的作法</li>
<li>當一個 PR 有多人 Reviewer 時, 會有不同的意見 PR 因此被延遲 Merge</li>
<li>結果,<strong>交付會變慢</strong>.</li>
</ul>
</li>
</ol>
<h2 id="反思-標準還是風格？"><a href="#反思-標準還是風格？" class="headerlink" title="反思,標準還是風格？"></a>反思,標準還是風格？</h2><p>思考一下,開發程式碼的目標與價值是什麼 ?<br>寫出 Clearn Code ?<br>還是交付產品 ?<br>這樣子的 Source Code 真的是 Clearn Code 嗎？</p>
<h2 id="自問自答"><a href="#自問自答" class="headerlink" title="自問自答"></a>自問自答</h2><h4 id="Q1-我們該有標準嗎？"><a href="#Q1-我們該有標準嗎？" class="headerlink" title="Q1. 我們該有標準嗎？"></a>Q1. 我們該有標準嗎？</h4><p>A1. 當然要有標準,不過標準之所以為標準,應該有以下幾個特點. </p>
<ul>
<li>它應該要很簡單, 像是Class與欄位的命名規則</li>
<li>它應放諸四海皆準, 不應該輕易被修改</li>
<li>它應該可以被自動化的檢測<br>假設能作到這3點, 這件事應該可以被自動化工具處理掉 . </li>
</ul>
<h4 id="Q2-實務上就是很複雜-所以才需要討論制訂標準啊"><a href="#Q2-實務上就是很複雜-所以才需要討論制訂標準啊" class="headerlink" title="Q2. 實務上就是很複雜, 所以才需要討論制訂標準啊"></a>Q2. 實務上就是很複雜, 所以才需要討論制訂標準啊</h4><p>A2.<br>在實務上遇到很複雜的情況, 大多需要依賴約定成俗方式規範.<br>這是一種<strong>風格</strong>或<strong>原則</strong> ;<br>簡單的分類方法,<br>如果無法透過自動化工具作檢測,<br>就不應該歸類為<strong>標準</strong>.</p>
<p><em>註:有機會再介紹自動化的檢測工具</em></p>
<h4 id="Q3-風格或原則跟標準有何不同？"><a href="#Q3-風格或原則跟標準有何不同？" class="headerlink" title="Q3. 風格或原則跟標準有何不同？"></a>Q3. <strong>風格</strong>或<strong>原則</strong>跟<strong>標準</strong>有何不同？</h4><p>A3. 如上所說,標準應該能被自動化,<br>風格應該是團隊的文化自然形成的產物,<br>具體的實作可以透過讓開發者<strong>彼此之間作代碼審核</strong><br>或是<strong>結對編程</strong>培養出屬於團隊的風格,<br>風格要基於標準之上,但是不能違反原則;</p>
<p>以下的原則可以作為參考</p>
<ul>
<li>可以建置並通過測試</li>
<li>可讀性<ul>
<li>self documenting</li>
<li>有用的註解 </li>
</ul>
</li>
<li>公開方法要可以被測試<ul>
<li>小心使用靜態類別</li>
<li>注意new Instance的時機</li>
<li>重複的代碼應重構</li>
</ul>
</li>
<li>保持 SOLID </li>
</ul>
<p>初期的可能會發生在「{」要不要換行之類的問題上揪結之類的蠢事,<br>如果可以自動化,就把它作成標準吧…<br>如果不行的話, 就別揪結了.  </p>
<p>實務上可能遇到各種狀況,<br>把Reviewer的權限下放到各個開發者身上,<br>或是使用結對編程,<br>就讓團隊成員去討論與決定風格.  </p>
<p>以標準為根基,原則為天,<br>踩穩腳步,不要超出天空,<br>就讓團隊自由發揮吧. </p>
<p><strong>最後,持續交付會比每兩周花一個小時開會決定Style的細節好多了. 不是嗎？</strong></p>
<h2 id="其它團隊分享的具體作法"><a href="#其它團隊分享的具體作法" class="headerlink" title="其它團隊分享的具體作法"></a>其它團隊分享的具體作法</h2><ol>
<li>超過一定時間就讓成員擁Merge權限</li>
<li>Release權限仍集中控管</li>
<li>錯了再改就好(保持敏捷)</li>
<li>給pair作code review與merge (避免一人思維陷井)</li>
<li>兩個人無法解決時找第三方</li>
<li>release 功能 優先於 一致的 coding standard</li>
<li>品質由測試管控而非 reviewer</li>
<li>先有測試才有重構</li>
<li>可讀性 優於 枝微末節的coding standard實踐</li>
<li>善用自動化工具( sonarqube / stylecop )</li>
</ol>
<p>(fin)</p>
<h5 id="補充-社群觀點"><a href="#補充-社群觀點" class="headerlink" title="補充 社群觀點"></a>補充 <a href="https://www.facebook.com/groups/616369245163622/permalink/1225873964213144/" target="_blank" rel="external">社群觀點</a></h5><ul>
<li>coding style一般不管的。</li>
<li>class name／variable name，一定要叫有意義的名字。</li>
<li>local scope variable，換多少行，indentation，這些是小事</li>
<li>一個成熟的developer，隨時會被上司命令這些遠古火星文明（legacy system）去做考古工作</li>
<li>coding style這些事，就像emacs和vim之戰一樣，戰到skynet出來了也不會戰完的</li>
<li>如果要開會去討論coding style，最終很可能讓團隊口服心不服地去跟隨我的Coding Style。</li>
<li>在Coding Style這種低層次的小事上用光了團隊成員之間互相容忍的能量，而在更重要的大事上無法好好合作。</li>
<li>有很多事是比Coding Style重要的。<ul>
<li>Object Modeling是否跟business logic一致？</li>
<li>還是Object有這個attribute但是根本沒在用？</li>
<li>Code Change是否有做好測試？</li>
<li>系統架構是否合理</li>
<li>有做好High-Avalibility嗎？</li>
<li>有沒有Race Condition？</li>
</ul>
</li>
<li>是其是，非其非。真正有道理的，你說了對方便自然會聽下去。</li>
<li>「Senior」是代表自己在專業上懂得比別人多，而不是比別人身份高級。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;Coding-Standard-Code-Review-Pull-Request-amp-Delivery&quot;&gt;&lt;a href=&quot;#Coding-Standard-Code-Review-Pull-Request-amp-Delivery&quot; class=&quot;heade
    
    </summary>
    
    
      <category term="Coding Standard" scheme="http://blog.marsen.me/tags/Coding-Standard/"/>
    
  </entry>
  
  <entry>
    <title>2017年的學習回顧與展望</title>
    <link href="http://blog.marsen.me/2018/01/01/2018/2017_learned/"/>
    <id>http://blog.marsen.me/2018/01/01/2018/2017_learned/</id>
    <published>2017-12-31T16:00:51.000Z</published>
    <updated>2018-01-30T16:29:44.593Z</updated>
    
    <content type="html"><![CDATA[<h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>參加了兩個活動,分別是<a href="https://blog.marsen.me/2017/04/23/unitestwriting/">單元測試這樣玩就對了</a>,與<a href="https://blog.marsen.me/2017/05/19/testingislearning/">測試即學習</a>;  </p>
<h3 id="單元測試這樣玩就對了"><a href="#單元測試這樣玩就對了" class="headerlink" title="單元測試這樣玩就對了"></a><a href="https://blog.marsen.me/2017/04/23/unitestwriting/">單元測試這樣玩就對了</a></h3><p>最大的收獲是突破了寫測試的心魔, 在那之前總覺得 TDD 只是口號, 或是烏托邦的開發理想.<br>雖然之前也有花大錢出外受訓, 或是公司內部的內訓.<br>手上也有一些前輩的測試代碼, 但是就是沒有「感覺」,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">不過仍然感謝前幾年的自已有將資源花在測試上面,  </div><div class="line">累積了兩年的測試經驗,  </div><div class="line">融會貫通卻只是一瞬間的事</div></pre></td></tr></table></figure></p>
<p>最主要是講者展現了實務上面的需求與改進,<br>過去寫的加法運算, 或是<a href="https://zh.wikipedia.org/wiki/猜單詞遊戲" target="_blank" rel="external">吊人遊戲</a>,<br>雖然也是從無到,也是先寫測試,<br>但或許是太過強調 TDD 太過強調從無到有<br>總與實際開發經驗相違背,<br>講者在過程中一句 <strong>「不要管先寫測試還是程式」</strong><br>反而更貼近真實,先寫程式,再想想怎麼測試？<br>為了測試, 再重構, 逐步分解的過程令我大開眼界.  </p>
<p>過去曾與人討論過TDD的議題,<br>總會得到「實務與理論有差別」、「其背景與環境因素不能寫測試」<br>這類似是而非的回答,當下我也無法辯駁<br>現在想起來只能莞爾. </p>
<p>測試趨動開發不等於一定要先測試,<br>特別是習慣於先寫產品程式的人,<br>不仿先寫產品程式, 再寫測試而趨動重構<br>當寫習慣了,知道哪些耦合會帶來重構的代價時,<br>再寫一次就人性就會自動迴避這些不好的Patten .</p>
<p>別管順序,但是記得寫測試.</p>
<h3 id="測試即學習"><a href="#測試即學習" class="headerlink" title="測試即學習"></a><a href="https://blog.marsen.me/2017/05/19/testingislearning/">測試即學習</a></h3><p>梅老師的課也是很毀三觀的,<br>老實說我跟本不知道他在幹嘛,<br>塔羅牌拿出來的時候,<br>我真的以為是<a href="https://zh.wikipedia.org/wiki/郭美江傳道爭議事件#%E5%BD%B1%E7%89%87%E4%BB%A5%E5%A4%96%E4%B9%8B%E5%BD%B1%E9%9F%BF" target="_blank" rel="external">美江</a>再現(那個時候<a href="https://goo.gl/zD51h3" target="_blank" rel="external">Seafood</a>還沒有業力引爆( ･ω･)( ･ω･)( ･ω･))<br>那堂課的目標族群應該是QA,<br>不過這個時代不應自我設限,<br>複習一下梅老師的分享,  </p>
<p>探索測試</p>
<ul>
<li>儘可能的發散</li>
<li>摹仿別人看事情的角度</li>
<li>有意識的學習(mindful learning)<ul>
<li>記錄</li>
<li>總結</li>
<li>歸納問題的核心</li>
<li>給它起一個名字(沒有專有名詞的話)</li>
<li>有意識的逃離第一印象</li>
<li>小心不經意的盲區(inattentional blindness)</li>
<li>數量 X 練習 X 思考 X 學習 = 提昇</li>
</ul>
</li>
</ul>
<p>對我來說,<strong>給它起一個名字</strong>真是超級有用的,<br>新認識的朋友就叫作「王大棰」, 新的技術就叫「起司包」, 新的概念就叫「黑盒子」等…<br>不要過於專研於名詞, 用自已能理解的名字去框那個新事物的範圍,<br>最後再把名字用大家通用的名字取代掉就好了.<br>看了很多的方法論,會發現其實觀念沒什麼改變,<br>只是新的名詞會一直冒出來,<br>唯物主義、馬基維利主義、不擇手段、實用主義<br>改善、KANBAN、敏捷、精實  balabala…</p>
<h2 id="“没有时间”-完美的借口"><a href="#“没有时间”-完美的借口" class="headerlink" title="“没有时间”- 完美的借口"></a><a href="http://www.danielteng.com/2012/09/25/no-time-to-learn-perfect-excuse/" target="_blank" rel="external">“没有时间”- 完美的借口</a></h2><p>2017年影響我最深的一篇Blog,<br>2012年的文章, 篇幅也不長,<br>觀念也很簡單, 作就對了, 作壞了就丟掉再作一次,<br>很多的書都要我們刻意練習,<br>但是我們的時間哪有那麼多呢？<br>長大了之後,才來1萬小時的修練是不是太晚了呢？  </p>
<p>下半年公司開始推行測試,<br>基層的工程師們其實反彈的聲音一直都在,<br>雖然一直有教育訓練與培養種子,<br>不過大多淪為口號的狀態,<br>我也只能用這篇文章作為勉勵.  </p>
<p>其實現在的版本控制系統已經非常便利,<br>要建立一個Sandbox的分支,<br>在裡面嚐試各種可能性是非常容易的,<br>作壞了丟掉分支就好了,<br>身為專業的工程人員,測試是必須的,失敗也是,<br>在沙箱內失敗,其實是摔不疼的,勇敢嚐試吧. </p>
<h2 id="生產力"><a href="#生產力" class="headerlink" title="生產力"></a>生產力</h2><p>2016年是時間記錄的一年,<br>那2017年就是把記錄的時間,<br>轉換成生產力的一年.<br>幾本影響比較多的書,不過或許我仍需要二讀至三讀以上</p>
<ul>
<li>最有生產力的一年 → 時間X精力X專注力 = 生產力</li>
<li>GTD → 下一步要作什麼？</li>
<li>軟技能 → 自我營銷</li>
</ul>
<p>新的一年重心會放在習慣上面,<br>因為讓習慣趨動行為,<br>比起刻意遵循某些方法要好得多,<br>「刻意」太浪費精神力了,<br>下一步會如何呢？<br>希望能翻轉自已</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>順利的帶媽媽出國了,或許對一些人來說不算什麼成就吧,<br>新的一年有些機會,去日本、以色列、俄羅斯、馬來西亞,<br>雖然八字還沒有一撇, 但至少會去一個地方吧…<br>其他的地方就只能見機行事了.</p>
<p>新年快樂<br>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;測試&quot;&gt;&lt;a href=&quot;#測試&quot; class=&quot;headerlink&quot; title=&quot;測試&quot;&gt;&lt;/a&gt;測試&lt;/h2&gt;&lt;p&gt;參加了兩個活動,分別是&lt;a href=&quot;https://blog.marsen.me/2017/04/23/unitestwriting/&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Visual Studio 2017 MSTest Framework 異常修正</title>
    <link href="http://blog.marsen.me/2017/12/11/test_learn/vs2017_mstest_with_nuget/"/>
    <id>http://blog.marsen.me/2017/12/11/test_learn/vs2017_mstest_with_nuget/</id>
    <published>2017-12-11T03:17:08.000Z</published>
    <updated>2018-01-30T16:29:44.660Z</updated>
    
    <content type="html"><![CDATA[<h2 id="應該要知道的事"><a href="#應該要知道的事" class="headerlink" title="應該要知道的事"></a>應該要知道的事</h2><ul>
<li>這是踩雷筆記</li>
<li>2017的筆記可能會隨時間變得沒有參考價值</li>
<li>Visual Studio 2017的問題,並不一定適用其他版本</li>
</ul>
<h2 id="情境"><a href="#情境" class="headerlink" title="情境"></a>情境</h2><p><img src="https://i.imgur.com/FDDtc9V.jpg" alt="載入測試時發生例外狀況"><br>原本使用 Visual Studio 2015 建立的測試專案,<br>升級到 Visual Studio 2017 後, 發生以下錯誤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[2017/12/11 上午 02:09:59 Error] 測試探索程式 &apos;SpecRunTestDiscoverer&apos; </div><div class="line">載入測試時發生例外狀況。例外狀況: 無法載入檔案或組件 </div><div class="line">&apos;Microsoft.VisualStudio.QualityTools.UnitTestFramework,</div><div class="line">Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&apos;</div><div class="line">或其相依性的其中之一。 系統找不到指定的檔案。</div></pre></td></tr></table></figure></p>
<h2 id="導致結果"><a href="#導致結果" class="headerlink" title="導致結果"></a>導致結果</h2><p><img src="https://i.imgur.com/2REPRzG.jpg" alt="原本的測試數量為1942,變成459,遺失了7成5的測試案例."></p>
<ol>
<li>測試專案會找不到測試,或是測試數量不正確.</li>
<li>可以使用 Visual Studio 2015 重新執行探測索測試,即可排除問題.</li>
</ol>
<h2 id="VS2015-已移除或未安裝該怎麼辦？"><a href="#VS2015-已移除或未安裝該怎麼辦？" class="headerlink" title="VS2015 已移除或未安裝該怎麼辦？"></a>VS2015 已移除或未安裝該怎麼辦？</h2><p>透過MsTest直接加入<br><code>Microsoft.VisualStudio.QualityTools.UnitTestFramework</code><br>的參考已經是舊的方法了, </p>
<h4 id="在-vs2017-建議的解決方案如下"><a href="#在-vs2017-建議的解決方案如下" class="headerlink" title="在 vs2017 建議的解決方案如下:"></a>在 vs2017 建議的解決方案如下:</h4><ul>
<li>移除方案中所有對 <code>Microsoft.VisualStudio.QualityTools.UnitTestFramework</code> 的參考</li>
<li>透過 Nuget 安裝 MSTest.TestAdapter </li>
<li>透過 Nuget 安裝 MSTest.TestFramework</li>
<li>關閉 vs2017</li>
<li>移除 <code>%temp%\VisualStudioTestExplorerExtensions</code>內所有檔案</li>
<li>重啟 vs2017 並建置以觸發探索測試<br><img src="https://i.imgur.com/RPI77KN.jpg" alt="透過 Nuget 安裝 MSTest.TestAdapter/MSTest.TestFramework"><br><img src="https://i.imgur.com/JQ7zf2S.jpg" alt="重啟 vs2017 並建置以觸發探索測試"></li>
</ul>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul>
<li><a href="https://developercommunity.visualstudio.com/content/problem/14673/unit-test-fail-cannot-load-microsoftvisualstudiote.html" target="_blank" rel="external">Unit test fail - cannot load Microsoft.VisualStudio.TestPlatform.TestFramework.Extensions</a></li>
</ul>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;應該要知道的事&quot;&gt;&lt;a href=&quot;#應該要知道的事&quot; class=&quot;headerlink&quot; title=&quot;應該要知道的事&quot;&gt;&lt;/a&gt;應該要知道的事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;這是踩雷筆記&lt;/li&gt;
&lt;li&gt;2017的筆記可能會隨時間變得沒有參考價值&lt;/li&gt;
&lt;
    
    </summary>
    
    
      <category term="MsTest" scheme="http://blog.marsen.me/tags/MsTest/"/>
    
      <category term="Visual Studio" scheme="http://blog.marsen.me/tags/Visual-Studio/"/>
    
  </entry>
  
  <entry>
    <title>單元測試與重構記錄(二) 發問篇</title>
    <link href="http://blog.marsen.me/2017/12/08/test_learn/integrated_testing_partice2_question/"/>
    <id>http://blog.marsen.me/2017/12/08/test_learn/integrated_testing_partice2_question/</id>
    <published>2017-12-08T11:04:42.000Z</published>
    <updated>2018-01-30T16:29:44.625Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Q1-Controller-要測試嗎？"><a href="#Q1-Controller-要測試嗎？" class="headerlink" title="Q1 Controller 要測試嗎？"></a>Q1 Controller 要測試嗎？</h2><h3 id="Logics-in-controller"><a href="#Logics-in-controller" class="headerlink" title="Logics in controller"></a>Logics in controller</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">[Route(<span class="string">"Member/Get/&#123;Id&#125;"</span>)]</div><div class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">GetMemeberList</span>(<span class="params"><span class="keyword">long</span> Id, <span class="keyword">string</span> cc = <span class="string">"f"</span></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> cleanCache = <span class="literal">false</span>;</div><div class="line">    <span class="comment"><span class="doctag">///</span>/ logics here</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.IsFromCompany() &amp;&amp; cc == <span class="string">"t"</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="comment"><span class="doctag">///</span>/ do something ...</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> memeberList = <span class="keyword">this</span>.memeberService.GetmemeberList(Id, cleanCache);            </div><div class="line">        <span class="comment"><span class="doctag">///</span>/ logics here</span></div><div class="line">        <span class="keyword">if</span> (memeberList.Any())</div><div class="line">        &#123;</div><div class="line">            <span class="comment"><span class="doctag">///</span>/ do something ...</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="comment"><span class="doctag">///</span>/ do something ...</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.Json(result, JsonRequestBehavior.AllowGet);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Exception ex)</div><div class="line">    &#123;</div><div class="line">        <span class="comment"><span class="doctag">///</span>/ logics here</span></div><div class="line">        <span class="comment"><span class="doctag">///</span>/ do something ...                </span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="自問自答"><a href="#自問自答" class="headerlink" title="自問自答"></a>自問自答</h4><p>我認為要，<br>但是對於WebAPI回傳的<code>JsonResult</code>或是<code>ActionResult</code><br>需要轉形才能作驗証<br>可以考慮整合測試勝於單元測試,<br>Controller的通常是面對 Client Side 的呼叫.</p>
<h2 id="Q2-當-Controller-只有取資料的邏輯"><a href="#Q2-當-Controller-只有取資料的邏輯" class="headerlink" title="Q2 當 Controller 只有取資料的邏輯"></a>Q2 當 Controller 只有取資料的邏輯</h2><h3 id="No-Logics-in-Controller"><a href="#No-Logics-in-Controller" class="headerlink" title="No Logics in Controller"></a>No Logics in Controller</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params"></span>)</span></div><div class="line">&#123;    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.Service.GetIndex();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Q3-當-Service-只有取資料的邏輯"><a href="#Q3-當-Service-只有取資料的邏輯" class="headerlink" title="Q3 當 Service 只有取資料的邏輯"></a>Q3 當 Service 只有取資料的邏輯</h2><h3 id="No-Logics-in-Service"><a href="#No-Logics-in-Service" class="headerlink" title="No Logics in Service"></a>No Logics in Service</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Member <span class="title">Get</span>(<span class="params"><span class="keyword">long</span> id</span>)</span></div><div class="line">&#123;    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.DataAccessor.GetMember(id);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="自問自答-1"><a href="#自問自答-1" class="headerlink" title="自問自答"></a>自問自答</h4><p>我認為不要,<br>要測試商業邏輯,不要在意覆蓋率</p>
<h2 id="Q4-當Service只有取Catch資料的邏輯"><a href="#Q4-當Service只有取Catch資料的邏輯" class="headerlink" title="Q4. 當Service只有取Catch資料的邏輯"></a>Q4. 當Service只有取Catch資料的邏輯</h2><h3 id="No-Logics-in-Service-just-call-another-service"><a href="#No-Logics-in-Service-just-call-another-service" class="headerlink" title="No Logics in Service , just call another service"></a>No Logics in Service , just call another service</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Member <span class="title">Get</span>(<span class="params"><span class="keyword">long</span> id</span>)</span></div><div class="line">&#123;   </div><div class="line">    <span class="keyword">var</span> enableCache = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">var</span> result = <span class="keyword">this</span>.CacheService.GetCacheData(</div><div class="line">        cacheKey,</div><div class="line">        () =&gt; &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.DataAccessor.GetMember(id);</div><div class="line">        &#125;,</div><div class="line">        enableCache</div><div class="line">    );    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="自問自答-2"><a href="#自問自答-2" class="headerlink" title="自問自答"></a>自問自答</h4><p>同上,仍然不需要,<br>要測試商業邏輯,不要在意覆蓋率,<br>要注意的或許是<code>CacheService.GetCacheData</code>是不是有包測試 ?<br>一般來說,Cache的功能很泛用,測試的報酬率很高</p>
<h2 id="Q5-承上-當邏輯存在Func參數之中？"><a href="#Q5-承上-當邏輯存在Func參數之中？" class="headerlink" title="Q5. 承上,當邏輯存在Func參數之中？"></a>Q5. 承上,當邏輯存在Func參數之中？</h2><h3 id="Logics-in-Func"><a href="#Logics-in-Func" class="headerlink" title="Logics in Func"></a>Logics in Func</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Member <span class="title">Get</span>(<span class="params"><span class="keyword">long</span> id</span>)</span></div><div class="line">&#123;   </div><div class="line">    <span class="keyword">var</span> enableCache = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">var</span> result = <span class="keyword">this</span>.CacheService.GetCacheData(</div><div class="line">        cacheKey,</div><div class="line">        () =&gt; &#123;</div><div class="line">            <span class="comment"><span class="doctag">///</span>/ logics here</span></div><div class="line">            <span class="keyword">if</span>(id &gt; <span class="number">9487</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.MemberAccessor.GetMember(id);</div><div class="line">            &#125;<span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.MemberV2Accessor.GetMember(id);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;,</div><div class="line">        enableCache</div><div class="line">    );    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="自問自答-3"><a href="#自問自答-3" class="headerlink" title="自問自答"></a>自問自答</h4><p>暫時無解,<br>或許是這樣Pattern不適合測試,需要調整架構嗎？<br>為了測試多包成一個公開方法,反而失去匿名函數的彈性優點,<br>不在匿名函數內寫邏輯更不合理,待求解答</p>
<h2 id="Q6-當邏輯在DA層或ORM的Query中要如何測試？"><a href="#Q6-當邏輯在DA層或ORM的Query中要如何測試？" class="headerlink" title="Q6.當邏輯在DA層或ORM的Query中要如何測試？"></a>Q6.當邏輯在DA層或ORM的Query中要如何測試？</h2><h3 id="Logics-in-ORM"><a href="#Logics-in-ORM" class="headerlink" title="Logics in ORM"></a>Logics in ORM</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">上略...</div><div class="line"><span class="keyword">using</span> (<span class="keyword">var</span> transactionScope = <span class="keyword">new</span> TransactionScope(TransactionScopeOption.Required, transactionOptions))</div><div class="line">&#123;</div><div class="line">    <span class="keyword">using</span> (Entities context = Entities.CreateNew(isReadOnly: <span class="literal">true</span>))</div><div class="line">    &#123;</div><div class="line">        <span class="comment"><span class="doctag">///</span>/ logics here</span></div><div class="line">        <span class="keyword">var</span> query = <span class="keyword">from</span> a <span class="keyword">in</span> context.Activies.Valids()</div><div class="line">                    <span class="keyword">where</span> a.Activies_StartDateTime &lt;= startTime &amp;&amp;</div><div class="line">                    a.Activies_EndDateTime &gt;= now &amp;&amp;</div><div class="line">                    a.Activies_ShopId == shopId &amp;&amp;</div><div class="line">                    a.ActiviesCondition.Any(i =&gt; i.Activies_ValidFlag</div><div class="line">                    &amp;&amp; TypeList.Contains(i.Activies_TypeDef))                    </div><div class="line">                    <span class="keyword">select</span> a;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="自問自答-4"><a href="#自問自答-4" class="headerlink" title="自問自答"></a>自問自答</h4><p>不適用單元測試,應該整合測試作包覆</p>
<h2 id="Q7-當邏輯在MappingProfile該如何測試"><a href="#Q7-當邏輯在MappingProfile該如何測試" class="headerlink" title="Q7. 當邏輯在MappingProfile該如何測試?"></a>Q7. 當邏輯在MappingProfile該如何測試?</h2><h3 id="Logics-in-MappingProfile"><a href="#Logics-in-MappingProfile" class="headerlink" title="Logics in MappingProfile"></a>Logics in MappingProfile</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">Mapper.CreateMap&lt;PageEntity, UserPageEntity&gt;()</div><div class="line">	  .ForMember(i =&gt; i.Id, s =&gt; s.MapFrom(i =&gt; i.User_Id))</div><div class="line">	  .ForMember(i =&gt; i.Title, s =&gt; s.MapFrom(i =&gt; i.User_Name))</div><div class="line">	  .ForMember(i =&gt; i.PageName, s =&gt; s.MapFrom(i =&gt; i.User_Name + i.User_LastName))</div><div class="line">	  .ForMember(i =&gt; i.LightBox, s =&gt; s.MapFrom(i =&gt; i.User_Sex == <span class="string">"male"</span> ? <span class="literal">true</span> : <span class="literal">false</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="自問自答-5"><a href="#自問自答-5" class="headerlink" title="自問自答"></a>自問自答</h4><p>要作測試,檢查欄位Mapping是否正確,<br>但實務上若重用性不高,寫MappingProfile不如直接在代碼內轉換.<br>可以少寫MappingProfile的測試.</p>
<p>待解答…<br>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Q1-Controller-要測試嗎？&quot;&gt;&lt;a href=&quot;#Q1-Controller-要測試嗎？&quot; class=&quot;headerlink&quot; title=&quot;Q1 Controller 要測試嗎？&quot;&gt;&lt;/a&gt;Q1 Controller 要測試嗎？&lt;/h2&gt;&lt;h3 i
    
    </summary>
    
    
      <category term="Unit Testing" scheme="http://blog.marsen.me/tags/Unit-Testing/"/>
    
      <category term="Integrated Testing" scheme="http://blog.marsen.me/tags/Integrated-Testing/"/>
    
  </entry>
  
  <entry>
    <title>AWS EC2開機筆記</title>
    <link href="http://blog.marsen.me/2017/12/08/cloud_learn/aws_creat_ec2_instance/"/>
    <id>http://blog.marsen.me/2017/12/08/cloud_learn/aws_creat_ec2_instance/</id>
    <published>2017-12-08T08:42:42.000Z</published>
    <updated>2018-01-30T16:29:44.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="應該知道的事"><a href="#應該知道的事" class="headerlink" title="應該知道的事"></a>應該知道的事</h2><ul>
<li>這個是教育訓練的筆記</li>
<li>使用web console 建立ec2</li>
<li>使用cli 建立ec2</li>
<li>2017的筆記可能會隨時間變得沒有參考價值</li>
<li>關鍵參數都打馬賽克,沒有牽扯到EBS/S3/VPC</li>
<li>對你可能沒有幫助</li>
</ul>
<h2 id="Web-Console"><a href="#Web-Console" class="headerlink" title="Web Console"></a>Web Console</h2><ol>
<li><p>login AWS</p>
</li>
<li><p>進入EC2<br><img src="https://i.imgur.com/hRFwjzr.jpg" alt=""></p>
</li>
<li><p>Launch Instance<br><img src="https://i.imgur.com/g9vlacA.jpg" alt=""></p>
</li>
<li><p>選擇AMI(Amazon Machine Image )<br><img src="https://i.imgur.com/dVKPsAp.jpg" alt=""></p>
</li>
<li><p>選擇Instance Type(有錢隨便選,沒錢選t2.nano)<br><img src="https://i.imgur.com/61gG2pd.jpg" alt=""></p>
</li>
<li><p>設定 Instance Details<br><img src="https://i.imgur.com/NkbKrzL.jpg" alt=""></p>
</li>
<li><p>如果想在開機的時候自動安裝一些程式,可以在<code>Advanced Details</code> 加語法<br>windows AMI請用 <code>Powershell</code><br><img src="https://i.imgur.com/bJxWlgd.jpg" alt=""></p>
</li>
<li><p>加硬碟<br><img src="https://i.imgur.com/MP9igLc.jpg" alt=""></p>
</li>
<li><p>加tag<br><img src="https://i.imgur.com/xDTx2nv.jpg" alt=""></p>
</li>
<li><p>設定Configure Security Group<br><img src="https://i.imgur.com/wximWw1.jpg" alt=""></p>
</li>
<li><p>預覽與啟動<br><img src="https://i.imgur.com/6Y4fcOI.jpg" alt=""></p>
</li>
<li><p>最後一步,選擇key-pair<br><img src="https://i.imgur.com/fRhUafI.jpg" alt=""></p>
</li>
</ol>
<h2 id="CLI-command"><a href="#CLI-command" class="headerlink" title="CLI command"></a>CLI command</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aws ec2 run-instances --image-id ami-da9e2cbc --count 1 --instance-type t2.nano --subnet-id subnet-cxxxxxxx --user-data file://userdata.sh --tag-specifications &quot;ResourceType=instance,Tags=[&#123;Key=Environment,Value=AWS-Training&#125;,&#123;Key=Name,Value=AWS-Training_MarkLin&#125;]&quot; --security-group-ids sg-XXXXXX --key-name marktest.japan.training</div></pre></td></tr></table></figure>
<h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><ul>
<li><a href="http://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html" target="_blank" rel="external">run-instances</a></li>
</ul>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;應該知道的事&quot;&gt;&lt;a href=&quot;#應該知道的事&quot; class=&quot;headerlink&quot; title=&quot;應該知道的事&quot;&gt;&lt;/a&gt;應該知道的事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;這個是教育訓練的筆記&lt;/li&gt;
&lt;li&gt;使用web console 建立ec2&lt;/li&gt;
&lt;li
    
    </summary>
    
    
      <category term="AWS" scheme="http://blog.marsen.me/tags/AWS/"/>
    
      <category term="EC2" scheme="http://blog.marsen.me/tags/EC2/"/>
    
  </entry>
  
  <entry>
    <title>單元測試與重構記錄(一)</title>
    <link href="http://blog.marsen.me/2017/10/31/integrated_testing_partice/"/>
    <id>http://blog.marsen.me/2017/10/31/integrated_testing_partice/</id>
    <published>2017-10-30T16:42:10.000Z</published>
    <updated>2018-01-30T16:29:44.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>有幸參與了一個跨國的專案,<br>為了快速上線，決定將整套原本在台灣程式碼搬移到跨國專案上,<br>上線後再依使用者的需求調整開發功能,<br>而在搬移的過程中,有需多模組並未開啟。<br>…</p>
<h2 id="現況"><a href="#現況" class="headerlink" title="現況"></a>現況</h2><p>遺留代碼 → 跨國 遇到的問題</p>
<ol>
<li>Copy Paste 最快卻不一定最適合</li>
<li>Copy Paste 最快卻不一定改得動</li>
<li>Copy Paste 最快但是有的地方沒Copy完</li>
</ol>
<p><code>用明朝的劍，斬清朝的官</code></p>
<h2 id="實務需求"><a href="#實務需求" class="headerlink" title="實務需求"></a>實務需求</h2><p>將本來跨國未開啟的<strong>折扣活動</strong>模組打開,<br>簡單的流程大致如下:<br>購物車 → 取得購物車資料 → 折扣活動 → 計算</p>
<p>實務上,整個流程作了許多事<br><img src="https://i.imgur.com/pM36Joo.jpg" alt=""></p>
<p>應該說作了太多事.<br><img src="https://i.imgur.com/NU0PqCh.jpg" alt=""></p>
<p>程式碼有壞味道,卻不能修改(重構).<br>因為沒有測試保護. </p>
<p>單一的Process，複雜度過高的方法(12)</p>
<p><code>CalculateShoppingCartPromotionDiscountV2Processor.Process()</code></p>
<p><img src="https://i.imgur.com/qleqGPb.jpg" alt=""></p>
<h3 id="目標與執行順序"><a href="#目標與執行順序" class="headerlink" title="目標與執行順序"></a>目標與執行順序</h3><ol>
<li>由 PM 或 QA 補足整合測試情境到足夠<ul>
<li>由實務上的需求來認定</li>
</ul>
</li>
<li>刪除台灣的測試</li>
<li>解析 <code>CalculateShoppingCartPromotionDiscountV2Processor</code> </li>
<li>補上單元測試<ul>
<li>Code Coverage(測試覆蓋率)</li>
</ul>
</li>
<li>重構</li>
</ol>
<h2 id="最終的目標是重構"><a href="#最終的目標是重構" class="headerlink" title="最終的目標是重構"></a>最終的目標是重構</h2><ul>
<li>心態:<a href="http://www.danielteng.com/2012/09/25/no-time-to-learn-perfect-excuse/" target="_blank" rel="external">沒有時間，完美的借口</a></li>
<li>重構前要先作整合測試</li>
<li>現有的整合測試的缺陷<ol>
<li>測試項目不符合馬來西亞現狀</li>
<li>測試項目未處理多語系</li>
<li>測試項目未處理小數點</li>
<li>測試項目難以閱讀</li>
<li>測試項目有重覆的覆蓋範圍</li>
</ol>
</li>
<li>RD與PM與QA合作</li>
</ul>
<h3 id="UAT-讓「人」讀得懂"><a href="#UAT-讓「人」讀得懂" class="headerlink" title="UAT 讓「人」讀得懂"></a>UAT 讓「人」讀得懂</h3><h4 id="原本的-UAT-RD"><a href="#原本的-UAT-RD" class="headerlink" title="原本的 UAT (RD)"></a>原本的 UAT (RD)</h4><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">場景: case37：商品活動+全店活動(有排除)；宅配，運費50元，滿350免運</div><div class="line">	．全店活動 / 有排除商品；滿額打折，多階(滿第1階)，跨溫層</div><div class="line">	．折扣條件：滿199元，打95折 / 滿299元，打89折 / 滿399元，打84折</div><div class="line">	．商品活動；滿件折現，單階，跨溫層</div><div class="line">	．折扣條件：滿2件，折45元</div><div class="line">	假設 購物車中溫層<span class="string">"Freezer"</span>商品為</div><div class="line">		|<span class="string"> SalePageId </span>|<span class="string"> SaleProductSKUId </span>|<span class="string"> Price </span>|<span class="string"> Qty </span>|</div><div class="line">		|<span class="string"> 50         </span>|<span class="string"> 50               </span>|<span class="string"> 75    </span>|<span class="string"> 1   </span>|</div><div class="line">		|<span class="string"> 27         </span>|<span class="string"> 27               </span>|<span class="string"> 66    </span>|<span class="string"> 2   </span>|</div><div class="line">	並且 購物車中溫層<span class="string">"Refrigerator"</span>商品為</div><div class="line">		|<span class="string"> SalePageId </span>|<span class="string"> SaleProductSKUId </span>|<span class="string"> Price </span>|<span class="string"> Qty </span>|</div><div class="line">		|<span class="string"> 26         </span>|<span class="string"> 26               </span>|<span class="string"> 55    </span>|<span class="string"> 2   </span>|</div><div class="line">	並且 購物車中溫層<span class="string">"Normal"</span>商品為</div><div class="line">		|<span class="string"> SalePageId </span>|<span class="string"> SaleProductSKUId </span>|<span class="string"> Price </span>|<span class="string"> Qty </span>|</div><div class="line">		|<span class="string"> 25         </span>|<span class="string"> 25               </span>|<span class="string"> 2     </span>|<span class="string"> 2   </span>|</div><div class="line">	並且 活動<span class="string">"1"</span>範圍設定為</div><div class="line">		|<span class="string"> TargetType </span>|<span class="string"> TargetIdList </span>|</div><div class="line">		|<span class="string"> Shop       </span>|<span class="string"> 1            </span>|</div><div class="line">	並且 活動目標排除商品頁為</div><div class="line">		|<span class="string"> PromotionId </span>|<span class="string"> TargetExcludeSalePageList </span>|</div><div class="line">		|<span class="string"> 1           </span>|<span class="string"> 50          </span>|</div><div class="line">	並且  現折活動<span class="string">"1"</span>的折扣為</div><div class="line">		|<span class="string"> Id </span>|<span class="string"> TypeDef      </span>|<span class="string"> TotalPrice </span>|<span class="string"> DiscountTypeDef </span>|<span class="string"> DiscountRate </span>|</div><div class="line">		|<span class="string"> 1  </span>|<span class="string"> TotalPriceV2 </span>|<span class="string"> 199        </span>|<span class="string"> DiscountRate    </span>|<span class="string"> 0.95         </span>|</div><div class="line">		|<span class="string"> 2  </span>|<span class="string"> TotalPriceV2 </span>|<span class="string"> 299        </span>|<span class="string"> DiscountRate    </span>|<span class="string"> 0.89         </span>|</div><div class="line">		|<span class="string"> 3  </span>|<span class="string"> TotalPriceV2 </span>|<span class="string"> 399        </span>|<span class="string"> DiscountRate    </span>|<span class="string"> 0.84         </span>|</div><div class="line">	並且 活動<span class="string">"2"</span>範圍設定為</div><div class="line">		|<span class="string"> TargetType        </span>|<span class="string"> TargetIdList </span>|</div><div class="line">		|<span class="string"> PromotionSalePage </span>|<span class="string"> 0            </span>|</div><div class="line">	並且 活動目標商品頁為</div><div class="line">		|<span class="string"> PromotionId </span>|<span class="string"> TargetSalePageList </span>|</div><div class="line">		|<span class="string"> 2           </span>|<span class="string"> 50,25,26,27        </span>|</div><div class="line">	並且  現折活動<span class="string">"2"</span>的折扣為</div><div class="line">		|<span class="string"> Id </span>|<span class="string"> TypeDef    </span>|<span class="string"> TotalQty </span>|<span class="string"> DiscountTypeDef </span>|<span class="string"> DiscountPrice </span>|</div><div class="line">		|<span class="string"> 4  </span>|<span class="string"> TotalQtyV2 </span>|<span class="string"> 2        </span>|<span class="string"> DiscountPrice   </span>|<span class="string"> 45            </span>|</div><div class="line">	當 計算活動折扣</div><div class="line">	那麼 購物車商品折扣後為</div><div class="line">		|<span class="string"> SalePageId </span>|<span class="string"> SaleProductSKUId </span>|<span class="string"> PromotionDiscount </span>|</div><div class="line">		|<span class="string"> 50         </span>|<span class="string"> 50               </span>|<span class="string"> -12               </span>|</div><div class="line">		|<span class="string"> 27         </span>|<span class="string"> 27               </span>|<span class="string"> -25               </span>|</div><div class="line">		|<span class="string"> 26         </span>|<span class="string"> 26               </span>|<span class="string"> -19               </span>|</div><div class="line">		|<span class="string"> 25         </span>|<span class="string"> 25               </span>|<span class="string"> 0                 </span>|</div></pre></td></tr></table></figure>
<h4 id="「人」寫的UAT"><a href="#「人」寫的UAT" class="headerlink" title="「人」寫的UAT"></a>「人」寫的UAT</h4><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">場景: 商品有兩檔活動，全店活動與商品活動；</div><div class="line">	．第一檔是全店活動 / 排除商品B；滿額打折，</div><div class="line">	．折扣條件：滿10元，打95折 / 滿20元，打89折 / 滿30元，打84折</div><div class="line">	．第二檔是指定商品；滿件折現，單階，指定商品A 、商品B</div><div class="line">	．折扣條件：滿2件，折3元</div><div class="line"></div><div class="line">當 購物車中的商品為<span class="string">"商品A 與商品B"</span></div><div class="line">		|<span class="string"> Title </span>|<span class="string"> SalePageId </span>|<span class="string"> SaleProductSKUId </span>|<span class="string"> Price </span>|<span class="string"> Qty </span>|</div><div class="line">		|<span class="string"> 商品A   </span>|<span class="string"> 25         </span>|<span class="string"> 25               </span>|<span class="string"> 7.45  </span>|<span class="string"> 2   </span>|</div><div class="line">		|<span class="string"> 商品B   </span>|<span class="string"> 26         </span>|<span class="string"> 26               </span>|<span class="string"> 4.45  </span>|<span class="string"> 2   </span>|</div><div class="line">	</div><div class="line">並且 第<span class="string">"1"</span>檔是全店活動 ,排除以下商品</div><div class="line">	    |<span class="string"> Title </span>|<span class="string"> SalePageId </span>|</div><div class="line">	    |<span class="string"> 商品A   </span>|<span class="string"> 26         </span>|</div><div class="line"></div><div class="line">而且 第<span class="string">"1"</span>檔折扣條件是<span class="string">"滿額打折,滿10元，打95折 / 滿20元，打89折 / 滿30元，打84折"</span>,如下</div><div class="line">    |<span class="string"> Id </span>|<span class="string"> TypeDef      </span>|<span class="string"> TotalPrice </span>|<span class="string"> DiscountTypeDef </span>|<span class="string"> DiscountRate </span>|</div><div class="line">    |<span class="string"> 1  </span>|<span class="string"> TotalPriceV2 </span>|<span class="string"> 10         </span>|<span class="string"> DiscountRate    </span>|<span class="string"> 0.95         </span>|</div><div class="line">    |<span class="string"> 2  </span>|<span class="string"> TotalPriceV2 </span>|<span class="string"> 20         </span>|<span class="string"> DiscountRate    </span>|<span class="string"> 0.89         </span>|</div><div class="line">    |<span class="string"> 3  </span>|<span class="string"> TotalPriceV2 </span>|<span class="string"> 30         </span>|<span class="string"> DiscountRate    </span>|<span class="string"> 0.84         </span>|</div><div class="line"></div><div class="line">並且 第<span class="string">"2"</span>檔是指定商品,指定商品如下</div><div class="line">    |<span class="string"> Title </span>|<span class="string"> SalePageId </span>|</div><div class="line">    |<span class="string"> 商品A   </span>|<span class="string"> 25         </span>|</div><div class="line">    |<span class="string"> 商品B   </span>|<span class="string"> 26         </span>|</div><div class="line">    |<span class="string"> 商品C   </span>|<span class="string"> 27         </span>|</div><div class="line">    |<span class="string"> 商品D   </span>|<span class="string"> 50         </span>|</div><div class="line"></div><div class="line">而且 第<span class="string">"2"</span>檔折扣條件是<span class="string">"滿件折現,滿2件，折3元"</span>,如下</div><div class="line">    |<span class="string"> Id </span>|<span class="string"> TypeDef    </span>|<span class="string"> TotalQty </span>|<span class="string"> DiscountTypeDef </span>|<span class="string"> DiscountPrice </span>|</div><div class="line">    |<span class="string"> 4  </span>|<span class="string"> TotalQtyV2 </span>|<span class="string"> 2        </span>|<span class="string"> DiscountPrice   </span>|<span class="string"> 3             </span>|</div><div class="line"></div><div class="line">當 計算活動折扣</div><div class="line"></div><div class="line">那麼 購物車商品折扣金額及折扣後小計為 </div><div class="line">    |<span class="string"> Title </span>|<span class="string"> SalePageId </span>|<span class="string"> Price </span>|<span class="string"> Qty </span>|<span class="string"> PromotionDiscount </span>|<span class="string"> TotalPayment </span>|</div><div class="line">    |<span class="string"> 商品A   </span>|<span class="string"> 25         </span>|<span class="string"> 7.45  </span>|<span class="string"> 2   </span>|<span class="string"> -2.55             </span>|<span class="string"> 12.35        </span>|</div><div class="line">    |<span class="string"> 商品B   </span>|<span class="string"> 26         </span>|<span class="string"> 4.45  </span>|<span class="string"> 2   </span>|<span class="string"> -1.11             </span>|<span class="string"> 7.79         </span>|</div></pre></td></tr></table></figure>
<p>與 PM 及 QA 討論後 , 寫的 UAT 可閱讀性提高了<br>這裡用到了一些小技巧 , 讓 Cucumber 文件的可讀性更高<br>而不會有太多的重複方法 , 比如說把描述性的文字當作參數傳遞<br>實際上測試不會使用到這些變數 ,但是可以增加可讀性 .</p>
<h3 id="刪除台灣測試"><a href="#刪除台灣測試" class="headerlink" title="刪除台灣測試"></a>刪除台灣測試</h3><p>因為已經有了跨國所需要的測試 ,<br>台灣的測試便可以退場了.<br>實際上也不符合現況, 如多語系、時差與小數點等問題</p>
<h3 id="解析-CalculateShoppingCartPromotionDiscountV2Processor"><a href="#解析-CalculateShoppingCartPromotionDiscountV2Processor" class="headerlink" title="解析 CalculateShoppingCartPromotionDiscountV2Processor"></a>解析 <code>CalculateShoppingCartPromotionDiscountV2Processor</code></h3><p><img src="https://i.imgur.com/FioG5NG.jpg" alt=""></p>
<ol>
<li>無折扣的情境</li>
<li>新舊相容的情境</li>
<li>排序</li>
<li>計算折扣金額</li>
<li>看見相依<ol>
<li>程式碼中有 new 別的 class 的部份</li>
<li>程式碼中有使用靜態方法的部份</li>
</ol>
</li>
</ol>
<h3 id="補上單元測試"><a href="#補上單元測試" class="headerlink" title="補上單元測試"></a>補上單元測試</h3><p>最簡單的重構,就是將整個方法內的四個邏輯<br>拆成四塊個子方法,並為他們加上單元測試.<br>修改的過程,如果有紅燈就要修改成綠燈,<br>而整個成品要保證整合測試與單元測試都是綠燈. </p>
<p>此外,重構的過程中如果過到靜態方法,<br>或是 new 新物件, 都很有可能是種相依,<br>可以透過一些方法作解耦,<br>參考之前的文章<a href="/2017/04/23/unitestwriting/">單元測試這樣玩就對了</a> </p>
<h3 id="重構"><a href="#重構" class="headerlink" title="重構"></a>重構</h3><p>最後一步就是大膽的重構了,<br>有了測試作保護,<br>可以作更大範圍的重構,<br>如下圖示,這裡揭露了在台灣原有的繼承結構,<br>而紅色的部份是在跨國用不到的類別.<br><img src="https://i.imgur.com/VQ10wY6.jpg" alt=""></p>
<p>下一步，待續…</p>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;有幸參與了一個跨國的專案,&lt;br&gt;為了快速上線，決定將整套原本在台灣程式碼搬移到跨國專案上,&lt;br&gt;上線後再依使用者的需求調
    
    </summary>
    
    
      <category term="Unit Testing" scheme="http://blog.marsen.me/tags/Unit-Testing/"/>
    
      <category term="Integrated Testing" scheme="http://blog.marsen.me/tags/Integrated-Testing/"/>
    
  </entry>
  
  <entry>
    <title>20171023本周要聞/心得/學習擷錄</title>
    <link href="http://blog.marsen.me/2017/10/23/weekly_learn/20171023/"/>
    <id>http://blog.marsen.me/2017/10/23/weekly_learn/20171023/</id>
    <published>2017-10-23T03:47:27.000Z</published>
    <updated>2018-01-30T16:29:44.661Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p><a href="https://mp.weixin.qq.com/s/n_Gnn5sJ0PkwhQhWUc0UeQ" target="_blank" rel="external">Docker 宣布拥抱 Kubernetes</a></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Docker Swarm与整个Docker平台紧密集成，然而并非所有人都愿意选择Swarm。 </div><div class="line">Hykes表示，默认的Swarm已经限制了Docker用户的完整体验，</div><div class="line">为此，Docker公司计划提供一个无缝平台，同时支持包含Swarm和Kubernetes集群的异构部署。</div><div class="line">Docker企业版（EE）将很快为Kuberenetes和Swarm提供全套Docker管理服务</div></pre></td></tr></table></figure>
</li>
<li><p>免費字哪裡找？使用<a href="https://fonts.google.com" target="_blank" rel="external">google font</a></p>
</li>
<li><p>使用TypeScript開發nodejs發生以下錯誤(使用gulp編譯成js)</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">error TS2693: &apos;Promise&apos; only refers to a type, but is being used as a value here.</div></pre></td></tr></table></figure>
<p> 安裝 <code>@types/es6-promise</code> 以解決問題</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev  @types/es6-promise</div></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>netstat -ano</code> 指令在 windows 上查詢佔用的 port 與 PID</p>
</li>
<li>執行 <code>npm ls moduleName</code> 可以列出目前專案所以相依該模組的模組</li>
<li>執行 <code>npm update</code> 更新目前專案的模組</li>
<li><code>package.json</code>裡面的的節點<code>dependencies</code>放的是與專案相關的模組，<br> 而<code>devDependencies</code>放的是與開發相關的模組。ex:<code>gulp</code>,<br>  請考慮你使用的模組，是為了開發？還是產品真的會用到。</li>
<li><p>想法</p>
<ul>
<li>懶人包應是協助跨越門檻與看見全貌的工具，<br>雖然難以避免代入個人的價值觀，但是刻意為之是不好的。</li>
<li>自我批判是一種建立反饋的最好方式，比起以公司\社群\世界最好的人要求自已，<br>以最好的自已去要求自已理應該最恰當的，錄影、看鏡子之類的方式… 。</li>
</ul>
</li>
<li><p>[叫人意想不到的激勵科學 (TED 中英文字幕)] (<a href="https://www.youtube.com/watch?v=rFVhkIrVDzM" target="_blank" rel="external">https://www.youtube.com/watch?v=rFVhkIrVDzM</a>)</p>
<ol>
<li>自主性</li>
<li>掌握度</li>
<li>使命感</li>
</ol>
</li>
</ol>
<p>(fin)    </p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/n_Gnn5sJ0PkwhQhWUc0UeQ&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker 宣布拥抱 Kubernetes&lt;/a&gt;&lt;/p&gt;
 &lt;figu
    
    </summary>
    
    
      <category term="記錄" scheme="http://blog.marsen.me/tags/%E8%A8%98%E9%8C%84/"/>
    
      <category term="Kubernetes" scheme="http://blog.marsen.me/tags/Kubernetes/"/>
    
      <category term="Docker" scheme="http://blog.marsen.me/tags/Docker/"/>
    
      <category term="TypeScript" scheme="http://blog.marsen.me/tags/TypeScript/"/>
    
      <category term="Nodejs" scheme="http://blog.marsen.me/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>[閱讀筆記]異數</title>
    <link href="http://blog.marsen.me/2017/10/22/books/book_outliers_the_story_of_success/"/>
    <id>http://blog.marsen.me/2017/10/22/books/book_outliers_the_story_of_success/</id>
    <published>2017-10-22T09:10:46.000Z</published>
    <updated>2018-01-30T16:29:44.619Z</updated>
    
    <content type="html"><![CDATA[<h1 id="心得小結-2017-一讀"><a href="#心得小結-2017-一讀" class="headerlink" title="心得小結(2017.一讀)"></a>心得小結(2017.一讀)</h1><p>作者認為成功的主要原因是優勢的累績與努力，<br>我們常說時間花在哪裡，成就就在哪裡，<br>但是許多傑出的例子(莫札特與比爾。蓋茲)，<br>除了努力外，還有幸運的(?)際遇，<br>在很小的時候就開始邁向傑出，<br>這讓我想到福原愛;從小就接觸桌球又有母親(導師)親自調校，<br>但作者最終歸向時代與文化，兩個不可控的因素。<br>努力只能讓你成為比一般人好的人，<br>而加上際遇(時代與文化)，才能成為傑出(ex:世界前100之類)，<br>相比「我比別人更認真-刻意練習．讓自己發光」，<br><strong>我</strong>書比較強調導師與信念(熱情)的重要性，<br>而<strong>異數</strong>比較偏向命定論。</p>
<p>並沒有很推薦，但是書中的馬太效應，<br>以及透過學習別的語言來改變文化帶來的<strong>業</strong>，<br>值得反思 .</p>
<h1 id="筆記"><a href="#筆記" class="headerlink" title="筆記"></a>筆記</h1><h2 id="ch1-好上加好的馬太效應"><a href="#ch1-好上加好的馬太效應" class="headerlink" title="ch1 好上加好的馬太效應"></a>ch1 好上加好的馬太效應</h2><ol>
<li>成功是優勢的累積</li>
<li>我們把成功與個人特質畫上等號，其他人因而失去出頭的機會。<br>我們制定出來的規則反而壓抑成就，我們太早宣布某些人是失敗者。  </li>
</ol>
<h2 id="ch2-一萬個小時的努力"><a href="#ch2-一萬個小時的努力" class="headerlink" title="ch2 一萬個小時的努力"></a>ch2 一萬個小時的努力</h2><ol>
<li>他們的成功不完全是自已打造出來的，也是他們生長的時代造就的。</li>
</ol>
<h2 id="ch3-天才的迷思"><a href="#ch3-天才的迷思" class="headerlink" title="ch3 天才的迷思"></a>ch3 天才的迷思</h2><h2 id="ch4-天才的迷思．II"><a href="#ch4-天才的迷思．II" class="headerlink" title="ch4 天才的迷思．II"></a>ch4 天才的迷思．II</h2><ul>
<li>才智和成就沒有絕對關係</li>
<li>抽象智能與實用智能<ul>
<li>實用智能:社交常識與處事能力(後天習得，家庭)，知道在什麼時候用什麼方式以及說什麼，以達到最大效果</li>
</ul>
</li>
<li>階級的文化優勢<ul>
<li>勞動階級和貧窮人家的孩子，保守不信任別人，厭惡權威，拙於交際</li>
</ul>
</li>
</ul>
<p><em>feedback:</em> </p>
<ol>
<li>千里馬常有，伯樂不常有。</li>
<li>我是勞動階級和貧窮人家的孩子</li>
<li>人脈的重要性。</li>
<li>如何與權威人士交際？</li>
</ol>
<h2 id="ch5-猶太律師的啟示"><a href="#ch5-猶太律師的啟示" class="headerlink" title="ch5 猶太律師的啟示"></a>ch5 猶太律師的啟示</h2><ol>
<li>什麼都作，有生意上門就好了</li>
<li>機會其實是隱藏在逆境當中</li>
<li>你的父母是做什麼的，和你日後的成就大有關係</li>
<li>只要夠聰明就夠了</li>
</ol>
<p><em>feedback</em></p>
<ol>
<li><a href="https://www.evernote.com/shard/s36/sh/79c0d125-1dc3-4a7e-aa46-5264b223d29d/d8bcb5338bbbf4fe" target="_blank" rel="external">七年級最慘的是哪一年次？</a></li>
<li>生逢其時 vs 生不逢時</li>
</ol>
<h2 id="ch-6-以血還血"><a href="#ch-6-以血還血" class="headerlink" title="ch 6 以血還血"></a>ch 6 以血還血</h2><h2 id="ch-7-空中危機"><a href="#ch-7-空中危機" class="headerlink" title="ch 7 空中危機"></a>ch 7 空中危機</h2><ol>
<li>文化的影響</li>
<li>以大韓航空空難為例-文化的包袱</li>
<li>用語言改變文化的包袱(ex:英文)</li>
</ol>
<h2 id="ch-8-稻米文化與數學能力"><a href="#ch-8-稻米文化與數學能力" class="headerlink" title="ch 8 稻米文化與數學能力"></a>ch 8 稻米文化與數學能力</h2><h2 id="ch-9-知識力學校"><a href="#ch-9-知識力學校" class="headerlink" title="ch 9 知識力學校"></a>ch 9 知識力學校</h2><h2 id="後記-從牙買加到加拿大"><a href="#後記-從牙買加到加拿大" class="headerlink" title="後記 從牙買加到加拿大"></a>後記 從牙買加到加拿大</h2><ol>
<li>亞洲數字發音較有規則且合乎邏輯</li>
<li>成功者的共通點就是努力</li>
</ol>
<h2 id="書單"><a href="#書單" class="headerlink" title="書單"></a>書單</h2><ol>
<li>意外的百萬富翁(Jobs 傳記)</li>
</ol>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ol>
<li>廖月娟的翻譯很不錯，感覺不出來是在讀外國人寫的書。</li>
<li><a href="https://www.mobile01.com/topicdetail.php?f=291&amp;t=5107472" target="_blank" rel="external">台灣財富排名690萬人是月光族230萬人有超3千萬資產</a></li>
</ol>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;心得小結-2017-一讀&quot;&gt;&lt;a href=&quot;#心得小結-2017-一讀&quot; class=&quot;headerlink&quot; title=&quot;心得小結(2017.一讀)&quot;&gt;&lt;/a&gt;心得小結(2017.一讀)&lt;/h1&gt;&lt;p&gt;作者認為成功的主要原因是優勢的累績與努力，&lt;br&gt;我們常
    
    </summary>
    
    
      <category term="閱讀筆記" scheme="http://blog.marsen.me/tags/%E9%96%B1%E8%AE%80%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>使用 DateInterceptor 攔截SQL 語法</title>
    <link href="http://blog.marsen.me/2017/09/24/sql_ef6_dateInterceptor/"/>
    <id>http://blog.marsen.me/2017/09/24/sql_ef6_dateInterceptor/</id>
    <published>2017-09-24T02:55:30.000Z</published>
    <updated>2018-01-30T16:29:44.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在<a href="https://blog.marsen.me/2017/09/18/sql_compatibility_level_with_datetime2/">SQL Compatibility Level 對MsSQL時間查詢的影響</a>這篇文章裡,<br>遇到了一個令難以處理的問題, 簡單的複述一下,  </p>
<ol>
<li>我的資料表以一個 datetime 欄位當作 PK</li>
<li>我的SQL DB版本為 2016 以上 (Compatibility Level預設值為130)</li>
</ol>
<p>這個時候我所有的 Entity Context 更新語法在呼叫 SaveChange 時會拋出錯誤;<br>原因在於 EF 所產生的 SQL Query 語法 , 會以 PK 值作為查詢條件,<br>而在這個時候 查詢時間的條件會精準到微秒(μs=1/1000000秒),<br>但是 datetime 欄位只會記錄到豪秒(ms=1/1000秒),<br>於是精準不足的部份就會補 0 ,<br>EX:<br><code>2017-09-24 11:55:35.3720000</code> 與 <code>2017-09-24 11:55:35.372</code><br>這會導致查無資料進而引發 <a href="https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.dbupdateconcurrencyexception(v=vs.103" target="_blank" rel="external">dbupdateconcurrencyexception</a>.aspx)</p>
<h2 id="解決方針"><a href="#解決方針" class="headerlink" title="解決方針"></a>解決方針</h2><h3 id="修改資料欄位"><a href="#修改資料欄位" class="headerlink" title="修改資料欄位"></a>修改資料欄位</h3><p> 將資料庫的欄位datatype datetime 改成 datetime2 ,<br> 這或許是最理想的解法了, 你不需要更動程式碼,<br> 而且會提昇你資料的時間精準度.<br> 不過實務上,你必須考慮到你是否有dba的權限與即有的資料量,<br> 當產品的核心功能依賴著這張表的時候且有巨量資料存在時,<br> 更新欄位的資料型態的衝擊與風險或許是難以承受的.<br> 更不用說還要考慮到整個 DB Server Cluster 的架構之類的問題.</p>
<h3 id="修改-SQL-Server-Compatibility-Level-從-130-至-120"><a href="#修改-SQL-Server-Compatibility-Level-從-130-至-120" class="headerlink" title="修改 SQL Server Compatibility Level 從 130 至 120"></a>修改 SQL Server Compatibility Level 從 130 至 120</h3><p>非常不建議的作法, 除了要考慮上述權限、衝擊與風險的問題外,<br>如果降轉 Compatibility Level<br>或許會使得其他有使用到 datetime2 型態的資料欄位發生異常,<br>或是是失去原本精度的意義. </p>
<h3 id="使用-DateInterceptor-攔截SQL-語法"><a href="#使用-DateInterceptor-攔截SQL-語法" class="headerlink" title="使用 DateInterceptor 攔截SQL 語法"></a>使用 DateInterceptor 攔截SQL 語法</h3><p>在考量上述兩種情況, 為了不增加<del>DBA的工作量</del>無謂的風險與權責問題,<br>(其實是實務上我沒有DB Server的異動權限),<br>我們可以透過 <a href="https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.interception.idbcommandinterceptor(v=vs.113" target="_blank" rel="external">IDbInterceptor</a>.aspx) 來欄截 Entity Framework 對DB 存取時執行的 Query</p>
<p>以下是個簡單的範例,</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DateInterceptor</span> : <span class="title">IDbInterceptor</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReaderExecuting</span>(<span class="params">DbCommand command,</span></span></div><div class="line">        DbCommandInterceptionContext&lt;DbDataReader&gt; interceptionContext)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> dateParameters = command.Parameters.OfType&lt;DbParameter&gt;()</div><div class="line">            .Where(p =&gt; p.DbType == DbType.DateTime2);</div><div class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> parameter <span class="keyword">in</span> dateParameters)</div><div class="line">        &#123;</div><div class="line">            parameter.DbType = DbType.DateTime;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我們實作了一個 IDbInterceptor 的類別,<br>用來將 datetime2 的資料型別轉型成 datetime,<br>接下要將它掛載在 Entity Context之中 </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">EF6Entities</span> : <span class="title">DbContext</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EF6Entities</span>(<span class="params"></span>)</span></div><div class="line">        : <span class="title">base</span>(<span class="params"><span class="string">"name=EF6Entities"</span></span>)</div><div class="line">    &#123;</div><div class="line">        DbInterception.Add(<span class="keyword">new</span> DateInterceptor());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">DbModelBuilder modelBuilder</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnintentionalCodeFirstException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> DbSet&lt;BatchUploadData&gt; BatchUploadData &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如此一來就會以 datetime 的精準度產生 SQL Query</p>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul>
<li><a href="https://github.com/marsen/EFDemo" target="_blank" rel="external">程式碼</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.interception.idbcommandinterceptor.aspx" target="_blank" rel="external">IDbInterceptor</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.interception.idbcommandinterceptor.aspx" target="_blank" rel="external">IDbCommandInterceptor</a></li>
<li><a href="https://stackoverflow.com/questions/46387565/how-to-change-how-entity-framework-generates-sql-precision-for-datetime" target="_blank" rel="external">How to change how Entity Framework generates SQL precision for Datetime</a></li>
</ul>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;https://blog.marsen.me/2017/09/18/sql_compatibility_level_wi
    
    </summary>
    
    
      <category term="Database" scheme="http://blog.marsen.me/tags/Database/"/>
    
      <category term="MsSQL" scheme="http://blog.marsen.me/tags/MsSQL/"/>
    
      <category term="Entity Framework" scheme="http://blog.marsen.me/tags/Entity-Framework/"/>
    
  </entry>
  
  <entry>
    <title>SQL Compatibility Level 對MsSQL時間查詢的影響</title>
    <link href="http://blog.marsen.me/2017/09/18/sql_compatibility_level_with_datetime2/"/>
    <id>http://blog.marsen.me/2017/09/18/sql_compatibility_level_with_datetime2/</id>
    <published>2017-09-18T03:30:13.000Z</published>
    <updated>2018-01-30T16:29:44.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大綱"><a href="#大綱" class="headerlink" title="大綱"></a>大綱</h2><p>這次透過Entity Framework(EF5)作了一個簡單的資料庫更新,<br>恰巧的是這次更新的Table因為某些需求,使用 datetime 作為 Key 值.<br>進而引發一連串的錯誤, 最後才找到 SQL Compatibility Level 對 MsSQL 時間查詢影響. </p>
<h3 id="正式環境-SQL-版本-13-0-4422-0"><a href="#正式環境-SQL-版本-13-0-4422-0" class="headerlink" title="正式環境 SQL 版本 13.0.4422.0"></a>正式環境 SQL 版本 13.0.4422.0</h3><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpdateBatchUploadData</span>(<span class="params">BatchUploadDataEntity batchUploadDataEntity</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">using</span> (WebStoreDBEntitiesV2 context = <span class="keyword">this</span>.LifetimeScope.Resolve&lt;WebStoreDBEntitiesV2&gt;())</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> item = (<span class="keyword">from</span> batchUploadData <span class="keyword">in</span> context.BatchUploadData.Valids()</div><div class="line">                    <span class="keyword">where</span> batchUploadData.BatchUploadData_Id == batchUploadDataEntity.BatchUploadData_Id</div><div class="line">                    <span class="keyword">select</span> batchUploadData).FirstOrDefault();</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.MapBatchUploadData(batchUploadDataEntity, item);</div><div class="line"></div><div class="line">        context.SaveChanges();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上面程式所示, <code>item</code> 是透過 Key 值 <code>BatchUploadData_Id</code> 取回來的物件.<br>而 <code>MapBatchUploadData</code> 是一段簡單的程式碼,<br>單純的將 <code>batchUploadDataEntity</code> 的值 mapping 到 item<br>再呼叫 SaveChanges , 卻引發了 <a href="https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.dbupdateconcurrencyexception(v=vs.103" target="_blank" rel="external">dbupdateconcurrencyexception</a>.aspx)</p>
<h3 id="錯誤畫面"><a href="#錯誤畫面" class="headerlink" title="錯誤畫面"></a>錯誤畫面</h3><p><img src="https://i.imgur.com/8kBIYRr.jpg" alt=""></p>
<h3 id="錯誤訊息"><a href="#錯誤訊息" class="headerlink" title="錯誤訊息"></a>錯誤訊息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">存放區更新、插入或刪除陳述式影響到非預期數目的資料列 (0)。</div><div class="line">這些實體載入之後可能被修改或刪除了。請重新整理 ObjectStateManager 實體。</div></pre></td></tr></table></figure>
<p>這一段訊息的意思就是: Entity Framework 預期更新了<code>0</code>筆資料，與它所預期的不符, 所以拋出錯誤。</p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>透過用<strong>Sql Profiler</strong>我們錄製到了以下的SQL<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">exec sp_executesql N'<span class="keyword">update</span> [dbo].[BatchUploadData]</div><div class="line"><span class="keyword">set</span> [BatchUploadData_StatusDef] = @<span class="number">0</span>, [BatchUploadData_UpdatedTimes] = @<span class="number">1</span>, [BatchUploadData_UpdatedDateTime] = @<span class="number">2</span></div><div class="line"><span class="keyword">where</span> (([BatchUploadData_Id] = @<span class="number">3</span>) <span class="keyword">and</span> ([BatchUploadData_CreatedDateTime] = @<span class="number">4</span>))</div><div class="line"><span class="keyword">select</span> [BatchUploadData_Rowversion]</div><div class="line"><span class="keyword">from</span> [dbo].[BatchUploadData]</div><div class="line"><span class="keyword">where</span> @@ROWCOUNT &gt; <span class="number">0</span> <span class="keyword">and</span> [BatchUploadData_Id] = @<span class="number">3</span> <span class="keyword">and</span> [BatchUploadData_CreatedDateTime] = @<span class="number">4</span><span class="string">',N'</span>@<span class="number">0</span> <span class="built_in">varchar</span>(<span class="number">30</span>),@<span class="number">1</span> tinyint,@<span class="number">2</span> datetime2(<span class="number">7</span>),@<span class="number">3</span> <span class="built_in">bigint</span>,@<span class="number">4</span> datetime2(<span class="number">7</span>)<span class="string">',@0='</span>ProcessFailed<span class="string">',@1=1,@2='</span><span class="number">2017</span><span class="number">-09</span><span class="number">-16</span> <span class="number">11</span>:<span class="number">29</span>:<span class="number">35.3720061</span><span class="string">',@3=52,@4='</span><span class="number">2017</span><span class="number">-09</span><span class="number">-05</span> <span class="number">18</span>:<span class="number">53</span>:<span class="number">36.3530000</span><span class="string">'</span></div></pre></td></tr></table></figure></p>
<p>請注意到 <strong>@4 datetime2(7) … @4=’2017-09-05 18:53:36.3530000’</strong><br>如果將 <code>datetime2(7)</code> 改為 <code>datetime</code>或是將查詢語句改為 <code>@4=&#39;2017-09-05 18:53:36.353</code> 就能正確更新資料.  </p>
<p><img src="https://i.imgur.com/8pGTYL4.gif" alt=""></p>
<h3 id="本機實測-SQL-版本-12-0-4459-0"><a href="#本機實測-SQL-版本-12-0-4459-0" class="headerlink" title="本機實測 (SQL 版本 12.0.4459.0)"></a>本機實測 (SQL 版本 12.0.4459.0)</h3><p>透過本機寫了一小段的SQL作測試,<br><img src="https://i.imgur.com/iJntV1i.gif" alt=""><br><strong>竟然不會有問題!!!</strong>  </p>
<p>這跟 SQL Compatibility Level 有關,<br>mssql 2014 預設是 120, 2016 預設是130,<br>Datetime2 在 120 跟 130 的結果會不一樣.  </p>
<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><p>主要的查詢與更新 SQL 是 Entity Framework 產生的,<br>所以我無法透過修改 SQL 的方式解決這個問題,<br>而正式環境的 SQL Compatibility Level 調整將會牽一髮動全身<br>且基於版本演進, 往新的版本靠攏是合理的選擇<br>暫時的解法是透過修改 edmx ,<br>不讓 datetime 作為整個 table 的 Key值.<br>較好的解法是升級 Entity Framework<br>透過 Entity Framework 的機制, 指定查詢時間的精準度.<br>實作的部份未來再補上. </p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://docs.microsoft.com/en-us/sql/t-sql/statements/alter-database-transact-sql-compatibility-level" target="_blank" rel="external">ALTER DATABASE (Transact-SQL) Compatibility</a></li>
<li><a href="https://social.msdn.microsoft.com/Forums/silverlight/en-US/de5dbf3e-8c95-40f4-9e31-b71f1f31983d/change-in-datetime2-implementation-in-sql-server-2016?forum=transactsql" target="_blank" rel="external">Change in datetime2 implementation in SQL Server 2016</a></li>
<li><a href="https://docs.microsoft.com/zh-tw/sql/relational-databases/databases/view-or-change-the-compatibility-level-of-a-database" target="_blank" rel="external">檢視或變更資料庫的相容性層級</a></li>
</ul>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;大綱&quot;&gt;&lt;a href=&quot;#大綱&quot; class=&quot;headerlink&quot; title=&quot;大綱&quot;&gt;&lt;/a&gt;大綱&lt;/h2&gt;&lt;p&gt;這次透過Entity Framework(EF5)作了一個簡單的資料庫更新,&lt;br&gt;恰巧的是這次更新的Table因為某些需求,使用 date
    
    </summary>
    
    
      <category term="記錄" scheme="http://blog.marsen.me/tags/%E8%A8%98%E9%8C%84/"/>
    
      <category term="Database" scheme="http://blog.marsen.me/tags/Database/"/>
    
      <category term="MsSQL" scheme="http://blog.marsen.me/tags/MsSQL/"/>
    
      <category term="Entity Framework" scheme="http://blog.marsen.me/tags/Entity-Framework/"/>
    
  </entry>
  
  <entry>
    <title>將 Express 網站整合 Typescirpt 開發</title>
    <link href="http://blog.marsen.me/2017/08/16/express_with_typescript/"/>
    <id>http://blog.marsen.me/2017/08/16/express_with_typescript/</id>
    <published>2017-08-16T08:26:14.000Z</published>
    <updated>2018-01-30T16:29:44.621Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原因與目的"><a href="#原因與目的" class="headerlink" title="原因與目的"></a>原因與目的</h2><ul>
<li>目前我使用 express 作為網站開發</li>
<li>我是個 .NET 工程師,習慣用強型別語言作開發 (C#)</li>
<li>網路上找的文章<ul>
<li><a href="http://brianflove.com/2016/11/08/typescript-2-express-node/" target="_blank" rel="external">TypeScript 2 + Express + Node.js</a></li>
<li><a href="http://brianflove.com/2016/03/29/typescript-express-node-js/" target="_blank" rel="external">TypeScript + Express + Node.js</a></li>
</ul>
</li>
<li>這件事情理論上是可行的,而且又有人作過,又能讓我以自已比較習慣的方式作開發</li>
</ul>
<h2 id="技術問題"><a href="#技術問題" class="headerlink" title="技術問題"></a>技術問題</h2><ul>
<li>grunt/gulp/webpack <ul>
<li>選擇 gulp希望能切換到webpack</li>
</ul>
</li>
<li>typescript</li>
</ul>
<h2 id="初期目標"><a href="#初期目標" class="headerlink" title="初期目標"></a>初期目標</h2><ul>
<li>把所有js 改成 ts</li>
<li>相同指令即可完成編譯與開啟站台</li>
<li>可部署到正式環境</li>
</ul>
<h2 id="構想"><a href="#構想" class="headerlink" title="構想"></a>構想</h2><p><del>原本我是想把整個專案重新編譯至另外一個資料夾中,</del><br><del>再由該資料夾設為起始專案執行</del><br>在建立typescript資料夾，只編譯相關的ts檔;<br>至於哪些是<strong>相關的ts檔</strong>?</p>
<ol>
<li><code>app.ts</code>(編譯為<code>app.js</code>)<br> 在根目錄作為所有request入口的起始檔案,用來解析request需要對應的router<br> 這裡可能會有一些共用的商務/系統邏輯或是錯誤處理</li>
<li>所有的router<br> 這是最接近使用者的 business logic code,影響返回的頁面與呈現的資料,<br> 通常這裡主要的目的是組合來自不同的service的資訊,再返回給view層,<br> 不過有時候也會處理一些顯示邏輯.</li>
<li><p>所有的service<br> 這層擁最主要的商務邏輯,大多會依功能性作區分(ex:授權、會員、購物車等…)<br> 也有專門的service提供共用的方法及模組,<br> 並透過repository取得/更新資料</p>
</li>
<li><p>所有的repository<br> 這層最主要的功能是直接與資料庫作存取</p>
</li>
<li>其它<br> 例如:Interface, Class, Enum 或是一些框架所需要額外的方法.</li>
</ol>
<h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>定義好需要修改的範圍後,我建立了一個typescript資料夾<br>裡面會建立相對應的<code>router</code>,<code>service</code>與<code>repository</code>資料夾<br>與一個<code>app.ts</code>檔案.</p>
<p>一開始將所有js檔案依照相對的位置,照抄複製放入對應位置,並將副檔名改為<code>.ts</code><br>接下我將利用gulp幫執行相關的編譯行為.<br>我們可以預期編譯產生的<code>.js</code>檔可以執行,因為Typescript是Javascript的Super Set</p>
<h3 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h3><ul>
<li><p>安裝gulp<br><code>npm install gulp -g</code><br><code>npm install gulp --save</code><br><code>npm install gulp-typescript --save</code></p>
</li>
<li><p>安裝相關模組<br><code>npm install @types/node --save-dev</code><br><code>npm install --save @types/express</code><br><code>npm install --save @types/morgan</code><br><code>npm install --save @types/cookie-parser</code><br><code>npm install --save @types/httperr</code><br>實際安裝哪些模組與專案所需要的有關,通常只要在npm搜尋<code>npm @types module_name</code><br>就可以找得到,不過有時候也會有找不到情況<br>這個時候很苦惱了,我們想要ts的強型別即時除錯,但是自已刻又太自虐,<br>我的想法是只有自已寫的<code>router</code>,<code>service</code>與<code>repository</code>有需要即時除錯.<br>之後實務上有遇到再回來補充.</p>
</li>
<li><p>設定gulp file</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&apos;gulp&apos;);</div><div class="line">var tsc = require(&apos;gulp-typescript&apos;); </div><div class="line"></div><div class="line">gulp.task(&apos;app&apos;, function() &#123;     </div><div class="line">        return gulp.src([&apos;typescript/app.ts&apos;,&apos;typescript/**/*.ts&apos;])        </div><div class="line">        .pipe(tsc(&#123;</div><div class="line">                target: &quot;es2017&quot;,                          /* Specify ECMAScript target version: &apos;ES3&apos; (default), &apos;ES5&apos;, &apos;ES2015&apos;, &apos;ES2016&apos;, &apos;ES2017&apos;, or &apos;ESNEXT&apos;. */</div><div class="line">                module: &quot;es2015&quot;,                     /* Specify module code generation: &apos;commonjs&apos;, &apos;amd&apos;, &apos;system&apos;, &apos;umd&apos;, &apos;es2015&apos;, or &apos;ESNext&apos;. */</div><div class="line">                lib: [&quot;es2015&quot;,&quot;dom&quot;],</div><div class="line">                noImplicitAny: false,</div><div class="line">            &#125;))</div><div class="line">        .pipe(gulp.dest(&apos;./&apos;));        </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>我們不需要<code>tsconfig.json</code>這個檔案,直接可以寫成json物件<br>另外記得設定src(ts所在的位置)與dest(輸出ts的位置)</p>
<ul>
<li><p>設定package.json</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">  &quot;start&quot;: &quot;node ./bin/www&quot;,</div><div class="line">  &quot;dev&quot;: &quot;supervisor ./bin/www&quot;,</div><div class="line">  &quot;test&quot;: &quot;node_modules/.bin/nightwatch&quot;,</div><div class="line">  &quot;e2e&quot;: &quot;npm-run-all --parallel start test&quot;,</div><div class="line">  &quot;run&quot;: &quot;node ./bin/www&quot;,</div><div class="line">  &quot;ts&quot;: &quot;gulp app&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>執行 <code>npm run ts</code></p>
</li>
<li>檢查輸出的js,再說一次因為Typescript是Javascript的Super Set<br>所以可以預期會產生相同的檔案內容(副檔名變成.js)</li>
<li>運行網站確定功能正常</li>
</ul>
<h3 id="修改ts檔"><a href="#修改ts檔" class="headerlink" title="修改ts檔"></a>修改ts檔</h3><p>雖然js檔已正常產生,但是其實這一切都是假的!<br>原因是我們的ts檔其實仍然在寫js<br><img src="https://i.imgur.com/5aCuXSy.jpg" alt=""><br>在執行gulp的過程當中,應該可以看到一些提示訊息.<br>由於有各種情況,就不一一說明了.<br>我在這此改版的疑難就附在下面,如果有遇到相同的問題,可以作為參考.<br>如果有不同問題,也可以留言討論喔(雖然我覺得是自行google會快一些) XD</p>
<h3 id="疑難"><a href="#疑難" class="headerlink" title="疑難"></a>疑難</h3><ul>
<li><p><a href="https://stackoverflow.com/questions/31173738/typescript-getting-error-ts2304-cannot-find-name-require" target="_blank" rel="external">typescript getting error TS2304: cannot find name ‘require’</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/28793098/express-and-typescript-error-stack-and-error-status-properties-do-not-exist" target="_blank" rel="external">Express and Typescript - Error.stack and Error.status properties do not exist</a>    </p>
</li>
<li><a href="https://github.com/Microsoft/vscode/issues/21968" target="_blank" rel="external">Error TS2693: ‘Promise’ only refers to a type, but is being used as a value here.</a></li>
</ul>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol>
<li><a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="external">npm scripts 使用指南</a></li>
<li><a href="https://stackoverflow.com/questions/31173738/typescript-getting-error-ts2304-cannot-find-name-require" target="_blank" rel="external">typescript getting error TS2304: cannot find name ‘ require’
</a></li>
<li><a href="https://stackoverflow.com/questions/28793098/express-and-typescript-error-stack-and-error-status-properties-do-not-exist" target="_blank" rel="external">Express and Typescript - Error.stack and Error.status properties do not exist</a></li>
<li><a href="https://github.com/ivogabe/gulp-typescript" target="_blank" rel="external">gulp-typescript</a></li>
<li><a href="https://github.com/Microsoft/vscode/issues/21968" target="_blank" rel="external">Promise static method give error</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原因與目的&quot;&gt;&lt;a href=&quot;#原因與目的&quot; class=&quot;headerlink&quot; title=&quot;原因與目的&quot;&gt;&lt;/a&gt;原因與目的&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;目前我使用 express 作為網站開發&lt;/li&gt;
&lt;li&gt;我是個 .NET 工程師,習慣用強型別語言作
    
    </summary>
    
    
      <category term="expressjs" scheme="http://blog.marsen.me/tags/expressjs/"/>
    
      <category term="typescript" scheme="http://blog.marsen.me/tags/typescript/"/>
    
      <category term="gulp" scheme="http://blog.marsen.me/tags/gulp/"/>
    
      <category term="nodejs" scheme="http://blog.marsen.me/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>[記錄]串接 GOOGLE API 取得資料(二)</title>
    <link href="http://blog.marsen.me/2017/07/20/google_api_auth_2/"/>
    <id>http://blog.marsen.me/2017/07/20/google_api_auth_2/</id>
    <published>2017-07-19T17:04:14.000Z</published>
    <updated>2017-07-19T17:12:05.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>在<a href="https://blog.marsen.me/2017/07/14/google_api_auth_1/">前篇</a>說明為什麼我要作「精神力評鑑」 </p>
<p>原因是為了記錄自已的精力,能更有效率使用時間,進而提昇個人的生產力.</p>
<h2 id="應用"><a href="#應用" class="headerlink" title="應用"></a>應用</h2><p>有了數據後, 就要看怎麼運用.<br>Google 的表單,可以自動產生回應結果試算表,<br>持之以恒的每天記錄,很快就有上百千筆的資料.</p>
<p>我打算取得這些資料後,繪制成分佈圖<br>這樣就可以知道,我的黃金時間是在每一天的什麼時段.</p>
<h3 id="如何透過-GOOGLE-Sheets-API-可以取得資料"><a href="#如何透過-GOOGLE-Sheets-API-可以取得資料" class="headerlink" title="如何透過 GOOGLE Sheets API 可以取得資料."></a>如何透過 <a href="https://developers.google.com/sheets/api/reference/rest/" target="_blank" rel="external">GOOGLE Sheets API</a> 可以取得資料.</h3><p>在<a href="https://cloud.google.com/?hl=zh-tw" target="_blank" rel="external">Google Cloud Platform</a>,建立起 Google API 的服務。</p>
<ol>
<li>前往<a href="https://console.developers.google.com/start/api?id=sheets.googleapis.com" target="_blank" rel="external">Google API Wizard</a>,建立或選擇專案。</li>
<li>建立憑証,選擇OAuth Client ID<ul>
<li>在這裡我會一次性的建立起所有環境(開發、測試、正式)的憑証 。</li>
</ul>
</li>
<li>下載JSON放置專案的指定位置.</li>
<li>如何取得授權與取得資料，請參考<a href="https://developers.google.com/sheets/api/quickstart/nodejs" target="_blank" rel="external">QuickStart</a><ul>
<li>安全考量,我不會將client_secret.json與取回的token 加入版本控制</li>
<li>以Google 試算表為例，如何取得<a href="https://developers.google.com/sheets/api/guides/concepts" target="_blank" rel="external">spreadsheetId</a>? 很簡單，網址上就可以取得。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ex:</div><div class="line">https://docs.google.com/spreadsheets/d/1qpyC0XzvTcKT6EISywvqESX3A0MwQoFDE8p-Bll4hps/edit#gid=0</div><div class="line">的spreadsheetId就是1qpyC0XzvTcKT6EISywvqESX3A0MwQoFDE8p-Bll4hps</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h3 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h3><p>以 QuickStart 的程式為例 ,<br>下載回來的檔案 <code>client_secret.json</code><br>可以提供 <code>clientSecret</code>、<code>clientId</code> 與授權後轉導的 url ,<br>當程式執行時, 便會透 <code>googleAuth</code> 去取得授權 ,<br>過程之中會需要使用者作驗証, 驗証完成即取得授權 ,<br>授權有一定的效期, 故一段時間之後需要重新取得授權 </p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ol>
<li><p><code>client_secret.json</code> 是機敏資料, 不可以放入版本控制, 需要特殊的流程步驟上傳到你的 Web Server 的位置</p>
<ul>
<li>Openshift可以透過SSH或是SFTP登入來上傳<code>client_secret.json</code></li>
<li>CI 以 JENKINS 為例 ; 可以使用 Publish over SSH 上傳檔案<br><img src="https://i.imgur.com/Fo4Ml5M.jpg" alt=""><ul>
<li>需要注意 CI Server 要有 Web Server 的 SSH Key</li>
<li>LINUX 複製資料夾語法 <code>cp -rf src/folder/. target/folder</code></li>
</ul>
</li>
</ul>
</li>
<li><p>在正式公開的環境上可能會發生<code>Error: invalid_scope</code>的錯誤 ，可以<a href="https://support.google.com/code/contact/oauth_app_verification?id=705847791246&amp;client=705847791246-l20jeqj1ncv2vffaki70ing4c8cda2r1.apps.googleusercontent.com&amp;query=https://www.googleapis.com/auth/spreadsheets.readonly" target="_blank" rel="external">參考</a>。</p>
<ul>
<li>填寫表單作驗証</li>
<li>個人測試可以加入<a href="https://groups.google.com/forum/#!forum/risky-access-by-unreviewed-apps" target="_blank" rel="external">Risky Access Permissions By Unreviewed Apps</a> 論壇</li>
</ul>
</li>
<li><p>我最後是使用<a href="https://d3js.org/" target="_blank" rel="external">d3.js</a>作為繪圖的library , 因為網路上的資源相當的多 , 而且這次的著墨並不多 , 所以不在這裡介紹. </p>
</li>
</ol>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><img src="https://i.imgur.com/8FYzhdg.gif" alt=""></p>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol>
<li><a href="https://blog.openshift.com/using-filezilla-and-sftp-on-windows-with-openshift/" target="_blank" rel="external">Openshift SFPT</a></li>
<li><a href="https://www.phpini.com/linux/cp-force-copy" target="_blank" rel="external">Linux CP</a></li>
</ol>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;https://blog.marsen.me/2017/07/14/google_api_auth_1/
    
    </summary>
    
    
      <category term="Google API" scheme="http://blog.marsen.me/tags/Google-API/"/>
    
      <category term="OAuth" scheme="http://blog.marsen.me/tags/OAuth/"/>
    
  </entry>
  
  <entry>
    <title>[記錄]串接 GOOGLE API 取得資料(一)</title>
    <link href="http://blog.marsen.me/2017/07/14/google_api_auth_1/"/>
    <id>http://blog.marsen.me/2017/07/14/google_api_auth_1/</id>
    <published>2017-07-14T07:14:27.000Z</published>
    <updated>2017-07-19T17:01:00.051Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原由"><a href="#原由" class="headerlink" title="原由"></a>原由</h2><p>最近看了一本書,「最有生產力的一年」. 書如其名,是一本有關生產力的書,作者用了一年的時間, </p>
<p>以自已作實驗,測試各種方法並檢驗是否有效. </p>
<p>作者認為,時間 x 專注力 x 精力 = 生產力, 在他眾多的方法之中, </p>
<p>「黃金時間」與「精神力評鑑」是一組相關的方法. </p>
<p>簡單的說,一個人的精力狀況,會隨著一天的生理、心理等客觀或主觀因素起起伏伏,</p>
<p>就像潮汐一樣,而作者認為人應該在精力最好的時段,作最有價值的事.</p>
<p>這個時段就被稱作「黃金時間」.</p>
<p>有些人黃金時間在早上,有些人在晚上,每個人都不相同,</p>
<p>因此需要記錄精神狀態來判斷.</p>
<h2 id="規劃"><a href="#規劃" class="headerlink" title="規劃"></a>規劃</h2><p>於是我設計一組簡單的方法來記錄精神狀態</p>
<p>透過google表單用來作記錄,</p>
<p><img src="https://i.imgur.com/XjfNTZR.jpg" alt=""></p>
<p>狀態我以10分制來作為評選, 再兩兩一組, 共分為五組「優、良、佳、可、劣」</p>
<p>在評鑑時先以五分法判斷精力狀況, 再以感覺是好一點或差一點來選取分數. </p>
<h3 id="行動化"><a href="#行動化" class="headerlink" title="行動化"></a>行動化</h3><p>以我個人的習慣, 手機其實是不離身的, 如果每次記錄都要在個人電腦上作業, 其實是很不方便的.</p>
<p>所以我參考了電腦玩物的「<a href="http://www.playpcesor.com/2015/09/excel-google-sheet-form-account-book.html" target="_blank" rel="external">Excel 記帳雲端進化！ Google 表單比記帳 App 還好用</a>」</p>
<p>將我的表單(偽)APP化</p>
<p><img src="https://i.imgur.com/FW0VvjY.jpg" alt=""></p>
<p>如此一來便完成了方便記錄的工具, 至於記錄下來的數據如何應用</p>
<p>又是後話了. 不過順帶一提,我會透過整點報時的工具來提醒自已作記錄,</p>
<p>另外我不像「最有生產力的一年」的作者特別準時睡覺,或是不喝咖啡,</p>
<p>因為不準時睡覺跟嗜飲咖啡是我目前的習慣,我認為抱持平常的狀態去記錄才有意義.</p>
<p>又或者當我戒掉咖啡或是開始早睡早起的習慣時,我就可以用記錄來評量這樣的行為是否有所改善.</p>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原由&quot;&gt;&lt;a href=&quot;#原由&quot; class=&quot;headerlink&quot; title=&quot;原由&quot;&gt;&lt;/a&gt;原由&lt;/h2&gt;&lt;p&gt;最近看了一本書,「最有生產力的一年」. 書如其名,是一本有關生產力的書,作者用了一年的時間, &lt;/p&gt;
&lt;p&gt;以自已作實驗,測試各種方法並檢
    
    </summary>
    
    
      <category term="Google API" scheme="http://blog.marsen.me/tags/Google-API/"/>
    
      <category term="最有生產力的一年" scheme="http://blog.marsen.me/tags/%E6%9C%80%E6%9C%89%E7%94%9F%E7%94%A2%E5%8A%9B%E7%9A%84%E4%B8%80%E5%B9%B4/"/>
    
  </entry>
  
  <entry>
    <title>[活動筆記]測試即學習</title>
    <link href="http://blog.marsen.me/2017/05/19/testingislearning/"/>
    <id>http://blog.marsen.me/2017/05/19/testingislearning/</id>
    <published>2017-05-19T06:03:01.000Z</published>
    <updated>2017-07-15T16:28:11.468Z</updated>
    
    <content type="html"><![CDATA[<h2 id="應該知道的事"><a href="#應該知道的事" class="headerlink" title="應該知道的事:"></a>應該知道的事:</h2><ul>
<li><p>報名資訊(已結束)<br><a href="http://www.accupass.com/go/testingislearning" target="_blank" rel="external">Agile Meetup 2017/05 (2): 測試即學習</a></p>
</li>
<li><p>這裡不講TDD,沒有程式 </p>
</li>
</ul>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>讀這篇文章的人，或許可以找一位朋友來作相同的流程練習</p>
<ol>
<li>一張不明所以的圖片當作受測對象，任意發散的詢問測試問題</li>
<li>分類所有的問題為WHY、HOW、WHAT</li>
<li>畫出Golden Circle，核心是WHY</li>
<li>透過WHY揭露受測對象圖片的本質(TAROT)，收斂測試範圍</li>
<li>重新詢問測試問題，儘可能的發散</li>
<li>所有人交流自已看到可能的測試問題</li>
<li>重複5~6步，有意識的去覺察自已的感覺<ul>
<li>別人注意到的問題你為什麼沒發現？</li>
<li>別人如何發現問題？</li>
<li>你有沒有辦法發現相同的問題(殊途同歸)？</li>
</ul>
</li>
</ol>
<h2 id="測試的概念"><a href="#測試的概念" class="headerlink" title="測試的概念"></a>測試的概念</h2><ol>
<li>受測者</li>
<li>問題</li>
<li>答案</li>
<li>預期的結果(test oracles)</li>
</ol>
<p><img src="https://i.imgur.com/Qy8F4Vw.png" alt=""></p>
<h2 id="問題的核心-Know-Your-Mission-KNW"><a href="#問題的核心-Know-Your-Mission-KNW" class="headerlink" title="問題的核心 Know Your Mission(KNW)"></a>問題的核心 Know Your Mission(KNW)</h2><ol>
<li>WHY ?<br> 本次分享的重點，如何了解、探索、學習產品的知識，給客戶的價值等… 。</li>
<li>HOW ? =&gt; 如何作到？</li>
<li>WHAT ? =&gt; 產生測試項目</li>
<li>TEST ? =&gt; 執行測試，回饋並且回到第一步Loop。</li>
</ol>
<h2 id="應該觀注的資訊-information-is-learning"><a href="#應該觀注的資訊-information-is-learning" class="headerlink" title="應該觀注的資訊 information is learning"></a>應該觀注的資訊 information is learning</h2><ol>
<li>Customer</li>
<li>Product</li>
<li>Project</li>
<li>Mission</li>
</ol>
<p>透過WHY的詰問，了解你的任務(Know Your Mission)<br>學習到受測對象的本質，排除不必要的測試發想。<br>收斂了測試範圍，決定了測試方向。</p>
<h2 id="探索測試"><a href="#探索測試" class="headerlink" title="探索測試"></a>探索測試</h2><ol>
<li>儘可能的發散</li>
<li>摹仿別人看事情的角度</li>
<li>有意識的學習(mindful learning)    <ul>
<li>記錄</li>
<li>總結</li>
<li>歸納問題的核心</li>
<li>給它起一個名字(沒有專有名詞的話)</li>
<li>有意識的逃離第一印象</li>
<li>小心不經意的盲區(inattentional blindness)</li>
<li>數量 X 練習 X 思考 X 學習 = 提昇</li>
</ul>
</li>
</ol>
<h2 id="回饋"><a href="#回饋" class="headerlink" title="回饋"></a>回饋</h2><ol>
<li>刻意練習 vs 有意識的練習，類似的東西，但是沒有具體的方法</li>
<li>課程中提到的<a href="https://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action?language=zh-tw" target="_blank" rel="external">影片</a></li>
</ol>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;應該知道的事&quot;&gt;&lt;a href=&quot;#應該知道的事&quot; class=&quot;headerlink&quot; title=&quot;應該知道的事:&quot;&gt;&lt;/a&gt;應該知道的事:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;報名資訊(已結束)&lt;br&gt;&lt;a href=&quot;http://www.accupass.c
    
    </summary>
    
    
      <category term="Testing" scheme="http://blog.marsen.me/tags/Testing/"/>
    
  </entry>
  
  <entry>
    <title>CI/CD 環境建置筆記(二) - 在 windows 安裝 Jenkins 之旁門左道私有雲</title>
    <link href="http://blog.marsen.me/2017/04/29/ci_use_jenkins_on_two_windows/"/>
    <id>http://blog.marsen.me/2017/04/29/ci_use_jenkins_on_two_windows/</id>
    <published>2017-04-29T03:55:16.000Z</published>
    <updated>2017-04-29T05:17:33.520Z</updated>
    
    <content type="html"><![CDATA[<h2 id="應該要知道的事"><a href="#應該要知道的事" class="headerlink" title="應該要知道的事"></a>應該要知道的事</h2><ul>
<li>Dropbox</li>
<li>Windows Service</li>
<li><a href="/2017/01/15/ci_use_jenkins/">CI/CD 環境建置筆記(一) - 在 windows 安裝 Jenkins </a></li>
</ul>
<h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>在 windows 上安裝了Jenkins , 也建立了一個新的作業 ,<br>讓程式可以透過 Jenkins 執行自動化部署。<br>不過實務上仍有缺點，那就是只有這台機器可以執行部署 ,<br>最理想的狀況是擁有一個在雲端的 CI Server ,<br>隨時隨地想部署只需要能連上網 , 登入執行就好<br>這部份可以試試看 <code>Travis-CI</code>、<code>CircleCI</code>之類的服務 ;<br>不過對於只熟悉 Jenkins 的我來說 ,<br>我想了另一套解決辦法(旁門左道) ,<br>不過至少解決了我目前的需求 ,<br>在公司與家中隨時都能透過本機Jenkins Server 進行部署 ,<br>並且不用花時間同步設定值.<br>在花時間研究<code>Travis-CI</code>、<code>CircleCI</code>的部署方式之前 ,<br>算是一個折衷的方式 .</p>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><ol>
<li>首先你要有 Dropbox </li>
<li>下載 Windows 版的 Jenkins</li>
<li>安裝在 Dropbox 資料夾內</li>
<li>在另外一台電腦 , 進行相同的安裝</li>
</ol>
<p>想法很簡單 , 透過 Dropbox 與 Jenkins Service<br>在兩台電腦安裝 Jenkins<br>只要將 Jenkins Service 的啟動路徑<br>設定在 Dropbox 中 ,<br>就可以達成我們的目標 .<br><img src="https://i.imgur.com/DyrNMJD.jpg" alt=""></p>
<h2 id="問題-1"><a href="#問題-1" class="headerlink" title="問題"></a>問題</h2><ol>
<li>Windows 要如何修改 Jenkins Service 的啟動路徑 ?</li>
</ol>
<p><code>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\Jenkins</code></p>
<p>修改路徑以符合你本機的檔案位置即可。</p>
<p><img src="https://i.imgur.com/KGemCSe.jpg" alt=""></p>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;應該要知道的事&quot;&gt;&lt;a href=&quot;#應該要知道的事&quot; class=&quot;headerlink&quot; title=&quot;應該要知道的事&quot;&gt;&lt;/a&gt;應該要知道的事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Dropbox&lt;/li&gt;
&lt;li&gt;Windows Service&lt;/li&gt;
&lt;li&gt;&lt;a
    
    </summary>
    
    
      <category term="CI" scheme="http://blog.marsen.me/tags/CI/"/>
    
      <category term="Jenkins" scheme="http://blog.marsen.me/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>[活動筆記]單元測試這樣玩就對了</title>
    <link href="http://blog.marsen.me/2017/04/23/unitestwriting/"/>
    <id>http://blog.marsen.me/2017/04/23/unitestwriting/</id>
    <published>2017-04-22T16:01:39.000Z</published>
    <updated>2017-04-29T05:18:22.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="應該知道的事"><a href="#應該知道的事" class="headerlink" title="應該知道的事:"></a>應該知道的事:</h2><ul>
<li>使用 C# , 但是其他語言也適用 </li>
<li>使用 Visual Studio</li>
<li>案例一有基本數理的專有名詞<ul>
<li>上界(Upper Bound)、下界(lower Bound)、左邊界(Left Bound)、右邊界(Right Bound)</li>
</ul>
</li>
<li>報名資訊(已結束)<br><a href="http://www.accupass.com/go/unitestwriting" target="_blank" rel="external">Agile Meetup 2017/04 意外版: 單元測試這樣玩就對了</a></li>
</ul>
<h2 id="案例一、數值區間"><a href="#案例一、數值區間" class="headerlink" title="案例一、數值區間"></a>案例一、數值區間</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">假定給任一整數區間</div><div class="line">ex:</div><div class="line">(1,6] = &#123;2,3,4,5,6&#125; </div><div class="line">[-2,4) = &#123;-2,-1,0,1,2,3&#125;</div><div class="line">透過一個function(x)檢查x是否包含在整數區間內,</div><div class="line">並撰寫測試,驗証 function(x)是對的。</div></pre></td></tr></table></figure>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>如上範例所示,<br>「(」「)」小括號(parentheses)表示<code>OPEN</code>(不包含,大於或小於)<br>「[」「]」中括號(square brackets)表示<code>CLOSE</code>(包含,大於等於或小於等於)<br> (1,6] , 代表這個區間大於1小於等於6,包含的整數有 2、3、4、5、6<br> [-2,4), 代表這個區間大於等於-2小於4,包含的整數有-2、-1、0、1、2、3</p>
<p><img src="https://i.imgur.com/TDHhx0A.png" alt=""></p>
<p>這題比較單純,只需要考慮所有的情況,<br>並且寫成單元測試即可。</p>
<ol>
<li>x 落在區間內</li>
<li>x 落在左邊界外</li>
<li>x 落在右邊界外</li>
<li>x 落在左邊界上,左邊界為<code>OPEN</code></li>
<li>x 落在左邊界上,左邊界為<code>CLOSE</code></li>
<li>x 落在右邊界上,右邊界為<code>OPEN</code></li>
<li>x 落在右邊界上,右邊界為<code>CLOSE</code></li>
</ol>
<p>有幾種特殊的情境,特別說明一下</p>
<ol>
<li>假設區間為(0,1),這個區間是不包含任何整數</li>
<li>假設區間為(1,1),這個區間是不包含任何整數,且不包含任何數值</li>
<li>假設區間為[1,1],這個區間恰巧包含1個整數,且只包含1這個整數</li>
<li>假設”區間”為[2,1],或任何左邊界大右邊界的表示,這不是一個正確的區間,將要作例外處理。</li>
</ol>
<p>讓我們回歸單元測試,<br>這裡的重點是<strong>一個測試只作一件事</strong>,<br>只把一個情境釐清,並且在測試的程式碼中<br><strong>明確的表達測試目的</strong></p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> leftBound = <span class="number">1</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> rightBound = <span class="number">6</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> testNum = <span class="number">4</span>;</div><div class="line"></div><div class="line">[TestMethod]</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IncludeWhenLeftOpenRightClose</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> checker = <span class="keyword">new</span> RangeChecker(Bound.Open,<span class="keyword">this</span>.leftBound,Bound.Close,<span class="keyword">this</span>.rightBound);</div><div class="line">    <span class="keyword">bool</span> expect = <span class="literal">false</span>;            </div><div class="line">    <span class="keyword">bool</span> result = checker.IsContains(testNum);</div><div class="line">    Assert.IsTrue(result);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="案例二、現在時間轉字串"><a href="#案例二、現在時間轉字串" class="headerlink" title="案例二、現在時間轉字串"></a>案例二、現在時間轉字串</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">寫一個方法GetNowString,不傳入任何參數,</div><div class="line">取得現在的時間字串,需要精準到豪秒。</div><div class="line">再寫一個測試去測試這個方法是對的‧</div></pre></td></tr></table></figure>
<h3 id="版本1"><a href="#版本1" class="headerlink" title="版本1"></a>版本1</h3><p>最簡單的寫法:</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DateHelper</span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetNowString</span>(<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> DateTime.Now.ToString(<span class="string">"yyyy-MM-dd hh:mm:ss ff"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>撰寫測試<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[TestMethod]</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetNowString</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">var</span> </div><div class="line">	<span class="comment"><span class="doctag">///</span>/ 寫不下去,因為我們無法凍結系統的時間</span></div><div class="line">	<span class="keyword">string</span> expect = <span class="string">"2017-04-19 20:45:17.88"</span>;</div><div class="line">	<span class="keyword">string</span> result = dater.GetNowString();</div><div class="line">	Assert.AreEqual(expect, result);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h3><p><code>GetNowString</code>與系統的時間<code>DateTime.Now</code>,<br>是具有耦合性,要解耦需要透過一些IoC的手段去處理。</p>
<h3 id="版本2"><a href="#版本2" class="headerlink" title="版本2"></a>版本2</h3><p>利用繼承的方法,作出假的類別<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DateHelper</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">protected</span> DateTime now;</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> DateTime <span class="title">GetNow</span>(<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">		now = DateTime.Now;</div><div class="line">		<span class="keyword">return</span> now;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetNowString</span>(<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">		GetNow();</div><div class="line">		<span class="keyword">return</span> now.ToString(<span class="string">"yyyy-MM-dd HH:mm:ss.ff"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">StubDateHelper</span>: <span class="title">DateHelper</span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> DateTime <span class="title">GetNow</span>(<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> now;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetNow</span>(<span class="params">DateTime datetime</span>)</span></div><div class="line">	&#123;</div><div class="line">		now = datetime;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>撰寫測試<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[TestMethod]</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetNowString</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">	StubDateHelper dateHelper = <span class="keyword">new</span> StubDateHelper();</div><div class="line">	<span class="keyword">var</span> fakeNow = <span class="keyword">new</span> DateTime(<span class="number">2017</span>,<span class="number">4</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">45</span>,<span class="number">17</span>,<span class="number">880</span>);</div><div class="line">	dateHelper.SetNow(fakeNow);</div><div class="line">	<span class="keyword">string</span> expect = <span class="string">"2017-04-19 20:45:17.88"</span>;</div><div class="line">	<span class="keyword">string</span> result = dateHelper.GetNowString();</div><div class="line">	Assert.AreEqual(expect, result);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="解析-2"><a href="#解析-2" class="headerlink" title="解析"></a>解析</h3><p>基本上這樣就可以測試了,<br>原來的代碼,經過一定的重構,<br>透過<code>virtual</code>方法GetNow,<br>將<code>Datetime.Now</code>作了隔離<br>適當利用假類別,取代掉GetNow的方法。</p>
<p>這樣夠好了,但是我們可以看看另一種作法</p>
<h3 id="版本3"><a href="#版本3" class="headerlink" title="版本3"></a>版本3</h3><p>先看看我們的<code>DateHelper</code>,<br>在這裡我們將GetNow交由IDateProvider的類別去實作,<br>如此一來就斷開了耦合性。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DateHelper</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> IDateProvider DateProvider;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DateHelper</span>(<span class="params">IDateProvider dateProvider</span>)</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.DateProvider = dateProvider;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetNowString</span>(<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">var</span> now = <span class="keyword">this</span>.DateProvider.GetNow();</div><div class="line">		<span class="keyword">return</span> now.ToString(<span class="string">"yyyy-MM-dd HH:mm:ss.ff"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>實作IDateProvider的類別,<br>在這裡其實不重要.<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DateProviderV1</span> : <span class="title">IDateProvider</span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> DateTime <span class="title">GetNow</span>(<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> DateTime.Now;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>讓我們看看測試,<br>在這裡我們透過一個假的<code>IDateProvider</code>的實作<code>DateProviderStub</code>,<br>完成了測試,<br>IDateProvider將<code>DateTime.Now</code>作了隔離,<br>並且提供更容易修改的假物件(僅僅需要實作觀注的方法即可,不用擔心繼承帶來的附作用)</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[TestMethod]</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetNowString</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">	DateProviderStub dateProvider = <span class="keyword">new</span> DateProviderStub();</div><div class="line">	dateProvider.now = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">45</span>, <span class="number">17</span>, <span class="number">880</span>);</div><div class="line">	<span class="keyword">var</span> dateHelper = <span class="keyword">new</span> DateHelper(dateProvider);</div><div class="line">	<span class="keyword">string</span> expect = <span class="string">"2017-04-19 20:45:17.88"</span>;</div><div class="line">	<span class="keyword">string</span> result = dateHelper.GetNowString();</div><div class="line">	Assert.AreEqual(expect, result);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DateProviderStub</span> : <span class="title">IDateProvider</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">public</span> DateTime now;</div><div class="line">	<span class="function"><span class="keyword">public</span> DateTime <span class="title">GetNow</span>(<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> now;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="圖例解析"><a href="#圖例解析" class="headerlink" title="圖例解析"></a>圖例解析</h3><p>我們剛剛究竟幹了什麼？<br><img src="https://i.imgur.com/qeqzaoO.jpg" alt=""><br>看看原本的情況,本來的方法因為相依與<code>Datetime</code>而無法測試<br><img src="https://i.imgur.com/Mquk1Cm.png" alt=""><br>讓我們開始下刀,<br>先用一個新的方法<code>GetNow</code><br>將它與待測的方法作分割,<br>但是對整個類來說仍舊是耦合。<br><img src="https://i.imgur.com/c0Xg4vw.png" alt=""><br>繼續把這刀往下切,<br>我們墊一層介面,<br>待測方法不再直接呼叫<code>GetNow</code><br>而是透過介面執行,當然會有額外實作介面與注入的功(請參考程式碼,不在此處繪出了.)<br><img src="https://i.imgur.com/8dDlWi2.png" alt=""><br>最後,別忘了我們的目的<br>測試原本的待測方法,<br>我們可以透過一個<code>假的</code>類,<br>來操控他的行為(ex:凍結時間).<br>如此一來,就可進行測試了.<br><img src="https://i.imgur.com/c3mW59v.png" alt=""><br>另外,這種被待測方法呼叫後<br>會回傳一個假值的方法或類<br>被叫作<code>STUB</code><br><img src="https://i.imgur.com/KXvYMsx.png" alt=""></p>
<h2 id="案例三、發送郵件"><a href="#案例三、發送郵件" class="headerlink" title="案例三、發送郵件"></a>案例三、發送郵件</h2><p>事先聲明,這題沒有程式碼,<br>有興趣實作的人可以試試看.<br>如果可以分享實作後的資訊給我更好XD<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Q:註冊發送郵件如何寫單元測試？</div></pre></td></tr></table></figure></p>
<h3 id="解析-3"><a href="#解析-3" class="headerlink" title="解析"></a>解析</h3><p>很明顯的發送郵件需要依賴外部的郵件系統,<br>這裡就會有耦合性,我們可以參考案例2的方式解耦<br>不過發送郵件並不會有回傳值,<br>我們要如何驗証正確性呢？</p>
<p>A:檢查調用次數、參數</p>
<h3 id="圖例解析-1"><a href="#圖例解析-1" class="headerlink" title="圖例解析"></a>圖例解析</h3><p>在案例2的單元測試,<br>我們透過STUB偽造的回傳值完成測試<br>並執行驗証.<br>但是在沒有回傳的值的方法中(被稱作<code>MOCK</code>)<br>我們只能透過傳遞的參數(如果有多載)<br>與方法被調用的次數來進行驗証。</p>
<p><img src="https://i.imgur.com/zbllutC.png" alt=""></p>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li>單元測試要能清楚表達測試的目的(<strong>達意</strong>)<ul>
<li>命名</li>
<li>減少意外的細節</li>
</ul>
</li>
<li>單元測試一次只作一件事 </li>
<li>new 本身就是一種邏輯 一種偶合</li>
<li>static 是一種高偶合</li>
<li>繼承也是高偶合,能使用繼承的情境很少<ul>
<li>A is a B 通常只有這種情境才適合繼承</li>
</ul>
</li>
<li>STUB &amp; MOCK<ul>
<li>STUB 會有回傳值,可以在 Unit Test 作驗証(ASSERT)</li>
<li>MOCK 沒有回傳值,可以在 MOCK 本身中 作驗証(ASSERT)</li>
</ul>
</li>
</ul>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul>
<li>SLIM </li>
<li>注入相依的幾種方式<ul>
<li>Pool</li>
<li>Constructor</li>
<li>Property</li>
</ul>
</li>
<li>書單 : XUnit Test Patterns</li>
</ul>
<h2 id="直播影片"><a href="#直播影片" class="headerlink" title="直播影片"></a>直播影片</h2><p><em>如果連結失效,煩請告知.</em></p>
<ul>
<li><a href="https://www.facebook.com/AgileCommunity.tw/videos/948509765286712/" target="_blank" rel="external">影片1</a></li>
<li><a href="https://www.facebook.com/AgileCommunity.tw/videos/948548118616210/" target="_blank" rel="external">影片2</a></li>
</ul>
<p>文章內容如有謬誤,煩請指正.</p>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;應該知道的事&quot;&gt;&lt;a href=&quot;#應該知道的事&quot; class=&quot;headerlink&quot; title=&quot;應該知道的事:&quot;&gt;&lt;/a&gt;應該知道的事:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用 C# , 但是其他語言也適用 &lt;/li&gt;
&lt;li&gt;使用 Visual Studio&lt;/
    
    </summary>
    
    
      <category term="Unit Test" scheme="http://blog.marsen.me/tags/Unit-Test/"/>
    
  </entry>
  
</feed>
