<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Marsen</title>
  <icon>https://www.gravatar.com/avatar/be6152866ede00bca9d8f92aa352c938</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.marsen.me/"/>
  <updated>2019-06-17T09:47:34.337Z</updated>
  <id>https://blog.marsen.me/</id>
  
  <author>
    <name>Marsen L.</name>
    <email>thisismysoul@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[實作筆記] Stripe 串接</title>
    <link href="https://blog.marsen.me/2019/06/17/2019/stripe_payment/"/>
    <id>https://blog.marsen.me/2019/06/17/2019/stripe_payment/</id>
    <published>2019-06-17T04:56:17.000Z</published>
    <updated>2019-06-17T09:47:34.337Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda</h2><ul><li>Stripe 簡介</li><li>註冊</li><li>付款</li></ul><h2 id="Stripe-簡介"><a href="#Stripe-簡介" class="headerlink" title="Stripe 簡介"></a>Stripe 簡介</h2><blockquote><p>Stripe是一家提供讓個人或公司在網際網路上接受付款服務的科技公司。<br>Stripe提供在網上接受付款所需的技術、避免信用卡詐騙技術及銀行基礎設施  </p></blockquote><p>– 引述自 Wiki</p><blockquote><p>Our mission is to increase<br>the GDP of the internet  </p></blockquote><p>– 引述自 Stripe 官網</p><p>業務範圍大多為歐美，亞洲方面支援香港、新加坡與日本等國…</p><h2 id="註冊"><a href="#註冊" class="headerlink" title="註冊"></a>註冊</h2><p>只需要透過信箱即可<a href="https://dashboard.stripe.com/register" target="_blank" rel="noopener">註冊</a>，  註冊後需要到信箱收取確認信以開通帳戶，<br>如果真的要在線上使用需要提供公司相關的資訊，<br>但以開發者而言，此時的 Stripe 已經提供一組測試 api 供你使用，<br>隨後即可以登入後台操作。<br><strong>請在 Dashboard 的左邊側欄&gt;開發者&gt;API 密鑰，取得Secret key</strong> ，<br>在後面呼叫 API 中都會使用這組 Secret Key 請特別留意。</p><h2 id="付款"><a href="#付款" class="headerlink" title="付款"></a>付款</h2><p>這裡只介紹 Stripe 信用卡的付款方法，<br>並根據 <a href="https://stripe.com/doc" target="_blank" rel="noopener">Stripe 文件</a>整理一些資訊給大家。  </p><p>如下圖，這是一個標準的 Stripe 結帳流程，<br><img src="/images/2019/6/01-overview.png" alt="stripe overview"></p><p>主要的兩個步驟在 <code>Create Source</code> 與 <code>Create Charge</code> ，<br>這裡會透過呼叫 <a href="https://stripe.com/docs/api" target="_blank" rel="noopener">Stripe API</a> 以完成付款流程。  </p><p>下面會介紹幾種信用卡的付款方式， 僅供參考，實際作業請以最新的 Stripe 文件為準。<br>過程中如有呼叫 API 都會用 curl 帶過，<br>Secret Key 一律以 <code>sk</code> 表示， Public Key 以 <code>pk</code> 表示<br>Stripe 有提供多種語言的範例或是提供 SDK 或 Libary， 請親自去看它們的文件囉。</p><h3 id="使用-Checkout-Session"><a href="#使用-Checkout-Session" class="headerlink" title="使用 Checkout Session"></a>使用 Checkout Session</h3><h4 id="Step-1-建立-Session"><a href="#Step-1-建立-Session" class="headerlink" title="Step 1. 建立 Session"></a>Step 1. 建立 Session</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl https://api.stripe.com/v1/checkout/sessions \</span><br><span class="line">  -u sk_test_dAa6L6BL4gZDuscgJcl3an8K00aJL2yIaW: \</span><br><span class="line">  -d payment_method_types[]=card \</span><br><span class="line">  -d line_items[][name]=T-shirt \</span><br><span class="line">  -d line_items[][description]=<span class="string">"Comfortable cotton t-shirt"</span> \</span><br><span class="line">  -d line_items[][images][]=<span class="string">"https://example.com/t-shirt.png"</span> \</span><br><span class="line">  -d line_items[][amount]=500 \</span><br><span class="line">  -d line_items[][currency]=hkd \</span><br><span class="line">  -d line_items[][quantity]=1 \</span><br><span class="line">  -d success_url=<span class="string">"https://example.com/success"</span> \</span><br><span class="line">  -d cancel_url=<span class="string">"https://example.com/cancel"</span></span><br></pre></td></tr></table></figure><h4 id="Step-2-建立-CheckOut-頁面"><a href="#Step-2-建立-CheckOut-頁面" class="headerlink" title="Step 2. 建立 CheckOut 頁面"></a>Step 2. 建立 CheckOut 頁面</h4><p>Step 1 會取得一組 session_id ，請填入頁面中的<code>{session_id}</code>，<code>pk</code> 請填入 <code>public key</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://js.stripe.com/v3/"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">var stripe = Stripe('pk');</span></span><br><span class="line"><span class="undefined">stripe.redirectToCheckout(&#123;</span></span><br><span class="line"><span class="undefined">  // Make the id field from the Checkout Session creation API response</span></span><br><span class="line"><span class="undefined">  // available to this file， so you can provide it as parameter here</span></span><br><span class="line"><span class="undefined">  // instead of the &#123;&#123;CHECKOUT_SESSION_ID&#125;&#125; placeholder.</span></span><br><span class="line"><span class="undefined">  sessionId: '&#123;session_id&#125;'</span></span><br><span class="line"><span class="undefined">&#125;).then(function (result) &#123;</span></span><br><span class="line"><span class="undefined">  // If `redirectToCheckout` fails due to a browser or network</span></span><br><span class="line"><span class="undefined">  // error， display the localized error message to your customer</span></span><br><span class="line"><span class="undefined">  // using `result.error.message`.</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Step-3-載入頁面"><a href="#Step-3-載入頁面" class="headerlink" title="Step 3. 載入頁面"></a>Step 3. 載入頁面</h4><p>調整你的付款流程，引導消費者到 Step 2. 的頁面，<br>會自動轉導到 Stripe 的標準頁，並且出現填寫信用卡的資訊，<br>消費者需要手動輸入卡號後，確認付款。<br>如果確認會引導至 Step 1 的 <code>success_url</code><br>消費者取消的話會引導至 Step 1 的 <code>cancel_url</code>  </p><h4 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h4><p>這是標準的第三方串接步驟，可以發現在 Step 3 的時候，<br>消費者會被帶離你原本的站台到 Stripe 的付款頁面，<br>這樣的好處是你不需要經手敏感的資料，像是信用卡卡號，<br>但是有時候，轉導到外部頁面會讓消費者不安進而中斷結帳，<br>那我們可以參考其它的作法。  </p><h3 id="使用-Source"><a href="#使用-Source" class="headerlink" title="使用 Source"></a>使用 Source</h3><p>一般來說，Source 是 Stripe 最常用的付款方式，<br>但在歐洲相關規定調整後，信用卡不再建議使用這個 API。<br>可以參考官方文件的<a href="https://stripe.com/docs/sources/cards" target="_blank" rel="noopener">說明</a></p><blockquote><p>Card Payments with Sources<br>Use Sources to accept card payments from around the world.  </p><p>Use of this API is no longer recommended. We recommend adopting the Payment Intents API.<br>This new integration lets you benefit from Dynamic 3D Secure and helps you prepare for<br>Strong Customer Authentication regulation in Europe.</p></blockquote><p>不過理論上您的客戶中沒有歐洲人的話，還是可以呼叫這個 API ，<br>作法如下:</p><h4 id="Step-1-Create-Source-並指定-Type-為-Card"><a href="#Step-1-Create-Source-並指定-Type-為-Card" class="headerlink" title="Step 1. Create Source 並指定 Type 為 Card"></a>Step 1. Create Source 並指定 Type 為 Card</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">curl https://api.stripe.com/v1/sources</span><br><span class="line">  -u sk</span><br><span class="line">  -d <span class="built_in">type</span>=card</span><br><span class="line">  -d currency=hkd</span><br><span class="line">  -d owner[email]=<span class="string">"jenny.rosen@example.com"</span></span><br><span class="line">  -d card[number]=&#123;&#123;cardNumber&#125;&#125;</span><br><span class="line">  -d card[exp_month]=12</span><br><span class="line">  -d card[exp_year]=2020</span><br><span class="line">  -d card[cvc]=123</span><br></pre></td></tr></table></figure><h4 id="Step-2-Charge-With-Source"><a href="#Step-2-Charge-With-Source" class="headerlink" title="Step 2. Charge With Source"></a>Step 2. Charge With Source</h4><p>Step 1 可以取得 source id，利用 source id 呼叫 charge API 付款   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl https://api.stripe.com/v1/charges</span><br><span class="line">  -u sk</span><br><span class="line">  -d <span class="built_in">source</span>=&#123;&#123;<span class="built_in">source</span> id&#125;&#125;</span><br><span class="line">  -d amount=411</span><br><span class="line">  -d currency=hkd</span><br><span class="line">  -d description=<span class="string">"Charge for jenny.rosen@example.com"</span></span><br><span class="line">  -d metadata[a]=<span class="string">"b"</span></span><br><span class="line">  -d metadata[b]=123</span><br></pre></td></tr></table></figure><h3 id="使用-Token"><a href="#使用-Token" class="headerlink" title="使用 Token"></a>使用 Token</h3><p>不過 Sorce 信用卡在<a href="https://stripe.com/docs/payments/payment-methods#transitioning" target="_blank" rel="noopener">官方文件</a>上不再被建議使用，<br>我們可以看看另一個類似方法 <em>Token</em></p><h4 id="Step-1-Create-Token-並傳入卡號"><a href="#Step-1-Create-Token-並傳入卡號" class="headerlink" title="Step 1. Create Token 並傳入卡號"></a>Step 1. Create Token 並傳入卡號</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl https://api.stripe.com/v1/tokens</span><br><span class="line">  -u sk</span><br><span class="line">  -d card[number]=&#123;&#123;cardNumber&#125;&#125;</span><br><span class="line">  -d card[exp_month]=12</span><br><span class="line">  -d card[exp_year]=2020</span><br><span class="line">  -d card[cvc]=123</span><br></pre></td></tr></table></figure><h4 id="Step-2-Charge-With-Token"><a href="#Step-2-Charge-With-Token" class="headerlink" title="Step 2. Charge With Token"></a>Step 2. Charge With Token</h4><p>Step 1 可以取得 token id，利用 source id 呼叫 charge API 付款</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl https://api.stripe.com/v1/charges</span><br><span class="line">  -u sk</span><br><span class="line">  -d <span class="built_in">source</span>=&#123;&#123;token id&#125;&#125;</span><br><span class="line">  -d amount=412</span><br><span class="line">  -d currency=hkd</span><br><span class="line">  -d description=<span class="string">"Charge for jenny.rosen@example.com"</span></span><br><span class="line">  -d metadata[a]=<span class="string">"c"</span></span><br><span class="line">  -d metadata[b]=663</span><br></pre></td></tr></table></figure><h3 id="使用-Payment-Intent"><a href="#使用-Payment-Intent" class="headerlink" title="使用 Payment Intent"></a>使用 Payment Intent</h3><p>終於來到 Payment Intent 了，<br>實際上這是目前 Stripe 最推薦的信用卡支付方式，<br>呼叫的作法也很類似於 Source 與 Token，<br>沒什麼特別考量的話，建議使用這個付款方式。</p><h4 id="Step-1-Create-Payment-Method-並傳入卡號"><a href="#Step-1-Create-Payment-Method-並傳入卡號" class="headerlink" title="Step 1. Create Payment Method 並傳入卡號"></a>Step 1. Create Payment Method 並傳入卡號</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl https://api.stripe.com/v1/payment_methods</span><br><span class="line">  -u sk</span><br><span class="line">  -X POST  </span><br><span class="line">  -d <span class="built_in">type</span>=card  </span><br><span class="line">  -d card[number]=&#123;&#123;cardNumber&#125;&#125;</span><br><span class="line">  -d card[exp_month]=12  </span><br><span class="line">  -d card[exp_year]=2020  </span><br><span class="line">  -d card[cvc]=123</span><br></pre></td></tr></table></figure><h4 id="Step-2-Create-Payment-Intent-With-Payment-Method"><a href="#Step-2-Create-Payment-Intent-With-Payment-Method" class="headerlink" title="Step 2. Create Payment Intent With Payment Method"></a>Step 2. Create Payment Intent With Payment Method</h4><p>Step 1 可以取得 payment method id，<br>利用 payment method id 呼叫 payment intents API 付款</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl https://api.stripe.com/v1/payment_intents  </span><br><span class="line">  -u sk  </span><br><span class="line">  -d payment_method=&#123;&#123;payment method id&#125;&#125;</span><br><span class="line">  -d amount=555  </span><br><span class="line">  -d currency=hkd  </span><br><span class="line">  -d confirmation_method=manual  </span><br><span class="line">  -d confirm=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>想快速成立訂單請用 Session 的作法，<br>想要避免轉換率下降，請使用 Payment Intents。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://stripe.com/en-hk" target="_blank" rel="noopener">Online payment processing for internet businesses - Stripe</a></li><li><a href="https://dashboard.stripe.com/" target="_blank" rel="noopener">DashBoard</a></li><li><a href="https://stripe.com/docs" target="_blank" rel="noopener">Documentation | Stripe</a></li><li><a href="https://stripe.com/docs/api" target="_blank" rel="noopener">Stripe API Reference</a></li><li><a href="https://zh.wikipedia.org/wiki/Stripe" target="_blank" rel="noopener">Stripe Wiki</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Agenda&quot;&gt;&lt;a href=&quot;#Agenda&quot; class=&quot;headerlink&quot; title=&quot;Agenda&quot;&gt;&lt;/a&gt;Agenda&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Stripe 簡介&lt;/li&gt;
&lt;li&gt;註冊&lt;/li&gt;
&lt;li&gt;付款&lt;/li&gt;
&lt;/ul&gt;
&lt;h2
      
    
    </summary>
    
    
      <category term="API" scheme="https://blog.marsen.me/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記] 讓 SonarQube 檢查你的代碼 </title>
    <link href="https://blog.marsen.me/2019/05/16/2019/opensource_with_sonarcloud/"/>
    <id>https://blog.marsen.me/2019/05/16/2019/opensource_with_sonarcloud/</id>
    <published>2019-05-16T09:13:18.000Z</published>
    <updated>2019-06-10T14:43:28.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><ol><li>SonarQube 是一個開源的代碼品質(Quality)管理系統</li><li>我目前的公司 N 社是自架 SonarQube Server 再與 CI 結合</li><li>能夠透過工具讓代碼品質提昇，我訂定的目標如下<ul><li>免費</li><li>能夠與 CI 結合，持續檢查代碼品質</li><li>與 Side Project 結合</li></ul></li></ol><h2 id="應該要知道的事"><a href="#應該要知道的事" class="headerlink" title="應該要知道的事"></a>應該要知道的事</h2><ol><li>掃瞄環境為 Windows</li><li>掃瞄專案為 .Net Core 2.2 版</li><li>使用 PowerShell 執行 Command</li><li>也許不需要知道</li></ol><h2 id="實作筆記"><a href="#實作筆記" class="headerlink" title="實作筆記"></a>實作筆記</h2><ol><li>申請<a href="https://sonarcloud.io" target="_blank" rel="noopener">SonarCloud</a>帳號，我直接使用 Github  <ul><li>需要允許 SonarCloud 存取 Github 的專案 Repo</li><li>建立一組 Token, 用來作身份驗証，可以重複使用請勿外流<ul><li>如果要刪除 Token 請至 My Account &gt; Security 找到並 Revoke<br><img src="/images/2019/5/sonarcloud_gen.jpg" alt="建立 token"><br><img src="/images/2019/5/sonarcloud_gentoken.jpg" alt="建立 token2">  </li></ul></li><li>下載 SonarQube 執行檔，請選擇你的語言<br>  <img src="/images/2019/5/sonarcloud_command.jpg" alt="執行命令">  </li></ul></li><li>執行掃瞄前的準備作業<ul><li>設定 Path (實務上我沒有設定)</li><li>切換到專案目錄底下</li></ul></li><li>啟動掃瞄，以 .Net Core 為例</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> dotnet <span class="string">"&#123;path of sonar scanner&#125;\SonarScanner.MSBuild.dll"</span> begin /k:<span class="string">"&#123;project name&#125;"</span> /o:&#123;group name&#125; /d:sonar.host.url=<span class="string">"https://sonarcloud.io"</span> /d:sonar.login=<span class="string">"&#123;your token&#125;"</span></span></span><br></pre></td></tr></table></figure><p>輸出結果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Using the .NET Core version of the Scanner for MSBuild</span><br><span class="line">Pre-processing started.</span><br><span class="line">中略...</span><br><span class="line">16:40:31.855  Pre-processing succeeded.</span><br></pre></td></tr></table></figure><ol><li>建置專案</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet build</span><br></pre></td></tr></table></figure><p>輸出結果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Microsoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core</span><br><span class="line">Copyright (C) Microsoft Corporation. All rights reserved.</span><br><span class="line">中略...</span><br><span class="line">Build succeeded.</span><br></pre></td></tr></table></figure><ol><li>上傳結果</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> dotnet <span class="string">"&#123;path of sonar scanner&#125;\SonarScanner.MSBuild.dll"</span> end /d:sonar.login=<span class="string">"&#123;your token&#125;"</span></span></span><br></pre></td></tr></table></figure><p>輸出結果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SonarScanner for MSBuild 4.6.1</span><br><span class="line">Using the .NET Core version of the Scanner for MSBuild</span><br><span class="line">Post-processing started.</span><br><span class="line">中略...</span><br><span class="line">INFO: Analysis total time: 21.446 s</span><br><span class="line">INFO: ------------------------------------------------------------------------</span><br><span class="line">INFO: EXECUTION SUCCESS</span><br><span class="line">INFO: ------------------------------------------------------------------------</span><br><span class="line">INFO: Total time: 2:27.021s</span><br><span class="line">INFO: Final Memory: 24M/72M</span><br><span class="line">INFO: ------------------------------------------------------------------------</span><br><span class="line">The SonarQube Scanner has finished</span><br></pre></td></tr></table></figure><p>最後到 SonarCloud 的網站上就可以看到報告結果，<br>下一步就是將這整段流程結合 CI ，官網推薦是使用 Travis CI,<br>也有相同的文件與資源，我會試試看或是使用 Jenkins,<br>如果有機會能更進一步，我想結合 <a href="https://www.openshift.com/" target="_blank" rel="noopener">OpenShift</a> ,<br>讓部署的過程中結合代碼品質檢查。</p><p><img src="/images/2019/5/sonarcloud_result.jpg" alt="結果上傳"></p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://dotnetthoughts.net/static-code-analysis-of-netcore-projects/" target="_blank" rel="noopener">Static Code Analysis of .NET Core Projects with SonarCloud</a></li><li><a href="https://zh.wikipedia.org/wiki/SonarQube" target="_blank" rel="noopener">SonarQube - 维基百科，自由的百科全书</a></li><li><a href="https://www.sonarqube.org/" target="_blank" rel="noopener">Continuous Inspection | SonarQube</a></li><li>(fin)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;SonarQube 是一個開源的代碼品質(Quality)管理系統&lt;/li&gt;
&lt;li&gt;我目前的公司 N 社是自架
      
    
    </summary>
    
    
      <category term=".Net Core" scheme="https://blog.marsen.me/tags/Net-Core/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記] Unit Testing With TypeScript</title>
    <link href="https://blog.marsen.me/2019/05/16/2019/typescript_unit_test/"/>
    <id>https://blog.marsen.me/2019/05/16/2019/typescript_unit_test/</id>
    <published>2019-05-16T05:18:16.000Z</published>
    <updated>2019-06-10T14:43:28.967Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><ul><li>難得有機會寫前端的東西</li><li>其實只有寫 JavaScript</li><li>我要用 TypeScript 寫</li><li>合理的軟體工序 TDD</li><li>所以我要寫測試</li><li>node 版本 v8.11.1</li><li>npm 版本 5.6.0</li><li>typescript 版本 3.3.3333</li></ul><h2 id="Context-amp-User-Stories"><a href="#Context-amp-User-Stories" class="headerlink" title="Context &amp; User Stories"></a>Context &amp; User Stories</h2><p>來自前端的需求，在一個日曆工具要加入對可選日期判斷的邏輯。<br>原始需求如下，g、h、i、j 可以透過修改日曆元件選項調整，<br>而細微的日期與時間判斷需要撰寫新的方法作判斷。  </p><h3 id="原始需求"><a href="#原始需求" class="headerlink" title="原始需求"></a>原始需求</h3><blockquote><p>a. 每週一過中午12點不能選週二及以前的日期<br>b. 每週二過中午12點不能選週三及以前的日期<br>c. 每週三過中午12點不能選週四及以前的日期<br>d. 每週四過中午12點不能選週五及以前的日期<br>e. 每週五過中午12點不能選隔週一及以前的日期<br>f. 每週日都不能選<br>g. <del>90天以後的日期不能選</del><br>h. <del>需指導我們如何讓特定日期不能選，以因應遇到國定假日的狀況</del><br>i. <del>預設為選擇最近一個可以使用的日期</del><br>j. <del>改成中文</del>  </p></blockquote><h2 id="測試環境準備"><a href="#測試環境準備" class="headerlink" title="測試環境準備"></a>測試環境準備</h2><h3 id="使用-Mocha-與-Chai"><a href="#使用-Mocha-與-Chai" class="headerlink" title="使用 Mocha 與 Chai"></a>使用 Mocha 與 Chai</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D chai mocha nyc ts-node typescript</span><br></pre></td></tr></table></figure><h4 id="安裝-TypeScript"><a href="#安裝-TypeScript" class="headerlink" title="安裝 TypeScript"></a>安裝 <a href="https://www.typescriptlang.org" target="_blank" rel="noopener">TypeScript</a></h4><p>安裝至專案</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D typescript ts-node</span></span><br></pre></td></tr></table></figure><p>安裝至全域</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -g typescript</span></span><br></pre></td></tr></table></figure><p>建立專案 <code>tsconfig.json</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tsc --init</span><br></pre></td></tr></table></figure><h4 id="安裝-MochaJs"><a href="#安裝-MochaJs" class="headerlink" title="安裝 MochaJs"></a>安裝 <a href="https://mochajs.org/" target="_blank" rel="noopener">MochaJs</a></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D mocha @types/mocha</span><br></pre></td></tr></table></figure><h4 id="安裝-Chai"><a href="#安裝-Chai" class="headerlink" title="安裝 Chai"></a>安裝 <a href="https://www.chaijs.com/" target="_blank" rel="noopener">Chai</a></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D Chai @types/chai</span><br></pre></td></tr></table></figure><h4 id="設定測試"><a href="#設定測試" class="headerlink" title="設定測試"></a>設定測試</h4><p>package.json\</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;:&#123;</span><br><span class="line">    &quot;test&quot;: &quot;mocha -r ts-node/register tests/**/*.test.ts&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="寫測試"><a href="#寫測試" class="headerlink" title="寫測試"></a>寫測試</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123; expect &#125; from &apos;chai&apos;;</span><br><span class="line">import Calculator from &apos;../src/calculate&apos;;</span><br><span class="line"></span><br><span class="line">describe(&apos;calculate&apos;, function() &#123;</span><br><span class="line">  it(&apos;add&apos;, function() &#123;</span><br><span class="line">    let result = Calculator.Sum(5, 2);</span><br><span class="line">    expect(result).equal(7);</span><br><span class="line">  &#125;); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="實作代碼"><a href="#實作代碼" class="headerlink" title="實作代碼"></a>實作代碼</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export default class calculator &#123;</span><br><span class="line">    static Sum(a: number, b: number): number &#123;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="執行測試"><a href="#執行測試" class="headerlink" title="執行測試"></a>執行測試</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm t</span><br></pre></td></tr></table></figure><h4 id="修正代碼"><a href="#修正代碼" class="headerlink" title="修正代碼"></a>修正代碼</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export default class calculator &#123;</span><br><span class="line">    static Sum(a: number, b: number): number &#123;</span><br><span class="line">        let c = a + b;</span><br><span class="line">        eturn c;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="測試結果"><a href="#測試結果" class="headerlink" title="測試結果"></a>測試結果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">calculate</span><br><span class="line">  √ add</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1 passing (61ms)</span><br></pre></td></tr></table></figure><h2 id="測試覆蓋率"><a href="#測試覆蓋率" class="headerlink" title="測試覆蓋率"></a>測試覆蓋率</h2><p>// TODO</p><h3 id="安裝-nyc"><a href="#安裝-nyc" class="headerlink" title="安裝 nyc"></a>安裝 nyc</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D nyc</span><br></pre></td></tr></table></figure><h3 id="設定-scripts"><a href="#設定-scripts" class="headerlink" title="設定 scripts"></a>設定 scripts</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;:&#123;    </span><br><span class="line">     &quot;testCover&quot;: &quot;nyc -r lcov -e .ts -x \&quot;*.test.ts\&quot; mocha -r ts-node/register tests/**/*.test.ts &amp;&amp; nyc report&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="執行"><a href="#執行" class="headerlink" title="執行"></a>執行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> npm run testCover</span></span><br></pre></td></tr></table></figure><h3 id="執行結果"><a href="#執行結果" class="headerlink" title="執行結果"></a>執行結果</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">略過測試部份</span><br><span class="line">------------------------|----------|----------|----------|----------|-------------------|</span><br><span class="line">File                    |  % Stmts | % Branch |  % Funcs |  % Lines | Uncovered Line #s |</span><br><span class="line">------------------------|----------|----------|----------|----------|-------------------|</span><br><span class="line">All files               |      100 |      100 |    98.63 |      100 |                   |</span><br><span class="line"> src                    |      100 |      100 |     87.5 |      100 |                   |</span><br><span class="line">  Calculator.ts         |      100 |      100 |      100 |      100 |                   |</span><br><span class="line">  beforeShowDay.ts      |      100 |      100 |       80 |      100 |                   |</span><br><span class="line"> tests                  |      100 |      100 |      100 |      100 |                   |</span><br><span class="line">  beforeShowDay.test.ts |      100 |      100 |      100 |      100 |                   |</span><br><span class="line">  calculator.test.ts    |      100 |      100 |      100 |      100 |                   |</span><br><span class="line">------------------------|----------|----------|----------|----------|-------------------|</span><br></pre></td></tr></table></figure><h2 id="完整-Test-Cases"><a href="#完整-Test-Cases" class="headerlink" title="完整 Test Cases"></a>完整 Test Cases</h2><blockquote><p> 今天是 2019/3/30 號星期六 12:05<br>   √ 日曆上 2019/4/02 星期二 出貨 可以選<br>   √ 日曆上 2019/4/02 星期二 設定為國定假日, 出貨 不可以選  </p><p> 今天是 2019/3/24 號星期日 12:05<br>   √ 日曆上 2019/3/25 星期一 出貨 不可以選<br>   √ 日曆上 2019/3/26 星期二 出貨 可以選  </p><p> 今天是 2019/3/23 號星期六 12:05<br>   √ 日曆上 2019/3/25 星期一 出貨 不可以選<br>   √ 日曆上 2019/3/26 星期二 出貨 可以選  </p><p> 今天是 2019/3/22 號星期五 23:05<br>   √ 日曆上 2019/3/25 星期一 出貨 不可以選<br>   √ 日曆上 2019/3/26 星期二 出貨 可以選  </p><p> 今天是 2019/3/21 號星期四 01:30<br>   √ 日曆上 2019/3/21 星期四 出貨 不可以選<br>   √ 日曆上 2019/3/22 星期五 出貨 可以選  </p><p> 今天是 2019/3/22 號星期五 23:05<br>   √ 日曆上 2019/3/25 星期一 出貨 不可以選<br>   √ 日曆上 2019/3/26 星期二 出貨 可以選  </p><p> 今天是 2019/3/19 號星期二 23:05<br>   √ 日曆上 2019/3/21 星期四 出貨 可以選  </p><p> 今天是 2019/3/22 號星期五 12:59<br>   √ 日曆上 2019/3/22 星期五 出貨 不能選,因為現在時間超過 12 點<br>   √ 日曆上 2019/3/25 星期一 出貨 不能選,因為現在時間超過 12 點<br>   √ 日曆上 2019/3/26 星期二 出貨 可以選<br>   √ 日曆上 2019/4/1 星期一 出貨 可以選<br>   √ 日曆上 2019/3/23 星期六 出貨 不能選,因為現在時間超過 12 點  </p><p> 今天是 2019/3/21 號星期四 23:59<br>   √ 日曆上 2019/3/21 星期四 出貨 不能選,因為現在時間超過 12 點  </p><p> 今天是 2019/3/18 號星期一12:00<br>   √ 日曆上 2019/3/18 星期一 出貨 不能選,因為現在是12點<br>   √ 日曆上 2019/3/19 星期二 出貨 不能選,因為現在是12點<br>   √ 日曆上 2019/3/20 星期三 出貨 可以選<br>   √ 日曆上 2019/3/21 星期四 出貨 可以選  </p><p> 今天是 2019/3/18 號星期一10:00<br>   √ 日曆上 2019/3/24 星期日 出貨;不能選,因為週日都不能選<br>   √ 日曆上 2019/3/18 星期一 出貨 不可以選,因為當天不能選<br>   √ 日曆上 2019/3/19 星期二 出貨 可以選<br>   √ 日曆上 2019/3/20 星期三 出貨 可以選  </p></blockquote><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>能堅持「工序」是專業人士的表現，<br>我相信這是一種實務上能保持品質與速度的作法。<br>特別是越大規模越複雜的專案，<br>避免掉進焦油坑的方法就是一開始就別踩下去。  </p><p>寫測試案例也是一種技能，在這次的 Case 中，<br>E2E測試是相對困難的，受限於時間與日期，<br>單元測試可以控制時間反而成了絕妙的工具。</p><p>我一開始寫的測試並不優良，涵蓋的情境不夠(註:這裡並非指程式碼的函蓋率)，<br>但是與 PO 反覆確認之後，調試出的情境終於滿足了需求，<br>看來我還要增進一下寫測試案例的能力。</p><p>最後，下次再試試用 <code>Jest</code> 寫寫看。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li>[TSUnitTestsSetup](http:// <a href="https://github.com/ChiragRupani/TSUnitTestsSetup" target="_blank" rel="noopener">https://github.com/ChiragRupani/TSUnitTestsSetup</a>)</li><li><a href="https://medium.com/@RupaniChirag/writing-unit-tests-in-typescript-d4719b8a0a40" target="_blank" rel="noopener">Writing unit tests in TypeScript</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;難得有機會寫前端的東西&lt;/li&gt;
&lt;li&gt;其實只有寫 JavaScript&lt;/li&gt;
&lt;li&gt;我要用 TypeS
      
    
    </summary>
    
    
      <category term="Unit Testing" scheme="https://blog.marsen.me/tags/Unit-Testing/"/>
    
      <category term="TypeScript" scheme="https://blog.marsen.me/tags/TypeScript/"/>
    
      <category term="Node.js" scheme="https://blog.marsen.me/tags/Node-js/"/>
    
      <category term="TDD" scheme="https://blog.marsen.me/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記] ASP.NET 專案部署地雷-消失的靜態檔</title>
    <link href="https://blog.marsen.me/2019/04/12/2019/csproj_content_none/"/>
    <id>https://blog.marsen.me/2019/04/12/2019/csproj_content_none/</id>
    <published>2019-04-12T08:38:16.000Z</published>
    <updated>2019-06-10T14:43:28.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="應該知道的事"><a href="#應該知道的事" class="headerlink" title="應該知道的事"></a>應該知道的事</h2><ul><li>這個是 Debug 的筆記</li><li>用的是 .Net Framework 4.6 不是 .Net Core</li><li>對你可能沒有幫助</li></ul><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>方案裡面有三個 Web 專案 Web1 、Web2 、Web3,<br>因開發某功能需要加入一個文字靜態檔 <code>Iamfile.txt</code><br>在部署的時候卻無法將檔案部署至網站根目錄。</p><h2 id="誤解"><a href="#誤解" class="headerlink" title="誤解"></a>誤解</h2><p>對檔案按右鍵 &gt; 屬性 &gt; 複製的輸出目錄 &gt; 下拉選取一律複製。</p><p><img src="/images/2019/4/copy_file_to_bin.jpg" alt></p><p>很可惜，這個設定的調整會讓這個檔案在<strong>建置</strong>的時候輸出到指定資料夾中( Ex: \bin )，<br>這個操作會影響 <code>csproj</code> 如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">None</span> <span class="attr">Include</span>=<span class="string">"Iamfile.txt"</span>&gt;</span></span><br><span class="line">+  <span class="tag">&lt;<span class="name">CopyToOutputDirectory</span>&gt;</span>PreserveNewest<span class="tag">&lt;/<span class="name">CopyToOutputDirectory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">None</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h2><p>注意 Tag 的名稱為 <code>None</code>，需要調整為 <code>Content</code>，目前不確定如何用 IDE 操作。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Content</span> <span class="attr">Include</span>=<span class="string">"Iamfile.txt"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h2><p>找到你的 MSBuild 版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\MSBuild\15.0\Bin </span><br></pre></td></tr></table></figure><p>執行建置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">λ MSBuild.exe D:\Projects\IsASolution.sln /p:Configuration=QA;DeployOnBuild=<span class="literal">true</span>;PublishProfile=Mall.QA.pubxml;MvcBuildViews=<span class="literal">false</span>;AutoVersion=True</span><br></pre></td></tr></table></figure><p>執行後輸出的位置需要看你的部署檔 <code>*.pubxml</code> 如下範例<br>可以在 <code>D:\Archives\QA\IsASolution</code> 找到我的輸出。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">此檔案是由您 Web 專案的發行/封裝處理程序所使用。您可以編輯此 MSBuild 檔案，</span></span><br><span class="line"><span class="comment">以自訂此處理程序的行為。若要深入了解，請造訪 http://go.microsoft.com/fwlink/?LinkID=208121。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">ToolsVersion</span>=<span class="string">"4.0"</span> <span class="attr">xmlns</span>=<span class="string">"http://schemas.microsoft.com/developer/msbuild/2003"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">WebPublishMethod</span>&gt;</span>FileSystem<span class="tag">&lt;/<span class="name">WebPublishMethod</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LastUsedBuildConfiguration</span>&gt;</span>QA<span class="tag">&lt;/<span class="name">LastUsedBuildConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LastUsedPlatform</span>&gt;</span>Any CPU<span class="tag">&lt;/<span class="name">LastUsedPlatform</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SiteUrlToLaunchAfterPublish</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ExcludeApp_Data</span>&gt;</span>False<span class="tag">&lt;/<span class="name">ExcludeApp_Data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">publishUrl</span>&gt;</span>D:\Archives\QA\IsASolution<span class="tag">&lt;/<span class="name">publishUrl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DeleteExistingFiles</span>&gt;</span>True<span class="tag">&lt;/<span class="name">DeleteExistingFiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PrecompileBeforePublish</span>&gt;</span>True<span class="tag">&lt;/<span class="name">PrecompileBeforePublish</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EnableUpdateable</span>&gt;</span>True<span class="tag">&lt;/<span class="name">EnableUpdateable</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DebugSymbols</span>&gt;</span>False<span class="tag">&lt;/<span class="name">DebugSymbols</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">WDPMergeOption</span>&gt;</span>DonotMerge<span class="tag">&lt;/<span class="name">WDPMergeOption</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span></span></span><br></pre></td></tr></table></figure><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;應該知道的事&quot;&gt;&lt;a href=&quot;#應該知道的事&quot; class=&quot;headerlink&quot; title=&quot;應該知道的事&quot;&gt;&lt;/a&gt;應該知道的事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;這個是 Debug 的筆記&lt;/li&gt;
&lt;li&gt;用的是 .Net Framework 4.6 不是
      
    
    </summary>
    
    
      <category term=".Net Framework" scheme="https://blog.marsen.me/tags/Net-Framework/"/>
    
      <category term="ASP.Net" scheme="https://blog.marsen.me/tags/ASP-Net/"/>
    
  </entry>
  
  <entry>
    <title>[筆記] 好用的線上工具</title>
    <link href="https://blog.marsen.me/2019/04/11/2019/tool_sites/"/>
    <id>https://blog.marsen.me/2019/04/11/2019/tool_sites/</id>
    <published>2019-04-11T03:16:21.000Z</published>
    <updated>2019-06-10T14:43:28.969Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Net-Config-Transformation-Online"><a href="#Net-Config-Transformation-Online" class="headerlink" title=".Net Config Transformation Online"></a>.Net Config Transformation Online</h2><p><a href="https://webconfigtransformationtester.apphb.com/" target="_blank" rel="noopener">Web.config Transformation Tester</a></p><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="JSON-C-Class"><a href="#JSON-C-Class" class="headerlink" title="JSON C# Class"></a>JSON C# Class</h3><ul><li><a href="http://json2csharp.com/" target="_blank" rel="noopener">json2csharp - generate c# classes from json</a></li></ul><h3 id="JSON-Query-Online"><a href="#JSON-Query-Online" class="headerlink" title="JSON Query Online"></a>JSON Query Online</h3><ul><li><a href="http://www.jsonquerytool.com/" target="_blank" rel="noopener">Home - Online JSON Query Tester</a></li></ul><h3 id="JSON-Format"><a href="#JSON-Format" class="headerlink" title="JSON Format"></a>JSON Format</h3><ul><li><a href="https://jsonformatter.curiousconcept.com/" target="_blank" rel="noopener">JSON Formatter &amp; Validator</a></li><li><a href="http://jsonviewer.stack.hu/" target="_blank" rel="noopener">Online JSON Viewer</a></li></ul><h2 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h2><h3 id="Check"><a href="#Check" class="headerlink" title="Check"></a>Check</h3><ul><li><a href="http://www.yamllint.com/" target="_blank" rel="noopener">YAMLlint - The YAML Validator</a></li></ul><h2 id="SQL-Format"><a href="#SQL-Format" class="headerlink" title="SQL Format"></a>SQL Format</h2><p><a href="https://sqlformat.org/" target="_blank" rel="noopener">Format SQL Statements Online - sqlformat.org</a></p><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Net-Config-Transformation-Online&quot;&gt;&lt;a href=&quot;#Net-Config-Transformation-Online&quot; class=&quot;headerlink&quot; title=&quot;.Net Config Transformation O
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[實作筆記] ASP.Net Core Logger</title>
    <link href="https://blog.marsen.me/2019/04/06/2019/aspdotnet_core_logging/"/>
    <id>https://blog.marsen.me/2019/04/06/2019/aspdotnet_core_logging/</id>
    <published>2019-04-06T04:21:17.000Z</published>
    <updated>2019-06-10T14:43:28.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="要知道的事"><a href="#要知道的事" class="headerlink" title="要知道的事"></a>要知道的事</h2><ul><li>這是個人的學習記錄</li><li>可能對你沒幫助</li><li>網路上資訊很多</li><li>希望對你有幫助</li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Asp.Net Core 的 Life Cycle 由 <code>Program.cs</code> 的 <code>main</code> 方法開始(是的，就如同其它一般的程式)，<br>在 <code>WebHostBuilder</code> 中的 <code>ConfigureLogging</code> 可以提供彈性讓你設定屬於你的 LoggerProvider，<br>不論是微軟提供、知名的第三方套件或是你手工自已刻一個，大致你的程式碼會如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IWebHostBuilder <span class="title">CreateWebHostBuilder</span>(<span class="params"><span class="keyword">string</span>[] args</span>) </span>=&gt;</span><br><span class="line">    WebHost.CreateDefaultBuilder(args)</span><br><span class="line">        .ConfigureLogging(logging=&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            logging.ClearProviders();</span><br><span class="line">            logging.AddEventLog();</span><br><span class="line">            logging.AddFile(<span class="string">"D:\\Temp\\Log.txt"</span>);</span><br><span class="line">            logging.AddConsole();</span><br><span class="line">        &#125;)</span><br><span class="line">        .UseStartup&lt;Startup&gt;()</span><br></pre></td></tr></table></figure><p>而在 Controller 或其它 Module 間，你只要透過建構子注入 logger 實體就可以實現 log 的功能</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HomeController</span>(<span class="params">ILogger&lt;HomeController&gt; logger</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._logger = logger;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="預設的行為"><a href="#預設的行為" class="headerlink" title="預設的行為"></a>預設的行為</h2><p>如果你沒有呼叫 <code>ConfigureLogging</code> 預設的行為如下述.</p><p>The default project template calls <code>CreateDefaultBuilder</code>， which adds the following logging providers:</p><ul><li>Console</li><li>Debug</li><li>EventSource (starting in ASP.NET Core 2.2)</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CreateWebHostBuilder(args).Build().Run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IWebHostBuilder <span class="title">CreateWebHostBuilder</span>(<span class="params"><span class="keyword">string</span>[] args</span>) </span>=&gt;</span><br><span class="line">    WebHost.CreateDefaultBuilder(args)</span><br><span class="line">        .UseStartup&lt;Startup&gt;();</span><br></pre></td></tr></table></figure><h3 id="Find-the-Logs"><a href="#Find-the-Logs" class="headerlink" title="Find the Logs"></a>Find the Logs</h3><h4 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h4><p>範例說明:在建構子中注入 <code>ILogger</code> 實體，運行網站後連到 Home\Index 頁面，並觀察 Console</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HomeController</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger _logger;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Initializes a new instance of the <span class="doctag">&lt;see cref="HomeController" /&gt;</span> class.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeController</span>(<span class="params">ILogger&lt;HomeController&gt; logger</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>._logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>._logger.Log(LogLevel.Information，<span class="string">"HomeController Information"</span>);</span><br><span class="line">        <span class="keyword">this</span>._logger.Log(LogLevel.Critical，<span class="string">"HomeController Critical"</span>);</span><br><span class="line">        <span class="keyword">this</span>._logger.Log(LogLevel.Debug，<span class="string">"HomeController Debug"</span>);</span><br><span class="line">        <span class="keyword">this</span>._logger.Log(LogLevel.Error，<span class="string">"HomeController Error"</span>);</span><br><span class="line">        <span class="keyword">this</span>._logger.Log(LogLevel.None，<span class="string">"HomeController None"</span>);</span><br><span class="line">        <span class="keyword">this</span>._logger.Log(LogLevel.Trace，<span class="string">"HomeController Trace"</span>);</span><br><span class="line">        <span class="keyword">this</span>._logger.Log(LogLevel.Warning，<span class="string">"HomeController Warning"</span>);</span><br><span class="line">        <span class="keyword">return</span> View();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>結果如下，可以發現 <code>LogLevel.None</code>、<code>LogLevel.Trace</code> 與 <code>LogLevel.Warning</code> 並未出現在 Console 資訊當中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">info: Marsen.NetCore.Site.Controllers.HomeController[0]</span><br><span class="line">      HomeController Information</span><br><span class="line">crit: Marsen.NetCore.Site.Controllers.HomeController[0]</span><br><span class="line">      HomeController Critical</span><br><span class="line">dbug: Marsen.NetCore.Site.Controllers.HomeController[0]</span><br><span class="line">      HomeController Debug</span><br><span class="line">fail: Marsen.NetCore.Site.Controllers.HomeController[0]</span><br><span class="line">      HomeController Error</span><br></pre></td></tr></table></figure><p><a href="https://docs.microsoft.com/zh-tw/dotnet/api/microsoft.extensions.logging.loglevel?view=aspnetcore-2.2" target="_blank" rel="noopener">LogLevel</a>說明了 <code>None</code> 的意義就是不記錄任何訊息，</p><table><thead><tr><th>Enum</th><th>Level</th><th>Description</th></tr></thead><tbody><tr><td>Trace</td><td>0</td><td>Logs that contain the most detailed messages. These messages may contain sensitive application data. These messages are disabled by default and should never be enabled in a production environment.</td></tr><tr><td>Debug</td><td>1</td><td>Logs that are used for interactive investigation during development. These logs should primarily contain information useful for debugging and have no long-term value.</td></tr><tr><td>Information</td><td>2</td><td>Logs that track the general flow of the application. These logs should have long-term value.</td></tr><tr><td>Warning</td><td>3</td><td>Logs that highlight an abnormal or unexpected event in the application flow， but do not otherwise cause the application execution to stop.</td></tr><tr><td>Error</td><td>4</td><td>Logs that highlight when the current flow of execution is stopped due to a failure. These should indicate a failure in the current activity， not an application-wide failure.</td></tr><tr><td>Critical</td><td>5</td><td>Logs that describe an unrecoverable application or system crash， or a catastrophic failure that requires immediate attention.</td></tr><tr><td>None</td><td>6</td><td>Not used for writing log messages. Specifies that a logging category should not write any messages.</td></tr></tbody></table><p>Log 的作用範圍會受 <code>appsettings.json</code> 影響，<br>另外要注意 appsettings.json 的載入順序.  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"Logging": &#123;</span><br><span class="line">  "LogLevel": &#123;</span><br><span class="line">    "Default": "Trace"，</span><br><span class="line">    "System": "Information"，</span><br><span class="line">    "Microsoft": "Information"</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h4><p>如同 <code>Console</code> 的行為一般，可以在 Visual Studio 的輸出(Output)&gt;偵錯(Debug)視窗中，查詢到記錄。</p><p><img src="https://i.imgur.com/274witm.jpg" alt></p><h4 id="EventSource"><a href="#EventSource" class="headerlink" title="EventSource"></a>EventSource</h4><p>如同<a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-2.2#eventsource-provider" target="_blank" rel="noopener">官方文件</a>所說，我下載了 <code>PerfView</code> ，<br>如下圖作了設定，<br><img src="/images/2019/4/perfview.jpg" alt="PerfView"><br>不過我並沒有取得記錄，<br><img src="/images/2019/4/perfview.jpg" alt="PerfView Log">  </p><p>錯誤訊息如下<br> <code>EventSource Microsoft-Extensions-Logging: Object reference not set to an instance of an object</code><br>暫時不打算深追查，<br>ETW 可以記錄的 Memory 、Disc IO 、CPU 等資訊，<br>其實與我想要的應用程式記錄有所差異，稍稍記錄一下以後也許用得到。<br>如果有人能留言給我一些方向，也是非常歡迎。  </p><h2 id="自訂-Filelog-與-EventLog"><a href="#自訂-Filelog-與-EventLog" class="headerlink" title="自訂 Filelog 與 EventLog"></a>自訂 Filelog 與 EventLog</h2><p>調整一下程式</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IWebHostBuilder <span class="title">CreateWebHostBuilder</span>(<span class="params"><span class="keyword">string</span>[] args</span>) </span>=&gt;</span><br><span class="line">    WebHost.CreateDefaultBuilder(args)</span><br><span class="line">        .ConfigureLogging(logging=&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            logging.AddEventLog();</span><br><span class="line">            logging.AddFile(<span class="string">"D:\\Temp\\Log.txt"</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        .UseStartup&lt;Startup&gt;()</span><br></pre></td></tr></table></figure><p>這裡我使用 <code>Microsoft.Extensions.Logging.EventLog</code> 處理 EventLog 可以在 Event View 中看見記錄;<br>而 file log 我使用 <code>Serilog.Extensions.Logging.File</code> ， 特別要注意以下兩點  </p><ul><li>Nuget 使用的版本為 2.0.0 以上版本，目前仍然不是穩定版本  </li><li>AddFile 傳入的是記錄檔的完整 Path 而非目錄  </li></ul><h2 id="自訂-Elmah"><a href="#自訂-Elmah" class="headerlink" title="自訂 Elmah"></a>自訂 Elmah</h2><p>Elmah 在 Net 算是一個蠻方便的工具，有提供簡易介面、可以選擇用 File 或是 Database 方式作 Logging，<br>更重要是小弟我用了 4 年，順手就研究一下。</p><p>設定相當簡單， 在 <code>Startup.cs</code> 的 <code>ConfigureServices</code> 加入</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">services.AddElmah&lt;XmlFileErrorLog&gt;(options =&gt;            </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//options.CheckPermissionAction = context =&gt; context.User.Identity.IsAuthenticated;</span></span><br><span class="line">    <span class="comment">//options.Path = @"elmah";</span></span><br><span class="line">    options.LogPath = <span class="string">"D:\\Temp\\elmah"</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在 <code>Configure</code> 加入</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.UseElmah();</span><br></pre></td></tr></table></figure><p>要注意是使用 <code>XmlFileErrorLog</code> 時，要設定的 options 是 <code>LogPath</code> 而非 <code>Path</code>，  其實使用 File 只能說是開發環境的暫時處置，真正的 Prodction 應該將 Log 放到專門的 Database 或是 Cloud Service 之中，<br>在這裡可以看見 Elmah 的行為與 Net Core 的行為並不一致，Log 與錯誤記錄本來就不該混為一談。<br>我想我要調整一下我的想法了，不過關於 Log 暫時就到此為止。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://codingblast.com/asp-net-core-logging/" target="_blank" rel="noopener">ASP.NET Core Logging</a></li><li><a href="https://stackify.com/net-core-loggerfactory-use-correctly/" target="_blank" rel="noopener">.NET Core Logging With LoggerFactory: Best Practices and Tips</a></li><li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-2.2#log-scopes" target="_blank" rel="noopener">Logging in ASP.NET Core</a></li><li><a href="https://blog.johnwu.cc/article/ironman-day16-asp-net-core-multiple-environments.html" target="_blank" rel="noopener">[鐵人賽 Day16] ASP.NET Core 2 系列 - 多重環境組態管理 (Multiple Environments)</a></li><li><a href="https://stackoverflow.com/questions/47773058/asp-net-core-eventlog-provider" target="_blank" rel="noopener">ASP.NET Core EventLog provider</a></li><li><a href="http://www.techbloginterview.com/asp-net-core-the-mvc-request-life-cycle/" target="_blank" rel="noopener">ASP.NET Core: The MVC Request Life Cycle</a></li><li><a href="https://mattwarren.org/2018/08/21/Monitoring-and-Observability-in-the-.NET-Runtime/" target="_blank" rel="noopener">Monitoring and Observability in the .NET Runtime</a></li><li><a href="https://github.com/ElmahCore/ElmahCore" target="_blank" rel="noopener">ElmahCore/ElmahCore</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;要知道的事&quot;&gt;&lt;a href=&quot;#要知道的事&quot; class=&quot;headerlink&quot; title=&quot;要知道的事&quot;&gt;&lt;/a&gt;要知道的事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;這是個人的學習記錄&lt;/li&gt;
&lt;li&gt;可能對你沒幫助&lt;/li&gt;
&lt;li&gt;網路上資訊很多&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
      <category term=".Net Core" scheme="https://blog.marsen.me/tags/Net-Core/"/>
    
  </entry>
  
  <entry>
    <title>[閱讀筆記] 重構---改善既有程式的設計，第一章</title>
    <link href="https://blog.marsen.me/2019/03/01/2019/book/refactoring/refactoring_Ch1/"/>
    <id>https://blog.marsen.me/2019/03/01/2019/book/refactoring/refactoring_Ch1/</id>
    <published>2019-03-01T03:17:16.000Z</published>
    <updated>2019-06-10T14:43:28.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="為什麼"><a href="#為什麼" class="headerlink" title="為什麼"></a>為什麼</h2><h3 id="知道自已不知道"><a href="#知道自已不知道" class="headerlink" title="知道自已不知道"></a>知道自已不知道</h3><p>上次在公司內部開始進行 <a href="/2019/01/30/2019/coding_dojo_in_company/">Coding Dojo</a>，在 <a href="/2019/02/06/2019/coding_dojo_kata_fizzbuzz_first/">FizzBuzz 的 Kata</a> 嚐到了甜頭<br>但是下一道題目「Bowling」，卻卡住了。<br>我們有測試，也通過測試，但是卻寸步難行，<br>在重構上我們非常的弱，這裡的重構不是指一次性的全面翻掉，<br>而是逐步的、可靠的前進，<br>我想習得這樣的技能，因為現場的代碼腐敗的更加嚴重，<br>如果連 Kata 產生的代碼都不能優化，<br>那想對產品指手劃腳只不過是說幹話。</p><h2 id="閱讀經典-重構—改善即有的程式設計"><a href="#閱讀經典-重構—改善即有的程式設計" class="headerlink" title="閱讀經典:重構—改善即有的程式設計"></a>閱讀經典:重構—改善即有的程式設計</h2><p><img src="https://i.stack.imgur.com/BrLmD.jpg" alt></p><p>這是一本來自 Martin Fowler 的經典書籍，新版已經出了，而且是以 <code>JavaScript</code> 作為範例語言。<br>不過我手頭上借到的是以 <code>Java</code> 作為範例的板本。</p><h3 id="CH1-重構，第一個案例"><a href="#CH1-重構，第一個案例" class="headerlink" title="CH1 重構，第一個案例"></a>CH1 重構，第一個案例</h3><p>第一個問題就是我找不到書中說的「線上範例」，<br>即使找到我也沒有 <code>Java</code> 的開發環境，所以心一橫就開始了改寫成 <code>C#</code> 的計劃<br>這部份比我想像中的簡單很多，兩個語言是相同類似的，<br><a href="https://github.com/marsen/Marsen.NetCore.Dojo/commit/6e600db029fe2f62df724d0179b708c97a0b3313" target="_blank" rel="noopener">第1章，第一個案例</a></p><p><strong>接下來只要照著書上一步一步作就會…覺得越來越沒 fu …</strong><br>為什麼 ??? </p><p>其實 Martin 大叔在書中有提到「為即將修改的程式建立可靠的測試…畢竟是人，可能會犯錯。所以我需要可靠的測試」。<br>沒fu的原因就是<strong>我沒加測試</strong>，即使重構了，我也不知道好壞。<br>沒有反饋是很糟糕的一件事。</p><h3 id="CH1-重構，第一個案例，加上測試"><a href="#CH1-重構，第一個案例，加上測試" class="headerlink" title="CH1 重構，第一個案例，加上測試"></a>CH1 重構，第一個案例，加上測試</h3><p>那麼要怎麼加測試呢 ?<br>書上的案例我分析了一下，其實重構的目標只是一個單純的方法<br>會針對不同的情境回傳不同的字串。</p><p>簡單的說，我只要讓測試覆蓋這個方法就可以開始重構了，<br>我選擇<a href="https://www.jetbrains.com/dotcover/" target="_blank" rel="noopener">dotCover</a>來檢驗我的覆蓋率。<br>選擇的原因很簡單，因為我有買<a href="https://www.jetbrains.com/resharper/?" target="_blank" rel="noopener">ReSharper</a>，  如果有更好用更便宜的工具也請介紹給我。</p><blockquote><p>OS:課金真的能解決很多人生問題啊(茶)…</p></blockquote><p>最後的結果，我開了一個<a href="https://github.com/marsen/Marsen.NetCore.Dojo/commit/d8d6f463960572af6ffdb3a5612fd00623d0d7e2" target="_blank" rel="noopener">分支</a>包含了100%的測試覆蓋率，<br>這樣就可以開開心心重構了，相信我有測試真得很有感覺。</p><p>重構的技法請自行看書，我只稍微作個記錄，有興趣可以 fork 回去玩。</p><ul><li>Extract Method </li><li>Move Method </li><li>Replace Temp with Query </li><li>Replace Type Code with State/Strategy Pattern </li><li>Replace Conditional with Polymorphism</li><li>Self Encapsulate Field</li></ul><p>在重構的過程中我儘可能讓步驟小(Baby Step)，看我的commit歷程即可知道，但是最好可以自已作作看。<br>另外有一些心法，也稍作個記錄</p><ul><li>把一坨爛 Code 抽到獨立的方法之中</li><li>如果一個類別方法並沒有使用到該類別的資訊<ul><li>考慮職責，是不是要讓它搬家</li><li>提醒自已這是個壞味道</li></ul></li><li><strong>拆分職責時，有個方法相依兩個不同的類別的資訊，那應該將方法放在哪裡呢?</strong>(這裡花了點時間理解)<ul><li>將方法放在未來可能變化較大的類別之中</li><li>相依的資訊作為方法參數傳進來</li><li>這樣未來有異動就被縮限在這個類別裡面。</li></ul></li><li>暫存變數常常會帶來問題(壞味道)<ul><li>儘可能的把它消除</li><li>要考慮效能的問題(書上後面會說。)</li></ul></li><li>保持小步調、頻繁測試<ul><li>使用中繼方法可以縮小重構步調(特別是對public的方法)</li><li>讓新的 return 值插在舊的 return 之前</li><li>測試 ok 就可以刪掉舊 code (有時刪不掉也還是可以運作的)</li><li>善用<a href="https://blog.marsen.me/2018/03/20/2018/mutation_testing/">變異測試</a></li></ul></li><li>UML 可以幫助對程式重構前後的理解</li><li>Java 與 C# 對繼承的處理是不同的<ul><li><a href="https://stackoverflow.com/questions/13323099/java-inheritance-vs-c-sharp-inheritance" target="_blank" rel="noopener">Java inheritance vs. C# inheritance</a></li></ul></li></ul><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>第一章的範例完成後的結果大致如下<br><img src="/images/2019/3/test_cover_100.jpg" alt="100%!!!"><br>很帥氣的100%啊，這樣的 code 測試覆蓋率 100 % 全綠燈，<br>而且完成了重構，根本是現場不可能出現的完全體程式碼!!!  代碼的部份我會放在最後的參考區塊。</p><p><img src="/images/2019/3/cell.jpg" alt="我有沒有可能讓它更好？或是找出他的缺陷呢？"><br>下一步，我有沒有可能讓它更好？或是找出他的缺陷呢？  </p><p>這個時候我想起了<a href="https://blog.marsen.me/2018/03/20/2018/mutation_testing/">變異測試</a><br>還沒有實作過，來玩看看好了。  </p><p>首先要選擇測試工具，這裡使用了<a href="https://stryker-mutator.io/" target="_blank" rel="noopener">Stryker Mutator</a>，  但是注意只能用在 .Net Core 的版本<br>照著官網安裝完成後執行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">dotnet stryker</span></span><br></pre></td></tr></table></figure><p>跑下去竟然真的找到有存活的變異<br><img src="/images/2019/3/run_stryker.jpg" alt="存活的變異"><br>這兩個變異存活的原因是類似的，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> result = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (daysRented &gt; <span class="number">2</span>)</span><br><span class="line">    result += (daysRented - <span class="number">2</span>) * <span class="number">1.5</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure><p>變異點發生在 <code>daysRented &gt; 2</code> 的判斷式之中，<br>現有的測試在變異發生(<code>daysRented &gt;= 2</code>)時，無法提出警訊，也就是測試上的不足。<br>不過依現有的邏輯，不論是進入 <code>if</code> 進行了加0運算，或是直接回傳 result，<br>都是等價的(回傳 2 )，目前還沒有想法怎麼強化我的測試，<br>希望有先進願意不嗇指點，實務上跟本沒在跑變異測試。</p><h2 id="後記2"><a href="#後記2" class="headerlink" title="後記2"></a>後記2</h2><p>回歸一下我們當初 Kata 的目的:</p><ul><li>學習 Pair ，並透過 Pair 彼此學習</li><li>學習 TDD ，並透過 TDD 學習重構</li><li>學習 Vim，並提昇開發速度</li></ul><p>事情沒有那麼簡單，比如說學習 Vim 的過程中，<br>我們的目的是增進開發速度，但是一開始反而會變慢，<br>一定要刻意的練習才能習得，<br>你必須擁有以下的能力。</p><ul><li>打字速度，網路上很多資源，我是使用<a href="https://www.ratatype.com/" target="_blank" rel="noopener">Ratatype</a>作練習<ul><li>能盲打</li><li>指法要正確(特別在特殊符號)</li><li>快速切換中英(建議加入英文輸入法用 win + space 之切換過去)</li></ul></li><li>英文能力。命名是開發很重要的一課，英文不好看不懂寫得差，命名自然不會好。 </li><li>熟悉工具，特別是你的IDE與外掛<ul><li>Visual Studio</li><li>Resharper</li><li>OzCode </li><li>more ..</li></ul></li><li>Vim <ul><li>Vim Basic 基本功(v、c、i、s、j、k、g、h、l….)</li><li>VimRc 要學會配置自已的 VimRC，這裡不僅要刻意練習，還要<strong>刻意試錯</strong>找到自已最順的模式</li></ul></li></ul><p>彼此學習方面需要相當的軟技能，<br>溝通、尊重、謙虛…;這些一生的功課我就不贅言了。<br>Pair Programming 一半是 Pair 一半是 Progrmming；<br>而在進入 Progrmming 之前請搞懂你<strong>要作什麼</strong>。  </p><p>同樣的在 TDD 的過程之中，我們沒有事先理好需求，<br>沒有想好作好需求分析，隨便選了測試案例就開始進行，<br>如果好好分析，是可以歸納出其中的邏輯，<br>甚至是理出 test case 的順序。</p><p>重要的是過程，但是<strong>我們太在乎結果，以致程式快速的腐敗。</strong><br>甚至到了難以修改的狀態，僅管有測試保護，卻無法重構。</p><p>這是很好的一課，特別在這裡記錄一下。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.ratatype.com/" target="_blank" rel="noopener">Ratatype</a></li><li><a href="https://www.tenlong.com.tw/products/9789861547534" target="_blank" rel="noopener">重構─改善既有程式的設計， 2/e (Refactoring: Improving The Design of Existing Code)</a></li><li><a href="https://www.jetbrains.com/dotcover/" target="_blank" rel="noopener">dotCover: A Code Coverage Tool for .NET by JetBrains</a> </li><li><a href="https://stackoverflow.com/questions/13323099/java-inheritance-vs-c-sharp-inheritance" target="_blank" rel="noopener">Java inheritance vs. C# inheritance</a></li><li><a href="https://github.com/marsen/Marsen.NetCore.Dojo/tree/Refactoring_Improving_The_Design_of_Existing_Code_With_Test" target="_blank" rel="noopener">marsen/Marsen.NetCore.Dojo</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;為什麼&quot;&gt;&lt;a href=&quot;#為什麼&quot; class=&quot;headerlink&quot; title=&quot;為什麼&quot;&gt;&lt;/a&gt;為什麼&lt;/h2&gt;&lt;h3 id=&quot;知道自已不知道&quot;&gt;&lt;a href=&quot;#知道自已不知道&quot; class=&quot;headerlink&quot; title=&quot;知道自已不知道
      
    
    </summary>
    
    
      <category term="Testing" scheme="https://blog.marsen.me/tags/Testing/"/>
    
      <category term="重構" scheme="https://blog.marsen.me/tags/%E9%87%8D%E6%A7%8B/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記]使用 Windows PowerShell 批次上傳 AWS S3</title>
    <link href="https://blog.marsen.me/2019/02/20/2019/Setting_up_aws_tools_for_powershell/"/>
    <id>https://blog.marsen.me/2019/02/20/2019/Setting_up_aws_tools_for_powershell/</id>
    <published>2019-02-20T11:09:18.000Z</published>
    <updated>2019-06-10T14:43:28.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h2><p>相關服務要雲端化，要將站台、資料等…遷移至 AWS，<br>這個案例需要將大量在 File Server 上的檔案(報表/單據/報告書等…)上傳至 S3<br>因為檔案數量相當的大，所以開發一個簡單的指令來執行。</p><h3 id="Step-1-下載並安裝適用於-Windows-PowerShell-的-AWS-工具"><a href="#Step-1-下載並安裝適用於-Windows-PowerShell-的-AWS-工具" class="headerlink" title="Step 1 下載並安裝適用於 Windows PowerShell 的 AWS 工具"></a>Step 1 下載並安裝適用於 Windows PowerShell 的 AWS 工具</h3><ul><li><a href="https://aws.amazon.com/tw/powershell/" target="_blank" rel="noopener">下載適用於 Windows PowerShell 的 AWS 工具</a></li></ul><p><img src="/images/2019/2/awstools.jpg" alt="只需要安裝必要的程式"></p><h3 id="設定-aws-config"><a href="#設定-aws-config" class="headerlink" title="設定 aws config"></a>設定 aws config</h3><p>打開 terminal 執行以下語法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; aws configure</span><br></pre></td></tr></table></figure><p>依指示設定 <code>Access key ID</code> 與 <code>Secret access key</code>，  這個資料需要具備一定的權限才能取得，如果權限不足請向你的 AWS 服務管理員申請。</p><h3 id="撰寫-PowerShell-與執行"><a href="#撰寫-PowerShell-與執行" class="headerlink" title="撰寫 PowerShell 與執行"></a>撰寫 PowerShell 與執行</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$bucketName</span> = <span class="string">"********************-your_bucket_name"</span></span><br><span class="line"><span class="variable">$path</span> = <span class="string">"Your\s3\path\"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Get-ChildItem</span> -Filter *.pdf |</span><br><span class="line"><span class="built_in">ForEach-Object</span> -Begin&#123;<span class="variable">$i</span>=<span class="number">0</span>&#125; &#123;  </span><br><span class="line">  <span class="variable">$i</span>++;</span><br><span class="line">  <span class="variable">$key</span> = <span class="variable">$path</span>+<span class="variable">$_</span> ;</span><br><span class="line">  <span class="comment">## 進度顯示</span></span><br><span class="line">  <span class="built_in">Write-Host</span> <span class="variable">$key</span> <span class="string">"(<span class="variable">$i</span>/1000)"</span>  -ForegroundColor Green ;</span><br><span class="line">  <span class="comment">## 上傳 S3</span></span><br><span class="line">  Write-S3Object -BucketName <span class="variable">$bucketName</span> -File <span class="variable">$_</span>.FullName -Key <span class="variable">$key</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目標&quot;&gt;&lt;a href=&quot;#目標&quot; class=&quot;headerlink&quot; title=&quot;目標&quot;&gt;&lt;/a&gt;目標&lt;/h2&gt;&lt;p&gt;相關服務要雲端化，要將站台、資料等…遷移至 AWS，&lt;br&gt;這個案例需要將大量在 File Server 上的檔案(報表/單據/報告書等…)
      
    
    </summary>
    
    
      <category term="AWS" scheme="https://blog.marsen.me/tags/AWS/"/>
    
      <category term="PowerShell" scheme="https://blog.marsen.me/tags/PowerShell/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記] Coding Dojo 第一個 Kata FizzBuzz</title>
    <link href="https://blog.marsen.me/2019/02/06/2019/coding_dojo_kata_fizzbuzz_first/"/>
    <id>https://blog.marsen.me/2019/02/06/2019/coding_dojo_kata_fizzbuzz_first/</id>
    <published>2019-02-05T20:11:17.000Z</published>
    <updated>2019-06-10T14:43:28.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>記錄一下 Kata 的思路。</p><h2 id="實例化需求"><a href="#實例化需求" class="headerlink" title="實例化需求"></a>實例化需求</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 is 1</span><br><span class="line">2 is 2</span><br><span class="line">3 is Fizz</span><br><span class="line">4 is 4</span><br><span class="line">5 is Buzz</span><br><span class="line">6 is Fizz</span><br><span class="line">15 is FizzBuzz</span><br></pre></td></tr></table></figure><p>雖然可以把上面的案例濃縮到 4 種，<br>整除 3 是 Fizz、<br>整除 5 是 Buzz、<br>整除 3 又整除 5 是 FizzBuzz ,<br>不符合上述條件的都是原數字。</p><p>有沒有必要寫這麼多測試呢？<br>比如說 1、2、4 的測試是不是重複了？<br>日前 91 大有過類似的討論， </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一個 test case 挑最簡單的，讓你可以從紅燈變綠燈。驅動出你需要的產品代碼。  </span><br><span class="line">接下來後面的幾個，都可以只是拿來「確認」是否滿足你期望的情境，  </span><br><span class="line">也就是你寫新的測試案例，你期望他就是綠燈了，然後驗證是否符合你的期望。  </span><br><span class="line">目的是「驗證」，不是「驅動」</span><br></pre></td></tr></table></figure><p>測試的不是只有「驅動開發」而已。<br>而好的程式碼，也不能只依靠測試。</p><h3 id="第一個測試案例，1-回傳-1"><a href="#第一個測試案例，1-回傳-1" class="headerlink" title="第一個測試案例，1 回傳 1"></a>第一個測試案例，1 回傳 1</h3><p>我一開始就寫成這樣，所以後面的 2、4 案例也都會是綠燈。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考慮另一種情況，也許有的人第一個測試案例會寫成這樣</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這時候就有可能需要靠 2、4 的測試案例來驅動程式碼的改變。<br>實際上並沒有，第一種寫法對我來說就夠 Baby Step 了。</p><h3 id="第二個測試案例，3-回傳-Fizz"><a href="#第二個測試案例，3-回傳-Fizz" class="headerlink" title="第二個測試案例，3 回傳 Fizz"></a>第二個測試案例，3 回傳 Fizz</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (number % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Fizz"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> number.ToString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相信這是很好理解的，雖然我的案例是從 1、2、3 而來，<br>但是在我的腦海中已經思考好了這個程式碼的「餘數規則」，  </p><h3 id="所有測試案例"><a href="#所有測試案例" class="headerlink" title="所有測試案例"></a>所有測試案例</h3><p>實作出一個「餘數規則」後，程式碼應該很容易隨著測試案例變成下面這個樣子，<br>用一堆 <code>if</code> 檢查「餘數」然後回傳指定的「字串」，就是我們的「規則」。<br>這個時候的複雜度是 4 。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (number % <span class="number">5</span> == <span class="number">0</span> &amp; number % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"FizzBuzz"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (number % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Buzz"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (number % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Fizz"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> number.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重構"><a href="#重構" class="headerlink" title="重構"></a>重構</h2><p>我儘量還原當初的想法，並記錄下來，<br>有許多值得改善的地方，換個順序重構起來就會更明快。</p><h3 id="重構餘數檢查"><a href="#重構餘數檢查" class="headerlink" title="重構餘數檢查"></a>重構餘數檢查</h3><p>這一步真的非常的的小，我想大多數的人甚至會跳過這步驟的重構，<br>我只是把餘數檢查抽成私有方法，可以透過 <code>Resharp</code> 快速重構。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (IsDivisibleBy15(number))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"FizzBuzz"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (IsDivisibleBy5(number))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Buzz"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (IsDivisibleBy3(number))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Fizz"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> number.ToString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">IsDivisibleBy15</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> IsDivisibleBy3(number) &amp;&amp; IsDivisibleBy5(number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">IsDivisibleBy5</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number % <span class="number">5</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">IsDivisibleBy3</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number % <span class="number">3</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽出-result-變數作為回傳值"><a href="#抽出-result-變數作為回傳值" class="headerlink" title="抽出 result 變數作為回傳值"></a>抽出 result 變數作為回傳值</h3><p>這裡我是作了一個舖墊，主要是我看到了 <code>Fizz</code> 與 <code>Buzz</code> 的字串重複出現在 <code>FizzBuzz</code>，  我預計下一階段要讓 <code>FizzBuzz</code> 是透過組合產生，而不是寫死在程式之中。<br>特別要注意的事是，我為了產生 result 變數，必須在最後多作一次空字串的檢查，<br>這個時候的複雜度會達到 5 。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> result = <span class="keyword">string</span>.Empty;</span><br><span class="line">        <span class="keyword">if</span> (IsDivisibleBy15(number))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"FizzBuzz"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (IsDivisibleBy5(number))</span><br><span class="line">        &#123;</span><br><span class="line">            result = <span class="string">"Buzz"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (IsDivisibleBy3(number))</span><br><span class="line">        &#123;</span><br><span class="line">            result = <span class="string">"Fizz"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(result))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> number.ToString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">IsDivisibleBy15</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> IsDivisibleBy3(number) &amp;&amp; IsDivisibleBy5(number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">IsDivisibleBy5</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number % <span class="number">5</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">IsDivisibleBy3</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number % <span class="number">3</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="組合-result-值"><a href="#組合-result-值" class="headerlink" title="組合 result 值"></a>組合 result 值</h3><p>這個階段 ‘Fizz’ 與 ‘Buzz’ 在程式中只會出現一次，<br>15 的餘數檢查也被移除了，這時的複雜度是 4 ，<br>可惜的是我沒有意識到第三個 <code>if</code> 的明顯不同，<br>如果我能提早重構成 <code>result = number.ToString();</code><br>後面的重構也許會更簡潔一點。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> result = <span class="keyword">string</span>.Empty;</span><br><span class="line">        <span class="keyword">if</span> (IsDivisibleBy3(number))</span><br><span class="line">        &#123;</span><br><span class="line">            result += <span class="string">"Fizz"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (IsDivisibleBy5(number))</span><br><span class="line">        &#123;</span><br><span class="line">            result += <span class="string">"Buzz"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(result))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> number.ToString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">IsDivisibleBy5</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number % <span class="number">5</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">IsDivisibleBy3</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number % <span class="number">3</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="實作-FizzRule-Class"><a href="#實作-FizzRule-Class" class="headerlink" title="實作 FizzRule Class"></a>實作 FizzRule Class</h3><p>這是繼 <code>FizzBuzz</code> 後產生的第二個 Class，<br>算有指標意義，這裡原本的目的是想要消除 <code>if</code>，  但無法一步到位，先試著把 Fizz 與 Buzz 的邏輯作分離，<br>一樣我只聚焦在 Fizz 與 Buzz 身上，<br>而忽略了 <code>其它</code> 的邏輯判斷，寫成了三元判斷除了變成一行外其實沒有其他好處。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzRule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Check</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number % <span class="number">3</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> result = <span class="keyword">string</span>.Empty;</span><br><span class="line">        <span class="keyword">var</span> fizzRule = <span class="keyword">new</span> FizzRule();</span><br><span class="line">        <span class="keyword">if</span> (fizzRule.Check(number))</span><br><span class="line">        &#123;</span><br><span class="line">            result += <span class="string">"Fizz"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (IsDivisibleBy5(number))</span><br><span class="line">        &#123;</span><br><span class="line">            result += <span class="string">"Buzz"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">string</span>.IsNullOrEmpty(result) ? number.ToString() : result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">IsDivisibleBy5</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number % <span class="number">5</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="實作-BuzzRule-Class"><a href="#實作-BuzzRule-Class" class="headerlink" title="實作 BuzzRule Class"></a>實作 BuzzRule Class</h3><p>一樣把 Buzz 的邏輯搬到新的 Class 中，<br>這裡故意用相同的方法名，是為了下一步要抽介面。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">string</span> result = <span class="keyword">string</span>.Empty;</span><br><span class="line">    <span class="keyword">var</span> fizzRule = <span class="keyword">new</span> FizzRule();</span><br><span class="line">    <span class="keyword">if</span> (fizzRule.Check(number))</span><br><span class="line">    &#123;</span><br><span class="line">        result += <span class="string">"Fizz"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> buzzRule = <span class="keyword">new</span> BuzzRule();</span><br><span class="line">    <span class="keyword">if</span> (buzzRule.Check(number))</span><br><span class="line">    &#123;</span><br><span class="line">        result += <span class="string">"Buzz"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">string</span>.IsNullOrEmpty(result) ? number.ToString() : result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="介面-IRule"><a href="#介面-IRule" class="headerlink" title="介面 IRule"></a>介面 IRule</h3><p>終於抽出了介面，自已為聰明的把關鍵字抽離到了介面之中，<br>卻沒有考慮到真正的邏輯是組合 result 的行為仍然相依在 <code>FizzBuzz</code> Class</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IRule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">string</span> Word &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Check</span>(<span class="params"><span class="keyword">int</span> number</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzRule</span> : <span class="title">IRule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Word =&gt; <span class="string">"Fizz"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Check</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number % <span class="number">3</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BuzzRule</span> : <span class="title">IRule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Word =&gt; <span class="string">"Buzz"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Check</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number % <span class="number">5</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IRule-List"><a href="#IRule-List" class="headerlink" title="IRule List"></a>IRule List</h3><p>準備好了 IRule ，就是要讓 <code>FizzBuzz</code> 與 <code>FizzRule</code> 以及 <code>BuzzRule</code> 解耦的階段了，<br>這步我踩得有小，可以更直接一點重構，<br>一樣的問題，我仍然沒有意識最後一個<code>if(?:)</code>其實也是一種 <code>IRule</code>，  也沒有意識到 <code>result+=XXX</code> 與 <code>return YYY?number.ToString() : result;</code> 其實應該是屬於 <code>IRule</code> 的一部份<br>這時的複雜度仍然是 4  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;IRule&gt; _rules = <span class="keyword">new</span> List&lt;IRule&gt; &#123;<span class="keyword">new</span> FizzRule(), <span class="keyword">new</span> BuzzRule()&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> result = <span class="keyword">string</span>.Empty;</span><br><span class="line">        <span class="keyword">var</span> fizzRule = <span class="keyword">new</span> FizzRule();</span><br><span class="line">        <span class="keyword">if</span> (fizzRule.Check(number))</span><br><span class="line">        &#123;</span><br><span class="line">            result += fizzRule.Word;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> buzzRule = <span class="keyword">new</span> BuzzRule();</span><br><span class="line">        <span class="keyword">if</span> (buzzRule.Check(number))</span><br><span class="line">        &#123;</span><br><span class="line">            result += buzzRule.Word;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">string</span>.IsNullOrEmpty(result) ? number.ToString() : result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="foreach-List"><a href="#foreach-List" class="headerlink" title="foreach List"></a>foreach List<irule></irule></h3><p>自以為帥氣的完成重構，而且用 <code>foreach</code> 消除了重複的 <code>if</code>…<br>實際上複雜度完全沒有下降。<br>關鍵的 <code>result += rule.Word;</code> 與<br><code>return string.IsNullOrEmpty(result) ? number.ToString() : result;</code><br>我繼續忽視它。  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;IRule&gt; _rules = <span class="keyword">new</span> List&lt;IRule&gt; &#123;<span class="keyword">new</span> FizzRule(), <span class="keyword">new</span> BuzzRule()&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> result = <span class="keyword">string</span>.Empty;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> rule <span class="keyword">in</span> _rules)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (rule.Check(number))</span><br><span class="line">            &#123;</span><br><span class="line">                result += rule.Word;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">string</span>.IsNullOrEmpty(result) ? number.ToString() : result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重構二、面對問題"><a href="#重構二、面對問題" class="headerlink" title="重構二、面對問題"></a>重構二、面對問題</h2><h3 id="消除-foreach"><a href="#消除-foreach" class="headerlink" title="消除 foreach"></a>消除 foreach</h3><p>參考 Martin 大叔的作法，把 foreach 變成 pipelines<br>光是這個作法就讓我的複雜度從 4 下降到 2 了，<br>此時，<code>result += rule.Word;</code> 與<br><code>return string.IsNullOrEmpty(result) ? number.ToString() : result;</code><br>就顯得相當奇怪，第一個邏輯我認為應該放進實作<code>IRule</code>的類別之中，<br>而第二個邏輯應該是一個未被實作的 Rule 。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;IRule&gt; _rules = <span class="keyword">new</span> List&lt;IRule&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> FizzRule(),</span><br><span class="line">        <span class="keyword">new</span> BuzzRule(),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> result = <span class="keyword">string</span>.Empty;</span><br><span class="line">        <span class="keyword">var</span> myRules = _rules;</span><br><span class="line">        myRules</span><br><span class="line">        .Where(r =&gt; r.Check(number))</span><br><span class="line">        .ToList()</span><br><span class="line">        .ForEach(n =&gt; result += n.Word);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">string</span>.IsNullOrEmpty(result) ? number.ToString() : result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="實作-Apply"><a href="#實作-Apply" class="headerlink" title="實作 Apply"></a>實作 Apply</h3><p>終於將<code>result += rule.Word;</code>的邏輯從 <code>FizzBuzz</code> 抽離到 <code>IRule</code> 之中，<br>再由各自的 Rule 實作，這個時候就會覺得 <code>IRule.Check</code> 與 <code>IRule.Word</code> 有點累贅，<br>基於 SOLID 原則，這部份邏輯甚至不該被揭露在 <code>FizzBuzz</code>之中。  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IRule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">string</span> Word &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Check</span>(<span class="params"><span class="keyword">int</span> number</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">string</span> <span class="title">Apply</span>(<span class="params"><span class="keyword">string</span> input</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;IRule&gt; _rules = <span class="keyword">new</span> List&lt;IRule&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> FizzRule(),</span><br><span class="line">        <span class="keyword">new</span> BuzzRule(),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> result = <span class="keyword">string</span>.Empty;</span><br><span class="line">        _rules</span><br><span class="line">        .Where(r =&gt; r.Check(number))</span><br><span class="line">        .ToList()</span><br><span class="line">        .ForEach(n =&gt; result = n.Apply(result));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">string</span>.IsNullOrEmpty(result) ? number.ToString() : result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NormalRule"><a href="#NormalRule" class="headerlink" title="NormalRule"></a>NormalRule</h3><p>終於加上 <code>NormalRule</code> Class 了，裡面只有一個方法 <code>Apply</code>，  這裡是為了將來的介面準備，我想讓 NormalRule 成為 <code>IRule</code> 的一部份，<br>不過可以看到的問題是，方法簽章並不一致。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;IRule&gt; _rules = <span class="keyword">new</span> List&lt;IRule&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> FizzRule(),</span><br><span class="line">        <span class="keyword">new</span> BuzzRule(),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> result = <span class="keyword">string</span>.Empty;</span><br><span class="line">        _rules</span><br><span class="line">            .Where(r =&gt; r.Check(number))</span><br><span class="line">            .ToList()</span><br><span class="line">            .ForEach(n =&gt; result = n.Apply(result));</span><br><span class="line">        <span class="keyword">var</span> normalRule = <span class="keyword">new</span> NormalRule();</span><br><span class="line">        <span class="keyword">return</span> normalRule.Apply(number, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改-IRule-Apply"><a href="#修改-IRule-Apply" class="headerlink" title="修改 IRule.Apply"></a>修改 IRule.Apply</h3><p>在我的認知中，對 Production Code 修改介面是件危險的事，<br>這在 Kata 是可行的，但是在實際的 Production 恐怕就不夠 Baby Step 了，<br>我或許應該創造一個 IRuleV2 之類的介面，而不是直接修改 <code>IRule</code>。</p><p>首先編譯會不過，這會趨動我去修改 <code>FizzRule</code> 與 <code>BuzzRule</code><br>另外，這個時間點 <code>IRule.Check</code> 與 <code>IRule.Word</code> 作為 public 的資訊就顯得相當多餘了。<br>所以我會進一步將這些資訊從 <code>IRule</code> 介面中拿掉，<br>這也會使得 <code>FizzBuzz</code> Class 產生 Error，趁這個時候把 <code>.Where()</code> 與 <code>.ToList()</code> 一併拿掉，<br>但是要記得將 <code>IRule.Check</code> 與 <code>IRule.Word</code> 包含至 <code>IRule.Apply</code> 之中。  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IRule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">string</span> <span class="title">Apply</span>(<span class="params"><span class="keyword">int</span> number, <span class="keyword">string</span> input</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzRule</span> : <span class="title">IRule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> Word =&gt; <span class="string">"Fizz"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">Check</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number % <span class="number">3</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Apply</span>(<span class="params"><span class="keyword">int</span> number, <span class="keyword">string</span> input</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Check(number) ? input += <span class="keyword">this</span>.Word : input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NormalRule-與-IRule"><a href="#NormalRule-與-IRule" class="headerlink" title="NormalRule 與 IRule"></a>NormalRule 與 IRule</h3><p>這裡讓 <code>NormalRule</code> 實作 <code>IRule</code> 介面，<br>實際上在上面幾步已經完成了，<code>IRule</code> 反而比較像一個標籤掛在 <code>NormalRule</code> 上，<br>如此一來，就能夠在 <code>FizzBuzz</code> 裡面透過 <code>List&lt;IRule&gt;</code> 統整所有的規則。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;IRule&gt; _rules = <span class="keyword">new</span> List&lt;IRule&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> FizzRule(),</span><br><span class="line">        <span class="keyword">new</span> BuzzRule(),</span><br><span class="line">        <span class="keyword">new</span> NormalRule()</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> result = <span class="keyword">string</span>.Empty;</span><br><span class="line">        _rules</span><br><span class="line">            .ForEach(n =&gt; result = n.Apply(number, result));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IRule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">string</span> <span class="title">Apply</span>(<span class="params"><span class="keyword">int</span> number, <span class="keyword">string</span> input</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="收尾"><a href="#收尾" class="headerlink" title="收尾"></a>收尾</h3><p>作到這裡大概把我想作的東西都作掉了，<br><code>if</code> 散落在各個 <code>Rules</code> 裡面，<br>如果是 Production Code 我想我會使用 NameSpace 與專案資料夾再作進一步的整理吧。<br>最後把 <code>FizzRule</code> 與 <code>BuzzRule</code> 的 <code>Check</code> 與 <code>Word</code> 拿掉只是一點潔癖。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzRule</span> : <span class="title">IRule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Apply</span>(<span class="params"><span class="keyword">int</span> number, <span class="keyword">string</span> input</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number % <span class="number">3</span> == <span class="number">0</span> ? input += <span class="string">"Fizz"</span> : input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>過程中一直考慮著想要拿掉所有<code>if</code>，或是套用職責鏈(Chain of Responsibility Pattern)的 Pattern，<br>現在想想都有點走歪了方向，一再忽視責職的歸屬而讓後面的重構有點吃力，<br>不過透過 TDD 仍然讓程式碼重構到了一定的程度。<br>如果重來一次的話，我會選擇提早分離職責，<br>不過當中的取捨可能需要練習更多的 KATA 吧。</p><p>有人說這麼重構，會不會有點 Over Design 了，<br>我想說的是，反正是練習嘛，刻意練習到過頭也只是剛好而已，<br>如果不在練習時下點苦功，在戰場上用得出來嗎？<br>至少我的天賦而言，我應該是用不出來的。</p><h3 id="後記-1-20190207"><a href="#後記-1-20190207" class="headerlink" title="後記 1. 20190207"></a>後記 1. 20190207</h3><h4 id="Aggregate"><a href="#Aggregate" class="headerlink" title="Aggregate"></a>Aggregate</h4><p>文章貼出後，同事的回饋，可以使用 <code>Aggregate</code> 取代 <code>Foreach</code>，  程式碼可以更加精鍊。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;IRule&gt; _rules = <span class="keyword">new</span> List&lt;IRule&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> FizzRule(),</span><br><span class="line">        <span class="keyword">new</span> BuzzRule(),</span><br><span class="line">        <span class="keyword">new</span> NormalRule()</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _rules.Aggregate(<span class="keyword">string</span>.Empty, (r, n) =&gt; n.Apply(number, r));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="參數優化"><a href="#參數優化" class="headerlink" title="參數優化"></a>參數優化</h4><p>把 r、n 這類較沒意義的命名改成 input 與 rule，<br>單純是為了讓 <code>Aggreate</code> 的可讀性較高一些。<br>接下來這個異動的幅度較大，實務上我不會這樣作，<br>讓 <code>Apply</code> 的方法簽章順序與 <code>Aggreate</code> 一樣把 <code>input</code> String 放在最前面，<br>真的真的非常沒有必要，因為會異動到介面。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;IRule&gt; _rules = <span class="keyword">new</span> List&lt;IRule&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> FizzRule(),</span><br><span class="line">        <span class="keyword">new</span> BuzzRule(),</span><br><span class="line">        <span class="keyword">new</span> NormalRule()</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _rules.Aggregate(<span class="keyword">string</span>.Empty, (input, rule) =&gt; rule.Apply(input, number));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://github.com/marsen/Coding_Dojo_Csharp/tree/fizzbuzz/20190205/UnitTestProject6" target="_blank" rel="noopener">Coding_Dojo_Csharp</a></li><li><a href="https://martinfowler.com/articles/refactoring-pipelines.html?fbclid=IwAR0uG0IXa_i6JoSRPtO6s-gXj-0jOAZDNrBYRmaHAJ2_RYFpiqcrbr4Z86k" target="_blank" rel="noopener">Refactoring with Loops and Collection Pipelines</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;記錄一下 Kata 的思路。&lt;/p&gt;
&lt;h2 id=&quot;實例化需求&quot;&gt;&lt;a href=&quot;#實例化需求&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="Unit Testing" scheme="https://blog.marsen.me/tags/Unit-Testing/"/>
    
      <category term="Testing" scheme="https://blog.marsen.me/tags/Testing/"/>
    
      <category term="TDD" scheme="https://blog.marsen.me/tags/TDD/"/>
    
      <category term="重構" scheme="https://blog.marsen.me/tags/%E9%87%8D%E6%A7%8B/"/>
    
  </entry>
  
  <entry>
    <title>[N社筆記] 在公司小規模玩 Coding Dojo </title>
    <link href="https://blog.marsen.me/2019/01/30/2019/coding_dojo_in_company/"/>
    <id>https://blog.marsen.me/2019/01/30/2019/coding_dojo_in_company/</id>
    <published>2019-01-29T17:41:17.000Z</published>
    <updated>2019-06-10T14:43:28.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>在上 91 大的(<a href="https://blog.marsen.me/2019/01/13/2019/91_coding_dojo_log/">熱血 Coding Dojo 第一梯次</a>)的課程中，<br>我一直在思索一件事，<strong>為什麼我作不到呢？</strong></p><p><img src="/images/2019/1/be_a_star.jpg" alt="我什麼時候才能成角啊"></p><p>我不希望只是上了課之後，「喔喔喔 我好興奮啊…」就結束了，<br>所以馬上找了一起上課的兩個同事開了個簡單的 Retro<br>我只有一個問題，<br>「如果你覺得這堂課有效的話，我們要作什麼 才能帶來改變呢 ?」  </p><h2 id="開起小型-Dojo"><a href="#開起小型-Dojo" class="headerlink" title="開起小型 Dojo"></a>開起小型 Dojo</h2><p>我們簡單的作了一個決定，我們要在公司內部建立一個 Dojo<br>並且簡單的訂定了三個目標</p><ol><li>學習 Pair ，並透過 Pair 彼此學習</li><li>學習 TDD ，並透過 TDD 學習重構</li><li>學習 Vim，並提昇開發速度</li></ol><p>這三個東西都是在課堂上學習到的，幸運得是我們當中有兩位已經會基本的 Vim 指令，<br>當然也各有各的問題，ex: 不熟悉英打、沒有 Reshaper 、找不到共同的時間等…</p><p>總而言之，我們就這樣開始了。</p><h3 id="第一個-Kata"><a href="#第一個-Kata" class="headerlink" title="第一個 Kata"></a>第一個 Kata</h3><p>第一個 Kata 是很重要的，<a href="http://codingdojo.org/kata/" target="_blank" rel="noopener">Coding Dojo</a>提供我們一些選擇，<br>Tennis Game 與 Pocker Hand 都是很好的題目，<br>但是新手上路，我們選了一個簡單的 <a href="http://codingdojo.org/kata/FizzBuzz/" target="_blank" rel="noopener">Fizz Buzz</a> 當作練習題目。<br>Fizz Buzz 的需求分析是很簡單的，  </p><ol><li>傳入 1 數，可以被 3 整除，回傳 Fizz</li><li>傳入 1 數，可以被 5 整除，回傳 Buzz</li><li>傳入 1 數，可以被 3 整除，且可以被 5 整除，回傳 FizzBuzz</li><li>不符合上述條件回傳原數值</li></ol><p>Sample Case:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1 → 1</span><br><span class="line">2 → 2</span><br><span class="line">3 → Fizz</span><br><span class="line">4 → 4</span><br><span class="line">5 → Buzz</span><br><span class="line">6 → Fizz</span><br><span class="line">7 → 7</span><br><span class="line">8 → 8</span><br><span class="line">9 → Fizz</span><br><span class="line">10 → Buzz</span><br><span class="line">11 → 11</span><br><span class="line">12 → Fizz</span><br><span class="line">13 → 13</span><br><span class="line">14 → 14</span><br><span class="line">15 → FizzBuzz</span><br></pre></td></tr></table></figure><h3 id="怎麼開始？"><a href="#怎麼開始？" class="headerlink" title="怎麼開始？"></a>怎麼開始？</h3><p>首先是時間，專案很忙碌，不是所有的人都有空，<br>我要怎麼擠出時間 ？  </p><h3 id="利用-Timebox-與-Don’t-Break-The-chain"><a href="#利用-Timebox-與-Don’t-Break-The-chain" class="headerlink" title="利用 Timebox 與 Don’t Break The chain"></a>利用 Timebox 與 Don’t Break The chain</h3><p>每天都練習 KATA，每次 30 分鐘；<br>每天約定一個時間 30 分鐘，30 分鐘到就強制結束，<br>不論是中午的 30 分鐘，或是下班前的 30 分鐘，<br>找一個時間只要有兩個人的時間 OK 就進行 。<br>輪流當 Dirver 與 Navigator ，時間設定 5 分鐘，<br>一樣時間到就換手。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">嚴格執行 Timebox 真的是一件很折磨人的事情，  </span><br><span class="line">特別是有一些火花的討論出現時，</span><br><span class="line">但是隨著每次的 Timebox 的結束，</span><br><span class="line">看到的成果比上一次多時，  </span><br><span class="line">那種進步感是相同明顯的。</span><br></pre></td></tr></table></figure><p>很幸運的，一直到過農曆年我們都沒有中斷，<br>設定 Timebox 也確實有讓參與的人提昇，<br>包含「重構的技巧」、「打字」、「TDD」與「Vim」，<br>也有人分享工具，或是小技巧，<br>這達到我們<strong>彼此學習</strong>的目的。  </p><h3 id="回顧一下作得好的部份"><a href="#回顧一下作得好的部份" class="headerlink" title="回顧一下作得好的部份"></a>回顧一下作得好的部份</h3><ol><li>雖然很困難，有線上的問題要處理，有工作項目，有一堆會議，但是我們仍然沒有中斷過一天。</li><li>完成了兩個 Kata ，經典的 FizzBuzz 還有很類似的題目 FooBarQix。</li><li>確實有從彼此身上學到東西，比如說在 Vim 裡面超好用的 <code>ci</code> 或是 AceJump 小工具。</li><li>人數控制的很好，押在 3 到 5 人，也讓大家都能參與到。</li><li>最重要的一點，看到了很多「真實」</li></ol><h3 id="作得不好的部份"><a href="#作得不好的部份" class="headerlink" title="作得不好的部份"></a>作得不好的部份</h3><ol><li>環境有一些前期門檻在，ex: Reshaper、已配置過的 VimRC</li><li>Timebox 有時候仍會超過，主因是討論太熱情了。</li><li>整體成員都算有經驗的開發者，但是對重構仍然很弱，對壞味道麻痺(不在意重複等…)</li><li>TDD 有時候沒辦法作到 Baby Step ，雖然重構是成功的，但過程有點跳躍；或是重構完才發現測試壞一大片，需要偵錯去修正。</li><li>雖然有記錄一些問題，但是常常沒有去求解答</li></ol><h3 id="真實的部份"><a href="#真實的部份" class="headerlink" title="真實的部份"></a>真實的部份</h3><ol><li>我們常常看到重複視而不見，特別是只有兩、三次的重複<ul><li>這題成員的看法比較貼近大量重複再重構…我仍然有點持疑  </li></ul></li><li>因為時間壓力，我們會把問題留給後人；我們不會去理解前人的設計<ul><li>時間壓力可以換成任何理由</li></ul></li><li>Navigator 如果沒有思考 Dirver 會開 Auto</li></ol><p>我們開發者真的太有自信，在 Kata 過程出現的問題，<br>如果放到開發現場的規模，基本上就是災難，<br>而實際上也是每天發生。</p><p>在時限的壓力下，你不能作出多完美的設計，<br>但是你可以透過測試作出足夠好的設計，<br>測試的保護可以幫助你提早發現</p><h2 id="下一步是-？"><a href="#下一步是-？" class="headerlink" title="下一步是 ？"></a>下一步是 ？</h2><p>一直以來有那麼多讀書會，上了那麼多課，<br>也有外訓內訓，結果卻是不了了之，<br>要怎麼証明理論有效 ？<br>要怎麼導入開發現場 ？</p><p><a href="https://github.com/marsen/Coding_Dojo_Csharp" target="_blank" rel="noopener">我們的成果</a></p><h2 id="寫在後面"><a href="#寫在後面" class="headerlink" title="寫在後面"></a>寫在後面</h2><p>我不是本科系畢業，但在軟體開發上也有 7、8 年的經驗，<br>軟體的經典書籍也看過不少，<br>不論是免費的社群活動或是上萬元的課程，<br>相關的課也上了不少。  </p><p>學習單一語言的特性或是設計模式、物件導向到工程上的 Code Review、Pair Programming、TDD 諸如此類等…<br>不能說沒有幫助，但總覺得現實與書上的理想好遠啊…<br>我以為我懂了，其實我根本不懂。  </p><p>技術不斷推陳出新，追不勝追，<br>常常工作完後研究或是練習到半夜，<br>但是沒什麼效果，或在實務上根本用不到<br>真得很有事倍功半的無力感。  </p><p>在工作上的產品或專案永遠都有<strong>緊急又重要</strong>的事要作，<br>人家的艾森豪矩陣有四個象限，你永遠只有一個象限，<br>生活上各種的壓力與瑣事，變成了種惡性循環，<br>像個泥沼一般，無法提昇所以下沉，下沉了更無法提昇。  </p><p>這個小小實驗，就像是整個開發現場的濃縮版，<br>現場很多問題不是沒有解答，<br>但是常常一句「理論上是，但是…」，然後就沒有然後了。<br>我們太習慣短解，太過自信，讓不好的事情重複發生，<br>然後覺得自已很忙碌，很有價值感，<br>但是沒有任何改變。</p><p>這個實驗我會繼續下去，期待能有好的結果，並帶來一些變化。  </p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://github.com/marsen/Coding_Dojo_Csharp" target="_blank" rel="noopener">marsen/Coding_Dojo_Csharp</a></li><li><a href="http://codingdojo.org/KataCatalogue/" target="_blank" rel="noopener">Coding Dojo</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;在上 91 大的(&lt;a href=&quot;https://blog.marsen.me/2019/01/13/2019/91_co
      
    
    </summary>
    
    
      <category term="Unit Testing" scheme="https://blog.marsen.me/tags/Unit-Testing/"/>
    
      <category term="TDD" scheme="https://blog.marsen.me/tags/TDD/"/>
    
      <category term="重構" scheme="https://blog.marsen.me/tags/%E9%87%8D%E6%A7%8B/"/>
    
      <category term="Vim" scheme="https://blog.marsen.me/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>[上課筆記] 熱血 Coding Dojo 第一梯次</title>
    <link href="https://blog.marsen.me/2019/01/13/2019/91_coding_dojo_log/"/>
    <id>https://blog.marsen.me/2019/01/13/2019/91_coding_dojo_log/</id>
    <published>2019-01-13T03:17:16.000Z</published>
    <updated>2019-06-10T14:43:28.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="知道的事"><a href="#知道的事" class="headerlink" title="知道的事"></a>知道的事</h2><p>活動連結 - <a href="https://yihuode.io/activities/718?fbclid=IwAR3LPQ8HudKS72isCmeWzpe8BsTRNTTG17tChxSysXE66S3xSBypKrVzMs8" target="_blank" rel="noopener">熱血 Coding Dojo - 第一梯次</a>(活動已結束)<br>講師 : Joey Chen<br>範例語言 : C#</p><h2 id="上課隨筆"><a href="#上課隨筆" class="headerlink" title="上課隨筆"></a>上課隨筆</h2><h3 id="觀念"><a href="#觀念" class="headerlink" title="觀念"></a>觀念</h3><ul><li>不要寫多餘的 Product Code</li><li>害怕別人看你寫Code是一道門檻</li><li>程式腐壞的速度遠比想像中的快(大概給 3 個人寫過就開始爛了)</li><li>Pair 時不要一開始就寫 Code，先建立共識</li><li>當你碰到薪資天花板就只能轉成管理者(然後是彼得效應)</li><li>國際化的產品能提升自已的視野與能力</li><li>英文不夠好是一個門檻，特別在命名的時候</li><li>不要臉也是一種技能</li><li>先考慮正確性與可維護性 再考慮效能</li><li>你以為你在重構 但是代碼變得更難維護</li><li>看人家怎麼做？學怎麼想？</li><li>即時重構是很重要的，太晚重構會來不及(Side Effect會大到你無法克服心魔)</li><li>ATDD 與 TDD 的軟體工序與心魔</li><li>你已經具備 knowledge 但是缺乏 Couching 與實務訓練</li><li>代碼會反應開發當時的思緒 (不要在精神狀態不好的時候開發)</li><li>Poker Hand 91 大約2小時完成 (思考怎麼錄製與課後練習中…)</li><li>睡前練習可以增強肌肉記憶</li></ul><h3 id="實作技巧"><a href="#實作技巧" class="headerlink" title="實作技巧"></a>實作技巧</h3><ul><li>紅燈時不要重構</li><li>.if .var (C# in Visual Studio)</li><li>第一個test case 不要有判斷式</li><li>r n . (Vim in Visual Studio)</li><li>紅燈→綠燈→重構→綠燈 ; 要學會節奏與時機</li><li>F8 跳錯誤</li><li>一個變數活很久 最後可能被複寫 會容易產生side effects</li><li>zcc (Vim in Visual Studio)</li></ul><h3 id="壞味道"><a href="#壞味道" class="headerlink" title="壞味道"></a>壞味道</h3><ul><li>重構的壞味道，使用私有變數而非方法</li><li>if else if 簽章抽象相同是個壞味道(或是一個可以重構的 Pattern)</li><li><del>Q:請回饋這堂課好的地方 A:T社的HR</del></li></ul><h2 id="寫在最後"><a href="#寫在最後" class="headerlink" title="寫在最後"></a>寫在最後</h2><p>最近覺得寫程式真的是一種造業，創造就業機會。</p><p><strong>與善人居，如入芝蘭之室，久而不聞其香，即與之化矣；</strong><br><strong>與不善人居，如入鮑魚之肆，久而不聞其臭。</strong></p><p>雖很想推<a href="https://yihuode.io/activities/767" target="_blank" rel="noopener">熱血 Coding Dojo - 第二梯次</a>，不過大概已經完售了。</p><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;知道的事&quot;&gt;&lt;a href=&quot;#知道的事&quot; class=&quot;headerlink&quot; title=&quot;知道的事&quot;&gt;&lt;/a&gt;知道的事&lt;/h2&gt;&lt;p&gt;活動連結 - &lt;a href=&quot;https://yihuode.io/activities/718?fbclid=IwAR3
      
    
    </summary>
    
    
      <category term="Unit Testing" scheme="https://blog.marsen.me/tags/Unit-Testing/"/>
    
      <category term="Testing" scheme="https://blog.marsen.me/tags/Testing/"/>
    
      <category term="TDD" scheme="https://blog.marsen.me/tags/TDD/"/>
    
      <category term="重構" scheme="https://blog.marsen.me/tags/%E9%87%8D%E6%A7%8B/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記]在 Windows Subsystem for Linux 執行 docker</title>
    <link href="https://blog.marsen.me/2019/01/07/2019/run_docker_on_window_subsystem_for_Linux_Ubuntu/"/>
    <id>https://blog.marsen.me/2019/01/07/2019/run_docker_on_window_subsystem_for_Linux_Ubuntu/</id>
    <published>2019-01-07T09:18:13.000Z</published>
    <updated>2019-06-10T14:43:28.959Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>最近開始學 <a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a>， 這個神器大概在 C 社時期就有聽過了，<br>不過一直沒有機會在實務上接觸，雖然有自已摸一點，但就只有皮毛而已，<br>在 A 社有機會由同事開課，並提供 EC2 作實驗，就趁這個機會作一點深入的學習。</p><p>一開始有一個很天真的想法，<strong>我想在 Windows 內建的 Linux 子系統 Ubantu 安裝 Docker</strong>，  沒想到最後是脫褲子放屁，不過過程蠻有趣的，稍微記錄一下。</p><h2 id="操作步驟"><a href="#操作步驟" class="headerlink" title="操作步驟"></a>操作步驟</h2><ol><li>Windows 10 安裝 Ubantu</li><li>在 Ubantu 安裝 Docker</li></ol><p>更新 apt-get</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure><p>允許 apt-get 透過 https </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure><p>加入 Docker 官方 GPG KEY</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span></span><br></pre></td></tr></table></figure><p>然後可以驗証一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-key fingerprint 0EBFCD88</span></span><br></pre></td></tr></table></figure><p>加入 Docker 的 apt-repository</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo add-apt-repository \</span></span><br><span class="line">   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span><br><span class="line"><span class="meta">   $</span><span class="bash">(lsb_release -cs) \</span></span><br><span class="line">   stable"</span><br></pre></td></tr></table></figure><p>再次更新 apt-get</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br></pre></td></tr></table></figure><p>安裝 Docker CE</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install docker-ce</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Run Docker </li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker container run hello-world</span></span><br></pre></td></tr></table></figure><p>我都會失敗如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?.</span><br><span class="line">See 'docker run --help'.</span><br></pre></td></tr></table></figure><h2 id="如何解決"><a href="#如何解決" class="headerlink" title="如何解決 ?"></a>如何解決 ?</h2><ol><li><p>Windows 上要安裝 Docker for Windows</p></li><li><p>勾選 Docker for Windows → Setting → Expose deamon on tcp://localhost:2375 Without TLS<br><img src="/images/2019/1/docker.jpg" alt></p></li><li><p>回到 Ubantu , 執行以下命令</p></li></ol><p>指定 Docker Host 在路徑</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker -H localhost:2375 images</span></span><br></pre></td></tr></table></figure><p>如果不想每次指定的話…請參考以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> DOCKER_HOST=localhost:2375</span></span><br></pre></td></tr></table></figure><p><img src="/images/2019/1/ubantu_docker.jpg" alt="執行結果"></p><h2 id="學到的事"><a href="#學到的事" class="headerlink" title="學到的事"></a>學到的事</h2><ul><li><p>Docker 有 Host(Deamon) 與 Client 之分</p></li><li><p>在 Windows 上的 VM(Ubantu) 再安裝 Docker Deamon 是行不通的(細節我並不清楚，求補充…)</p></li><li><p>我還不夠了解 Windows Container 與 Linux Container 的差異</p><ul><li><a href="https://columns.chicken-house.net/2016/09/05/windows-container-faq/" target="_blank" rel="noopener">Windows Container FAQ - 官網沒有說的事</a></li><li><a href="https://columns.chicken-house.net/2017/10/04/lcow/" target="_blank" rel="noopener">LCOW Labs: Linux Container On Windows</a></li><li>more … </li></ul></li><li><p><del>繞了一圈，一事無成</del></p></li></ul><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://medium.com/@sebagomez/installing-the-docker-client-on-ubuntus-windows-subsystem-for-linux-612b392a44c4" target="_blank" rel="noopener">Installing the Docker client on Windows Subsystem for Linux (Ubuntu)</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">Get Docker CE for Ubuntu</a></li><li><a href="https://www.microsoft.com/zh-tw/p/ubuntu/9nblggh4msv6?activetab=pivot%3Aoverviewtab" target="_blank" rel="noopener">取得 Ubuntu - Microsoft Store zh-TW</a> </li><li><a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows" target="_blank" rel="noopener">Docker CE Desktop Windows</a></li><li><a href="https://oomusou.io/docker/docker-for-windows/" target="_blank" rel="noopener">如何安裝 Docker for Windows ?</a></li><li><a href="https://docs.microsoft.com/zh-tw/virtualization/windowscontainers/deploy-containers/linux-containers" target="_blank" rel="noopener">Windows 上的 Linux 容器</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;最近開始學 &lt;a href=&quot;https://www.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://blog.marsen.me/tags/Docker/"/>
    
      <category term="Container" scheme="https://blog.marsen.me/tags/Container/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記]查找與重建 Table 的索引值</title>
    <link href="https://blog.marsen.me/2019/01/05/2019/reseed/"/>
    <id>https://blog.marsen.me/2019/01/05/2019/reseed/</id>
    <published>2019-01-05T05:13:29.000Z</published>
    <updated>2019-06-10T14:43:28.954Z</updated>
    
    <content type="html"><![CDATA[<p>查詢指定 Table 目前的索引值</p><p>DBCC CHECKIDENT (yourtable)</p><p>Example</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> AdventureWorks2012;  </span><br><span class="line">GO  </span><br><span class="line">DBCC CHECKIDENT ('Person.AddressType');  </span><br><span class="line">GO  DBCC CHECKIDENT (memberAccount)</span><br></pre></td></tr></table></figure><p>重新建立你的索引值</p><p>DBCC CHECKIDENT (yourtable, reseed, new index)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> AdventureWorks2012;  </span><br><span class="line">GO  </span><br><span class="line">DBCC CHECKIDENT ('Person.AddressType', RESEED, 10);  </span><br><span class="line">GO</span><br></pre></td></tr></table></figure><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://docs.microsoft.com/zh-tw/sql/t-sql/database-console-commands/dbcc-checkident-transact-sql?view=sql-server-2017" target="_blank" rel="noopener">DBCC CHECKIDENT (Transact-SQL)</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;查詢指定 Table 目前的索引值&lt;/p&gt;
&lt;p&gt;DBCC CHECKIDENT (yourtable)&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;
      
    
    </summary>
    
    
      <category term="SQL" scheme="https://blog.marsen.me/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記]用 Restclient GenCode</title>
    <link href="https://blog.marsen.me/2018/12/30/2018/restclient_gencode/"/>
    <id>https://blog.marsen.me/2018/12/30/2018/restclient_gencode/</id>
    <published>2018-12-30T03:58:43.000Z</published>
    <updated>2019-06-10T14:43:28.937Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Huachao/vscode-restclient" target="_blank" rel="noopener">REST Client</a> 是一套 Visual Studio Code 的套件。<br>可以讓你不離開編輯器(Visual Studio Code)的情況下，發送一些 Request。<br>使用方法可以參考最後的聯結，本文僅介紹 Code Gen 的功能。</p><h2 id="作法"><a href="#作法" class="headerlink" title="作法"></a>作法</h2><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>取得 Request 連結資訊，這個部份可以直接從瀏覽器取得</p><p>大致上如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET https://***.****.com.my/Invoice/DownloadMyInvoicePdf?shopId=44&amp;tradesOrderGroupCode=MG180929L00002</span><br><span class="line">Cookie: ai_user=zazJ/|2018-04-11T10:01:21.161Z; _ga=GA1.3.1260482009.1526374223; __zlcmid=p9hkxHsXzC5Ka5; _ym_uid=15450340861049673384; _ym_d=1545034086; _gid=GA1.3.233068902.1545616884; _fbp=fb.2.1545992230107.2040829768; .AspNet.ApplicationCookie=1ly--ntvPSpcJIIDvk2PBFfuyy744Wvwx4ezT0c0BEl1t4Vw3ahOOMwSczzBezkE0dIPWBwQt12KPN8IrFj8eV2ZgfO6HYKuiw7cUNgS37Gr1FOH28o-l5EZuOYGd4uuqRduaBBPbZrJop5nUso1oPS4fOs-mFO0I17QWHtfB_BI2Lzd6rQQRl6_IevI_EPbsh0EDahqvR4wvF2QFMH2ycECSzR4pgEmm3hcQRJ9COWoc-DtZjxxa11yfghghmReLbe1cYtx1G7ST9zakc_qGmnMV0IyZoRFqEmHrzEb1b8fDO35UkxsiP2_mzGY-Oy4e3fV12Q0N7eGVblEkJYZkrtXADP8h9iGToPwAUI5rbnX2o32Z0_4zbg7x_GSF_HWsW22SWlkRCAZEKhvhEB9Qk56JPSRSJwqmpGDzm8a807-6lRP-JPOo_F43eYLgztH6k6imlUseUyDyYBTwJeIgF5gdyLKMUSivKs-SOivyPofDiLMf0HItB9IgzRg-M94FjZROtOWeGXOYW4wqBMyABTelYgjfjgNtoW05SN7npnSYKG1JZeRwrT5KgaRXJy7KHkguyN8vhoYTjSX0cG4VaOrJqgGY-jsQov1lJvZTok_YAkiDRbOhDu3ebdJdi313sGSkUjjkW73Fn9ztmpexLN3OxfmhUlDu0MHhEqgLJMg8koLWBJjpmVC0YdNPCXNofGgNECkiWCZHTZw8u9jnLhtP686CG_JTQFE33YTdh3mJOp7KwFdFvQefEX5Jb2vUXmfFXMBP3MhD5civiPg4Q0WLU4; ai_session=XYYeY|1545989192862|1545993911682</span><br></pre></td></tr></table></figure><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>Ctrl+P，輸入 <code>&gt;</code>，找到 <code>Rest Client: Generate Code Snippet</code><br>選擇你的語言。</p><p><img src="/images/2018/restclient.gif" alt></p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client" target="_blank" rel="noopener">REST Client: 官方載點</a></li><li><a href="https://github.com/Huachao/vscode-restclient" target="_blank" rel="noopener">REST Client: Github 專案</a></li><li><a href="https://blog.rex-tsou.com/2017/10/vscode-%E5%AF%A6%E7%94%A8%E5%A5%97%E4%BB%B6-rest-client/" target="_blank" rel="noopener">VSCode 實用套件： REST Client</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/Huachao/vscode-restclient&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;REST Client&lt;/a&gt; 是一套 Visual Studio Code 的套件。&lt;br&gt;可以讓你
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSM 之後 Scrum 總結</title>
    <link href="https://blog.marsen.me/2018/12/27/2018/csm/to_sum_up_scrum/"/>
    <id>https://blog.marsen.me/2018/12/27/2018/csm/to_sum_up_scrum/</id>
    <published>2018-12-27T03:29:45.000Z</published>
    <updated>2019-06-10T14:43:28.922Z</updated>
    
    <content type="html"><![CDATA[<ul><li>什麼是 Scrum ?</li><li>Scrum 的理想 ?</li><li>Scrum 怎麼導入 ?</li><li>現實的殘酷</li><li>仍然存在的疑惑 ?</li></ul><h2 id="什麼是-Scrum"><a href="#什麼是-Scrum" class="headerlink" title="什麼是 Scrum"></a>什麼是 Scrum</h2><p>「什麼是 Scrum？」，在這之前我們先問一下「為什麼要 Scrum ？」<br>「Scrum 之前我們怎麼進行專案的？」、「Scrum 之前我們怎麼管理團隊的？」<br>層層的組織架構、層層的管理人員、層層規劃設計開發…</p><p>本來都好好的，為什麼現在不 work 了？</p><p>時代正在改變，軟體、網路、行動裝置等…各種技術的成熟，使得整個社會，<br>不論工業、商業已經往下一個階段邁進，<br>這是一個<strong>VUCA</strong>(多變(Volatile)、不確定(Uncertain)、複雜(Complex) 與混沌不明(Ambiguous))的時代，<br>新的科技帶來新的生活習慣與消費行為，同時機會也再此產生，<br>不論是巨象還是螞蟻都必須想辦法求生存，而快速適應與改變的能力，成為這個時代必備的能力。  </p><p>不論是 Agile 或是 Scrum 都是要讓你適應變化，並且活下去。  </p><p>而 Scrum 是一個框架，三個大原則，透明(Transparency)、檢驗(Inspection)、調適性(Adaptation)<br>簡單易學，卻難以精通，這句話說得明白一點，就是很容易畫虎不成反類犬。<br>而 Scrum Guide 用了一句簡單帶過，<br>「Scrum’s roles, events, artifacts, and rules are immutable and although<br>implementing only parts of Scrum is possible, the result is not Scrum.<br>Scrum exists only in its entirety and functions well as a container<br>for other techniques, methodologies, and practices.」  </p><p>常見的「Scrum 自助餐」其實不是 Scrum 。</p><h3 id="透明-Transparency"><a href="#透明-Transparency" class="headerlink" title="透明(Transparency)"></a>透明(Transparency)</h3><p>透明的目的是什麼？避免殼倉？曝露風險？取得共識？</p><p>CMS 課程帶給我一個很重要的學習，是個很簡單的老故事就說過的道理。<br>「盲人摸象」，大家應該都聽過這個故事吧，<br>有的人摸到了扇子(耳朵)、有人摸到牆壁(身體)、有人摸到柱子(腿)、有人摸到水管(鼻子)…<br>如果大象是你的產品、你的商業模式、你的生存武器，<br>那麼展現「雅量」就不是一件很好的事了，<br>當你的 DBA 說了扇子、RD 說了牆壁，PO 說了柱子而 QA 說了水管，<br>那麼這些的加總就是你的大象(產品)了嗎 ?  </p><p><img src="/images/2018/csm/elephant.jpg" alt="盲人的大象"></p><p><strong>「所有人說都是對，排列組合也是對的，但結果是錯的。」</strong>，怎麼解決這個問題？</p><ol><li>讓盲人看見</li><li>讓盲人摸得到別人的區塊</li></ol><p>透明的目的是為了<strong>看見目標、取得共識</strong>，還記得多少浪費生命的會議，有多少會前會？有多少會後討論嗎？<br>又或是大家都說好，作出來卻是半成品、廢品嗎 ？  </p><p><strong>取得共識</strong> 是困難的，Scurm 提供的機制，<br>讓回饋在不同的活動(會議)中由不同的角色中產生，<br>但是如果成員不願意講，這些會議就一點意義也沒有了。  </p><p>要如何讓成員願意發言？<br><strong>信任、信賴、安全感</strong>，但是這需要時間去打造這樣的文化與環境。<br>事實上不會喊完口號，成員就彼此互相信任，生產力大爆發。<br>如何打造一個這樣的環境？是管理職真正的責任所在。<br>但這種無法立竿見影的工作，喊口號的很多，作的人很少。</p><h3 id="檢驗-Inspection-與調適性-Adaptation"><a href="#檢驗-Inspection-與調適性-Adaptation" class="headerlink" title="檢驗(Inspection)與調適性(Adaptation)"></a>檢驗(Inspection)與調適性(Adaptation)</h3><p>透明在檢驗與調適性之前，是有重要的意義的。<br>也只有透明，才能讓事實擺在眼前，<br><strong>不是基於事實的檢驗與修正，只是自慰而已。</strong>  </p><p>無奈的是這個世界是如此的複雜，你幾乎不可能真的看見大象(全貌)，<br>曾經有個創業的朋友說了一個「敏捷無用論」，  </p><p>沒錯，他說得對。<br><strong>Agile 與 Scrum 從來不是銀子彈</strong> ，如果要迷信「敏捷」不如迷信「沒有銀彈」吧。<br>你必需依賴你的情境(Context)來決定使用什麼方法，<br>在他的情境當中，他們要作得項目已經很明確了，而資金是不足的，所以每分每秒對他們都非常重要，<br>如果要照表操課這些會議，恐怕會佔據大部份的時間。<br>但是這些會議都有其背後的意義與目的，如果團隊能與商業目標緊密結合，<br>甚至是一體同心(比如說:你就是老闆又是開發人員)，那麼梳理需求是不是能快速的在幾分鐘內完成 ？<br>如果你們每個人每時每刻都在一起工作，分享彼此的工作內容，那麼需不需要「每天」開個例會同步資訊呢 ？  </p><p>反過來說，他說得也不對。<br>在每個會議與每個會議的產出物的背後都有一個目的與意義，<br>如果不能讓梳理需求、衝刺開發、展現結果與收取回饋時時發生，<br>那麼這些會議是最好的機會，更重要的事是 Scrum 給團隊自主權，決定進行的方式，<br>如果有進行這些活動，卻沒有帶來相對的效益，這背後是不是對 Scrum 沒有深刻理解所造成的呢 ？  </p><p>這種都對都錯的「盲人摸象」時時發生，<br>重點是怎麼作「取捨」、怎麼作「選擇」。<br>也是「Adaptation」的意義，你要欠一些債，爭取提早上市的時間？<br>你要將一個團隊當作棄子，為了作出一個 POC？<br>這都是選擇，<strong>你是有意識的選擇，還是無意識的呢？</strong>  </p><p>如果你是屬於身不由已的那方，被選擇得對象，那麼你要作出什麼選擇？<br>讓自已的生存機會提高呢？  </p><h2 id="Scrum-的理想"><a href="#Scrum-的理想" class="headerlink" title="Scrum 的理想"></a>Scrum 的理想</h2><p>Scrum 本身僅僅是個框架，它給了整個團隊非常彈性的空間，<br>但是仍然有著一些限制。</p><h3 id="角色的定位"><a href="#角色的定位" class="headerlink" title="角色的定位"></a>角色的定位</h3><h4 id="Scrum-Master-要作什麼-？"><a href="#Scrum-Master-要作什麼-？" class="headerlink" title="Scrum Master 要作什麼 ？"></a>Scrum Master 要作什麼 ？</h4><p>Scrum Master 的這個角色，不存在一般的組織架構之中，<br>這個導致 Scrum Master 的養成非常不易，<br>偏偏「Master」這個名詞，使得人們對 Scrum Master 有不切實際的期待與依賴<br>「Scrum Master」本身是個教練型的角色，需要旁觀者的客觀心態，<br>需要觀察記錄個人、團隊乃至於整間公司文化，<br>(「記錄與側錄」是重要的，這能讓你從另一個旁觀者角度看事情，不要只有一個視角。)<br>同時又需要各種方法去教導、引導團隊，這包含「對 Scurm 的理解與實踐」與「工程實踐」<br>有太多 Scurm Master 常常會犯的錯如下:</p><ul><li>淪為安排會議的助理角色</li><li>過度將焦點放在 Scurm Master 本身</li><li>照表操課的帶四大會議，而不是觀注在團隊的成長與過程</li><li>缺乏工程實踐的能力與經驗，導致在引入實踐時淪為空話</li><li>身兼不同的角色，造成角色錯亂</li><li>無法存活導致被炒，即使有冒出新芽的改變也隨之消失</li><li>只顧著存活而無法帶來實踐改變，純粹變成招覽「人材」用的蜜糖(HR:我們有屎逛，很潮喔;進去後才發現是小瀑布，真的很潮)</li></ul><h4 id="PM-可以轉型-PO-嗎-？"><a href="#PM-可以轉型-PO-嗎-？" class="headerlink" title="PM 可以轉型 PO 嗎 ？"></a>PM 可以轉型 PO 嗎 ？</h4><p>簡單的說，當然可以。<br><strong>你想改變的是你的 Title 還是你的作事方法 ？</strong><br>理想的 PO 應該更觀注在產品上面，我們希望你會產品有想法、有願景甚至有策略，<br>如果沒有策略，只是想作一些嚐試也是可以的。  </p><p>第二點，排序，<strong>「我全都要」是不負責任的說法，是大頭症而且偏離事實的中二病</strong><br>如果團隊也承諾「我全都給」，就要小心整個組織是不是落入「國王的新衣」，集體自我欺騙的困境了<br>Walking Skeleton 是一個非常好用的手法，在探索出你的商業策略之後，<br>要找出關鍵的支柱，儘可能快速的推出你的 MVP ，<br>實際上如果你要你的產品有 Value，你是很難在一個衝刺中完成一個可發佈的產品的<br>(Demo或概念介紹影片是有可能的，如果你也走記者會趨動開發的話…)。  </p><p>我們理想上不要有半成品，或是讓半成品儘可能的少，存在時間儘可能的短，<br>我還蠻推崇 User Story Mapping 在排序上的作法，<br>「二分法」少了它就不行的功能、基礎建設就作，其它就不作。<br>讓 Walking Skeleton 儘早的串通，拿掉所有不必要的功能，儘可能的輕薄。<br>端看你的 DoD，要達成 End to End 的 Walking Skeleton。<br>但是有時候即使你拿掉所有非必要的東西，也需要多個衝刺才能完成 Walking Skeleton，<br>當你完成之後，你的每個開發就可以在這基礎上進行增量開發，而且每次都可以作端到端的完整測試，<br>持續的開發增量，直到滿足 PO 對 MVP 定義，才有 Release 的可能。<br>相同的手法在團隊拆解 Task 也是可行的。</p><p><strong>MVP遠比你的想得大的多</strong>  </p><p>歸納一下重點:</p><ul><li>想清楚產品現在最重要的策略</li><li>由策略 Break Down 出 Product Backlog Items (User Story)</li><li>只有作與不作的優先權</li><li>只觀注要作 PBI 與 DoD</li><li>找到 Walking Skeleton，在一開始儘可能的薄(這個手法適用 PBI 與 Task)</li><li>事實上 MVP 仍然很大，大到你不一定能在一個衝刺中完成</li><li>問兩個問題，什麼讓我們變慢？什麼能讓我們更快？</li><li>增量不等於 Release</li><li>PO 要觀注產品的價值，與市場的變化</li><li>不要 Management 不要 Dispatch，只要排序並約定最上面的最先完成</li><li>進入衝刺後就不要異動排序</li><li>保留插件泳道可以帶來一些彈性，但是也是有代價的，請確保放入泳道的 Task 比衝刺的 PBI 更有價值</li></ul><h2 id="導入"><a href="#導入" class="headerlink" title="導入"></a>導入</h2><p>這幾年 Scurm 或是 Agile 在台灣各地相當盛行，<br>這是個好事，但同時也意味著各種妖魔鬼怪的出現，<br>認証單位的出現，品質低下的 WorkShop 出現，<br>同溫層自 high 喊口號的出現，這些都是一些壞味道，<br>敏捷是很科學的作法， Scurm 的經驗主義也是有其理論基礎。  </p><p>在這之上如果變成直銷或是宗教化的宣傳，<br>我個人認是非常不好的，甚至會成為導入的反動力，<br>我常常在想，滿牆的便利貼與宗教崇拜這樣不是與彊屍道長沒有兩異嗎 ？</p><p>我的建議的導入方法</p><ul><li>先觀察找到瓶頸或 Key Man</li><li>爭取組織關鍵人物的支持，如果有老闆的支持更好</li><li>帶來變化與作法，更勝於帶來新名詞</li><li>一直講一直講，通常講到對方不耐煩才只是開始</li></ul><h2 id="現實的殘酷-與-仍然存在的疑惑"><a href="#現實的殘酷-與-仍然存在的疑惑" class="headerlink" title="現實的殘酷 與 仍然存在的疑惑 ?"></a>現實的殘酷 與 仍然存在的疑惑 ?</h2><p>最後，記錄一些現在遇到不解的問題</p><h3 id="團隊的不穩定"><a href="#團隊的不穩定" class="headerlink" title="團隊的不穩定"></a>團隊的不穩定</h3><p>不論是個人的生涯規劃，或是內部的組織調動，<br>都會讓團隊的成員組成變得不穩定，而基於經驗主義的 Scurm，<br>如果每個衝刺的團隊組成都不一致，會不會帶來太多的變數 ？<br>甚至團隊成員是抱著打工的心態，而 Scrum Master 也當作這些成員是別人家的孩子，<br>而不關心其成長。這樣總體的團隊能成長嗎 ？</p><h3 id="過多的變數"><a href="#過多的變數" class="headerlink" title="過多的變數"></a>過多的變數</h3><p>承上題，在實驗的過程中，我們會希望儘可能的控制變因，<br>但是實務上，包含人員、工作內容（可能過度偏向某個 Skill Set）、假期、Deadline與項目的複雜度/範圍等…<br>都會帶來很大的變因，這樣的估點是否仍然有意義 ？</p><h3 id="規模化"><a href="#規模化" class="headerlink" title="規模化"></a>規模化</h3><p>理想的 Scrum 想達到有效溝通，建議人數要在 5~9 人，實際上整個組織一定會遠超這個人數，<br>雖然現在有 Less 等 solution，但是我仍沒有理解與體會到其帶來的價值，<br>因此仍然有所疑惑。</p><h3 id="跨職能與自組織"><a href="#跨職能與自組織" class="headerlink" title="跨職能與自組織"></a>跨職能與自組織</h3><p>本身產品的覆蓋範圍就很大，團隊人數限制在 5~9 之時，<br>要完成 End to End 變得有些不切實際與困難。<br>一方面現有的產品欠了相當大的<strong>技術債</strong>，而團隊欠了相當大的<strong>學習債</strong>，  團隊成員在開發上已經有點捉襟見肘，還要跨領域的學習，又要深入鑽研某項技能。  </p><p>如何讓團隊認知到清還債務能讓我們變快，並且在工程實踐上達到要求也是需要時間，<br>而成員確在職涯規劃上，2~3年就換個工作，而花了時間培養的戰力瞬間飛滅。  </p><p>更甚是組織內部寧可用便宜的人材，換掉好不容易養成的人才。<br>對此我深感無力，跨職能與自組織最後也是淪為口號。  </p><p><img src="/images/2018/csm/overview.JPG" alt="全貌"></p><p>以上，我仍在觀察、記錄…<br>並且尋找機會，「Change Your Company」。<br><strong>做正確的事，然後等著被炒</strong></p><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;什麼是 Scrum ?&lt;/li&gt;
&lt;li&gt;Scrum 的理想 ?&lt;/li&gt;
&lt;li&gt;Scrum 怎麼導入 ?&lt;/li&gt;
&lt;li&gt;現實的殘酷&lt;/li&gt;
&lt;li&gt;仍然存在的疑惑 ?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;什麼是-Scrum&quot;&gt;&lt;a href=&quot;#什麼
      
    
    </summary>
    
    
      <category term="Scrum" scheme="https://blog.marsen.me/tags/Scrum/"/>
    
      <category term="Agile" scheme="https://blog.marsen.me/tags/Agile/"/>
    
  </entry>
  
  <entry>
    <title>CSM Day2-3 Scrum Master</title>
    <link href="https://blog.marsen.me/2018/12/16/2018/csm/day_2_3/"/>
    <id>https://blog.marsen.me/2018/12/16/2018/csm/day_2_3/</id>
    <published>2018-12-15T18:45:08.000Z</published>
    <updated>2019-06-10T14:43:28.918Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Scrum-Master"><a href="#Scrum-Master" class="headerlink" title="Scrum Master"></a>Scrum Master</h3><p>哪些人適合作 Scrum Master ?<br>常見組織轉型時會直覺的找現有的角色作 Scrum Master ，<br>但是 Scrum Master 是一個 <strong>Couching</strong> 的角色，<br>傳統公司裡面並沒有 <strong>Couching</strong> 的角色，通常都行不通的。  </p><p><img src="/images/2018/csm/day_2/closer_customer.jpg" alt="&#x5F9E; Manager Driven &#x8B8A;&#x6210; Custom Driven"></p><blockquote><p>傳統公司裡面的 Manager ，要麼是 R&amp;D 的 Manager ，要麼是 PMO 的 Manager。通常會有幾個問題  </p><ol><li>R&amp;D 通常由資深RD升上來，但是不善於管理(彼得效應)  </li><li>PMO 會有自已與部門的考績考量，而這不一定能瞄準市場目標  </li><li>通常工作都會由 Manager 分派，而不是由成員主動爭取  </li><li>失敗的時候，總要有人背鍋，那個人就是 Manager (但是實務上常常看到 Manager 丟鍋給成員)<br><del>5. 不太關注成員的成長。</del>(好啦，也許有的有)  </li><li>Manager 要作太多的決策</li></ol></blockquote><h3 id="Scrum-Master-不是-Decision-maker"><a href="#Scrum-Master-不是-Decision-maker" class="headerlink" title="Scrum Master 不是 Decision maker"></a>Scrum Master 不是 Decision maker</h3><p>情境：當 Team Member 無法決定求助 Scrum Master 時。<br>解法：也要看情境，干預或不干預是要付出成本的。<br>你要關心「風險」與「成長」，在沒有風險的情境下 Scrum Master 應該引導團隊自行作決定。<br>問問題是一個好的引導方式，過多的干預會讓團隊無法成長。</p><p>以小孩作比喻</p><table><thead><tr><th align="left">情境</th><th align="left">作法</th></tr></thead><tbody><tr><td align="left">小孩爬桌子（低風險）</td><td align="left">讓團隊試試看，讓團隊學習、成長。</td></tr><tr><td align="left">小孩爬馬路（高風險）</td><td align="left">作出Decision，避免失敗(失敗就沒有下一次)</td></tr><tr><td align="left">別人家的孩子爬桌子（不穩定的團隊）</td><td align="left">防東防西，風險至上(他成不成長干我啥事?)</td></tr></tbody></table><p>如果把時間拉長一點，可以觀察出自已的取捨是否太偏向某一方(風險 or 成長)，  比如說幾個月，如果團隊仍無法自行決定，可能是你( Scrum Master )干預太多了，<br>Scrum Master 每一個決定都會影響到團隊。<br>Scrum Master 應該給自已訂一些目標，來判斷自已的取捨是否合理。</p><p>Ex:</p><ul><li>團隊是否會自行分工</li><li>團隊是否會自行作決定</li><li>團隊是否會蜂擁處理最高優先權的東西</li><li>more…</li></ul><p>更多情況 Scrum Master 不見得能作 Decision。</p><p>Scrum Master 的責任</p><ul><li><p>Coach PO</p><ul><li>消除客戶與開發之間的障礙</li><li>教導 PO 如何透過 Scrum 最有效率達到目標(How to maximize ROI and meet their objectives through Scrum ) </li></ul><p>以下圖來說，Y 軸代表價值，X 軸代表時間。上圖的策略表示產品初期就發佈高價值的增量，<br>隨著時間過去，單位時間能帶來的價值太少時，也許我們就不作了(虛線之後)，因為不符成本。<br>而實務上，可能會更接近下圖，在初期有些基礎建設，這些建設不一定能帶來較高的(客戶)價值，<br>但是可以降低風險，有時候更可能是初期必要的相依項目。這兩種策略沒有好壞，關鍵點仍是要能結合你的產品，<br>與 PO 共同討論出取捨的方向。 User Story Mapping 是一個工具，怎麼樣找到 Walking Skeleton ，<br>怎麼在這個基礎上豐富你的產品，這都是 Scrum Master 的職責。  </p></li></ul><p><img src="/images/2018/csm/day_2/increment_pattern.jpg" alt="&#x5169;&#x7A2E;&#x4E0D;&#x540C;&#x7684;&#x8FED;&#x4EE3;&#x7B56;&#x7565;"></p><ul><li><p>Coach Team</p><ul><li><p>Improving the lives of the development team by facilitating creativity and empowerment　</p></li><li><p>以任何可能的方式提高開發團隊的生產力</p><p>團隊常見的兩個問題，作太少或是作不完。可以嚐試一些工程實踐，但是別忘了工程實踐的目的是讓 Sprint Done。<br>比如說：  </p></li></ul></li></ul><pre><code>&gt; mini-waterfall的流程可能會導致 Item 作不完，原因是 Testing 的角色在最後面才會進來，會有 Items 作不完，  &gt; 提早發現其實是件好事，不論是**全都作不完**、**高優先權的作不完**或是**低優先權的全都作完**都是很好的干預點，  &gt; 只要在 Retrospective 將作不完的東西攤開\(透明\)，分析問題就可以有機會改善&gt; 引入不同的流程、開發方式都會有一個學習與生存的焦慮在裡面。可以透過 Coaching 降低學習焦慮，  &gt; 你要尋找適合的人選與資源，這是 Scrum Master 的職責。  &gt; 有的團隊的抗拒會比較強，Scrum Master 要找好時機進行，例如：Sprint 失敗時。  </code></pre><ul><li>Improving the engineering practices and tools so each increment of functionality is potentially shippiable。   </li></ul><pre><code>&gt; 實例化需求\(SBE\)、驗收趨動開發\(ATDD\)  &gt; 實踐上怎麼作呢 ?  &gt; 在 Sprint 中的 Item 應該都有驗收標準\( Acceptance Criteria\)，  &gt; 這都應該在 Planning 或 Refinement 的階段被列出來，更進一步應該變成 test case。  &gt; Example :  &gt; Sprint裡有 Item1、Item2、Item3、Item4  &gt;&gt; Item1 應該會有 test case 1.1，test case 1.2...，Item2 應該會有 test case 1.1，test case 1.2...，  &gt; 正常一個 Item 應該在兩三天完成這個功能。  &gt; 這時候就可以測試  test case，假設 test case 4.3 作不完就不作了，這樣就不會留半成品。&gt;&gt; 再透過持續整合\(CI\)的實踐，避免後面的改動，影響到前面。&gt;&gt; 實務上，一種是團隊很喜歡作這類的實踐與改變，另一種更多  &gt; 「團隊作不到 Done，在 Retrospective 階段來趨動改善的過程」，為了解決問題。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Question:</span><br><span class="line">1. Item1、Item2、Item3 會改到同一個模塊，所以 RD 會習慣同時開發(F2E反應)</span><br><span class="line">2. 沒有持續集成(CI)，或是 CI 不包含自動化測試怎麼辦？</span><br><span class="line">    - 如何快速寫出一個自動化測試試？</span><br><span class="line">**</span><br></pre></td></tr></table></figure><h3 id="問一個問題，「什麼讓我們慢下來？，什麼讓我們不能更快？」"><a href="#問一個問題，「什麼讓我們慢下來？，什麼讓我們不能更快？」" class="headerlink" title="問一個問題，「什麼讓我們慢下來？，什麼讓我們不能更快？」"></a>問一個問題，<strong>「什麼讓我們慢下來</strong>？，<strong>什麼讓我們不能更快？」</strong></h3><p>通常第一線的人員(Developer)不覺得慢是一個問題，甚至不會在 Retrospective 提出。Scrum Master 的職責是找到這個問題。</p><p>小結：</p><ul><li>Scrum Master 要讓團隊與 PO 深入理解 Scrum </li><li>Scrum Master 就像是牧羊犬要保護羊群(團隊)，因為會有狼(插件or something…，或是羊群裡有狼)</li><li>Scrum Master 不作決策，更多是關心決策的過程甚於決策本身</li><li>具有生產力的團隊就是 Scrum Master 的產出</li><li>Scrum Master 要發揮影響力(知易行難，怎麼作？)</li></ul><h3 id="情境題"><a href="#情境題" class="headerlink" title="情境題"></a>情境題</h3><p>避免爆雷，不描述課堂上的情境，但是將一些原則列下:</p><ol><li>很多人第一時間會找 Scrum Master 問問題。<ul><li>這是好事  Scrum Master 要發揮影響力</li><li>Scrum Master 可以籍些說明 Scrum 在作什麼，團隊是怎麼運作的。</li><li>Scrum Master 不作決策更關注過程。</li><li>不要急著解決問題。</li></ul></li><li>Product Owner 要基於 Product Value 作排序<ul><li>如果要最大化價值，一個產品就一個 Product Backlog，不管是多少個 Team。</li><li>一個插件有幾種可能<ul><li>放進下面幾個 Sprint Backlog。</li><li>放進 Product Backlog。</li><li>很異常的情況，才會終止 Sprint。</li></ul></li><li>Scrum Master 要關注 Root Cause </li></ul></li><li>保持團隊與 Product Owner 的連結<ul><li>有時候 Product Owner 也身不由已。</li><li>如果 Product Owner 不在決策圈或未被授權，要了解背後的原因。</li><li>如果 Product Owner 太忙，想辦法減輕他的壓力。</li><li>如果 Product Owner 有別的角色(Sales、Boss…)，找個適合的人作 Product Owner。</li><li>改變文化 改變組織 改變作法。</li></ul></li><li>讓 Product Backlog 作為團隊工作項目唯一的入口</li><li>在不被 fire 的情況下，對組織帶來改變與價值！要有勇氣。</li><li>不要讓團隊與 Product Owner 成為甲方乙方。</li><li>讓團隊自已挑選工作，而不是分派工作。</li><li>觀注事實。<ul><li>團隊的 Velocity </li><li>上個 Sprint 完成的點數</li><li>誠實面對失敗( _柯語錄:面對挫折打擊不是最困難的；最困難的是面對各種挫折打擊，卻沒有失去對人世的熱情_)。</li><li>思考著如何讓 Product 的 Impact 發生<ul><li>昧著事實去滿足時程與範圍，可能會為此喪失品質與生產力(欠債…)。</li><li>找到正道，但是也許會更花時間。</li><li>Change Your Company。</li></ul></li><li>觀注 Product  的成功勝於作了多少工作。</li><li>盲人摸象的故事，每個人都對，也都不對。</li></ul></li></ol><h3 id="Part-time-or-Full-time"><a href="#Part-time-or-Full-time" class="headerlink" title="Part-time or Full-time"></a>Part-time or Full-time</h3><p>Scrum Master 觀注改進，同時兼任多個角色時，容易陷入可量化產出的角色之中。<br>要想辦法讓 Scrum Master 的工作可視化，不然容易淪為開會召集人或訂訂便當與飲料的角色。<br>實踐：</p><ul><li>使用 Scrum Master Check List <a href="http://scrummasterchecklist.org/" target="_blank" rel="noopener">http://scrummasterchecklist.org/</a> 。</li><li>建立 Scrum Master 的改善 Impact Backlog，並且設定優先級。</li><li>按優先級逐步的改善。</li><li>尋找一組 Scrum Master 彼此討論與評量，讓這個流程形成一個循環。</li><li>Less 的解決方式是 Full-time Scrum Master 兼任多個 Team。</li></ul><p>相同的作法，對不同的 Team 不一定有用， Scrum Master 如果能接觸不同的團隊是好的。或是從其它 Scrum Master 汲取經驗。</p><h3 id="呂毅老師的實務分享"><a href="#呂毅老師的實務分享" class="headerlink" title="呂毅老師的實務分享"></a>呂毅老師的實務分享</h3><p>常見一個問題，Product Owner 常常單向對 Team 輸入訊息，導致最後的結果與 Product Owner 的想法有落差。</p><p>一些壞味道</p><ul><li>Planning 的時候大家「帶電腦」作自已的事或是在「滑手機」。</li><li>開會人數太多，部份人在討論時，其它人放空。</li></ul><p>Solution：</p><ul><li>讓成員不要帶電腦，收走手機</li><li>Product Owner 講完換 Team 講</li><li>測試</li><li>拆散小組至2-3人<ul><li>有點類似 Lean Coffee 的作法，讓團隊拆成小組討論 。</li><li>PO 輪流在小組之間被問問題。</li><li>如果等不到 PO 可以先寫在便利貼貼到白板上。</li><li>設定 Time Box ，時間到請 PO 回答問題。</li></ul></li></ul><h3 id="Ending"><a href="#Ending" class="headerlink" title="Ending"></a>Ending</h3><p>不要反射性的去解決問題，讓子彈飛一會兒…。</p><ul><li>讓問題變透明，讓團隊看見問題</li><li>不急著干預，試著讓團隊自行解決問題 </li><li>讓 Team 與 PO 直接交流，不要成為 PO 與 Team 的傳話筒。</li><li>要保持「意識」，不要條件反射去干預，要克服這個心魔。</li></ul><p>Real Team </p><ul><li>所有人的目標是一致的，而不是臨時組成的一群人。</li><li>俱備 End to End 的完整。</li><li>有限的人數，Scrum 建議 5~9 人。</li><li>Mutual accountability </li><li>Agreed way of working</li></ul><p><img src="/images/2018/csm/day_2/authority_matrix.jpg" alt="Scrum Team &#x662F;&#x81EA;&#x7D44;&#x7E54;&#x7684;&#x5718;&#x968A;"></p><p>一個好的 Scrum Master 的產品是 Well-Working Team， 這需要時間(以年計算…)。  如何打造一個 Team ，這比 Scrum Maser 有更多的討論，但是實務上在成為 Scrum Master 時，大多數人打造 Team 的基本功是缺乏的(彼得原理？)，這需要更多的學習…</p><h5 id="參考："><a href="#參考：" class="headerlink" title="參考："></a>參考：</h5><ul><li><a href="https://blog.marsen.me/2018/11/18/2018/csm/91app_scrum_masters_growth_camp/">[N社筆記] 敏捷路上跌倒站起來 2018/11/1</a></li><li><a href="https://blog.marsen.me/2018/07/15/books/book_the_great_scurm_master_ch1/">[閱讀筆記] The Great Scrum Master 第一章</a></li><li><a href="https://stayrelevant.globant.com/en/the-role-of-the-scrum-master-part-i/" target="_blank" rel="noopener">The role of the Scrum Master – Part I</a></li></ul><h5 id="心得小結"><a href="#心得小結" class="headerlink" title="心得小結:"></a>心得小結:</h5><ol><li>還好上課有記錄，課程很有料，過了一個月想法仍源源不絕的出來。</li><li>你可以繼續 Scurm 自助餐，但是那個不是 Scurm 不是守破離。</li><li>一邊觀察 N 社團隊的運作一邊寫筆記，Change My Company。</li><li>Gitbook 也很方便的筆記工具，寫完後同步到 Github 就能拿到九成完美的 markdown 。</li><li>Scurm 給團隊更多職責，所以團隊要更強才行。</li><li>Corss Learning 不僅僅是溝通層面而已，而是為了真正的 End to End。你的 End 到底到哪裡 ？如何 DoD？</li><li>所有聲音都是真的，不要急著說服別人，記住盲人摸象沒有一個瞎子說謊。</li><li>第二步我在哪裡？第一步看見全貌、先要透明，透明的意思是有共識，再此之上是溝通與信任…不要把人僅僅當作 Resource。</li><li>團隊裡面不要有小團隊/人數控制在5~9/保持團隊穩定/Real Team，好難…實務上怎麼作 ？</li><li>Walking Skeleton 可以貫通在 PBI/User Story/Task 之間，要盡可能的薄但暢通，再此之上才有增量。</li><li>可交付的增量不是Release，也不是MVP。MVP比你想像的還大。</li><li>Sprint 的觀念在蕃茄鐘或GTD也有反覆出現過，在 Timebox 中反覆實驗，尋求改善。</li></ol><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Scrum-Master&quot;&gt;&lt;a href=&quot;#Scrum-Master&quot; class=&quot;headerlink&quot; title=&quot;Scrum Master&quot;&gt;&lt;/a&gt;Scrum Master&lt;/h3&gt;&lt;p&gt;哪些人適合作 Scrum Master ?&lt;br&gt;常見組織轉
      
    
    </summary>
    
    
      <category term="Scrum" scheme="https://blog.marsen.me/tags/Scrum/"/>
    
      <category term="Agile" scheme="https://blog.marsen.me/tags/Agile/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記] Git 批次刪除分支</title>
    <link href="https://blog.marsen.me/2018/12/12/2018/git_delete_remote_branch/"/>
    <id>https://blog.marsen.me/2018/12/12/2018/git_delete_remote_branch/</id>
    <published>2018-12-12T10:36:31.000Z</published>
    <updated>2019-06-10T14:43:28.923Z</updated>
    
    <content type="html"><![CDATA[<h2 id="要知道的事"><a href="#要知道的事" class="headerlink" title="要知道的事"></a>要知道的事</h2><ul><li>OS : Windows 10</li></ul><h2 id="易學難精的-Git-與-Flow"><a href="#易學難精的-Git-與-Flow" class="headerlink" title="易學難精的 Git 與 Flow"></a>易學難精的 Git 與 Flow</h2><p>在使用 Git 時，分支的策略往往比 Git 本身更複雜。<br>Git 在建立分支是成本非常低的一件事情，<br>也因此很容易開出一堆分支，<br>這與團隊規模和PR的流程有關，可以參考文末的分支策略聯結。<br>因為 Git 開分支實在太便宜了，<br>我的 Remote Repo 不知不覺中竟然有了破千的分支。<br>大量的分支意味著大量的需求，其實是好事，<br>但是大部份的分支都已經功成身該退了，<br>當我使用一些 GUI 工具，為了顯示這些分支時，<br>這樣的數量反而成了阻礙。</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="大量刪除遠端分支的方法"><a href="#大量刪除遠端分支的方法" class="headerlink" title="大量刪除遠端分支的方法"></a>大量刪除遠端分支的方法</h3><p>Step1. 可以透過正規表示式查詢大量分支。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r | awk -Forigin/ '/\/feature\/BTS14/&#123;print $2&#125;'</span><br></pre></td></tr></table></figure><p>Step2. 同上的語法，但是後面　pipeline 串接 xargs push 到指定的遠端(這個例子是 origin)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r | awk -Forigin/ &apos;/\/feature\/BTS14/&#123;print $2&#125;&apos;| xargs -I &#123;&#125; git push origin :&#123;&#125;</span><br></pre></td></tr></table></figure><p>特別看一下 <code>{} git push origin :{}</code> ，我們實際上是透過 push 語法刪除分支的。</p><h2 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h2><h4 id="2019-05-09"><a href="#2019-05-09" class="headerlink" title="2019/05/09"></a>2019/05/09</h4><h3 id="大量刪除本地分支的方法"><a href="#大量刪除本地分支的方法" class="headerlink" title="大量刪除本地分支的方法"></a>大量刪除本地分支的方法</h3><p>Step1. 可以透過正規表示式查詢大量分支。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch | grep "pattern"</span><br></pre></td></tr></table></figure><p>Step2. 同上的語法，但是後面　pipeline 串接 xargs push 到指定的遠端(這個例子是 origin)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch | grep "pattern" | xargs git branch -D</span><br></pre></td></tr></table></figure><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2012/07/git.html" target="_blank" rel="noopener">Git分支管理策略 - 阮一峰的网络日志</a></li><li><a href="http://nedwu13.blogspot.com/2014/01/tbd-what-is-trunk-based-development.html" target="_blank" rel="noopener">筆記：TBD是三小?—What is Trunk Based Development?</a><ul><li>主幹開發主幹發佈/主幹開發分支發佈/分支開發主幹發佈<br>(fin)</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;要知道的事&quot;&gt;&lt;a href=&quot;#要知道的事&quot; class=&quot;headerlink&quot; title=&quot;要知道的事&quot;&gt;&lt;/a&gt;要知道的事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;OS : Windows 10&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;易學難精的-Git-與-Flow&quot;
      
    
    </summary>
    
    
      <category term="Git" scheme="https://blog.marsen.me/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>[N社筆記]敏捷路上跌倒站起來 2018/11 月</title>
    <link href="https://blog.marsen.me/2018/12/04/2018/csm/n_company_log_201811/"/>
    <id>https://blog.marsen.me/2018/12/04/2018/csm/n_company_log_201811/</id>
    <published>2018-12-04T03:14:05.000Z</published>
    <updated>2019-06-10T14:43:28.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2018-11-30"><a href="#2018-11-30" class="headerlink" title="2018/11/30"></a>2018/11/30</h2><p>Planning 有沒有優先討論重點項目？</p><ol><li>最先討論上個 Sprint 的 UnDone </li><li>順序等於優先權嗎？</li><li>工作是事先 Assign 好，而不是</li><li>兩個 Team 的 Backlog 放在一起，結果順序是 <ul><li>A Team (B Team 發呆)</li><li>B Team (A Team 發呆)</li></ul></li></ol><p>PO 只作明顯短期可見效果但低價的項目(沒有 Focos 價值)，如何引導 ?</p><h3 id="Scrum-Master-消失-，Planning-沒有-Couch-PO"><a href="#Scrum-Master-消失-，Planning-沒有-Couch-PO" class="headerlink" title="Scrum Master 消失 ，Planning 沒有 Couch PO"></a>Scrum Master 消失 ，Planning 沒有 Couch PO</h3><ul><li>Scrum Master 兼任主管</li><li>Scrum Master 兼任開發人員</li></ul><h3 id="KA-後台要中文-前台要英文"><a href="#KA-後台要中文-前台要英文" class="headerlink" title="KA 後台要中文 / 前台要英文"></a>KA 後台要中文 / 前台要英文</h3><ul><li>要問 Why：KA 面對的客戶也以中文為大宗，為什麼要英文？</li></ul><h2 id="2018-11-28"><a href="#2018-11-28" class="headerlink" title="2018/11/28"></a>2018/11/28</h2><blockquote><p>Demo 會議是由「 PO 介紹給 stackholder ?」<br>還是「 Team 介紹給 PO ,有 stackholder 最好。」<br>如果可以看錄影就當作 Demo 過了，那還需要 Demo 嗎 ? </p></blockquote><blockquote><p>三個 Team 各自有各自優先級最高的項目，這樣會不會陷入局部優化，過早進入細節 ?</p></blockquote><ul><li>無法集中火力處理優先度最高的需求</li></ul><h3 id="最大的-PO-沒進來"><a href="#最大的-PO-沒進來" class="headerlink" title="最大的 PO 沒進來"></a>最大的 PO 沒進來</h3><p>會後主管和小 PO 們再討論，有好有壞？<br>Scrum 怎麼說?</p><ul><li>主管應該不要進來</li><li>PO 最好能夠進來</li><li>不要在團隊裡形成小圈圈</li></ul><h2 id="2018-11-26"><a href="#2018-11-26" class="headerlink" title="2018/11/26"></a>2018/11/26</h2><h3 id="無限站立會議之卷"><a href="#無限站立會議之卷" class="headerlink" title="無限站立會議之卷"></a>無限<del>站立</del>會議之卷</h3><p>10:10 SRG 站立<br>10:20 A Team 站立<br>10:30 B Team 站立<br>11:30 RD1 周會</p><h2 id="2018-11-23"><a href="#2018-11-23" class="headerlink" title="2018/11/23"></a>2018/11/23</h2><ul><li><p>你需要一個旁觀者，不然只是自 high</p><ul><li>觀查群眾的反應</li><li>客觀點出講者的優缺點</li><li>再好的內容沒有人聽也是枉然</li></ul></li><li><p>成為 SM 之前要小心，不要急著成為 SM (特別是你是兼職的 SM 時)</p><blockquote><p>小心過早聚焦到細節，例如:安排會議/主持/作簡報<br>  不然你會變成「借會議室的人」、「照表操課的 Scrum Master」</p></blockquote></li><li><p>用誇張口吻重複他說的理想，你就會知道他是在說理想還是說幹話</p></li></ul><h2 id="2018-11-22"><a href="#2018-11-22" class="headerlink" title="2018/11/22"></a>2018/11/22</h2><p>情境:<br>團隊開發會與其它團隊開發相依或衝突，導致 Release 的品質有所缺陷。</p><ul><li><p>用更多的會議/文件/Check List作控管，有沒有辦法從 root cause 解決問題 ?</p></li><li><p>主管為什麼會想看「沒意義」又「不真實」的東西 ?<br><img src="https://i.imgur.com/xSq4oHY.jpg" alt></p><h2 id="2018-11-21"><a href="#2018-11-21" class="headerlink" title="2018/11/21"></a>2018/11/21</h2></li><li><p>口頭敘述</p></li></ul><h2 id="2018-11-19"><a href="#2018-11-19" class="headerlink" title="2018/11/19"></a>2018/11/19</h2><ul><li>Scrum 不要拿 A 會議的時間作 B 會議的事<ul><li>觀注目的</li><li>作該作的事</li><li></li></ul></li></ul><h3 id="有關進步"><a href="#有關進步" class="headerlink" title="有關進步"></a>有關進步</h3><p><a href="https://www.ted.com/talks/david_epstein_are_athletes_really_getting_faster_better_stronger/transcript?language=zh-tw" target="_blank" rel="noopener">運動員是否真的變得更快、更好、更強 ?</a></p><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2018-11-30&quot;&gt;&lt;a href=&quot;#2018-11-30&quot; class=&quot;headerlink&quot; title=&quot;2018/11/30&quot;&gt;&lt;/a&gt;2018/11/30&lt;/h2&gt;&lt;p&gt;Planning 有沒有優先討論重點項目？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最先討
      
    
    </summary>
    
    
      <category term="Scrum" scheme="https://blog.marsen.me/tags/Scrum/"/>
    
      <category term="Agile" scheme="https://blog.marsen.me/tags/Agile/"/>
    
  </entry>
  
  <entry>
    <title>如何讓 windows 也有美美命令提示視窗</title>
    <link href="https://blog.marsen.me/2018/11/25/2018/colorfull_cmder/"/>
    <id>https://blog.marsen.me/2018/11/25/2018/colorfull_cmder/</id>
    <published>2018-11-25T09:58:59.000Z</published>
    <updated>2019-06-10T14:43:28.911Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p><img src="/images/2018/colorfull_cmder/result.jpg" alt="就是要美美命令提示視窗"><br>常常在一些社群看到，大神都超會下 command，<br>開始學習使用各種 command 之後，才發現那個美美的 terminal 不只是華麗而已，<br>實際上也可以加速閱讀，而且潮指數也是怒加一波(畫錯重點)，<br>當然要研究一下如何讓自已擁有一個賞心悅目的 commander 囉</p><h2 id="作法"><a href="#作法" class="headerlink" title="作法"></a>作法</h2><p>使用 <a href="http://cmder.net/" target="_blank" rel="noopener">Cmder</a> ， 這是一個 Windows 的開發人員常用的 terminal 介面，<br>他可以執行一般的 CMD、Bash 與 PowerShell ，別想得太複雜，就是一個命令提示視窗。  </p><h3 id="安裝字型-on-Windows-10"><a href="#安裝字型-on-Windows-10" class="headerlink" title="安裝字型 on Windows 10"></a>安裝字型 on Windows 10</h3><ol><li>下載 <a href="https://github.com/powerline/fonts" target="_blank" rel="noopener">powerline</a>，選擇 Clone or download &gt; Download ZIP</li><li>解壓縮後，選擇使用 AnonymousPro 字型(主要是要那些git icon的圖案，如果別的字型有 也可以使用)</li><li>控制台&gt;字型 把 ttf 拖進去安裝</li></ol><h3 id="設定-Cmder"><a href="#設定-Cmder" class="headerlink" title="設定 Cmder"></a>設定 Cmder</h3><ol><li>Win + Alt + P 開啟設定畫面</li><li>Cmder &gt; Settings &gt; General &gt; Fonts  &gt; 下拉選單選 Anonymice PowerlineCmder<br><img src="/images/2018/colorfull_cmder/settings.jpg" alt></li></ol><h3 id="使用-lua-Config"><a href="#使用-lua-Config" class="headerlink" title="使用 lua Config"></a>使用 lua Config</h3><ol><li>下載<a href="https://github.com/AmrEldib/cmder-powerline-prompt" target="_blank" rel="noopener">cmder-powerline-prompt</a>，選擇 Clone or download &gt; Download ZIP</li><li>開啟 Cmder 安裝檔所在位置，找到 <code>Config</code> 資料夾  </li><li>將下載的所有 *.lua 檔放入 <code>Config</code> 資料夾  </li></ol><p>最後重啟 Cmder 就可以有一個美美的命令提示視窗了。<br><a href="https://www.lua.org/" target="_blank" rel="noopener">lua</a> 也是一個程式語言，你大可開啟文字編輯器，看一下裡面作了什麼。  </p><h2 id="2018-12-02-補充"><a href="#2018-12-02-補充" class="headerlink" title="2018/12/02 補充"></a>2018/12/02 補充</h2><p>追加讓 PowerShell 在 cmder 裡面也美美的方法</p><h3 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h3><ol><li>下載<a href="https://github.com/AmrEldib/cmder-powershell-powerline-prompt" target="_blank" rel="noopener">cmder-powershell-powerlin-prompt</a>，選擇 Clone or download &gt; Download ZIP</li><li>解壓縮 ZIP 檔</li><li>開啟 Cmder 所在的資料夾，如下圖 &gt; 開啟 config 資料夾<br><img src="/images/2018/colorfull_cmder/cmder_folder.jpg" alt></li><li>將壓縮檔內的 <code>user_profile.ps1</code>，取代 config 內的 <code>user_profile.ps1</code></li><li>將壓縮檔內的 <code>profile.d</code> 資料內的所有檔案，全數貼到 config 內的 <code>profile.d</code> 資料夾內，如果不存在就建立一個。</li><li>開啟 config\profile.d 資料夾，重新命名 goToFolder.config.example 為 goToFolder.config <ul><li>這個檔案內會設定一些目錄與 alias 。</li><li>使用方法，在使用 cmder 開啟 powershell 的情況下，輸入 g + <code>alias</code> </li><li>比如說在 goToFolder.config 中，設定一組 <code>m, C:\User\Marsen</code></li><li>在 cmder 輸入 <code>g m</code> 就會自動切到 <code>C:\User\Marsen</code> 的路徑底下</li></ul></li><li>還有很多 Alias 請自行研究。</li><li>重啟 cmder 後就會載入新的設定，變成美美的 powershell 了</li></ol><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li>整篇都是參考<a href="https://github.com/AmrEldib/cmder-powerline-prompt" target="_blank" rel="noopener">cmder-powerline-prompt</a>的作法，原始 Repo 可能隨時會更新異動，不保証有效</li><li><a href="https://github.com/AmrEldib/cmder-powershell-powerline-prompt" target="_blank" rel="noopener">cmder-powershell-powerlin-prompt</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/2018/colorfull_cmder/result.jpg&quot; alt=&quot;就是要美美命令提示視窗&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[實作筆記]用 Command Line 取得資料夾內包含特定檔案的子資料夾</title>
    <link href="https://blog.marsen.me/2018/11/23/2018/powershell_found_subfolde_by_files_in_folder/"/>
    <id>https://blog.marsen.me/2018/11/23/2018/powershell_found_subfolde_by_files_in_folder/</id>
    <published>2018-11-23T05:43:00.000Z</published>
    <updated>2019-06-10T14:43:28.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="情境"><a href="#情境" class="headerlink" title="情境"></a>情境</h2><ul><li>OS : Windows 10</li></ul><p>在一個巨型的 Git Repo 當中，底下依專案分了許多專案資料夾，<br>參考下圖。<br><img src="https://i.imgur.com/IabNBFa.jpg" alt="擁有多個專案的Repo"></p><p>而今天發生了一件事情，我需要更新某幾個子專案的 POCO 的 .tt 檔，<br>這裡不說明 POCO 是什麼；簡單的說，有的專案會有 .tt 檔，<br>有的專案會沒有，而每個專案的資料夾結構又不一定相同，<br>所以要找出這些 .tt 是有點麻煩的，另外我的目標並不是 .tt 檔，<br>而是所在的專案，再用 IDE 開啟進行修改，<br>為此我需要列出<strong>專案資料夾</strong>  </p><h2 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h2><p>用 Command Line 取得Repo資料夾內包含.tt檔案的專案資料夾名稱  </p><h2 id="作法"><a href="#作法" class="headerlink" title="作法"></a>作法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\Repo\Taiwan\******.******.Repofolder</span><br><span class="line">λ Get-ChildItem -Path .\ -Filter *.tt -Recurse -File -Name | ForEach-Object &#123; $_.Split('\')[0] &#125; | Group &#123;$_&#125; | select name</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Name  </span><br><span class="line">----  </span><br><span class="line">FacebookShop  </span><br><span class="line">LineOrderFinish  </span><br><span class="line">LineOrderNotify  </span><br><span class="line">Mail  </span><br><span class="line">NMQMonitor  </span><br><span class="line">OrderMonitor  </span><br><span class="line">SyncImageToOthers</span><br></pre></td></tr></table></figure><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>總覺得寫得有點又臭又長，希望有更好的作法可以提供給我，<br>不限於 <code>powershell</code> 就算是 Linux 的語法也可以讓我參考一下。</p><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;情境&quot;&gt;&lt;a href=&quot;#情境&quot; class=&quot;headerlink&quot; title=&quot;情境&quot;&gt;&lt;/a&gt;情境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;OS : Windows 10&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在一個巨型的 Git Repo 當中，底下依專案分了許多專案資料夾，
      
    
    </summary>
    
    
      <category term="powershell" scheme="https://blog.marsen.me/tags/powershell/"/>
    
  </entry>
  
</feed>
