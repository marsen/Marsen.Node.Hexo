<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Marsen</title>
  <icon>https://www.gravatar.com/avatar/be6152866ede00bca9d8f92aa352c938</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.marsen.me/"/>
  <updated>2018-06-02T13:23:12.724Z</updated>
  <id>http://blog.marsen.me/</id>
  
  <author>
    <name>Marsen L.</name>
    <email>thisismysoul@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[活動筆記]有關海外工作的大小事</title>
    <link href="http://blog.marsen.me/2018/06/02/2018/mit_job_event_log/"/>
    <id>http://blog.marsen.me/2018/06/02/2018/mit_job_event_log/</id>
    <published>2018-06-02T12:55:44.000Z</published>
    <updated>2018-06-02T13:23:12.724Z</updated>
    
    <content type="html"><![CDATA[<h2 id="隨手記"><a href="#隨手記" class="headerlink" title="隨手記"></a>隨手記</h2><h3 id="讓企業買你的專業與合作能力-而不是買你的時間"><a href="#讓企業買你的專業與合作能力-而不是買你的時間" class="headerlink" title="讓企業買你的專業與合作能力;而不是買你的時間"></a>讓企業買你的專業與合作能力;而不是買你的時間</h3><h3 id="有關薪水"><a href="#有關薪水" class="headerlink" title="有關薪水"></a>有關薪水</h3><p>在<strong>台灣通常最後才談薪水</strong> , 在海外可以先提薪水<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在台灣也要先提啦 , 講那麼多最後薪水談不攏只是浪費時間</span><br></pre></td></tr></table></figure></p><p><strong>薪水是少數客觀的指標</strong> , 所以怎麼談很重要.<br>海外工作怎麼談薪水 ? 請考慮以下幾點:</p><ul><li>家庭移居(relocation)</li><li>津貼(allowance)</li><li>稅</li><li>健康保險(healthcare insurance)  </li></ul><p>而在海外工作的技能最重要的是語言與專業,<br>目前<strong>軟體工程</strong>最熱門,<strong>英文</strong>很基本<br>會<strong>中文</strong>其實也沒什麼.<br>另外注意簽証通常有最低薪保障,<br>在台灣年薪 250 以上才是獵頭的目標,<br>在選擇方面,建議考慮 <strong>個人成長 &gt; 公司賺不賺錢</strong><br>小公司或新創公司可能沒有很好的薪福;<br>可能有以下幾種選擇:  </p><ul><li>分紅</li><li>公司股票</li><li>選擇權</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">有好有壞,要自已拿捏;  </span><br><span class="line">如果不是核心骨幹的話,拿到錢最重要  </span><br><span class="line">要不然很容易被大股東透過一些手段稀釋股權  </span><br><span class="line">有選擇當然更好,但是往往會變得更複雜</span><br></pre></td></tr></table></figure><p>薪資不應與前公司掛勾,你可以選擇不透露你的薪資<br>薪資保密,應該是指公司要替你保密,<br>你可以選擇讓誰知道,而非限制自已不得透露給任何人  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">台灣公司很常對內搞薪資保密,</span><br><span class="line">甚至視為禁語, 只能說弊大利</span><br><span class="line">徒生猜疑 惹人聯想是否不同工不同酬 .</span><br></pre></td></tr></table></figure><p>另外公司常用競業條款作一些轉職的限制,<br>為了自保應該有<strong>但書與對價關係</strong> .</p><h3 id="國際狀況"><a href="#國際狀況" class="headerlink" title="國際狀況"></a>國際狀況</h3><p>台灣青年的評價<strong>算肯吃苦,但是要求快速得到回報</strong><br>目前缺工的鄰近國家:中國、菲律賓、日本,<br>英/美/歐/澳算相對困難,瑞典有一些機會,<br>新加坡的所得稅很低.</p><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;隨手記&quot;&gt;&lt;a href=&quot;#隨手記&quot; class=&quot;headerlink&quot; title=&quot;隨手記&quot;&gt;&lt;/a&gt;隨手記&lt;/h2&gt;&lt;h3 id=&quot;讓企業買你的專業與合作能力-而不是買你的時間&quot;&gt;&lt;a href=&quot;#讓企業買你的專業與合作能力-而不是買你的時間&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[閱讀筆記]穀倉效應 </title>
    <link href="http://blog.marsen.me/2018/05/29/books/the_silo_effect_7/"/>
    <id>http://blog.marsen.me/2018/05/29/books/the_silo_effect_7/</id>
    <published>2018-05-28T17:23:10.000Z</published>
    <updated>2018-06-02T11:50:39.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第七章-取下鏡片-醫生如何避免經濟專家的錯誤"><a href="#第七章-取下鏡片-醫生如何避免經濟專家的錯誤" class="headerlink" title="第七章 取下鏡片: 醫生如何避免經濟專家的錯誤"></a>第七章 取下鏡片: 醫生如何避免經濟專家的錯誤</h2><div style="max-width:854px"><div style="position:relative;height:0;padding-bottom:56.25%"><iframe src="https://embed.ted.com/talks/lang/zh-tw/ursus_wehrli_tidies_up_art" width="854" height="480" style="position:absolute;left:0;top:0;width:100%;height:100%" frameborder="0" scrolling="no" allowfullscreen></iframe></div></div><h3 id="克里夫蘭臨床醫學中心的歷史"><a href="#克里夫蘭臨床醫學中心的歷史" class="headerlink" title="克里夫蘭臨床醫學中心的歷史"></a>克里夫蘭臨床醫學中心的歷史</h3><p><em>1880 AD</em><br>草創時期隨克里夫蘭城市發展落成。</p><p>一次大戰後,參考自軍醫的「小組合作模式」,<br>改變醫院的運作模式。<br><em>—不同的背景人才組成的醫療小組—</em><br>固定薪資,分享紅利</p><p>二次大戰後,克里夫蘭城市開始走下坡,<br>但靠著創意和明星醫師成功擴張醫院。</p><p>二十世紀末,員工成長至4萬人,穀倉與官僚問題漸增,</p><p>透過<strong>空橋/電子系統/地道系統/機器人</strong>等設施…,<br>致力追求無縫連接。</p><p><strong>隱憂: 技術與組織變得愈來愈複雜,反而是一種穀倉</strong></p><h3 id="醫生的故事"><a href="#醫生的故事" class="headerlink" title="醫生的故事"></a>醫生的故事</h3><p>寇斯巴洛夫有閱讀障礙,所以成績不好;</p><p>用圖像式記憶法才完成學業;</p><p>但是在實務層面卻大放異彩;<br>當上了克里夫蘭臨床醫學中心執行長。</p><p>越戰後的反思,為什麼醫界不是採取團隊工作?</p><p>所以加入了克里夫蘭臨床醫學中心。</p><p>結合縫紉發展改良了心臟手術。<br><strong>創新就是要挑戰既有界線</strong></p><h3 id="改革"><a href="#改革" class="headerlink" title="改革"></a>改革</h3><ol><li>拿掉醫師與護士的界線<br><code>(Front-Backend?DevOps?Sales/BD/PD/RD?)</code></li></ol><p>以患者與疾病為核心;<br>不以醫界既有科別區分,成立新部門</p><p>比如說,脊椎病症:<br>神經內科/心理科/生醫影像科/整型外科 more …<br><del><code>→ 大馬: rd1/rd2/.../Rd5/app/f2e/ait/PD</code></del></p><p>特殊規劃小組,制定改革時間表<br><del><code>One Team ? SRG ?</code></del></p><ol><li><p>外部體系(保險公司/醫療協會)仍是專門分科,<br>所以又成立影子部門</p></li><li><p>改善空間,不只是功能性,鼓勵逗留與聊天</p></li></ol><p>結果</p><ol><li>醫療浪費減少,成本更低,「把照顧病患而非官僚體制放第一」</li><li>每位醫生診斷時會想到不一只種界定分類方式</li><li>改善空間帶來的互動不亞於會議</li><li>急救中心轉診速度提昇</li></ol><h3 id="原本的優勢"><a href="#原本的優勢" class="headerlink" title="原本的優勢"></a>原本的優勢</h3><ul><li>固定薪資制,醫生不會為了績效多作治療</li><li>原本就有的團隊合作文化</li></ul><h3 id="小結與反思"><a href="#小結與反思" class="headerlink" title="小結與反思"></a>小結與反思</h3><ol><li>反思現有的分類,甚至加以顛覆</li><li>專業分工是組織變得複雜的龐大後的必然結果</li><li>創新就是要挑戰既有界線</li><li>以患者與疾病為核心 ?<br><code>→ 我們以○○為核心?股東、客戶、產品、品質、速度、員工</code></li><li>我們作的不對,我們必須改變</li><li>改革會一直遇到問題,我們有解決問題的機制嗎 ?</li><li>克里夫蘭臨床醫學中心是從上到下的改革,我們的組織是嗎 ?</li></ol><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第七章-取下鏡片-醫生如何避免經濟專家的錯誤&quot;&gt;&lt;a href=&quot;#第七章-取下鏡片-醫生如何避免經濟專家的錯誤&quot; class=&quot;headerlink&quot; title=&quot;第七章 取下鏡片: 醫生如何避免經濟專家的錯誤&quot;&gt;&lt;/a&gt;第七章 取下鏡片: 醫生如何避免經濟專
      
    
    </summary>
    
    
      <category term="閱讀筆記" scheme="http://blog.marsen.me/tags/%E9%96%B1%E8%AE%80%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記]在 Windows 環境編輯 SCSS</title>
    <link href="http://blog.marsen.me/2018/04/26/2018/windows_with_sass/"/>
    <id>http://blog.marsen.me/2018/04/26/2018/windows_with_sass/</id>
    <published>2018-04-26T06:16:34.000Z</published>
    <updated>2018-04-26T06:33:54.072Z</updated>
    
    <content type="html"><![CDATA[<ol><li>安裝 Windows 套件管理工具 Chocolatey <ul><li><a href="https://chocolatey.org" target="_blank" rel="noopener">https://chocolatey.org</a></li></ul></li><li><p>安裝 Node.js® </p><ul><li><a href="https://chocolatey.org/packages/nodejs" target="_blank" rel="noopener">https://chocolatey.org/packages/nodejs</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install nodejs -y</span><br></pre></td></tr></table></figure></li></ul></li><li><p>註冊公司內部 NPM Server</p><ul><li><a href="http://company.npm.server" target="_blank" rel="noopener">http://company.npm.server</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm set registry http://company.npm.server</span><br></pre></td></tr></table></figure></li></ul></li><li><p>安裝 RUBY</p><ul><li><a href="https://chocolatey.org/packages/ruby/2.5.1.1" target="_blank" rel="noopener">https://chocolatey.org/packages/ruby/2.5.1.1</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install ruby -y</span><br></pre></td></tr></table></figure></li></ul></li><li><p>下載 RubyGems</p><ul><li><a href="https://rubygems.org/pages/download#formats" target="_blank" rel="noopener">https://rubygems.org/pages/download#formats</a></li><li>Download from above</li><li>Unpack into a directory and cd there</li><li>Install with: ruby setup.rb (you may need admin/root privilege)</li></ul></li><li><p>安裝 compass</p><ul><li><a href="https://rubygems.org/gems/compass/versions/1.0.3" target="_blank" rel="noopener">https://rubygems.org/gems/compass/versions/1.0.3</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install compass</span><br></pre></td></tr></table></figure></li></ul></li><li><p>檢查 PATH</p></li><li>重啟 CMD 與 Visual Studio 2017</li><li><p>執行 compass</p><ul><li><p>使用 Command Line</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp compass</span><br></pre></td></tr></table></figure></li><li><p>使用工作執行器總管</p><p>  <img src="https://i.imgur.com/2sEzAx5.jpg" alt=""></p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;安裝 Windows 套件管理工具 Chocolatey &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://chocolatey.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://chocolatey.org&lt;/a&gt;&lt;/l
      
    
    </summary>
    
    
      <category term="Windows" scheme="http://blog.marsen.me/tags/Windows/"/>
    
      <category term="SCSS" scheme="http://blog.marsen.me/tags/SCSS/"/>
    
      <category term="Ruby" scheme="http://blog.marsen.me/tags/Ruby/"/>
    
      <category term="Node.js" scheme="http://blog.marsen.me/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記]重灌開發環境</title>
    <link href="http://blog.marsen.me/2018/04/17/2018/new_pc_install/"/>
    <id>http://blog.marsen.me/2018/04/17/2018/new_pc_install/</id>
    <published>2018-04-17T03:34:51.000Z</published>
    <updated>2018-04-17T03:36:43.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Typescript-踩雷"><a href="#1-Typescript-踩雷" class="headerlink" title="1.Typescript 踩雷"></a>1.Typescript 踩雷</h2><h4 id="問題"><a href="#問題" class="headerlink" title="問題:"></a>問題:</h4><p>visual studio 預設會安裝 typescript 2.6<br>專案使用 typescript 2.3 , 因為暫時無法升級到2.6以上的版本<br>會導致專案無法編譯成功</p><h4 id="解決步驟"><a href="#解決步驟" class="headerlink" title="解決步驟"></a>解決步驟</h4><ol><li>在專案目錄執行 <code>npm i</code> 重新安裝相關module</li><li>complie 後發現 <code>node_modules/@types</code> 中有檔案無法成功編譯</li><li>移除 <code>node_modules/@types</code> 整個資料夾</li><li>重新 complie 後仍會無法成功</li><li>移除 <code>C:\Program Files (x86)\Microsoft SDKs\TypeScript\2.6</code> (非必要,好像要看vs預設載入的版本為何?)</li></ol><h2 id="2-多語系dll衝突"><a href="#2-多語系dll衝突" class="headerlink" title="2.多語系dll衝突"></a>2.多語系dll衝突</h2><ol><li>清空<code>bin</code>資料夾</li><li>清空 <code>c:\Windows\Microsoft.NET\Framework64\v4.0.30319\Temporary ASP.NET Files\</code>資料夾</li><li>重建前台專案</li></ol><h2 id="3-Chocolatey"><a href="#3-Chocolatey" class="headerlink" title="3.Chocolatey"></a>3.Chocolatey</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">choco install googlechrome -y</span><br><span class="line">choco install dropbox -y</span><br><span class="line">choco install evernote -y</span><br><span class="line"></span><br><span class="line">choco install git -y</span><br><span class="line">choco install nodejs -y</span><br><span class="line">choco install putty -y</span><br><span class="line">choco install visualstudiocode -y</span><br><span class="line"></span><br><span class="line">choco install winmerge -y</span><br><span class="line">choco install slack -y</span><br><span class="line">choco install linqpad -y</span><br><span class="line">choco install 7zip -y</span><br><span class="line"> </span><br><span class="line">choco install gitkraken -y</span><br><span class="line"><span class="meta">#</span><span class="bash">choco install sourcetree -y</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Typescript-踩雷&quot;&gt;&lt;a href=&quot;#1-Typescript-踩雷&quot; class=&quot;headerlink&quot; title=&quot;1.Typescript 踩雷&quot;&gt;&lt;/a&gt;1.Typescript 踩雷&lt;/h2&gt;&lt;h4 id=&quot;問題&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[翻譯]為什麼IBM/Google/Microsoft都要在今年增加對台投資?</title>
    <link href="http://blog.marsen.me/2018/04/08/2018/why-google-ibm-and-microsoft-all-decided-to-expand-in-taiwan-this-year/"/>
    <id>http://blog.marsen.me/2018/04/08/2018/why-google-ibm-and-microsoft-all-decided-to-expand-in-taiwan-this-year/</id>
    <published>2018-04-08T15:22:20.000Z</published>
    <updated>2018-06-02T11:50:39.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a><a href="https://www.forbes.com/sites/ralphjennings/2018/04/04/why-google-ibm-and-microsoft-all-decided-to-expand-in-taiwan-this-year/#4fda82d5c721" target="_blank" rel="noopener">原文</a></h2><h2 id="重點節錄"><a href="#重點節錄" class="headerlink" title="重點節錄"></a>重點節錄</h2><ol><li><a href="https://www.blog.google/topics/google-asia/intelligent-taiwan/" target="_blank" rel="noopener">Google 宣布要在台灣顧用300名員工並訓練5000名學生在人工智能領域</a></li><li><a href="https://news.microsoft.com/apac/2018/01/12/microsoft-launches-artificial-intelligence-research-hub-taiwan/" target="_blank" rel="noopener">微軟也表明未來要在台灣發展AI業務,5年內投資3400萬鎂並招聘200人</a></li><li><a href="https://meet.bnext.com.tw/intl/articles/view/42553" target="_blank" rel="noopener">IBM也表示將在台灣擴展AI/區塊鏈/雲計算等相關的研發中心,並增聘100人以上</a></li></ol><h2 id="美國的投資與台灣的人材"><a href="#美國的投資與台灣的人材" class="headerlink" title="美國的投資與台灣的人材"></a>美國的投資與台灣的人材</h2><h3 id="台灣的優點"><a href="#台灣的優點" class="headerlink" title="台灣的優點"></a>台灣的優點</h3><ol><li>人材容易訓練適應AI等新產業的工作<ul><li>通常大學畢業生都有基礎工程知識</li><li>台灣的擁有製造業供應鏈(跨軟韌硬體)的人材</li><li>便宜(Orz)</li></ul></li><li>地理優勢(東北亞\東南亞\中國)</li><li>台灣目前政策<ul><li>IoT(物聯網)與智能機器</li><li>正在進行產業轉型(硬轉軟)</li></ul></li><li>其它<ul><li>穩定且便宜的電力與其它基礎建設</li><li>合理的成本結構</li></ul></li></ol><h3 id="中國的競爭"><a href="#中國的競爭" class="headerlink" title="中國的競爭"></a>中國的競爭</h3><ol><li>人材更便宜</li><li>美中貿易戰的擔心<ul><li>資訊安全</li><li>智慧財產</li></ul></li></ol><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ul><li><a href="https://careers.google.com/jobs#t=sq&amp;q=j&amp;li=20&amp;l=false&amp;jl=25.0329636%3A121.56542680000007%3ATaipei+City%2C+Taiwan%3ATW%3A%3A13.76366184019967%3AADMIN_1&amp;jld=10&amp;&amp;jcoid=7c8c6665-81cf-4e11-8fc9-ec1d6a69120c&amp;jcoid=e43afd0d-d215-45db-a154-5386c9036525&amp;" target="_blank" rel="noopener">Google 在台職缺</a></li><li><strong><a href="https://developers.google.com/machine-learning/crash-course/" target="_blank" rel="noopener">Google 的 Machine Learning 教程</a></strong></li><li><a href="https://krb-sjobs.brassring.com/TGnewUI/Search/Home/Home?partnerid=26059&amp;siteid=5016&amp;cm_mc_uid=66190819784615216541845&amp;cm_mc_sid_50200000=93350001523199145451#keyWordSearch=&amp;locationSearch=Taiwan&amp;City%20%2F%20Township%20%2F%20Village=TAIPEI&amp;Country%2FRegion=Taiwan" target="_blank" rel="noopener">IBM 職缺</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原文&quot;&gt;&lt;a href=&quot;#原文&quot; class=&quot;headerlink&quot; title=&quot;原文&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.forbes.com/sites/ralphjennings/2018/04/04/why-google-ibm-an
      
    
    </summary>
    
    
      <category term="IBM" scheme="http://blog.marsen.me/tags/IBM/"/>
    
      <category term="Google" scheme="http://blog.marsen.me/tags/Google/"/>
    
      <category term="Microsoft" scheme="http://blog.marsen.me/tags/Microsoft/"/>
    
      <category term="Taiwan" scheme="http://blog.marsen.me/tags/Taiwan/"/>
    
      <category term="IoT" scheme="http://blog.marsen.me/tags/IoT/"/>
    
      <category term="AI" scheme="http://blog.marsen.me/tags/AI/"/>
    
      <category term="Machine Learning" scheme="http://blog.marsen.me/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>[學習筆記]Linux 語法學習筆記 二</title>
    <link href="http://blog.marsen.me/2018/04/05/2018/linux_command_2/"/>
    <id>http://blog.marsen.me/2018/04/05/2018/linux_command_2/</id>
    <published>2018-04-05T07:53:23.000Z</published>
    <updated>2018-06-02T11:50:39.329Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.marsen.me/2018/03/26/2018/linux_command_1/">上一篇</a>我們學會一些基本 linux command,<br>接下來我們將介紹更多的命令並組合它們到 shell script.<br>讓 script 幫助我們完成一些事, 就像魔法一般, 開始囉.  </p><h2 id="補充指令"><a href="#補充指令" class="headerlink" title="補充指令"></a>補充指令</h2><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a><code>vim</code></h3><h4 id="開啟-vim-編輯器"><a href="#開啟-vim-編輯器" class="headerlink" title="開啟 vim 編輯器"></a>開啟 vim 編輯器</h4><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a><code>echo</code></h3><h4 id="印出文字"><a href="#印出文字" class="headerlink" title="印出文字"></a>印出文字</h4><blockquote><p>$ echo “text”<br>text</p></blockquote><h4 id="印出變數-echo"><a href="#印出變數-echo" class="headerlink" title="印出變數 echo $*"></a>印出變數 <code>echo $*</code></h4><h4 id="印出PID-Process-ID-echo"><a href="#印出PID-Process-ID-echo" class="headerlink" title="印出PID (Process ID) echo $$"></a>印出PID (Process ID) <code>echo $$</code></h4><h3 id="set"><a href="#set" class="headerlink" title="set"></a><code>set</code></h3><h4 id="設定變數"><a href="#設定變數" class="headerlink" title="設定變數"></a>設定變數</h4><blockquote><p>$ set good morning marsen</p></blockquote><p>補充:使用 <code>echo</code> 印出變數,<strong>從1開始</strong><br><code>$*</code> 指所有變數</p><blockquote><p>$ echo $1<br>good<br>$ echo $2<br>morning<br>$ echo $3<br>marsen<br>$ echo $*<br>good morning marsen </p></blockquote><h4 id="進階使用-backticks-執行-cat-Command"><a href="#進階使用-backticks-執行-cat-Command" class="headerlink" title="進階使用 backticks 執行 cat Command"></a>進階使用 backticks 執行 <code>cat</code> Command</h4><blockquote><p>$ cat &gt; testfile<br>hello world<br>^C<br>sh-4.4$ set <code>cat testfile</code><br>sh-4.4$ echo $*<br>hello world</p></blockquote><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><ol><li>建立檔案<blockquote><p>$ cat &gt; helloworld.sh</p></blockquote></li><li><p>編輯檔案</p><blockquote><p>$ vim helloworld.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">say hello</span></span><br><span class="line">echo "hello world"</span><br></pre></td></tr></table></figure></blockquote></li><li><p>執行檔案</p><blockquote><p>$ sh helloworld.sh<br>hello world</p></blockquote></li></ol><h3 id="變數-variable"><a href="#變數-variable" class="headerlink" title="變數 variable"></a>變數 variable</h3><ol><li>大小寫有分</li><li>使用 <code>read</code> 讀取 input 到變數中</li><li>使用 <code>$</code>+變數名呼叫變數</li></ol><p>sample:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> this is a shell sample</span></span><br><span class="line">echo "who are you?"</span><br><span class="line">read name</span><br><span class="line">echo "Hi, $name nice to see you."</span><br></pre></td></tr></table></figure></p><p>executed:</p><blockquote><p>$ sh whoareyou.sh<br>who are you?<br>Mark<br>Hi, Mark nice to see you.</p></blockquote><h3 id="互動式重新命名檔案"><a href="#互動式重新命名檔案" class="headerlink" title="互動式重新命名檔案"></a>互動式重新命名檔案</h3><p>sample:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> this is a shell sample</span></span><br><span class="line">echo "keyin a filename"</span><br><span class="line">read name</span><br><span class="line">mv $1 $name</span><br><span class="line">echo $name"</span><br></pre></td></tr></table></figure></p><blockquote><p>$ sh rename.sh file1<br>keyin a filename<br>newfile<br>newfile</p></blockquote><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ol><li><p>額外的 vim 問題排解 <code>E348: No string under cursor</code> 表示未輸入 i 進入 <code>Insert</code> mode</p><ul><li>ESC + : , 輸入 w filename (以filename保存)</li><li>ESC + : , 輸入 wq (存儲並離開vim)</li><li>ESC + : , 輸入 q! (不存儲並離開vim)</li></ul></li><li><p>「<strong>`</strong>」 Backquote 或 backticks </p></li></ol><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="https://www.tutorialspoint.com/unix_terminal_online.php" target="_blank" rel="noopener">Unix Terminal Online</a></li><li><a href="https://itsfoss.com/how-to-exit-vim/" target="_blank" rel="noopener">離開Vim的<del>100種</del>方法</a></li><li><a href="http://linux.vbird.org/linux_basic/0320bash.php" target="_blank" rel="noopener">鳥哥的 Linux 私房菜—認識與學習BASH</a></li></ol><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.marsen.me/2018/03/26/2018/linux_command_1/&quot;&gt;上一篇&lt;/a&gt;我們學會一些基本 linux command,&lt;br&gt;接下來我們將介紹更多的命令並組合它們到 shell script.&lt;br&gt;
      
    
    </summary>
    
    
      <category term="Unix" scheme="http://blog.marsen.me/tags/Unix/"/>
    
      <category term="Linux" scheme="http://blog.marsen.me/tags/Linux/"/>
    
      <category term="Shell" scheme="http://blog.marsen.me/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>[學習筆記]允許 IAM User 存取 AWS Billing Console</title>
    <link href="http://blog.marsen.me/2018/04/04/cloud_learn/aws_access_billing_console/"/>
    <id>http://blog.marsen.me/2018/04/04/cloud_learn/aws_access_billing_console/</id>
    <published>2018-04-04T09:08:44.000Z</published>
    <updated>2018-04-17T03:12:39.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>設定了 IAM User Account 也給予了 Administrator 的權限,<br>不過仍然看不到 Billing 的頁面資訊 .  </p><p><img src="https://i.imgur.com/1Ge6pGi.jpg" alt=""></p><p>這帶來了很大的不方便, 因為如果要看 Billing 的資訊就要切換到 Root Account<br>而建立 Administrator IAM Account 的用意本來就是要儘可能不使用 Root Account 作登入.<br>檢查了權限,明明就有設定 Read Billing 但是仍然看不到.  </p><h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h2><p>實際上要進入 Billing Console 其實要有兩個步驟  </p><ol><li>權限要設定,更多細節可以參考這篇<a href="https://aws.amazon.com/blogs/security/enhanced-iam-capabilities-for-the-aws-billing-console/" target="_blank" rel="noopener">文章</a>(2014)</li><li>要透過 Root Account 在 <a href="https://console.aws.amazon.com/billing/home#/account" target="_blank" rel="noopener">Account Settings</a> 頁面設定, 允許 IAM user 存取 Billing Console  </li></ol><p><img src="https://i.imgur.com/yBXaLPJ.jpg" alt=""></p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://aws.amazon.com/blogs/security/dont-forget-to-enable-access-to-the-billing-console/" target="_blank" rel="noopener">Don’t Forget to Enable Access to the Billing Console!</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;設定了 IAM User Account 也給予了 Administrator 的權限,&lt;br&gt;不過仍然看不到 Billin
      
    
    </summary>
    
    
      <category term="AWS" scheme="http://blog.marsen.me/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>[學習筆記] Linux 語法學習筆記 一</title>
    <link href="http://blog.marsen.me/2018/03/26/2018/linux_command_1/"/>
    <id>http://blog.marsen.me/2018/03/26/2018/linux_command_1/</id>
    <published>2018-03-25T16:23:01.000Z</published>
    <updated>2018-04-17T03:12:39.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.tutorialspoint.com/unix_terminal_online.php" target="_blank" rel="noopener">Unix Terminal Online</a></li><li><a href="https://www.udemy.com/learn-shell-scripting-all-levels/" target="_blank" rel="noopener">Learn Shell Scripting all Levels</a></li><li><a href="http://linux.vbird.org/linux_basic/0320bash/csh/no3-8-01.html" target="_blank" rel="noopener">umask 指令</a></li></ul><h2 id="學習筆記"><a href="#學習筆記" class="headerlink" title="學習筆記"></a>學習筆記</h2><h3 id="Clear"><a href="#Clear" class="headerlink" title="Clear"></a><code>Clear</code></h3><h4 id="清除目前-terminal-畫面"><a href="#清除目前-terminal-畫面" class="headerlink" title="清除目前 terminal 畫面"></a>清除目前 terminal 畫面</h4><h3 id="Cal"><a href="#Cal" class="headerlink" title="Cal"></a><code>Cal</code></h3><h4 id="產生當下的月曆"><a href="#產生當下的月曆" class="headerlink" title="產生當下的月曆"></a>產生當下的月曆</h4><blockquote><p>$ cal                                                </p><p>March 2018<br>Su Mo Tu We Th Fr Sa<br>             1  2  3<br> 4  5  6  7  8  9 10<br>11 12 13 14 15 16 17<br>18 19 20 21 22 23 24<br>25 26 27 28 29 30 31</p><p>$ cal 2 1985</p><p>   February 1985<br>Su Mo Tu We Th Fr Sa<br>                1  2<br> 3  4  5  6  7  8  9<br>10 11 12 13 14 15 16<br>17 18 19 20 21 22 23<br>24 25 26 27 28 </p></blockquote><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a><code>Date</code></h3><h4 id="顯示日期與時間"><a href="#顯示日期與時間" class="headerlink" title="顯示日期與時間"></a>顯示日期與時間</h4><blockquote><p>$ date</p><p>Sat Mar 10 19:01:37 UTC 2018</p><p>$ date  ‘+ %y-%m-%d %n %H:%M:%S:%N’</p><p>18-03-10<br>19:06:24:126172657</p></blockquote><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a><code>pwd</code></h3><h4 id="目前所在的檔案路徑"><a href="#目前所在的檔案路徑" class="headerlink" title="目前所在的檔案路徑"></a>目前所在的檔案路徑</h4><h3 id="Touch"><a href="#Touch" class="headerlink" title="Touch"></a><code>Touch</code></h3><h4 id="建立檔案"><a href="#建立檔案" class="headerlink" title="建立檔案"></a>建立檔案</h4><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a><code>mkdir</code></h3><h4 id="建立資料夾"><a href="#建立資料夾" class="headerlink" title="建立資料夾"></a>建立資料夾</h4><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a><code>cat</code></h3><h4 id="寫檔案-cat-gt-filename"><a href="#寫檔案-cat-gt-filename" class="headerlink" title="寫檔案 cat &gt; filename"></a>寫檔案 <code>cat &gt; filename</code></h4><blockquote><p>ctrl + d 可以離開編輯</p></blockquote><h4 id="讀檔案-cat-lt-filename"><a href="#讀檔案-cat-lt-filename" class="headerlink" title="讀檔案 cat &lt; filename"></a>讀檔案 <code>cat &lt; filename</code></h4><h4 id="合併檔案-cat-file1-file2-gt-merged-file"><a href="#合併檔案-cat-file1-file2-gt-merged-file" class="headerlink" title="合併檔案 cat file1 file2 &gt; merged_file"></a>合併檔案 <code>cat file1 file2 &gt; merged_file</code></h4><blockquote><p>$ cat &gt; file1<br>this is file1<br>$ cat file1<br>this is file1<br>$ cat &gt; file2<br>this is file2<br>$ cat file2<br>this is file2<br>$ cat file1 file2 &gt; merged_file<br>$ cat merged_file<br>this is file1<br>this is file2</p></blockquote><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a><code>mv</code></h3><h4 id="重新命名檔案"><a href="#重新命名檔案" class="headerlink" title="重新命名檔案"></a>重新命名檔案</h4><blockquote><p>mv origin_name new_name</p></blockquote><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a><code>rm</code></h3><h4 id="刪除檔案或資料夾"><a href="#刪除檔案或資料夾" class="headerlink" title="刪除檔案或資料夾"></a>刪除檔案或資料夾</h4><blockquote><p>$ rm file_name</p><p>$ rm -r folder_name/</p></blockquote><h3 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a><code>rmdir</code></h3><h4 id="刪除資料夾"><a href="#刪除資料夾" class="headerlink" title="刪除資料夾"></a>刪除資料夾</h4><blockquote><p>$ rmdir folder_name/</p></blockquote><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a><code>cp</code></h3><h4 id="複製檔案"><a href="#複製檔案" class="headerlink" title="複製檔案"></a>複製檔案</h4><blockquote><p>$ cp oldfile other_folder/newfile</p></blockquote><h3 id="ln"><a href="#ln" class="headerlink" title="ln"></a><code>ln</code></h3><h4 id="聯結檔案-hard-link"><a href="#聯結檔案-hard-link" class="headerlink" title="聯結檔案(hard link)"></a>聯結檔案(hard link)</h4><blockquote><p>$ touch one<br>$ cat &lt; one<br>$ ln one two<br>$ ls<br>one  two<br>$ cat &gt; one<br>this is one<br>$ cat &lt; one<br>this is one<br>$ cat &lt; two<br>this is one                                            </p></blockquote><h4 id="ln-s-soft-link"><a href="#ln-s-soft-link" class="headerlink" title="ln -s soft link"></a><code>ln -s</code> soft link</h4><p>hard link 會產生實體檔案,soft link只是指標的轉向.<br>如果使用soft link,當刪除原始檔案時,link檔案將無法開啟.</p><h3 id="檔案權限概觀"><a href="#檔案權限概觀" class="headerlink" title="檔案權限概觀"></a>檔案權限概觀</h3><h4 id="三種權限"><a href="#三種權限" class="headerlink" title="三種權限"></a>三種權限</h4><ul><li>read / 讀 / 100 =&gt; 4</li><li>write / 寫 / 010 =&gt; 2</li><li>execute / 執行 / 001 =&gt; 1</li></ul><p>每個權限都有一個代號,<br>read 表示可讀權限, 意味著可以開啟檔案與看見內容,<br>代號為4,二進位表示為100<br>write 表示可以複寫其內容,<br>代號為2,二進位表示為010,<br>execute 代表可執行,適用可執行檔或shell script,<br>代號為1,二進位表示為001.<br>三種權限都有的話,權限為(111=&gt;7)</p><h4 id="三種身份"><a href="#三種身份" class="headerlink" title="三種身份"></a>三種身份</h4><ul><li>owner 開啟的帳號</li><li>owner group 開啟的帳號所屬的群組</li><li>other group 其它的群組</li></ul><p>新增一個檔案的時候,<br>預設只有讀寫,沒有執行的權限 (100|010=110=&gt;6) </p><blockquote><p>指令 umask 的設定值以三個八進位的數字“nnn”代表。<br>第一個設定數字給使用者自己（owner user），<br>第二個則是設定給用使用者所屬的群體（group），<br>第三個給不屬於同群體的其它使用者（other）。<br>每一位數字的設定值都是三項不同權限的數值加總，<br>read 權限數值為 4；write 權限數值為 2；execute 權限數值為 1。<br>結合了前三者的權限數值，單一的數字可設定的範圍是 0 ~ 7；<br>整體的可設定範圍是 000 ~ 777。<br>— 鳥哥的 Linux 私房菜</p></blockquote><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a><code>ls</code></h3><h4 id="列出資料夾中的所有檔案"><a href="#列出資料夾中的所有檔案" class="headerlink" title="列出資料夾中的所有檔案"></a>列出資料夾中的所有檔案</h4><h4 id="ls-foldername"><a href="#ls-foldername" class="headerlink" title="ls foldername"></a><code>ls foldername</code></h4><p>列出指定的資料夾中所有的檔案</p><h4 id="ls-l"><a href="#ls-l" class="headerlink" title="ls -l"></a><code>ls -l</code></h4><p>列出資料夾中的所有檔案與其權限資訊</p><blockquote><p>ls 最常被使用到的功能還是那個 -l 的選項，為此，很多 distribution 在預設的情況中， 已經將 ll (L 的小寫) 設定成為 ls -l 的意思了！其實，那個功能是 <a href="http://linux.vbird.org/linux_basic/0320bash.php" target="_blank" rel="noopener">Bash shell</a> 的 <a href="http://linux.vbird.org/linux_basic/0320bash.php#alias" target="_blank" rel="noopener">alias</a> 功能呢<br>— 鳥哥的 Linux 私房菜</p></blockquote><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a><code>chmod</code></h3><h4 id="修改檔案權限"><a href="#修改檔案權限" class="headerlink" title="修改檔案權限"></a>修改檔案權限</h4><blockquote><p>sh-4.4$ ls -l<br>total 4<br>-rw-r–r– 1 33581 33581 978 Mar 12 17:30 README.txt<br>-rw-r–r– 1 33581 33581   0 Mar 12 17:32 test<br>sh-4.4$ chmod 777 test<br>sh-4.4$ ls -l<br>total 4<br>-rw-r–r– 1 33581 33581 978 Mar 12 17:30 README.txt<br>-rwxrwxrwx 1 33581 33581   0 Mar 12 17:32 test<br>sh-4.4$ chmod 444 test<br>sh-4.4$ ls -l<br>total 4<br>-rw-r–r– 1 33581 33581 978 Mar 12 17:30 README.txt<br>-r–r–r– 1 33581 33581   0 Mar 12 17:32 test</p></blockquote><h3 id="uname"><a href="#uname" class="headerlink" title="uname"></a><code>uname</code></h3><h4 id="顯示系統相關的資訊"><a href="#顯示系統相關的資訊" class="headerlink" title="顯示系統相關的資訊"></a>顯示系統相關的資訊</h4><blockquote><p>$ uname -a<br>Linux e955582759de 3.10.0-514.26.2.el7.x86_64 #1 SMP Tue Jul 4 15:04:05 UTC<br>2017 x86_64 x86_64 x86_64 GNU/Linux</p><p>選項與參數：<br>-a  ：所有系統相關的資訊，包括底下的資料都會被列出來；<br>-s  ：系統核心名稱<br>-r  ：核心的版本<br>-m  ：本系統的硬體名稱，例如 i686 或 x86_64 等；<br>-p  ：CPU 的類型，與 -m 類似，只是顯示的是 CPU 的類型！<br>-i  ：硬體的平台 (ix86)<br>— 鳥哥的 Linux 私房菜</p></blockquote><h3 id="file"><a href="#file" class="headerlink" title="file"></a><code>file</code></h3><h4 id="查詢檔案基本資料-類型"><a href="#查詢檔案基本資料-類型" class="headerlink" title="查詢檔案基本資料(類型)"></a>查詢檔案基本資料(類型)</h4><blockquote><p>file *</p><p>jazzy:  ASCII text<br>mark:   empty<br>marsen: directory</p></blockquote><h3 id="wc"><a href="#wc" class="headerlink" title="wc"></a><code>wc</code></h3><h4 id="顯示檔案資訊"><a href="#顯示檔案資訊" class="headerlink" title="顯示檔案資訊"></a>顯示檔案資訊</h4><p>行數 字數 字元數 檔名</p><blockquote><p>$ wc jazzy</p><p>3 10 39 jazzy</p></blockquote><h4 id="wc-l-filename"><a href="#wc-l-filename" class="headerlink" title="wc -l filename"></a><code>wc -l filename</code></h4><p>顯示檔案行數資訊</p><h4 id="wc-w-filename"><a href="#wc-w-filename" class="headerlink" title="wc -w filename"></a><code>wc -w filename</code></h4><p>顯示檔案字數資訊</p><h4 id="wc-c-filename"><a href="#wc-c-filename" class="headerlink" title="wc -c filename"></a><code>wc -c filename</code></h4><p>顯示檔案字元數資訊</p><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a><code>sort</code></h3><h4 id="印出排序過後的結果-遞增"><a href="#印出排序過後的結果-遞增" class="headerlink" title="印出排序過後的結果(遞增)"></a>印出排序過後的結果(遞增)</h4><blockquote><p>$ sort<br>owls<br>pigs<br>dogs<br>cats</p><p>cats<br>dogs<br>owls<br>pigs</p></blockquote><h4 id="sort-filename"><a href="#sort-filename" class="headerlink" title="sort filename"></a><code>sort filename</code></h4><p>印出檔案內排序過後的結果(遞增)</p><h3 id="cut"><a href="#cut" class="headerlink" title="cut"></a><code>cut</code></h3><h4 id="切割資料"><a href="#切割資料" class="headerlink" title="切割資料"></a>切割資料</h4><p>參數:<br>-d 分割字元<br>-f index (從1開始)</p><p>範例</p><blockquote><p>cat &gt; filenames<br>Name-Sport-Age<br>Roger-Tennis-30<br>Nadal-Tennis-25<br>Tiger-Golf-37<br>Michael-Baseball-49</p><p>$ cut -d”-“ -f 1,3 filenames<br>Name-Age<br>Roger-30<br>Nadal-25<br>Tiger-37<br>Michael-49</p></blockquote><h3 id="dd"><a href="#dd" class="headerlink" title="dd"></a><code>dd</code></h3><h4 id="資料處理、拷貝、備份、轉碼-更多"><a href="#資料處理、拷貝、備份、轉碼-更多" class="headerlink" title="資料處理、拷貝、備份、轉碼;更多"></a>資料處理、拷貝、備份、轉碼;<a href="https://blog.gtwang.org/linux/dd-command-examples/" target="_blank" rel="noopener">更多</a></h4><blockquote><p>$ cat &gt; infile<br>this is the input file<br>$ cat infile<br>this is the input file</p><p>$ dd if=infile of=outfile conv=ucase<br>0+1 records in<br>0+1 records out<br>23 bytes copied, 6.6972e-05 s, 343 kB/s<br>$ cat outfile<br>THIS IS THE INPUT FILE </p></blockquote><h3 id="man"><a href="#man" class="headerlink" title="man"></a><code>man</code></h3><h4 id="查詢其它指令用法"><a href="#查詢其它指令用法" class="headerlink" title="查詢其它指令用法"></a>查詢其它指令用法</h4><blockquote><p>$ man ls<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">LS(1)User Commands  LS(1)</span><br><span class="line">NAMEls - list directory contents</span><br><span class="line">SYNOPSISls [OPTION]... [FILE]...</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       List  information  about the FILEs (the current directory by default).  </span><br><span class="line">   Sort entries alphabetically if none of</span><br><span class="line">       -cftuvSUX nor --sort is specified.</span><br><span class="line"></span><br><span class="line">       Mandatory arguments to long options are mandatory for short options too.</span><br><span class="line">       -a, --all</span><br><span class="line">              do not ignore entries starting with .</span><br><span class="line"></span><br><span class="line">       -A, --almost-all</span><br><span class="line">              do not list implied . and ..</span><br><span class="line"></span><br><span class="line">       --author</span><br><span class="line">              with -l, print the author of each file</span><br><span class="line"></span><br><span class="line">       -b, --escape</span><br><span class="line">              print C-style escapes for nongraphic characters</span><br><span class="line"> Manual page ls(1) line 1 (press h for help or q to quit)</span><br></pre></td></tr></table></figure></p></blockquote><p>按<code>h</code>看更多訊息</p><blockquote><p>$ man ls<br>h</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">                   SUMMARY OF LESS COMMANDS</span><br><span class="line"></span><br><span class="line">      Commands marked with * may be preceded by a number, N.</span><br><span class="line">      Notes in parentheses indicate the behavior if N is given.</span><br><span class="line"></span><br><span class="line">  h  H                 Display this help.</span><br><span class="line">  q  :q  Q  :Q  ZZ     Exit.</span><br><span class="line"> ---------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">                           MOVING</span><br><span class="line"></span><br><span class="line">  e  ^E  j  ^N  CR  *  Forward  one line   (or N lines).</span><br><span class="line">  y  ^Y  k  ^K  ^P  *  Backward one line   (or N lines).</span><br><span class="line">  f  ^F  ^V  SPACE  *  Forward  one window (or N lines).</span><br><span class="line">  b  ^B  ESC-v      *  Backward one window (or N lines).</span><br><span class="line">  z                 *  Forward  one window (and set window to N).</span><br><span class="line">  w                 *  Backward one window (and set window to N).</span><br><span class="line">  ESC-SPACE         *  Forward  one window, but don&apos;t stop at end-of-file.</span><br><span class="line">  d  ^D             *  Forward  one half-window (and set half-window to N).</span><br><span class="line">  u  ^U             *  Backward one half-window (and set half-window to N).</span><br><span class="line">  ESC-)  RightArrow *  Left  one half screen width (or N positions).</span><br><span class="line">  ESC-(  LeftArrow  *  Right one half screen width (or N positions).</span><br><span class="line">  F                    Forward forever; like &quot;tail -f&quot;.</span><br><span class="line">  r  ^R  ^L            Repaint screen.</span><br><span class="line">HELP -- Press RETURN for more, or q when done</span><br></pre></td></tr></table></figure><p>按<code>q</code>退出查詢畫面</p><h3 id="banner"><a href="#banner" class="headerlink" title="banner"></a><code>banner</code></h3><h4 id="輸出用-組成的大形文字"><a href="#輸出用-組成的大形文字" class="headerlink" title="輸出用#組成的大形文字"></a>輸出用#組成的大形文字</h4><p>實測未出現,上網查了一下banner好像有蠻多不同的類型可以安裝?</p><h3 id="compress"><a href="#compress" class="headerlink" title="compress"></a><code>compress</code></h3><h4 id="壓縮檔案"><a href="#壓縮檔案" class="headerlink" title="壓縮檔案"></a>壓縮檔案</h4><h3 id="zcat"><a href="#zcat" class="headerlink" title="zcat"></a><code>zcat</code></h3><h4 id="讀取壓縮檔案"><a href="#讀取壓縮檔案" class="headerlink" title="讀取壓縮檔案"></a>讀取壓縮檔案</h4><h3 id="uncompress"><a href="#uncompress" class="headerlink" title="uncompress"></a><code>uncompress</code></h3><h4 id="解壓縮檔案"><a href="#解壓縮檔案" class="headerlink" title="解壓縮檔案"></a>解壓縮檔案</h4><blockquote><p>compress 已經退流行了。為了支援 windows 常見的 zip，其實 Linux 也早就有 zip 指令了！ gzip 是由 <a href="http://www.gnu.org/" target="_blank" rel="noopener">GNU 計畫</a>所開發出來的壓縮指令，該指令已經取代了 compress 。<br>— 鳥哥的 Linux 私房菜</p></blockquote><h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><p>以上是一些基本的 Linux Command ,<br>下一篇,我們會建立.sh檔,將 Linux Command 依照指定的順序執行<br>並使用 <code>sh</code> 命令執行<br>用以完成一些更進階的工作. </p><p>(more..)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;參考&quot;&gt;&lt;a href=&quot;#參考&quot; class=&quot;headerlink&quot; title=&quot;參考&quot;&gt;&lt;/a&gt;參考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.tutorialspoint.com/unix_terminal_online.php
      
    
    </summary>
    
    
      <category term="Unix" scheme="http://blog.marsen.me/tags/Unix/"/>
    
      <category term="Linux" scheme="http://blog.marsen.me/tags/Linux/"/>
    
      <category term="Shell" scheme="http://blog.marsen.me/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>[學習筆記]AWS EC2 學習筆記 AWS CLI 與 Login</title>
    <link href="http://blog.marsen.me/2018/03/25/cloud_learn/aws_cli_login/"/>
    <id>http://blog.marsen.me/2018/03/25/cloud_learn/aws_cli_login/</id>
    <published>2018-03-25T15:01:24.000Z</published>
    <updated>2018-04-17T03:12:39.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安裝-AWS-CLI"><a href="#安裝-AWS-CLI" class="headerlink" title="安裝 AWS CLI"></a><a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/installing.html" target="_blank" rel="noopener">安裝 AWS CLI</a></h2><h2 id="配置-AWS-CLI"><a href="#配置-AWS-CLI" class="headerlink" title="配置 AWS CLI"></a><a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-chap-getting-started.html#cli-quick-configuration" target="_blank" rel="noopener">配置 AWS CLI</a></h2><h2 id="EC2-開機"><a href="#EC2-開機" class="headerlink" title="EC2 開機"></a>EC2 開機</h2><p><img src="https://i.imgur.com/dNGygaT.jpg" alt=""></p><ul><li>直接開機跳過網路設定(也還沒有辦法設)</li><li>第5步驟設定 TAG ,對找尋 ec2 的 instance 很有幫助</li></ul><h2 id="設定-Putty"><a href="#設定-Putty" class="headerlink" title="設定 Putty"></a>設定 <a href="https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/putty.html?icmpid=docs_ec2_console" target="_blank" rel="noopener">Putty</a></h2><h2 id="連線機器"><a href="#連線機器" class="headerlink" title="連線機器"></a>連線機器</h2><p><img src="https://i.imgur.com/xIQsEac.jpg" alt=""></p><p>ex:  </p><blockquote><p>ssh -i /path/my-key-pair.pem ec2-user@ec2-198-51-100-1.compute-1.amazonaws.com</p></blockquote><h3 id="預設連線帳戶"><a href="#預設連線帳戶" class="headerlink" title="預設連線帳戶"></a>預設連線帳戶</h3><blockquote><p>For Amazon Linux, the user name is <code>ec2-user</code>.<br>For Centos, the user name is <code>centos</code>.<br>For Debian, the user name is <code>admin</code> or <code>root</code>.<br>For Fedora, the user name is <code>ec2-user</code>.<br>For RHEL, the user name is <code>ec2-user</code> or <code>root</code>.<br>For SUSE, the user name is <code>ec2-user</code> or <code>root</code>.<br>For Ubuntu, the user name is <code>ubuntu</code> or <code>root</code>.<br>Otherwise, if <code>ec2-user</code> and <code>root</code> don’t work, check with your AMI provider.</p></blockquote><p>windows 好像是 Administrator ? 求補充</p><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><h3 id="安裝-docker"><a href="#安裝-docker" class="headerlink" title="安裝 docker"></a>安裝 docker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker</span><br></pre></td></tr></table></figure><h3 id="啟動-Docker-服務，並讓它隨系統啟動自動載入"><a href="#啟動-Docker-服務，並讓它隨系統啟動自動載入" class="headerlink" title="啟動 Docker 服務，並讓它隨系統啟動自動載入"></a>啟動 Docker 服務，並讓它隨系統啟動自動載入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service docker start</span><br><span class="line">$ sudo chkconfig docker on</span><br></pre></td></tr></table></figure><h3 id="雷包"><a href="#雷包" class="headerlink" title="雷包"></a>雷包</h3><ul><li>重啟機器的話 public dns 會改變.(意味連線的命令參數會變)</li><li><p>注意使用的AIM, 不同的 Linux OS 會有不同的套件執行命令</p><ul><li>ubuntu <code>apt-get</code></li><li>CentOS <code>yum</code><h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3></li></ul></li><li><p><a href="https://philipzheng.gitbooks.io/docker_practice" target="_blank" rel="noopener">Docker —— 從入門到實踐</a></p></li><li><a href="https://www.gitbook.com/book/joshhu/dockercommands/details" target="_blank" rel="noopener">全面易懂的Docker指令大全</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安裝-AWS-CLI&quot;&gt;&lt;a href=&quot;#安裝-AWS-CLI&quot; class=&quot;headerlink&quot; title=&quot;安裝 AWS CLI&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://docs.aws.amazon.com/zh_cn/cli/latest/us
      
    
    </summary>
    
    
      <category term="AWS" scheme="http://blog.marsen.me/tags/AWS/"/>
    
      <category term="docker" scheme="http://blog.marsen.me/tags/docker/"/>
    
      <category term="Root User" scheme="http://blog.marsen.me/tags/Root-User/"/>
    
  </entry>
  
  <entry>
    <title>[讀書會]單元測試的藝術 - 導讀、序與第一章</title>
    <link href="http://blog.marsen.me/2018/03/22/2018/the_art_of_unit_testing_2nd_0/"/>
    <id>http://blog.marsen.me/2018/03/22/2018/the_art_of_unit_testing_2nd_0/</id>
    <published>2018-03-21T17:20:12.000Z</published>
    <updated>2018-04-17T03:12:39.593Z</updated>
    
    <content type="html"><![CDATA[<h2 id="要知道的事"><a href="#要知道的事" class="headerlink" title="要知道的事"></a>要知道的事</h2><ol><li>這是<a href="http://www.books.com.tw/products/0010765689" target="_blank" rel="noopener">單元測試的藝術</a>的閱讀筆記</li><li>筆記的意思就是不一定會有心得</li><li>這篇主要是導讀</li></ol><h2 id="譯者序"><a href="#譯者序" class="headerlink" title="譯者序"></a>譯者序</h2><ul><li>TDD , Test First to Think First</li><li>什麼是好的單元測試？</li><li>單元測試三支柱:可信任 可讀性 可維護</li><li>綠色安全區域</li><li>實務上導入的指引</li></ul><h3 id="入門建議"><a href="#入門建議" class="headerlink" title="入門建議"></a>入門建議</h3><ul><li>了解如何隔離相依(Part II)</li><li>Stub 與 Mock 的差異,熟練隔離框架(NSubstitute)</li><li>如何撰寫優秀的單元測試(Part III)</li></ul><h3 id="進階建議"><a href="#進階建議" class="headerlink" title="進階建議"></a>進階建議</h3><ul><li>如何撰寫優秀的單元測試(Part III)</li><li>如何在組織中導入單元測試(Part IV)</li><li>針對遺留代碼的重構與測試,以及可測試性設計(Part IV)</li></ul><h3 id="避免"><a href="#避免" class="headerlink" title="避免"></a>避免</h3><ol><li>測試不穩定</li><li>過度指定</li><li>一次不只測一件事</li><li>測試程式重複過多</li><li>可讀性差</li></ol><h2 id="關於本書"><a href="#關於本書" class="headerlink" title="關於本書"></a>關於本書</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>有寫測試, 也不保証專案成功,<br>一個失敗的單元測試案例,<br>作者歸納原因如下,  </p><ul><li>脆弱的測試(Prod改一點,測試就錯一大片)</li><li>不易維護</li><li>測試間相護依賴</li><li>可讀性差</li></ul><h3 id="作者推薦的框架"><a href="#作者推薦的框架" class="headerlink" title="作者推薦的框架"></a>作者推薦的框架</h3><ul><li><a href="http://nsubstitute.github.io" target="_blank" rel="noopener">NSubstitute</a></li><li><a href="https://github.com/FakeItEasy/FakeItEasy" target="_blank" rel="noopener">FakeItEasy</a></li></ul><h3 id="學習路線圖"><a href="#學習路線圖" class="headerlink" title="學習路線圖"></a>學習路線圖</h3><ul><li>Part I 基礎知識</li><li>Part II 測試框架</li><li>Part III 最佳實踐</li><li>Part IV 組識導入/遺留代碼/設計</li></ul><h2 id="目錄"><a href="#目錄" class="headerlink" title="目錄"></a>目錄</h2><ol><li>入門<ul><li>什麼是優秀的單元測試</li><li>單元測試與整合測試的分別</li><li>第一個單元測試</li></ul></li><li>核心技術<ul><li>Stub</li><li>IoC(DI)</li><li>值、狀態與互動</li><li>測試框架</li><li>事件</li><li>深入了解測試框架</li></ul></li><li>測試程式碼<ul><li>自動化</li><li>綠色安全區域</li><li>可信任/可維護/可讀性</li></ul></li><li>設計與流程<ul><li>組織導入</li><li>遺留代碼</li><li>設計與可測試性</li></ul></li></ol><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="定義單元測試"><a href="#定義單元測試" class="headerlink" title="定義單元測試"></a>定義單元測試</h3><h3 id="什麼是優秀的單元測試"><a href="#什麼是優秀的單元測試" class="headerlink" title="什麼是優秀的單元測試"></a>什麼是優秀的單元測試</h3><ol><li>自動化, 可重複執行</li><li>容易實現*</li><li>到第二天還有存在的意義(非臨時性的,ex:hotfix)</li><li>任何都可以一鍵執行</li><li>執行速度快</li><li>結果一致</li><li>可以完全控制(不與外部相依)</li><li>獨立於其他測試</li><li>失敗時,錯誤應該是明確的</li></ol><h3 id="整合測試"><a href="#整合測試" class="headerlink" title="整合測試"></a>整合測試</h3><ol><li>整合測試相依於真實物件</li><li>整合測試的結果不穩定</li><li>整合測試與單元測試應該被分開(見ch7.2.2)</li><li>整合測試執行時間長</li><li>依據現實狀況無法完全控制</li><li>缺點: 一次測試的東西太多</li></ol><h3 id="第一個單元測試"><a href="#第一個單元測試" class="headerlink" title="第一個單元測試"></a>第一個單元測試</h3><h3 id="理解測試趨動開發"><a href="#理解測試趨動開發" class="headerlink" title="理解測試趨動開發"></a>理解測試趨動開發</h3><ol><li>TDD 不保證產品會成功</li><li>步驟<ol><li>寫一個失敗的測試</li><li>寫一個符合測試預期的產品程式碼,以通過測試</li><li>重構</li></ol></li></ol><h3 id="TDD的核心技能"><a href="#TDD的核心技能" class="headerlink" title="TDD的核心技能"></a>TDD的核心技能</h3><ol><li>可維護、可讀、可靠(這本書的目的)</li><li>寫出可維護、可讀、可靠的測試不等於TDD,至於如何寫優秀的TDD,作者推薦閱讀<a href="https://www.tenlong.com.tw/products/9780321146533" target="_blank" rel="noopener">〈Test-Driven Development:by Example〉</a></li><li>就算執行TDD,也不保証能設計一個完善的系統,作者推薦閱讀<a href="http://tl.big5.zxhsd.com/kgsm/ts/big5/2010/07/30/1801246.shtml" target="_blank" rel="noopener">Growing Object-Oriented Software, Guided by Tests</a>與<a href="https://www.tenlong.com.tw/products/9789862017050" target="_blank" rel="noopener">無瑕的程式碼</a></li></ol><p>簡單說就是,</p><ul><li>寫好測試</li><li>測試先行(TDD)</li><li>設計</li></ul><p>作者認為這是三種技能, 同時學習三種技能門檻會相當的高, 最後導致放棄.</p><h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><ul><li>優秀的測試就是<ul><li>自動化</li><li>容易撰寫</li><li>執行快速</li><li>任何人都可以執行,並得到相同結果</li></ul></li></ul><h2 id="揪錯"><a href="#揪錯" class="headerlink" title="揪錯"></a>揪錯</h2><p><img src="https://i.imgur.com/olnQxQ2.jpg" alt=""></p><h2 id="本書資源"><a href="#本書資源" class="headerlink" title="本書資源"></a>本書資源</h2><ol><li><a href="https://github.com/royosherove/aout2" target="_blank" rel="noopener">Samples</a></li><li><a href="http://artofunittesting.com/" target="_blank" rel="noopener">The Art Of Unit Testing</a></li><li><a href="http://osherove.com/videos/" target="_blank" rel="noopener">Videos</a></li></ol><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;要知道的事&quot;&gt;&lt;a href=&quot;#要知道的事&quot; class=&quot;headerlink&quot; title=&quot;要知道的事&quot;&gt;&lt;/a&gt;要知道的事&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;這是&lt;a href=&quot;http://www.books.com.tw/products/00107656
      
    
    </summary>
    
    
      <category term="testing" scheme="http://blog.marsen.me/tags/testing/"/>
    
      <category term="TDD" scheme="http://blog.marsen.me/tags/TDD/"/>
    
      <category term="unit test" scheme="http://blog.marsen.me/tags/unit-test/"/>
    
      <category term="integration testing" scheme="http://blog.marsen.me/tags/integration-testing/"/>
    
  </entry>
  
  <entry>
    <title>[活動筆記]變異測試 - 一種改進測試和代碼的 「新」 方法</title>
    <link href="http://blog.marsen.me/2018/03/20/2018/mutation_testing/"/>
    <id>http://blog.marsen.me/2018/03/20/2018/mutation_testing/</id>
    <published>2018-03-19T17:44:00.000Z</published>
    <updated>2018-04-17T03:12:39.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="應該知道的事"><a href="#應該知道的事" class="headerlink" title="應該知道的事"></a>應該知道的事</h2><ul><li>範例使用Java</li><li>這場活動使用人肉找尋變異</li><li>實務上應使用工具</li><li>但是不能完全相信工具</li><li><a href="https://www.facebook.com/events/966762773499308/" target="_blank" rel="noopener">活動聯結</a></li><li>講師是 Odd-e 的姚若舟</li><li><a href="http://boolan.com/lecture/1000001089" target="_blank" rel="noopener">簡報preview版</a></li></ul><h2 id="什麼是變異"><a href="#什麼是變異" class="headerlink" title="什麼是變異 ?"></a>什麼是變異 ?</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>想像一下產品(<code>Prodction</code>)就是你的身體,<br>我們可以透過健康檢查(<code>Unit Test</code>);<br>檢查你的身體有沒有異狀 ?  </p><p>但是檢查真的可靠嗎 ?<br>比如說一般的流感的快篩只有50~60%的準確率,<br>我們的測試也無法達到100%準確率(這裡不是指覆蓋率喔).<br>如何抓到測試抓不到的<strong>漏網之魚</strong>就是變異測試的目的.  </p><p>我們透過讓 Prodction 產生變異(Mutation)<br>來確認我們的 Unit Test 是否可靠.</p><blockquote><p>題外話,當大流行的時候會跳過快篩節省醫療資源,<br>因為可能有一半(50%)的患者都是流感,<br>而快篩準確率也只有50%,加上時間及醫材成本,<br>不如直接開克流感能有效抑止疫情</p></blockquote><h3 id="變異測試-Mutation-Testing"><a href="#變異測試-Mutation-Testing" class="headerlink" title="變異測試(Mutation Testing)"></a>變異測試(Mutation Testing)</h3><p>變異後導致測試失敗？<br><strong>yes , good</strong><br>應該要失敗,表示你的測試有覆蓋到這個變異</p><p><strong>no , test not covered</strong><br>這表示你的測試並未</p><h3 id="測試不一定能補捉變異"><a href="#測試不一定能補捉變異" class="headerlink" title="測試不一定能補捉變異"></a>測試不一定能補捉變異</h3><p>比如說 <code>邊際值</code> 或是 <code>隱含的互動</code>;<br>測試覆蓋率100%也不一定能補捉變異<br>要麼少了test case,<br>要麼多了無意義的代碼<br>看看以下例子<br>ex:<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">foo(x,y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/ logic here</span></span><br><span class="line">    sideeffct();</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>反思一下, 測試過了代碼就沒問題 ?<br>不能捉到變異的測試,<br>有發揮它的功能嗎 ?<br>一般來說如果透過 TDD 進行軟體開發,<br>我們的測試應該是會恰巧符合一項 Test Case<br>而如果是先寫代碼再寫測試,<br>將很難通過變異測試(容易產生多餘的代碼)</p><h3 id="找到變異的幾個方向"><a href="#找到變異的幾個方向" class="headerlink" title="找到變異的幾個方向"></a>找到變異的幾個方向</h3><ul><li>邊界條件(<code>&lt;</code> =&gt; <code>&lt;=</code>)</li><li>反向條件(<code>&lt;</code> =&gt; <code>&gt;</code>)</li><li>移除條件(永真/永偽)</li><li>數學</li><li>遞增/遞減</li><li>常量</li><li>返回值</li><li>移除代碼</li></ul><h3 id="先寫代碼再寫測試有問題是很正常的"><a href="#先寫代碼再寫測試有問題是很正常的" class="headerlink" title="先寫代碼再寫測試有問題是很正常的"></a>先寫代碼再寫測試有問題是很正常的</h3><h2 id="Kata-PokerHands-範例"><a href="#Kata-PokerHands-範例" class="headerlink" title="Kata-PokerHands 範例"></a>Kata-PokerHands 範例</h2><h3 id="原碼-使用java"><a href="#原碼-使用java" class="headerlink" title="原碼(使用java)"></a><a href="https://github.com/JosephYao/Kata-PokerHands" target="_blank" rel="noopener">原碼(使用java)</a></h3><h3 id="變異實例"><a href="#變異實例" class="headerlink" title="變異實例"></a>變異實例</h3><p>有問題 ,反向測試案例不足</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span>List&lt;Integer&gt; <span class="title">getPairCardRanks</span><span class="params">(List&lt;Integer&gt; cardRanks)</span> </span>&#123;</span><br><span class="line">         List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; CARD_COUNT - <span class="number">1</span>; index++)</span><br><span class="line">         <span class="keyword">if</span> (isTwoNeighborCardRanksEquals(index, cardRanks))</span><br><span class="line">         result.add(cardRanks.get(index));</span><br><span class="line">         <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有問題 , -1 但是預期中的行為<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span>   Integer   <span class="title">getThreeOfAKindCardRank</span><span class="params">(List&lt;Integer\&gt; cardRanks)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; CARD_COUNT - <span class="number">2</span>; index++)</span><br><span class="line">     <span class="keyword">if</span> (isThreeNeighborCardRanksEquals(index, cardRanks))</span><br><span class="line">     <span class="keyword">return</span>   cardRanks.get(index);</span><br><span class="line">     <span class="keyword">throw</span>   <span class="keyword">new</span>   IllegalStateException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ol><li>沒有TDD 沒有單元測試,別跑變異測試</li><li>至少要有行級別的覆蓋率(line coverage)</li><li>分支覆蓋(Branch Coverage)好一點 仍不夠</li><li>在需求不變的情況下，再作變異測試</li><li>以變異測試的角度來說,覆蓋率100%是木有用的(testing coverage is useless)</li><li>發現變異怎麼辦？<ul><li>報告(記錄)</li><li>重現 </li><li>評估</li><li>修改 或 補測試</li></ul></li><li>依靠工具不要相信工具,上一步的評估<br>Ex: mock 物件會取代互動實際的行為,導致變異測試失敗</li></ol><h3 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h3><ul><li><a href="http://pitest.org" target="_blank" rel="noopener">http://pitest.org</a></li><li><a href="https://en.wikipedia.org/wiki/Mutation_testing" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Mutation_testing</a></li><li>使用 Sonarqube with mulations test(應該不用錢)</li><li>tudou.com/home/yaoruozhou</li></ul><h2 id="參與者心得"><a href="#參與者心得" class="headerlink" title="參與者心得"></a>參與者心得</h2><ol><li><p><a href="https://medium.com/@loverjersey/變異測試-mutation-test-一種提高測試和代碼質量的-新-方法速記-35bde79a5c7a" target="_blank" rel="noopener">變異測試 (Mutation Test) — 一種提高測試和代碼質量的 ”新” 方法速記</a></p></li><li><p><a href="https://dotblogs.com.tw/im_sqz777/2018/03/15/004634" target="_blank" rel="noopener">Test - 變異(Mutation)測試之你的測試到底是寫爽的，還是有效的?</a></p></li></ol><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><ol><li>佩服當天就能寫出文章的人</li><li>變異測試是好上加好的測試</li><li>Odd-e 的講師真的很粉棒, 雖然不致到毀三觀 不過眼界大開</li></ol><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol><li><a href="http://www.cnblogs.com/TongWee/p/4505289.html" target="_blank" rel="noopener">Mutation Testing(变异测试)</a></li></ol><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;應該知道的事&quot;&gt;&lt;a href=&quot;#應該知道的事&quot; class=&quot;headerlink&quot; title=&quot;應該知道的事&quot;&gt;&lt;/a&gt;應該知道的事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;範例使用Java&lt;/li&gt;
&lt;li&gt;這場活動使用人肉找尋變異&lt;/li&gt;
&lt;li&gt;實務上應使用工具
      
    
    </summary>
    
    
      <category term="testing" scheme="http://blog.marsen.me/tags/testing/"/>
    
      <category term="TDD" scheme="http://blog.marsen.me/tags/TDD/"/>
    
      <category term="unit test" scheme="http://blog.marsen.me/tags/unit-test/"/>
    
      <category term="mutation teseting" scheme="http://blog.marsen.me/tags/mutation-teseting/"/>
    
  </entry>
  
  <entry>
    <title>[活動筆記]蝦皮購物新加坡研發團隊技術分享會</title>
    <link href="http://blog.marsen.me/2018/03/15/2018/shopee_tech_sharing/"/>
    <id>http://blog.marsen.me/2018/03/15/2018/shopee_tech_sharing/</id>
    <published>2018-03-15T09:00:12.000Z</published>
    <updated>2018-04-17T03:12:39.593Z</updated>
    
    <content type="html"><![CDATA[<h2 id="應該不用知道的事"><a href="#應該不用知道的事" class="headerlink" title="應該不用知道的事"></a>應該不用知道的事</h2><ol><li>雖然是「技術分享會」實際上在徵才</li><li>不過還是有半場的技術分享</li><li>91app 至少去了10 個人(含前員工) </li><li>這篇文章對你應該沒有幫助</li></ol><h2 id="有關蝦皮"><a href="#有關蝦皮" class="headerlink" title="有關蝦皮"></a>有關蝦皮</h2><ul><li>屬於<a href="http://www.seagroup.com/home" target="_blank" rel="noopener">Sea 集團</a>的一部份</li><li>東南亞多國服務(新加坡、泰國、馬來西亞、印度、台灣、越南…)</li><li>63e Request / Day</li><li>8G IO / Mins</li></ul><h2 id="選擇"><a href="#選擇" class="headerlink" title="選擇"></a>選擇</h2><ul><li>Native App / Web / Hybird / RN ?</li><li>Clound / Self machine ?</li><li>Php/ Nodejs / RoR / Django ?</li><li>Apache / Ngnix ?</li><li>C ++ / Java / GoLang</li><li>Memcahed / Redis ?</li><li>SPA / MPA ?</li><li>Mesos / Kubernate ?</li></ul><h2 id="Qiz-amp-Ans"><a href="#Qiz-amp-Ans" class="headerlink" title="Qiz &amp; Ans"></a>Qiz &amp; Ans</h2><h5 id="1"><a href="#1" class="headerlink" title="1"></a>1</h5><blockquote><p>用戶下單的時候, 先收錢還是先扣庫存?<br>扣掉最後一件庫存後, 收錢失敗怎麼辦？<br>你已經把「賣完」訊息發給了賣家, 怎麼辦？</p></blockquote><h5 id="2"><a href="#2" class="headerlink" title="2"></a>2</h5><blockquote><p>計算金額用整數還是浮點數？(浮點數不準)</p></blockquote><h5 id="3"><a href="#3" class="headerlink" title="3"></a>3</h5><blockquote><p>Android 一共有幾種螢幕的 DPI ?<br>Android WebView 和 Chrome 的 Webkit 有何不同 ?</p></blockquote><h5 id="4"><a href="#4" class="headerlink" title="4"></a>4</h5><blockquote><p>Web Service 花最多時間在處理什麼 ?<br>如何壓搾最高的吞吐量 ?<br>IO, USE async</p></blockquote><h5 id="5"><a href="#5" class="headerlink" title="5"></a>5</h5><blockquote><p>什麼樣的情境適合增加伺服器數量來增進效能?<br>stateless<br>那有狀態怎麼辦 ? </p></blockquote><h5 id="6"><a href="#6" class="headerlink" title="6"></a>6</h5><blockquote><p>load balancer 效能到達瓶頸怎麼辦 ?<br>IP</p></blockquote><h5 id="7"><a href="#7" class="headerlink" title="7"></a>7</h5><blockquote><p>一天 25TB 的 Log 數量,怎麼不會查到天荒地老</p></blockquote><h5 id="8"><a href="#8" class="headerlink" title="8"></a>8</h5><blockquote><p>Cache &amp; 超賣問題<br>什麼時候要清 Cache ?</p></blockquote><h5 id="9"><a href="#9" class="headerlink" title="9"></a>9</h5><blockquote><p>Database Master 與 Slave 哪個壓力大 ?(Slave)<br>增加 index 的代價為何 ?(Space)<br>Table 多大要 shard ?<br>Database 多大要分庫 ?<br>分庫如何作 transaction ?</p></blockquote><h2 id="實踐"><a href="#實踐" class="headerlink" title="實踐"></a>實踐</h2><ol><li>Prototype 簡單 Production 困難 (邊際效應/熵)</li><li>可靠:言出必行,作不到也要早點說(知難行易)</li><li>Redis 的資料超過 64G 就無法用 <a href="http://redisdoc.com/server/bgsave.html" target="_blank" rel="noopener">bgsave</a> 有效存檔</li><li>在 Prodction 千萬別用 Redis 的 <a href="https://redis.io/commands/keys" target="_blank" rel="noopener">key</a> 指令</li><li>衡量的基準(benchmark)為何？</li><li>不要對邏輯下command(不要寫前因後果)<ul><li>Dont command How</li><li>Command Why</li></ul></li><li>道<ul><li>Collect your dots first</li><li>Connecting the dots</li></ul></li></ol><h2 id="持久發展的研發團隊"><a href="#持久發展的研發團隊" class="headerlink" title="持久發展的研發團隊"></a>持久發展的研發團隊</h2><ul><li>knowledge</li><li>保持開放</li><li>尊重事實</li><li>信任</li><li>可靠</li><li>找到根本原因(root cause)</li><li>分析 修復 記錄</li><li>Docs<ul><li>connection docs</li><li>collection docs</li></ul></li></ul><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><ul><li>白箱測試</li><li>黑箱測試</li></ul><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul><li>Hypergraph</li><li>Tech Stack</li><li>Roles<ul><li>contries PM</li><li>fucntion PM</li></ul></li><li>Scurm 是跑給老闆看的(!!?)</li><li>馬來西亞不用小豬ICON(各地風俗民情不同)</li></ul><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://careers.shopee.com" target="_blank" rel="noopener">https://careers.shopee.com</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;應該不用知道的事&quot;&gt;&lt;a href=&quot;#應該不用知道的事&quot; class=&quot;headerlink&quot; title=&quot;應該不用知道的事&quot;&gt;&lt;/a&gt;應該不用知道的事&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;雖然是「技術分享會」實際上在徵才&lt;/li&gt;
&lt;li&gt;不過還是有半場的技術分享&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[翻譯]C# 的常見錯誤</title>
    <link href="http://blog.marsen.me/2018/02/12/2018/csharp_common_mistakes_1/"/>
    <id>http://blog.marsen.me/2018/02/12/2018/csharp_common_mistakes_1/</id>
    <published>2018-02-11T18:12:47.000Z</published>
    <updated>2018-04-17T03:12:39.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="出處"><a href="#出處" class="headerlink" title="出處"></a>出處</h2><p><a href="http://www.dotnetcurry.com/csharp/1417/csharp-common-mistakes" target="_blank" rel="noopener">http://www.dotnetcurry.com/csharp/1417/csharp-common-mistakes</a></p><h2 id="線上工具"><a href="#線上工具" class="headerlink" title="線上工具"></a>線上工具</h2><p><a href="https://dotnetfiddle.net" target="_blank" rel="noopener">https://dotnetfiddle.net</a></p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>C#是個好棒棒的言語,但是它仍會有超乎你想像的行為,<br>而且就算你是有經驗的開發者,你也要看一看這篇文章.<br>這篇文章不講幹話,還會給你代碼喔  </p><p><img src="https://i.imgur.com/wXjvug6.jpg" alt="C# Quiz"></p><h3 id="Null-Value"><a href="#Null-Value" class="headerlink" title="Null Value"></a>Null Value</h3><p>Null 很危險啦, 你別在 Null 身上調用方法<br>(譯注:在公司的維運人員應該還蠻常見這個錯誤的 一ω一)  </p><blockquote><p>We are all aware that null values can be dangerous, if not handled properly.<br>Dereferencing a null-valued variable (i.e. calling a method on it or accessing one of its properties)<br>will result in a NullReferenceException, as demonstrated with the following sample code:  </p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> nullValue = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">bool</span> areNullValuesEqual = nullValue.Equals(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>就安全的角度,好像我們要不停的檢查 reference type 是不是 null ,<br>雖然這件事常常發生,好像也很難說成是非預期的行為了…<br>(譯注:又有種中槍的感覺)  </p><blockquote><p>To be on the safer side, we should always make sure that reference type values are not null before dereferencing them.<br>Failing to do so could result in an unhandled exception in a specific edge case.<br>Although such a mistake occasionally happens to everyone, we could hardly call it unexpected behavior.  </p></blockquote><p>看看這個代碼, null 值在 runtime 的時候不會有 type 的  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> nullString = (<span class="keyword">string</span>)<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">bool</span> isStringType = nullString <span class="keyword">is</span> <span class="keyword">string</span>;</span><br></pre></td></tr></table></figure><p><strong>No</strong>, null 值在 runtime 的時候不會有 type 的<br><strong>No</strong>, null 值在 runtime 的時候不會有 type 的<br><strong>No</strong>, null 值在 runtime 的時候不會有 type 的<br>很重要所以說三次,<br>當然你也別想呼叫 <code>GetType()</code> 方法  </p><blockquote><p>The correct answer is <strong>No</strong>.  </p><p>A null value has no type at runtime.  </p><p>In a way, this also affects reflection.<br>Of course, you can’t call GetType() on a null value because a NullReferenceException would get thrown:  </p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> nullValue = <span class="literal">null</span>;</span><br><span class="line">Type nullType = nullValue.GetType();</span><br></pre></td></tr></table></figure><p>純量呢？</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> intValue = <span class="number">5</span>;</span><br><span class="line">Nullable&lt;<span class="keyword">int</span>&gt; nullableIntValue = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">bool</span> areTypesEqual = intValue.GetType() == nullableIntValue.GetType();</span><br></pre></td></tr></table></figure><p>那我們可不可能用反射(reflection)區分 nullable 跟 non-nullable 的值？<br>答案是不可能, 看看後面的代碼  </p><blockquote><p>Is it possible to distinguish between a nullable and a non-nullable value type using reflection?  </p><p>The answer is <strong>No</strong>.  </p><p>The same type will be returned for both variables in the above code: System.Int32.<br>This does not mean that reflection has no representation for Nullable<t>, though.  </t></p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Type intType = <span class="keyword">typeof</span>(<span class="keyword">int</span>);</span><br><span class="line">Type nullableIntType = <span class="keyword">typeof</span>(Nullable&lt;<span class="keyword">int</span>&gt;);</span><br><span class="line"><span class="keyword">bool</span> areTypesEqual = intType == nullableIntType;</span><br></pre></td></tr></table></figure><p>上面兩段程式在runtime拿到的type很不一樣喔,<br>一個是<code>System.Int32</code>一個是 <code>System.Nullable&#39;1\[System.Int32\]</code>  </p><h3 id="當-null-遇上多載方法-Handling-Null-values-in-Overloaded-methods"><a href="#當-null-遇上多載方法-Handling-Null-values-in-Overloaded-methods" class="headerlink" title="當 null 遇上多載方法 (Handling Null values in Overloaded methods)"></a>當 null 遇上多載方法 (Handling Null values in Overloaded methods)</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">string</span> <span class="title">OverloadedMethod</span>(<span class="params"><span class="keyword">object</span> arg</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"object parameter"</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">string</span> <span class="title">OverloadedMethod</span>(<span class="params"><span class="keyword">string</span> arg</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"string parameter"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面有兩個<code>OverloadedMethod</code><br>猜猜看,傳入 null 時會呼叫哪一個方法？  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = OverloadedMethod(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>有人會猜編譯失敗嗎？<br>MAGIC ! 竟然可以編譯成功, 而回傳的值是 <strong>“string parameter”</strong> ,<br>一般來說,在編譯時期會作型別檢查,相同簽章的方法參數可以被轉型成另一個型別時,是可以編譯成功的喔.<br>而有明確型別的方法將被優先調用(譯注:求這段.Net Framework的原碼來看一下,知道的人請告訴我)  </p><p>如果要指定 null 參數呼叫的多載方法就要對 null 轉型唷,可以參考下面的方法.  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = OverloadedMethod((<span class="keyword">object</span>)<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h3 id="算術運算-Arithmetic-Operations"><a href="#算術運算-Arithmetic-Operations" class="headerlink" title="算術運算 (Arithmetic Operations)"></a>算術運算 (Arithmetic Operations)</h3><p>好像很少用位移運算吼？<br>回憶一下 左移移 右移移  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shifted = <span class="number">0</span>b1 &lt;&lt; <span class="number">1</span>; <span class="comment">// = 0b10</span></span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shifted = <span class="number">0</span>b1 &gt;&gt; <span class="number">1</span>; <span class="comment">// = 0b0</span></span><br></pre></td></tr></table></figure><p>bits 跑到底並不會重頭開始喔,一直移位到爆掉就變 0 了.<br>(這裡會用32是因為 int 是32bit的數值,你可以試試放超過32的數值到for loop裡會發生什麼事)  </p><blockquote><p>The bits don’t wrap around when they reach the end.<br>That’s why the result of the second expression is 0.<br>The same would happen if we shifted the bit far enough to the left (32 bits because integer is a 32-bit number):  </p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shifted = <span class="number">0</span>b1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">shifted = shifted &lt;&lt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The result would again be 0.  </p></blockquote><p>那我們是不是可以一次移32bit,讓它一次變成0呢？<br>靠北啊 竟然不行捏, 你只會拿到 1,<br>這跟運算子(operator)基本運算有關,在作位元運算的時候,<br>會拿第一個運算數除以第二個運算數後取餘數,<br>這導致我們只會拿 32 % 32 的結果 , 也就是 1 啦<br>(譯注:這段其實我不是很確定,如果錯誤請糾正)  </p><blockquote><p>However, the bit shifting operators have a second operand.<br>Instead of shifting to the left by 1 bit 32 times, we can shift left by 32 bits and get the same result.  </p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shifted = <span class="number">0</span>b1 &lt;&lt; <span class="number">32</span>;</span><br></pre></td></tr></table></figure><blockquote><p>Right? <strong>Wrong.</strong>  </p><p>The result of this expression will be 1. Why?  </p><p>Because that’s how the operator is defined. Before applying the operation,<br>the second operand will be normalized to the bit length of the first operand with the modulo operation,<br>i.e. by calculating the remainder of dividing the second operand by the bit length of the first operand.  </p><p>The first operand in the example we just saw was a 32-bit number, hence: 32 % 32 = 0.<br>Our number will be shifted left by 0 bits. That’s not the same as shifting it left by 1 bit 32 times.  </p></blockquote><p>好棒棒 你竟然可以看到這裡,<br>那我們繼續討論 &amp; (and) 跟 | (or) 運算子吧,<br>這兩個運算子跟一般的運算子有點不一樣  </p><ul><li>通常只要看運算子的第一個運算數就能得知結果  </li><li>在有掛 [Flag] atturibute的列舉它們好好用(看一下範例)  </li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Flags</span>]</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">enum</span> Colors</span><br><span class="line">&#123;</span><br><span class="line">    None = <span class="number">0</span>b0,</span><br><span class="line">    Red = <span class="number">0</span>b1,</span><br><span class="line">    Green = <span class="number">0</span>b10,</span><br><span class="line">    Blue = <span class="number">0</span>b100</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Colors color = Colors.Red | Colors.Green;</span><br><span class="line"><span class="keyword">bool</span> isRed = (color &amp; Colors.Red) == Colors.Red;</span><br></pre></td></tr></table></figure><p>上面這個刮號可不能省略喔, 因為(&amp;)運算符的優先順序低於(==)運算符,<br>不過這段程式沒有刮號的話連編譯都不會過,真是好加在<br>另外在 .NET framework 4.0 之後的版本提供更棒的方法去檢查flags  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> isRed = color.HasFlag(Colors.Red);</span><br></pre></td></tr></table></figure><h3 id="Math-Round"><a href="#Math-Round" class="headerlink" title="Math.Round()"></a>Math.Round()</h3><p>猜一下這個值會是多少？  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rounded = Math.Round(<span class="number">1.5</span>);</span><br></pre></td></tr></table></figure><p>猜2的就答對了, 下一題<br>猜一下這個值會是多少？  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rounded = Math.Round(<span class="number">2.5</span>);</span><br></pre></td></tr></table></figure><p>還是2 ,<br>因為預設會取最接近的偶數</p><blockquote><p><strong>No.</strong> The result will be 2 again. By default,<br>the midpoint value will be rounded to the nearest even value.<br>You could provide the second argument to the method to request such behavior explicitly:  </p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rounded = Math.Round(<span class="number">2.5</span>, MidpointRounding.ToEven);</span><br></pre></td></tr></table></figure><p>這個行為可以透過<code>MidpointRounding</code>參數改變  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rounded = Math.Round(<span class="number">2.5</span>, MidpointRounding.AwayFromZero);</span><br></pre></td></tr></table></figure><p>另外要小心浮點數的精度問題,<br>以下的例子結果會是1,( 因為float的0.1實際上小於0.1 一ω一 )<br>這提醒我們在處理精確數值時,應轉換成整數處理.<br>(譯注:使用 <a href="https://dotnetfiddle.net" target="_blank" rel="noopener">dotnetfiddle</a> 時並不會有這個問題, 在windows 環境下測試的確會有問題)  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">value</span> = <span class="number">1.4</span>f;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rounded = Math.Round(<span class="keyword">value</span> + <span class="number">0.1</span>f);</span><br></pre></td></tr></table></figure><h3 id="類別初始化"><a href="#類別初始化" class="headerlink" title="類別初始化"></a>類別初始化</h3><p>最佳實踐建我我們應該避免在建構子初始化類別,<br>特別是靜態建構子.<br>在初始化一個類別的順序如下</p><ol><li>靜態欄位</li><li>靜態建構子</li><li>實體欄位</li><li>實體建構子</li></ol><p>看看這個例子<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Config</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> ThrowException &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FailingClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">FailingClass</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Config.ThrowException)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>當我們嚐試實例化FailingClass時,你會得到Exception;<br>值得注意的事,你拿到的會是<code>TypeInitializationException</code><br>而並不是<code>InvalidOperationException</code>,  </p><p>那麼我們是不是可以試著透過try catch補捉錯誤,<br>並修改靜態屬性,重新實體化class呢？<br><strong>答案是不行</strong></p><p>一個靜態建構值,如果它拋出一個異常,<br>那麼無論何時你想創建一個實例或以任何其他方式訪問這個類,<br>這個異常都會被重新拋出.  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> failedInstance = <span class="keyword">new</span> FailingClass();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (TypeInitializationException) &#123; &#125;</span><br><span class="line">Config.ThrowException = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> FailingClass();</span><br></pre></td></tr></table></figure><p>這個類別在程序重啟前是不能再被使用了(會拋出錯誤),<br>這在 C# 是個非常糟糕的實踐,<br>千萬別這樣設計你的類別.  </p><blockquote><p>The static constructor for a class is only called once.<br>If it throws an exception, then this exception will be rethrown<br>whenever you want to create an instance or access the class in any other way.  </p><p>The class becomes effectively unusable until the process (or the application domain) is restarted.<br>Yes, having even a minuscule chance that the<br>static constructor will throw an exception, is a very bad idea.  </p></blockquote><h4 id="繼承與類別初始化"><a href="#繼承與類別初始化" class="headerlink" title="繼承與類別初始化"></a>繼承與類別初始化</h4><p>繼承的類別初始化執行順序更加複雜,看看下面的例子</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseClass</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        VirtualMethod(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">VirtualMethod</span>(<span class="params"><span class="keyword">int</span> dividend</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dividend / <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DerivedClass</span> : <span class="title">BaseClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> divisor;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DerivedClass</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        divisor = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">int</span> <span class="title">VirtualMethod</span>(<span class="params"><span class="keyword">int</span> dividend</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">base</span>.VirtualMethod(dividend / divisor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當我們初始化 DerivedClass</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> DerivedClass();</span><br></pre></td></tr></table></figure><p>你會得到一個除0的錯誤 <code>DivideByZeroException</code><br>這與執行順序有關</p><ol><li>呼叫 BaseClass 建構子</li><li>執行 DerivedClass VirtualMethod (overrid BaseClass)</li><li>divisor 未賦值拋出 <code>DivideByZeroException</code></li></ol><h2 id="多形-Polymorphism"><a href="#多形-Polymorphism" class="headerlink" title="多形 Polymorphism"></a>多形 Polymorphism</h2><p>這個例子只是要說明多形的概念與應用,<br>你可以透過轉形呼叫基底類別的方法.  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> DerivedClass();</span><br><span class="line"><span class="keyword">var</span> result = instance.Method(); <span class="comment">// -&gt; Method in DerivedClass</span></span><br><span class="line">result = ((BaseClass)instance).Method(); <span class="comment">// -&gt; Method in BaseClass</span></span><br><span class="line"><span class="comment">// The correct answer is: by using the new modifier.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">string</span> <span class="title">Method</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Method in BaseClass "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DerivedClass</span> : <span class="title">BaseClass</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> new <span class="keyword">string</span> <span class="title">Method</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Method in DerivedClass"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>It’s typically used to hide the interface methods from the consumers of the class implementing it,<br>unless they cast the instance to that interface.<br>But it works just as well if we want to have two different implementations of a method inside a single class.<br>It’s difficult to think of a good reason for doing it, though.</p></blockquote><p>另外一個例子是明確實作介面方法,<br>如果你的類別已經有同名的方法的話.<br>雖然沒有什麼好理由建議你這樣作.<br>(譯注:實務上我有在遇到歷史共業這樣作過…)  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> DerivedClass();</span><br><span class="line"><span class="keyword">var</span> result = instance.Method(); <span class="comment">// -&gt; Method in DerivedClass</span></span><br><span class="line">result = ((IInterface)instance).Method(); <span class="comment">// -&gt; Method belonging to IInterface</span></span><br><span class="line">It’s explicit interface implementation.</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">string</span> <span class="title">Method</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DerivedClass</span> : <span class="title">IInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Method</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Method in DerivedClass"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">string</span> IInterface.Method()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Method belonging to IInterface"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">It’s</span><br></pre></td></tr></table></figure><h2 id="迭代器-Iterators"><a href="#迭代器-Iterators" class="headerlink" title="迭代器 Iterators"></a>迭代器 Iterators</h2><p>小心 Iterators 的陷阱<br>看看以下<a href="https://dotnetfiddle.net/BxfF0d" target="_blank" rel="noopener">代碼</a>:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> IEnumerable&lt;<span class="keyword">int</span>&gt; <span class="title">GetEnumerable</span>(<span class="params">StringBuilder log</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> context = <span class="keyword">new</span> Context(log))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Enumerable.Range(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Context</span> : <span class="title">IDisposable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> StringBuilder log;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span>(<span class="params">StringBuilder log</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.log = log;</span><br><span class="line">        <span class="keyword">this</span>.log.AppendLine(<span class="string">"Context created"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.log.AppendLine(<span class="string">"Context disposed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假設我們 foreach 呼叫 GetEnumerable 方法,<br>你預期 Context 類別會有什麼樣的行為？<br>我們會印出以下的output嗎？</p><blockquote><p>Context created<br>1<br>2<br>3<br>4<br>5<br>Context disposed</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> log = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="function"><span class="keyword">var</span> number <span class="keyword">in</span> <span class="title">GetEnumerable</span>(<span class="params">log</span>))</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    log.AppendLine(<span class="string">$"<span class="subst">&#123;number&#125;</span>"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不是的,<br>實際上印出的是</p><blockquote><p>Context created<br>Context disposed<br>1<br>2<br>3<br>4<br>5</p></blockquote><p>這點很重要,<br>因為實務上你很有可能 using dbconnetion 之類的物件,<br>那麼你在取得真正的資料之前,<br>你的連線就已經中斷了 </p><blockquote><p>This means that in our real world database example, the code would fail –<br>the connection would be closed before the values could be read from the database.</p></blockquote><p>看看以下的<a href="https://dotnetfiddle.net/IgJaak" target="_blank" rel="noopener">修正</a></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> IEnumerable&lt;<span class="keyword">int</span>&gt; <span class="title">GetEnumerable</span>(<span class="params">StringBuilder log</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> context = <span class="keyword">new</span> Context(log))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> i <span class="keyword">in</span> Enumerable.Range(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>譯注:看到這裡對 <code>yield return</code> 的使用情境才比較有感啊…</p><p>如果你不太熟<code>yield return</code>,其實它只是個語法糖,允許增量執行,<br>參考以下範例,或許能更容易理解</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> IEnumerable&lt;<span class="keyword">int</span>&gt; <span class="title">GetCustomEnumerable</span>(<span class="params">StringBuilder log</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    log.AppendLine(<span class="string">"before 1"</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    log.AppendLine(<span class="string">"before 2"</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    log.AppendLine(<span class="string">"before 3"</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    log.AppendLine(<span class="string">"before 4"</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    log.AppendLine(<span class="string">"before 5"</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    log.AppendLine(<span class="string">"before end"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> log = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">log.AppendLine(<span class="string">"before enumeration"</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="function"><span class="keyword">var</span> number <span class="keyword">in</span> <span class="title">GetCustomEnumerable</span>(<span class="params">log</span>))</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    log.AppendLine(<span class="string">$"<span class="subst">&#123;number&#125;</span>"</span>);</span><br><span class="line">&#125;</span><br><span class="line">log.AppendLine(<span class="string">"after enumeration"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>before enumeration<br>before 1<br>1<br>before 2<br>2<br>before 3<br>3<br>before 4<br>4<br>before 5<br>5<br>before end<br>after enumeration</p></blockquote><p>值得注意的事, 如果你在loop當中重複執行以上的代碼,<br>那麼 Iterators 也會重複執行</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> log = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">var</span> enumerable = GetCustomEnumerable(log);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    log.AppendLine(<span class="string">$"enumeration #<span class="subst">&#123;i&#125;</span>"</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> number <span class="keyword">in</span> enumerable)</span><br><span class="line">    &#123;</span><br><span class="line">        log.AppendLine(<span class="string">$"<span class="subst">&#123;number&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出如下,可以明顯看到 <code>GetCustomEnumerable</code> 方法,<br>實際上被隱含的執行了兩次,<br>這在 Code Review 的階段也是難以被察覺的.</p><blockquote><p>enumeration #1<br>before 1<br>1<br>before 2<br>2<br>before 3<br>3<br>before 4<br>4<br>before 5<br>5<br>before end<br>enumeration #2<br>before 1<br>1<br>before 2<br>2<br>before 3<br>3<br>before 4<br>4<br>before 5<br>5<br>before end</p></blockquote><p>比較好的作法是將 <code>IEnumerable</code> ToList(),<br>如果你真的需要對 <code>IEnumerable</code> 的結果作 loop 的操作</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> log = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">var</span> enumerable = GetCustomEnumerable(log).ToList();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    log.AppendLine(<span class="string">$"enumeration #<span class="subst">&#123;i&#125;</span>"</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> number <span class="keyword">in</span> enumerable)</span><br><span class="line">    &#123;</span><br><span class="line">        log.AppendLine(<span class="string">$"<span class="subst">&#123;number&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>輸出結果</p><blockquote><p>before 1<br>before 2<br>before 3<br>before 4<br>before 5<br>before end<br>enumeration #1<br>1<br>2<br>3<br>4<br>5<br>enumeration #2<br>1<br>2<br>3<br>4<br>5</p></blockquote><h2 id="譯者小結"><a href="#譯者小結" class="headerlink" title="譯者小結"></a>譯者小結</h2><p>如果真的能夠預期所有的行為的開發人員,<br>真的是好棒棒,<br>對我來說 static class constructor 的行為是超乎預期的,<br>然後對 <code>yield return</code> 的使用場景更有感覺了.<br>本來預計農曆年就可以完成的翻譯,<br>竟然也拖了這麼久,看來我英文還是不行啊. </p><p>希望對大家有幫助,也請多多看原文 :)</p><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;出處&quot;&gt;&lt;a href=&quot;#出處&quot; class=&quot;headerlink&quot; title=&quot;出處&quot;&gt;&lt;/a&gt;出處&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.dotnetcurry.com/csharp/1417/csharp-common-mistakes
      
    
    </summary>
    
    
      <category term="C#" scheme="http://blog.marsen.me/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>[學習筆記]AWS 註冊到建立安全性帳戶</title>
    <link href="http://blog.marsen.me/2018/01/26/cloud_learn/aws_startup_with_iam/"/>
    <id>http://blog.marsen.me/2018/01/26/cloud_learn/aws_startup_with_iam/</id>
    <published>2018-01-26T06:24:16.000Z</published>
    <updated>2018-04-17T03:12:39.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="該知道的事"><a href="#該知道的事" class="headerlink" title="該知道的事"></a>該知道的事</h2><ol><li>僅作為學習 AWS 的過程記錄用</li><li>可能對你有幫助</li><li>可能對你沒幫助</li><li>有沒有幫助都歡迎你提出問題與討論 </li></ol><h2 id="創建帳號"><a href="#創建帳號" class="headerlink" title="創建帳號"></a>創建帳號</h2><p>這段蠻簡單的,不贅敘<br>特別一提的事<code>可以使用有VISA的金融卡作金額控管</code><br>比起信用卡動輒數萬到數十萬的額度,<br>金融卡可以更彈性,而且精準的控制預算.</p><p>另外說一下,現在AWS有一年的免費額度(已經有好一陣子了),<br><del>在註冊流程跳過付款方式的設定,</del><br><del>實際上也是可以操作的AWS的(目前只有設定IAM).</del><br>(2018/01/31更新)<br>確定<code>可以使用有VISA的金融卡</code>開戶,<br>另外當要實際使用 AWS 的服務時 EX: EC2, Lambda etc…<br>需要綁定信用卡(VISA金融卡也可以)才能繼續使用.</p><p>綁定的過程會需要輸入電話,<br>AWS 會撥一通電話給你,<br>螢幕上會出現4個數字,<br>照畫面輸入即可完成信用卡(VISA金融卡)的驗証.</p><h2 id="權限控管"><a href="#權限控管" class="headerlink" title="權限控管"></a>權限控管</h2><h3 id="Root-User"><a href="#Root-User" class="headerlink" title="Root User"></a>Root User</h3><p><img src="https://i.imgur.com/kRBApSO.jpg" alt=""><br>完成註冊後,一開始只能使用email登入,這個帳號可以存取AWS所有服務.<br>AWS<strong>不建議使用Root User作為日常的管理帳戶, Root User 應該只被用來建立第一個IAM</strong></p><h4 id="重點項目"><a href="#重點項目" class="headerlink" title="重點項目"></a>重點項目</h4><ol><li><p>Root User 啟用 <a href="https://aws.amazon.com/iam/details/mfa/" target="_blank" rel="noopener">MFA</a><br><img src="https://i.imgur.com/X3T5poV.jpg" alt=""><br>首先要下載驗証程式(Google Authenticator),<br>然後下一步到以下畫面時, 用Authenticator掃瞄QR Code,<br><strong>連續輸入兩次授權碼(輸入完第一組後,等待新的授權碼出現再輸入)</strong><br><img src="https://i.imgur.com/viNBe2p.jpg" alt=""><br>可以在 <a href="https://console.aws.amazon.com/iam/home" target="_blank" rel="noopener">IAM Console</a> 檢查成功了沒<br><img src="https://i.imgur.com/JcC9NVz.jpg" alt=""></p></li><li><p>建立 IAM User 與指定 Group 權限<br>AWS IAM 的權限觀念是透過 User 與 Group 來組合的,<br>權限是授與 Group , 而 User 隸屬於 Group 便擁有其權限,<br>同時 AWS 提供多組(347組)預設的 Policies, 讓人選擇<br>當然也可以建立自已的 Policy.<br><em>*不確定有沒有反向的 Policy ,</em><br><em>如果有當不同的 Group Policy 有衝突時該如何處理.</em></p></li></ol><p><img src="https://i.imgur.com/Ry9M2sj.jpg" alt=""><br>建立使用者時, 使用AutoGenerated Password時<br>要記得取得 password<br>在最後一步會按下show就會顯示<br><img src="https://i.imgur.com/8DOmpsg.jpg" alt=""></p><ol><li>設定 AWS Account ID 與 Alias<br><img src="https://i.imgur.com/ETV1LMR.jpg" alt=""></li></ol><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h2><ol><li>如何禁用 Root user 登入 ? 可以停用而不刪除一個 user account 嗎？<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root account 無法停用</span><br><span class="line">IAM User 可以透過 disable passwd 方式停用</span><br><span class="line">root account 基本的 practice</span><br><span class="line">1. 啟用 MFA</span><br><span class="line">2. 移除 Access Creditenail</span><br><span class="line">概念就跟 Winodws Administrator or Linux root 一樣</span><br><span class="line">需要時再用</span><br></pre></td></tr></table></figure></li></ol><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html" target="_blank" rel="noopener">Root User Account</a></li><li><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#create-iam-users" target="_blank" rel="noopener">建立第一個IAM USER</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;該知道的事&quot;&gt;&lt;a href=&quot;#該知道的事&quot; class=&quot;headerlink&quot; title=&quot;該知道的事&quot;&gt;&lt;/a&gt;該知道的事&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;僅作為學習 AWS 的過程記錄用&lt;/li&gt;
&lt;li&gt;可能對你有幫助&lt;/li&gt;
&lt;li&gt;可能對你沒幫助&lt;/
      
    
    </summary>
    
    
      <category term="AWS" scheme="http://blog.marsen.me/tags/AWS/"/>
    
      <category term="Root User" scheme="http://blog.marsen.me/tags/Root-User/"/>
    
      <category term="IAM" scheme="http://blog.marsen.me/tags/IAM/"/>
    
  </entry>
  
  <entry>
    <title>[好文分享]應用部署的六種策略</title>
    <link href="http://blog.marsen.me/2018/01/07/2018/six_strategies_for_application_deployment/"/>
    <id>http://blog.marsen.me/2018/01/07/2018/six_strategies_for_application_deployment/</id>
    <published>2018-01-07T10:47:51.000Z</published>
    <updated>2018-04-17T03:12:39.596Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引用出處"><a href="#引用出處" class="headerlink" title="引用出處"></a>引用出處</h2><ul><li><a href="https://thenewstack.io/deployment-strategies/" target="_blank" rel="noopener">原文出處</a></li><li><a href="https://itw01.com/22ULE7O.html" target="_blank" rel="noopener">中譯出處</a></li></ul><h2 id="正文開始"><a href="#正文開始" class="headerlink" title="正文開始"></a>正文開始</h2><p>目前有各種各樣的技術來將新應用部署到生產環境，<br>所以權衡對系統和終端使用者的影響降至最少，選擇正確的方式是非常重要的。<br>本文將著重討論如下部署策略：   </p><ul><li>重建部署：版本A下線後版本B上線 </li><li>滾動部署（滾動更新或者增量釋出）：版本B緩慢更新並替代版本A </li><li>藍綠部署：版本B並行與版本A釋出，然後流量切換到版本B </li><li>金絲雀部署：版本B向一部分使用者釋出，然後完全放開 </li><li>A/B部署布：版本B只向特定條件的使用者釋出 </li><li>影子部署：版本B接受真實的流量請求，但是不產生響應 </li></ul><p>我們來看一下每個策略最適合哪種使用者使用場景。<br>爲了簡化，我們使用 <a href="https://kubernetes.io" target="_blank" rel="noopener">Kubernetes</a> ，並用 <a href="https://github.com/ContainerSolutions/k8s-deployment-strategies" target="_blank" rel="noopener">Minikube</a> 進行例子演示。<br>每個策略的配置例子和詳細步驟都可以在這個 <a href="https://github.com/ContainerSolutions/k8s-deployment-strategies" target="_blank" rel="noopener">git倉庫</a> 上找到。   </p><h3 id="重建部署"><a href="#重建部署" class="headerlink" title="重建部署"></a>重建部署</h3><p>重建策略是一個冗餘的方式，它包含下線版本A，然後部署版本B。<br>這個方式意味著服務的宕機時間依賴於應用下線和啟動耗時。<br><img src="/images/2018/six_strategies_for_application_deployment/recreate.gif" alt=""></p><p>優點： </p><ul><li>便於設定 </li><li>應用狀態完整更新 </li></ul><p>缺點： </p><ul><li>對使用者影響很大，預期的宕機時間取決於下線時間和應用啟動耗時 </li></ul><h3 id="滾動部署"><a href="#滾動部署" class="headerlink" title="滾動部署"></a>滾動部署</h3><p>滾動部署策略是指通過逐個替換應用的所有例項，<br>來緩慢釋出應用的一個新版本。<br>通常過程如下：<br>在負載排程後有個版本A的應用例項池，<br>一個版本B的例項部署成功，可以響應請求時，<br>該例項被加入到池中。<br>然後版本A的一個例項從池中刪除並下線。<br>考慮到滾動部署依賴於系統，<br>可以調整如下引數來增加部署時間： </p><ul><li>並行數，最大批量執行數：同時釋出例項的數目 </li><li>最大峰值：考慮到當前例項數，例項可以加入的數目 </li><li>最大不可用數：在滾動更新過程中不可用的例項數<br><img src="/images/2018/six_strategies_for_application_deployment/ramped.gif" alt=""><br>優點： </li><li>便於設定 </li><li>版本在例項間緩慢釋出 </li><li>對於能夠處理資料重平衡的有狀態應用非常方便<br>缺點： </li><li>釋出/回滾耗時 </li><li>支援多個API很困難 </li><li>無法控制流量 </li></ul><h2 id="藍綠部署"><a href="#藍綠部署" class="headerlink" title="藍綠部署"></a>藍綠部署</h2><p>藍綠部署策略與滾動部署不同，<br>版本B（綠）同等數量的被並排部署在版本A（藍）旁邊。<br>當新版本滿足上線條件的測試後，<br>流量在負載均衡層從版本A切換到版本B。<br><img src="/images/2018/six_strategies_for_application_deployment/blue-green.gif" alt=""><br>優點： </p><ul><li>實時釋出、回滾 </li><li>避免版本衝突問題，整個應用狀態統一一次切換<br>缺點： </li><li>比較昂貴因為需要雙倍的資源 </li><li>在釋放版本到生產環境之前，整個平臺的主流程測試必須執行 </li><li>處理有狀態的應用很棘手 </li></ul><h3 id="金絲雀部署"><a href="#金絲雀部署" class="headerlink" title="金絲雀部署"></a>金絲雀部署</h3><p>金絲雀部署是指逐漸將生產環境流量從版本A切換到版本B。<br>通常流量是按比例分配的。<br>例如90%的請求流向版本A，10%的流向版本B。<br>這個技術大多數用於缺少足夠測試，或者缺少可靠測試，<br>或者對新版本的穩定性缺乏信心的情況下。<br><img src="/images/2018/six_strategies_for_application_deployment/canary.gif" alt=""><br>優點： </p><ul><li>版本面向一部分使用者釋出 </li><li>方便錯誤評估和效能監控 </li><li>快速回滾<br>缺點： </li><li>釋出緩慢 </li></ul><h3 id="A-B測試"><a href="#A-B測試" class="headerlink" title="A/B測試"></a>A/B測試</h3><p>A/B測試是指在特定條件下將一部分使用者路由到新功能上。<br>它通常用於根據統計來制定商業決策，而不是部署策略。<br>然而，他們是相關的，可以在金絲雀部署方式上新增額外功能來實現，所以我們這裏簡要介紹一下。<br>這個技術廣泛用於測試特定功能的切換，併發布使用佔大部分的版本。<br>下面是可以用於在版本間分散流量的條件：  </p><ul><li>瀏覽器cookie </li><li>查詢引數 </li><li>地理位置 </li><li>技術支援：瀏覽器版本、螢幕尺寸、作業系統等 </li><li>語言<br><img src="/images/2018/six_strategies_for_application_deployment/a-b.gif" alt=""><br>優點： </li><li>多個版本並行執行 </li><li>完全控制流量分佈<br>缺點： </li><li>需要智慧負載均衡 </li><li>對於給定的會話，很難定位問題，分散式跟蹤是必須的 </li></ul><h3 id="影子部署"><a href="#影子部署" class="headerlink" title="影子部署"></a>影子部署</h3><p>影子部署是指在版本A旁邊釋出版本B，<br>將版本A進來的請求同時分發到版本B，<br>同時對生產環境流量無影響。<br>這是測試新特徵在產品負載上表現的很好用的方式。<br>當滿足上線要求後，則觸發釋出新應用。<br>這個技術配置非常複雜，而且需要特殊條件，尤其是分出請求。<br>例如一個購物車平臺，如果你想影子測試支付服務，<br>你可能最終會是使用者為他們的訂單支付兩次。<br>這種情況下，可以通過建立一個模擬的服務來重複響應使用者的請求。<br><img src="/images/2018/six_strategies_for_application_deployment/shadow.gif" alt=""><br>優點： </p><ul><li>可以使用生產環境流量進行效能測試 </li><li>對使用者無影響 </li><li>直到應用的穩定性和效能滿足要求後才釋出<br>缺點： </li><li>雙倍資源，成本昂貴 </li><li>不是真實使用者測試，可能出現誤導 </li><li>配置複雜 </li><li>某種情況下需要模擬服務 </li></ul><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>部署應用有很多種方法，實際採用哪種方式取決於需求和預算。<br>當釋出到開發或者模擬環境時，重建或者滾動部署是一個好選擇。<br>當釋出到生產環境時，滾動部署或者藍綠部署通常是一個好選擇，<br>但是新平臺的主流程測試是必須的。<br>藍綠部署和影子部署對預算有更高的要求，因為需要雙倍資源。<br>如果應用缺乏測試或者對軟體的功能和穩定性影響缺乏信心，<br>那麼可以使用金絲雀部署或者AB測試或者影子釋出。<br>如果業務需要根據地理位置、語言、作業系統或者瀏覽器特徵等這樣引數來給一些特定的使用者測試，那麼可以採用AB測試技術。<br>最後但並不是最不重要的，影子釋出很複雜，且需要額外工作來模擬響應分支流量請求，<br>當可變操作（郵件、銀行等）呼叫外部依賴時這是必須的，<br>這個技術在升級新資料庫是非常有用，使用影子流量來監控負載下的系統性能。<br>下表可以幫助你選擇正確的策略：<br><img src="/images/2018/six_strategies_for_application_deployment/deployment_strategies.png" alt=""><br>取決於雲服務提供商和平臺，如下文件是理解部署的很好開始：   </p><ul><li>Amazon Web Services </li><li>Docker Swarm </li><li>Google Cloud </li><li>Kubernetes<br>我希望這是有用的，如果有任何問題或者反饋，可以在下面評論<br>(正文結束)</li></ul><h2 id="補充表格翻譯"><a href="#補充表格翻譯" class="headerlink" title="補充表格翻譯"></a>補充表格翻譯</h2><table><thead><tr><th>策略</th><th>服務不斷線</th><th>真實環境測試</th><th>目標客戶分群</th><th>預算成本</th><th>退版時間</th><th>使用者影響</th><th>複雜度</th></tr></thead><tbody><tr><td>重建部署</td><td>✖</td><td>✖</td><td>✖</td><td>★☆☆</td><td>★★★</td><td>★★★</td><td>☆☆☆</td></tr><tr><td>滾動部署</td><td>✔</td><td>✖</td><td>✖</td><td>★☆☆</td><td>★★★</td><td>★☆☆</td><td>★☆☆</td></tr><tr><td>藍綠部署</td><td>✔</td><td>✖</td><td>✖</td><td>★★★</td><td>☆☆☆</td><td>★★☆</td><td>★★☆</td></tr><tr><td>金絲雀部署</td><td>✔</td><td>✔</td><td>✖</td><td>★☆☆</td><td>★☆☆</td><td>★☆☆</td><td>★★☆</td></tr><tr><td>A/B部署</td><td>✔</td><td>✔</td><td>✔</td><td>★☆☆</td><td>★☆☆</td><td>★☆☆</td><td>★★★</td></tr><tr><td>影子部署</td><td>✔</td><td>✔</td><td>✖</td><td>★★★</td><td>☆☆☆</td><td>☆☆☆</td><td>★★★</td></tr></tbody></table><p>非常實用的文章,可惜中譯的圖片並非gif,原文的超聯結也掉失,<br>特別重新修正以上問題,留作記錄</p><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引用出處&quot;&gt;&lt;a href=&quot;#引用出處&quot; class=&quot;headerlink&quot; title=&quot;引用出處&quot;&gt;&lt;/a&gt;引用出處&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://thenewstack.io/deployment-strategies/&quot; 
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="http://blog.marsen.me/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>代碼審查與交付的戰爭ー標準、風格與原則</title>
    <link href="http://blog.marsen.me/2018/01/04/2018/coding_standard_and_coding_style_and_principle/"/>
    <id>http://blog.marsen.me/2018/01/04/2018/coding_standard_and_coding_style_and_principle/</id>
    <published>2018-01-03T16:51:27.000Z</published>
    <updated>2018-04-17T03:12:39.583Z</updated>
    
    <content type="html"><![CDATA[<h6 id="Coding-Standard-Code-Review-Pull-Request-amp-Delivery"><a href="#Coding-Standard-Code-Review-Pull-Request-amp-Delivery" class="headerlink" title="Coding Standard / Code Review / Pull Request &amp; Delivery"></a>Coding Standard / Code Review / Pull Request &amp; Delivery</h6><p><img src="https://i.imgur.com/tssraf0.jpg" alt=""></p><h2 id="故事背景"><a href="#故事背景" class="headerlink" title="故事背景"></a>故事背景</h2><ol><li>團隊的部署流程是 Github Flow 與 Git Flow 混用 , 給它起個名字叫 GG Flow 好了.</li><li>GG Flow 的過程需要開發人員需要透過 <strong>Pull Request</strong> 將修改推送給產品 </li><li>擁有權限 Merge Pull Request 的成員被叫作 Reviewer</li><li>Reviewer 通常由較資深人員或部門主管擔任,所以通常有比較多的<del>無用</del>會議要開</li><li>Reviewer 在 Merge 之前需要作 <strong>Code Review</strong></li><li>Reviewer 需要遵循 <strong>Coding Standard</strong> 作 Code Review</li></ol><h2 id="實務面臨的問題與副作用"><a href="#實務面臨的問題與副作用" class="headerlink" title="實務面臨的問題與副作用"></a>實務面臨的問題與副作用</h2><h4 id="Coding-Standard-並不能考慮到所有狀況"><a href="#Coding-Standard-並不能考慮到所有狀況" class="headerlink" title="Coding Standard 並不能考慮到所有狀況"></a>Coding Standard 並不能考慮到所有狀況</h4><ol><li>所以 Reviewers 會定期針對不同的狀況開會討論 Coding Standard<ul><li>Coding Standard 會<strong>不定期改變</strong> , 但是透過Reviewer佈達的方式,讓第一線的RD其實難以知道其全貌.</li><li>Coding Standard 改變後不會全面的翻改程式,實務上是作到哪裡改到哪裡</li><li>以上兩點導致 Source Code 裡面有很多符合不同時期的 Coding Standard 的 Code</li><li>任一個時間點, 誰都無法保証完全符合最新的 Coding Standard </li></ul></li><li>人性,開發者會<del>COPY/PASTE 方法開發</del>參考Legacy Code開發<ul><li>Legacy Code 不符合新的 Coding Standard</li><li>Reviewer 也是人, 所以 Code Review 時也會疏漏,而 Merge 進去不符合新的 Coding Standard 的 Code</li><li>所以 Source Code 裡面還是有很多不同時期的 Coding Standard 的 Code</li></ul></li><li>回歸一開始的問題 Coding Standard 並不能考慮到所有狀況 <ul><li>還沒有開會前, 不同的 Reviewer 會有不同的想法</li><li>開會後,在執行Code Review時, 不同的 Reviewer 會有不同的作法</li><li>當一個 PR 有多人 Reviewer 時, 會有不同的意見 PR 因此被延遲 Merge</li><li>結果,<strong>交付會變慢</strong>.</li></ul></li></ol><h2 id="反思-標準還是風格？"><a href="#反思-標準還是風格？" class="headerlink" title="反思,標準還是風格？"></a>反思,標準還是風格？</h2><p>思考一下,開發程式碼的目標與價值是什麼 ?<br>寫出 Clearn Code ?<br>還是交付產品 ?<br>這樣子的 Source Code 真的是 Clearn Code 嗎？</p><h2 id="自問自答"><a href="#自問自答" class="headerlink" title="自問自答"></a>自問自答</h2><h4 id="Q1-我們該有標準嗎？"><a href="#Q1-我們該有標準嗎？" class="headerlink" title="Q1. 我們該有標準嗎？"></a>Q1. 我們該有標準嗎？</h4><p>A1. 當然要有標準,不過標準之所以為標準,應該有以下幾個特點. </p><ul><li>它應該要很簡單, 像是Class與欄位的命名規則</li><li>它應放諸四海皆準, 不應該輕易被修改</li><li>它應該可以被自動化的檢測<br>假設能作到這3點, 這件事應該可以被自動化工具處理掉 . </li></ul><h4 id="Q2-實務上就是很複雜-所以才需要討論制訂標準啊"><a href="#Q2-實務上就是很複雜-所以才需要討論制訂標準啊" class="headerlink" title="Q2. 實務上就是很複雜, 所以才需要討論制訂標準啊"></a>Q2. 實務上就是很複雜, 所以才需要討論制訂標準啊</h4><p>A2.<br>在實務上遇到很複雜的情況, 大多需要依賴約定成俗方式規範.<br>這是一種<strong>風格</strong>或<strong>原則</strong> ;<br>簡單的分類方法,<br>如果無法透過自動化工具作檢測,<br>就不應該歸類為<strong>標準</strong>.</p><p><em>註:有機會再介紹自動化的檢測工具</em></p><h4 id="Q3-風格或原則跟標準有何不同？"><a href="#Q3-風格或原則跟標準有何不同？" class="headerlink" title="Q3. 風格或原則跟標準有何不同？"></a>Q3. <strong>風格</strong>或<strong>原則</strong>跟<strong>標準</strong>有何不同？</h4><p>A3. 如上所說,標準應該能被自動化,<br>風格應該是團隊的文化自然形成的產物,<br>具體的實作可以透過讓開發者<strong>彼此之間作代碼審核</strong><br>或是<strong>結對編程</strong>培養出屬於團隊的風格,<br>風格要基於標準之上,但是不能違反原則;</p><p>以下的原則可以作為參考</p><ul><li>可以建置並通過測試</li><li>可讀性<ul><li>self documenting</li><li>有用的註解 </li></ul></li><li>公開方法要可以被測試<ul><li>小心使用靜態類別</li><li>注意new Instance的時機</li><li>重複的代碼應重構</li></ul></li><li>保持 SOLID </li></ul><p>初期的可能會發生在「{」要不要換行之類的問題上揪結之類的蠢事,<br>如果可以自動化,就把它作成標準吧…<br>如果不行的話, 就別揪結了.  </p><p>實務上可能遇到各種狀況,<br>把Reviewer的權限下放到各個開發者身上,<br>或是使用結對編程,<br>就讓團隊成員去討論與決定風格.  </p><p>以標準為根基,原則為天,<br>踩穩腳步,不要超出天空,<br>就讓團隊自由發揮吧. </p><p><strong>最後,持續交付會比每兩周花一個小時開會決定Style的細節好多了. 不是嗎？</strong></p><h2 id="其它團隊分享的具體作法"><a href="#其它團隊分享的具體作法" class="headerlink" title="其它團隊分享的具體作法"></a>其它團隊分享的具體作法</h2><ol><li>超過一定時間就讓成員擁Merge權限</li><li>Release權限仍集中控管</li><li>錯了再改就好(保持敏捷)</li><li>給pair作code review與merge (避免一人思維陷井)</li><li>兩個人無法解決時找第三方</li><li>release 功能 優先於 一致的 coding standard</li><li>品質由測試管控而非 reviewer</li><li>先有測試才有重構</li><li>可讀性 優於 枝微末節的coding standard實踐</li><li>善用自動化工具( sonarqube / stylecop )</li></ol><p>(fin)</p><h5 id="補充-社群觀點"><a href="#補充-社群觀點" class="headerlink" title="補充 社群觀點"></a>補充 <a href="https://www.facebook.com/groups/616369245163622/permalink/1225873964213144/" target="_blank" rel="noopener">社群觀點</a></h5><ul><li>coding style一般不管的。</li><li>class name／variable name，一定要叫有意義的名字。</li><li>local scope variable，換多少行，indentation，這些是小事</li><li>一個成熟的developer，隨時會被上司命令這些遠古火星文明（legacy system）去做考古工作</li><li>coding style這些事，就像emacs和vim之戰一樣，戰到skynet出來了也不會戰完的</li><li>如果要開會去討論coding style，最終很可能讓團隊口服心不服地去跟隨我的Coding Style。</li><li>在Coding Style這種低層次的小事上用光了團隊成員之間互相容忍的能量，而在更重要的大事上無法好好合作。</li><li>有很多事是比Coding Style重要的。<ul><li>Object Modeling是否跟business logic一致？</li><li>還是Object有這個attribute但是根本沒在用？</li><li>Code Change是否有做好測試？</li><li>系統架構是否合理</li><li>有做好High-Avalibility嗎？</li><li>有沒有Race Condition？</li></ul></li><li>是其是，非其非。真正有道理的，你說了對方便自然會聽下去。</li><li>「Senior」是代表自己在專業上懂得比別人多，而不是比別人身份高級。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;Coding-Standard-Code-Review-Pull-Request-amp-Delivery&quot;&gt;&lt;a href=&quot;#Coding-Standard-Code-Review-Pull-Request-amp-Delivery&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="Coding Standard" scheme="http://blog.marsen.me/tags/Coding-Standard/"/>
    
  </entry>
  
  <entry>
    <title>一年後的我想要什麼？</title>
    <link href="http://blog.marsen.me/2018/01/01/2018/next_year/"/>
    <id>http://blog.marsen.me/2018/01/01/2018/next_year/</id>
    <published>2017-12-31T18:12:47.000Z</published>
    <updated>2018-04-17T03:12:39.593Z</updated>
    
    <content type="html"><![CDATA[<h2 id="你的目標是什麼"><a href="#你的目標是什麼" class="headerlink" title="你的目標是什麼?"></a>你的目標是什麼?</h2><p><strong>自由</strong></p><p>什麼是自由？</p><ol><li>情感上的自由</li><li>時間上的自由</li><li>經濟上的自由</li></ol><h2 id="經濟上的自由是一切的基礎"><a href="#經濟上的自由是一切的基礎" class="headerlink" title="經濟上的自由是一切的基礎"></a>經濟上的自由是一切的基礎</h2><ol><li>更多的收入 <ol><li>被動的收入</li><li>更高的薪資</li></ol></li><li>更有成就感的工作<ol><li>被同事尊重</li><li>被上司認可</li><li>受人歡迎</li></ol></li><li>更多的選擇<ol><li>技術提昇</li><li>領域擴展</li><li>人脈</li></ol></li><li>健康的身體</li><li>更多享受生活</li></ol><h2 id="一年後的我想要什麼"><a href="#一年後的我想要什麼" class="headerlink" title="一年後的我想要什麼?"></a>一年後的我想要什麼?</h2><p>一年後的我想要什麼?</p><ol><li>更高的薪資<ol><li>維持現狀 K (x)</li><li>跳糟 K * 1.3 (x)</li><li>爭取加薪 K * 1.1</li><li>獎金與分紅 </li></ol></li><li>更有成就感的工作(什麼是成就感)？    <ol><li>擁有可以引以為豪的產品<ol><li>拆解單體為服務導向</li><li>架構升級        </li></ol></li><li>分享與教學<pre><code>1. Blog2. 內/外部sharing3. 單元測試導入        </code></pre></li></ol></li><li>更多的選擇<ol><li>技術轉移<ol><li>Web 技術 轉移 為 Service導向技術</li><li>container 技術</li><li>cloud 技術        </li></ol></li><li>技術提昇<ol><li>.Net </li><li>Infra</li><li>Domain know how</li></ol></li></ol></li></ol><h3 id="爭取加薪-K-1-1"><a href="#爭取加薪-K-1-1" class="headerlink" title="爭取加薪 K * 1.1"></a>爭取加薪 K * 1.1</h3><h2 id="而這些目標需要什麼才能爭取到"><a href="#而這些目標需要什麼才能爭取到" class="headerlink" title="而這些目標需要什麼才能爭取到?"></a>而這些目標需要什麼才能爭取到?</h2><p>分為三個面向,技術提昇、技術擴展與自我實現,  </p><h3 id="技術提昇"><a href="#技術提昇" class="headerlink" title="技術提昇"></a>技術提昇</h3><p>首先目前我擁有的技術能力有</p><ol><li>.Net solution的 Web Developer能力</li><li>同時兼顧有 DB 與 F2E 基礎進階能力 </li></ol><p>這與我過去的選擇有關, 一直以來都在 Web 深入研究<br>未來的一年仍要朝這個方向發展.<br>但是會改由 Web 導向轉變成服務導向,<br>而 Web 開發只是我本身所能提供給公司的一個服務而已,<br>跟著 .Net 的腳步我想把前台(包含大馬但不限於)昇級上一個版本,<br>包含目前使用的舊版 libary 與 Framework,<br>如此一來可以使用到新版 .Net 的語法,<br>同時也可以解開一些導入測試與微服務時遇到的困境.  </p><h3 id="現有能力列表"><a href="#現有能力列表" class="headerlink" title="現有能力列表"></a>現有能力列表</h3><ol><li>C# &amp; .Net Framework Solution (inculde Linq &amp; Entity Framework )</li><li>javascript (jQuery &amp; Angular etc..)</li><li>Database with Sql (MsSQL solution)</li><li>Source Controle (Git)</li><li></li></ol><h3 id="略懂"><a href="#略懂" class="headerlink" title="略懂"></a>略懂</h3><ol><li>nodejs (with expressjs) &amp; php(codeigniter) &amp; ruby (RoR)</li><li>Jenkins</li><li></li></ol><h3 id="技術的擴展"><a href="#技術的擴展" class="headerlink" title="技術的擴展"></a>技術的擴展</h3><p>我認為公司的單體架構已經面臨到不得不拆的狀況,<br>公司也有意朝這個方向走那是最好不過的了,<br>但對現存的.NET 開發者而言,我認為人人都要有危機意識<br>我看到的現象</p><ol><li>頁面會被CMS取代</li><li>大部份的API可以被Lambda取代</li><li>主流程的部份在跨國的目標下會逐步變成微服務</li></ol><p>基於以上幾點, 除了.Net 的 solution 外,<br>更多情況是要使用別的 solution 或是混用,<br>對此我的視野必須有所提昇,  </p><ol><li>Linux Bash</li><li>Container 技術</li><li>Cloud (AWS/Azure/GCP)</li><li>Node.js<br>在未來的一年開發流程或是維運流程會有很大很快的變化<br>要多聽多看多想多問,公司有很多人才要儘可能的跟他們學習.  </li></ol><h3 id="自我營銷"><a href="#自我營銷" class="headerlink" title="自我營銷"></a>自我營銷</h3><p>最後是自我實現的部份,<br>自我營銷是我很弱的一部份,<br>不善交際,不喜歡人群<br>這點我從去年就開始調整,<br>多參與公司內部的分享,不要害怕說錯<br>假裝自已是對的,再虛心接受別人的指點<br>不需要導師,因為人人都是我的導師<br>開始寫Blog並且貼到社群網站給人鞭<br>這是我目前的 <a href="https://blog.marsen.me">https://blog.marsen.me</a></p><p>今年會繼續朝這個方向衝刺.<br>多分享 多犯錯 然後接受反饋學習.<br>兩個部份是我可以練習分享的機會<br>一個是測試的導入,<br>我們的遺留代碼,有很多可以分享的部份,<br>二是讀書會,<br>借由讀書會可以練習分享,<br>同時學習別人怎麼分享,<br>並且看完一本書,一舉數得.  </p><h2 id="具體主管可以幫助我的部份"><a href="#具體主管可以幫助我的部份" class="headerlink" title="具體主管可以幫助我的部份"></a>具體主管可以幫助我的部份</h2><ol><li>加薪(沒有比這個更務實的了)</li><li>明確指出我的錯誤或是作的好的部份</li></ol><p>Do more do faster </p><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;你的目標是什麼&quot;&gt;&lt;a href=&quot;#你的目標是什麼&quot; class=&quot;headerlink&quot; title=&quot;你的目標是什麼?&quot;&gt;&lt;/a&gt;你的目標是什麼?&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;自由&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;什麼是自由？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;情
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2017年的學習回顧與展望</title>
    <link href="http://blog.marsen.me/2018/01/01/2018/2017_learned/"/>
    <id>http://blog.marsen.me/2018/01/01/2018/2017_learned/</id>
    <published>2017-12-31T16:00:51.000Z</published>
    <updated>2018-04-17T03:12:39.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>參加了兩個活動,分別是<a href="https://blog.marsen.me/2017/04/23/unitestwriting/">單元測試這樣玩就對了</a>,與<a href="https://blog.marsen.me/2017/05/19/testingislearning/">測試即學習</a>;  </p><h3 id="單元測試這樣玩就對了"><a href="#單元測試這樣玩就對了" class="headerlink" title="單元測試這樣玩就對了"></a><a href="https://blog.marsen.me/2017/04/23/unitestwriting/">單元測試這樣玩就對了</a></h3><p>最大的收獲是突破了寫測試的心魔, 在那之前總覺得 TDD 只是口號, 或是烏托邦的開發理想.<br>雖然之前也有花大錢出外受訓, 或是公司內部的內訓.<br>手上也有一些前輩的測試代碼, 但是就是沒有「感覺」,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">不過仍然感謝前幾年的自已有將資源花在測試上面,  </span><br><span class="line">累積了兩年的測試經驗,  </span><br><span class="line">融會貫通卻只是一瞬間的事</span><br></pre></td></tr></table></figure></p><p>最主要是講者展現了實務上面的需求與改進,<br>過去寫的加法運算, 或是<a href="https://zh.wikipedia.org/wiki/猜單詞遊戲" target="_blank" rel="noopener">吊人遊戲</a>,<br>雖然也是從無到,也是先寫測試,<br>但或許是太過強調 TDD 太過強調從無到有<br>總與實際開發經驗相違背,<br>講者在過程中一句 <strong>「不要管先寫測試還是程式」</strong><br>反而更貼近真實,先寫程式,再想想怎麼測試？<br>為了測試, 再重構, 逐步分解的過程令我大開眼界.  </p><p>過去曾與人討論過TDD的議題,<br>總會得到「實務與理論有差別」、「其背景與環境因素不能寫測試」<br>這類似是而非的回答,當下我也無法辯駁<br>現在想起來只能莞爾. </p><p>測試趨動開發不等於一定要先測試,<br>特別是習慣於先寫產品程式的人,<br>不仿先寫產品程式, 再寫測試而趨動重構<br>當寫習慣了,知道哪些耦合會帶來重構的代價時,<br>再寫一次就人性就會自動迴避這些不好的Patten .</p><p>別管順序,但是記得寫測試.</p><h3 id="測試即學習"><a href="#測試即學習" class="headerlink" title="測試即學習"></a><a href="https://blog.marsen.me/2017/05/19/testingislearning/">測試即學習</a></h3><p>梅老師的課也是很毀三觀的,<br>老實說我跟本不知道他在幹嘛,<br>塔羅牌拿出來的時候,<br>我真的以為是<a href="https://zh.wikipedia.org/wiki/郭美江傳道爭議事件#%E5%BD%B1%E7%89%87%E4%BB%A5%E5%A4%96%E4%B9%8B%E5%BD%B1%E9%9F%BF" target="_blank" rel="noopener">美江</a>再現(那個時候<a href="https://goo.gl/zD51h3" target="_blank" rel="noopener">Seafood</a>還沒有業力引爆( ･ω･)( ･ω･)( ･ω･))<br>那堂課的目標族群應該是QA,<br>不過這個時代不應自我設限,<br>複習一下梅老師的分享,  </p><p>探索測試</p><ul><li>儘可能的發散</li><li>摹仿別人看事情的角度</li><li>有意識的學習(mindful learning)<ul><li>記錄</li><li>總結</li><li>歸納問題的核心</li><li>給它起一個名字(沒有專有名詞的話)</li><li>有意識的逃離第一印象</li><li>小心不經意的盲區(inattentional blindness)</li><li>數量 X 練習 X 思考 X 學習 = 提昇</li></ul></li></ul><p>對我來說,<strong>給它起一個名字</strong>真是超級有用的,<br>新認識的朋友就叫作「王大棰」, 新的技術就叫「起司包」, 新的概念就叫「黑盒子」等…<br>不要過於專研於名詞, 用自已能理解的名字去框那個新事物的範圍,<br>最後再把名字用大家通用的名字取代掉就好了.<br>看了很多的方法論,會發現其實觀念沒什麼改變,<br>只是新的名詞會一直冒出來,<br>唯物主義、馬基維利主義、不擇手段、實用主義<br>改善、KANBAN、敏捷、精實  balabala…</p><h2 id="“没有时间”-完美的借口"><a href="#“没有时间”-完美的借口" class="headerlink" title="“没有时间”- 完美的借口"></a><a href="http://www.danielteng.com/2012/09/25/no-time-to-learn-perfect-excuse/" target="_blank" rel="noopener">“没有时间”- 完美的借口</a></h2><p>2017年影響我最深的一篇Blog,<br>2012年的文章, 篇幅也不長,<br>觀念也很簡單, 作就對了, 作壞了就丟掉再作一次,<br>很多的書都要我們刻意練習,<br>但是我們的時間哪有那麼多呢？<br>長大了之後,才來1萬小時的修練是不是太晚了呢？  </p><p>下半年公司開始推行測試,<br>基層的工程師們其實反彈的聲音一直都在,<br>雖然一直有教育訓練與培養種子,<br>不過大多淪為口號的狀態,<br>我也只能用這篇文章作為勉勵.  </p><p>其實現在的版本控制系統已經非常便利,<br>要建立一個Sandbox的分支,<br>在裡面嚐試各種可能性是非常容易的,<br>作壞了丟掉分支就好了,<br>身為專業的工程人員,測試是必須的,失敗也是,<br>在沙箱內失敗,其實是摔不疼的,勇敢嚐試吧. </p><h2 id="生產力"><a href="#生產力" class="headerlink" title="生產力"></a>生產力</h2><p>2016年是時間記錄的一年,<br>那2017年就是把記錄的時間,<br>轉換成生產力的一年.<br>幾本影響比較多的書,不過或許我仍需要二讀至三讀以上</p><ul><li>最有生產力的一年 → 時間X精力X專注力 = 生產力</li><li>GTD → 下一步要作什麼？</li><li>軟技能 → 自我營銷</li></ul><p>新的一年重心會放在習慣上面,<br>因為讓習慣趨動行為,<br>比起刻意遵循某些方法要好得多,<br>「刻意」太浪費精神力了,<br>下一步會如何呢？<br>希望能翻轉自已</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>順利的帶媽媽出國了,或許對一些人來說不算什麼成就吧,<br>新的一年有些機會,去日本、以色列、俄羅斯、馬來西亞,<br>雖然八字還沒有一撇, 但至少會去一個地方吧…<br>其他的地方就只能見機行事了.</p><p>新年快樂<br>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;測試&quot;&gt;&lt;a href=&quot;#測試&quot; class=&quot;headerlink&quot; title=&quot;測試&quot;&gt;&lt;/a&gt;測試&lt;/h2&gt;&lt;p&gt;參加了兩個活動,分別是&lt;a href=&quot;https://blog.marsen.me/2017/04/23/unitestwriting/&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Visual Studio 2017 MSTest Framework 異常修正</title>
    <link href="http://blog.marsen.me/2017/12/11/test_learn/vs2017_mstest_with_nuget/"/>
    <id>http://blog.marsen.me/2017/12/11/test_learn/vs2017_mstest_with_nuget/</id>
    <published>2017-12-11T03:17:08.000Z</published>
    <updated>2018-06-02T11:38:43.142Z</updated>
    
    <content type="html"><![CDATA[<h2 id="應該要知道的事"><a href="#應該要知道的事" class="headerlink" title="應該要知道的事"></a>應該要知道的事</h2><ul><li>這是踩雷筆記</li><li>2017的筆記可能會隨時間變得沒有參考價值</li><li>Visual Studio 2017的問題,並不一定適用其他版本</li><li>最後面會有不定時補充</li></ul><h2 id="情境"><a href="#情境" class="headerlink" title="情境"></a>情境</h2><p><img src="https://i.imgur.com/FDDtc9V.jpg" alt="載入測試時發生例外狀況"><br>原本使用 Visual Studio 2015 建立的測試專案,<br>升級到 Visual Studio 2017 後, 發生以下錯誤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[2017/12/11 上午 02:09:59 Error] 測試探索程式 &apos;SpecRunTestDiscoverer&apos; </span><br><span class="line">載入測試時發生例外狀況。例外狀況: 無法載入檔案或組件 </span><br><span class="line">&apos;Microsoft.VisualStudio.QualityTools.UnitTestFramework,</span><br><span class="line">Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&apos;</span><br><span class="line">或其相依性的其中之一。 系統找不到指定的檔案。</span><br></pre></td></tr></table></figure></p><h2 id="導致結果"><a href="#導致結果" class="headerlink" title="導致結果"></a>導致結果</h2><p><img src="https://i.imgur.com/2REPRzG.jpg" alt="原本的測試數量為1942,變成459,遺失了7成5的測試案例."></p><ol><li>測試專案會找不到測試,或是測試數量不正確.</li><li>可以使用 Visual Studio 2015 重新執行探測索測試,即可排除問題.</li></ol><h2 id="VS2015-已移除或未安裝該怎麼辦？"><a href="#VS2015-已移除或未安裝該怎麼辦？" class="headerlink" title="VS2015 已移除或未安裝該怎麼辦？"></a>VS2015 已移除或未安裝該怎麼辦？</h2><p>透過MsTest直接加入<br><code>Microsoft.VisualStudio.QualityTools.UnitTestFramework</code><br>的參考已經是舊的方法了, </p><h4 id="在-vs2017-建議的解決方案如下"><a href="#在-vs2017-建議的解決方案如下" class="headerlink" title="在 vs2017 建議的解決方案如下:"></a>在 vs2017 建議的解決方案如下:</h4><ul><li>移除方案中所有對 <code>Microsoft.VisualStudio.QualityTools.UnitTestFramework</code> 的參考</li><li>透過 Nuget 安裝 MSTest.TestAdapter </li><li>透過 Nuget 安裝 MSTest.TestFramework</li><li>關閉 vs2017</li><li>移除 <code>%temp%\VisualStudioTestExplorerExtensions</code>內所有檔案</li><li>重啟 vs2017 並建置以觸發探索測試<br><img src="https://i.imgur.com/RPI77KN.jpg" alt="透過 Nuget 安裝 MSTest.TestAdapter/MSTest.TestFramework"><br><img src="https://i.imgur.com/JQ7zf2S.jpg" alt="重啟 vs2017 並建置以觸發探索測試"></li></ul><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://developercommunity.visualstudio.com/content/problem/14673/unit-test-fail-cannot-load-microsoftvisualstudiote.html" target="_blank" rel="noopener">Unit test fail - cannot load Microsoft.VisualStudio.TestPlatform.TestFramework.Extensions</a></li></ul><p>(fin)</p><h2 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h2><ul><li>2018/06/02 :<br>visual studio 2017 15.7.* 的版本之後 ,<br><code>%temp%\VisualStudioTestExplorerExtensions</code> 消失了 ,<br>不過正常情況建置後 , visual studio 探索測試仍然可以正確找到測試。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;應該要知道的事&quot;&gt;&lt;a href=&quot;#應該要知道的事&quot; class=&quot;headerlink&quot; title=&quot;應該要知道的事&quot;&gt;&lt;/a&gt;應該要知道的事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;這是踩雷筆記&lt;/li&gt;
&lt;li&gt;2017的筆記可能會隨時間變得沒有參考價值&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="MsTest" scheme="http://blog.marsen.me/tags/MsTest/"/>
    
      <category term="Visual Studio" scheme="http://blog.marsen.me/tags/Visual-Studio/"/>
    
  </entry>
  
  <entry>
    <title>單元測試與重構記錄(二) 發問篇</title>
    <link href="http://blog.marsen.me/2017/12/08/test_learn/integrated_testing_partice2_question/"/>
    <id>http://blog.marsen.me/2017/12/08/test_learn/integrated_testing_partice2_question/</id>
    <published>2017-12-08T11:04:42.000Z</published>
    <updated>2018-04-17T03:12:39.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Q1-Controller-要測試嗎？"><a href="#Q1-Controller-要測試嗎？" class="headerlink" title="Q1 Controller 要測試嗎？"></a>Q1 Controller 要測試嗎？</h2><h3 id="Logics-in-controller"><a href="#Logics-in-controller" class="headerlink" title="Logics in controller"></a>Logics in controller</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Route(<span class="meta-string">"Member/Get/&#123;Id&#125;"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">GetMemeberList</span>(<span class="params"><span class="keyword">long</span> Id, <span class="keyword">string</span> cc = <span class="string">"f"</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cleanCache = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/ logics here</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.IsFromCompany() &amp;&amp; cc == <span class="string">"t"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span>/ do something ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> memeberList = <span class="keyword">this</span>.memeberService.GetmemeberList(Id, cleanCache);            </span><br><span class="line">        <span class="comment"><span class="doctag">///</span>/ logics here</span></span><br><span class="line">        <span class="keyword">if</span> (memeberList.Any())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment"><span class="doctag">///</span>/ do something ...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment"><span class="doctag">///</span>/ do something ...</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.Json(result, JsonRequestBehavior.AllowGet);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span>/ logics here</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>/ do something ...                </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自問自答"><a href="#自問自答" class="headerlink" title="自問自答"></a>自問自答</h4><p>我認為要，<br>但是對於WebAPI回傳的<code>JsonResult</code>或是<code>ActionResult</code><br>需要轉形才能作驗証<br>可以考慮整合測試勝於單元測試,<br>Controller的通常是面對 Client Side 的呼叫.</p><h2 id="Q2-當-Controller-只有取資料的邏輯"><a href="#Q2-當-Controller-只有取資料的邏輯" class="headerlink" title="Q2 當 Controller 只有取資料的邏輯"></a>Q2 當 Controller 只有取資料的邏輯</h2><h3 id="No-Logics-in-Controller"><a href="#No-Logics-in-Controller" class="headerlink" title="No Logics in Controller"></a>No Logics in Controller</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.Service.GetIndex();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Q3-當-Service-只有取資料的邏輯"><a href="#Q3-當-Service-只有取資料的邏輯" class="headerlink" title="Q3 當 Service 只有取資料的邏輯"></a>Q3 當 Service 只有取資料的邏輯</h2><h3 id="No-Logics-in-Service"><a href="#No-Logics-in-Service" class="headerlink" title="No Logics in Service"></a>No Logics in Service</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Member <span class="title">Get</span>(<span class="params"><span class="keyword">long</span> id</span>)</span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.DataAccessor.GetMember(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自問自答-1"><a href="#自問自答-1" class="headerlink" title="自問自答"></a>自問自答</h4><p>我認為不要,<br>要測試商業邏輯,不要在意覆蓋率</p><h2 id="Q4-當Service只有取Catch資料的邏輯"><a href="#Q4-當Service只有取Catch資料的邏輯" class="headerlink" title="Q4. 當Service只有取Catch資料的邏輯"></a>Q4. 當Service只有取Catch資料的邏輯</h2><h3 id="No-Logics-in-Service-just-call-another-service"><a href="#No-Logics-in-Service-just-call-another-service" class="headerlink" title="No Logics in Service , just call another service"></a>No Logics in Service , just call another service</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Member <span class="title">Get</span>(<span class="params"><span class="keyword">long</span> id</span>)</span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="keyword">var</span> enableCache = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">this</span>.CacheService.GetCacheData(</span><br><span class="line">        cacheKey,</span><br><span class="line">        () =&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.DataAccessor.GetMember(id);</span><br><span class="line">        &#125;,</span><br><span class="line">        enableCache</span><br><span class="line">    );    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自問自答-2"><a href="#自問自答-2" class="headerlink" title="自問自答"></a>自問自答</h4><p>同上,仍然不需要,<br>要測試商業邏輯,不要在意覆蓋率,<br>要注意的或許是<code>CacheService.GetCacheData</code>是不是有包測試 ?<br>一般來說,Cache的功能很泛用,測試的報酬率很高</p><h2 id="Q5-承上-當邏輯存在Func參數之中？"><a href="#Q5-承上-當邏輯存在Func參數之中？" class="headerlink" title="Q5. 承上,當邏輯存在Func參數之中？"></a>Q5. 承上,當邏輯存在Func參數之中？</h2><h3 id="Logics-in-Func"><a href="#Logics-in-Func" class="headerlink" title="Logics in Func"></a>Logics in Func</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Member <span class="title">Get</span>(<span class="params"><span class="keyword">long</span> id</span>)</span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="keyword">var</span> enableCache = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">this</span>.CacheService.GetCacheData(</span><br><span class="line">        cacheKey,</span><br><span class="line">        () =&gt; &#123;</span><br><span class="line">            <span class="comment"><span class="doctag">///</span>/ logics here</span></span><br><span class="line">            <span class="keyword">if</span>(id &gt; <span class="number">9487</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.MemberAccessor.GetMember(id);</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.MemberV2Accessor.GetMember(id);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;,</span><br><span class="line">        enableCache</span><br><span class="line">    );    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自問自答-3"><a href="#自問自答-3" class="headerlink" title="自問自答"></a>自問自答</h4><p>暫時無解,<br>或許是這樣Pattern不適合測試,需要調整架構嗎？<br>為了測試多包成一個公開方法,反而失去匿名函數的彈性優點,<br>不在匿名函數內寫邏輯更不合理,待求解答</p><h2 id="Q6-當邏輯在DA層或ORM的Query中要如何測試？"><a href="#Q6-當邏輯在DA層或ORM的Query中要如何測試？" class="headerlink" title="Q6.當邏輯在DA層或ORM的Query中要如何測試？"></a>Q6.當邏輯在DA層或ORM的Query中要如何測試？</h2><h3 id="Logics-in-ORM"><a href="#Logics-in-ORM" class="headerlink" title="Logics in ORM"></a>Logics in ORM</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">上略...</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> transactionScope = <span class="keyword">new</span> TransactionScope(TransactionScopeOption.Required, transactionOptions))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (Entities context = Entities.CreateNew(isReadOnly: <span class="literal">true</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span>/ logics here</span></span><br><span class="line">        <span class="keyword">var</span> query = <span class="keyword">from</span> a <span class="keyword">in</span> context.Activies.Valids()</span><br><span class="line">                    <span class="keyword">where</span> a.Activies_StartDateTime &lt;= startTime &amp;&amp;</span><br><span class="line">                    a.Activies_EndDateTime &gt;= now &amp;&amp;</span><br><span class="line">                    a.Activies_ShopId == shopId &amp;&amp;</span><br><span class="line">                    a.ActiviesCondition.Any(i =&gt; i.Activies_ValidFlag</span><br><span class="line">                    &amp;&amp; TypeList.Contains(i.Activies_TypeDef))                    </span><br><span class="line">                    <span class="keyword">select</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自問自答-4"><a href="#自問自答-4" class="headerlink" title="自問自答"></a>自問自答</h4><p>不適用單元測試,應該整合測試作包覆</p><h2 id="Q7-當邏輯在MappingProfile該如何測試"><a href="#Q7-當邏輯在MappingProfile該如何測試" class="headerlink" title="Q7. 當邏輯在MappingProfile該如何測試?"></a>Q7. 當邏輯在MappingProfile該如何測試?</h2><h3 id="Logics-in-MappingProfile"><a href="#Logics-in-MappingProfile" class="headerlink" title="Logics in MappingProfile"></a>Logics in MappingProfile</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Mapper.CreateMap&lt;PageEntity, UserPageEntity&gt;()</span><br><span class="line">  .ForMember(i =&gt; i.Id, s =&gt; s.MapFrom(i =&gt; i.User_Id))</span><br><span class="line">  .ForMember(i =&gt; i.Title, s =&gt; s.MapFrom(i =&gt; i.User_Name))</span><br><span class="line">  .ForMember(i =&gt; i.PageName, s =&gt; s.MapFrom(i =&gt; i.User_Name + i.User_LastName))</span><br><span class="line">  .ForMember(i =&gt; i.LightBox, s =&gt; s.MapFrom(i =&gt; i.User_Sex == <span class="string">"male"</span> ? <span class="literal">true</span> : <span class="literal">false</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自問自答-5"><a href="#自問自答-5" class="headerlink" title="自問自答"></a>自問自答</h4><p>要作測試,檢查欄位Mapping是否正確,<br>但實務上若重用性不高,寫MappingProfile不如直接在代碼內轉換.<br>可以少寫MappingProfile的測試.</p><p>待解答…<br>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Q1-Controller-要測試嗎？&quot;&gt;&lt;a href=&quot;#Q1-Controller-要測試嗎？&quot; class=&quot;headerlink&quot; title=&quot;Q1 Controller 要測試嗎？&quot;&gt;&lt;/a&gt;Q1 Controller 要測試嗎？&lt;/h2&gt;&lt;h3 i
      
    
    </summary>
    
    
      <category term="Unit Testing" scheme="http://blog.marsen.me/tags/Unit-Testing/"/>
    
      <category term="Integrated Testing" scheme="http://blog.marsen.me/tags/Integrated-Testing/"/>
    
  </entry>
  
</feed>
