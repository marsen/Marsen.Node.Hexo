<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Marsen</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.marsen.me/"/>
  <updated>2018-01-06T17:20:00.048Z</updated>
  <id>http://blog.marsen.me/</id>
  
  <author>
    <name>Marsen L.</name>
    <email>thisismysoul@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>代碼審查與交付的戰爭ー標準、風格與原則</title>
    <link href="http://blog.marsen.me/2018/01/04/2018/coding_standard_and_coding_style_and_principle/"/>
    <id>http://blog.marsen.me/2018/01/04/2018/coding_standard_and_coding_style_and_principle/</id>
    <published>2018-01-03T16:51:27.000Z</published>
    <updated>2018-01-06T17:20:00.048Z</updated>
    
    <content type="html"><![CDATA[<h6 id="Coding-Standard-Code-Review-Pull-Request-amp-Delivery"><a href="#Coding-Standard-Code-Review-Pull-Request-amp-Delivery" class="headerlink" title="Coding Standard / Code Review / Pull Request &amp; Delivery"></a>Coding Standard / Code Review / Pull Request &amp; Delivery</h6><p><img src="https://i.imgur.com/tssraf0.jpg" alt=""></p>
<h2 id="故事背景"><a href="#故事背景" class="headerlink" title="故事背景"></a>故事背景</h2><ol>
<li>團隊的部署流程是 Github Flow 與 Git Flow 混用 , 給它起個名字叫 GG Flow 好了.</li>
<li>GG Flow 的過程需要開發人員需要透過 <strong>Pull Request</strong> 將修改推送給產品 </li>
<li>擁有權限 Merge Pull Request 的成員被叫作 Reviewer</li>
<li>Reviewer 通常由較資深人員或部門主管擔任,所以通常有比較多的<del>無用</del>會議要開</li>
<li>Reviewer 在 Merge 之前需要作 <strong>Code Review</strong></li>
<li>Reviewer 需要遵循 <strong>Coding Standard</strong> 作 Code Review</li>
</ol>
<h2 id="實務面臨的問題與副作用"><a href="#實務面臨的問題與副作用" class="headerlink" title="實務面臨的問題與副作用"></a>實務面臨的問題與副作用</h2><h4 id="Coding-Standard-並不能考慮到所有狀況"><a href="#Coding-Standard-並不能考慮到所有狀況" class="headerlink" title="Coding Standard 並不能考慮到所有狀況"></a>Coding Standard 並不能考慮到所有狀況</h4><ol>
<li>所以 Reviewers 會定期針對不同的狀況開會討論 Coding Standard<ul>
<li>Coding Standard 會<strong>不定期改變</strong> , 但是透過Reviewer佈達的方式,讓第一線的RD其實難以知道其全貌.</li>
<li>Coding Standard 改變後不會全面的翻改程式,實務上是作到哪裡改到哪裡</li>
<li>以上兩點導致 Source Code 裡面有很多符合不同時期的 Coding Standard 的 Code</li>
<li>任一個時間點, 誰都無法保証完全符合最新的 Coding Standard </li>
</ul>
</li>
<li>人性,開發者會<del>COPY/PASTE 方法開發</del>參考Legacy Code開發<ul>
<li>Legacy Code 不符合新的 Coding Standard</li>
<li>Reviewer 也是人, 所以 Code Review 時也會疏漏,而 Merge 進去不符合新的 Coding Standard 的 Code</li>
<li>所以 Source Code 裡面還是有很多不同時期的 Coding Standard 的 Code</li>
</ul>
</li>
<li>回歸一開始的問題 Coding Standard 並不能考慮到所有狀況 <ul>
<li>還沒有開會前, 不同的 Reviewer 會有不同的想法</li>
<li>開會後,在執行Code Review時, 不同的 Reviewer 會有不同的作法</li>
<li>當一個 PR 有多人 Reviewer 時, 會有不同的意見 PR 因此被延遲 Merge</li>
<li>結果,<strong>交付會變慢</strong>.</li>
</ul>
</li>
</ol>
<h2 id="反思-標準還是風格？"><a href="#反思-標準還是風格？" class="headerlink" title="反思,標準還是風格？"></a>反思,標準還是風格？</h2><p>思考一下,開發程式碼的目標與價值是什麼 ?<br>寫出 Clearn Code ?<br>還是交付產品 ?<br>這樣子的 Source Code 真的是 Clearn Code 嗎？</p>
<h2 id="自問自答"><a href="#自問自答" class="headerlink" title="自問自答"></a>自問自答</h2><h4 id="Q1-我們該有標準嗎？"><a href="#Q1-我們該有標準嗎？" class="headerlink" title="Q1. 我們該有標準嗎？"></a>Q1. 我們該有標準嗎？</h4><p>A1. 當然要有標準,不過標準之所以為標準,應該有以下幾個特點. </p>
<ul>
<li>它應該要很簡單, 像是Class與欄位的命名規則</li>
<li>它應放諸四海皆準, 不應該輕易被修改</li>
<li>它應該可以被自動化的檢測<br>假設能作到這3點, 這件事應該可以被自動化工具處理掉 . </li>
</ul>
<h4 id="Q2-實務上就是很複雜-所以才需要討論制訂標準啊"><a href="#Q2-實務上就是很複雜-所以才需要討論制訂標準啊" class="headerlink" title="Q2. 實務上就是很複雜, 所以才需要討論制訂標準啊"></a>Q2. 實務上就是很複雜, 所以才需要討論制訂標準啊</h4><p>A2.<br>在實務上遇到很複雜的情況, 大多需要依賴約定成俗方式規範.<br>這是一種<strong>風格</strong>或<strong>原則</strong> ;<br>簡單的分類方法,<br>如果無法透過自動化工具作檢測,<br>就不應該歸類為<strong>標準</strong>.</p>
<p><em>註:有機會再介紹自動化的檢測工具</em></p>
<h4 id="Q3-風格或原則跟標準有何不同？"><a href="#Q3-風格或原則跟標準有何不同？" class="headerlink" title="Q3. 風格或原則跟標準有何不同？"></a>Q3. <strong>風格</strong>或<strong>原則</strong>跟<strong>標準</strong>有何不同？</h4><p>A3. 如上所說,標準應該能被自動化,<br>風格應該是團隊的文化自然形成的產物,<br>具體的實作可以透過讓開發者<strong>彼此之間作代碼審核</strong><br>或是<strong>結對編程</strong>培養出屬於團隊的風格,<br>風格要基於標準之上,但是不能違反原則;</p>
<p>以下的原則可以作為參考</p>
<ul>
<li>可以建置並通過測試</li>
<li>可讀性<ul>
<li>self documenting</li>
<li>有用的註解 </li>
</ul>
</li>
<li>公開方法要可以被測試<ul>
<li>小心使用靜態類別</li>
<li>注意new Instance的時機</li>
<li>重複的代碼應重構</li>
</ul>
</li>
<li>保持 SOLID </li>
</ul>
<p>初期的可能會發生在「{」要不要換行之類的問題上揪結之類的蠢事,<br>如果可以自動化,就把它作成標準吧…<br>如果不行的話, 就別揪結了.  </p>
<p>實務上可能遇到各種狀況,<br>把Reviewer的權限下放到各個開發者身上,<br>或是使用結對編程,<br>就讓團隊成員去討論與決定風格.  </p>
<p>以標準為根基,原則為天,<br>踩穩腳步,不要超出天空,<br>就讓團隊自由發揮吧. </p>
<p><strong>最後,持續交付會比每兩周花一個小時開會決定Style的細節好多了. 不是嗎？</strong></p>
<h2 id="其它團隊分享的具體作法"><a href="#其它團隊分享的具體作法" class="headerlink" title="其它團隊分享的具體作法"></a>其它團隊分享的具體作法</h2><ol>
<li>超過一定時間就讓成員擁Merge權限</li>
<li>Release權限仍集中控管</li>
<li>錯了再改就好(保持敏捷)</li>
<li>給pair作code review與merge (避免一人思維陷井)</li>
<li>兩個人無法解決時找第三方</li>
<li>release 功能 優先於 一致的 coding standard</li>
<li>品質由測試管控而非 reviewer</li>
<li>先有測試才有重構</li>
<li>可讀性 優於 枝微末節的coding standard實踐</li>
<li>善用自動化工具( sonarqube / stylecop )</li>
</ol>
<p>(fin)</p>
<h5 id="補充-社群觀點"><a href="#補充-社群觀點" class="headerlink" title="補充 社群觀點"></a>補充 <a href="https://www.facebook.com/groups/616369245163622/permalink/1225873964213144/" target="_blank" rel="external">社群觀點</a></h5><ul>
<li>coding style一般不管的。</li>
<li>class name／variable name，一定要叫有意義的名字。</li>
<li>local scope variable，換多少行，indentation，這些是小事</li>
<li>一個成熟的developer，隨時會被上司命令這些遠古火星文明（legacy system）去做考古工作</li>
<li>coding style這些事，就像emacs和vim之戰一樣，戰到skynet出來了也不會戰完的</li>
<li>如果要開會去討論coding style，最終很可能讓團隊口服心不服地去跟隨我的Coding Style。</li>
<li>在Coding Style這種低層次的小事上用光了團隊成員之間互相容忍的能量，而在更重要的大事上無法好好合作。</li>
<li>有很多事是比Coding Style重要的。<ul>
<li>Object Modeling是否跟business logic一致？</li>
<li>還是Object有這個attribute但是根本沒在用？</li>
<li>Code Change是否有做好測試？</li>
<li>系統架構是否合理</li>
<li>有做好High-Avalibility嗎？</li>
<li>有沒有Race Condition？</li>
</ul>
</li>
<li>是其是，非其非。真正有道理的，你說了對方便自然會聽下去。</li>
<li>「Senior」是代表自己在專業上懂得比別人多，而不是比別人身份高級。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;Coding-Standard-Code-Review-Pull-Request-amp-Delivery&quot;&gt;&lt;a href=&quot;#Coding-Standard-Code-Review-Pull-Request-amp-Delivery&quot; class=&quot;heade
    
    </summary>
    
    
      <category term="Coding Standard" scheme="http://blog.marsen.me/tags/Coding-Standard/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio 2017 MSTest Framework 異常修正</title>
    <link href="http://blog.marsen.me/2017/12/11/test_learn/vs2017_mstest_with_nuget/"/>
    <id>http://blog.marsen.me/2017/12/11/test_learn/vs2017_mstest_with_nuget/</id>
    <published>2017-12-11T03:17:08.000Z</published>
    <updated>2018-01-03T16:39:41.125Z</updated>
    
    <content type="html"><![CDATA[<h2 id="應該要知道的事"><a href="#應該要知道的事" class="headerlink" title="應該要知道的事"></a>應該要知道的事</h2><ul>
<li>這是踩雷筆記</li>
<li>2017的筆記可能會隨時間變得沒有參考價值</li>
<li>Visual Studio 2017的問題,並不一定適用其他版本</li>
</ul>
<h2 id="情境"><a href="#情境" class="headerlink" title="情境"></a>情境</h2><p><img src="https://i.imgur.com/FDDtc9V.jpg" alt="載入測試時發生例外狀況"><br>原本使用 Visual Studio 2015 建立的測試專案,<br>升級到 Visual Studio 2017 後, 發生以下錯誤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[2017/12/11 上午 02:09:59 Error] 測試探索程式 &apos;SpecRunTestDiscoverer&apos; </div><div class="line">載入測試時發生例外狀況。例外狀況: 無法載入檔案或組件 </div><div class="line">&apos;Microsoft.VisualStudio.QualityTools.UnitTestFramework,</div><div class="line">Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&apos;</div><div class="line">或其相依性的其中之一。 系統找不到指定的檔案。</div></pre></td></tr></table></figure></p>
<h2 id="導致結果"><a href="#導致結果" class="headerlink" title="導致結果"></a>導致結果</h2><p><img src="https://i.imgur.com/2REPRzG.jpg" alt="原本的測試數量為1942,變成459,遺失了7成5的測試案例."></p>
<ol>
<li>測試專案會找不到測試,或是測試數量不正確.</li>
<li>可以使用 Visual Studio 2015 重新執行探測索測試,即可排除問題.</li>
</ol>
<h2 id="VS2015-已移除或未安裝該怎麼辦？"><a href="#VS2015-已移除或未安裝該怎麼辦？" class="headerlink" title="VS2015 已移除或未安裝該怎麼辦？"></a>VS2015 已移除或未安裝該怎麼辦？</h2><p>透過MsTest直接加入<br><code>Microsoft.VisualStudio.QualityTools.UnitTestFramework</code><br>的參考已經是舊的方法了, </p>
<h4 id="在-vs2017-建議的解決方案如下"><a href="#在-vs2017-建議的解決方案如下" class="headerlink" title="在 vs2017 建議的解決方案如下:"></a>在 vs2017 建議的解決方案如下:</h4><ul>
<li>移除方案中所有對 <code>Microsoft.VisualStudio.QualityTools.UnitTestFramework</code> 的參考</li>
<li>透過 Nuget 安裝 MSTest.TestAdapter </li>
<li>透過 Nuget 安裝 MSTest.TestFramework</li>
<li>關閉 vs2017</li>
<li>移除 <code>%temp%\VisualStudioTestExplorerExtensions</code>內所有檔案</li>
<li>重啟 vs2017 並建置以觸發探索測試<br><img src="https://i.imgur.com/RPI77KN.jpg" alt="透過 Nuget 安裝 MSTest.TestAdapter/MSTest.TestFramework"><br><img src="https://i.imgur.com/JQ7zf2S.jpg" alt="重啟 vs2017 並建置以觸發探索測試"></li>
</ul>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul>
<li><a href="https://developercommunity.visualstudio.com/content/problem/14673/unit-test-fail-cannot-load-microsoftvisualstudiote.html" target="_blank" rel="external">Unit test fail - cannot load Microsoft.VisualStudio.TestPlatform.TestFramework.Extensions</a></li>
</ul>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;應該要知道的事&quot;&gt;&lt;a href=&quot;#應該要知道的事&quot; class=&quot;headerlink&quot; title=&quot;應該要知道的事&quot;&gt;&lt;/a&gt;應該要知道的事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;這是踩雷筆記&lt;/li&gt;
&lt;li&gt;2017的筆記可能會隨時間變得沒有參考價值&lt;/li&gt;
&lt;
    
    </summary>
    
    
      <category term="MsTest" scheme="http://blog.marsen.me/tags/MsTest/"/>
    
      <category term="Visual Studio" scheme="http://blog.marsen.me/tags/Visual-Studio/"/>
    
  </entry>
  
  <entry>
    <title>單元測試與重構記錄(二) 發問篇</title>
    <link href="http://blog.marsen.me/2017/12/08/test_learn/integrated_testing_partice2_question/"/>
    <id>http://blog.marsen.me/2017/12/08/test_learn/integrated_testing_partice2_question/</id>
    <published>2017-12-08T11:04:42.000Z</published>
    <updated>2018-01-03T16:39:41.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Q1-Controller-要測試嗎？"><a href="#Q1-Controller-要測試嗎？" class="headerlink" title="Q1 Controller 要測試嗎？"></a>Q1 Controller 要測試嗎？</h2><h3 id="Logics-in-controller"><a href="#Logics-in-controller" class="headerlink" title="Logics in controller"></a>Logics in controller</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">[Route(<span class="string">"Member/Get/&#123;Id&#125;"</span>)]</div><div class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">GetMemeberList</span>(<span class="params"><span class="keyword">long</span> Id, <span class="keyword">string</span> cc = <span class="string">"f"</span></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> cleanCache = <span class="literal">false</span>;</div><div class="line">    <span class="comment"><span class="doctag">///</span>/ logics here</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.IsFromCompany() &amp;&amp; cc == <span class="string">"t"</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="comment"><span class="doctag">///</span>/ do something ...</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> memeberList = <span class="keyword">this</span>.memeberService.GetmemeberList(Id, cleanCache);            </div><div class="line">        <span class="comment"><span class="doctag">///</span>/ logics here</span></div><div class="line">        <span class="keyword">if</span> (memeberList.Any())</div><div class="line">        &#123;</div><div class="line">            <span class="comment"><span class="doctag">///</span>/ do something ...</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="comment"><span class="doctag">///</span>/ do something ...</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.Json(result, JsonRequestBehavior.AllowGet);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Exception ex)</div><div class="line">    &#123;</div><div class="line">        <span class="comment"><span class="doctag">///</span>/ logics here</span></div><div class="line">        <span class="comment"><span class="doctag">///</span>/ do something ...                </span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="自問自答"><a href="#自問自答" class="headerlink" title="自問自答"></a>自問自答</h4><p>我認為要，<br>但是對於WebAPI回傳的<code>JsonResult</code>或是<code>ActionResult</code><br>需要轉形才能作驗証<br>可以考慮整合測試勝於單元測試,<br>Controller的通常是面對 Client Side 的呼叫.</p>
<h2 id="Q2-當-Controller-只有取資料的邏輯"><a href="#Q2-當-Controller-只有取資料的邏輯" class="headerlink" title="Q2 當 Controller 只有取資料的邏輯"></a>Q2 當 Controller 只有取資料的邏輯</h2><h3 id="No-Logics-in-Controller"><a href="#No-Logics-in-Controller" class="headerlink" title="No Logics in Controller"></a>No Logics in Controller</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params"></span>)</span></div><div class="line">&#123;    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.Service.GetIndex();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Q3-當-Service-只有取資料的邏輯"><a href="#Q3-當-Service-只有取資料的邏輯" class="headerlink" title="Q3 當 Service 只有取資料的邏輯"></a>Q3 當 Service 只有取資料的邏輯</h2><h3 id="No-Logics-in-Service"><a href="#No-Logics-in-Service" class="headerlink" title="No Logics in Service"></a>No Logics in Service</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Member <span class="title">Get</span>(<span class="params"><span class="keyword">long</span> id</span>)</span></div><div class="line">&#123;    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.DataAccessor.GetMember(id);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="自問自答-1"><a href="#自問自答-1" class="headerlink" title="自問自答"></a>自問自答</h4><p>我認為不要,<br>要測試商業邏輯,不要在意覆蓋率</p>
<h2 id="Q4-當Service只有取Catch資料的邏輯"><a href="#Q4-當Service只有取Catch資料的邏輯" class="headerlink" title="Q4. 當Service只有取Catch資料的邏輯"></a>Q4. 當Service只有取Catch資料的邏輯</h2><h3 id="No-Logics-in-Service-just-call-another-service"><a href="#No-Logics-in-Service-just-call-another-service" class="headerlink" title="No Logics in Service , just call another service"></a>No Logics in Service , just call another service</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Member <span class="title">Get</span>(<span class="params"><span class="keyword">long</span> id</span>)</span></div><div class="line">&#123;   </div><div class="line">    <span class="keyword">var</span> enableCache = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">var</span> result = <span class="keyword">this</span>.CacheService.GetCacheData(</div><div class="line">        cacheKey,</div><div class="line">        () =&gt; &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.DataAccessor.GetMember(id);</div><div class="line">        &#125;,</div><div class="line">        enableCache</div><div class="line">    );    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="自問自答-2"><a href="#自問自答-2" class="headerlink" title="自問自答"></a>自問自答</h4><p>同上,仍然不需要,<br>要測試商業邏輯,不要在意覆蓋率,<br>要注意的或許是<code>CacheService.GetCacheData</code>是不是有包測試 ?<br>一般來說,Cache的功能很泛用,測試的報酬率很高</p>
<h2 id="Q5-承上-當邏輯存在Func參數之中？"><a href="#Q5-承上-當邏輯存在Func參數之中？" class="headerlink" title="Q5. 承上,當邏輯存在Func參數之中？"></a>Q5. 承上,當邏輯存在Func參數之中？</h2><h3 id="Logics-in-Func"><a href="#Logics-in-Func" class="headerlink" title="Logics in Func"></a>Logics in Func</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Member <span class="title">Get</span>(<span class="params"><span class="keyword">long</span> id</span>)</span></div><div class="line">&#123;   </div><div class="line">    <span class="keyword">var</span> enableCache = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">var</span> result = <span class="keyword">this</span>.CacheService.GetCacheData(</div><div class="line">        cacheKey,</div><div class="line">        () =&gt; &#123;</div><div class="line">            <span class="comment"><span class="doctag">///</span>/ logics here</span></div><div class="line">            <span class="keyword">if</span>(id &gt; <span class="number">9487</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.MemberAccessor.GetMember(id);</div><div class="line">            &#125;<span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.MemberV2Accessor.GetMember(id);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;,</div><div class="line">        enableCache</div><div class="line">    );    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="自問自答-3"><a href="#自問自答-3" class="headerlink" title="自問自答"></a>自問自答</h4><p>暫時無解,<br>或許是這樣Pattern不適合測試,需要調整架構嗎？<br>為了測試多包成一個公開方法,反而失去匿名函數的彈性優點,<br>不在匿名函數內寫邏輯更不合理,待求解答</p>
<h2 id="Q6-當邏輯在DA層或ORM的Query中要如何測試？"><a href="#Q6-當邏輯在DA層或ORM的Query中要如何測試？" class="headerlink" title="Q6.當邏輯在DA層或ORM的Query中要如何測試？"></a>Q6.當邏輯在DA層或ORM的Query中要如何測試？</h2><h3 id="Logics-in-ORM"><a href="#Logics-in-ORM" class="headerlink" title="Logics in ORM"></a>Logics in ORM</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">上略...</div><div class="line"><span class="keyword">using</span> (<span class="keyword">var</span> transactionScope = <span class="keyword">new</span> TransactionScope(TransactionScopeOption.Required, transactionOptions))</div><div class="line">&#123;</div><div class="line">    <span class="keyword">using</span> (Entities context = Entities.CreateNew(isReadOnly: <span class="literal">true</span>))</div><div class="line">    &#123;</div><div class="line">        <span class="comment"><span class="doctag">///</span>/ logics here</span></div><div class="line">        <span class="keyword">var</span> query = <span class="keyword">from</span> a <span class="keyword">in</span> context.Activies.Valids()</div><div class="line">                    <span class="keyword">where</span> a.Activies_StartDateTime &lt;= startTime &amp;&amp;</div><div class="line">                    a.Activies_EndDateTime &gt;= now &amp;&amp;</div><div class="line">                    a.Activies_ShopId == shopId &amp;&amp;</div><div class="line">                    a.ActiviesCondition.Any(i =&gt; i.Activies_ValidFlag</div><div class="line">                    &amp;&amp; TypeList.Contains(i.Activies_TypeDef))                    </div><div class="line">                    <span class="keyword">select</span> a;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="自問自答-4"><a href="#自問自答-4" class="headerlink" title="自問自答"></a>自問自答</h4><p>不適用單元測試,應該整合測試作包覆</p>
<h2 id="Q7-當邏輯在MappingProfile該如何測試"><a href="#Q7-當邏輯在MappingProfile該如何測試" class="headerlink" title="Q7. 當邏輯在MappingProfile該如何測試?"></a>Q7. 當邏輯在MappingProfile該如何測試?</h2><h3 id="Logics-in-MappingProfile"><a href="#Logics-in-MappingProfile" class="headerlink" title="Logics in MappingProfile"></a>Logics in MappingProfile</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">Mapper.CreateMap&lt;PageEntity, UserPageEntity&gt;()</div><div class="line">	  .ForMember(i =&gt; i.Id, s =&gt; s.MapFrom(i =&gt; i.User_Id))</div><div class="line">	  .ForMember(i =&gt; i.Title, s =&gt; s.MapFrom(i =&gt; i.User_Name))</div><div class="line">	  .ForMember(i =&gt; i.PageName, s =&gt; s.MapFrom(i =&gt; i.User_Name + i.User_LastName))</div><div class="line">	  .ForMember(i =&gt; i.LightBox, s =&gt; s.MapFrom(i =&gt; i.User_Sex == <span class="string">"male"</span> ? <span class="literal">true</span> : <span class="literal">false</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="自問自答-5"><a href="#自問自答-5" class="headerlink" title="自問自答"></a>自問自答</h4><p>要作測試,檢查欄位Mapping是否正確,<br>但實務上若重用性不高,寫MappingProfile不如直接在代碼內轉換.<br>可以少寫MappingProfile的測試.</p>
<p>待解答…<br>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Q1-Controller-要測試嗎？&quot;&gt;&lt;a href=&quot;#Q1-Controller-要測試嗎？&quot; class=&quot;headerlink&quot; title=&quot;Q1 Controller 要測試嗎？&quot;&gt;&lt;/a&gt;Q1 Controller 要測試嗎？&lt;/h2&gt;&lt;h3 i
    
    </summary>
    
    
      <category term="Unit Testing" scheme="http://blog.marsen.me/tags/Unit-Testing/"/>
    
      <category term="Integrated Testing" scheme="http://blog.marsen.me/tags/Integrated-Testing/"/>
    
  </entry>
  
  <entry>
    <title>AWS EC2開機筆記</title>
    <link href="http://blog.marsen.me/2017/12/08/cloud_learn/aws_creat_ec2_instance/"/>
    <id>http://blog.marsen.me/2017/12/08/cloud_learn/aws_creat_ec2_instance/</id>
    <published>2017-12-08T08:42:42.000Z</published>
    <updated>2018-01-03T16:39:41.122Z</updated>
    
    <content type="html"><![CDATA[<h2 id="應該知道的事"><a href="#應該知道的事" class="headerlink" title="應該知道的事"></a>應該知道的事</h2><ul>
<li>這個是教育訓練的筆記</li>
<li>使用web console 建立ec2</li>
<li>使用cli 建立ec2</li>
<li>2017的筆記可能會隨時間變得沒有參考價值</li>
<li>關鍵參數都打馬賽克,沒有牽扯到EBS/S3/VPC</li>
<li>對你可能沒有幫助</li>
</ul>
<h2 id="Web-Console"><a href="#Web-Console" class="headerlink" title="Web Console"></a>Web Console</h2><ol>
<li><p>login AWS</p>
</li>
<li><p>進入EC2<br><img src="https://i.imgur.com/hRFwjzr.jpg" alt=""></p>
</li>
<li><p>Launch Instance<br><img src="https://i.imgur.com/g9vlacA.jpg" alt=""></p>
</li>
<li><p>選擇AMI(Amazon Machine Image )<br><img src="https://i.imgur.com/dVKPsAp.jpg" alt=""></p>
</li>
<li><p>選擇Instance Type(有錢隨便選,沒錢選t2.nano)<br><img src="https://i.imgur.com/61gG2pd.jpg" alt=""></p>
</li>
<li><p>設定 Instance Details<br><img src="https://i.imgur.com/NkbKrzL.jpg" alt=""></p>
</li>
<li><p>如果想在開機的時候自動安裝一些程式,可以在<code>Advanced Details</code> 加語法<br>windows AMI請用 <code>Powershell</code><br><img src="https://i.imgur.com/bJxWlgd.jpg" alt=""></p>
</li>
<li><p>加硬碟<br><img src="https://i.imgur.com/MP9igLc.jpg" alt=""></p>
</li>
<li><p>加tag<br><img src="https://i.imgur.com/xDTx2nv.jpg" alt=""></p>
</li>
<li><p>設定Configure Security Group<br><img src="https://i.imgur.com/wximWw1.jpg" alt=""></p>
</li>
<li><p>預覽與啟動<br><img src="https://i.imgur.com/6Y4fcOI.jpg" alt=""></p>
</li>
<li><p>最後一步,選擇key-pair<br><img src="https://i.imgur.com/fRhUafI.jpg" alt=""></p>
</li>
</ol>
<h2 id="CLI-command"><a href="#CLI-command" class="headerlink" title="CLI command"></a>CLI command</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aws ec2 run-instances --image-id ami-da9e2cbc --count 1 --instance-type t2.nano --subnet-id subnet-cxxxxxxx --user-data file://userdata.sh --tag-specifications &quot;ResourceType=instance,Tags=[&#123;Key=Environment,Value=AWS-Training&#125;,&#123;Key=Name,Value=AWS-Training_MarkLin&#125;]&quot; --security-group-ids sg-XXXXXX --key-name marktest.japan.training</div></pre></td></tr></table></figure>
<h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><ul>
<li><a href="http://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html" target="_blank" rel="external">run-instances</a></li>
</ul>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;應該知道的事&quot;&gt;&lt;a href=&quot;#應該知道的事&quot; class=&quot;headerlink&quot; title=&quot;應該知道的事&quot;&gt;&lt;/a&gt;應該知道的事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;這個是教育訓練的筆記&lt;/li&gt;
&lt;li&gt;使用web console 建立ec2&lt;/li&gt;
&lt;li
    
    </summary>
    
    
      <category term="AWS" scheme="http://blog.marsen.me/tags/AWS/"/>
    
      <category term="EC2" scheme="http://blog.marsen.me/tags/EC2/"/>
    
  </entry>
  
  <entry>
    <title>單元測試與重構記錄(一)</title>
    <link href="http://blog.marsen.me/2017/10/31/integrated_testing_partice/"/>
    <id>http://blog.marsen.me/2017/10/31/integrated_testing_partice/</id>
    <published>2017-10-30T16:42:10.000Z</published>
    <updated>2017-11-26T18:36:18.604Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>有幸參與了一個跨國的專案,<br>為了快速上線，決定將整套原本在台灣程式碼搬移到跨國專案上,<br>上線後再依使用者的需求調整開發功能,<br>而在搬移的過程中,有需多模組並未開啟。<br>…</p>
<h2 id="現況"><a href="#現況" class="headerlink" title="現況"></a>現況</h2><p>遺留代碼 → 跨國 遇到的問題</p>
<ol>
<li>Copy Paste 最快卻不一定最適合</li>
<li>Copy Paste 最快卻不一定改得動</li>
<li>Copy Paste 最快但是有的地方沒Copy完</li>
</ol>
<p><code>用明朝的劍，斬清朝的官</code></p>
<h2 id="實務需求"><a href="#實務需求" class="headerlink" title="實務需求"></a>實務需求</h2><p>將本來跨國未開啟的<strong>折扣活動</strong>模組打開,<br>簡單的流程大致如下:<br>購物車 → 取得購物車資料 → 折扣活動 → 計算</p>
<p>實務上,整個流程作了許多事<br><img src="https://i.imgur.com/pM36Joo.jpg" alt=""></p>
<p>應該說作了太多事.<br><img src="https://i.imgur.com/NU0PqCh.jpg" alt=""></p>
<p>程式碼有壞味道,卻不能修改(重構).<br>因為沒有測試保護. </p>
<p>單一的Process，複雜度過高的方法(12)</p>
<p><code>CalculateShoppingCartPromotionDiscountV2Processor.Process()</code></p>
<p><img src="https://i.imgur.com/qleqGPb.jpg" alt=""></p>
<h3 id="目標與執行順序"><a href="#目標與執行順序" class="headerlink" title="目標與執行順序"></a>目標與執行順序</h3><ol>
<li>由 PM 或 QA 補足整合測試情境到足夠<ul>
<li>由實務上的需求來認定</li>
</ul>
</li>
<li>刪除台灣的測試</li>
<li>解析 <code>CalculateShoppingCartPromotionDiscountV2Processor</code> </li>
<li>補上單元測試<ul>
<li>Code Coverage(測試覆蓋率)</li>
</ul>
</li>
<li>重構</li>
</ol>
<h2 id="最終的目標是重構"><a href="#最終的目標是重構" class="headerlink" title="最終的目標是重構"></a>最終的目標是重構</h2><ul>
<li>心態:<a href="http://www.danielteng.com/2012/09/25/no-time-to-learn-perfect-excuse/" target="_blank" rel="external">沒有時間，完美的借口</a></li>
<li>重構前要先作整合測試</li>
<li>現有的整合測試的缺陷<ol>
<li>測試項目不符合馬來西亞現狀</li>
<li>測試項目未處理多語系</li>
<li>測試項目未處理小數點</li>
<li>測試項目難以閱讀</li>
<li>測試項目有重覆的覆蓋範圍</li>
</ol>
</li>
<li>RD與PM與QA合作</li>
</ul>
<h3 id="UAT-讓「人」讀得懂"><a href="#UAT-讓「人」讀得懂" class="headerlink" title="UAT 讓「人」讀得懂"></a>UAT 讓「人」讀得懂</h3><h4 id="原本的-UAT-RD"><a href="#原本的-UAT-RD" class="headerlink" title="原本的 UAT (RD)"></a>原本的 UAT (RD)</h4><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">場景: case37：商品活動+全店活動(有排除)；宅配，運費50元，滿350免運</div><div class="line">	．全店活動 / 有排除商品；滿額打折，多階(滿第1階)，跨溫層</div><div class="line">	．折扣條件：滿199元，打95折 / 滿299元，打89折 / 滿399元，打84折</div><div class="line">	．商品活動；滿件折現，單階，跨溫層</div><div class="line">	．折扣條件：滿2件，折45元</div><div class="line">	假設 購物車中溫層<span class="string">"Freezer"</span>商品為</div><div class="line">		|<span class="string"> SalePageId </span>|<span class="string"> SaleProductSKUId </span>|<span class="string"> Price </span>|<span class="string"> Qty </span>|</div><div class="line">		|<span class="string"> 50         </span>|<span class="string"> 50               </span>|<span class="string"> 75    </span>|<span class="string"> 1   </span>|</div><div class="line">		|<span class="string"> 27         </span>|<span class="string"> 27               </span>|<span class="string"> 66    </span>|<span class="string"> 2   </span>|</div><div class="line">	並且 購物車中溫層<span class="string">"Refrigerator"</span>商品為</div><div class="line">		|<span class="string"> SalePageId </span>|<span class="string"> SaleProductSKUId </span>|<span class="string"> Price </span>|<span class="string"> Qty </span>|</div><div class="line">		|<span class="string"> 26         </span>|<span class="string"> 26               </span>|<span class="string"> 55    </span>|<span class="string"> 2   </span>|</div><div class="line">	並且 購物車中溫層<span class="string">"Normal"</span>商品為</div><div class="line">		|<span class="string"> SalePageId </span>|<span class="string"> SaleProductSKUId </span>|<span class="string"> Price </span>|<span class="string"> Qty </span>|</div><div class="line">		|<span class="string"> 25         </span>|<span class="string"> 25               </span>|<span class="string"> 2     </span>|<span class="string"> 2   </span>|</div><div class="line">	並且 活動<span class="string">"1"</span>範圍設定為</div><div class="line">		|<span class="string"> TargetType </span>|<span class="string"> TargetIdList </span>|</div><div class="line">		|<span class="string"> Shop       </span>|<span class="string"> 1            </span>|</div><div class="line">	並且 活動目標排除商品頁為</div><div class="line">		|<span class="string"> PromotionId </span>|<span class="string"> TargetExcludeSalePageList </span>|</div><div class="line">		|<span class="string"> 1           </span>|<span class="string"> 50          </span>|</div><div class="line">	並且  現折活動<span class="string">"1"</span>的折扣為</div><div class="line">		|<span class="string"> Id </span>|<span class="string"> TypeDef      </span>|<span class="string"> TotalPrice </span>|<span class="string"> DiscountTypeDef </span>|<span class="string"> DiscountRate </span>|</div><div class="line">		|<span class="string"> 1  </span>|<span class="string"> TotalPriceV2 </span>|<span class="string"> 199        </span>|<span class="string"> DiscountRate    </span>|<span class="string"> 0.95         </span>|</div><div class="line">		|<span class="string"> 2  </span>|<span class="string"> TotalPriceV2 </span>|<span class="string"> 299        </span>|<span class="string"> DiscountRate    </span>|<span class="string"> 0.89         </span>|</div><div class="line">		|<span class="string"> 3  </span>|<span class="string"> TotalPriceV2 </span>|<span class="string"> 399        </span>|<span class="string"> DiscountRate    </span>|<span class="string"> 0.84         </span>|</div><div class="line">	並且 活動<span class="string">"2"</span>範圍設定為</div><div class="line">		|<span class="string"> TargetType        </span>|<span class="string"> TargetIdList </span>|</div><div class="line">		|<span class="string"> PromotionSalePage </span>|<span class="string"> 0            </span>|</div><div class="line">	並且 活動目標商品頁為</div><div class="line">		|<span class="string"> PromotionId </span>|<span class="string"> TargetSalePageList </span>|</div><div class="line">		|<span class="string"> 2           </span>|<span class="string"> 50,25,26,27        </span>|</div><div class="line">	並且  現折活動<span class="string">"2"</span>的折扣為</div><div class="line">		|<span class="string"> Id </span>|<span class="string"> TypeDef    </span>|<span class="string"> TotalQty </span>|<span class="string"> DiscountTypeDef </span>|<span class="string"> DiscountPrice </span>|</div><div class="line">		|<span class="string"> 4  </span>|<span class="string"> TotalQtyV2 </span>|<span class="string"> 2        </span>|<span class="string"> DiscountPrice   </span>|<span class="string"> 45            </span>|</div><div class="line">	當 計算活動折扣</div><div class="line">	那麼 購物車商品折扣後為</div><div class="line">		|<span class="string"> SalePageId </span>|<span class="string"> SaleProductSKUId </span>|<span class="string"> PromotionDiscount </span>|</div><div class="line">		|<span class="string"> 50         </span>|<span class="string"> 50               </span>|<span class="string"> -12               </span>|</div><div class="line">		|<span class="string"> 27         </span>|<span class="string"> 27               </span>|<span class="string"> -25               </span>|</div><div class="line">		|<span class="string"> 26         </span>|<span class="string"> 26               </span>|<span class="string"> -19               </span>|</div><div class="line">		|<span class="string"> 25         </span>|<span class="string"> 25               </span>|<span class="string"> 0                 </span>|</div></pre></td></tr></table></figure>
<h4 id="「人」寫的UAT"><a href="#「人」寫的UAT" class="headerlink" title="「人」寫的UAT"></a>「人」寫的UAT</h4><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">場景: 商品有兩檔活動，全店活動與商品活動；</div><div class="line">	．第一檔是全店活動 / 排除商品B；滿額打折，</div><div class="line">	．折扣條件：滿10元，打95折 / 滿20元，打89折 / 滿30元，打84折</div><div class="line">	．第二檔是指定商品；滿件折現，單階，指定商品A 、商品B</div><div class="line">	．折扣條件：滿2件，折3元</div><div class="line"></div><div class="line">當 購物車中的商品為<span class="string">"商品A 與商品B"</span></div><div class="line">		|<span class="string"> Title </span>|<span class="string"> SalePageId </span>|<span class="string"> SaleProductSKUId </span>|<span class="string"> Price </span>|<span class="string"> Qty </span>|</div><div class="line">		|<span class="string"> 商品A   </span>|<span class="string"> 25         </span>|<span class="string"> 25               </span>|<span class="string"> 7.45  </span>|<span class="string"> 2   </span>|</div><div class="line">		|<span class="string"> 商品B   </span>|<span class="string"> 26         </span>|<span class="string"> 26               </span>|<span class="string"> 4.45  </span>|<span class="string"> 2   </span>|</div><div class="line">	</div><div class="line">並且 第<span class="string">"1"</span>檔是全店活動 ,排除以下商品</div><div class="line">	    |<span class="string"> Title </span>|<span class="string"> SalePageId </span>|</div><div class="line">	    |<span class="string"> 商品A   </span>|<span class="string"> 26         </span>|</div><div class="line"></div><div class="line">而且 第<span class="string">"1"</span>檔折扣條件是<span class="string">"滿額打折,滿10元，打95折 / 滿20元，打89折 / 滿30元，打84折"</span>,如下</div><div class="line">    |<span class="string"> Id </span>|<span class="string"> TypeDef      </span>|<span class="string"> TotalPrice </span>|<span class="string"> DiscountTypeDef </span>|<span class="string"> DiscountRate </span>|</div><div class="line">    |<span class="string"> 1  </span>|<span class="string"> TotalPriceV2 </span>|<span class="string"> 10         </span>|<span class="string"> DiscountRate    </span>|<span class="string"> 0.95         </span>|</div><div class="line">    |<span class="string"> 2  </span>|<span class="string"> TotalPriceV2 </span>|<span class="string"> 20         </span>|<span class="string"> DiscountRate    </span>|<span class="string"> 0.89         </span>|</div><div class="line">    |<span class="string"> 3  </span>|<span class="string"> TotalPriceV2 </span>|<span class="string"> 30         </span>|<span class="string"> DiscountRate    </span>|<span class="string"> 0.84         </span>|</div><div class="line"></div><div class="line">並且 第<span class="string">"2"</span>檔是指定商品,指定商品如下</div><div class="line">    |<span class="string"> Title </span>|<span class="string"> SalePageId </span>|</div><div class="line">    |<span class="string"> 商品A   </span>|<span class="string"> 25         </span>|</div><div class="line">    |<span class="string"> 商品B   </span>|<span class="string"> 26         </span>|</div><div class="line">    |<span class="string"> 商品C   </span>|<span class="string"> 27         </span>|</div><div class="line">    |<span class="string"> 商品D   </span>|<span class="string"> 50         </span>|</div><div class="line"></div><div class="line">而且 第<span class="string">"2"</span>檔折扣條件是<span class="string">"滿件折現,滿2件，折3元"</span>,如下</div><div class="line">    |<span class="string"> Id </span>|<span class="string"> TypeDef    </span>|<span class="string"> TotalQty </span>|<span class="string"> DiscountTypeDef </span>|<span class="string"> DiscountPrice </span>|</div><div class="line">    |<span class="string"> 4  </span>|<span class="string"> TotalQtyV2 </span>|<span class="string"> 2        </span>|<span class="string"> DiscountPrice   </span>|<span class="string"> 3             </span>|</div><div class="line"></div><div class="line">當 計算活動折扣</div><div class="line"></div><div class="line">那麼 購物車商品折扣金額及折扣後小計為 </div><div class="line">    |<span class="string"> Title </span>|<span class="string"> SalePageId </span>|<span class="string"> Price </span>|<span class="string"> Qty </span>|<span class="string"> PromotionDiscount </span>|<span class="string"> TotalPayment </span>|</div><div class="line">    |<span class="string"> 商品A   </span>|<span class="string"> 25         </span>|<span class="string"> 7.45  </span>|<span class="string"> 2   </span>|<span class="string"> -2.55             </span>|<span class="string"> 12.35        </span>|</div><div class="line">    |<span class="string"> 商品B   </span>|<span class="string"> 26         </span>|<span class="string"> 4.45  </span>|<span class="string"> 2   </span>|<span class="string"> -1.11             </span>|<span class="string"> 7.79         </span>|</div></pre></td></tr></table></figure>
<p>與 PM 及 QA 討論後 , 寫的 UAT 可閱讀性提高了<br>這裡用到了一些小技巧 , 讓 Cucumber 文件的可讀性更高<br>而不會有太多的重複方法 , 比如說把描述性的文字當作參數傳遞<br>實際上測試不會使用到這些變數 ,但是可以增加可讀性 .</p>
<h3 id="刪除台灣測試"><a href="#刪除台灣測試" class="headerlink" title="刪除台灣測試"></a>刪除台灣測試</h3><p>因為已經有了跨國所需要的測試 ,<br>台灣的測試便可以退場了.<br>實際上也不符合現況, 如多語系、時差與小數點等問題</p>
<h3 id="解析-CalculateShoppingCartPromotionDiscountV2Processor"><a href="#解析-CalculateShoppingCartPromotionDiscountV2Processor" class="headerlink" title="解析 CalculateShoppingCartPromotionDiscountV2Processor"></a>解析 <code>CalculateShoppingCartPromotionDiscountV2Processor</code></h3><p><img src="https://i.imgur.com/FioG5NG.jpg" alt=""></p>
<ol>
<li>無折扣的情境</li>
<li>新舊相容的情境</li>
<li>排序</li>
<li>計算折扣金額</li>
<li>看見相依<ol>
<li>程式碼中有 new 別的 class 的部份</li>
<li>程式碼中有使用靜態方法的部份</li>
</ol>
</li>
</ol>
<h3 id="補上單元測試"><a href="#補上單元測試" class="headerlink" title="補上單元測試"></a>補上單元測試</h3><p>最簡單的重構,就是將整個方法內的四個邏輯<br>拆成四塊個子方法,並為他們加上單元測試.<br>修改的過程,如果有紅燈就要修改成綠燈,<br>而整個成品要保證整合測試與單元測試都是綠燈. </p>
<p>此外,重構的過程中如果過到靜態方法,<br>或是 new 新物件, 都很有可能是種相依,<br>可以透過一些方法作解耦,<br>參考之前的文章<a href="/2017/04/23/unitestwriting/">單元測試這樣玩就對了</a> </p>
<h3 id="重構"><a href="#重構" class="headerlink" title="重構"></a>重構</h3><p>最後一步就是大膽的重構了,<br>有了測試作保護,<br>可以作更大範圍的重構,<br>如下圖示,這裡揭露了在台灣原有的繼承結構,<br>而紅色的部份是在跨國用不到的類別.<br><img src="https://i.imgur.com/VQ10wY6.jpg" alt=""></p>
<p>下一步，待續…</p>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;有幸參與了一個跨國的專案,&lt;br&gt;為了快速上線，決定將整套原本在台灣程式碼搬移到跨國專案上,&lt;br&gt;上線後再依使用者的需求調
    
    </summary>
    
    
      <category term="Unit Testing" scheme="http://blog.marsen.me/tags/Unit-Testing/"/>
    
      <category term="Integrated Testing" scheme="http://blog.marsen.me/tags/Integrated-Testing/"/>
    
  </entry>
  
  <entry>
    <title>20171023本周要聞/心得/學習擷錄</title>
    <link href="http://blog.marsen.me/2017/10/23/weekly_learn/20171023/"/>
    <id>http://blog.marsen.me/2017/10/23/weekly_learn/20171023/</id>
    <published>2017-10-23T03:47:27.000Z</published>
    <updated>2017-10-24T17:35:55.169Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p><a href="https://mp.weixin.qq.com/s/n_Gnn5sJ0PkwhQhWUc0UeQ" target="_blank" rel="external">Docker 宣布拥抱 Kubernetes</a></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Docker Swarm与整个Docker平台紧密集成，然而并非所有人都愿意选择Swarm。 </div><div class="line">Hykes表示，默认的Swarm已经限制了Docker用户的完整体验，</div><div class="line">为此，Docker公司计划提供一个无缝平台，同时支持包含Swarm和Kubernetes集群的异构部署。</div><div class="line">Docker企业版（EE）将很快为Kuberenetes和Swarm提供全套Docker管理服务</div></pre></td></tr></table></figure>
</li>
<li><p>免費字哪裡找？使用<a href="https://fonts.google.com" target="_blank" rel="external">google font</a></p>
</li>
<li><p>使用TypeScript開發nodejs發生以下錯誤(使用gulp編譯成js)</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">error TS2693: &apos;Promise&apos; only refers to a type, but is being used as a value here.</div></pre></td></tr></table></figure>
<p> 安裝 <code>@types/es6-promise</code> 以解決問題</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev  @types/es6-promise</div></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>netstat -ano</code> 指令在 windows 上查詢佔用的 port 與 PID</p>
</li>
<li>執行 <code>npm ls moduleName</code> 可以列出目前專案所以相依該模組的模組</li>
<li>執行 <code>npm update</code> 更新目前專案的模組</li>
<li><code>package.json</code>裡面的的節點<code>dependencies</code>放的是與專案相關的模組，<br> 而<code>devDependencies</code>放的是與開發相關的模組。ex:<code>gulp</code>,<br>  請考慮你使用的模組，是為了開發？還是產品真的會用到。</li>
<li><p>想法</p>
<ul>
<li>懶人包應是協助跨越門檻與看見全貌的工具，<br>雖然難以避免代入個人的價值觀，但是刻意為之是不好的。</li>
<li>自我批判是一種建立反饋的最好方式，比起以公司\社群\世界最好的人要求自已，<br>以最好的自已去要求自已理應該最恰當的，錄影、看鏡子之類的方式… 。</li>
</ul>
</li>
<li><p>[叫人意想不到的激勵科學 (TED 中英文字幕)] (<a href="https://www.youtube.com/watch?v=rFVhkIrVDzM" target="_blank" rel="external">https://www.youtube.com/watch?v=rFVhkIrVDzM</a>)</p>
<ol>
<li>自主性</li>
<li>掌握度</li>
<li>使命感</li>
</ol>
</li>
</ol>
<p>(fin)    </p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/n_Gnn5sJ0PkwhQhWUc0UeQ&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker 宣布拥抱 Kubernetes&lt;/a&gt;&lt;/p&gt;
 &lt;figu
    
    </summary>
    
    
      <category term="記錄" scheme="http://blog.marsen.me/tags/%E8%A8%98%E9%8C%84/"/>
    
      <category term="Kubernetes" scheme="http://blog.marsen.me/tags/Kubernetes/"/>
    
      <category term="Docker" scheme="http://blog.marsen.me/tags/Docker/"/>
    
      <category term="TypeScript" scheme="http://blog.marsen.me/tags/TypeScript/"/>
    
      <category term="Nodejs" scheme="http://blog.marsen.me/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>[閱讀筆記]異數</title>
    <link href="http://blog.marsen.me/2017/10/22/books/book_outliers_the_story_of_success/"/>
    <id>http://blog.marsen.me/2017/10/22/books/book_outliers_the_story_of_success/</id>
    <published>2017-10-22T09:10:46.000Z</published>
    <updated>2017-10-24T17:35:55.168Z</updated>
    
    <content type="html"><![CDATA[<h1 id="心得小結-2017-一讀"><a href="#心得小結-2017-一讀" class="headerlink" title="心得小結(2017.一讀)"></a>心得小結(2017.一讀)</h1><p>作者認為成功的主要原因是優勢的累績與努力，<br>我們常說時間花在哪裡，成就就在哪裡，<br>但是許多傑出的例子(莫札特與比爾。蓋茲)，<br>除了努力外，還有幸運的(?)際遇，<br>在很小的時候就開始邁向傑出，<br>這讓我想到福原愛;從小就接觸桌球又有母親(導師)親自調校，<br>但作者最終歸向時代與文化，兩個不可控的因素。<br>努力只能讓你成為比一般人好的人，<br>而加上際遇(時代與文化)，才能成為傑出(ex:世界前100之類)，<br>相比「我比別人更認真-刻意練習．讓自己發光」，<br><strong>我</strong>書比較強調導師與信念(熱情)的重要性，<br>而<strong>異數</strong>比較偏向命定論。</p>
<p>並沒有很推薦，但是書中的馬太效應，<br>以及透過學習別的語言來改變文化帶來的<strong>業</strong>，<br>值得反思 .</p>
<h1 id="筆記"><a href="#筆記" class="headerlink" title="筆記"></a>筆記</h1><h2 id="ch1-好上加好的馬太效應"><a href="#ch1-好上加好的馬太效應" class="headerlink" title="ch1 好上加好的馬太效應"></a>ch1 好上加好的馬太效應</h2><ol>
<li>成功是優勢的累積</li>
<li>我們把成功與個人特質畫上等號，其他人因而失去出頭的機會。<br>我們制定出來的規則反而壓抑成就，我們太早宣布某些人是失敗者。  </li>
</ol>
<h2 id="ch2-一萬個小時的努力"><a href="#ch2-一萬個小時的努力" class="headerlink" title="ch2 一萬個小時的努力"></a>ch2 一萬個小時的努力</h2><ol>
<li>他們的成功不完全是自已打造出來的，也是他們生長的時代造就的。</li>
</ol>
<h2 id="ch3-天才的迷思"><a href="#ch3-天才的迷思" class="headerlink" title="ch3 天才的迷思"></a>ch3 天才的迷思</h2><h2 id="ch4-天才的迷思．II"><a href="#ch4-天才的迷思．II" class="headerlink" title="ch4 天才的迷思．II"></a>ch4 天才的迷思．II</h2><ul>
<li>才智和成就沒有絕對關係</li>
<li>抽象智能與實用智能<ul>
<li>實用智能:社交常識與處事能力(後天習得，家庭)，知道在什麼時候用什麼方式以及說什麼，以達到最大效果</li>
</ul>
</li>
<li>階級的文化優勢<ul>
<li>勞動階級和貧窮人家的孩子，保守不信任別人，厭惡權威，拙於交際</li>
</ul>
</li>
</ul>
<p><em>feedback:</em> </p>
<ol>
<li>千里馬常有，伯樂不常有。</li>
<li>我是勞動階級和貧窮人家的孩子</li>
<li>人脈的重要性。</li>
<li>如何與權威人士交際？</li>
</ol>
<h2 id="ch5-猶太律師的啟示"><a href="#ch5-猶太律師的啟示" class="headerlink" title="ch5 猶太律師的啟示"></a>ch5 猶太律師的啟示</h2><ol>
<li>什麼都作，有生意上門就好了</li>
<li>機會其實是隱藏在逆境當中</li>
<li>你的父母是做什麼的，和你日後的成就大有關係</li>
<li>只要夠聰明就夠了</li>
</ol>
<p><em>feedback</em></p>
<ol>
<li><a href="https://www.evernote.com/shard/s36/sh/79c0d125-1dc3-4a7e-aa46-5264b223d29d/d8bcb5338bbbf4fe" target="_blank" rel="external">七年級最慘的是哪一年次？</a></li>
<li>生逢其時 vs 生不逢時</li>
</ol>
<h2 id="ch-6-以血還血"><a href="#ch-6-以血還血" class="headerlink" title="ch 6 以血還血"></a>ch 6 以血還血</h2><h2 id="ch-7-空中危機"><a href="#ch-7-空中危機" class="headerlink" title="ch 7 空中危機"></a>ch 7 空中危機</h2><ol>
<li>文化的影響</li>
<li>以大韓航空空難為例-文化的包袱</li>
<li>用語言改變文化的包袱(ex:英文)</li>
</ol>
<h2 id="ch-8-稻米文化與數學能力"><a href="#ch-8-稻米文化與數學能力" class="headerlink" title="ch 8 稻米文化與數學能力"></a>ch 8 稻米文化與數學能力</h2><h2 id="ch-9-知識力學校"><a href="#ch-9-知識力學校" class="headerlink" title="ch 9 知識力學校"></a>ch 9 知識力學校</h2><h2 id="後記-從牙買加到加拿大"><a href="#後記-從牙買加到加拿大" class="headerlink" title="後記 從牙買加到加拿大"></a>後記 從牙買加到加拿大</h2><ol>
<li>亞洲數字發音較有規則且合乎邏輯</li>
<li>成功者的共通點就是努力</li>
</ol>
<h2 id="書單"><a href="#書單" class="headerlink" title="書單"></a>書單</h2><ol>
<li>意外的百萬富翁(Jobs 傳記)</li>
</ol>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ol>
<li>廖月娟的翻譯很不錯，感覺不出來是在讀外國人寫的書。</li>
<li><a href="https://www.mobile01.com/topicdetail.php?f=291&amp;t=5107472" target="_blank" rel="external">台灣財富排名690萬人是月光族230萬人有超3千萬資產</a></li>
</ol>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;心得小結-2017-一讀&quot;&gt;&lt;a href=&quot;#心得小結-2017-一讀&quot; class=&quot;headerlink&quot; title=&quot;心得小結(2017.一讀)&quot;&gt;&lt;/a&gt;心得小結(2017.一讀)&lt;/h1&gt;&lt;p&gt;作者認為成功的主要原因是優勢的累績與努力，&lt;br&gt;我們常
    
    </summary>
    
    
      <category term="閱讀筆記" scheme="http://blog.marsen.me/tags/%E9%96%B1%E8%AE%80%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>使用 DateInterceptor 攔截SQL 語法</title>
    <link href="http://blog.marsen.me/2017/09/24/sql_ef6_dateInterceptor/"/>
    <id>http://blog.marsen.me/2017/09/24/sql_ef6_dateInterceptor/</id>
    <published>2017-09-24T02:55:30.000Z</published>
    <updated>2017-10-09T11:18:55.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在<a href="https://blog.marsen.me/2017/09/18/sql_compatibility_level_with_datetime2/">SQL Compatibility Level 對MsSQL時間查詢的影響</a>這篇文章裡,<br>遇到了一個令難以處理的問題, 簡單的複述一下,  </p>
<ol>
<li>我的資料表以一個 datetime 欄位當作 PK</li>
<li>我的SQL DB版本為 2016 以上 (Compatibility Level預設值為130)</li>
</ol>
<p>這個時候我所有的 Entity Context 更新語法在呼叫 SaveChange 時會拋出錯誤;<br>原因在於 EF 所產生的 SQL Query 語法 , 會以 PK 值作為查詢條件,<br>而在這個時候 查詢時間的條件會精準到微秒(μs=1/1000000秒),<br>但是 datetime 欄位只會記錄到豪秒(ms=1/1000秒),<br>於是精準不足的部份就會補 0 ,<br>EX:<br><code>2017-09-24 11:55:35.3720000</code> 與 <code>2017-09-24 11:55:35.372</code><br>這會導致查無資料進而引發 <a href="https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.dbupdateconcurrencyexception(v=vs.103" target="_blank" rel="external">dbupdateconcurrencyexception</a>.aspx)</p>
<h2 id="解決方針"><a href="#解決方針" class="headerlink" title="解決方針"></a>解決方針</h2><h3 id="修改資料欄位"><a href="#修改資料欄位" class="headerlink" title="修改資料欄位"></a>修改資料欄位</h3><p> 將資料庫的欄位datatype datetime 改成 datetime2 ,<br> 這或許是最理想的解法了, 你不需要更動程式碼,<br> 而且會提昇你資料的時間精準度.<br> 不過實務上,你必須考慮到你是否有dba的權限與即有的資料量,<br> 當產品的核心功能依賴著這張表的時候且有巨量資料存在時,<br> 更新欄位的資料型態的衝擊與風險或許是難以承受的.<br> 更不用說還要考慮到整個 DB Server Cluster 的架構之類的問題.</p>
<h3 id="修改-SQL-Server-Compatibility-Level-從-130-至-120"><a href="#修改-SQL-Server-Compatibility-Level-從-130-至-120" class="headerlink" title="修改 SQL Server Compatibility Level 從 130 至 120"></a>修改 SQL Server Compatibility Level 從 130 至 120</h3><p>非常不建議的作法, 除了要考慮上述權限、衝擊與風險的問題外,<br>如果降轉 Compatibility Level<br>或許會使得其他有使用到 datetime2 型態的資料欄位發生異常,<br>或是是失去原本精度的意義. </p>
<h3 id="使用-DateInterceptor-攔截SQL-語法"><a href="#使用-DateInterceptor-攔截SQL-語法" class="headerlink" title="使用 DateInterceptor 攔截SQL 語法"></a>使用 DateInterceptor 攔截SQL 語法</h3><p>在考量上述兩種情況, 為了不增加<del>DBA的工作量</del>無謂的風險與權責問題,<br>(其實是實務上我沒有DB Server的異動權限),<br>我們可以透過 <a href="https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.interception.idbcommandinterceptor(v=vs.113" target="_blank" rel="external">IDbInterceptor</a>.aspx) 來欄截 Entity Framework 對DB 存取時執行的 Query</p>
<p>以下是個簡單的範例,</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DateInterceptor</span> : <span class="title">IDbInterceptor</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReaderExecuting</span>(<span class="params">DbCommand command,</span></span></div><div class="line">        DbCommandInterceptionContext&lt;DbDataReader&gt; interceptionContext)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> dateParameters = command.Parameters.OfType&lt;DbParameter&gt;()</div><div class="line">            .Where(p =&gt; p.DbType == DbType.DateTime2);</div><div class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> parameter <span class="keyword">in</span> dateParameters)</div><div class="line">        &#123;</div><div class="line">            parameter.DbType = DbType.DateTime;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我們實作了一個 IDbInterceptor 的類別,<br>用來將 datetime2 的資料型別轉型成 datetime,<br>接下要將它掛載在 Entity Context之中 </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">EF6Entities</span> : <span class="title">DbContext</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EF6Entities</span>(<span class="params"></span>)</span></div><div class="line">        : <span class="title">base</span>(<span class="params"><span class="string">"name=EF6Entities"</span></span>)</div><div class="line">    &#123;</div><div class="line">        DbInterception.Add(<span class="keyword">new</span> DateInterceptor());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">DbModelBuilder modelBuilder</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnintentionalCodeFirstException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> DbSet&lt;BatchUploadData&gt; BatchUploadData &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如此一來就會以 datetime 的精準度產生 SQL Query</p>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul>
<li><a href="https://github.com/marsen/EFDemo" target="_blank" rel="external">程式碼</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.interception.idbcommandinterceptor.aspx" target="_blank" rel="external">IDbInterceptor</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.interception.idbcommandinterceptor.aspx" target="_blank" rel="external">IDbCommandInterceptor</a></li>
<li><a href="https://stackoverflow.com/questions/46387565/how-to-change-how-entity-framework-generates-sql-precision-for-datetime" target="_blank" rel="external">How to change how Entity Framework generates SQL precision for Datetime</a></li>
</ul>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;https://blog.marsen.me/2017/09/18/sql_compatibility_level_wi
    
    </summary>
    
    
      <category term="Database" scheme="http://blog.marsen.me/tags/Database/"/>
    
      <category term="MsSQL" scheme="http://blog.marsen.me/tags/MsSQL/"/>
    
      <category term="Entity Framework" scheme="http://blog.marsen.me/tags/Entity-Framework/"/>
    
  </entry>
  
  <entry>
    <title>SQL Compatibility Level 對MsSQL時間查詢的影響</title>
    <link href="http://blog.marsen.me/2017/09/18/sql_compatibility_level_with_datetime2/"/>
    <id>http://blog.marsen.me/2017/09/18/sql_compatibility_level_with_datetime2/</id>
    <published>2017-09-18T03:30:13.000Z</published>
    <updated>2017-09-18T17:14:51.315Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大綱"><a href="#大綱" class="headerlink" title="大綱"></a>大綱</h2><p>這次透過Entity Framework(EF5)作了一個簡單的資料庫更新,<br>恰巧的是這次更新的Table因為某些需求,使用 datetime 作為 Key 值.<br>進而引發一連串的錯誤, 最後才找到 SQL Compatibility Level 對 MsSQL 時間查詢影響. </p>
<h3 id="正式環境-SQL-版本-13-0-4422-0"><a href="#正式環境-SQL-版本-13-0-4422-0" class="headerlink" title="正式環境 SQL 版本 13.0.4422.0"></a>正式環境 SQL 版本 13.0.4422.0</h3><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpdateBatchUploadData</span>(<span class="params">BatchUploadDataEntity batchUploadDataEntity</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">using</span> (WebStoreDBEntitiesV2 context = <span class="keyword">this</span>.LifetimeScope.Resolve&lt;WebStoreDBEntitiesV2&gt;())</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> item = (<span class="keyword">from</span> batchUploadData <span class="keyword">in</span> context.BatchUploadData.Valids()</div><div class="line">                    <span class="keyword">where</span> batchUploadData.BatchUploadData_Id == batchUploadDataEntity.BatchUploadData_Id</div><div class="line">                    <span class="keyword">select</span> batchUploadData).FirstOrDefault();</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.MapBatchUploadData(batchUploadDataEntity, item);</div><div class="line"></div><div class="line">        context.SaveChanges();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上面程式所示, <code>item</code> 是透過 Key 值 <code>BatchUploadData_Id</code> 取回來的物件.<br>而 <code>MapBatchUploadData</code> 是一段簡單的程式碼,<br>單純的將 <code>batchUploadDataEntity</code> 的值 mapping 到 item<br>再呼叫 SaveChanges , 卻引發了 <a href="https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.dbupdateconcurrencyexception(v=vs.103" target="_blank" rel="external">dbupdateconcurrencyexception</a>.aspx)</p>
<h3 id="錯誤畫面"><a href="#錯誤畫面" class="headerlink" title="錯誤畫面"></a>錯誤畫面</h3><p><img src="https://i.imgur.com/8kBIYRr.jpg" alt=""></p>
<h3 id="錯誤訊息"><a href="#錯誤訊息" class="headerlink" title="錯誤訊息"></a>錯誤訊息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">存放區更新、插入或刪除陳述式影響到非預期數目的資料列 (0)。</div><div class="line">這些實體載入之後可能被修改或刪除了。請重新整理 ObjectStateManager 實體。</div></pre></td></tr></table></figure>
<p>這一段訊息的意思就是: Entity Framework 預期更新了<code>0</code>筆資料，與它所預期的不符, 所以拋出錯誤。</p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>透過用<strong>Sql Profiler</strong>我們錄製到了以下的SQL<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">exec sp_executesql N'<span class="keyword">update</span> [dbo].[BatchUploadData]</div><div class="line"><span class="keyword">set</span> [BatchUploadData_StatusDef] = @<span class="number">0</span>, [BatchUploadData_UpdatedTimes] = @<span class="number">1</span>, [BatchUploadData_UpdatedDateTime] = @<span class="number">2</span></div><div class="line"><span class="keyword">where</span> (([BatchUploadData_Id] = @<span class="number">3</span>) <span class="keyword">and</span> ([BatchUploadData_CreatedDateTime] = @<span class="number">4</span>))</div><div class="line"><span class="keyword">select</span> [BatchUploadData_Rowversion]</div><div class="line"><span class="keyword">from</span> [dbo].[BatchUploadData]</div><div class="line"><span class="keyword">where</span> @@ROWCOUNT &gt; <span class="number">0</span> <span class="keyword">and</span> [BatchUploadData_Id] = @<span class="number">3</span> <span class="keyword">and</span> [BatchUploadData_CreatedDateTime] = @<span class="number">4</span><span class="string">',N'</span>@<span class="number">0</span> <span class="built_in">varchar</span>(<span class="number">30</span>),@<span class="number">1</span> tinyint,@<span class="number">2</span> datetime2(<span class="number">7</span>),@<span class="number">3</span> <span class="built_in">bigint</span>,@<span class="number">4</span> datetime2(<span class="number">7</span>)<span class="string">',@0='</span>ProcessFailed<span class="string">',@1=1,@2='</span><span class="number">2017</span><span class="number">-09</span><span class="number">-16</span> <span class="number">11</span>:<span class="number">29</span>:<span class="number">35.3720061</span><span class="string">',@3=52,@4='</span><span class="number">2017</span><span class="number">-09</span><span class="number">-05</span> <span class="number">18</span>:<span class="number">53</span>:<span class="number">36.3530000</span><span class="string">'</span></div></pre></td></tr></table></figure></p>
<p>請注意到 <strong>@4 datetime2(7) … @4=’2017-09-05 18:53:36.3530000’</strong><br>如果將 <code>datetime2(7)</code> 改為 <code>datetime</code>或是將查詢語句改為 <code>@4=&#39;2017-09-05 18:53:36.353</code> 就能正確更新資料.  </p>
<p><img src="https://i.imgur.com/8pGTYL4.gif" alt=""></p>
<h3 id="本機實測-SQL-版本-12-0-4459-0"><a href="#本機實測-SQL-版本-12-0-4459-0" class="headerlink" title="本機實測 (SQL 版本 12.0.4459.0)"></a>本機實測 (SQL 版本 12.0.4459.0)</h3><p>透過本機寫了一小段的SQL作測試,<br><img src="https://i.imgur.com/iJntV1i.gif" alt=""><br><strong>竟然不會有問題!!!</strong>  </p>
<p>這跟 SQL Compatibility Level 有關,<br>mssql 2014 預設是 120, 2016 預設是130,<br>Datetime2 在 120 跟 130 的結果會不一樣.  </p>
<h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><p>主要的查詢與更新 SQL 是 Entity Framework 產生的,<br>所以我無法透過修改 SQL 的方式解決這個問題,<br>而正式環境的 SQL Compatibility Level 調整將會牽一髮動全身<br>且基於版本演進, 往新的版本靠攏是合理的選擇<br>暫時的解法是透過修改 edmx ,<br>不讓 datetime 作為整個 table 的 Key值.<br>較好的解法是升級 Entity Framework<br>透過 Entity Framework 的機制, 指定查詢時間的精準度.<br>實作的部份未來再補上. </p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://docs.microsoft.com/en-us/sql/t-sql/statements/alter-database-transact-sql-compatibility-level" target="_blank" rel="external">ALTER DATABASE (Transact-SQL) Compatibility</a></li>
<li><a href="https://social.msdn.microsoft.com/Forums/silverlight/en-US/de5dbf3e-8c95-40f4-9e31-b71f1f31983d/change-in-datetime2-implementation-in-sql-server-2016?forum=transactsql" target="_blank" rel="external">Change in datetime2 implementation in SQL Server 2016</a></li>
<li><a href="https://docs.microsoft.com/zh-tw/sql/relational-databases/databases/view-or-change-the-compatibility-level-of-a-database" target="_blank" rel="external">檢視或變更資料庫的相容性層級</a></li>
</ul>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;大綱&quot;&gt;&lt;a href=&quot;#大綱&quot; class=&quot;headerlink&quot; title=&quot;大綱&quot;&gt;&lt;/a&gt;大綱&lt;/h2&gt;&lt;p&gt;這次透過Entity Framework(EF5)作了一個簡單的資料庫更新,&lt;br&gt;恰巧的是這次更新的Table因為某些需求,使用 date
    
    </summary>
    
    
      <category term="記錄" scheme="http://blog.marsen.me/tags/%E8%A8%98%E9%8C%84/"/>
    
      <category term="Database" scheme="http://blog.marsen.me/tags/Database/"/>
    
      <category term="MsSQL" scheme="http://blog.marsen.me/tags/MsSQL/"/>
    
      <category term="Entity Framework" scheme="http://blog.marsen.me/tags/Entity-Framework/"/>
    
  </entry>
  
  <entry>
    <title>將 Express 網站整合 Typescirpt 開發</title>
    <link href="http://blog.marsen.me/2017/08/16/express_with_typescript/"/>
    <id>http://blog.marsen.me/2017/08/16/express_with_typescript/</id>
    <published>2017-08-16T08:26:14.000Z</published>
    <updated>2017-09-18T17:22:09.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原因與目的"><a href="#原因與目的" class="headerlink" title="原因與目的"></a>原因與目的</h2><ul>
<li>目前我使用 express 作為網站開發</li>
<li>我是個 .NET 工程師,習慣用強型別語言作開發 (C#)</li>
<li>網路上找的文章<ul>
<li><a href="http://brianflove.com/2016/11/08/typescript-2-express-node/" target="_blank" rel="external">TypeScript 2 + Express + Node.js</a></li>
<li><a href="http://brianflove.com/2016/03/29/typescript-express-node-js/" target="_blank" rel="external">TypeScript + Express + Node.js</a></li>
</ul>
</li>
<li>這件事情理論上是可行的,而且又有人作過,又能讓我以自已比較習慣的方式作開發</li>
</ul>
<h2 id="技術問題"><a href="#技術問題" class="headerlink" title="技術問題"></a>技術問題</h2><ul>
<li>grunt/gulp/webpack <ul>
<li>選擇 gulp希望能切換到webpack</li>
</ul>
</li>
<li>typescript</li>
</ul>
<h2 id="初期目標"><a href="#初期目標" class="headerlink" title="初期目標"></a>初期目標</h2><ul>
<li>把所有js 改成 ts</li>
<li>相同指令即可完成編譯與開啟站台</li>
<li>可部署到正式環境</li>
</ul>
<h2 id="構想"><a href="#構想" class="headerlink" title="構想"></a>構想</h2><p><del>原本我是想把整個專案重新編譯至另外一個資料夾中,</del><br><del>再由該資料夾設為起始專案執行</del><br>在建立typescript資料夾，只編譯相關的ts檔;<br>至於哪些是<strong>相關的ts檔</strong>?</p>
<ol>
<li><code>app.ts</code>(編譯為<code>app.js</code>)<br> 在根目錄作為所有request入口的起始檔案,用來解析request需要對應的router<br> 這裡可能會有一些共用的商務/系統邏輯或是錯誤處理</li>
<li>所有的router<br> 這是最接近使用者的 business logic code,影響返回的頁面與呈現的資料,<br> 通常這裡主要的目的是組合來自不同的service的資訊,再返回給view層,<br> 不過有時候也會處理一些顯示邏輯.</li>
<li><p>所有的service<br> 這層擁最主要的商務邏輯,大多會依功能性作區分(ex:授權、會員、購物車等…)<br> 也有專門的service提供共用的方法及模組,<br> 並透過repository取得/更新資料</p>
</li>
<li><p>所有的repository<br> 這層最主要的功能是直接與資料庫作存取</p>
</li>
<li>其它<br> 例如:Interface, Class, Enum 或是一些框架所需要額外的方法.</li>
</ol>
<h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>定義好需要修改的範圍後,我建立了一個typescript資料夾<br>裡面會建立相對應的<code>router</code>,<code>service</code>與<code>repository</code>資料夾<br>與一個<code>app.ts</code>檔案.</p>
<p>一開始將所有js檔案依照相對的位置,照抄複製放入對應位置,並將副檔名改為<code>.ts</code><br>接下我將利用gulp幫執行相關的編譯行為.<br>我們可以預期編譯產生的<code>.js</code>檔可以執行,因為Typescript是Javascript的Super Set</p>
<h3 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h3><ul>
<li><p>安裝gulp<br><code>npm install gulp -g</code><br><code>npm install gulp --save</code><br><code>npm install gulp-typescript --save</code></p>
</li>
<li><p>安裝相關模組<br><code>npm install @types/node --save-dev</code><br><code>npm install --save @types/express</code><br><code>npm install --save @types/morgan</code><br><code>npm install --save @types/cookie-parser</code><br><code>npm install --save @types/httperr</code><br>實際安裝哪些模組與專案所需要的有關,通常只要在npm搜尋<code>npm @types module_name</code><br>就可以找得到,不過有時候也會有找不到情況<br>這個時候很苦惱了,我們想要ts的強型別即時除錯,但是自已刻又太自虐,<br>我的想法是只有自已寫的<code>router</code>,<code>service</code>與<code>repository</code>有需要即時除錯.<br>之後實務上有遇到再回來補充.</p>
</li>
<li><p>設定gulp file</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&apos;gulp&apos;);</div><div class="line">var tsc = require(&apos;gulp-typescript&apos;); </div><div class="line"></div><div class="line">gulp.task(&apos;app&apos;, function() &#123;     </div><div class="line">        return gulp.src([&apos;typescript/app.ts&apos;,&apos;typescript/**/*.ts&apos;])        </div><div class="line">        .pipe(tsc(&#123;</div><div class="line">                target: &quot;es2017&quot;,                          /* Specify ECMAScript target version: &apos;ES3&apos; (default), &apos;ES5&apos;, &apos;ES2015&apos;, &apos;ES2016&apos;, &apos;ES2017&apos;, or &apos;ESNEXT&apos;. */</div><div class="line">                module: &quot;es2015&quot;,                     /* Specify module code generation: &apos;commonjs&apos;, &apos;amd&apos;, &apos;system&apos;, &apos;umd&apos;, &apos;es2015&apos;, or &apos;ESNext&apos;. */</div><div class="line">                lib: [&quot;es2015&quot;,&quot;dom&quot;],</div><div class="line">                noImplicitAny: false,</div><div class="line">            &#125;))</div><div class="line">        .pipe(gulp.dest(&apos;./&apos;));        </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>我們不需要<code>tsconfig.json</code>這個檔案,直接可以寫成json物件<br>另外記得設定src(ts所在的位置)與dest(輸出ts的位置)</p>
<ul>
<li><p>設定package.json</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">  &quot;start&quot;: &quot;node ./bin/www&quot;,</div><div class="line">  &quot;dev&quot;: &quot;supervisor ./bin/www&quot;,</div><div class="line">  &quot;test&quot;: &quot;node_modules/.bin/nightwatch&quot;,</div><div class="line">  &quot;e2e&quot;: &quot;npm-run-all --parallel start test&quot;,</div><div class="line">  &quot;run&quot;: &quot;node ./bin/www&quot;,</div><div class="line">  &quot;ts&quot;: &quot;gulp app&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>執行 <code>npm run ts</code></p>
</li>
<li>檢查輸出的js,再說一次因為Typescript是Javascript的Super Set<br>所以可以預期會產生相同的檔案內容(副檔名變成.js)</li>
<li>運行網站確定功能正常</li>
</ul>
<h3 id="修改ts檔"><a href="#修改ts檔" class="headerlink" title="修改ts檔"></a>修改ts檔</h3><p>雖然js檔已正常產生,但是其實這一切都是假的!<br>原因是我們的ts檔其實仍然在寫js<br><img src="https://i.imgur.com/5aCuXSy.jpg" alt=""><br>在執行gulp的過程當中,應該可以看到一些提示訊息.<br>由於有各種情況,就不一一說明了.<br>我在這此改版的疑難就附在下面,如果有遇到相同的問題,可以作為參考.<br>如果有不同問題,也可以留言討論喔(雖然我覺得是自行google會快一些) XD</p>
<h3 id="疑難"><a href="#疑難" class="headerlink" title="疑難"></a>疑難</h3><ul>
<li><p><a href="https://stackoverflow.com/questions/31173738/typescript-getting-error-ts2304-cannot-find-name-require" target="_blank" rel="external">typescript getting error TS2304: cannot find name ‘require’</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/28793098/express-and-typescript-error-stack-and-error-status-properties-do-not-exist" target="_blank" rel="external">Express and Typescript - Error.stack and Error.status properties do not exist</a>    </p>
</li>
<li><a href="https://github.com/Microsoft/vscode/issues/21968" target="_blank" rel="external">Error TS2693: ‘Promise’ only refers to a type, but is being used as a value here.</a></li>
</ul>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol>
<li><a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="external">npm scripts 使用指南</a></li>
<li><a href="https://stackoverflow.com/questions/31173738/typescript-getting-error-ts2304-cannot-find-name-require" target="_blank" rel="external">typescript getting error TS2304: cannot find name ‘ require’
</a></li>
<li><a href="https://stackoverflow.com/questions/28793098/express-and-typescript-error-stack-and-error-status-properties-do-not-exist" target="_blank" rel="external">Express and Typescript - Error.stack and Error.status properties do not exist</a></li>
<li><a href="https://github.com/ivogabe/gulp-typescript" target="_blank" rel="external">gulp-typescript</a></li>
<li><a href="https://github.com/Microsoft/vscode/issues/21968" target="_blank" rel="external">Promise static method give error</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原因與目的&quot;&gt;&lt;a href=&quot;#原因與目的&quot; class=&quot;headerlink&quot; title=&quot;原因與目的&quot;&gt;&lt;/a&gt;原因與目的&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;目前我使用 express 作為網站開發&lt;/li&gt;
&lt;li&gt;我是個 .NET 工程師,習慣用強型別語言作
    
    </summary>
    
    
      <category term="expressjs" scheme="http://blog.marsen.me/tags/expressjs/"/>
    
      <category term="typescript" scheme="http://blog.marsen.me/tags/typescript/"/>
    
      <category term="gulp" scheme="http://blog.marsen.me/tags/gulp/"/>
    
      <category term="nodejs" scheme="http://blog.marsen.me/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>[記錄]串接 GOOGLE API 取得資料(二)</title>
    <link href="http://blog.marsen.me/2017/07/20/google_api_auth_2/"/>
    <id>http://blog.marsen.me/2017/07/20/google_api_auth_2/</id>
    <published>2017-07-19T17:04:14.000Z</published>
    <updated>2017-07-19T17:12:05.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>在<a href="https://blog.marsen.me/2017/07/14/google_api_auth_1/">前篇</a>說明為什麼我要作「精神力評鑑」 </p>
<p>原因是為了記錄自已的精力,能更有效率使用時間,進而提昇個人的生產力.</p>
<h2 id="應用"><a href="#應用" class="headerlink" title="應用"></a>應用</h2><p>有了數據後, 就要看怎麼運用.<br>Google 的表單,可以自動產生回應結果試算表,<br>持之以恒的每天記錄,很快就有上百千筆的資料.</p>
<p>我打算取得這些資料後,繪制成分佈圖<br>這樣就可以知道,我的黃金時間是在每一天的什麼時段.</p>
<h3 id="如何透過-GOOGLE-Sheets-API-可以取得資料"><a href="#如何透過-GOOGLE-Sheets-API-可以取得資料" class="headerlink" title="如何透過 GOOGLE Sheets API 可以取得資料."></a>如何透過 <a href="https://developers.google.com/sheets/api/reference/rest/" target="_blank" rel="external">GOOGLE Sheets API</a> 可以取得資料.</h3><p>在<a href="https://cloud.google.com/?hl=zh-tw" target="_blank" rel="external">Google Cloud Platform</a>,建立起 Google API 的服務。</p>
<ol>
<li>前往<a href="https://console.developers.google.com/start/api?id=sheets.googleapis.com" target="_blank" rel="external">Google API Wizard</a>,建立或選擇專案。</li>
<li>建立憑証,選擇OAuth Client ID<ul>
<li>在這裡我會一次性的建立起所有環境(開發、測試、正式)的憑証 。</li>
</ul>
</li>
<li>下載JSON放置專案的指定位置.</li>
<li>如何取得授權與取得資料，請參考<a href="https://developers.google.com/sheets/api/quickstart/nodejs" target="_blank" rel="external">QuickStart</a><ul>
<li>安全考量,我不會將client_secret.json與取回的token 加入版本控制</li>
<li>以Google 試算表為例，如何取得<a href="https://developers.google.com/sheets/api/guides/concepts" target="_blank" rel="external">spreadsheetId</a>? 很簡單，網址上就可以取得。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ex:</div><div class="line">https://docs.google.com/spreadsheets/d/1qpyC0XzvTcKT6EISywvqESX3A0MwQoFDE8p-Bll4hps/edit#gid=0</div><div class="line">的spreadsheetId就是1qpyC0XzvTcKT6EISywvqESX3A0MwQoFDE8p-Bll4hps</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h3 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h3><p>以 QuickStart 的程式為例 ,<br>下載回來的檔案 <code>client_secret.json</code><br>可以提供 <code>clientSecret</code>、<code>clientId</code> 與授權後轉導的 url ,<br>當程式執行時, 便會透 <code>googleAuth</code> 去取得授權 ,<br>過程之中會需要使用者作驗証, 驗証完成即取得授權 ,<br>授權有一定的效期, 故一段時間之後需要重新取得授權 </p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ol>
<li><p><code>client_secret.json</code> 是機敏資料, 不可以放入版本控制, 需要特殊的流程步驟上傳到你的 Web Server 的位置</p>
<ul>
<li>Openshift可以透過SSH或是SFTP登入來上傳<code>client_secret.json</code></li>
<li>CI 以 JENKINS 為例 ; 可以使用 Publish over SSH 上傳檔案<br><img src="https://i.imgur.com/Fo4Ml5M.jpg" alt=""><ul>
<li>需要注意 CI Server 要有 Web Server 的 SSH Key</li>
<li>LINUX 複製資料夾語法 <code>cp -rf src/folder/. target/folder</code></li>
</ul>
</li>
</ul>
</li>
<li><p>在正式公開的環境上可能會發生<code>Error: invalid_scope</code>的錯誤 ，可以<a href="https://support.google.com/code/contact/oauth_app_verification?id=705847791246&amp;client=705847791246-l20jeqj1ncv2vffaki70ing4c8cda2r1.apps.googleusercontent.com&amp;query=https://www.googleapis.com/auth/spreadsheets.readonly" target="_blank" rel="external">參考</a>。</p>
<ul>
<li>填寫表單作驗証</li>
<li>個人測試可以加入<a href="https://groups.google.com/forum/#!forum/risky-access-by-unreviewed-apps" target="_blank" rel="external">Risky Access Permissions By Unreviewed Apps</a> 論壇</li>
</ul>
</li>
<li><p>我最後是使用<a href="https://d3js.org/" target="_blank" rel="external">d3.js</a>作為繪圖的library , 因為網路上的資源相當的多 , 而且這次的著墨並不多 , 所以不在這裡介紹. </p>
</li>
</ol>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><img src="https://i.imgur.com/8FYzhdg.gif" alt=""></p>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ol>
<li><a href="https://blog.openshift.com/using-filezilla-and-sftp-on-windows-with-openshift/" target="_blank" rel="external">Openshift SFPT</a></li>
<li><a href="https://www.phpini.com/linux/cp-force-copy" target="_blank" rel="external">Linux CP</a></li>
</ol>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;https://blog.marsen.me/2017/07/14/google_api_auth_1/
    
    </summary>
    
    
      <category term="Google API" scheme="http://blog.marsen.me/tags/Google-API/"/>
    
      <category term="OAuth" scheme="http://blog.marsen.me/tags/OAuth/"/>
    
  </entry>
  
  <entry>
    <title>[記錄]串接 GOOGLE API 取得資料(一)</title>
    <link href="http://blog.marsen.me/2017/07/14/google_api_auth_1/"/>
    <id>http://blog.marsen.me/2017/07/14/google_api_auth_1/</id>
    <published>2017-07-14T07:14:27.000Z</published>
    <updated>2017-07-19T17:01:00.051Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原由"><a href="#原由" class="headerlink" title="原由"></a>原由</h2><p>最近看了一本書,「最有生產力的一年」. 書如其名,是一本有關生產力的書,作者用了一年的時間, </p>
<p>以自已作實驗,測試各種方法並檢驗是否有效. </p>
<p>作者認為,時間 x 專注力 x 精力 = 生產力, 在他眾多的方法之中, </p>
<p>「黃金時間」與「精神力評鑑」是一組相關的方法. </p>
<p>簡單的說,一個人的精力狀況,會隨著一天的生理、心理等客觀或主觀因素起起伏伏,</p>
<p>就像潮汐一樣,而作者認為人應該在精力最好的時段,作最有價值的事.</p>
<p>這個時段就被稱作「黃金時間」.</p>
<p>有些人黃金時間在早上,有些人在晚上,每個人都不相同,</p>
<p>因此需要記錄精神狀態來判斷.</p>
<h2 id="規劃"><a href="#規劃" class="headerlink" title="規劃"></a>規劃</h2><p>於是我設計一組簡單的方法來記錄精神狀態</p>
<p>透過google表單用來作記錄,</p>
<p><img src="https://i.imgur.com/XjfNTZR.jpg" alt=""></p>
<p>狀態我以10分制來作為評選, 再兩兩一組, 共分為五組「優、良、佳、可、劣」</p>
<p>在評鑑時先以五分法判斷精力狀況, 再以感覺是好一點或差一點來選取分數. </p>
<h3 id="行動化"><a href="#行動化" class="headerlink" title="行動化"></a>行動化</h3><p>以我個人的習慣, 手機其實是不離身的, 如果每次記錄都要在個人電腦上作業, 其實是很不方便的.</p>
<p>所以我參考了電腦玩物的「<a href="http://www.playpcesor.com/2015/09/excel-google-sheet-form-account-book.html" target="_blank" rel="external">Excel 記帳雲端進化！ Google 表單比記帳 App 還好用</a>」</p>
<p>將我的表單(偽)APP化</p>
<p><img src="https://i.imgur.com/FW0VvjY.jpg" alt=""></p>
<p>如此一來便完成了方便記錄的工具, 至於記錄下來的數據如何應用</p>
<p>又是後話了. 不過順帶一提,我會透過整點報時的工具來提醒自已作記錄,</p>
<p>另外我不像「最有生產力的一年」的作者特別準時睡覺,或是不喝咖啡,</p>
<p>因為不準時睡覺跟嗜飲咖啡是我目前的習慣,我認為抱持平常的狀態去記錄才有意義.</p>
<p>又或者當我戒掉咖啡或是開始早睡早起的習慣時,我就可以用記錄來評量這樣的行為是否有所改善.</p>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原由&quot;&gt;&lt;a href=&quot;#原由&quot; class=&quot;headerlink&quot; title=&quot;原由&quot;&gt;&lt;/a&gt;原由&lt;/h2&gt;&lt;p&gt;最近看了一本書,「最有生產力的一年」. 書如其名,是一本有關生產力的書,作者用了一年的時間, &lt;/p&gt;
&lt;p&gt;以自已作實驗,測試各種方法並檢
    
    </summary>
    
    
      <category term="Google API" scheme="http://blog.marsen.me/tags/Google-API/"/>
    
      <category term="最有生產力的一年" scheme="http://blog.marsen.me/tags/%E6%9C%80%E6%9C%89%E7%94%9F%E7%94%A2%E5%8A%9B%E7%9A%84%E4%B8%80%E5%B9%B4/"/>
    
  </entry>
  
  <entry>
    <title>[活動筆記]測試即學習</title>
    <link href="http://blog.marsen.me/2017/05/19/testingislearning/"/>
    <id>http://blog.marsen.me/2017/05/19/testingislearning/</id>
    <published>2017-05-19T06:03:01.000Z</published>
    <updated>2017-07-15T16:28:11.468Z</updated>
    
    <content type="html"><![CDATA[<h2 id="應該知道的事"><a href="#應該知道的事" class="headerlink" title="應該知道的事:"></a>應該知道的事:</h2><ul>
<li><p>報名資訊(已結束)<br><a href="http://www.accupass.com/go/testingislearning" target="_blank" rel="external">Agile Meetup 2017/05 (2): 測試即學習</a></p>
</li>
<li><p>這裡不講TDD,沒有程式 </p>
</li>
</ul>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>讀這篇文章的人，或許可以找一位朋友來作相同的流程練習</p>
<ol>
<li>一張不明所以的圖片當作受測對象，任意發散的詢問測試問題</li>
<li>分類所有的問題為WHY、HOW、WHAT</li>
<li>畫出Golden Circle，核心是WHY</li>
<li>透過WHY揭露受測對象圖片的本質(TAROT)，收斂測試範圍</li>
<li>重新詢問測試問題，儘可能的發散</li>
<li>所有人交流自已看到可能的測試問題</li>
<li>重複5~6步，有意識的去覺察自已的感覺<ul>
<li>別人注意到的問題你為什麼沒發現？</li>
<li>別人如何發現問題？</li>
<li>你有沒有辦法發現相同的問題(殊途同歸)？</li>
</ul>
</li>
</ol>
<h2 id="測試的概念"><a href="#測試的概念" class="headerlink" title="測試的概念"></a>測試的概念</h2><ol>
<li>受測者</li>
<li>問題</li>
<li>答案</li>
<li>預期的結果(test oracles)</li>
</ol>
<p><img src="https://i.imgur.com/Qy8F4Vw.png" alt=""></p>
<h2 id="問題的核心-Know-Your-Mission-KNW"><a href="#問題的核心-Know-Your-Mission-KNW" class="headerlink" title="問題的核心 Know Your Mission(KNW)"></a>問題的核心 Know Your Mission(KNW)</h2><ol>
<li>WHY ?<br> 本次分享的重點，如何了解、探索、學習產品的知識，給客戶的價值等… 。</li>
<li>HOW ? =&gt; 如何作到？</li>
<li>WHAT ? =&gt; 產生測試項目</li>
<li>TEST ? =&gt; 執行測試，回饋並且回到第一步Loop。</li>
</ol>
<h2 id="應該觀注的資訊-information-is-learning"><a href="#應該觀注的資訊-information-is-learning" class="headerlink" title="應該觀注的資訊 information is learning"></a>應該觀注的資訊 information is learning</h2><ol>
<li>Customer</li>
<li>Product</li>
<li>Project</li>
<li>Mission</li>
</ol>
<p>透過WHY的詰問，了解你的任務(Know Your Mission)<br>學習到受測對象的本質，排除不必要的測試發想。<br>收斂了測試範圍，決定了測試方向。</p>
<h2 id="探索測試"><a href="#探索測試" class="headerlink" title="探索測試"></a>探索測試</h2><ol>
<li>儘可能的發散</li>
<li>摹仿別人看事情的角度</li>
<li>有意識的學習(mindful learning)    <ul>
<li>記錄</li>
<li>總結</li>
<li>歸納問題的核心</li>
<li>給它起一個名字(沒有專有名詞的話)</li>
<li>有意識的逃離第一印象</li>
<li>小心不經意的盲區(inattentional blindness)</li>
<li>數量 X 練習 X 思考 X 學習 = 提昇</li>
</ul>
</li>
</ol>
<h2 id="回饋"><a href="#回饋" class="headerlink" title="回饋"></a>回饋</h2><ol>
<li>刻意練習 vs 有意識的練習，類似的東西，但是沒有具體的方法</li>
<li>課程中提到的<a href="https://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action?language=zh-tw" target="_blank" rel="external">影片</a></li>
</ol>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;應該知道的事&quot;&gt;&lt;a href=&quot;#應該知道的事&quot; class=&quot;headerlink&quot; title=&quot;應該知道的事:&quot;&gt;&lt;/a&gt;應該知道的事:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;報名資訊(已結束)&lt;br&gt;&lt;a href=&quot;http://www.accupass.c
    
    </summary>
    
    
      <category term="Testing" scheme="http://blog.marsen.me/tags/Testing/"/>
    
  </entry>
  
  <entry>
    <title>CI/CD 環境建置筆記(二) - 在 windows 安裝 Jenkins 之旁門左道私有雲</title>
    <link href="http://blog.marsen.me/2017/04/29/ci_use_jenkins_on_two_windows/"/>
    <id>http://blog.marsen.me/2017/04/29/ci_use_jenkins_on_two_windows/</id>
    <published>2017-04-29T03:55:16.000Z</published>
    <updated>2017-04-29T05:17:33.520Z</updated>
    
    <content type="html"><![CDATA[<h2 id="應該要知道的事"><a href="#應該要知道的事" class="headerlink" title="應該要知道的事"></a>應該要知道的事</h2><ul>
<li>Dropbox</li>
<li>Windows Service</li>
<li><a href="/2017/01/15/ci_use_jenkins/">CI/CD 環境建置筆記(一) - 在 windows 安裝 Jenkins </a></li>
</ul>
<h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>在 windows 上安裝了Jenkins , 也建立了一個新的作業 ,<br>讓程式可以透過 Jenkins 執行自動化部署。<br>不過實務上仍有缺點，那就是只有這台機器可以執行部署 ,<br>最理想的狀況是擁有一個在雲端的 CI Server ,<br>隨時隨地想部署只需要能連上網 , 登入執行就好<br>這部份可以試試看 <code>Travis-CI</code>、<code>CircleCI</code>之類的服務 ;<br>不過對於只熟悉 Jenkins 的我來說 ,<br>我想了另一套解決辦法(旁門左道) ,<br>不過至少解決了我目前的需求 ,<br>在公司與家中隨時都能透過本機Jenkins Server 進行部署 ,<br>並且不用花時間同步設定值.<br>在花時間研究<code>Travis-CI</code>、<code>CircleCI</code>的部署方式之前 ,<br>算是一個折衷的方式 .</p>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><ol>
<li>首先你要有 Dropbox </li>
<li>下載 Windows 版的 Jenkins</li>
<li>安裝在 Dropbox 資料夾內</li>
<li>在另外一台電腦 , 進行相同的安裝</li>
</ol>
<p>想法很簡單 , 透過 Dropbox 與 Jenkins Service<br>在兩台電腦安裝 Jenkins<br>只要將 Jenkins Service 的啟動路徑<br>設定在 Dropbox 中 ,<br>就可以達成我們的目標 .<br><img src="https://i.imgur.com/DyrNMJD.jpg" alt=""></p>
<h2 id="問題-1"><a href="#問題-1" class="headerlink" title="問題"></a>問題</h2><ol>
<li>Windows 要如何修改 Jenkins Service 的啟動路徑 ?</li>
</ol>
<p><code>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\Jenkins</code></p>
<p>修改路徑以符合你本機的檔案位置即可。</p>
<p><img src="https://i.imgur.com/KGemCSe.jpg" alt=""></p>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;應該要知道的事&quot;&gt;&lt;a href=&quot;#應該要知道的事&quot; class=&quot;headerlink&quot; title=&quot;應該要知道的事&quot;&gt;&lt;/a&gt;應該要知道的事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Dropbox&lt;/li&gt;
&lt;li&gt;Windows Service&lt;/li&gt;
&lt;li&gt;&lt;a
    
    </summary>
    
    
      <category term="CI" scheme="http://blog.marsen.me/tags/CI/"/>
    
      <category term="Jenkins" scheme="http://blog.marsen.me/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>[活動筆記]單元測試這樣玩就對了</title>
    <link href="http://blog.marsen.me/2017/04/23/unitestwriting/"/>
    <id>http://blog.marsen.me/2017/04/23/unitestwriting/</id>
    <published>2017-04-22T16:01:39.000Z</published>
    <updated>2017-04-29T05:18:22.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="應該知道的事"><a href="#應該知道的事" class="headerlink" title="應該知道的事:"></a>應該知道的事:</h2><ul>
<li>使用 C# , 但是其他語言也適用 </li>
<li>使用 Visual Studio</li>
<li>案例一有基本數理的專有名詞<ul>
<li>上界(Upper Bound)、下界(lower Bound)、左邊界(Left Bound)、右邊界(Right Bound)</li>
</ul>
</li>
<li>報名資訊(已結束)<br><a href="http://www.accupass.com/go/unitestwriting" target="_blank" rel="external">Agile Meetup 2017/04 意外版: 單元測試這樣玩就對了</a></li>
</ul>
<h2 id="案例一、數值區間"><a href="#案例一、數值區間" class="headerlink" title="案例一、數值區間"></a>案例一、數值區間</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">假定給任一整數區間</div><div class="line">ex:</div><div class="line">(1,6] = &#123;2,3,4,5,6&#125; </div><div class="line">[-2,4) = &#123;-2,-1,0,1,2,3&#125;</div><div class="line">透過一個function(x)檢查x是否包含在整數區間內,</div><div class="line">並撰寫測試,驗証 function(x)是對的。</div></pre></td></tr></table></figure>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>如上範例所示,<br>「(」「)」小括號(parentheses)表示<code>OPEN</code>(不包含,大於或小於)<br>「[」「]」中括號(square brackets)表示<code>CLOSE</code>(包含,大於等於或小於等於)<br> (1,6] , 代表這個區間大於1小於等於6,包含的整數有 2、3、4、5、6<br> [-2,4), 代表這個區間大於等於-2小於4,包含的整數有-2、-1、0、1、2、3</p>
<p><img src="https://i.imgur.com/TDHhx0A.png" alt=""></p>
<p>這題比較單純,只需要考慮所有的情況,<br>並且寫成單元測試即可。</p>
<ol>
<li>x 落在區間內</li>
<li>x 落在左邊界外</li>
<li>x 落在右邊界外</li>
<li>x 落在左邊界上,左邊界為<code>OPEN</code></li>
<li>x 落在左邊界上,左邊界為<code>CLOSE</code></li>
<li>x 落在右邊界上,右邊界為<code>OPEN</code></li>
<li>x 落在右邊界上,右邊界為<code>CLOSE</code></li>
</ol>
<p>有幾種特殊的情境,特別說明一下</p>
<ol>
<li>假設區間為(0,1),這個區間是不包含任何整數</li>
<li>假設區間為(1,1),這個區間是不包含任何整數,且不包含任何數值</li>
<li>假設區間為[1,1],這個區間恰巧包含1個整數,且只包含1這個整數</li>
<li>假設”區間”為[2,1],或任何左邊界大右邊界的表示,這不是一個正確的區間,將要作例外處理。</li>
</ol>
<p>讓我們回歸單元測試,<br>這裡的重點是<strong>一個測試只作一件事</strong>,<br>只把一個情境釐清,並且在測試的程式碼中<br><strong>明確的表達測試目的</strong></p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> leftBound = <span class="number">1</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> rightBound = <span class="number">6</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> testNum = <span class="number">4</span>;</div><div class="line"></div><div class="line">[TestMethod]</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IncludeWhenLeftOpenRightClose</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> checker = <span class="keyword">new</span> RangeChecker(Bound.Open,<span class="keyword">this</span>.leftBound,Bound.Close,<span class="keyword">this</span>.rightBound);</div><div class="line">    <span class="keyword">bool</span> expect = <span class="literal">false</span>;            </div><div class="line">    <span class="keyword">bool</span> result = checker.IsContains(testNum);</div><div class="line">    Assert.IsTrue(result);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="案例二、現在時間轉字串"><a href="#案例二、現在時間轉字串" class="headerlink" title="案例二、現在時間轉字串"></a>案例二、現在時間轉字串</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">寫一個方法GetNowString,不傳入任何參數,</div><div class="line">取得現在的時間字串,需要精準到豪秒。</div><div class="line">再寫一個測試去測試這個方法是對的‧</div></pre></td></tr></table></figure>
<h3 id="版本1"><a href="#版本1" class="headerlink" title="版本1"></a>版本1</h3><p>最簡單的寫法:</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DateHelper</span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetNowString</span>(<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> DateTime.Now.ToString(<span class="string">"yyyy-MM-dd hh:mm:ss ff"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>撰寫測試<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[TestMethod]</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetNowString</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">var</span> </div><div class="line">	<span class="comment"><span class="doctag">///</span>/ 寫不下去,因為我們無法凍結系統的時間</span></div><div class="line">	<span class="keyword">string</span> expect = <span class="string">"2017-04-19 20:45:17.88"</span>;</div><div class="line">	<span class="keyword">string</span> result = dater.GetNowString();</div><div class="line">	Assert.AreEqual(expect, result);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h3><p><code>GetNowString</code>與系統的時間<code>DateTime.Now</code>,<br>是具有耦合性,要解耦需要透過一些IoC的手段去處理。</p>
<h3 id="版本2"><a href="#版本2" class="headerlink" title="版本2"></a>版本2</h3><p>利用繼承的方法,作出假的類別<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DateHelper</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">protected</span> DateTime now;</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> DateTime <span class="title">GetNow</span>(<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">		now = DateTime.Now;</div><div class="line">		<span class="keyword">return</span> now;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetNowString</span>(<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">		GetNow();</div><div class="line">		<span class="keyword">return</span> now.ToString(<span class="string">"yyyy-MM-dd HH:mm:ss.ff"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">StubDateHelper</span>: <span class="title">DateHelper</span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> DateTime <span class="title">GetNow</span>(<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> now;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetNow</span>(<span class="params">DateTime datetime</span>)</span></div><div class="line">	&#123;</div><div class="line">		now = datetime;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>撰寫測試<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[TestMethod]</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetNowString</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">	StubDateHelper dateHelper = <span class="keyword">new</span> StubDateHelper();</div><div class="line">	<span class="keyword">var</span> fakeNow = <span class="keyword">new</span> DateTime(<span class="number">2017</span>,<span class="number">4</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">45</span>,<span class="number">17</span>,<span class="number">880</span>);</div><div class="line">	dateHelper.SetNow(fakeNow);</div><div class="line">	<span class="keyword">string</span> expect = <span class="string">"2017-04-19 20:45:17.88"</span>;</div><div class="line">	<span class="keyword">string</span> result = dateHelper.GetNowString();</div><div class="line">	Assert.AreEqual(expect, result);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="解析-2"><a href="#解析-2" class="headerlink" title="解析"></a>解析</h3><p>基本上這樣就可以測試了,<br>原來的代碼,經過一定的重構,<br>透過<code>virtual</code>方法GetNow,<br>將<code>Datetime.Now</code>作了隔離<br>適當利用假類別,取代掉GetNow的方法。</p>
<p>這樣夠好了,但是我們可以看看另一種作法</p>
<h3 id="版本3"><a href="#版本3" class="headerlink" title="版本3"></a>版本3</h3><p>先看看我們的<code>DateHelper</code>,<br>在這裡我們將GetNow交由IDateProvider的類別去實作,<br>如此一來就斷開了耦合性。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DateHelper</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> IDateProvider DateProvider;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DateHelper</span>(<span class="params">IDateProvider dateProvider</span>)</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.DateProvider = dateProvider;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetNowString</span>(<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">var</span> now = <span class="keyword">this</span>.DateProvider.GetNow();</div><div class="line">		<span class="keyword">return</span> now.ToString(<span class="string">"yyyy-MM-dd HH:mm:ss.ff"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>實作IDateProvider的類別,<br>在這裡其實不重要.<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DateProviderV1</span> : <span class="title">IDateProvider</span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> DateTime <span class="title">GetNow</span>(<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> DateTime.Now;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>讓我們看看測試,<br>在這裡我們透過一個假的<code>IDateProvider</code>的實作<code>DateProviderStub</code>,<br>完成了測試,<br>IDateProvider將<code>DateTime.Now</code>作了隔離,<br>並且提供更容易修改的假物件(僅僅需要實作觀注的方法即可,不用擔心繼承帶來的附作用)</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[TestMethod]</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetNowString</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">	DateProviderStub dateProvider = <span class="keyword">new</span> DateProviderStub();</div><div class="line">	dateProvider.now = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">45</span>, <span class="number">17</span>, <span class="number">880</span>);</div><div class="line">	<span class="keyword">var</span> dateHelper = <span class="keyword">new</span> DateHelper(dateProvider);</div><div class="line">	<span class="keyword">string</span> expect = <span class="string">"2017-04-19 20:45:17.88"</span>;</div><div class="line">	<span class="keyword">string</span> result = dateHelper.GetNowString();</div><div class="line">	Assert.AreEqual(expect, result);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DateProviderStub</span> : <span class="title">IDateProvider</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">public</span> DateTime now;</div><div class="line">	<span class="function"><span class="keyword">public</span> DateTime <span class="title">GetNow</span>(<span class="params"></span>)</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> now;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="圖例解析"><a href="#圖例解析" class="headerlink" title="圖例解析"></a>圖例解析</h3><p>我們剛剛究竟幹了什麼？<br><img src="https://i.imgur.com/qeqzaoO.jpg" alt=""><br>看看原本的情況,本來的方法因為相依與<code>Datetime</code>而無法測試<br><img src="https://i.imgur.com/Mquk1Cm.png" alt=""><br>讓我們開始下刀,<br>先用一個新的方法<code>GetNow</code><br>將它與待測的方法作分割,<br>但是對整個類來說仍舊是耦合。<br><img src="https://i.imgur.com/c0Xg4vw.png" alt=""><br>繼續把這刀往下切,<br>我們墊一層介面,<br>待測方法不再直接呼叫<code>GetNow</code><br>而是透過介面執行,當然會有額外實作介面與注入的功(請參考程式碼,不在此處繪出了.)<br><img src="https://i.imgur.com/8dDlWi2.png" alt=""><br>最後,別忘了我們的目的<br>測試原本的待測方法,<br>我們可以透過一個<code>假的</code>類,<br>來操控他的行為(ex:凍結時間).<br>如此一來,就可進行測試了.<br><img src="https://i.imgur.com/c3mW59v.png" alt=""><br>另外,這種被待測方法呼叫後<br>會回傳一個假值的方法或類<br>被叫作<code>STUB</code><br><img src="https://i.imgur.com/KXvYMsx.png" alt=""></p>
<h2 id="案例三、發送郵件"><a href="#案例三、發送郵件" class="headerlink" title="案例三、發送郵件"></a>案例三、發送郵件</h2><p>事先聲明,這題沒有程式碼,<br>有興趣實作的人可以試試看.<br>如果可以分享實作後的資訊給我更好XD<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Q:註冊發送郵件如何寫單元測試？</div></pre></td></tr></table></figure></p>
<h3 id="解析-3"><a href="#解析-3" class="headerlink" title="解析"></a>解析</h3><p>很明顯的發送郵件需要依賴外部的郵件系統,<br>這裡就會有耦合性,我們可以參考案例2的方式解耦<br>不過發送郵件並不會有回傳值,<br>我們要如何驗証正確性呢？</p>
<p>A:檢查調用次數、參數</p>
<h3 id="圖例解析-1"><a href="#圖例解析-1" class="headerlink" title="圖例解析"></a>圖例解析</h3><p>在案例2的單元測試,<br>我們透過STUB偽造的回傳值完成測試<br>並執行驗証.<br>但是在沒有回傳的值的方法中(被稱作<code>MOCK</code>)<br>我們只能透過傳遞的參數(如果有多載)<br>與方法被調用的次數來進行驗証。</p>
<p><img src="https://i.imgur.com/zbllutC.png" alt=""></p>
<h2 id="重點摘要"><a href="#重點摘要" class="headerlink" title="重點摘要"></a>重點摘要</h2><ul>
<li>單元測試要能清楚表達測試的目的(<strong>達意</strong>)<ul>
<li>命名</li>
<li>減少意外的細節</li>
</ul>
</li>
<li>單元測試一次只作一件事 </li>
<li>new 本身就是一種邏輯 一種偶合</li>
<li>static 是一種高偶合</li>
<li>繼承也是高偶合,能使用繼承的情境很少<ul>
<li>A is a B 通常只有這種情境才適合繼承</li>
</ul>
</li>
<li>STUB &amp; MOCK<ul>
<li>STUB 會有回傳值,可以在 Unit Test 作驗証(ASSERT)</li>
<li>MOCK 沒有回傳值,可以在 MOCK 本身中 作驗証(ASSERT)</li>
</ul>
</li>
</ul>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul>
<li>SLIM </li>
<li>注入相依的幾種方式<ul>
<li>Pool</li>
<li>Constructor</li>
<li>Property</li>
</ul>
</li>
<li>書單 : XUnit Test Patterns</li>
</ul>
<h2 id="直播影片"><a href="#直播影片" class="headerlink" title="直播影片"></a>直播影片</h2><p><em>如果連結失效,煩請告知.</em></p>
<ul>
<li><a href="https://www.facebook.com/AgileCommunity.tw/videos/948509765286712/" target="_blank" rel="external">影片1</a></li>
<li><a href="https://www.facebook.com/AgileCommunity.tw/videos/948548118616210/" target="_blank" rel="external">影片2</a></li>
</ul>
<p>文章內容如有謬誤,煩請指正.</p>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;應該知道的事&quot;&gt;&lt;a href=&quot;#應該知道的事&quot; class=&quot;headerlink&quot; title=&quot;應該知道的事:&quot;&gt;&lt;/a&gt;應該知道的事:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用 C# , 但是其他語言也適用 &lt;/li&gt;
&lt;li&gt;使用 Visual Studio&lt;/
    
    </summary>
    
    
      <category term="Unit Test" scheme="http://blog.marsen.me/tags/Unit-Test/"/>
    
  </entry>
  
  <entry>
    <title>[閱讀筆記]其實，你不是沒有時間</title>
    <link href="http://blog.marsen.me/2017/03/26/books/book_attack_your_day/"/>
    <id>http://blog.marsen.me/2017/03/26/books/book_attack_your_day/</id>
    <published>2017-03-25T16:08:46.000Z</published>
    <updated>2017-10-24T17:35:55.168Z</updated>
    
    <content type="html"><![CDATA[<h2 id="六個工具與餐盤"><a href="#六個工具與餐盤" class="headerlink" title="六個工具與餐盤"></a>六個工具與餐盤</h2><ul>
<li>原則:<strong>工具簡單至上</strong></li>
<li>面對突發狀況</li>
</ul>
<ol>
<li>月計劃表 (<code>google calendar</code>)<ul>
<li>與自已約會(保留給自已的時間)^註1^</li>
<li>工作與私人不要分開</li>
<li>日期與期限 </li>
</ul>
</li>
<li>Todo List (<code>inbox</code>)<ul>
<li>提醒與集中管理</li>
<li>每天都要檢查一遍^註2^ </li>
</ul>
</li>
<li>日計劃表 (<code>google calendar</code>)<ul>
<li>當日約會 &amp; 活動清單</li>
<li>活動清單是你當天的籌碼 也是出現突發 </li>
</ul>
</li>
<li>隨手記 (<code>筆記本&amp;Evernote</code>)<ul>
<li>接受任務，再轉到其他工具之中^註3^     </li>
</ul>
</li>
<li>隨身資料庫 (<code>google drive</code>)<ul>
<li>將整理過的資料封存在隨手可得的地方<br>ex: 上課或分享的簡報、 專案記錄等…有大量圖片、文件等</li>
</ul>
</li>
<li>溝通工具 (<code>line &amp; slack</code>)<ul>
<li>一天檢查電子郵件3~6次就夠了</li>
</ul>
</li>
</ol>
<h2 id="把時間變空間-視覺化"><a href="#把時間變空間-視覺化" class="headerlink" title="把時間變空間(視覺化)"></a>把時間變空間(視覺化)</h2><ul>
<li>個人、家庭、工作取得平衡</li>
<li>安排30分鐘規劃一天的活動<ul>
<li>創造性活動安排在精力最佳的時段</li>
<li>安排獨處的時間</li>
<li>安排恢復精力的時間</li>
<li>預留時間給可能發生的突發事件</li>
</ul>
</li>
<li>將所有的事情分為紅綠黃(灰)^註4^，綠色應該越多越好，灰色越少越好。<table><br><tr><td>6 am</td><td>7 am</td><td>8 am</td><td>9 am</td><td>10 am</td><td>11 am</td><td>12 am</td><td>1 pm</td></tr><br><tr><td>5 am</td><td colspan="3" rowspan="4" valign="top">本日活動</td><td colspan="3" rowspan="4" valign="top">隨手記</td><td>2 pm</td></tr><br><tr><td>4 am</td><td>3 pm</td></tr><br><tr><td>3 am</td><td>4 pm</td></tr><br><tr><td>2 am</td><td>5 pm</td></tr><br><tr><td>1 am</td><td>12 am</td><td>11 pm</td><td>10 pm</td><td>9 pm</td><td>8 pm</td><td>7 pm</td><td>6 pm</td></tr><br></table>

</li>
</ul>
<h2 id="應變執行，計劃趕不上變化"><a href="#應變執行，計劃趕不上變化" class="headerlink" title="應變執行，計劃趕不上變化"></a>應變執行，計劃趕不上變化</h2><ul>
<li>調整事情的順序</li>
<li>養成習慣</li>
<li>臨機應變</li>
<li>小心多工</li>
<li>保留風格</li>
</ul>
<h2 id="註"><a href="#註" class="headerlink" title="註"></a>註</h2><ol>
<li>分別為聖的時間，請參考<code>與時間作朋友</code></li>
<li>利用分別為聖的時間檢查</li>
<li>餐盤中間的區塊可以用來作當日的活動清單 &amp; 隨手記</li>
<li>可以參考四象限 重要-緊急(紅)、不重要-緊急(黃)、重要-不緊急(綠)、不重要-不緊急(灰)</li>
</ol>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;六個工具與餐盤&quot;&gt;&lt;a href=&quot;#六個工具與餐盤&quot; class=&quot;headerlink&quot; title=&quot;六個工具與餐盤&quot;&gt;&lt;/a&gt;六個工具與餐盤&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;原則:&lt;strong&gt;工具簡單至上&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;面對突發狀況&lt;/
    
    </summary>
    
    
      <category term="閱讀筆記" scheme="http://blog.marsen.me/tags/%E9%96%B1%E8%AE%80%E7%AD%86%E8%A8%98/"/>
    
      <category term="時間管理" scheme="http://blog.marsen.me/tags/%E6%99%82%E9%96%93%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>自動化 Trello 操作</title>
    <link href="http://blog.marsen.me/2017/02/08/auto_add_trello_card/"/>
    <id>http://blog.marsen.me/2017/02/08/auto_add_trello_card/</id>
    <published>2017-02-08T15:52:27.000Z</published>
    <updated>2017-04-29T05:18:22.198Z</updated>
    
    <content type="html"><![CDATA[<p>Trello 是一個非常方便的工作管理工具,<br>最主要的功能只有 Boards 、 Lists 與 Cards,<br>確可以發揮相當大的綜效功能,<br>用來當作敏捷開發的白板、安排工作項目與進度,<br>作為協作的平台與工具。<br>也有相當多元的外掛可以供不同的情境使用,<br>開發人員也可以自行串接API與系統作整合。<br>簡單記錄自動化產生 Cards 的兩種方法。</p>
<h2 id="第一種方法-使用mail"><a href="#第一種方法-使用mail" class="headerlink" title="第一種方法,使用mail"></a>第一種方法,使用mail</h2><ol>
<li>開啟 Menu &gt; More</li>
<li>點選 Email-to-board Settings</li>
<li>選擇你要產生卡片的 List 與 位置(頂部或底部)</li>
</ol>
<p><img src="https://i.imgur.com/PqDLtdO.gif" alt=""></p>
<ol>
<li>寄信，信件格式如下<ul>
<li>email 的 subject 會成為卡片的標題</li>
<li>email 的內容會成為卡片的描述</li>
<li>如果有附加檔案在郵件中，會附加到卡片中</li>
<li>在 subject 加入 <code>#label</code> 可以在卡片加入標籤(Labels)</li>
<li>在 subject 加入 <code>@member</code> 可以在卡片加入成員(Members)</li>
</ul>
</li>
</ol>
<p>更多請<a href="http://help.trello.com/article/809-creating-cards-by-email" target="_blank" rel="external">參考</a>. </p>
<h2 id="第二種方法-使用API"><a href="#第二種方法-使用API" class="headerlink" title="第二種方法,使用API"></a>第二種方法,使用API</h2><ol>
<li>登入 Trello</li>
<li>連線 <a href="https://developers.trello.com" target="_blank" rel="external">https://developers.trello.com</a><br>點選<code>Get your Application Key</code>. 連線到 <a href="https://trello.com/app-key" target="_blank" rel="external">https://trello.com/app-key</a></li>
</ol>
<h3 id="取得Key"><a href="#取得Key" class="headerlink" title="取得Key"></a>取得Key</h3><p><img src="https://i.imgur.com/bBoiUCr.jpg" alt=""></p>
<h3 id="生成Token"><a href="#生成Token" class="headerlink" title="生成Token"></a>生成Token</h3><p><img src="https://i.imgur.com/gHsdYv8.jpg" alt=""></p>
<p><img src="https://i.imgur.com/bSXkChk.jpg" alt=""><br>點選allow後，就會顯示你的token，特別注意登入的身份權限，<br>並且千萬不要外洩你的token與key值。</p>
<p>試打API,建立一張 Card 到指定的 List 中.<br>並且設定期限(due)與標籤(labels),<br>更多的API設定請<a href="https://developers.trello.com/advanced-reference" target="_blank" rel="external">參考</a>.<br><img src="https://i.imgur.com/yk6SZYm.jpg" alt=""></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul>
<li>Email:<ul>
<li>優點:簡單、方便、可以結合mail system 、附加檔案簡單</li>
<li>缺點:部份功能無法實現(ex: 設定due date)</li>
</ul>
</li>
<li>API:<ul>
<li>優點:靈活、Resful的API可以實現大部份的功能</li>
<li>缺點:實作比較麻煩</li>
</ul>
</li>
</ul>
<p>(fin)    </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Trello 是一個非常方便的工作管理工具,&lt;br&gt;最主要的功能只有 Boards 、 Lists 與 Cards,&lt;br&gt;確可以發揮相當大的綜效功能,&lt;br&gt;用來當作敏捷開發的白板、安排工作項目與進度,&lt;br&gt;作為協作的平台與工具。&lt;br&gt;也有相當多元的外掛可以供不同的情
    
    </summary>
    
    
      <category term="Trello" scheme="http://blog.marsen.me/tags/Trello/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Thread Pool 監控</title>
    <link href="http://blog.marsen.me/2017/01/28/aspdotnet_threadpool_monitor/"/>
    <id>http://blog.marsen.me/2017/01/28/aspdotnet_threadpool_monitor/</id>
    <published>2017-01-28T12:46:49.000Z</published>
    <updated>2017-01-30T06:02:41.615Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p><a href="/2016/11/21/aspdotnet_threadpool_and_redis/">上一次</a>說明了 .NET Thread Pool 的機制如何影響 Redis,<br>.NET Thread Pool 的機制會貫穿任何與它互動的系統或服務,<br>所以這篇會簡單描述如何對 .NET Thread Pool <a href="https://msdn.microsoft.com/zh-tw/library/ff650682.aspx" target="_blank" rel="external">建立監控</a>。</p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><ol>
<li>建立監控記數器</li>
<li>在系統寫入監控數值</li>
<li>開啟效能計數器</li>
</ol>
<h2 id="建立監控記數器"><a href="#建立監控記數器" class="headerlink" title="建立監控記數器"></a>建立監控記數器</h2><table>
<thead>
<tr>
<th>記數器</th>
<th>說明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Available Worker Threads</td>
<td>目前在 thread-pool 可以使用的 worker threads</td>
</tr>
<tr>
<td>Available IO Threads</td>
<td>目前在 thread-pool 可以使用的 I/O threads</td>
</tr>
<tr>
<td>Max Worker Threads</td>
<td>最大可以建立的 worker threads 數量</td>
</tr>
<tr>
<td>Max IO Threads</td>
<td>最大可以建立的 I/O threads 數量</td>
</tr>
</tbody>
</table>
<h3 id="建立一個-Console-應用程式"><a href="#建立一個-Console-應用程式" class="headerlink" title="建立一個 Console 應用程式"></a>建立一個 Console 應用程式</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> System.Diagnostics;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">MyAspNetThreadCounters</span></div><div class="line">&#123;</div><div class="line">  [STAThread]</div><div class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">  &#123;</div><div class="line">    CreateCounters();</div><div class="line">    Console.WriteLine(<span class="string">"MyAspNetThreadCounters performance counter category "</span> +</div><div class="line">                      <span class="string">"is created. [Press Enter]"</span>);</div><div class="line">    Console.ReadLine();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CreateCounters</span>(<span class="params"></span>)</span></div><div class="line">  &#123;</div><div class="line">    CounterCreationDataCollection col =  </div><div class="line">      <span class="keyword">new</span> CounterCreationDataCollection();</div><div class="line"></div><div class="line">    <span class="comment">// Create custom counter objects</span></div><div class="line">    CounterCreationData counter1 = <span class="keyword">new</span> CounterCreationData();</div><div class="line">    counter1.CounterName = <span class="string">"Available Worker Threads"</span>;</div><div class="line">    counter1.CounterHelp = <span class="string">"The difference between the maximum number "</span> + </div><div class="line">                           <span class="string">"of thread pool worker threads and the "</span> +</div><div class="line">                           <span class="string">"number currently active."</span>;</div><div class="line">    counter1.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class="line"></div><div class="line">    CounterCreationData counter2 = <span class="keyword">new</span> CounterCreationData();</div><div class="line">    counter2.CounterName = <span class="string">"Available IO Threads"</span>;</div><div class="line">    counter2.CounterHelp = <span class="string">"The difference between the maximum number of "</span> + </div><div class="line">                           <span class="string">"thread pool IO threads and the number "</span>+ </div><div class="line">                           <span class="string">"currently active."</span>;</div><div class="line">    counter2.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class="line"></div><div class="line">    CounterCreationData counter3 = <span class="keyword">new</span> CounterCreationData();</div><div class="line">    counter3.CounterName = <span class="string">"Max Worker Threads"</span>;</div><div class="line">    counter3.CounterHelp = <span class="string">"The number of requests to the thread pool "</span>+ </div><div class="line">                           <span class="string">"that can be active concurrently. All "</span>+  </div><div class="line">                           <span class="string">"requests above that number remain queued until "</span> +</div><div class="line">                           <span class="string">"thread pool worker threads become available."</span>;</div><div class="line">    counter3.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class="line"></div><div class="line">    CounterCreationData counter4 = <span class="keyword">new</span> CounterCreationData();</div><div class="line">    counter4.CounterName = <span class="string">"Max IO Threads"</span>;</div><div class="line">    counter4.CounterHelp = <span class="string">"The number of requests to the thread pool "</span> + </div><div class="line">                           <span class="string">"that can be active concurrently. All "</span>+  </div><div class="line">                           <span class="string">"requests above that number remain queued until "</span> +</div><div class="line">                           <span class="string">"thread pool IO threads become available."</span>;</div><div class="line">    counter4.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class="line"></div><div class="line">    <span class="comment">// Add custom counter objects to CounterCreationDataCollection.</span></div><div class="line">    col.Add(counter1);</div><div class="line">    col.Add(counter2);</div><div class="line">    col.Add(counter3);</div><div class="line">    col.Add(counter4);</div><div class="line">    <span class="comment">// delete the category if it already exists</span></div><div class="line">    <span class="keyword">if</span>(PerformanceCounterCategory.Exists(<span class="string">"MyAspNetThreadCounters"</span>))</div><div class="line">    &#123;</div><div class="line">      PerformanceCounterCategory.Delete(<span class="string">"MyAspNetThreadCounters"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// bind the counters to the PerformanceCounterCategory</span></div><div class="line">    PerformanceCounterCategory category = </div><div class="line">            PerformanceCounterCategory.Create(<span class="string">"MyAspNetThreadCounters"</span>, </div><div class="line">                                              <span class="string">""</span>, col);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>編譯後並執行即可,<br>執行 <code>regedit</code> 開啟登錄編輯程式,<br>輸入機碼 <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services</code><br>將可以找到剛剛建立的 <code>MyAspNetThreadCounters</code> 記數器</p>
<h2 id="在系統寫入監控數值"><a href="#在系統寫入監控數值" class="headerlink" title="在系統寫入監控數值"></a>在系統寫入監控數值</h2><p>在站台的 <code>Global.asax</code> 加入以下的程式碼</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">bool</span> MonitorThreadPoolEnabled = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Application_Start</span>(<span class="params">Object sender, EventArgs e</span>)</span></div><div class="line">&#123;</div><div class="line">  Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(RefreshCounters));</div><div class="line">  t.Start();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RefreshCounters</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">while</span> (MonitorThreadPoolEnabled)</div><div class="line">  &#123;</div><div class="line">    ASPNETThreadInfo t = GetThreadInfo();</div><div class="line">    ShowPerfCounters(t);</div><div class="line">    System.Threading.Thread.Sleep(<span class="number">500</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Application_End</span>(<span class="params">Object sender, EventArgs e</span>)</span></div><div class="line">&#123;</div><div class="line">  MonitorThreadPoolEnabled = <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">struct</span> ASPNETThreadInfo</div><div class="line">&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">int</span> MaxWorkerThreads;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">int</span> MaxIOThreads;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">int</span> MinFreeThreads;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">int</span> MinLocalRequestFreeThreads;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">int</span> AvailableWorkerThreads;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">int</span> AvailableIOThreads;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Equals</span>(<span class="params">ASPNETThreadInfo other</span>)</span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      MaxWorkerThreads == other.MaxWorkerThreads &amp;&amp;</div><div class="line">      MaxIOThreads == other.MaxIOThreads &amp;&amp;</div><div class="line">      MinFreeThreads == other.MinFreeThreads &amp;&amp;</div><div class="line">      MinLocalRequestFreeThreads == other.MinLocalRequestFreeThreads &amp;&amp;</div><div class="line">      AvailableWorkerThreads == other.AvailableWorkerThreads &amp;&amp;</div><div class="line">      AvailableIOThreads == other.AvailableIOThreads</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> ASPNETThreadInfo <span class="title">GetThreadInfo</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">  <span class="comment">// use ThreadPool to get the current status</span></div><div class="line">  <span class="keyword">int</span> availableWorker, availableIO;</div><div class="line">  <span class="keyword">int</span> maxWorker, maxIO;</div><div class="line"></div><div class="line">  ThreadPool.GetAvailableThreads( <span class="keyword">out</span> availableWorker, <span class="keyword">out</span> availableIO);</div><div class="line">  ThreadPool.GetMaxThreads(<span class="keyword">out</span> maxWorker, <span class="keyword">out</span> maxIO);</div><div class="line"></div><div class="line">  ASPNETThreadInfo threadInfo;</div><div class="line">  threadInfo.AvailableWorkerThreads = (Int16)availableWorker;</div><div class="line">  threadInfo.AvailableIOThreads = (Int16)availableIO;</div><div class="line">  threadInfo.MaxWorkerThreads = (Int16)maxWorker;</div><div class="line">  threadInfo.MaxIOThreads = (Int16)maxIO;</div><div class="line"> <span class="comment">// hard code for now; could get this from  machine.config</span></div><div class="line">  threadInfo.MinFreeThreads = <span class="number">8</span>;</div><div class="line">  threadInfo.MinLocalRequestFreeThreads = <span class="number">4</span>;</div><div class="line">  <span class="keyword">return</span> threadInfo;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowPerfCounters</span>(<span class="params">ASPNETThreadInfo t</span>)</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">  <span class="comment">// get an instance of our Available Worker Threads counter</span></div><div class="line">  PerformanceCounter counter1 = <span class="keyword">new</span> PerformanceCounter();</div><div class="line">  counter1.CategoryName = <span class="string">"MyAspNetThreadCounters"</span>;</div><div class="line">  counter1.CounterName = <span class="string">"Available Worker Threads"</span>;</div><div class="line">  counter1.ReadOnly = <span class="literal">false</span>;</div><div class="line"></div><div class="line">  <span class="comment">// set the value of the counter</span></div><div class="line">  counter1.RawValue = t.AvailableWorkerThreads;</div><div class="line">  counter1.Close();</div><div class="line"></div><div class="line">  <span class="comment">// repeat for other counters</span></div><div class="line"></div><div class="line">  PerformanceCounter counter2 = <span class="keyword">new</span> PerformanceCounter();</div><div class="line">  counter2.CategoryName = <span class="string">"MyAspNetThreadCounters"</span>;</div><div class="line">  counter2.CounterName = <span class="string">"Available IO Threads"</span>;</div><div class="line">  counter2.ReadOnly = <span class="literal">false</span>;</div><div class="line">  counter2.RawValue = t.AvailableIOThreads;</div><div class="line">  counter2.Close();</div><div class="line"></div><div class="line">  PerformanceCounter counter3 = <span class="keyword">new</span> PerformanceCounter();</div><div class="line">  counter3.CategoryName = <span class="string">"MyAspNetThreadCounters"</span>;</div><div class="line">  counter3.CounterName = <span class="string">"Max Worker Threads"</span>;</div><div class="line">  counter3.ReadOnly = <span class="literal">false</span>;</div><div class="line">  counter3.RawValue = t.MaxWorkerThreads;</div><div class="line">  counter3.Close();</div><div class="line"></div><div class="line">  PerformanceCounter counter4 = <span class="keyword">new</span> PerformanceCounter();</div><div class="line">  counter4.CategoryName = <span class="string">"MyAspNetThreadCounters"</span>;</div><div class="line">  counter4.CounterName = <span class="string">"Max IO Threads"</span>;</div><div class="line">  counter4.ReadOnly = <span class="literal">false</span>;</div><div class="line">  counter4.RawValue = t.MaxIOThreads;</div><div class="line">  counter4.Close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>當你的站台重新啟動後,<br>就會定期將 Worker Thread 與  I/O Threads 的監控數值傳遞給系統。  </p>
<h3 id="開啟效能計數器"><a href="#開啟效能計數器" class="headerlink" title="開啟效能計數器"></a>開啟效能計數器</h3><ol>
<li>執行 <code>perfmon.exe</code> 開啟效能計數器</li>
<li>新增效能計數器(點選綠色加符號)</li>
<li>選取前面所建立監控記數器就能看到當前 ThreadPool 的使用狀況。<br><img src="https://i.imgur.com/HhlbNH2.jpg" alt=""></li>
</ol>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;/2016/11/21/aspdotnet_threadpool_and_redis/&quot;&gt;上一次&lt;/a&gt;說
    
    </summary>
    
    
      <category term=".Net Framework" scheme="http://blog.marsen.me/tags/Net-Framework/"/>
    
      <category term="ASP.Net" scheme="http://blog.marsen.me/tags/ASP-Net/"/>
    
      <category term="Thread" scheme="http://blog.marsen.me/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>IIS Tracing Log 設定</title>
    <link href="http://blog.marsen.me/2017/01/24/iis_tracing_log_setting/"/>
    <id>http://blog.marsen.me/2017/01/24/iis_tracing_log_setting/</id>
    <published>2017-01-24T06:27:12.000Z</published>
    <updated>2017-01-30T06:02:41.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="緣由"><a href="#緣由" class="headerlink" title="緣由"></a>緣由</h2><p>當你需要Trace送到IIS的每個Request的細節(包含在pipe line各個模組之間的input/output 與 傳入的參數、header等…),<br>可以透過開啟tracing log來作追蹤</p>
<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ol>
<li>Windows Server 2012 R2</li>
<li>IIS 8.5.9600.16384</li>
</ol>
<h2 id="開啟-tracing-log"><a href="#開啟-tracing-log" class="headerlink" title="開啟 tracing log"></a>開啟 tracing log</h2><ol>
<li>新增 Tracing Rules<br><img src="https://i.imgur.com/4llAgOa.jpg" alt=""><br><img src="https://i.imgur.com/BavVoWy.gif" alt=""></li>
</ol>
<ol>
<li>開啟網站 Tracing 功能<br><img src="https://i.imgur.com/LUgbESR.jpg" alt=""><br><img src="https://i.imgur.com/aKtgj5m.jpg" alt=""></li>
</ol>
<h2 id="調整-IE-Security-層級"><a href="#調整-IE-Security-層級" class="headerlink" title="調整 IE Security 層級"></a>調整 IE Security 層級</h2><ol>
<li><p>使用 IE 開啟 Log，因 Security 設定無法套用版型<br><img src="https://i.imgur.com/4VsuQWp.jpg" alt=""></p>
</li>
<li><p>調整ie enhanced security</p>
</li>
</ol>
<p><img src="https://i.imgur.com/Lvnygqr.jpg" alt=""></p>
<ol>
<li><p>開啟IE &gt; 點選小齒輪，選擇  Internet Options &gt; 點選 Security 頁籤 &gt; 將 Internet 的 Security Level 調整為 Medium-high<br><img src="https://i.imgur.com/H2F06OU.jpg" alt=""></p>
</li>
<li><p>完成<br><img src="https://i.imgur.com/biiX6w8.jpg" alt=""></p>
</li>
</ol>
<p>(fin)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;緣由&quot;&gt;&lt;a href=&quot;#緣由&quot; class=&quot;headerlink&quot; title=&quot;緣由&quot;&gt;&lt;/a&gt;緣由&lt;/h2&gt;&lt;p&gt;當你需要Trace送到IIS的每個Request的細節(包含在pipe line各個模組之間的input/output 與 傳入的參數、he
    
    </summary>
    
    
      <category term="記錄" scheme="http://blog.marsen.me/tags/%E8%A8%98%E9%8C%84/"/>
    
      <category term="IIS" scheme="http://blog.marsen.me/tags/IIS/"/>
    
  </entry>
  
  <entry>
    <title>CI/CD 環境建置筆記 - 使用Openshift 的 Jenkins (失敗)</title>
    <link href="http://blog.marsen.me/2017/01/15/ci_use_jenkins_on_openshfit/"/>
    <id>http://blog.marsen.me/2017/01/15/ci_use_jenkins_on_openshfit/</id>
    <published>2017-01-15T14:16:42.000Z</published>
    <updated>2017-01-15T15:35:27.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><ul>
<li><a href="/2017/01/15/ci_use_jenkins/">CI/CD 環境建置筆記 - 前言&lt;目的&gt;</a></li>
</ul>
<h2 id="操作記錄-失敗"><a href="#操作記錄-失敗" class="headerlink" title="操作記錄(失敗)"></a>操作記錄(失敗)</h2><h3 id="目標"><a href="#目標" class="headerlink" title="目標:"></a>目標:</h3><ul>
<li>在 Openshift 新增一個 Jenkins Server</li>
</ul>
<h3 id="失敗原因"><a href="#失敗原因" class="headerlink" title="失敗原因:"></a>失敗原因:</h3><ul>
<li>我找不到方法在 Openshift 上建置的 Jenkins Server </li>
</ul>
<h3 id="記錄"><a href="#記錄" class="headerlink" title="記錄:"></a>記錄:</h3><ol>
<li>登入OpenShift的<a href="https://openshift.redhat.com/app/console/applications" target="_blank" rel="external">web console</a></li>
<li>Add Application 選擇 <code>Jenkins Server</code>，使用預設設定Create Application.<br>Public URL 設定為 <a href="http://jenkins-youraccount.rhcloud.com" target="_blank" rel="external">http://jenkins-youraccount.rhcloud.com</a></li>
<li>連線進 <a href="http://jenkins-youraccount.rhcloud.com" target="_blank" rel="external">http://jenkins-youraccount.rhcloud.com</a> 會發現需要帳密登入</li>
<li>取得帳號密碼<ol>
<li>使用 SSH 連線 Openshift 的 Jenkins Server (可以在web console 查到連結)<br> <code>&gt; ssh 4263*****************@jenkins-youraccount.rhcloud.com</code></li>
<li>查看以下兩個檔案可以取得帳號密碼<br><code>JENKINS_USERNAME</code><br><code>JENKINS_PASSWORD</code> </li>
</ol>
</li>
</ol>
<ol>
<li>登入後，管理 Jenkins &gt; 設定系統<ol>
<li>將執行程式數量設定為 1 </li>
</ol>
</li>
<li><p>選擇新增作業</p>
<ol>
<li>第一步要將原始碼自Github pull下來;在原始碼管理選擇<code>Git</code> , 設定好<code>Repositories</code>、<code>Branches to build</code></li>
</ol>
</li>
<li><p><strong>執行一次建置</strong>，這個步驟是為了產生work space 。 </p>
</li>
<li>SSH 連線 Openshift，切換目錄到你的專案的work space<br><code>&gt; ssh 4263*****************@jenkins-youraccount.rhcloud.com</code><br><code>&gt; cd app-root/data/workspace/your_project_name</code></li>
<li>檢查一下目前Git的遠端Repo有哪些<br><code>&gt; git remote -v</code></li>
<li>將Openshift上的nodejs應用程式repo設為remote<br><code>&gt;git remote add openshift ssh://5**********************@nodejs-youraccount.rhcloud.com/~/git/nodejs.git/</code></li>
<li>推送到<code>openshift remote</code><br>失敗!!原因是權限問題，Openshift remote 是透過 SSH 連線，<br>在認証公鑰的過程中，需要寫入 <code>~/.ssh/known_hosts</code> 檔案。<br>但是 Openshift 建立的 Jenkins Server 登入帳號，權限並不足以寫入而造成失敗</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2017/01/15/ci_use_jenkins/&quot;&gt;CI/CD 環境建置筆記 - 前言&amp;
    
    </summary>
    
    
      <category term="CI" scheme="http://blog.marsen.me/tags/CI/"/>
    
      <category term="Jenkins" scheme="http://blog.marsen.me/tags/Jenkins/"/>
    
      <category term="Openshift" scheme="http://blog.marsen.me/tags/Openshift/"/>
    
  </entry>
  
</feed>
