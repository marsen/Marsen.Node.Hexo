{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":1,"renderable":0},{"_id":"source/images/090516_023554_AM.jpg","path":"images/090516_023554_AM.jpg","modified":1,"renderable":0},{"_id":"source/images/102216_095355_PM.jpg","path":"images/102216_095355_PM.jpg","modified":1,"renderable":0},{"_id":"source/images/090516_023252_AM.jpg","path":"images/090516_023252_AM.jpg","modified":1,"renderable":0},{"_id":"source/images/090516_021242_AM.jpg","path":"images/090516_021242_AM.jpg","modified":1,"renderable":0},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"source/images/workerthread_and_iothread/110416_102435_AM.jpg","path":"images/workerthread_and_iothread/110416_102435_AM.jpg","modified":1,"renderable":0},{"_id":"source/images/workerthread_and_iothread/110416_103521_AM.jpg","path":"images/workerthread_and_iothread/110416_103521_AM.jpg","modified":1,"renderable":0},{"_id":"source/images/workerthread_and_iothread/110416_112435_AM.jpg","path":"images/workerthread_and_iothread/110416_112435_AM.jpg","modified":1,"renderable":0},{"_id":"source/images/090516_024550_AM.jpg","path":"images/090516_024550_AM.jpg","modified":1,"renderable":0},{"_id":"source/images/workerthread_and_iothread/278553_300x300.jpg","path":"images/workerthread_and_iothread/278553_300x300.jpg","modified":1,"renderable":0},{"_id":"source/images/workerthread_and_iothread/110416_102436_AM.png","path":"images/workerthread_and_iothread/110416_102436_AM.png","modified":1,"renderable":0},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"source/images/workerthread_and_iothread/110416_102437_AM.jpg","path":"images/workerthread_and_iothread/110416_102437_AM.jpg","modified":1,"renderable":0},{"_id":"source/images/workerthread_and_iothread/110416_170101_PM.jpg","path":"images/workerthread_and_iothread/110416_170101_PM.jpg","modified":1,"renderable":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.bak.jpg","path":"css/images/banner.bak.jpg","modified":1,"renderable":1},{"_id":"source/images/workerthread_and_iothread/110416_170001_PM.jpg","path":"images/workerthread_and_iothread/110416_170001_PM.jpg","modified":1,"renderable":0},{"_id":"source/images/workerthread_and_iothread/螢幕擷取畫面_110716_110245_AM.jpg","path":"images/workerthread_and_iothread/螢幕擷取畫面_110716_110245_AM.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1471068436192},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1471068436193},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1471068436194},{"_id":"themes/landscape/_config.yml","hash":"e0c4d681cec621a0eafe591384d6b4fd1e0793ec","modified":1472105092734},{"_id":"themes/landscape/README.md","hash":"e7cc82dc79596f36ba05a8139e7d6b2dfc4ae5f9","modified":1471068436196},{"_id":"themes/landscape/package.json","hash":"d07f326588fef82f1d23ae3101c9ddfff34c132f","modified":1471068436220},{"_id":"source/CNAME","hash":"1c1ded058047f1d22275a8561240d1074b7a5cca","modified":1471198967912},{"_id":"source/README.md","hash":"7e15d0a159a4a8be81924f6f4392266dcd4b407c","modified":1471198943299},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1471068436216},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1471068436215},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1471068436216},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1471068436217},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1471068436218},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1471068436218},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1471068436219},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1471068436198},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1471068436200},{"_id":"themes/landscape/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1471068436199},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1471068436200},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1471068436201},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1471068436202},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1471068436202},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1471068436221},{"_id":"source/_drafts/dotNet_filestream.md","hash":"a0247c2db4f16f29e72f2ddfd40ad392c2577ba9","modified":1476983398812},{"_id":"source/images/090516_023554_AM.jpg","hash":"a9cec76e1e7b039f9c870fdf0f938cf4edfd7ce8","modified":1473014154777},{"_id":"source/images/102216_095355_PM.jpg","hash":"721e0caf732a8c6cd6b1b83a31fec062af16a744","modified":1477144450000},{"_id":"source/_drafts/workerthread_and_iothread_1.md","hash":"d2342e4a5305f3454cd75b4ff28240c9139adbcc","modified":1479269668960},{"_id":"source/_drafts/workerthread_and_iothread_2.md","hash":"5fa7b3c6f3c010c4280b4c9c5ffaf2f223450d0c","modified":1478749399279},{"_id":"source/_posts/1st_time_with_powershell.md","hash":"23b7e9ff77dea30b73b1d69efc1de2c9e08c9acd","modified":1479720148683},{"_id":"source/_posts/about_content_type.md","hash":"7a9cb9f6ece5a05490491c1b17aec42ad338dd9f","modified":1478749411111},{"_id":"source/_posts/add_google_analytics_to_hexo_blog_1.md","hash":"26abe9643e7b65647f2aa0ccd422605120e16bb4","modified":1472117015055},{"_id":"source/_posts/aspdotnet_threadpool_and_redis.md","hash":"f1b743155cee74c5f459d84c3fe7c5bad60cdcff","modified":1479786078847},{"_id":"source/_posts/dotnet_pdb_file.md","hash":"4cce1b7f684431a5d31dc42977a505b2cbe5c74b","modified":1480870848445},{"_id":"source/_posts/file_rowdata_import_mssql.md","hash":"b2bacf9b63f468f35bbfb33a8bd52cadf646cca6","modified":1480870846677},{"_id":"source/_posts/hello-world.md","hash":"129f80cf22aa52d007029bf2d22b90d86898ff67","modified":1480870925522},{"_id":"source/_posts/how_to_use_github_page.md","hash":"293fed508dd1050f6223b75f964d3f3ef762f468","modified":1480871012179},{"_id":"source/_posts/http2 by cloudflare.md","hash":"42d51d2508a498baf0df391aeaa4f683c777a21a","modified":1480871132865},{"_id":"source/_posts/setting_DNS_with_google.md","hash":"1c65a5b037511f7c2a0d637a8acaeda35730cc3a","modified":1480871264522},{"_id":"source/_posts/sites_todo_list.md","hash":"ea36c902ab0951804f5acaf0a2b0fcd620d160a0","modified":1475950066353},{"_id":"source/_posts/todolist_by_typescript_1.md","hash":"3462cababdc21d3017ac8baf9d1aaf514f22cff5","modified":1480871330252},{"_id":"source/_posts/todolist_by_typescript_2.md","hash":"21426c2d4756d8839eca0bd3e86edd999de2de03","modified":1480871370000},{"_id":"source/images/090516_023252_AM.jpg","hash":"509eef571252eebe3417bb7c89c589d3485a01af","modified":1473013972393},{"_id":"source/images/090516_021242_AM.jpg","hash":"015f6fff88214f8744c37b8d02a331ffadda5943","modified":1473014065463},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1471068436214},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1471068436213},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1471068436213},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"a7faab4f3601b28107af5b1095b3966c2f88fec8","modified":1471068436204},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1471068436204},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1471068436214},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1471068436206},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"3beb0d164acacb6f21e1ca2038158a74ab4a73e4","modified":1471068436205},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1471068436207},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1471068436205},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1471068436215},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1471068436208},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"89998e6b2929c4ff5093bbf6b86d611d7420be52","modified":1471068436207},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"148bdf714dd1a7bf55e571f13808ceae079200cc","modified":1471068436208},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1471068436212},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1471068436246},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1471068436246},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1471068436247},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1471068436248},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1471068436247},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1471068436249},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1471068436255},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1471068436223},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1471068436257},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1471068436256},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1471068436245},{"_id":"themes/landscape/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1471068436232},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1471068436258},{"_id":"source/images/workerthread_and_iothread/110416_102435_AM.jpg","hash":"a876fb25212a93ae47f0447a83d64d2f5028d03a","modified":1478573979608},{"_id":"source/images/workerthread_and_iothread/110416_103521_AM.jpg","hash":"839e4d25969fc11027a13413c74a3456524d8f3e","modified":1478226926332},{"_id":"source/images/workerthread_and_iothread/110416_112435_AM.jpg","hash":"3bc3703723f421303a5119d6563e8d32614f4ac2","modified":1478574463093},{"_id":"source/images/090516_024550_AM.jpg","hash":"16b8658ff25fec9ecc6c84a5354c8a6f015ddb30","modified":1473014750891},{"_id":"source/images/workerthread_and_iothread/278553_300x300.jpg","hash":"4cba555dc1ba4aef9e7aee3b4adb1d06a3937968","modified":1478764841931},{"_id":"source/images/workerthread_and_iothread/110416_102436_AM.png","hash":"b567d9a58721b13f82b351ba494c260ee86c77cb","modified":1478226566420},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1471068436209},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1471068436210},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1471068436209},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1471068436210},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1471068436211},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1471068436211},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1471068436250},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1471068436251},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1471068436252},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1471068436252},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1471068436253},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1471068436254},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1471068436225},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1471068436224},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1471068436225},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1471068436226},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1471068436226},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1471068436228},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1471068436228},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1471068436229},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1471068436227},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1471068436229},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1471068436230},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1471068436234},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1471068436233},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1471068436240},{"_id":"source/images/workerthread_and_iothread/110416_102437_AM.jpg","hash":"a4b6382cea823bea0be5757fe0800639ae0166ce","modified":1478492781816},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1471068436231},{"_id":"source/images/workerthread_and_iothread/110416_170101_PM.jpg","hash":"e941d0267614d431c0e422ef753c38de7b75087d","modified":1478429765087},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1471068436239},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"dd61b5b07fedf2fa657aa76c9058d19c1e30d294","modified":1471811233962},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1471068436237},{"_id":"themes/landscape/source/css/images/banner.bak.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1471068436244},{"_id":"source/images/workerthread_and_iothread/110416_170001_PM.jpg","hash":"bd9fa06701bd800e059df8fd499af13d1b8ad277","modified":1478429858161},{"_id":"source/images/workerthread_and_iothread/螢幕擷取畫面_110716_110245_AM.jpg","hash":"556cffba3e1c86d4c33775c3cabfef8fd6fcebc9","modified":1478487765493},{"_id":"public/atom.xml","hash":"33f9b50b9a2d4e461c745c53b924488c1fda8d03","modified":1480871429583},{"_id":"public/2016/08/29/file_rowdata_import_mssql/index.html","hash":"95c2280b4e61028e0b6558a66c7447952308c9b2","modified":1480871429979},{"_id":"public/2016/08/25/add_google_analytics_to_hexo_blog_1/index.html","hash":"cc4b20623a49f427f9bc2d373c87dc99a2fe05aa","modified":1480871430018},{"_id":"public/2016/08/13/hello-world/index.html","hash":"cc66703d1034d3d861eba9c11da4bf36f1cf46ec","modified":1480871430021},{"_id":"public/2016/08/20/sites_todo_list/index.html","hash":"8089c032ca0f523235964eb07327e37e9a16cb6f","modified":1480871430021},{"_id":"public/tags/IO/index.html","hash":"8f7985df0534988391b7f6220b4b1f9c14986521","modified":1480871430021},{"_id":"public/tags/Net-Framework/index.html","hash":"43b160ddfc778a58a0aaea913daa4875103cf08e","modified":1480871430022},{"_id":"public/tags/記錄/index.html","hash":"cd09b894841e17fac9409f883542a570ad13e3b0","modified":1480871430022},{"_id":"public/tags/Thread/index.html","hash":"5abfbd9525673358b4c851b71504479073ac0b78","modified":1480871430022},{"_id":"public/tags/ASP-Net/index.html","hash":"01e1b66fe5081c2b0ec1261f16f342f3839dabc9","modified":1480871430022},{"_id":"public/tags/powershell/index.html","hash":"f2b688cdc1dc99b8392e5d31e4747d394af1b109","modified":1480871430022},{"_id":"public/tags/Database/index.html","hash":"100e8936d554c0bbd0b8dd22786610e9380bae33","modified":1480871430022},{"_id":"public/tags/MsSQL/index.html","hash":"e78a0bcd6a22fd0d4b1924086083d511b46e012e","modified":1480871430022},{"_id":"public/tags/BulkInsert/index.html","hash":"49db691fbd69e990e1852d6e7b4171466cbd770d","modified":1480871430022},{"_id":"public/tags/blog/index.html","hash":"28b493b4f42c24237757a1b7128fcfdc14ef5d54","modified":1480871430022},{"_id":"public/tags/Redis/index.html","hash":"4eac6bcddf9e530b7920fd90cf873f464b7c2471","modified":1480871430022},{"_id":"public/tags/post/index.html","hash":"f10ede356a1244d996d50af9f4b1b4b78d328d7d","modified":1480871430022},{"_id":"public/tags/google-analytics/index.html","hash":"fc506592904a1e1a048303878dae01ea3384dec4","modified":1480871430022},{"_id":"public/tags/http/index.html","hash":"a799b0f66631ecad9a28e35a16105cf522367f3f","modified":1480871430022},{"_id":"public/tags/MSSQL/index.html","hash":"61f0f55bc38fc9cd6ba0af5d1e1c04aec105e1d2","modified":1480871430022},{"_id":"public/tags/html/index.html","hash":"7a3249ffa385b8d627473b33459c5b247186c5e9","modified":1480871430022},{"_id":"public/tags/Content-Type/index.html","hash":"0e48e73fd6d50eecdecacae9934ad01162c6545e","modified":1480871430023},{"_id":"public/tags/DBA/index.html","hash":"f41e2286f787e6b5e7a590aa67b525f91ed2a0b7","modified":1480871430023},{"_id":"public/tags/HTTP-1-1/index.html","hash":"4638576fd2161a8fd7e29ae794c2229502508737","modified":1480871430023},{"_id":"public/tags/HTTP-2/index.html","hash":"30c10c12cbf252ccdaba148f3500e2ef2d433c38","modified":1480871430023},{"_id":"public/tags/TCP/index.html","hash":"e70de4517a71408c1693716fc93acf1bca545640","modified":1480871430024},{"_id":"public/tags/website/index.html","hash":"ee70b5ebf025c10c1a36d40f14ee51c17f61c56d","modified":1480871430024},{"_id":"public/tags/domain/index.html","hash":"6007a785065463692cdc633b1e9e9d21a3e61b5e","modified":1480871430024},{"_id":"public/tags/DNS/index.html","hash":"e616030e7b76ab1b1547d73d9978eb812373680b","modified":1480871430024},{"_id":"public/tags/github/index.html","hash":"8b245e10e83ea69fc297c6958fa3397750c78573","modified":1480871430024},{"_id":"public/tags/kata/index.html","hash":"82f12431e54d9a5ba62aca64ec5ad4f43fd594c4","modified":1480871430024},{"_id":"public/2016/11/21/aspdotnet_threadpool_and_redis/index.html","hash":"8ce631abb8ace7cb2196c434732ed2e8ef01cd4c","modified":1480871430024},{"_id":"public/2016/10/21/1st_time_with_powershell/index.html","hash":"c1ade6c6ad56025d1af4ca2fceda78d41393bbd1","modified":1480871430024},{"_id":"public/2016/11/28/dotnet_pdb_file/index.html","hash":"88ecdfd7256704c0cbf7955d8efb165cd636dac6","modified":1480871430024},{"_id":"public/2016/09/04/http2 by cloudflare/index.html","hash":"aef3365c18f7765e6820163702c5750dd6876600","modified":1480871430024},{"_id":"public/2016/10/14/todolist_by_typescript_2/index.html","hash":"5e30185cd0c3f4fcfffd025cc084ec4f9c221538","modified":1480871430024},{"_id":"public/2016/10/08/todolist_by_typescript_1/index.html","hash":"d69ddc948e596a55e73ca2f41179a7140876da73","modified":1480871430024},{"_id":"public/2016/08/28/how_to_use_github_page/index.html","hash":"adcb0d52a3f78dc52175665cbd768d75203580a0","modified":1480871430024},{"_id":"public/index.html","hash":"e7af4695ae97f5ef5d87100d107bcf132b2a9f2f","modified":1480871430024},{"_id":"public/2016/08/21/setting_DNS_with_google/index.html","hash":"c72c496c5f7c1c511464f4e27148feaeb69237ed","modified":1480871430025},{"_id":"public/2016/10/28/about_content_type/index.html","hash":"8b06f5b75e9aaed1a2593a8f87ec7d7c378fc208","modified":1480871430025},{"_id":"public/page/2/index.html","hash":"00c8bd741464241e5975620773dd396b994fc1fa","modified":1480871430025},{"_id":"public/tags/bootstrap/index.html","hash":"29e9042f7ac888ac240a93d1d1a6cf86b9969ca2","modified":1480871430040},{"_id":"public/tags/npm/index.html","hash":"c23088dd6f7dfdf78e44ae1c44740131e63992cd","modified":1480871430040},{"_id":"public/tags/typescript/index.html","hash":"721b58b3173998b70c36707acd5d647aeb927156","modified":1480871430040},{"_id":"public/tags/jquery/index.html","hash":"c38597d8f744974571ec19a708a951a29d6239c2","modified":1480871430040},{"_id":"public/archives/index.html","hash":"56a3932610d47268b98b32ec9a22df460a11bd09","modified":1480871430040},{"_id":"public/archives/page/2/index.html","hash":"6d1f4338e148ce7eb9d1d7c7858da9b1590787bf","modified":1480871430040},{"_id":"public/archives/2016/page/2/index.html","hash":"0f913faac3420029396371c5ef3617e3abebd37f","modified":1480871430040},{"_id":"public/archives/2016/08/index.html","hash":"b2ae56943cd78b636f40693c25f35271307ed8e9","modified":1480871430040},{"_id":"public/archives/2016/index.html","hash":"e26f4cf7729368ac6456a3d0ecbf4a1a34305fe3","modified":1480871430040},{"_id":"public/archives/2016/09/index.html","hash":"f354f0d21904ce29cca835cfa21a706cef68d081","modified":1480871430040},{"_id":"public/tags/jquery-ui/index.html","hash":"2dfa7ea831b1b8c9fa995dc0ba6a3d8381626a62","modified":1480871430041},{"_id":"public/archives/2016/10/index.html","hash":"c2e6da097dc674ce5a4bceed8809ec82ea85c7c8","modified":1480871430041},{"_id":"public/archives/2016/11/index.html","hash":"fa44c07473b893b20cc766512ae600148e8663f7","modified":1480871430041},{"_id":"public/README.md","hash":"7e15d0a159a4a8be81924f6f4392266dcd4b407c","modified":1480871430048},{"_id":"public/CNAME","hash":"1c1ded058047f1d22275a8561240d1074b7a5cca","modified":1480871430048},{"_id":"public/images/102216_095355_PM.jpg","hash":"721e0caf732a8c6cd6b1b83a31fec062af16a744","modified":1480871430048},{"_id":"public/images/090516_023554_AM.jpg","hash":"a9cec76e1e7b039f9c870fdf0f938cf4edfd7ce8","modified":1480871430048},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1480871430048},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1480871430048},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1480871430049},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1480871430049},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1480871430049},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1480871430049},{"_id":"public/images/workerthread_and_iothread/110416_102435_AM.jpg","hash":"a876fb25212a93ae47f0447a83d64d2f5028d03a","modified":1480871430049},{"_id":"public/images/workerthread_and_iothread/110416_112435_AM.jpg","hash":"3bc3703723f421303a5119d6563e8d32614f4ac2","modified":1480871430049},{"_id":"public/images/workerthread_and_iothread/110416_103521_AM.jpg","hash":"839e4d25969fc11027a13413c74a3456524d8f3e","modified":1480871430051},{"_id":"public/images/workerthread_and_iothread/278553_300x300.jpg","hash":"4cba555dc1ba4aef9e7aee3b4adb1d06a3937968","modified":1480871430051},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1480871430051},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1480871430051},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1480871430051},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1480871430051},{"_id":"public/images/090516_023252_AM.jpg","hash":"509eef571252eebe3417bb7c89c589d3485a01af","modified":1480871431162},{"_id":"public/images/090516_021242_AM.jpg","hash":"015f6fff88214f8744c37b8d02a331ffadda5943","modified":1480871431163},{"_id":"public/images/workerthread_and_iothread/110416_102436_AM.png","hash":"b567d9a58721b13f82b351ba494c260ee86c77cb","modified":1480871431165},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1480871431165},{"_id":"public/css/images/banner.jpg","hash":"dd61b5b07fedf2fa657aa76c9058d19c1e30d294","modified":1480871431165},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1480871431181},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1480871431181},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1480871431181},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1480871431181},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1480871431181},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1480871431181},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1480871431181},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1480871431182},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1480871431182},{"_id":"public/css/style.css","hash":"fffb3966bf36057a325498aba9ce3a2ea7bd79e1","modified":1480871431182},{"_id":"public/images/090516_024550_AM.jpg","hash":"16b8658ff25fec9ecc6c84a5354c8a6f015ddb30","modified":1480871431182},{"_id":"public/images/workerthread_and_iothread/110416_102437_AM.jpg","hash":"a4b6382cea823bea0be5757fe0800639ae0166ce","modified":1480871431182},{"_id":"public/images/workerthread_and_iothread/110416_170101_PM.jpg","hash":"e941d0267614d431c0e422ef753c38de7b75087d","modified":1480871431182},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1480871431203},{"_id":"public/css/images/banner.bak.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1480871431203},{"_id":"public/images/workerthread_and_iothread/110416_170001_PM.jpg","hash":"bd9fa06701bd800e059df8fd499af13d1b8ad277","modified":1480871431242},{"_id":"public/images/workerthread_and_iothread/螢幕擷取畫面_110716_110245_AM.jpg","hash":"556cffba3e1c86d4c33775c3cabfef8fd6fcebc9","modified":1480871431247}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"FileStream正確的使用FileAccess與FileShare參數","_content":"## 前情提要\n使用FileStream存取檔案是基本功,但是沒有了解底層細節,\n在多執行緒同時存取與編輯檔案時,將會引爆咬檔地雷。\n\n\n\n## 加碼 HttpContent 與 Stream\n\n\n## 測試工具 `LinqPad`\n\n## 參考\n- http://stackoverflow.com/questions/25097773/system-io-filestream-fileaccess-vs-fileshare\n- https://referencesource.microsoft.com/#q=FileStream","source":"_drafts/dotNet_filestream.md","raw":"---\ntitle: FileStream正確的使用FileAccess與FileShare參數\ntag:\n  - .Net Framework\n  - IO\n  - 記錄\n---\n## 前情提要\n使用FileStream存取檔案是基本功,但是沒有了解底層細節,\n在多執行緒同時存取與編輯檔案時,將會引爆咬檔地雷。\n\n\n\n## 加碼 HttpContent 與 Stream\n\n\n## 測試工具 `LinqPad`\n\n## 參考\n- http://stackoverflow.com/questions/25097773/system-io-filestream-fileaccess-vs-fileshare\n- https://referencesource.microsoft.com/#q=FileStream","slug":"dotNet_filestream","published":0,"date":"2016-10-20T16:20:19.833Z","updated":"2016-10-20T17:09:58.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwawm2zz000038opoxczxth9","content":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><p>使用FileStream存取檔案是基本功,但是沒有了解底層細節,<br>在多執行緒同時存取與編輯檔案時,將會引爆咬檔地雷。</p>\n<h2 id=\"加碼-HttpContent-與-Stream\"><a href=\"#加碼-HttpContent-與-Stream\" class=\"headerlink\" title=\"加碼 HttpContent 與 Stream\"></a>加碼 HttpContent 與 Stream</h2><h2 id=\"測試工具-LinqPad\"><a href=\"#測試工具-LinqPad\" class=\"headerlink\" title=\"測試工具 LinqPad\"></a>測試工具 <code>LinqPad</code></h2><h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"http://stackoverflow.com/questions/25097773/system-io-filestream-fileaccess-vs-fileshare\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/25097773/system-io-filestream-fileaccess-vs-fileshare</a></li>\n<li><a href=\"https://referencesource.microsoft.com/#q=FileStream\" target=\"_blank\" rel=\"external\">https://referencesource.microsoft.com/#q=FileStream</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><p>使用FileStream存取檔案是基本功,但是沒有了解底層細節,<br>在多執行緒同時存取與編輯檔案時,將會引爆咬檔地雷。</p>\n<h2 id=\"加碼-HttpContent-與-Stream\"><a href=\"#加碼-HttpContent-與-Stream\" class=\"headerlink\" title=\"加碼 HttpContent 與 Stream\"></a>加碼 HttpContent 與 Stream</h2><h2 id=\"測試工具-LinqPad\"><a href=\"#測試工具-LinqPad\" class=\"headerlink\" title=\"測試工具 LinqPad\"></a>測試工具 <code>LinqPad</code></h2><h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"http://stackoverflow.com/questions/25097773/system-io-filestream-fileaccess-vs-fileshare\">http://stackoverflow.com/questions/25097773/system-io-filestream-fileaccess-vs-fileshare</a></li>\n<li><a href=\"https://referencesource.microsoft.com/#q=FileStream\">https://referencesource.microsoft.com/#q=FileStream</a></li>\n</ul>\n"},{"title":"實戰 .Net 大量請求與多執行緒(一) 錯誤與原因","date":"2016-11-04T03:49:17.000Z","_content":"## 前情提要\n1. 實務上的專案遭受 DDos 攻擊  \n2. DB TimeOut  \n3. Redis TimeOut  \n4. 主程式沒有死,但是Elmah出現大量Exception  \n\n## 錯誤資訊\n![瞬發的流量](/images/workerthread_and_iothread/110416_102437_AM.jpg)\n\n### Redis的錯誤記錄\n錯誤1.\n```\n    Timeout performing SETEX Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8, \n    inst: 1, mgr: ExecuteSelect, err: never, queue: 2, qu: 2, qs: 0, qc: 0, wr: 0, wq: 0, in: 0, ar: 0, \n    IOCP: (Busy=0,Free=1000,Min=4,Max=1000), WORKER: (Busy=165,Free=32602,Min=4,Max=32767), \n    clientName: TYO-HOST\n```\n錯誤2.\n```\n    StackExchange.Redis.RedisConnectionException\n    SocketFailure on GET\n```\n錯誤3.\n```\n    No connection is available to service this operation: \n    GET Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8\n```\n錯誤4.\n```\n    UnableToResolvePhysicalConnection on GET\n```\n\n### SQL Server 錯誤記錄\n\n```\n    A transport-level error has occurred when receiving results from the server. \n    (provider: Session Provider, error: 19 - Physical connection is not usable)\n```\n\n\n\n## 錯誤原因\n1. CLR 建立執行緒需要時間 , 一秒鐘最多只能建立兩條 Thread [註一](#comment1)\n2. 瞬間的 Request 量超過 ThreadPool 中的 Thread 數量 \n3. ThreadPool 建立 Thread 中 , 仍持續有 Request 進來引發錯誤 \n4. 因為我的[測試環境](#testEnvironment)有四核心,依文件所說\n\n## 實驗流程\n1. 建立監視器\n    參考 [How To: Monitor the ASP.NET Thread Pool Using Custom Counters](https://msdn.microsoft.com/zh-tw/library/ff650682.aspx)\n\n    1. 建立一個 console 專案, [MyAspNetThreadCounters](#MyAspNetThreadCounters)\n    2. 編譯並執行 console 專案\n    3. 開啟`Regedit.exe` 檢查 `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services` 應包含以下值\n\n        ```\n            Available Worker Threads\n            Available IO Threads\n            Max Worker Threads\n            Max IO Threads\n            Min Worker Threads\n            Min IO Threads\n        ```\n\n2. 建立ASP.NET專案\n    1. 建立[Global.asax](#global)\n    2. 建立[StartWebApp.aspx](#startWebApp)\n    3. 建立[Sleep.aspx](#sleep)\n3. 開啟 `perfmon.exe` 新增計數器 , 選取我們自定義的 `MyAspNetThreadCounters`\n4. 連結網頁 `localhost\\StartWebApp.aspx` 以啟動網站,可以得到以下數據\n    ```\n    MaxWorkerThreads:32767.\n    MaxIOThreads:1000.\n    MinWorkerThreads:4.\n    MinIOThreads:4.\n    AvailableWorker:32766.\n    AvailableIO:1000.\n    ```\n5. 執行大量 redis 連線,觀察結果 AvailableWorker Threads 會往下掉,  \n故推斷 redis connection 是透過 Worker Threads 建立.\n\n6. 重現錯誤, 執行大量的 sleep 頁面,透過這種方式搶佔IIS的執行緒.\n![](/images/workerthread_and_iothread/110416_170101_PM.jpg)\n\n7. 再執行大量 redis 連線, 用以重現錯誤\n![](/images/workerthread_and_iothread/110416_170001_PM.jpg)\n\n## 程式碼 \n\n### <span id=\"MyAspNetThreadCounters\">MyAspNetThreadCounters</span>\n```csharp\n  using System;\n  using System.Diagnostics;\n\n  class MyAspNetThreadCounters\n  {\n      [STAThread]\n      static void Main(string[] args)\n      {\n          CreateCounters();\n          Console.WriteLine(\"MyAspNetThreadCounters performance counter category \" +\n                            \"is created. [Press Enter]\");\n          Console.ReadLine();\n      }\n\n      public static void CreateCounters()\n      {\n          CounterCreationDataCollection col =\n            new CounterCreationDataCollection();\n\n          // Create custom counter objects\n          CounterCreationData counter1 = new CounterCreationData();\n          counter1.CounterName = \"Available Worker Threads\";\n          counter1.CounterHelp = \"The difference between the maximum number \" +\n                                \"of thread pool worker threads and the \" +\n                                \"number currently active.\";\n          counter1.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter2 = new CounterCreationData();\n          counter2.CounterName = \"Available IO Threads\";\n          counter2.CounterHelp = \"The difference between the maximum number of \" +\n                                \"thread pool IO threads and the number \" +\n                                \"currently active.\";\n          counter2.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter3 = new CounterCreationData();\n          counter3.CounterName = \"Max Worker Threads\";\n          counter3.CounterHelp = \"The number of requests to the thread pool \" +\n                                \"that can be active concurrently. All \" +\n                                \"requests above that number remain queued until \" +\n                                \"thread pool worker threads become available.\";\n          counter3.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter4 = new CounterCreationData();\n          counter4.CounterName = \"Max IO Threads\";\n          counter4.CounterHelp = \"The number of requests to the thread pool \" +\n                                \"that can be active concurrently. All \" +\n                                \"requests above that number remain queued until \" +\n                                \"thread pool IO threads become available.\";\n          counter4.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter5 = new CounterCreationData();\n          counter5.CounterName = \"Min Worker Threads\";\n          counter5.CounterHelp = \"The number of requests to the thread pool \" +\n                                \"that can be active concurrently. All \" +\n                                \"requests above that number remain queued until \" +\n                                \"thread pool worker threads become available.\";\n          counter5.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter6 = new CounterCreationData();\n          counter6.CounterName = \"Min IO Threads\";\n          counter6.CounterHelp = \"The number of requests to the thread pool \" +\n                                \"that can be active concurrently. All \" +\n                                \"requests above that number remain queued until \" +\n                                \"thread pool IO threads become available.\";\n          counter6.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          // Add custom counter objects to CounterCreationDataCollection.\n          col.Add(counter1);\n          col.Add(counter2);\n          col.Add(counter3);\n          col.Add(counter4);\n          col.Add(counter5);\n          col.Add(counter6);\n\n          // delete the category if it already exists\n          if (PerformanceCounterCategory.Exists(\"MyAspNetThreadCounters\"))\n          {\n              PerformanceCounterCategory.Delete(\"MyAspNetThreadCounters\");\n          }\n          // bind the counters to the PerformanceCounterCategory\n          PerformanceCounterCategory category =\n                  PerformanceCounterCategory.Create(\"MyAspNetThreadCounters\",\"\", col);\n      }\n  }\n```\n\n### <span id=\"global\">Global.asax</span>\n```csharp\n  public class Global : System.Web\n  {\n      //BusyThreads =  TP.GetMaxThreads() –TP.GetAVailable();\n      //If BusyThreads >= TP.GetMinThreads(), then threadpool growth throttling is possible.\n\n      int maxIoThreads, maxWorkerThreads;\n      ThreadPool.GetMaxThreads(out maxWorkerThreads, out maxIoThreads);\n\n      int freeIoThreads, freeWorkerThreads;\n      ThreadPool.GetAvailableThreads(out freeWorkerThreads, out freeIoThreads);\n\n      int minIoThreads, minWorkerThreads;\n      ThreadPool.GetMinThreads(out minWorkerThreads, out minIoThreads);\n\n      int busyIoThreads = maxIoThreads - freeIoThreads;\n      int busyWorkerThreads = maxWorkerThreads - freeWorkerThreads;\n\n      iocp = $\"(Busy={busyIoThreads},Free={freeIoThreads},Min={minIoThreads},Max={maxIoThreads})\";\n      worker = $\"(Busy={busyWorkerThreads},Free={freeWorkerThreads},Min={minWorkerThreads},Max={maxWorkerThreads})\";\n      return busyWorkerThreads;\n  }\n```\n```csharp\n  using System;\n\n  public class Global : System.Web.HttpApplication\n  {\n      public bool MonitorThreadPoolEnabled = true;\n      protected void Application_Start(object sender, EventArgs e)\n      {\n          Thread t = new Thread(new ThreadStart(RefreshCounters));\n          t.Start();\n      }\n  \n      protected void Session_Start(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Application_BeginRequest(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Application_AuthenticateRequest(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Application_Error(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Session_End(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Application_End(object sender, EventArgs e)\n      {\n          MonitorThreadPoolEnabled = false;\n      }\n  \n      public void RefreshCounters()\n      {\n          while (MonitorThreadPoolEnabled)\n          {\n              ASPNETThreadInfo t = GetThreadInfo();\n              ShowPerfCounters(t);\n              System.Threading.Thread.Sleep(500);\n          }\n      }\n  \n      public struct ASPNETThreadInfo\n      {\n          public int MaxWorkerThreads;\n          public int MaxIOThreads;\n          public int MinFreeThreads;\n          public int MinLocalRequestFreeThreads;\n          public int AvailableWorkerThreads;\n          public int AvailableIOThreads;\n  \n          public bool Equals(ASPNETThreadInfo other)\n          {\n              return (\n              MaxWorkerThreads == other.MaxWorkerThreads &&\n              MaxIOThreads == other.MaxIOThreads &&\n              MinFreeThreads == other.MinFreeThreads &&\n              MinLocalRequestFreeThreads == other.MinLocalRequestFreeThreads &&\n              AvailableWorkerThreads == other.AvailableWorkerThreads &&\n              AvailableIOThreads == other.AvailableIOThreads\n              );\n          }\n      }\n  \n      public ASPNETThreadInfo GetThreadInfo()\n      {\n          // use ThreadPool to get the current status\n          int availableWorker, availableIO;\n          int maxWorker, maxIO;\n                      \n          ThreadPool.GetAvailableThreads(out availableWorker, out availableIO);\n          ThreadPool.GetMaxThreads(out maxWorker, out maxIO);            \n          ASPNETThreadInfo threadInfo;\n          threadInfo.AvailableWorkerThreads = (Int16)availableWorker;\n          threadInfo.AvailableIOThreads = (Int16)availableIO;\n          threadInfo.MaxWorkerThreads = (Int16)maxWorker;\n          threadInfo.MaxIOThreads = (Int16)maxIO;            \n          // hard code for now; could get this from  machine.config\n          threadInfo.MinFreeThreads = 8;\n          threadInfo.MinLocalRequestFreeThreads = 4;\n          return threadInfo;\n      }\n  \n      public void ShowPerfCounters(ASPNETThreadInfo t)\n      {\n  \n          // get an instance of our Available Worker Threads counter\n          PerformanceCounter counter1 = new PerformanceCounter();\n          counter1.CategoryName = \"MyAspNetThreadCounters\";\n          counter1.CounterName = \"Available Worker Threads\";\n          counter1.ReadOnly = false;\n  \n          // set the value of the counter\n          counter1.RawValue = t.AvailableWorkerThreads;\n          counter1.Close();\n  \n          // repeat for other counters\n  \n          PerformanceCounter counter2 = new PerformanceCounter();\n          counter2.CategoryName = \"MyAspNetThreadCounters\";\n          counter2.CounterName = \"Available IO Threads\";\n          counter2.ReadOnly = false;\n          counter2.RawValue = t.AvailableIOThreads;\n          counter2.Close();\n  \n          PerformanceCounter counter3 = new PerformanceCounter();\n          counter3.CategoryName = \"MyAspNetThreadCounters\";\n          counter3.CounterName = \"Max Worker Threads\";\n          counter3.ReadOnly = false;\n          counter3.RawValue = t.MaxWorkerThreads;\n          counter3.Close();\n  \n          PerformanceCounter counter4 = new PerformanceCounter();\n          counter4.CategoryName = \"MyAspNetThreadCounters\";\n          counter4.CounterName = \"Max IO Threads\";\n          counter4.ReadOnly = false;\n          counter4.RawValue = t.MaxIOThreads;\n          counter4.Close();\n  \n          int minWorker, minIO;\n          ThreadPool.GetMinThreads(out minWorker, out minIO);\n  \n          PerformanceCounter counter5 = new PerformanceCounter();\n          counter5.CategoryName = \"MyAspNetThreadCounters\";\n          counter5.CounterName = \"Min Worker Threads\";\n          counter5.ReadOnly = false;\n          counter5.RawValue = minWorker;\n          counter5.Close();\n  \n          PerformanceCounter counter6 = new PerformanceCounter();\n          counter6.CategoryName = \"MyAspNetThreadCounters\";\n          counter6.CounterName = \"Min IO Threads\";\n          counter6.ReadOnly = false;\n          counter6.RawValue = minIO;\n          counter6.Close();\n      }\n  }\n```\n\n### <span id=\"startWebApp\">StartWebApp.aspx</span>\n```csharp\n  protected void Page_Load(object sender, EventArgs e)\n  {\n      int availableWorker, availableIO;\n      int maxWorker, maxIO;\n      int minWorker, minIO;\n    \n      ThreadPool.GetAvailableThreads(out availableWorker, out availableIO);\n      ThreadPool.GetMaxThreads(out maxWorker, out maxIO);\n      ThreadPool.GetMinThreads(out minWorker, out minIO);\n\n      Response.Write(\"This ASP.NET application has started.<br>\");\n      Response.Write(string.Format(\"MaxWorkerThreads:{0}.<br>\", maxWorker));\n      Response.Write(string.Format(\"MaxIOThreads:{0}.<br>\", maxIO));\n      Response.Write(string.Format(\"MinWorkerThreads:{0}.<br>\", minWorker));\n      Response.Write(string.Format(\"MinIOThreads:{0}.<br>\", minIO));\n      Response.Write(string.Format(\"AvailableWorker:{0}.<br>\", availableWorker));\n      Response.Write(string.Format(\"AvailableIO:{0}.<br>\", availableIO));\n      Response.Write(\"You can now close this page.\");\n  }\n```\n\n###  <span id=\"sleep\">Sleep.aspx</span>\n```csharp\n  void Page_Load(Object sender, EventArgs e)\n  {\n        int times = 0 ;\n        var max = int.Parse(Request.QueryString.Get(\"max\"));\n        var server = ConnectionMultiplexer.Connect(\"redisserver:6379,ssl=false,password=,allowAdmin=false,connectTimeout=200\");\n        var list = Enumerable.Range(1, max).ToList();\n        Parallel.ForEach(list, (i) =>\n        {\n\n            var database = server.GetDatabase();\n            database.StringGet(\"Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8\");\n            times++;\n        });\n\n        int availableWorker, availableIO;\n        int maxWorker, maxIO;\n        ThreadPool.SetMaxThreads(1, 1);\n        ThreadPool.GetAvailableThreads(out availableWorker, out availableIO);\n        ThreadPool.GetMaxThreads(out maxWorker, out maxIO);\n        Response.Write(String.Format(\"Connect Redis Busy:{0}<br /> {1}\",maxWorker - availableWorker, times));\n  }\n```\n\n### StackExchange.Redis 源碼\n```csharp\n  private static int GetThreadPoolStats(out string iocp, out string worker)\n  {\n      //BusyThreads =  TP.GetMaxThreads() –TP.GetAVailable();\n      //If BusyThreads >= TP.GetMinThreads(), then threadpool growth throttling is possible.\n\n      int maxIoThreads, maxWorkerThreads;\n      ThreadPool.GetMaxThreads(out maxWorkerThreads, out maxIoThreads);\n\n      int freeIoThreads, freeWorkerThreads;\n      ThreadPool.GetAvailableThreads(out freeWorkerThreads, out freeIoThreads);\n\n      int minIoThreads, minWorkerThreads;\n      ThreadPool.GetMinThreads(out minWorkerThreads, out minIoThreads);\n\n      int busyIoThreads = maxIoThreads - freeIoThreads;\n      int busyWorkerThreads = maxWorkerThreads - freeWorkerThreads;\n\n      iocp = $\"(Busy={busyIoThreads},Free={freeIoThreads},Min={minIoThreads},Max={maxIoThreads})\";\n      worker = $\"(Busy={busyWorkerThreads},Free={freeWorkerThreads},Min={minWorkerThreads},Max={maxWorkerThreads})\";\n      return busyWorkerThreads;\n  }\n```\n\n\n## <span id=\"testEnvironment\">環境與工具</span> \n- Visual Studio 2015 Professional UPDATE 3\n- Windows 10 \n- .NET Framework 4.5\n- StackExchange.Redis 1.0.481\n- CPU `Intel® Core™ i7-5500U` 四核心\n\n## 官方說明\n- [爭用、 效能不佳、 和死結 （deadlock） 當您從 ASP.NET 應用程式呼叫 Web 服務](https://support.microsoft.com/zh-tw/kb/821268)\n- machine.config\n\n```xml\n<system.web>\n    <processModel autoConfig=\"false\" maxWorkerThreads=\"xxx\" maxIoThreads=\"xxx\" minWorkerThreads=\"xxx\" minIoThreads=\"xxx\" requestQueueLimit=\"5000\" responseDeadlockInterval=\"00:03:00\"/>\n    <httpRuntime minFreeThreads=\"xxx\" minLocalRequestFreeThreads=\"xxx\"/>\n</system.web>\n```\n\n### 建議的設定值 \n```xml\n<system.web>\n    <processModel autoConfig=\"false\" minWorkerThreads=\"1\" />\n</system.web>    \n```\n\n.NET 官方文件的預設值與建議值\n\n|名稱|預設值|建議配置|\n|---|---|---|\n|maxWorkerThreads|20|32767 / #Cores |\n|maxIoThreads|20|32767 / #Cores|\n|minWorkerThreads|1|maxWorkerThreads/2|\n|minIoThreads|1|maxIoThreads / 2|\n|minFreeThreads| 8  |  88*#CPUs  |\n|minLocalRequestFreeThreads| 4 | 76*#CPUs  |\n|maxconnection| 2 | 12*CPUs |\n|executionTimeout| 90s  | 未建議 |\n\n* maxWorkerThreads,minWorkerThreads,maxIoThreads,minIoThreads 設定的數值需要乘上CPU的數量,  \n例: 4 核心設定 minWorkerThreads 值 20 ,實際上的值為 80   \n\n## <span id=\"comment1\">註釋<span>\n1. ThreadPool 中會有一個 queue , 其中隱含一個半秒機制 , 當 queue 靜止超過半秒 , 就會在 ThreadPool 建立一個新的 Thread  \n\n## 記錄\n- ADO.NET 需要使用 Worker Thread\n- Redis 需要使用 Worker Thread\n- \n\n\n## 參考\n- [Threading](https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx)\n- [Improving ASP.NET Performance](https://msdn.microsoft.com/en-us/library/ms998549.aspx)\n- [Programming the Thread Pool in the .NET Framework](https://msdn.microsoft.com/en-us/library/ms973903.aspx)\n- [StackExchange.Redis 源碼](https://github.com/StackExchange/StackExchange.Redis)\n- [雲計算之路-阿里雲上：從ASP.NET線程角度對「黑色30秒」問題的全新分析](https://read01.com/MenEP.html)\n- [How To: Monitor the ASP.NET Thread Pool Using Custom Counters](https://msdn.microsoft.com/zh-tw/library/ff650682.aspx)\n- http://www.thejoyofcode.com/tuning_the_threadpool.aspx\n- https://gist.github.com/JonCole/e65411214030f0d823cb\n- https://blogs.msdn.microsoft.com/carloc/2009/02/19/minworkerthreads-and-autoconfig/\n","source":"_drafts/workerthread_and_iothread_1.md","raw":"---\ntitle: 實戰 .Net 大量請求與多執行緒(一) 錯誤與原因\ndate: 2016/11/04 11:49:17\ntag:\n  - .Net Framework\n  - IO\n  - Thread\n  - ASP.Net\n---\n## 前情提要\n1. 實務上的專案遭受 DDos 攻擊  \n2. DB TimeOut  \n3. Redis TimeOut  \n4. 主程式沒有死,但是Elmah出現大量Exception  \n\n## 錯誤資訊\n![瞬發的流量](/images/workerthread_and_iothread/110416_102437_AM.jpg)\n\n### Redis的錯誤記錄\n錯誤1.\n```\n    Timeout performing SETEX Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8, \n    inst: 1, mgr: ExecuteSelect, err: never, queue: 2, qu: 2, qs: 0, qc: 0, wr: 0, wq: 0, in: 0, ar: 0, \n    IOCP: (Busy=0,Free=1000,Min=4,Max=1000), WORKER: (Busy=165,Free=32602,Min=4,Max=32767), \n    clientName: TYO-HOST\n```\n錯誤2.\n```\n    StackExchange.Redis.RedisConnectionException\n    SocketFailure on GET\n```\n錯誤3.\n```\n    No connection is available to service this operation: \n    GET Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8\n```\n錯誤4.\n```\n    UnableToResolvePhysicalConnection on GET\n```\n\n### SQL Server 錯誤記錄\n\n```\n    A transport-level error has occurred when receiving results from the server. \n    (provider: Session Provider, error: 19 - Physical connection is not usable)\n```\n\n\n\n## 錯誤原因\n1. CLR 建立執行緒需要時間 , 一秒鐘最多只能建立兩條 Thread [註一](#comment1)\n2. 瞬間的 Request 量超過 ThreadPool 中的 Thread 數量 \n3. ThreadPool 建立 Thread 中 , 仍持續有 Request 進來引發錯誤 \n4. 因為我的[測試環境](#testEnvironment)有四核心,依文件所說\n\n## 實驗流程\n1. 建立監視器\n    參考 [How To: Monitor the ASP.NET Thread Pool Using Custom Counters](https://msdn.microsoft.com/zh-tw/library/ff650682.aspx)\n\n    1. 建立一個 console 專案, [MyAspNetThreadCounters](#MyAspNetThreadCounters)\n    2. 編譯並執行 console 專案\n    3. 開啟`Regedit.exe` 檢查 `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services` 應包含以下值\n\n        ```\n            Available Worker Threads\n            Available IO Threads\n            Max Worker Threads\n            Max IO Threads\n            Min Worker Threads\n            Min IO Threads\n        ```\n\n2. 建立ASP.NET專案\n    1. 建立[Global.asax](#global)\n    2. 建立[StartWebApp.aspx](#startWebApp)\n    3. 建立[Sleep.aspx](#sleep)\n3. 開啟 `perfmon.exe` 新增計數器 , 選取我們自定義的 `MyAspNetThreadCounters`\n4. 連結網頁 `localhost\\StartWebApp.aspx` 以啟動網站,可以得到以下數據\n    ```\n    MaxWorkerThreads:32767.\n    MaxIOThreads:1000.\n    MinWorkerThreads:4.\n    MinIOThreads:4.\n    AvailableWorker:32766.\n    AvailableIO:1000.\n    ```\n5. 執行大量 redis 連線,觀察結果 AvailableWorker Threads 會往下掉,  \n故推斷 redis connection 是透過 Worker Threads 建立.\n\n6. 重現錯誤, 執行大量的 sleep 頁面,透過這種方式搶佔IIS的執行緒.\n![](/images/workerthread_and_iothread/110416_170101_PM.jpg)\n\n7. 再執行大量 redis 連線, 用以重現錯誤\n![](/images/workerthread_and_iothread/110416_170001_PM.jpg)\n\n## 程式碼 \n\n### <span id=\"MyAspNetThreadCounters\">MyAspNetThreadCounters</span>\n```csharp\n  using System;\n  using System.Diagnostics;\n\n  class MyAspNetThreadCounters\n  {\n      [STAThread]\n      static void Main(string[] args)\n      {\n          CreateCounters();\n          Console.WriteLine(\"MyAspNetThreadCounters performance counter category \" +\n                            \"is created. [Press Enter]\");\n          Console.ReadLine();\n      }\n\n      public static void CreateCounters()\n      {\n          CounterCreationDataCollection col =\n            new CounterCreationDataCollection();\n\n          // Create custom counter objects\n          CounterCreationData counter1 = new CounterCreationData();\n          counter1.CounterName = \"Available Worker Threads\";\n          counter1.CounterHelp = \"The difference between the maximum number \" +\n                                \"of thread pool worker threads and the \" +\n                                \"number currently active.\";\n          counter1.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter2 = new CounterCreationData();\n          counter2.CounterName = \"Available IO Threads\";\n          counter2.CounterHelp = \"The difference between the maximum number of \" +\n                                \"thread pool IO threads and the number \" +\n                                \"currently active.\";\n          counter2.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter3 = new CounterCreationData();\n          counter3.CounterName = \"Max Worker Threads\";\n          counter3.CounterHelp = \"The number of requests to the thread pool \" +\n                                \"that can be active concurrently. All \" +\n                                \"requests above that number remain queued until \" +\n                                \"thread pool worker threads become available.\";\n          counter3.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter4 = new CounterCreationData();\n          counter4.CounterName = \"Max IO Threads\";\n          counter4.CounterHelp = \"The number of requests to the thread pool \" +\n                                \"that can be active concurrently. All \" +\n                                \"requests above that number remain queued until \" +\n                                \"thread pool IO threads become available.\";\n          counter4.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter5 = new CounterCreationData();\n          counter5.CounterName = \"Min Worker Threads\";\n          counter5.CounterHelp = \"The number of requests to the thread pool \" +\n                                \"that can be active concurrently. All \" +\n                                \"requests above that number remain queued until \" +\n                                \"thread pool worker threads become available.\";\n          counter5.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter6 = new CounterCreationData();\n          counter6.CounterName = \"Min IO Threads\";\n          counter6.CounterHelp = \"The number of requests to the thread pool \" +\n                                \"that can be active concurrently. All \" +\n                                \"requests above that number remain queued until \" +\n                                \"thread pool IO threads become available.\";\n          counter6.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          // Add custom counter objects to CounterCreationDataCollection.\n          col.Add(counter1);\n          col.Add(counter2);\n          col.Add(counter3);\n          col.Add(counter4);\n          col.Add(counter5);\n          col.Add(counter6);\n\n          // delete the category if it already exists\n          if (PerformanceCounterCategory.Exists(\"MyAspNetThreadCounters\"))\n          {\n              PerformanceCounterCategory.Delete(\"MyAspNetThreadCounters\");\n          }\n          // bind the counters to the PerformanceCounterCategory\n          PerformanceCounterCategory category =\n                  PerformanceCounterCategory.Create(\"MyAspNetThreadCounters\",\"\", col);\n      }\n  }\n```\n\n### <span id=\"global\">Global.asax</span>\n```csharp\n  public class Global : System.Web\n  {\n      //BusyThreads =  TP.GetMaxThreads() –TP.GetAVailable();\n      //If BusyThreads >= TP.GetMinThreads(), then threadpool growth throttling is possible.\n\n      int maxIoThreads, maxWorkerThreads;\n      ThreadPool.GetMaxThreads(out maxWorkerThreads, out maxIoThreads);\n\n      int freeIoThreads, freeWorkerThreads;\n      ThreadPool.GetAvailableThreads(out freeWorkerThreads, out freeIoThreads);\n\n      int minIoThreads, minWorkerThreads;\n      ThreadPool.GetMinThreads(out minWorkerThreads, out minIoThreads);\n\n      int busyIoThreads = maxIoThreads - freeIoThreads;\n      int busyWorkerThreads = maxWorkerThreads - freeWorkerThreads;\n\n      iocp = $\"(Busy={busyIoThreads},Free={freeIoThreads},Min={minIoThreads},Max={maxIoThreads})\";\n      worker = $\"(Busy={busyWorkerThreads},Free={freeWorkerThreads},Min={minWorkerThreads},Max={maxWorkerThreads})\";\n      return busyWorkerThreads;\n  }\n```\n```csharp\n  using System;\n\n  public class Global : System.Web.HttpApplication\n  {\n      public bool MonitorThreadPoolEnabled = true;\n      protected void Application_Start(object sender, EventArgs e)\n      {\n          Thread t = new Thread(new ThreadStart(RefreshCounters));\n          t.Start();\n      }\n  \n      protected void Session_Start(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Application_BeginRequest(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Application_AuthenticateRequest(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Application_Error(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Session_End(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Application_End(object sender, EventArgs e)\n      {\n          MonitorThreadPoolEnabled = false;\n      }\n  \n      public void RefreshCounters()\n      {\n          while (MonitorThreadPoolEnabled)\n          {\n              ASPNETThreadInfo t = GetThreadInfo();\n              ShowPerfCounters(t);\n              System.Threading.Thread.Sleep(500);\n          }\n      }\n  \n      public struct ASPNETThreadInfo\n      {\n          public int MaxWorkerThreads;\n          public int MaxIOThreads;\n          public int MinFreeThreads;\n          public int MinLocalRequestFreeThreads;\n          public int AvailableWorkerThreads;\n          public int AvailableIOThreads;\n  \n          public bool Equals(ASPNETThreadInfo other)\n          {\n              return (\n              MaxWorkerThreads == other.MaxWorkerThreads &&\n              MaxIOThreads == other.MaxIOThreads &&\n              MinFreeThreads == other.MinFreeThreads &&\n              MinLocalRequestFreeThreads == other.MinLocalRequestFreeThreads &&\n              AvailableWorkerThreads == other.AvailableWorkerThreads &&\n              AvailableIOThreads == other.AvailableIOThreads\n              );\n          }\n      }\n  \n      public ASPNETThreadInfo GetThreadInfo()\n      {\n          // use ThreadPool to get the current status\n          int availableWorker, availableIO;\n          int maxWorker, maxIO;\n                      \n          ThreadPool.GetAvailableThreads(out availableWorker, out availableIO);\n          ThreadPool.GetMaxThreads(out maxWorker, out maxIO);            \n          ASPNETThreadInfo threadInfo;\n          threadInfo.AvailableWorkerThreads = (Int16)availableWorker;\n          threadInfo.AvailableIOThreads = (Int16)availableIO;\n          threadInfo.MaxWorkerThreads = (Int16)maxWorker;\n          threadInfo.MaxIOThreads = (Int16)maxIO;            \n          // hard code for now; could get this from  machine.config\n          threadInfo.MinFreeThreads = 8;\n          threadInfo.MinLocalRequestFreeThreads = 4;\n          return threadInfo;\n      }\n  \n      public void ShowPerfCounters(ASPNETThreadInfo t)\n      {\n  \n          // get an instance of our Available Worker Threads counter\n          PerformanceCounter counter1 = new PerformanceCounter();\n          counter1.CategoryName = \"MyAspNetThreadCounters\";\n          counter1.CounterName = \"Available Worker Threads\";\n          counter1.ReadOnly = false;\n  \n          // set the value of the counter\n          counter1.RawValue = t.AvailableWorkerThreads;\n          counter1.Close();\n  \n          // repeat for other counters\n  \n          PerformanceCounter counter2 = new PerformanceCounter();\n          counter2.CategoryName = \"MyAspNetThreadCounters\";\n          counter2.CounterName = \"Available IO Threads\";\n          counter2.ReadOnly = false;\n          counter2.RawValue = t.AvailableIOThreads;\n          counter2.Close();\n  \n          PerformanceCounter counter3 = new PerformanceCounter();\n          counter3.CategoryName = \"MyAspNetThreadCounters\";\n          counter3.CounterName = \"Max Worker Threads\";\n          counter3.ReadOnly = false;\n          counter3.RawValue = t.MaxWorkerThreads;\n          counter3.Close();\n  \n          PerformanceCounter counter4 = new PerformanceCounter();\n          counter4.CategoryName = \"MyAspNetThreadCounters\";\n          counter4.CounterName = \"Max IO Threads\";\n          counter4.ReadOnly = false;\n          counter4.RawValue = t.MaxIOThreads;\n          counter4.Close();\n  \n          int minWorker, minIO;\n          ThreadPool.GetMinThreads(out minWorker, out minIO);\n  \n          PerformanceCounter counter5 = new PerformanceCounter();\n          counter5.CategoryName = \"MyAspNetThreadCounters\";\n          counter5.CounterName = \"Min Worker Threads\";\n          counter5.ReadOnly = false;\n          counter5.RawValue = minWorker;\n          counter5.Close();\n  \n          PerformanceCounter counter6 = new PerformanceCounter();\n          counter6.CategoryName = \"MyAspNetThreadCounters\";\n          counter6.CounterName = \"Min IO Threads\";\n          counter6.ReadOnly = false;\n          counter6.RawValue = minIO;\n          counter6.Close();\n      }\n  }\n```\n\n### <span id=\"startWebApp\">StartWebApp.aspx</span>\n```csharp\n  protected void Page_Load(object sender, EventArgs e)\n  {\n      int availableWorker, availableIO;\n      int maxWorker, maxIO;\n      int minWorker, minIO;\n    \n      ThreadPool.GetAvailableThreads(out availableWorker, out availableIO);\n      ThreadPool.GetMaxThreads(out maxWorker, out maxIO);\n      ThreadPool.GetMinThreads(out minWorker, out minIO);\n\n      Response.Write(\"This ASP.NET application has started.<br>\");\n      Response.Write(string.Format(\"MaxWorkerThreads:{0}.<br>\", maxWorker));\n      Response.Write(string.Format(\"MaxIOThreads:{0}.<br>\", maxIO));\n      Response.Write(string.Format(\"MinWorkerThreads:{0}.<br>\", minWorker));\n      Response.Write(string.Format(\"MinIOThreads:{0}.<br>\", minIO));\n      Response.Write(string.Format(\"AvailableWorker:{0}.<br>\", availableWorker));\n      Response.Write(string.Format(\"AvailableIO:{0}.<br>\", availableIO));\n      Response.Write(\"You can now close this page.\");\n  }\n```\n\n###  <span id=\"sleep\">Sleep.aspx</span>\n```csharp\n  void Page_Load(Object sender, EventArgs e)\n  {\n        int times = 0 ;\n        var max = int.Parse(Request.QueryString.Get(\"max\"));\n        var server = ConnectionMultiplexer.Connect(\"redisserver:6379,ssl=false,password=,allowAdmin=false,connectTimeout=200\");\n        var list = Enumerable.Range(1, max).ToList();\n        Parallel.ForEach(list, (i) =>\n        {\n\n            var database = server.GetDatabase();\n            database.StringGet(\"Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8\");\n            times++;\n        });\n\n        int availableWorker, availableIO;\n        int maxWorker, maxIO;\n        ThreadPool.SetMaxThreads(1, 1);\n        ThreadPool.GetAvailableThreads(out availableWorker, out availableIO);\n        ThreadPool.GetMaxThreads(out maxWorker, out maxIO);\n        Response.Write(String.Format(\"Connect Redis Busy:{0}<br /> {1}\",maxWorker - availableWorker, times));\n  }\n```\n\n### StackExchange.Redis 源碼\n```csharp\n  private static int GetThreadPoolStats(out string iocp, out string worker)\n  {\n      //BusyThreads =  TP.GetMaxThreads() –TP.GetAVailable();\n      //If BusyThreads >= TP.GetMinThreads(), then threadpool growth throttling is possible.\n\n      int maxIoThreads, maxWorkerThreads;\n      ThreadPool.GetMaxThreads(out maxWorkerThreads, out maxIoThreads);\n\n      int freeIoThreads, freeWorkerThreads;\n      ThreadPool.GetAvailableThreads(out freeWorkerThreads, out freeIoThreads);\n\n      int minIoThreads, minWorkerThreads;\n      ThreadPool.GetMinThreads(out minWorkerThreads, out minIoThreads);\n\n      int busyIoThreads = maxIoThreads - freeIoThreads;\n      int busyWorkerThreads = maxWorkerThreads - freeWorkerThreads;\n\n      iocp = $\"(Busy={busyIoThreads},Free={freeIoThreads},Min={minIoThreads},Max={maxIoThreads})\";\n      worker = $\"(Busy={busyWorkerThreads},Free={freeWorkerThreads},Min={minWorkerThreads},Max={maxWorkerThreads})\";\n      return busyWorkerThreads;\n  }\n```\n\n\n## <span id=\"testEnvironment\">環境與工具</span> \n- Visual Studio 2015 Professional UPDATE 3\n- Windows 10 \n- .NET Framework 4.5\n- StackExchange.Redis 1.0.481\n- CPU `Intel® Core™ i7-5500U` 四核心\n\n## 官方說明\n- [爭用、 效能不佳、 和死結 （deadlock） 當您從 ASP.NET 應用程式呼叫 Web 服務](https://support.microsoft.com/zh-tw/kb/821268)\n- machine.config\n\n```xml\n<system.web>\n    <processModel autoConfig=\"false\" maxWorkerThreads=\"xxx\" maxIoThreads=\"xxx\" minWorkerThreads=\"xxx\" minIoThreads=\"xxx\" requestQueueLimit=\"5000\" responseDeadlockInterval=\"00:03:00\"/>\n    <httpRuntime minFreeThreads=\"xxx\" minLocalRequestFreeThreads=\"xxx\"/>\n</system.web>\n```\n\n### 建議的設定值 \n```xml\n<system.web>\n    <processModel autoConfig=\"false\" minWorkerThreads=\"1\" />\n</system.web>    \n```\n\n.NET 官方文件的預設值與建議值\n\n|名稱|預設值|建議配置|\n|---|---|---|\n|maxWorkerThreads|20|32767 / #Cores |\n|maxIoThreads|20|32767 / #Cores|\n|minWorkerThreads|1|maxWorkerThreads/2|\n|minIoThreads|1|maxIoThreads / 2|\n|minFreeThreads| 8  |  88*#CPUs  |\n|minLocalRequestFreeThreads| 4 | 76*#CPUs  |\n|maxconnection| 2 | 12*CPUs |\n|executionTimeout| 90s  | 未建議 |\n\n* maxWorkerThreads,minWorkerThreads,maxIoThreads,minIoThreads 設定的數值需要乘上CPU的數量,  \n例: 4 核心設定 minWorkerThreads 值 20 ,實際上的值為 80   \n\n## <span id=\"comment1\">註釋<span>\n1. ThreadPool 中會有一個 queue , 其中隱含一個半秒機制 , 當 queue 靜止超過半秒 , 就會在 ThreadPool 建立一個新的 Thread  \n\n## 記錄\n- ADO.NET 需要使用 Worker Thread\n- Redis 需要使用 Worker Thread\n- \n\n\n## 參考\n- [Threading](https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx)\n- [Improving ASP.NET Performance](https://msdn.microsoft.com/en-us/library/ms998549.aspx)\n- [Programming the Thread Pool in the .NET Framework](https://msdn.microsoft.com/en-us/library/ms973903.aspx)\n- [StackExchange.Redis 源碼](https://github.com/StackExchange/StackExchange.Redis)\n- [雲計算之路-阿里雲上：從ASP.NET線程角度對「黑色30秒」問題的全新分析](https://read01.com/MenEP.html)\n- [How To: Monitor the ASP.NET Thread Pool Using Custom Counters](https://msdn.microsoft.com/zh-tw/library/ff650682.aspx)\n- http://www.thejoyofcode.com/tuning_the_threadpool.aspx\n- https://gist.github.com/JonCole/e65411214030f0d823cb\n- https://blogs.msdn.microsoft.com/carloc/2009/02/19/minworkerthreads-and-autoconfig/\n","slug":"workerthread_and_iothread_1","published":0,"updated":"2016-11-16T04:14:28.960Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwawm314000738oprkkivh5e","content":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><ol>\n<li>實務上的專案遭受 DDos 攻擊  </li>\n<li>DB TimeOut  </li>\n<li>Redis TimeOut  </li>\n<li>主程式沒有死,但是Elmah出現大量Exception  </li>\n</ol>\n<h2 id=\"錯誤資訊\"><a href=\"#錯誤資訊\" class=\"headerlink\" title=\"錯誤資訊\"></a>錯誤資訊</h2><p><img src=\"/images/workerthread_and_iothread/110416_102437_AM.jpg\" alt=\"瞬發的流量\"></p>\n<h3 id=\"Redis的錯誤記錄\"><a href=\"#Redis的錯誤記錄\" class=\"headerlink\" title=\"Redis的錯誤記錄\"></a>Redis的錯誤記錄</h3><p>錯誤1.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Timeout performing SETEX Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8, </div><div class=\"line\">inst: 1, mgr: ExecuteSelect, err: never, queue: 2, qu: 2, qs: 0, qc: 0, wr: 0, wq: 0, in: 0, ar: 0, </div><div class=\"line\">IOCP: (Busy=0,Free=1000,Min=4,Max=1000), WORKER: (Busy=165,Free=32602,Min=4,Max=32767), </div><div class=\"line\">clientName: TYO-HOST</div></pre></td></tr></table></figure></p>\n<p>錯誤2.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">StackExchange.Redis.RedisConnectionException</div><div class=\"line\">SocketFailure on GET</div></pre></td></tr></table></figure></p>\n<p>錯誤3.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">No connection is available to service this operation: </div><div class=\"line\">GET Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8</div></pre></td></tr></table></figure></p>\n<p>錯誤4.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">UnableToResolvePhysicalConnection on GET</div></pre></td></tr></table></figure></p>\n<h3 id=\"SQL-Server-錯誤記錄\"><a href=\"#SQL-Server-錯誤記錄\" class=\"headerlink\" title=\"SQL Server 錯誤記錄\"></a>SQL Server 錯誤記錄</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">A transport-level error has occurred when receiving results from the server. </div><div class=\"line\">(provider: Session Provider, error: 19 - Physical connection is not usable)</div></pre></td></tr></table></figure>\n<h2 id=\"錯誤原因\"><a href=\"#錯誤原因\" class=\"headerlink\" title=\"錯誤原因\"></a>錯誤原因</h2><ol>\n<li>CLR 建立執行緒需要時間 , 一秒鐘最多只能建立兩條 Thread <a href=\"#comment1\">註一</a></li>\n<li>瞬間的 Request 量超過 ThreadPool 中的 Thread 數量 </li>\n<li>ThreadPool 建立 Thread 中 , 仍持續有 Request 進來引發錯誤 </li>\n<li>因為我的<a href=\"#testEnvironment\">測試環境</a>有四核心,依文件所說</li>\n</ol>\n<h2 id=\"實驗流程\"><a href=\"#實驗流程\" class=\"headerlink\" title=\"實驗流程\"></a>實驗流程</h2><ol>\n<li><p>建立監視器<br> 參考 <a href=\"https://msdn.microsoft.com/zh-tw/library/ff650682.aspx\" target=\"_blank\" rel=\"external\">How To: Monitor the ASP.NET Thread Pool Using Custom Counters</a></p>\n<ol>\n<li>建立一個 console 專案, <a href=\"#MyAspNetThreadCounters\">MyAspNetThreadCounters</a></li>\n<li>編譯並執行 console 專案</li>\n<li><p>開啟<code>Regedit.exe</code> 檢查 <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services</code> 應包含以下值</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Available Worker Threads</div><div class=\"line\">Available IO Threads</div><div class=\"line\">Max Worker Threads</div><div class=\"line\">Max IO Threads</div><div class=\"line\">Min Worker Threads</div><div class=\"line\">Min IO Threads</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>建立ASP.NET專案</p>\n<ol>\n<li>建立<a href=\"#global\">Global.asax</a></li>\n<li>建立<a href=\"#startWebApp\">StartWebApp.aspx</a></li>\n<li>建立<a href=\"#sleep\">Sleep.aspx</a></li>\n</ol>\n</li>\n<li>開啟 <code>perfmon.exe</code> 新增計數器 , 選取我們自定義的 <code>MyAspNetThreadCounters</code></li>\n<li><p>連結網頁 <code>localhost\\StartWebApp.aspx</code> 以啟動網站,可以得到以下數據</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">MaxWorkerThreads:32767.</div><div class=\"line\">MaxIOThreads:1000.</div><div class=\"line\">MinWorkerThreads:4.</div><div class=\"line\">MinIOThreads:4.</div><div class=\"line\">AvailableWorker:32766.</div><div class=\"line\">AvailableIO:1000.</div></pre></td></tr></table></figure>\n</li>\n<li><p>執行大量 redis 連線,觀察結果 AvailableWorker Threads 會往下掉,<br>故推斷 redis connection 是透過 Worker Threads 建立.</p>\n</li>\n<li><p>重現錯誤, 執行大量的 sleep 頁面,透過這種方式搶佔IIS的執行緒.<br><img src=\"/images/workerthread_and_iothread/110416_170101_PM.jpg\" alt=\"\"></p>\n</li>\n<li><p>再執行大量 redis 連線, 用以重現錯誤<br><img src=\"/images/workerthread_and_iothread/110416_170001_PM.jpg\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h2><h3 id=\"MyAspNetThreadCounters\"><a href=\"#MyAspNetThreadCounters\" class=\"headerlink\" title=\"MyAspNetThreadCounters\"></a><span id=\"MyAspNetThreadCounters\">MyAspNetThreadCounters</span></h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> System;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Diagnostics;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">MyAspNetThreadCounters</span></div><div class=\"line\">&#123;</div><div class=\"line\">    [STAThread]</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        CreateCounters();</div><div class=\"line\">        Console.WriteLine(<span class=\"string\">\"MyAspNetThreadCounters performance counter category \"</span> +</div><div class=\"line\">                          <span class=\"string\">\"is created. [Press Enter]\"</span>);</div><div class=\"line\">        Console.ReadLine();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateCounters</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        CounterCreationDataCollection col =</div><div class=\"line\">          <span class=\"keyword\">new</span> CounterCreationDataCollection();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Create custom counter objects</span></div><div class=\"line\">        CounterCreationData counter1 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter1.CounterName = <span class=\"string\">\"Available Worker Threads\"</span>;</div><div class=\"line\">        counter1.CounterHelp = <span class=\"string\">\"The difference between the maximum number \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"of thread pool worker threads and the \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"number currently active.\"</span>;</div><div class=\"line\">        counter1.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter2 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter2.CounterName = <span class=\"string\">\"Available IO Threads\"</span>;</div><div class=\"line\">        counter2.CounterHelp = <span class=\"string\">\"The difference between the maximum number of \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool IO threads and the number \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"currently active.\"</span>;</div><div class=\"line\">        counter2.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter3 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter3.CounterName = <span class=\"string\">\"Max Worker Threads\"</span>;</div><div class=\"line\">        counter3.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"that can be active concurrently. All \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool worker threads become available.\"</span>;</div><div class=\"line\">        counter3.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter4 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter4.CounterName = <span class=\"string\">\"Max IO Threads\"</span>;</div><div class=\"line\">        counter4.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"that can be active concurrently. All \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool IO threads become available.\"</span>;</div><div class=\"line\">        counter4.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter5 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter5.CounterName = <span class=\"string\">\"Min Worker Threads\"</span>;</div><div class=\"line\">        counter5.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"that can be active concurrently. All \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool worker threads become available.\"</span>;</div><div class=\"line\">        counter5.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter6 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter6.CounterName = <span class=\"string\">\"Min IO Threads\"</span>;</div><div class=\"line\">        counter6.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"that can be active concurrently. All \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool IO threads become available.\"</span>;</div><div class=\"line\">        counter6.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Add custom counter objects to CounterCreationDataCollection.</span></div><div class=\"line\">        col.Add(counter1);</div><div class=\"line\">        col.Add(counter2);</div><div class=\"line\">        col.Add(counter3);</div><div class=\"line\">        col.Add(counter4);</div><div class=\"line\">        col.Add(counter5);</div><div class=\"line\">        col.Add(counter6);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// delete the category if it already exists</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (PerformanceCounterCategory.Exists(<span class=\"string\">\"MyAspNetThreadCounters\"</span>))</div><div class=\"line\">        &#123;</div><div class=\"line\">            PerformanceCounterCategory.Delete(<span class=\"string\">\"MyAspNetThreadCounters\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// bind the counters to the PerformanceCounterCategory</span></div><div class=\"line\">        PerformanceCounterCategory category =</div><div class=\"line\">                PerformanceCounterCategory.Create(<span class=\"string\">\"MyAspNetThreadCounters\"</span>,<span class=\"string\">\"\"</span>, col);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Global-asax\"><a href=\"#Global-asax\" class=\"headerlink\" title=\"Global.asax\"></a><span id=\"global\">Global.asax</span></h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Global : System.Web</div><div class=\"line\">&#123;</div><div class=\"line\">    //BusyThreads =  TP.GetMaxThreads() –TP.GetAVailable();</div><div class=\"line\">    //If BusyThreads &gt;= TP.GetMinThreads(), then threadpool growth throttling is possible.</div><div class=\"line\"></div><div class=\"line\">    int maxIoThreads, maxWorkerThreads;</div><div class=\"line\">    ThreadPool.GetMaxThreads(out maxWorkerThreads, out maxIoThreads);</div><div class=\"line\"></div><div class=\"line\">    int freeIoThreads, freeWorkerThreads;</div><div class=\"line\">    ThreadPool.GetAvailableThreads(out freeWorkerThreads, out freeIoThreads);</div><div class=\"line\"></div><div class=\"line\">    int minIoThreads, minWorkerThreads;</div><div class=\"line\">    ThreadPool.GetMinThreads(out minWorkerThreads, out minIoThreads);</div><div class=\"line\"></div><div class=\"line\">    int busyIoThreads = maxIoThreads - freeIoThreads;</div><div class=\"line\">    int busyWorkerThreads = maxWorkerThreads - freeWorkerThreads;</div><div class=\"line\"></div><div class=\"line\">    iocp = $\"(Busy=&#123;busyIoThreads&#125;,Free=&#123;freeIoThreads&#125;,Min=&#123;minIoThreads&#125;,Max=&#123;maxIoThreads&#125;)\";</div><div class=\"line\">    worker = $\"(Busy=&#123;busyWorkerThreads&#125;,Free=&#123;freeWorkerThreads&#125;,Min=&#123;minWorkerThreads&#125;,Max=&#123;maxWorkerThreads&#125;)\";</div><div class=\"line\">    return busyWorkerThreads;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System;</div><div class=\"line\"></div><div class=\"line\">public class Global : System.Web.HttpApplication</div><div class=\"line\">&#123;</div><div class=\"line\">    public bool MonitorThreadPoolEnabled = true;</div><div class=\"line\">    protected void Application_Start(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\">        Thread t = new Thread(new ThreadStart(RefreshCounters));</div><div class=\"line\">        t.Start();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Session_Start(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Application_BeginRequest(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Application_AuthenticateRequest(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Application_Error(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Session_End(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Application_End(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\">        MonitorThreadPoolEnabled = false;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void RefreshCounters()</div><div class=\"line\">    &#123;</div><div class=\"line\">        while (MonitorThreadPoolEnabled)</div><div class=\"line\">        &#123;</div><div class=\"line\">            ASPNETThreadInfo t = GetThreadInfo();</div><div class=\"line\">            ShowPerfCounters(t);</div><div class=\"line\">            System.Threading.Thread.Sleep(500);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public struct ASPNETThreadInfo</div><div class=\"line\">    &#123;</div><div class=\"line\">        public int MaxWorkerThreads;</div><div class=\"line\">        public int MaxIOThreads;</div><div class=\"line\">        public int MinFreeThreads;</div><div class=\"line\">        public int MinLocalRequestFreeThreads;</div><div class=\"line\">        public int AvailableWorkerThreads;</div><div class=\"line\">        public int AvailableIOThreads;</div><div class=\"line\"></div><div class=\"line\">        public bool Equals(ASPNETThreadInfo other)</div><div class=\"line\">        &#123;</div><div class=\"line\">            return (</div><div class=\"line\">            MaxWorkerThreads == other.MaxWorkerThreads &amp;&amp;</div><div class=\"line\">            MaxIOThreads == other.MaxIOThreads &amp;&amp;</div><div class=\"line\">            MinFreeThreads == other.MinFreeThreads &amp;&amp;</div><div class=\"line\">            MinLocalRequestFreeThreads == other.MinLocalRequestFreeThreads &amp;&amp;</div><div class=\"line\">            AvailableWorkerThreads == other.AvailableWorkerThreads &amp;&amp;</div><div class=\"line\">            AvailableIOThreads == other.AvailableIOThreads</div><div class=\"line\">            );</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public ASPNETThreadInfo GetThreadInfo()</div><div class=\"line\">    &#123;</div><div class=\"line\">        // use ThreadPool to get the current status</div><div class=\"line\">        int availableWorker, availableIO;</div><div class=\"line\">        int maxWorker, maxIO;</div><div class=\"line\">                    </div><div class=\"line\">        ThreadPool.GetAvailableThreads(out availableWorker, out availableIO);</div><div class=\"line\">        ThreadPool.GetMaxThreads(out maxWorker, out maxIO);            </div><div class=\"line\">        ASPNETThreadInfo threadInfo;</div><div class=\"line\">        threadInfo.AvailableWorkerThreads = (Int16)availableWorker;</div><div class=\"line\">        threadInfo.AvailableIOThreads = (Int16)availableIO;</div><div class=\"line\">        threadInfo.MaxWorkerThreads = (Int16)maxWorker;</div><div class=\"line\">        threadInfo.MaxIOThreads = (Int16)maxIO;            </div><div class=\"line\">        // hard code for now; could get this from  machine.config</div><div class=\"line\">        threadInfo.MinFreeThreads = 8;</div><div class=\"line\">        threadInfo.MinLocalRequestFreeThreads = 4;</div><div class=\"line\">        return threadInfo;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void ShowPerfCounters(ASPNETThreadInfo t)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        // get an instance of our Available Worker Threads counter</div><div class=\"line\">        PerformanceCounter counter1 = new PerformanceCounter();</div><div class=\"line\">        counter1.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter1.CounterName = \"Available Worker Threads\";</div><div class=\"line\">        counter1.ReadOnly = false;</div><div class=\"line\"></div><div class=\"line\">        // set the value of the counter</div><div class=\"line\">        counter1.RawValue = t.AvailableWorkerThreads;</div><div class=\"line\">        counter1.Close();</div><div class=\"line\"></div><div class=\"line\">        // repeat for other counters</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter2 = new PerformanceCounter();</div><div class=\"line\">        counter2.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter2.CounterName = \"Available IO Threads\";</div><div class=\"line\">        counter2.ReadOnly = false;</div><div class=\"line\">        counter2.RawValue = t.AvailableIOThreads;</div><div class=\"line\">        counter2.Close();</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter3 = new PerformanceCounter();</div><div class=\"line\">        counter3.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter3.CounterName = \"Max Worker Threads\";</div><div class=\"line\">        counter3.ReadOnly = false;</div><div class=\"line\">        counter3.RawValue = t.MaxWorkerThreads;</div><div class=\"line\">        counter3.Close();</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter4 = new PerformanceCounter();</div><div class=\"line\">        counter4.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter4.CounterName = \"Max IO Threads\";</div><div class=\"line\">        counter4.ReadOnly = false;</div><div class=\"line\">        counter4.RawValue = t.MaxIOThreads;</div><div class=\"line\">        counter4.Close();</div><div class=\"line\"></div><div class=\"line\">        int minWorker, minIO;</div><div class=\"line\">        ThreadPool.GetMinThreads(out minWorker, out minIO);</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter5 = new PerformanceCounter();</div><div class=\"line\">        counter5.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter5.CounterName = \"Min Worker Threads\";</div><div class=\"line\">        counter5.ReadOnly = false;</div><div class=\"line\">        counter5.RawValue = minWorker;</div><div class=\"line\">        counter5.Close();</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter6 = new PerformanceCounter();</div><div class=\"line\">        counter6.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter6.CounterName = \"Min IO Threads\";</div><div class=\"line\">        counter6.ReadOnly = false;</div><div class=\"line\">        counter6.RawValue = minIO;</div><div class=\"line\">        counter6.Close();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"StartWebApp-aspx\"><a href=\"#StartWebApp-aspx\" class=\"headerlink\" title=\"StartWebApp.aspx\"></a><span id=\"startWebApp\">StartWebApp.aspx</span></h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Page_Load</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, EventArgs e</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> availableWorker, availableIO;</div><div class=\"line\">    <span class=\"keyword\">int</span> maxWorker, maxIO;</div><div class=\"line\">    <span class=\"keyword\">int</span> minWorker, minIO;</div><div class=\"line\">  </div><div class=\"line\">    ThreadPool.GetAvailableThreads(<span class=\"keyword\">out</span> availableWorker, <span class=\"keyword\">out</span> availableIO);</div><div class=\"line\">    ThreadPool.GetMaxThreads(<span class=\"keyword\">out</span> maxWorker, <span class=\"keyword\">out</span> maxIO);</div><div class=\"line\">    ThreadPool.GetMinThreads(<span class=\"keyword\">out</span> minWorker, <span class=\"keyword\">out</span> minIO);</div><div class=\"line\"></div><div class=\"line\">    Response.Write(<span class=\"string\">\"This ASP.NET application has started.&lt;br&gt;\"</span>);</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"MaxWorkerThreads:&#123;0&#125;.&lt;br&gt;\"</span>, maxWorker));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"MaxIOThreads:&#123;0&#125;.&lt;br&gt;\"</span>, maxIO));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"MinWorkerThreads:&#123;0&#125;.&lt;br&gt;\"</span>, minWorker));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"MinIOThreads:&#123;0&#125;.&lt;br&gt;\"</span>, minIO));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"AvailableWorker:&#123;0&#125;.&lt;br&gt;\"</span>, availableWorker));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"AvailableIO:&#123;0&#125;.&lt;br&gt;\"</span>, availableIO));</div><div class=\"line\">    Response.Write(<span class=\"string\">\"You can now close this page.\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Sleep-aspx\"><a href=\"#Sleep-aspx\" class=\"headerlink\" title=\"Sleep.aspx\"></a><span id=\"sleep\">Sleep.aspx</span></h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Page_Load</span>(<span class=\"params\">Object sender, EventArgs e</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">      <span class=\"keyword\">int</span> times = <span class=\"number\">0</span> ;</div><div class=\"line\">      <span class=\"keyword\">var</span> max = <span class=\"keyword\">int</span>.Parse(Request.QueryString.Get(<span class=\"string\">\"max\"</span>));</div><div class=\"line\">      <span class=\"keyword\">var</span> server = ConnectionMultiplexer.Connect(<span class=\"string\">\"redisserver:6379,ssl=false,password=,allowAdmin=false,connectTimeout=200\"</span>);</div><div class=\"line\">      <span class=\"keyword\">var</span> list = Enumerable.Range(<span class=\"number\">1</span>, max).ToList();</div><div class=\"line\">      Parallel.ForEach(list, (i) =&gt;</div><div class=\"line\">      &#123;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">var</span> database = server.GetDatabase();</div><div class=\"line\">          database.StringGet(<span class=\"string\">\"Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8\"</span>);</div><div class=\"line\">          times++;</div><div class=\"line\">      &#125;);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> availableWorker, availableIO;</div><div class=\"line\">      <span class=\"keyword\">int</span> maxWorker, maxIO;</div><div class=\"line\">      ThreadPool.SetMaxThreads(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</div><div class=\"line\">      ThreadPool.GetAvailableThreads(<span class=\"keyword\">out</span> availableWorker, <span class=\"keyword\">out</span> availableIO);</div><div class=\"line\">      ThreadPool.GetMaxThreads(<span class=\"keyword\">out</span> maxWorker, <span class=\"keyword\">out</span> maxIO);</div><div class=\"line\">      Response.Write(String.Format(<span class=\"string\">\"Connect Redis Busy:&#123;0&#125;&lt;br /&gt; &#123;1&#125;\"</span>,maxWorker - availableWorker, times));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"StackExchange-Redis-源碼\"><a href=\"#StackExchange-Redis-源碼\" class=\"headerlink\" title=\"StackExchange.Redis 源碼\"></a>StackExchange.Redis 源碼</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">GetThreadPoolStats</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"keyword\">string</span> iocp, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> worker</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//BusyThreads =  TP.GetMaxThreads() –TP.GetAVailable();</span></div><div class=\"line\">    <span class=\"comment\">//If BusyThreads &gt;= TP.GetMinThreads(), then threadpool growth throttling is possible.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> maxIoThreads, maxWorkerThreads;</div><div class=\"line\">    ThreadPool.GetMaxThreads(<span class=\"keyword\">out</span> maxWorkerThreads, <span class=\"keyword\">out</span> maxIoThreads);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> freeIoThreads, freeWorkerThreads;</div><div class=\"line\">    ThreadPool.GetAvailableThreads(<span class=\"keyword\">out</span> freeWorkerThreads, <span class=\"keyword\">out</span> freeIoThreads);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> minIoThreads, minWorkerThreads;</div><div class=\"line\">    ThreadPool.GetMinThreads(<span class=\"keyword\">out</span> minWorkerThreads, <span class=\"keyword\">out</span> minIoThreads);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> busyIoThreads = maxIoThreads - freeIoThreads;</div><div class=\"line\">    <span class=\"keyword\">int</span> busyWorkerThreads = maxWorkerThreads - freeWorkerThreads;</div><div class=\"line\"></div><div class=\"line\">    iocp = <span class=\"string\">$\"(Busy=<span class=\"subst\">&#123;busyIoThreads&#125;</span>,Free=<span class=\"subst\">&#123;freeIoThreads&#125;</span>,Min=<span class=\"subst\">&#123;minIoThreads&#125;</span>,Max=<span class=\"subst\">&#123;maxIoThreads&#125;</span>)\"</span>;</div><div class=\"line\">    worker = <span class=\"string\">$\"(Busy=<span class=\"subst\">&#123;busyWorkerThreads&#125;</span>,Free=<span class=\"subst\">&#123;freeWorkerThreads&#125;</span>,Min=<span class=\"subst\">&#123;minWorkerThreads&#125;</span>,Max=<span class=\"subst\">&#123;maxWorkerThreads&#125;</span>)\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> busyWorkerThreads;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"環境與工具\"><a href=\"#環境與工具\" class=\"headerlink\" title=\"環境與工具\"></a><span id=\"testEnvironment\">環境與工具</span></h2><ul>\n<li>Visual Studio 2015 Professional UPDATE 3</li>\n<li>Windows 10 </li>\n<li>.NET Framework 4.5</li>\n<li>StackExchange.Redis 1.0.481</li>\n<li>CPU <code>Intel® Core™ i7-5500U</code> 四核心</li>\n</ul>\n<h2 id=\"官方說明\"><a href=\"#官方說明\" class=\"headerlink\" title=\"官方說明\"></a>官方說明</h2><ul>\n<li><a href=\"https://support.microsoft.com/zh-tw/kb/821268\" target=\"_blank\" rel=\"external\">爭用、 效能不佳、 和死結 （deadlock） 當您從 ASP.NET 應用程式呼叫 Web 服務</a></li>\n<li>machine.config</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">system.web</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">processModel</span> <span class=\"attr\">autoConfig</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">maxWorkerThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">maxIoThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">minWorkerThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">minIoThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">requestQueueLimit</span>=<span class=\"string\">\"5000\"</span> <span class=\"attr\">responseDeadlockInterval</span>=<span class=\"string\">\"00:03:00\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">httpRuntime</span> <span class=\"attr\">minFreeThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">minLocalRequestFreeThreads</span>=<span class=\"string\">\"xxx\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">system.web</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"建議的設定值\"><a href=\"#建議的設定值\" class=\"headerlink\" title=\"建議的設定值\"></a>建議的設定值</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">system.web</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">processModel</span> <span class=\"attr\">autoConfig</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">minWorkerThreads</span>=<span class=\"string\">\"1\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">system.web</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>.NET 官方文件的預設值與建議值</p>\n<table>\n<thead>\n<tr>\n<th>名稱</th>\n<th>預設值</th>\n<th>建議配置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>maxWorkerThreads</td>\n<td>20</td>\n<td>32767 / #Cores</td>\n</tr>\n<tr>\n<td>maxIoThreads</td>\n<td>20</td>\n<td>32767 / #Cores</td>\n</tr>\n<tr>\n<td>minWorkerThreads</td>\n<td>1</td>\n<td>maxWorkerThreads/2</td>\n</tr>\n<tr>\n<td>minIoThreads</td>\n<td>1</td>\n<td>maxIoThreads / 2</td>\n</tr>\n<tr>\n<td>minFreeThreads</td>\n<td>8</td>\n<td>88*#CPUs</td>\n</tr>\n<tr>\n<td>minLocalRequestFreeThreads</td>\n<td>4</td>\n<td>76*#CPUs</td>\n</tr>\n<tr>\n<td>maxconnection</td>\n<td>2</td>\n<td>12*CPUs</td>\n</tr>\n<tr>\n<td>executionTimeout</td>\n<td>90s</td>\n<td>未建議</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>maxWorkerThreads,minWorkerThreads,maxIoThreads,minIoThreads 設定的數值需要乘上CPU的數量,<br>例: 4 核心設定 minWorkerThreads 值 20 ,實際上的值為 80   </li>\n</ul>\n<h2 id=\"註釋\"><a href=\"#註釋\" class=\"headerlink\" title=\"註釋\"></a><span id=\"comment1\">註釋<span></span></span></h2><ol>\n<li>ThreadPool 中會有一個 queue , 其中隱含一個半秒機制 , 當 queue 靜止超過半秒 , 就會在 ThreadPool 建立一個新的 Thread  </li>\n</ol>\n<h2 id=\"記錄\"><a href=\"#記錄\" class=\"headerlink\" title=\"記錄\"></a>記錄</h2><ul>\n<li>ADO.NET 需要使用 Worker Thread</li>\n<li>Redis 需要使用 Worker Thread</li>\n<li></li>\n</ul>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx\" target=\"_blank\" rel=\"external\">Threading</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms998549.aspx\" target=\"_blank\" rel=\"external\">Improving ASP.NET Performance</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms973903.aspx\" target=\"_blank\" rel=\"external\">Programming the Thread Pool in the .NET Framework</a></li>\n<li><a href=\"https://github.com/StackExchange/StackExchange.Redis\" target=\"_blank\" rel=\"external\">StackExchange.Redis 源碼</a></li>\n<li><a href=\"https://read01.com/MenEP.html\" target=\"_blank\" rel=\"external\">雲計算之路-阿里雲上：從ASP.NET線程角度對「黑色30秒」問題的全新分析</a></li>\n<li><a href=\"https://msdn.microsoft.com/zh-tw/library/ff650682.aspx\" target=\"_blank\" rel=\"external\">How To: Monitor the ASP.NET Thread Pool Using Custom Counters</a></li>\n<li><a href=\"http://www.thejoyofcode.com/tuning_the_threadpool.aspx\" target=\"_blank\" rel=\"external\">http://www.thejoyofcode.com/tuning_the_threadpool.aspx</a></li>\n<li><a href=\"https://gist.github.com/JonCole/e65411214030f0d823cb\" target=\"_blank\" rel=\"external\">https://gist.github.com/JonCole/e65411214030f0d823cb</a></li>\n<li><a href=\"https://blogs.msdn.microsoft.com/carloc/2009/02/19/minworkerthreads-and-autoconfig/\" target=\"_blank\" rel=\"external\">https://blogs.msdn.microsoft.com/carloc/2009/02/19/minworkerthreads-and-autoconfig/</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><ol>\n<li>實務上的專案遭受 DDos 攻擊  </li>\n<li>DB TimeOut  </li>\n<li>Redis TimeOut  </li>\n<li>主程式沒有死,但是Elmah出現大量Exception  </li>\n</ol>\n<h2 id=\"錯誤資訊\"><a href=\"#錯誤資訊\" class=\"headerlink\" title=\"錯誤資訊\"></a>錯誤資訊</h2><p><img src=\"/images/workerthread_and_iothread/110416_102437_AM.jpg\" alt=\"瞬發的流量\"></p>\n<h3 id=\"Redis的錯誤記錄\"><a href=\"#Redis的錯誤記錄\" class=\"headerlink\" title=\"Redis的錯誤記錄\"></a>Redis的錯誤記錄</h3><p>錯誤1.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Timeout performing SETEX Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8, </div><div class=\"line\">inst: 1, mgr: ExecuteSelect, err: never, queue: 2, qu: 2, qs: 0, qc: 0, wr: 0, wq: 0, in: 0, ar: 0, </div><div class=\"line\">IOCP: (Busy=0,Free=1000,Min=4,Max=1000), WORKER: (Busy=165,Free=32602,Min=4,Max=32767), </div><div class=\"line\">clientName: TYO-HOST</div></pre></td></tr></table></figure></p>\n<p>錯誤2.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">StackExchange.Redis.RedisConnectionException</div><div class=\"line\">SocketFailure on GET</div></pre></td></tr></table></figure></p>\n<p>錯誤3.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">No connection is available to service this operation: </div><div class=\"line\">GET Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8</div></pre></td></tr></table></figure></p>\n<p>錯誤4.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">UnableToResolvePhysicalConnection on GET</div></pre></td></tr></table></figure></p>\n<h3 id=\"SQL-Server-錯誤記錄\"><a href=\"#SQL-Server-錯誤記錄\" class=\"headerlink\" title=\"SQL Server 錯誤記錄\"></a>SQL Server 錯誤記錄</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">A transport-level error has occurred when receiving results from the server. </div><div class=\"line\">(provider: Session Provider, error: 19 - Physical connection is not usable)</div></pre></td></tr></table></figure>\n<h2 id=\"錯誤原因\"><a href=\"#錯誤原因\" class=\"headerlink\" title=\"錯誤原因\"></a>錯誤原因</h2><ol>\n<li>CLR 建立執行緒需要時間 , 一秒鐘最多只能建立兩條 Thread <a href=\"#comment1\">註一</a></li>\n<li>瞬間的 Request 量超過 ThreadPool 中的 Thread 數量 </li>\n<li>ThreadPool 建立 Thread 中 , 仍持續有 Request 進來引發錯誤 </li>\n<li>因為我的<a href=\"#testEnvironment\">測試環境</a>有四核心,依文件所說</li>\n</ol>\n<h2 id=\"實驗流程\"><a href=\"#實驗流程\" class=\"headerlink\" title=\"實驗流程\"></a>實驗流程</h2><ol>\n<li><p>建立監視器<br> 參考 <a href=\"https://msdn.microsoft.com/zh-tw/library/ff650682.aspx\">How To: Monitor the ASP.NET Thread Pool Using Custom Counters</a></p>\n<ol>\n<li>建立一個 console 專案, <a href=\"#MyAspNetThreadCounters\">MyAspNetThreadCounters</a></li>\n<li>編譯並執行 console 專案</li>\n<li><p>開啟<code>Regedit.exe</code> 檢查 <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services</code> 應包含以下值</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Available Worker Threads</div><div class=\"line\">Available IO Threads</div><div class=\"line\">Max Worker Threads</div><div class=\"line\">Max IO Threads</div><div class=\"line\">Min Worker Threads</div><div class=\"line\">Min IO Threads</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>建立ASP.NET專案</p>\n<ol>\n<li>建立<a href=\"#global\">Global.asax</a></li>\n<li>建立<a href=\"#startWebApp\">StartWebApp.aspx</a></li>\n<li>建立<a href=\"#sleep\">Sleep.aspx</a></li>\n</ol>\n</li>\n<li>開啟 <code>perfmon.exe</code> 新增計數器 , 選取我們自定義的 <code>MyAspNetThreadCounters</code></li>\n<li><p>連結網頁 <code>localhost\\StartWebApp.aspx</code> 以啟動網站,可以得到以下數據</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">MaxWorkerThreads:32767.</div><div class=\"line\">MaxIOThreads:1000.</div><div class=\"line\">MinWorkerThreads:4.</div><div class=\"line\">MinIOThreads:4.</div><div class=\"line\">AvailableWorker:32766.</div><div class=\"line\">AvailableIO:1000.</div></pre></td></tr></table></figure>\n</li>\n<li><p>執行大量 redis 連線,觀察結果 AvailableWorker Threads 會往下掉,<br>故推斷 redis connection 是透過 Worker Threads 建立.</p>\n</li>\n<li><p>重現錯誤, 執行大量的 sleep 頁面,透過這種方式搶佔IIS的執行緒.<br><img src=\"/images/workerthread_and_iothread/110416_170101_PM.jpg\" alt=\"\"></p>\n</li>\n<li><p>再執行大量 redis 連線, 用以重現錯誤<br><img src=\"/images/workerthread_and_iothread/110416_170001_PM.jpg\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h2><h3 id=\"MyAspNetThreadCounters\"><a href=\"#MyAspNetThreadCounters\" class=\"headerlink\" title=\"MyAspNetThreadCounters\"></a><span id=\"MyAspNetThreadCounters\">MyAspNetThreadCounters</span></h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> System;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Diagnostics;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">MyAspNetThreadCounters</span></div><div class=\"line\">&#123;</div><div class=\"line\">    [STAThread]</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        CreateCounters();</div><div class=\"line\">        Console.WriteLine(<span class=\"string\">\"MyAspNetThreadCounters performance counter category \"</span> +</div><div class=\"line\">                          <span class=\"string\">\"is created. [Press Enter]\"</span>);</div><div class=\"line\">        Console.ReadLine();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateCounters</span>(<span class=\"params\"></span>)</div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        CounterCreationDataCollection col =</div><div class=\"line\">          <span class=\"keyword\">new</span> CounterCreationDataCollection();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Create custom counter objects</span></div><div class=\"line\">        CounterCreationData counter1 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter1.CounterName = <span class=\"string\">\"Available Worker Threads\"</span>;</div><div class=\"line\">        counter1.CounterHelp = <span class=\"string\">\"The difference between the maximum number \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"of thread pool worker threads and the \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"number currently active.\"</span>;</div><div class=\"line\">        counter1.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter2 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter2.CounterName = <span class=\"string\">\"Available IO Threads\"</span>;</div><div class=\"line\">        counter2.CounterHelp = <span class=\"string\">\"The difference between the maximum number of \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool IO threads and the number \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"currently active.\"</span>;</div><div class=\"line\">        counter2.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter3 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter3.CounterName = <span class=\"string\">\"Max Worker Threads\"</span>;</div><div class=\"line\">        counter3.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"that can be active concurrently. All \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool worker threads become available.\"</span>;</div><div class=\"line\">        counter3.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter4 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter4.CounterName = <span class=\"string\">\"Max IO Threads\"</span>;</div><div class=\"line\">        counter4.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"that can be active concurrently. All \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool IO threads become available.\"</span>;</div><div class=\"line\">        counter4.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter5 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter5.CounterName = <span class=\"string\">\"Min Worker Threads\"</span>;</div><div class=\"line\">        counter5.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"that can be active concurrently. All \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool worker threads become available.\"</span>;</div><div class=\"line\">        counter5.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter6 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter6.CounterName = <span class=\"string\">\"Min IO Threads\"</span>;</div><div class=\"line\">        counter6.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"that can be active concurrently. All \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool IO threads become available.\"</span>;</div><div class=\"line\">        counter6.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Add custom counter objects to CounterCreationDataCollection.</span></div><div class=\"line\">        col.Add(counter1);</div><div class=\"line\">        col.Add(counter2);</div><div class=\"line\">        col.Add(counter3);</div><div class=\"line\">        col.Add(counter4);</div><div class=\"line\">        col.Add(counter5);</div><div class=\"line\">        col.Add(counter6);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// delete the category if it already exists</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (PerformanceCounterCategory.Exists(<span class=\"string\">\"MyAspNetThreadCounters\"</span>))</div><div class=\"line\">        &#123;</div><div class=\"line\">            PerformanceCounterCategory.Delete(<span class=\"string\">\"MyAspNetThreadCounters\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// bind the counters to the PerformanceCounterCategory</span></div><div class=\"line\">        PerformanceCounterCategory category =</div><div class=\"line\">                PerformanceCounterCategory.Create(<span class=\"string\">\"MyAspNetThreadCounters\"</span>,<span class=\"string\">\"\"</span>, col);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Global-asax\"><a href=\"#Global-asax\" class=\"headerlink\" title=\"Global.asax\"></a><span id=\"global\">Global.asax</span></h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Global : System.Web</div><div class=\"line\">&#123;</div><div class=\"line\">    //BusyThreads =  TP.GetMaxThreads() –TP.GetAVailable();</div><div class=\"line\">    //If BusyThreads &gt;= TP.GetMinThreads(), then threadpool growth throttling is possible.</div><div class=\"line\"></div><div class=\"line\">    int maxIoThreads, maxWorkerThreads;</div><div class=\"line\">    ThreadPool.GetMaxThreads(out maxWorkerThreads, out maxIoThreads);</div><div class=\"line\"></div><div class=\"line\">    int freeIoThreads, freeWorkerThreads;</div><div class=\"line\">    ThreadPool.GetAvailableThreads(out freeWorkerThreads, out freeIoThreads);</div><div class=\"line\"></div><div class=\"line\">    int minIoThreads, minWorkerThreads;</div><div class=\"line\">    ThreadPool.GetMinThreads(out minWorkerThreads, out minIoThreads);</div><div class=\"line\"></div><div class=\"line\">    int busyIoThreads = maxIoThreads - freeIoThreads;</div><div class=\"line\">    int busyWorkerThreads = maxWorkerThreads - freeWorkerThreads;</div><div class=\"line\"></div><div class=\"line\">    iocp = $\"(Busy=&#123;busyIoThreads&#125;,Free=&#123;freeIoThreads&#125;,Min=&#123;minIoThreads&#125;,Max=&#123;maxIoThreads&#125;)\";</div><div class=\"line\">    worker = $\"(Busy=&#123;busyWorkerThreads&#125;,Free=&#123;freeWorkerThreads&#125;,Min=&#123;minWorkerThreads&#125;,Max=&#123;maxWorkerThreads&#125;)\";</div><div class=\"line\">    return busyWorkerThreads;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System;</div><div class=\"line\"></div><div class=\"line\">public class Global : System.Web.HttpApplication</div><div class=\"line\">&#123;</div><div class=\"line\">    public bool MonitorThreadPoolEnabled = true;</div><div class=\"line\">    protected void Application_Start(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\">        Thread t = new Thread(new ThreadStart(RefreshCounters));</div><div class=\"line\">        t.Start();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Session_Start(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Application_BeginRequest(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Application_AuthenticateRequest(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Application_Error(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Session_End(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Application_End(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\">        MonitorThreadPoolEnabled = false;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void RefreshCounters()</div><div class=\"line\">    &#123;</div><div class=\"line\">        while (MonitorThreadPoolEnabled)</div><div class=\"line\">        &#123;</div><div class=\"line\">            ASPNETThreadInfo t = GetThreadInfo();</div><div class=\"line\">            ShowPerfCounters(t);</div><div class=\"line\">            System.Threading.Thread.Sleep(500);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public struct ASPNETThreadInfo</div><div class=\"line\">    &#123;</div><div class=\"line\">        public int MaxWorkerThreads;</div><div class=\"line\">        public int MaxIOThreads;</div><div class=\"line\">        public int MinFreeThreads;</div><div class=\"line\">        public int MinLocalRequestFreeThreads;</div><div class=\"line\">        public int AvailableWorkerThreads;</div><div class=\"line\">        public int AvailableIOThreads;</div><div class=\"line\"></div><div class=\"line\">        public bool Equals(ASPNETThreadInfo other)</div><div class=\"line\">        &#123;</div><div class=\"line\">            return (</div><div class=\"line\">            MaxWorkerThreads == other.MaxWorkerThreads &amp;&amp;</div><div class=\"line\">            MaxIOThreads == other.MaxIOThreads &amp;&amp;</div><div class=\"line\">            MinFreeThreads == other.MinFreeThreads &amp;&amp;</div><div class=\"line\">            MinLocalRequestFreeThreads == other.MinLocalRequestFreeThreads &amp;&amp;</div><div class=\"line\">            AvailableWorkerThreads == other.AvailableWorkerThreads &amp;&amp;</div><div class=\"line\">            AvailableIOThreads == other.AvailableIOThreads</div><div class=\"line\">            );</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public ASPNETThreadInfo GetThreadInfo()</div><div class=\"line\">    &#123;</div><div class=\"line\">        // use ThreadPool to get the current status</div><div class=\"line\">        int availableWorker, availableIO;</div><div class=\"line\">        int maxWorker, maxIO;</div><div class=\"line\">                    </div><div class=\"line\">        ThreadPool.GetAvailableThreads(out availableWorker, out availableIO);</div><div class=\"line\">        ThreadPool.GetMaxThreads(out maxWorker, out maxIO);            </div><div class=\"line\">        ASPNETThreadInfo threadInfo;</div><div class=\"line\">        threadInfo.AvailableWorkerThreads = (Int16)availableWorker;</div><div class=\"line\">        threadInfo.AvailableIOThreads = (Int16)availableIO;</div><div class=\"line\">        threadInfo.MaxWorkerThreads = (Int16)maxWorker;</div><div class=\"line\">        threadInfo.MaxIOThreads = (Int16)maxIO;            </div><div class=\"line\">        // hard code for now; could get this from  machine.config</div><div class=\"line\">        threadInfo.MinFreeThreads = 8;</div><div class=\"line\">        threadInfo.MinLocalRequestFreeThreads = 4;</div><div class=\"line\">        return threadInfo;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void ShowPerfCounters(ASPNETThreadInfo t)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        // get an instance of our Available Worker Threads counter</div><div class=\"line\">        PerformanceCounter counter1 = new PerformanceCounter();</div><div class=\"line\">        counter1.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter1.CounterName = \"Available Worker Threads\";</div><div class=\"line\">        counter1.ReadOnly = false;</div><div class=\"line\"></div><div class=\"line\">        // set the value of the counter</div><div class=\"line\">        counter1.RawValue = t.AvailableWorkerThreads;</div><div class=\"line\">        counter1.Close();</div><div class=\"line\"></div><div class=\"line\">        // repeat for other counters</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter2 = new PerformanceCounter();</div><div class=\"line\">        counter2.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter2.CounterName = \"Available IO Threads\";</div><div class=\"line\">        counter2.ReadOnly = false;</div><div class=\"line\">        counter2.RawValue = t.AvailableIOThreads;</div><div class=\"line\">        counter2.Close();</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter3 = new PerformanceCounter();</div><div class=\"line\">        counter3.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter3.CounterName = \"Max Worker Threads\";</div><div class=\"line\">        counter3.ReadOnly = false;</div><div class=\"line\">        counter3.RawValue = t.MaxWorkerThreads;</div><div class=\"line\">        counter3.Close();</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter4 = new PerformanceCounter();</div><div class=\"line\">        counter4.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter4.CounterName = \"Max IO Threads\";</div><div class=\"line\">        counter4.ReadOnly = false;</div><div class=\"line\">        counter4.RawValue = t.MaxIOThreads;</div><div class=\"line\">        counter4.Close();</div><div class=\"line\"></div><div class=\"line\">        int minWorker, minIO;</div><div class=\"line\">        ThreadPool.GetMinThreads(out minWorker, out minIO);</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter5 = new PerformanceCounter();</div><div class=\"line\">        counter5.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter5.CounterName = \"Min Worker Threads\";</div><div class=\"line\">        counter5.ReadOnly = false;</div><div class=\"line\">        counter5.RawValue = minWorker;</div><div class=\"line\">        counter5.Close();</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter6 = new PerformanceCounter();</div><div class=\"line\">        counter6.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter6.CounterName = \"Min IO Threads\";</div><div class=\"line\">        counter6.ReadOnly = false;</div><div class=\"line\">        counter6.RawValue = minIO;</div><div class=\"line\">        counter6.Close();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"StartWebApp-aspx\"><a href=\"#StartWebApp-aspx\" class=\"headerlink\" title=\"StartWebApp.aspx\"></a><span id=\"startWebApp\">StartWebApp.aspx</span></h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Page_Load</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, EventArgs e</span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> availableWorker, availableIO;</div><div class=\"line\">    <span class=\"keyword\">int</span> maxWorker, maxIO;</div><div class=\"line\">    <span class=\"keyword\">int</span> minWorker, minIO;</div><div class=\"line\">  </div><div class=\"line\">    ThreadPool.GetAvailableThreads(<span class=\"keyword\">out</span> availableWorker, <span class=\"keyword\">out</span> availableIO);</div><div class=\"line\">    ThreadPool.GetMaxThreads(<span class=\"keyword\">out</span> maxWorker, <span class=\"keyword\">out</span> maxIO);</div><div class=\"line\">    ThreadPool.GetMinThreads(<span class=\"keyword\">out</span> minWorker, <span class=\"keyword\">out</span> minIO);</div><div class=\"line\"></div><div class=\"line\">    Response.Write(<span class=\"string\">\"This ASP.NET application has started.&lt;br&gt;\"</span>);</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"MaxWorkerThreads:&#123;0&#125;.&lt;br&gt;\"</span>, maxWorker));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"MaxIOThreads:&#123;0&#125;.&lt;br&gt;\"</span>, maxIO));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"MinWorkerThreads:&#123;0&#125;.&lt;br&gt;\"</span>, minWorker));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"MinIOThreads:&#123;0&#125;.&lt;br&gt;\"</span>, minIO));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"AvailableWorker:&#123;0&#125;.&lt;br&gt;\"</span>, availableWorker));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"AvailableIO:&#123;0&#125;.&lt;br&gt;\"</span>, availableIO));</div><div class=\"line\">    Response.Write(<span class=\"string\">\"You can now close this page.\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Sleep-aspx\"><a href=\"#Sleep-aspx\" class=\"headerlink\" title=\"Sleep.aspx\"></a><span id=\"sleep\">Sleep.aspx</span></h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Page_Load</span>(<span class=\"params\">Object sender, EventArgs e</span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">int</span> times = <span class=\"number\">0</span> ;</div><div class=\"line\">      <span class=\"keyword\">var</span> max = <span class=\"keyword\">int</span>.Parse(Request.QueryString.Get(<span class=\"string\">\"max\"</span>));</div><div class=\"line\">      <span class=\"keyword\">var</span> server = ConnectionMultiplexer.Connect(<span class=\"string\">\"redisserver:6379,ssl=false,password=,allowAdmin=false,connectTimeout=200\"</span>);</div><div class=\"line\">      <span class=\"keyword\">var</span> list = Enumerable.Range(<span class=\"number\">1</span>, max).ToList();</div><div class=\"line\">      Parallel.ForEach(list, (i) =&gt;</div><div class=\"line\">      &#123;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">var</span> database = server.GetDatabase();</div><div class=\"line\">          database.StringGet(<span class=\"string\">\"Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8\"</span>);</div><div class=\"line\">          times++;</div><div class=\"line\">      &#125;);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> availableWorker, availableIO;</div><div class=\"line\">      <span class=\"keyword\">int</span> maxWorker, maxIO;</div><div class=\"line\">      ThreadPool.SetMaxThreads(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</div><div class=\"line\">      ThreadPool.GetAvailableThreads(<span class=\"keyword\">out</span> availableWorker, <span class=\"keyword\">out</span> availableIO);</div><div class=\"line\">      ThreadPool.GetMaxThreads(<span class=\"keyword\">out</span> maxWorker, <span class=\"keyword\">out</span> maxIO);</div><div class=\"line\">      Response.Write(String.Format(<span class=\"string\">\"Connect Redis Busy:&#123;0&#125;&lt;br /&gt; &#123;1&#125;\"</span>,maxWorker - availableWorker, times));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"StackExchange-Redis-源碼\"><a href=\"#StackExchange-Redis-源碼\" class=\"headerlink\" title=\"StackExchange.Redis 源碼\"></a>StackExchange.Redis 源碼</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">GetThreadPoolStats</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"keyword\">string</span> iocp, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> worker</span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//BusyThreads =  TP.GetMaxThreads() –TP.GetAVailable();</span></div><div class=\"line\">    <span class=\"comment\">//If BusyThreads &gt;= TP.GetMinThreads(), then threadpool growth throttling is possible.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> maxIoThreads, maxWorkerThreads;</div><div class=\"line\">    ThreadPool.GetMaxThreads(<span class=\"keyword\">out</span> maxWorkerThreads, <span class=\"keyword\">out</span> maxIoThreads);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> freeIoThreads, freeWorkerThreads;</div><div class=\"line\">    ThreadPool.GetAvailableThreads(<span class=\"keyword\">out</span> freeWorkerThreads, <span class=\"keyword\">out</span> freeIoThreads);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> minIoThreads, minWorkerThreads;</div><div class=\"line\">    ThreadPool.GetMinThreads(<span class=\"keyword\">out</span> minWorkerThreads, <span class=\"keyword\">out</span> minIoThreads);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> busyIoThreads = maxIoThreads - freeIoThreads;</div><div class=\"line\">    <span class=\"keyword\">int</span> busyWorkerThreads = maxWorkerThreads - freeWorkerThreads;</div><div class=\"line\"></div><div class=\"line\">    iocp = <span class=\"string\">$\"(Busy=<span class=\"subst\">&#123;busyIoThreads&#125;</span>,Free=<span class=\"subst\">&#123;freeIoThreads&#125;</span>,Min=<span class=\"subst\">&#123;minIoThreads&#125;</span>,Max=<span class=\"subst\">&#123;maxIoThreads&#125;</span>)\"</span>;</div><div class=\"line\">    worker = <span class=\"string\">$\"(Busy=<span class=\"subst\">&#123;busyWorkerThreads&#125;</span>,Free=<span class=\"subst\">&#123;freeWorkerThreads&#125;</span>,Min=<span class=\"subst\">&#123;minWorkerThreads&#125;</span>,Max=<span class=\"subst\">&#123;maxWorkerThreads&#125;</span>)\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> busyWorkerThreads;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"環境與工具\"><a href=\"#環境與工具\" class=\"headerlink\" title=\"環境與工具\"></a><span id=\"testEnvironment\">環境與工具</span></h2><ul>\n<li>Visual Studio 2015 Professional UPDATE 3</li>\n<li>Windows 10 </li>\n<li>.NET Framework 4.5</li>\n<li>StackExchange.Redis 1.0.481</li>\n<li>CPU <code>Intel® Core™ i7-5500U</code> 四核心</li>\n</ul>\n<h2 id=\"官方說明\"><a href=\"#官方說明\" class=\"headerlink\" title=\"官方說明\"></a>官方說明</h2><ul>\n<li><a href=\"https://support.microsoft.com/zh-tw/kb/821268\">爭用、 效能不佳、 和死結 （deadlock） 當您從 ASP.NET 應用程式呼叫 Web 服務</a></li>\n<li>machine.config</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">system.web</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">processModel</span> <span class=\"attr\">autoConfig</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">maxWorkerThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">maxIoThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">minWorkerThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">minIoThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">requestQueueLimit</span>=<span class=\"string\">\"5000\"</span> <span class=\"attr\">responseDeadlockInterval</span>=<span class=\"string\">\"00:03:00\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">httpRuntime</span> <span class=\"attr\">minFreeThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">minLocalRequestFreeThreads</span>=<span class=\"string\">\"xxx\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">system.web</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"建議的設定值\"><a href=\"#建議的設定值\" class=\"headerlink\" title=\"建議的設定值\"></a>建議的設定值</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">system.web</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">processModel</span> <span class=\"attr\">autoConfig</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">minWorkerThreads</span>=<span class=\"string\">\"1\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">system.web</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>.NET 官方文件的預設值與建議值</p>\n<table>\n<thead>\n<tr>\n<th>名稱</th>\n<th>預設值</th>\n<th>建議配置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>maxWorkerThreads</td>\n<td>20</td>\n<td>32767 / #Cores</td>\n</tr>\n<tr>\n<td>maxIoThreads</td>\n<td>20</td>\n<td>32767 / #Cores</td>\n</tr>\n<tr>\n<td>minWorkerThreads</td>\n<td>1</td>\n<td>maxWorkerThreads/2</td>\n</tr>\n<tr>\n<td>minIoThreads</td>\n<td>1</td>\n<td>maxIoThreads / 2</td>\n</tr>\n<tr>\n<td>minFreeThreads</td>\n<td>8</td>\n<td>88*#CPUs</td>\n</tr>\n<tr>\n<td>minLocalRequestFreeThreads</td>\n<td>4</td>\n<td>76*#CPUs</td>\n</tr>\n<tr>\n<td>maxconnection</td>\n<td>2</td>\n<td>12*CPUs</td>\n</tr>\n<tr>\n<td>executionTimeout</td>\n<td>90s</td>\n<td>未建議</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>maxWorkerThreads,minWorkerThreads,maxIoThreads,minIoThreads 設定的數值需要乘上CPU的數量,<br>例: 4 核心設定 minWorkerThreads 值 20 ,實際上的值為 80   </li>\n</ul>\n<h2 id=\"註釋\"><a href=\"#註釋\" class=\"headerlink\" title=\"註釋\"></a><span id=\"comment1\">註釋<span></h2><ol>\n<li>ThreadPool 中會有一個 queue , 其中隱含一個半秒機制 , 當 queue 靜止超過半秒 , 就會在 ThreadPool 建立一個新的 Thread  </li>\n</ol>\n<h2 id=\"記錄\"><a href=\"#記錄\" class=\"headerlink\" title=\"記錄\"></a>記錄</h2><ul>\n<li>ADO.NET 需要使用 Worker Thread</li>\n<li>Redis 需要使用 Worker Thread</li>\n<li></li>\n</ul>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx\">Threading</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms998549.aspx\">Improving ASP.NET Performance</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms973903.aspx\">Programming the Thread Pool in the .NET Framework</a></li>\n<li><a href=\"https://github.com/StackExchange/StackExchange.Redis\">StackExchange.Redis 源碼</a></li>\n<li><a href=\"https://read01.com/MenEP.html\">雲計算之路-阿里雲上：從ASP.NET線程角度對「黑色30秒」問題的全新分析</a></li>\n<li><a href=\"https://msdn.microsoft.com/zh-tw/library/ff650682.aspx\">How To: Monitor the ASP.NET Thread Pool Using Custom Counters</a></li>\n<li><a href=\"http://www.thejoyofcode.com/tuning_the_threadpool.aspx\">http://www.thejoyofcode.com/tuning_the_threadpool.aspx</a></li>\n<li><a href=\"https://gist.github.com/JonCole/e65411214030f0d823cb\">https://gist.github.com/JonCole/e65411214030f0d823cb</a></li>\n<li><a href=\"https://blogs.msdn.microsoft.com/carloc/2009/02/19/minworkerthreads-and-autoconfig/\">https://blogs.msdn.microsoft.com/carloc/2009/02/19/minworkerthreads-and-autoconfig/</a></li>\n</ul>\n"},{"title":"ASP.Net 執行緒 概觀","date":"2016-11-04T03:49:17.000Z","_content":"## 學習筆記\n\n1. 非同步與多執行緒應用的場景並不同,不該混淆\n2. 在單核的情況下,windows會分配片段的時間\n\n\n\n## 參考\n- [Threading](https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx)\n- http://stackoverflow.com/questions/4844637/what-is-the-difference-between-concurrency-parallelism-and-asynchronous-methods","source":"_drafts/workerthread_and_iothread_2.md","raw":"---\ntitle: ASP.Net 執行緒 概觀\ndate: 2016/11/04 11:49:17\ntag:\n  - .Net Framework\n  - Thread Pool\n  - ASP.Net\n---\n## 學習筆記\n\n1. 非同步與多執行緒應用的場景並不同,不該混淆\n2. 在單核的情況下,windows會分配片段的時間\n\n\n\n## 參考\n- [Threading](https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx)\n- http://stackoverflow.com/questions/4844637/what-is-the-difference-between-concurrency-parallelism-and-asynchronous-methods","slug":"workerthread_and_iothread_2","published":0,"updated":"2016-11-10T03:43:19.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwawm317000838opb6df4wup","content":"<h2 id=\"學習筆記\"><a href=\"#學習筆記\" class=\"headerlink\" title=\"學習筆記\"></a>學習筆記</h2><ol>\n<li>非同步與多執行緒應用的場景並不同,不該混淆</li>\n<li>在單核的情況下,windows會分配片段的時間</li>\n</ol>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx\" target=\"_blank\" rel=\"external\">Threading</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4844637/what-is-the-difference-between-concurrency-parallelism-and-asynchronous-methods\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/4844637/what-is-the-difference-between-concurrency-parallelism-and-asynchronous-methods</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"學習筆記\"><a href=\"#學習筆記\" class=\"headerlink\" title=\"學習筆記\"></a>學習筆記</h2><ol>\n<li>非同步與多執行緒應用的場景並不同,不該混淆</li>\n<li>在單核的情況下,windows會分配片段的時間</li>\n</ol>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx\">Threading</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4844637/what-is-the-difference-between-concurrency-parallelism-and-asynchronous-methods\">http://stackoverflow.com/questions/4844637/what-is-the-difference-between-concurrency-parallelism-and-asynchronous-methods</a></li>\n</ul>\n"},{"title":"[記錄]powershell 初體驗","date":"2016-10-21T05:27:53.000Z","_content":"## 需求\n1. 將指定的Log記錄,匯入資料庫,產生row data\n2. 將row data 轉換成為需要的報表資料\n3. 產生報表\n\n## 規劃\n1. powershell 讀取檔案\n2. powershell 連接資料庫\n3. powershell 執行SQL\n4. powershell 作BulkInsert\n5. powershell 寫入檔案\n\n![](/images/102216_095355_PM.jpg)\n\n**簡記要點**\n- ***powershell 可以直接取用 .Net Framework 或 COM 元件***\n- ***宣告變用要用`$`字號***\n- ***`#` 是註解***\n\n### 讀取檔案\n```powershell\n#用New-Object 建立.Net StreamrReader 物件\n$reader = New-Object System.io.streamreader(get-item $filePath)\n#使用`[]`建立靜態類別讀取檔案\n$file = [System.IO.File]::ReadAllLines($filePath)  \n#直接使用Get-Content讀取文檔\n$file = Get-Content  \"C:\\filepath\\file\"\n```\n### 連線資料庫與執行語法\n```powershell\n$connection = New-Object System.Data.SQLClient.SQLConnection\n$connection.ConnectionString = \"server='$server';database='$database';uid='$user'; pwd='$pwd';Integrated Security=False;\"\n$connection.Open()\n# do something \n$connection.Close()\n```\n### BulkInsert\n- 從檔案建立DataTable\n\n```powershell\n$table = New-Object System.Data.DataTable\n#建立欄位\n$col_title = New-Object system.Data.DataColumn \"Title\",([string])\n$table.Columns.Add($col_title);\n$col_content = New-Object system.Data.DataColumn \"Content\",([string])\n$table.Columns.Add($col_content);\n$col_author = New-Object system.Data.DataColumn \"Author\",([string])\n$table.Columns.Add($col_author);\n#建立資料\nforeach($file in $files){\n  $dr = $table.NewRow();\n  $dr[\"Title\"] = $file[\"title\"]\n  $dr[\"Content\"] = $file[\"content\"]\n  $dr[\"Author\"] = $file[\"author\"]\n}\n#寫入資料表\n$table.Rows.Add($dr);\n```\n\n- 透過BulkCopy將DataTable寫入資料庫 \n\n```powershell\n$connection.Open()\n$bulkCopy = New-Object (“Data.SqlClient.SqlBulkCopy”) -ArgumentList $connection\n$bulkCopy.DestinationTableName = \"tablename\"\n$bulkCopy.WriteToServer($datatable)\n$connection.Close()\n```\n\n### 進度條\n```powershell\nWrite-Progress -Activity \"BulkInsert\" -Status \"載入百分比: 100 %\" -PercentComplete 100;\n```\n\n### 產生報表\n\n```powershell\n$datatable | export-csv C:\\Reports\\20161026.csv -Encoding UTF8\n```\n\n\n\n## 參考\n1. https://msdn.microsoft.com/en-us/powershell\n2. https://msdn.microsoft.com/en-us/powershell/scripting/getting-started/cookbooks/using-static-classes-and-methods\n3. https://cmatskas.com/execute-sql-query-with-powershell/\n4. https://blogs.technet.microsoft.com/heyscriptingguy/\n\n(fin)","source":"_posts/1st_time_with_powershell.md","raw":"---\ntitle: \"[記錄]powershell 初體驗\"\ndate: 2016/10/21 13:27:53 \ntag:\n  - powershell\n  - Database\n  - MsSQL\n  - BulkInsert\n  - 記錄\n---\n## 需求\n1. 將指定的Log記錄,匯入資料庫,產生row data\n2. 將row data 轉換成為需要的報表資料\n3. 產生報表\n\n## 規劃\n1. powershell 讀取檔案\n2. powershell 連接資料庫\n3. powershell 執行SQL\n4. powershell 作BulkInsert\n5. powershell 寫入檔案\n\n![](/images/102216_095355_PM.jpg)\n\n**簡記要點**\n- ***powershell 可以直接取用 .Net Framework 或 COM 元件***\n- ***宣告變用要用`$`字號***\n- ***`#` 是註解***\n\n### 讀取檔案\n```powershell\n#用New-Object 建立.Net StreamrReader 物件\n$reader = New-Object System.io.streamreader(get-item $filePath)\n#使用`[]`建立靜態類別讀取檔案\n$file = [System.IO.File]::ReadAllLines($filePath)  \n#直接使用Get-Content讀取文檔\n$file = Get-Content  \"C:\\filepath\\file\"\n```\n### 連線資料庫與執行語法\n```powershell\n$connection = New-Object System.Data.SQLClient.SQLConnection\n$connection.ConnectionString = \"server='$server';database='$database';uid='$user'; pwd='$pwd';Integrated Security=False;\"\n$connection.Open()\n# do something \n$connection.Close()\n```\n### BulkInsert\n- 從檔案建立DataTable\n\n```powershell\n$table = New-Object System.Data.DataTable\n#建立欄位\n$col_title = New-Object system.Data.DataColumn \"Title\",([string])\n$table.Columns.Add($col_title);\n$col_content = New-Object system.Data.DataColumn \"Content\",([string])\n$table.Columns.Add($col_content);\n$col_author = New-Object system.Data.DataColumn \"Author\",([string])\n$table.Columns.Add($col_author);\n#建立資料\nforeach($file in $files){\n  $dr = $table.NewRow();\n  $dr[\"Title\"] = $file[\"title\"]\n  $dr[\"Content\"] = $file[\"content\"]\n  $dr[\"Author\"] = $file[\"author\"]\n}\n#寫入資料表\n$table.Rows.Add($dr);\n```\n\n- 透過BulkCopy將DataTable寫入資料庫 \n\n```powershell\n$connection.Open()\n$bulkCopy = New-Object (“Data.SqlClient.SqlBulkCopy”) -ArgumentList $connection\n$bulkCopy.DestinationTableName = \"tablename\"\n$bulkCopy.WriteToServer($datatable)\n$connection.Close()\n```\n\n### 進度條\n```powershell\nWrite-Progress -Activity \"BulkInsert\" -Status \"載入百分比: 100 %\" -PercentComplete 100;\n```\n\n### 產生報表\n\n```powershell\n$datatable | export-csv C:\\Reports\\20161026.csv -Encoding UTF8\n```\n\n\n\n## 參考\n1. https://msdn.microsoft.com/en-us/powershell\n2. https://msdn.microsoft.com/en-us/powershell/scripting/getting-started/cookbooks/using-static-classes-and-methods\n3. https://cmatskas.com/execute-sql-query-with-powershell/\n4. https://blogs.technet.microsoft.com/heyscriptingguy/\n\n(fin)","slug":"1st_time_with_powershell","published":1,"updated":"2016-11-21T09:22:28.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwawm31a000a38op7z3j40xa","content":"<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><ol>\n<li>將指定的Log記錄,匯入資料庫,產生row data</li>\n<li>將row data 轉換成為需要的報表資料</li>\n<li>產生報表</li>\n</ol>\n<h2 id=\"規劃\"><a href=\"#規劃\" class=\"headerlink\" title=\"規劃\"></a>規劃</h2><ol>\n<li>powershell 讀取檔案</li>\n<li>powershell 連接資料庫</li>\n<li>powershell 執行SQL</li>\n<li>powershell 作BulkInsert</li>\n<li>powershell 寫入檔案</li>\n</ol>\n<p><img src=\"/images/102216_095355_PM.jpg\" alt=\"\"></p>\n<p><strong>簡記要點</strong></p>\n<ul>\n<li><strong><em>powershell 可以直接取用 .Net Framework 或 COM 元件</em></strong></li>\n<li><strong><em>宣告變用要用<code>$</code>字號</em></strong></li>\n<li><strong><em><code>#</code> 是註解</em></strong></li>\n</ul>\n<h3 id=\"讀取檔案\"><a href=\"#讀取檔案\" class=\"headerlink\" title=\"讀取檔案\"></a>讀取檔案</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#用New-Object 建立.Net StreamrReader 物件</span></div><div class=\"line\"><span class=\"variable\">$reader</span> = <span class=\"built_in\">New-Object</span> System.io.streamreader(<span class=\"built_in\">get-item</span> <span class=\"variable\">$filePath</span>)</div><div class=\"line\"><span class=\"comment\">#使用`[]`建立靜態類別讀取檔案</span></div><div class=\"line\"><span class=\"variable\">$file</span> = [System.IO.File]::ReadAllLines(<span class=\"variable\">$filePath</span>)  </div><div class=\"line\"><span class=\"comment\">#直接使用Get-Content讀取文檔</span></div><div class=\"line\"><span class=\"variable\">$file</span> = <span class=\"built_in\">Get-Content</span>  <span class=\"string\">\"C:\\filepath\\file\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"連線資料庫與執行語法\"><a href=\"#連線資料庫與執行語法\" class=\"headerlink\" title=\"連線資料庫與執行語法\"></a>連線資料庫與執行語法</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$connection</span> = <span class=\"built_in\">New-Object</span> System.Data.SQLClient.SQLConnection</div><div class=\"line\"><span class=\"variable\">$connection</span>.ConnectionString = <span class=\"string\">\"server='<span class=\"variable\">$server</span>';database='<span class=\"variable\">$database</span>';uid='<span class=\"variable\">$user</span>'; pwd='<span class=\"variable\">$pwd</span>';Integrated Security=False;\"</span></div><div class=\"line\"><span class=\"variable\">$connection</span>.Open()</div><div class=\"line\"><span class=\"comment\"># do something </span></div><div class=\"line\"><span class=\"variable\">$connection</span>.Close()</div></pre></td></tr></table></figure>\n<h3 id=\"BulkInsert\"><a href=\"#BulkInsert\" class=\"headerlink\" title=\"BulkInsert\"></a>BulkInsert</h3><ul>\n<li>從檔案建立DataTable</li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$table</span> = <span class=\"built_in\">New-Object</span> System.Data.DataTable</div><div class=\"line\"><span class=\"comment\">#建立欄位</span></div><div class=\"line\"><span class=\"variable\">$col_title</span> = <span class=\"built_in\">New-Object</span> system.Data.DataColumn <span class=\"string\">\"Title\"</span>,([string])</div><div class=\"line\"><span class=\"variable\">$table</span>.Columns.Add(<span class=\"variable\">$col_title</span>);</div><div class=\"line\"><span class=\"variable\">$col_content</span> = <span class=\"built_in\">New-Object</span> system.Data.DataColumn <span class=\"string\">\"Content\"</span>,([string])</div><div class=\"line\"><span class=\"variable\">$table</span>.Columns.Add(<span class=\"variable\">$col_content</span>);</div><div class=\"line\"><span class=\"variable\">$col_author</span> = <span class=\"built_in\">New-Object</span> system.Data.DataColumn <span class=\"string\">\"Author\"</span>,([string])</div><div class=\"line\"><span class=\"variable\">$table</span>.Columns.Add(<span class=\"variable\">$col_author</span>);</div><div class=\"line\"><span class=\"comment\">#建立資料</span></div><div class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"variable\">$file</span> <span class=\"keyword\">in</span> <span class=\"variable\">$files</span>)&#123;</div><div class=\"line\">  <span class=\"variable\">$dr</span> = <span class=\"variable\">$table</span>.NewRow();</div><div class=\"line\">  <span class=\"variable\">$dr</span>[<span class=\"string\">\"Title\"</span>] = <span class=\"variable\">$file</span>[<span class=\"string\">\"title\"</span>]</div><div class=\"line\">  <span class=\"variable\">$dr</span>[<span class=\"string\">\"Content\"</span>] = <span class=\"variable\">$file</span>[<span class=\"string\">\"content\"</span>]</div><div class=\"line\">  <span class=\"variable\">$dr</span>[<span class=\"string\">\"Author\"</span>] = <span class=\"variable\">$file</span>[<span class=\"string\">\"author\"</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">#寫入資料表</span></div><div class=\"line\"><span class=\"variable\">$table</span>.Rows.Add(<span class=\"variable\">$dr</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>透過BulkCopy將DataTable寫入資料庫 </li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$connection</span>.Open()</div><div class=\"line\"><span class=\"variable\">$bulkCopy</span> = <span class=\"built_in\">New-Object</span> (“Data.SqlClient.SqlBulkCopy”) -ArgumentList <span class=\"variable\">$connection</span></div><div class=\"line\"><span class=\"variable\">$bulkCopy</span>.DestinationTableName = <span class=\"string\">\"tablename\"</span></div><div class=\"line\"><span class=\"variable\">$bulkCopy</span>.WriteToServer(<span class=\"variable\">$datatable</span>)</div><div class=\"line\"><span class=\"variable\">$connection</span>.Close()</div></pre></td></tr></table></figure>\n<h3 id=\"進度條\"><a href=\"#進度條\" class=\"headerlink\" title=\"進度條\"></a>進度條</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Write-Progress</span> -Activity <span class=\"string\">\"BulkInsert\"</span> -Status <span class=\"string\">\"載入百分比: 100 %\"</span> -PercentComplete <span class=\"number\">100</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"產生報表\"><a href=\"#產生報表\" class=\"headerlink\" title=\"產生報表\"></a>產生報表</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$datatable</span> | <span class=\"built_in\">export-csv</span> C:\\Reports\\<span class=\"number\">20161026</span>.csv -Encoding UTF8</div></pre></td></tr></table></figure>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ol>\n<li><a href=\"https://msdn.microsoft.com/en-us/powershell\" target=\"_blank\" rel=\"external\">https://msdn.microsoft.com/en-us/powershell</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/powershell/scripting/getting-started/cookbooks/using-static-classes-and-methods\" target=\"_blank\" rel=\"external\">https://msdn.microsoft.com/en-us/powershell/scripting/getting-started/cookbooks/using-static-classes-and-methods</a></li>\n<li><a href=\"https://cmatskas.com/execute-sql-query-with-powershell/\" target=\"_blank\" rel=\"external\">https://cmatskas.com/execute-sql-query-with-powershell/</a></li>\n<li><a href=\"https://blogs.technet.microsoft.com/heyscriptingguy/\" target=\"_blank\" rel=\"external\">https://blogs.technet.microsoft.com/heyscriptingguy/</a></li>\n</ol>\n<p>(fin)</p>\n","excerpt":"","more":"<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><ol>\n<li>將指定的Log記錄,匯入資料庫,產生row data</li>\n<li>將row data 轉換成為需要的報表資料</li>\n<li>產生報表</li>\n</ol>\n<h2 id=\"規劃\"><a href=\"#規劃\" class=\"headerlink\" title=\"規劃\"></a>規劃</h2><ol>\n<li>powershell 讀取檔案</li>\n<li>powershell 連接資料庫</li>\n<li>powershell 執行SQL</li>\n<li>powershell 作BulkInsert</li>\n<li>powershell 寫入檔案</li>\n</ol>\n<p><img src=\"/images/102216_095355_PM.jpg\" alt=\"\"></p>\n<p><strong>簡記要點</strong></p>\n<ul>\n<li><strong><em>powershell 可以直接取用 .Net Framework 或 COM 元件</em></strong></li>\n<li><strong><em>宣告變用要用<code>$</code>字號</em></strong></li>\n<li><strong><em><code>#</code> 是註解</em></strong></li>\n</ul>\n<h3 id=\"讀取檔案\"><a href=\"#讀取檔案\" class=\"headerlink\" title=\"讀取檔案\"></a>讀取檔案</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#用New-Object 建立.Net StreamrReader 物件</span></div><div class=\"line\"><span class=\"variable\">$reader</span> = <span class=\"built_in\">New-Object</span> System.io.streamreader(<span class=\"built_in\">get-item</span> <span class=\"variable\">$filePath</span>)</div><div class=\"line\"><span class=\"comment\">#使用`[]`建立靜態類別讀取檔案</span></div><div class=\"line\"><span class=\"variable\">$file</span> = [System.IO.File]::ReadAllLines(<span class=\"variable\">$filePath</span>)  </div><div class=\"line\"><span class=\"comment\">#直接使用Get-Content讀取文檔</span></div><div class=\"line\"><span class=\"variable\">$file</span> = <span class=\"built_in\">Get-Content</span>  <span class=\"string\">\"C:\\filepath\\file\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"連線資料庫與執行語法\"><a href=\"#連線資料庫與執行語法\" class=\"headerlink\" title=\"連線資料庫與執行語法\"></a>連線資料庫與執行語法</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$connection</span> = <span class=\"built_in\">New-Object</span> System.Data.SQLClient.SQLConnection</div><div class=\"line\"><span class=\"variable\">$connection</span>.ConnectionString = <span class=\"string\">\"server='<span class=\"variable\">$server</span>';database='<span class=\"variable\">$database</span>';uid='<span class=\"variable\">$user</span>'; pwd='<span class=\"variable\">$pwd</span>';Integrated Security=False;\"</span></div><div class=\"line\"><span class=\"variable\">$connection</span>.Open()</div><div class=\"line\"><span class=\"comment\"># do something </span></div><div class=\"line\"><span class=\"variable\">$connection</span>.Close()</div></pre></td></tr></table></figure>\n<h3 id=\"BulkInsert\"><a href=\"#BulkInsert\" class=\"headerlink\" title=\"BulkInsert\"></a>BulkInsert</h3><ul>\n<li>從檔案建立DataTable</li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$table</span> = <span class=\"built_in\">New-Object</span> System.Data.DataTable</div><div class=\"line\"><span class=\"comment\">#建立欄位</span></div><div class=\"line\"><span class=\"variable\">$col_title</span> = <span class=\"built_in\">New-Object</span> system.Data.DataColumn <span class=\"string\">\"Title\"</span>,([string])</div><div class=\"line\"><span class=\"variable\">$table</span>.Columns.Add(<span class=\"variable\">$col_title</span>);</div><div class=\"line\"><span class=\"variable\">$col_content</span> = <span class=\"built_in\">New-Object</span> system.Data.DataColumn <span class=\"string\">\"Content\"</span>,([string])</div><div class=\"line\"><span class=\"variable\">$table</span>.Columns.Add(<span class=\"variable\">$col_content</span>);</div><div class=\"line\"><span class=\"variable\">$col_author</span> = <span class=\"built_in\">New-Object</span> system.Data.DataColumn <span class=\"string\">\"Author\"</span>,([string])</div><div class=\"line\"><span class=\"variable\">$table</span>.Columns.Add(<span class=\"variable\">$col_author</span>);</div><div class=\"line\"><span class=\"comment\">#建立資料</span></div><div class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"variable\">$file</span> <span class=\"keyword\">in</span> <span class=\"variable\">$files</span>)&#123;</div><div class=\"line\">  <span class=\"variable\">$dr</span> = <span class=\"variable\">$table</span>.NewRow();</div><div class=\"line\">  <span class=\"variable\">$dr</span>[<span class=\"string\">\"Title\"</span>] = <span class=\"variable\">$file</span>[<span class=\"string\">\"title\"</span>]</div><div class=\"line\">  <span class=\"variable\">$dr</span>[<span class=\"string\">\"Content\"</span>] = <span class=\"variable\">$file</span>[<span class=\"string\">\"content\"</span>]</div><div class=\"line\">  <span class=\"variable\">$dr</span>[<span class=\"string\">\"Author\"</span>] = <span class=\"variable\">$file</span>[<span class=\"string\">\"author\"</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">#寫入資料表</span></div><div class=\"line\"><span class=\"variable\">$table</span>.Rows.Add(<span class=\"variable\">$dr</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>透過BulkCopy將DataTable寫入資料庫 </li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$connection</span>.Open()</div><div class=\"line\"><span class=\"variable\">$bulkCopy</span> = <span class=\"built_in\">New-Object</span> (“Data.SqlClient.SqlBulkCopy”) -ArgumentList <span class=\"variable\">$connection</span></div><div class=\"line\"><span class=\"variable\">$bulkCopy</span>.DestinationTableName = <span class=\"string\">\"tablename\"</span></div><div class=\"line\"><span class=\"variable\">$bulkCopy</span>.WriteToServer(<span class=\"variable\">$datatable</span>)</div><div class=\"line\"><span class=\"variable\">$connection</span>.Close()</div></pre></td></tr></table></figure>\n<h3 id=\"進度條\"><a href=\"#進度條\" class=\"headerlink\" title=\"進度條\"></a>進度條</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Write-Progress</span> -Activity <span class=\"string\">\"BulkInsert\"</span> -Status <span class=\"string\">\"載入百分比: 100 %\"</span> -PercentComplete <span class=\"number\">100</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"產生報表\"><a href=\"#產生報表\" class=\"headerlink\" title=\"產生報表\"></a>產生報表</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$datatable</span> | <span class=\"built_in\">export-csv</span> C:\\Reports\\<span class=\"number\">20161026</span>.csv -Encoding UTF8</div></pre></td></tr></table></figure>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ol>\n<li><a href=\"https://msdn.microsoft.com/en-us/powershell\">https://msdn.microsoft.com/en-us/powershell</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/powershell/scripting/getting-started/cookbooks/using-static-classes-and-methods\">https://msdn.microsoft.com/en-us/powershell/scripting/getting-started/cookbooks/using-static-classes-and-methods</a></li>\n<li><a href=\"https://cmatskas.com/execute-sql-query-with-powershell/\">https://cmatskas.com/execute-sql-query-with-powershell/</a></li>\n<li><a href=\"https://blogs.technet.microsoft.com/heyscriptingguy/\">https://blogs.technet.microsoft.com/heyscriptingguy/</a></li>\n</ol>\n<p>(fin)</p>\n"},{"title":"如何讓google analytics追踪你的Hexo Blog","date":"2016-08-25T06:12:07.000Z","_content":"## 前置作業\n1. 你要有google帳號，並申請好你的google_analytics ID\n2. 這個記錄僅針對Hexo預設的Theme有作用，未來有改Theme的話，可能會需要手動加入，再寫文章補上\n\n## 開啟_config.yml\n1. 確定一下你是使用預設的theme `landscape`\n        ## Themes: https://hexo.io/themes/\n        theme: landscape\n2. 開啟 `root/themes/landscape/_config.yml`\n3. 找到以下的設定區段\n        # Miscellaneous\n        google_analytics:\n4. 填入步驟1. 中所取得 google_analytics ID\n5. 部署網站，完成!\n\n(fin)\n","source":"_posts/add_google_analytics_to_hexo_blog_1.md","raw":"---\ntitle: 如何讓google analytics追踪你的Hexo Blog\ndate: 2016/08/25 14:12:07\ntag:\n  - blog\n  - google analytics\n---\n## 前置作業\n1. 你要有google帳號，並申請好你的google_analytics ID\n2. 這個記錄僅針對Hexo預設的Theme有作用，未來有改Theme的話，可能會需要手動加入，再寫文章補上\n\n## 開啟_config.yml\n1. 確定一下你是使用預設的theme `landscape`\n        ## Themes: https://hexo.io/themes/\n        theme: landscape\n2. 開啟 `root/themes/landscape/_config.yml`\n3. 找到以下的設定區段\n        # Miscellaneous\n        google_analytics:\n4. 填入步驟1. 中所取得 google_analytics ID\n5. 部署網站，完成!\n\n(fin)\n","slug":"add_google_analytics_to_hexo_blog_1","published":1,"updated":"2016-08-25T09:23:35.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwawm31b000b38opaw8nporz","content":"<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ol>\n<li>你要有google帳號，並申請好你的google_analytics ID</li>\n<li>這個記錄僅針對Hexo預設的Theme有作用，未來有改Theme的話，可能會需要手動加入，再寫文章補上</li>\n</ol>\n<h2 id=\"開啟-config-yml\"><a href=\"#開啟-config-yml\" class=\"headerlink\" title=\"開啟_config.yml\"></a>開啟_config.yml</h2><ol>\n<li>確定一下你是使用預設的theme <code>landscape</code><pre><code>## Themes: https://hexo.io/themes/\ntheme: landscape\n</code></pre></li>\n<li>開啟 <code>root/themes/landscape/_config.yml</code></li>\n<li>找到以下的設定區段<pre><code># Miscellaneous\ngoogle_analytics:\n</code></pre></li>\n<li>填入步驟1. 中所取得 google_analytics ID</li>\n<li>部署網站，完成!</li>\n</ol>\n<p>(fin)</p>\n","excerpt":"","more":"<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ol>\n<li>你要有google帳號，並申請好你的google_analytics ID</li>\n<li>這個記錄僅針對Hexo預設的Theme有作用，未來有改Theme的話，可能會需要手動加入，再寫文章補上</li>\n</ol>\n<h2 id=\"開啟-config-yml\"><a href=\"#開啟-config-yml\" class=\"headerlink\" title=\"開啟_config.yml\"></a>開啟_config.yml</h2><ol>\n<li>確定一下你是使用預設的theme <code>landscape</code><pre><code>## Themes: https://hexo.io/themes/\ntheme: landscape\n</code></pre></li>\n<li>開啟 <code>root/themes/landscape/_config.yml</code></li>\n<li>找到以下的設定區段<pre><code># Miscellaneous\ngoogle_analytics:\n</code></pre></li>\n<li>填入步驟1. 中所取得 google_analytics ID</li>\n<li>部署網站，完成!</li>\n</ol>\n<p>(fin)</p>\n"},{"title":"ASP.NET Thread Pool 與 Redis Timeout Exception","date":"2016-11-21T08:49:17.000Z","_content":"\n\n## 前情提要\n_這是一篇有關 ASP.NET Thread Pool 與 StackExchange.Redis 的文章_  \n_記錄著 Thread Pool 的機制如何影響 Redis_\n\n### Thread Pool 500ms 的機制\n\nASP.NET Thread Pool 的排隊機制與`minworkerthread` 設定值相關。\n可以透過調整 `machine.config` 來修正。\n### 官方說明\n- [爭用、 效能不佳、 和死結 （deadlock） 當您從 ASP.NET 應用程式呼叫 Web 服務](https://support.microsoft.com/zh-tw/kb/821268)\n- machine.config\n\n```xml\n<system.web>\n    <processModel autoConfig=\"false\" maxWorkerThreads=\"xxx\" maxIoThreads=\"xxx\" minWorkerThreads=\"xxx\" minIoThreads=\"xxx\" requestQueueLimit=\"5000\" responseDeadlockInterval=\"00:03:00\"/>\n    <httpRuntime minFreeThreads=\"xxx\" minLocalRequestFreeThreads=\"xxx\"/>\n</system.web>\n```\n\n### 建議的設定值 \n```xml\n<system.web>\n    <processModel autoConfig=\"false\" minWorkerThreads=\"1\" />\n</system.web>    \n```\n\n*一種簡化的說法「 ASP.NET Thread Pool 一秒能建立2個Thread。」*  \n\n真正的原理如下:\n設定值 `minworkerthread` 就像是遊樂場*已經開啟*的閘門, \n每當有一個遊客(Task)進來時,立即提供給它使用。\n但是當遊客(Task)變多的時候,就會開始排隊(Queue),\nASP.NET Thread Pool 隱含著一個機制,\n當它的隊伍(Queue)長達500豪秒沒有移動的話,\n就會開啟新的閘門(建立新的Thread)。\n而我的情境屬於[Burst of traffic](#burst_of_traffic),    \n突然大量 Task 湧入 Queue ,  \nThreadPool 需要大量的 Thread  \n每個新的 Thread 都需要 500ms 的反應時間 ,  \n而累積的時間超過 Task 的 Timeout 設定值時 ,  \n就會拋出Exception. \n\n\n![ASP.NET Thread Pool](/images/workerthread_and_iothread/110416_103521_AM.jpg)\n\n\n### 與CPU的關係 \n`minworkerthread` 的預設值是 1 。  \n但是會與執行環境的CPU個數有關,  \n假設你是四核的主機,那就要乘上 4。  \n\n---\n\n### System.TimeoutException \n當StackExchange.Redis在進行同步作業的時候,  \n如果超過 `synctimeout` 的設定值(預設是1000ms),  \n就會拋出類似以下的錯誤\n\n```csharp\nTimeout performing SETEX Cache:Prod:WebAPI:Key:20161121152607, inst: 18, mgr: ExecuteSelect, err: never,  \nqueue: 0, qu: 0, qs: 0, qc: 0, wr: 0, wq: 0, in: 0, ar: 1,  \nIOCP: (Busy=0,Free=1000,Min=8,Max=1000), WORKER: (Busy=13,Free=32754,Min=8,Max=32767), clientName: TYO-MWEB \n```\n- Redis Command - [參考](http://redis.io/commands)  \n\n拆解錯誤如下:\n\n```csharp\nTimeout performing {{Redis Command}} {{Redis Key}}, inst: {{inst}}, mgr:{{mgr}} , err: {{err}},  \nqueue: {{queue}}, qu: {{qu}}, qs: {{qs}}, qc: {{qc}}, wr: {{wr}}, wq: {{wq}}, in: {{in}}, ar: {{ar}},  \nIOCP: (Busy=0,Free=1000,Min=8,Max=1000), WORKER: (Busy=13,Free=32754,Min=8,Max=32767), clientName: {{clientName}}\n```\n\n\n- Redis Key - Redis Key\n- 其他參數說明\n\n範例\n```csharp\nSystem.TimeoutException: Timeout performing MGET 2728cc84-58ae-406b-8ec8-3f962419f641,  \ninst: 1,mgr: Inactive, queue: 73, qu=6, qs=67, qc=0, wr=1/1, in=0/0  \nIOCP: (Busy=6, Free=999, Min=2,Max=1000), WORKER (Busy=7,Free=8184,Min=2,Max=8191) \n```\n\n|Error code|Details|範例|說明|\n|---|---|---|---|\n|inst|in the last time slice: 0 commands have been issued|在最後時脈：已發出0個命令|最後的時脈發出的命令個數|\n|mgr|the socket manager is performing \"socket.select\", <br />which means it is asking the OS to indicate a socket <br />that has something to do; <br /> basically: the reader is not actively reading from <br />the network because it doesn't think there<br /> is anything to do||最後的操作命令|\n|queue|  there are 73 total in-progress operations|73個正在排隊中的操作|正在排隊中的操作|\n|qu|6 of those are in unsent queue: they have not yet been written to the outbound network|6個未發送的queue|未發送的queue|\n|qs|67 of those have been sent to the server but a response is not yet available.  The response could be: Not yet sent by the server sent by the server but not yet processed by the client. |67個已發送的queue|已發送的queue|\n|qc|0 of those have seen replies but have not yet been marked as complete due to waiting on the completion loop|0個已發送未標記完成的queue|已發送未標記完成的queue|\n|wr|there is an active writer (meaning - those 6 unsent are not being ignored) bytes/activewriters |有 1 個啟用的writer,(意味著qu的工作並沒有被忽略) bytes/activewriters|bytes/activewriters|\n|in|there are no active readers and zero bytes are available to be read on the NIC bytes/activereaders|0個reader|bytes/activereaders|\n\n---\n\n## 其它的 Redis Error 情境 \n只作摘要式的翻譯。\n\n### Memory pressure (記憶體壓力)\n\n`Problem:`  \n記憶體不足而開始讀取虛擬記憶體(磁碟)而導致特能低落。\nMemory pressure on the client machine leads to all kinds of performance problems that can   \ndelay processing of data that was sent by the Redis instance without any delay.   \nWhen memory pressure hits, the system typically has to page data from physical memory to   \nvirtual memory which is on disk. This page faulting causes the system to slow down significantly.  \n\n`Measurement:`  \nMonitory memory usage on machine to make sure that it does not exceed available memory.\nMonitor the Page Faults/Sec perf counter. Most systems will have some page faults even during   \nnormal operation, so watch for spikes in this page faults perf counter which correspond with timeouts.  \n\n`Resolution:`   \n增加記憶體或是減少記憶體使用量\nUpgrade to a larger client VM size with more memory or dig into your memory usage patterns   \nto reduce memory consuption.  \n\n---\n\n### <span style=\"color:red;\" id=\"burst_of_traffic\">Burst of traffic</span>\n\n`Problem:`  \nThreadPool突然大量的工作湧入queue導致執行緒來不及建立。\n Bursts of traffic combined with poor ThreadPool settings can result in delays in processing   \n data already sent by the Redis Server but not yet consumed on the client side.  \n\n`測量:`   \n可以用[程式](https://github.com/JonCole/SampleCode/blob/master/ThreadPoolMonitor/ThreadPoolLogger.cs)監控 ThreadPool .  \n或是單純透過 TimeoutException 的訊息,觀察IOCP與WORKER的Busy值來判斷.   \n`Measurement:`  \nMonitor how your ThreadPool statistics change over time using code like [this](https://github.com/JonCole/SampleCode/blob/master/ThreadPoolMonitor/ThreadPoolLogger.cs).   \nYou can also look at the TimeoutException message from StackExchange.Redis.    \nHere is an example :  \n\n```csharp\nSystem.TimeoutException: Timeout performing EVAL, inst: 8, mgr: Inactive, queue: 0, qu: 0, qs: 0, qc: 0, wr: 0, wq: 0, in: 64221, ar: 0, \nIOCP: (Busy=6,Free=999,Min=2,Max=1000), WORKER: (Busy=7,Free=8184,Min=2,Max=8191)\n```\n\nIn the above message, there are several issues that are interesting:  \nNotice that in the \"IOCP\" section and the \"WORKER\" section you have a \"Busy\" value that is  \ngreater than the \"Min\" value. This means that your threadpool settings need adjusting.  \nYou can also see \"in: 64221\". This indicates that 64211 bytes have been received at the kernel   \nsocket layer but haven't yet been read by the application (e.g. StackExchange.Redis).   \nThis typically means that your application isn't reading data from the network as quickly as   \nthe server is sending it to you.  \n\n`Resolution:` \n調整ThreadPool設定  \nConfigure your ThreadPool Settings to make sure that your threadpool will scale up quickly under burst scenarios.\n\n---\n\n### High CPU usage (CPU 過載)\n\n`Problem:` \nHigh CPU usage on the client is an indication that the system cannot keep up with the work that it has been asked to perform. High CPU is a problem because the CPU is busy and it can't keep up with the work the application is asking it to do. The response from Redis can come very quickly, but because the CPU isn't keeping up with the workload, the response sits in the socket's kernel buffer waiting to be processed. If the delay is long enough, a timeout occurs in spite of the requested data having already arrived from the server.\n\n`Measurement:` \nMonitor the System Wide CPU usage through the azure portal or through the associated perf counter. \nBe careful not to monitor process CPU because a single process can have low CPU usage at the same time that overall system CPU can be high. \nWatch for spikes in CPU usage that correspond with timeouts. As a result of high CPU, \nyou may also see high \"in: XXX\" values in TimeoutException error messages as described above in the \"Burst of traffic\" section. \nNote that in newer builds of StackExchange.Redis, the client-side CPU will be printed out in the timeout error message as long as the environment doesn't block access to the CPU perf counter.\n\n`Note:` \nStackExchange.Redis version 1.1.603 or later now prints out \"local-cpu\" usage when a timeout occurs to help understand when client-side CPU usage may be affecting performance.\n\n`Resolution:` \n增加CPU或是找出CPU產生過載的原因  \nUpgrade to a larger VM size with more CPU capacity or investigate what is causing CPU spikes.\n\n---\n\n### Client Side Bandwidth Exceeded (頻寬不足)\n\n`Problem:` \nDifferent sized client machines have limitations on how much network bandwidth they have available. \nIf the client exceeds the available bandwidth, then data will not be processed on the client side as quickly as the server is sending it. This can lead to timeouts.\n\n`Measurement:` \nMonitor how your Bandwidth usage change over time using code like this. Note that this code may not run successfully in some environments with restricted permissions (like Azure WebSites).\n\n`Resolution:` \n加大頻寬或減少使用量\nIncrease Client VM size or reduce network bandwidth consumption.\n\n----\n\n### Large Request/Response Size (過大的請求/回應量)\n\n`Problem:` \n如圖所示,A與B兩個Request都太過龐大,當同時發動請求時,  \nA 回應的時間過長, 導致 B 的Timeout\nA large request/response can cause timeouts. As an example, suppose your timeout value configured is 1 second. \nYour application requests two keys (e.g. 'A' and 'B') at the same time using the same physical network connection. \nMost clients support \"Pipelining\" of requests, such that both requests 'A' and 'B' are sent on the wire to the server one after the other without waiting for the responses. \nThe server will send the responses back in the same order. If response 'A' is large enough it can eat up most of the timeout for subsequent requests.\n\nBelow, I will try to demonstrate this. In this scenario, Request 'A' and 'B' are sent quickly, \nthe server starts sending responses 'A' and 'B' quickly, but because of data transfer times, \n'B' get stuck behind the other request and times out even though the server responded quickly.\n\n```\n|-------- 1 Second Timeout (A)----------|\n|-Request A-|\n     |-------- 1 Second Timeout (B) ----------|\n     |-Request B-|\n            |- Read Response A --------|\n                                       |- Read Response B-| (**TIMEOUT**)\n```\n\n`Measurement:` \nThis is a difficult one to measure. You basically have to instrument your client code to track large requests and responses.\n\n`Resolution:`\n將所需要的資料分割成數個小片段 再分別取回\nRedis is optimized for a large number of small values, rather than a few large values. \nThe preferred solution is to break up your data into related smaller values. See here for details around why smaller values are recommended.\nIncrease the size of your VM (for client and Redis Cache Server), to get higher bandwidth capabilities, reducing data transfer times for larger responses. \nNote that getting more bandwidth on just the server or just on the client may not be enough. \nMeasure your bandwidth usage and compare it to the capabilities of the size of VM you currently have.\nIncrease the number of ConnectionMultiplexer objects you use and round-robin requests over different connections (e.g. use a connection pool). \nIf you go this route, make sure that you don't create a brand new ConnectionMultiplexer for each request as the overhead of creating the new connection will kill your performance.\n\n\n## 參考\n- [Threading](https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx)\n- [Improving ASP.NET Performance](https://msdn.microsoft.com/en-us/library/ms998549.aspx)\n- [Programming the Thread Pool in the .NET Framework](https://msdn.microsoft.com/en-us/library/ms973903.aspx)\n- [DiagnoseRedisErrors-ClientSide](https://gist.github.com/JonCole/db0e90bedeb3fc4823c2)\n- [ThreadPool](https://gist.github.com/JonCole/e65411214030f0d823cb)\n\n(fin)","source":"_posts/aspdotnet_threadpool_and_redis.md","raw":"---\ntitle: ASP.NET Thread Pool 與 Redis Timeout Exception\ndate: 2016/11/21 16:49:17\ntag:\n  - .Net Framework\n  - IO\n  - Thread\n  - ASP.Net\n  - Redis\n---\n\n\n## 前情提要\n_這是一篇有關 ASP.NET Thread Pool 與 StackExchange.Redis 的文章_  \n_記錄著 Thread Pool 的機制如何影響 Redis_\n\n### Thread Pool 500ms 的機制\n\nASP.NET Thread Pool 的排隊機制與`minworkerthread` 設定值相關。\n可以透過調整 `machine.config` 來修正。\n### 官方說明\n- [爭用、 效能不佳、 和死結 （deadlock） 當您從 ASP.NET 應用程式呼叫 Web 服務](https://support.microsoft.com/zh-tw/kb/821268)\n- machine.config\n\n```xml\n<system.web>\n    <processModel autoConfig=\"false\" maxWorkerThreads=\"xxx\" maxIoThreads=\"xxx\" minWorkerThreads=\"xxx\" minIoThreads=\"xxx\" requestQueueLimit=\"5000\" responseDeadlockInterval=\"00:03:00\"/>\n    <httpRuntime minFreeThreads=\"xxx\" minLocalRequestFreeThreads=\"xxx\"/>\n</system.web>\n```\n\n### 建議的設定值 \n```xml\n<system.web>\n    <processModel autoConfig=\"false\" minWorkerThreads=\"1\" />\n</system.web>    \n```\n\n*一種簡化的說法「 ASP.NET Thread Pool 一秒能建立2個Thread。」*  \n\n真正的原理如下:\n設定值 `minworkerthread` 就像是遊樂場*已經開啟*的閘門, \n每當有一個遊客(Task)進來時,立即提供給它使用。\n但是當遊客(Task)變多的時候,就會開始排隊(Queue),\nASP.NET Thread Pool 隱含著一個機制,\n當它的隊伍(Queue)長達500豪秒沒有移動的話,\n就會開啟新的閘門(建立新的Thread)。\n而我的情境屬於[Burst of traffic](#burst_of_traffic),    \n突然大量 Task 湧入 Queue ,  \nThreadPool 需要大量的 Thread  \n每個新的 Thread 都需要 500ms 的反應時間 ,  \n而累積的時間超過 Task 的 Timeout 設定值時 ,  \n就會拋出Exception. \n\n\n![ASP.NET Thread Pool](/images/workerthread_and_iothread/110416_103521_AM.jpg)\n\n\n### 與CPU的關係 \n`minworkerthread` 的預設值是 1 。  \n但是會與執行環境的CPU個數有關,  \n假設你是四核的主機,那就要乘上 4。  \n\n---\n\n### System.TimeoutException \n當StackExchange.Redis在進行同步作業的時候,  \n如果超過 `synctimeout` 的設定值(預設是1000ms),  \n就會拋出類似以下的錯誤\n\n```csharp\nTimeout performing SETEX Cache:Prod:WebAPI:Key:20161121152607, inst: 18, mgr: ExecuteSelect, err: never,  \nqueue: 0, qu: 0, qs: 0, qc: 0, wr: 0, wq: 0, in: 0, ar: 1,  \nIOCP: (Busy=0,Free=1000,Min=8,Max=1000), WORKER: (Busy=13,Free=32754,Min=8,Max=32767), clientName: TYO-MWEB \n```\n- Redis Command - [參考](http://redis.io/commands)  \n\n拆解錯誤如下:\n\n```csharp\nTimeout performing {{Redis Command}} {{Redis Key}}, inst: {{inst}}, mgr:{{mgr}} , err: {{err}},  \nqueue: {{queue}}, qu: {{qu}}, qs: {{qs}}, qc: {{qc}}, wr: {{wr}}, wq: {{wq}}, in: {{in}}, ar: {{ar}},  \nIOCP: (Busy=0,Free=1000,Min=8,Max=1000), WORKER: (Busy=13,Free=32754,Min=8,Max=32767), clientName: {{clientName}}\n```\n\n\n- Redis Key - Redis Key\n- 其他參數說明\n\n範例\n```csharp\nSystem.TimeoutException: Timeout performing MGET 2728cc84-58ae-406b-8ec8-3f962419f641,  \ninst: 1,mgr: Inactive, queue: 73, qu=6, qs=67, qc=0, wr=1/1, in=0/0  \nIOCP: (Busy=6, Free=999, Min=2,Max=1000), WORKER (Busy=7,Free=8184,Min=2,Max=8191) \n```\n\n|Error code|Details|範例|說明|\n|---|---|---|---|\n|inst|in the last time slice: 0 commands have been issued|在最後時脈：已發出0個命令|最後的時脈發出的命令個數|\n|mgr|the socket manager is performing \"socket.select\", <br />which means it is asking the OS to indicate a socket <br />that has something to do; <br /> basically: the reader is not actively reading from <br />the network because it doesn't think there<br /> is anything to do||最後的操作命令|\n|queue|  there are 73 total in-progress operations|73個正在排隊中的操作|正在排隊中的操作|\n|qu|6 of those are in unsent queue: they have not yet been written to the outbound network|6個未發送的queue|未發送的queue|\n|qs|67 of those have been sent to the server but a response is not yet available.  The response could be: Not yet sent by the server sent by the server but not yet processed by the client. |67個已發送的queue|已發送的queue|\n|qc|0 of those have seen replies but have not yet been marked as complete due to waiting on the completion loop|0個已發送未標記完成的queue|已發送未標記完成的queue|\n|wr|there is an active writer (meaning - those 6 unsent are not being ignored) bytes/activewriters |有 1 個啟用的writer,(意味著qu的工作並沒有被忽略) bytes/activewriters|bytes/activewriters|\n|in|there are no active readers and zero bytes are available to be read on the NIC bytes/activereaders|0個reader|bytes/activereaders|\n\n---\n\n## 其它的 Redis Error 情境 \n只作摘要式的翻譯。\n\n### Memory pressure (記憶體壓力)\n\n`Problem:`  \n記憶體不足而開始讀取虛擬記憶體(磁碟)而導致特能低落。\nMemory pressure on the client machine leads to all kinds of performance problems that can   \ndelay processing of data that was sent by the Redis instance without any delay.   \nWhen memory pressure hits, the system typically has to page data from physical memory to   \nvirtual memory which is on disk. This page faulting causes the system to slow down significantly.  \n\n`Measurement:`  \nMonitory memory usage on machine to make sure that it does not exceed available memory.\nMonitor the Page Faults/Sec perf counter. Most systems will have some page faults even during   \nnormal operation, so watch for spikes in this page faults perf counter which correspond with timeouts.  \n\n`Resolution:`   \n增加記憶體或是減少記憶體使用量\nUpgrade to a larger client VM size with more memory or dig into your memory usage patterns   \nto reduce memory consuption.  \n\n---\n\n### <span style=\"color:red;\" id=\"burst_of_traffic\">Burst of traffic</span>\n\n`Problem:`  \nThreadPool突然大量的工作湧入queue導致執行緒來不及建立。\n Bursts of traffic combined with poor ThreadPool settings can result in delays in processing   \n data already sent by the Redis Server but not yet consumed on the client side.  \n\n`測量:`   \n可以用[程式](https://github.com/JonCole/SampleCode/blob/master/ThreadPoolMonitor/ThreadPoolLogger.cs)監控 ThreadPool .  \n或是單純透過 TimeoutException 的訊息,觀察IOCP與WORKER的Busy值來判斷.   \n`Measurement:`  \nMonitor how your ThreadPool statistics change over time using code like [this](https://github.com/JonCole/SampleCode/blob/master/ThreadPoolMonitor/ThreadPoolLogger.cs).   \nYou can also look at the TimeoutException message from StackExchange.Redis.    \nHere is an example :  \n\n```csharp\nSystem.TimeoutException: Timeout performing EVAL, inst: 8, mgr: Inactive, queue: 0, qu: 0, qs: 0, qc: 0, wr: 0, wq: 0, in: 64221, ar: 0, \nIOCP: (Busy=6,Free=999,Min=2,Max=1000), WORKER: (Busy=7,Free=8184,Min=2,Max=8191)\n```\n\nIn the above message, there are several issues that are interesting:  \nNotice that in the \"IOCP\" section and the \"WORKER\" section you have a \"Busy\" value that is  \ngreater than the \"Min\" value. This means that your threadpool settings need adjusting.  \nYou can also see \"in: 64221\". This indicates that 64211 bytes have been received at the kernel   \nsocket layer but haven't yet been read by the application (e.g. StackExchange.Redis).   \nThis typically means that your application isn't reading data from the network as quickly as   \nthe server is sending it to you.  \n\n`Resolution:` \n調整ThreadPool設定  \nConfigure your ThreadPool Settings to make sure that your threadpool will scale up quickly under burst scenarios.\n\n---\n\n### High CPU usage (CPU 過載)\n\n`Problem:` \nHigh CPU usage on the client is an indication that the system cannot keep up with the work that it has been asked to perform. High CPU is a problem because the CPU is busy and it can't keep up with the work the application is asking it to do. The response from Redis can come very quickly, but because the CPU isn't keeping up with the workload, the response sits in the socket's kernel buffer waiting to be processed. If the delay is long enough, a timeout occurs in spite of the requested data having already arrived from the server.\n\n`Measurement:` \nMonitor the System Wide CPU usage through the azure portal or through the associated perf counter. \nBe careful not to monitor process CPU because a single process can have low CPU usage at the same time that overall system CPU can be high. \nWatch for spikes in CPU usage that correspond with timeouts. As a result of high CPU, \nyou may also see high \"in: XXX\" values in TimeoutException error messages as described above in the \"Burst of traffic\" section. \nNote that in newer builds of StackExchange.Redis, the client-side CPU will be printed out in the timeout error message as long as the environment doesn't block access to the CPU perf counter.\n\n`Note:` \nStackExchange.Redis version 1.1.603 or later now prints out \"local-cpu\" usage when a timeout occurs to help understand when client-side CPU usage may be affecting performance.\n\n`Resolution:` \n增加CPU或是找出CPU產生過載的原因  \nUpgrade to a larger VM size with more CPU capacity or investigate what is causing CPU spikes.\n\n---\n\n### Client Side Bandwidth Exceeded (頻寬不足)\n\n`Problem:` \nDifferent sized client machines have limitations on how much network bandwidth they have available. \nIf the client exceeds the available bandwidth, then data will not be processed on the client side as quickly as the server is sending it. This can lead to timeouts.\n\n`Measurement:` \nMonitor how your Bandwidth usage change over time using code like this. Note that this code may not run successfully in some environments with restricted permissions (like Azure WebSites).\n\n`Resolution:` \n加大頻寬或減少使用量\nIncrease Client VM size or reduce network bandwidth consumption.\n\n----\n\n### Large Request/Response Size (過大的請求/回應量)\n\n`Problem:` \n如圖所示,A與B兩個Request都太過龐大,當同時發動請求時,  \nA 回應的時間過長, 導致 B 的Timeout\nA large request/response can cause timeouts. As an example, suppose your timeout value configured is 1 second. \nYour application requests two keys (e.g. 'A' and 'B') at the same time using the same physical network connection. \nMost clients support \"Pipelining\" of requests, such that both requests 'A' and 'B' are sent on the wire to the server one after the other without waiting for the responses. \nThe server will send the responses back in the same order. If response 'A' is large enough it can eat up most of the timeout for subsequent requests.\n\nBelow, I will try to demonstrate this. In this scenario, Request 'A' and 'B' are sent quickly, \nthe server starts sending responses 'A' and 'B' quickly, but because of data transfer times, \n'B' get stuck behind the other request and times out even though the server responded quickly.\n\n```\n|-------- 1 Second Timeout (A)----------|\n|-Request A-|\n     |-------- 1 Second Timeout (B) ----------|\n     |-Request B-|\n            |- Read Response A --------|\n                                       |- Read Response B-| (**TIMEOUT**)\n```\n\n`Measurement:` \nThis is a difficult one to measure. You basically have to instrument your client code to track large requests and responses.\n\n`Resolution:`\n將所需要的資料分割成數個小片段 再分別取回\nRedis is optimized for a large number of small values, rather than a few large values. \nThe preferred solution is to break up your data into related smaller values. See here for details around why smaller values are recommended.\nIncrease the size of your VM (for client and Redis Cache Server), to get higher bandwidth capabilities, reducing data transfer times for larger responses. \nNote that getting more bandwidth on just the server or just on the client may not be enough. \nMeasure your bandwidth usage and compare it to the capabilities of the size of VM you currently have.\nIncrease the number of ConnectionMultiplexer objects you use and round-robin requests over different connections (e.g. use a connection pool). \nIf you go this route, make sure that you don't create a brand new ConnectionMultiplexer for each request as the overhead of creating the new connection will kill your performance.\n\n\n## 參考\n- [Threading](https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx)\n- [Improving ASP.NET Performance](https://msdn.microsoft.com/en-us/library/ms998549.aspx)\n- [Programming the Thread Pool in the .NET Framework](https://msdn.microsoft.com/en-us/library/ms973903.aspx)\n- [DiagnoseRedisErrors-ClientSide](https://gist.github.com/JonCole/db0e90bedeb3fc4823c2)\n- [ThreadPool](https://gist.github.com/JonCole/e65411214030f0d823cb)\n\n(fin)","slug":"aspdotnet_threadpool_and_redis","published":1,"updated":"2016-11-22T03:41:18.847Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwawm31c000d38optwmu2gng","content":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><p><em>這是一篇有關 ASP.NET Thread Pool 與 StackExchange.Redis 的文章</em><br><em>記錄著 Thread Pool 的機制如何影響 Redis</em></p>\n<h3 id=\"Thread-Pool-500ms-的機制\"><a href=\"#Thread-Pool-500ms-的機制\" class=\"headerlink\" title=\"Thread Pool 500ms 的機制\"></a>Thread Pool 500ms 的機制</h3><p>ASP.NET Thread Pool 的排隊機制與<code>minworkerthread</code> 設定值相關。<br>可以透過調整 <code>machine.config</code> 來修正。</p>\n<h3 id=\"官方說明\"><a href=\"#官方說明\" class=\"headerlink\" title=\"官方說明\"></a>官方說明</h3><ul>\n<li><a href=\"https://support.microsoft.com/zh-tw/kb/821268\" target=\"_blank\" rel=\"external\">爭用、 效能不佳、 和死結 （deadlock） 當您從 ASP.NET 應用程式呼叫 Web 服務</a></li>\n<li>machine.config</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">system.web</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">processModel</span> <span class=\"attr\">autoConfig</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">maxWorkerThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">maxIoThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">minWorkerThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">minIoThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">requestQueueLimit</span>=<span class=\"string\">\"5000\"</span> <span class=\"attr\">responseDeadlockInterval</span>=<span class=\"string\">\"00:03:00\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">httpRuntime</span> <span class=\"attr\">minFreeThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">minLocalRequestFreeThreads</span>=<span class=\"string\">\"xxx\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">system.web</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"建議的設定值\"><a href=\"#建議的設定值\" class=\"headerlink\" title=\"建議的設定值\"></a>建議的設定值</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">system.web</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">processModel</span> <span class=\"attr\">autoConfig</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">minWorkerThreads</span>=<span class=\"string\">\"1\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">system.web</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><em>一種簡化的說法「 ASP.NET Thread Pool 一秒能建立2個Thread。」</em>  </p>\n<p>真正的原理如下:<br>設定值 <code>minworkerthread</code> 就像是遊樂場<em>已經開啟</em>的閘門,<br>每當有一個遊客(Task)進來時,立即提供給它使用。<br>但是當遊客(Task)變多的時候,就會開始排隊(Queue),<br>ASP.NET Thread Pool 隱含著一個機制,<br>當它的隊伍(Queue)長達500豪秒沒有移動的話,<br>就會開啟新的閘門(建立新的Thread)。<br>而我的情境屬於<a href=\"#burst_of_traffic\">Burst of traffic</a>,<br>突然大量 Task 湧入 Queue ,<br>ThreadPool 需要大量的 Thread<br>每個新的 Thread 都需要 500ms 的反應時間 ,<br>而累積的時間超過 Task 的 Timeout 設定值時 ,<br>就會拋出Exception. </p>\n<p><img src=\"/images/workerthread_and_iothread/110416_103521_AM.jpg\" alt=\"ASP.NET Thread Pool\"></p>\n<h3 id=\"與CPU的關係\"><a href=\"#與CPU的關係\" class=\"headerlink\" title=\"與CPU的關係\"></a>與CPU的關係</h3><p><code>minworkerthread</code> 的預設值是 1 。<br>但是會與執行環境的CPU個數有關,<br>假設你是四核的主機,那就要乘上 4。  </p>\n<hr>\n<h3 id=\"System-TimeoutException\"><a href=\"#System-TimeoutException\" class=\"headerlink\" title=\"System.TimeoutException\"></a>System.TimeoutException</h3><p>當StackExchange.Redis在進行同步作業的時候,<br>如果超過 <code>synctimeout</code> 的設定值(預設是1000ms),<br>就會拋出類似以下的錯誤</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Timeout performing SETEX Cache:Prod:WebAPI:Key:<span class=\"number\">20161121152607</span>, inst: <span class=\"number\">18</span>, mgr: ExecuteSelect, err: never,  </div><div class=\"line\">queue: <span class=\"number\">0</span>, qu: <span class=\"number\">0</span>, qs: <span class=\"number\">0</span>, qc: <span class=\"number\">0</span>, wr: <span class=\"number\">0</span>, wq: <span class=\"number\">0</span>, <span class=\"keyword\">in</span>: <span class=\"number\">0</span>, ar: <span class=\"number\">1</span>,  </div><div class=\"line\">IOCP: (Busy=<span class=\"number\">0</span>,Free=<span class=\"number\">1000</span>,Min=<span class=\"number\">8</span>,Max=<span class=\"number\">1000</span>), WORKER: (Busy=<span class=\"number\">13</span>,Free=<span class=\"number\">32754</span>,Min=<span class=\"number\">8</span>,Max=<span class=\"number\">32767</span>), clientName: TYO-MWEB</div></pre></td></tr></table></figure>\n<ul>\n<li>Redis Command - <a href=\"http://redis.io/commands\" target=\"_blank\" rel=\"external\">參考</a>  </li>\n</ul>\n<p>拆解錯誤如下:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Timeout performing &#123;&#123;Redis Command&#125;&#125; &#123;&#123;Redis Key&#125;&#125;, inst: &#123;&#123;inst&#125;&#125;, mgr:&#123;&#123;mgr&#125;&#125; , err: &#123;&#123;err&#125;&#125;,  </div><div class=\"line\">queue: &#123;&#123;queue&#125;&#125;, qu: &#123;&#123;qu&#125;&#125;, qs: &#123;&#123;qs&#125;&#125;, qc: &#123;&#123;qc&#125;&#125;, wr: &#123;&#123;wr&#125;&#125;, wq: &#123;&#123;wq&#125;&#125;, <span class=\"keyword\">in</span>: &#123;&#123;<span class=\"keyword\">in</span>&#125;&#125;, ar: &#123;&#123;ar&#125;&#125;,  </div><div class=\"line\">IOCP: (Busy=<span class=\"number\">0</span>,Free=<span class=\"number\">1000</span>,Min=<span class=\"number\">8</span>,Max=<span class=\"number\">1000</span>), WORKER: (Busy=<span class=\"number\">13</span>,Free=<span class=\"number\">32754</span>,Min=<span class=\"number\">8</span>,Max=<span class=\"number\">32767</span>), clientName: &#123;&#123;clientName&#125;&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Redis Key - Redis Key</li>\n<li>其他參數說明</li>\n</ul>\n<p>範例<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.TimeoutException: Timeout performing MGET <span class=\"number\">2728</span>cc84<span class=\"number\">-58</span>ae<span class=\"number\">-406</span>b<span class=\"number\">-8</span>ec8<span class=\"number\">-3</span>f962419f641,  </div><div class=\"line\">inst: <span class=\"number\">1</span>,mgr: Inactive, queue: <span class=\"number\">73</span>, qu=<span class=\"number\">6</span>, qs=<span class=\"number\">67</span>, qc=<span class=\"number\">0</span>, wr=<span class=\"number\">1</span>/<span class=\"number\">1</span>, <span class=\"keyword\">in</span>=<span class=\"number\">0</span>/<span class=\"number\">0</span>  </div><div class=\"line\">IOCP: (Busy=<span class=\"number\">6</span>, Free=<span class=\"number\">999</span>, Min=<span class=\"number\">2</span>,Max=<span class=\"number\">1000</span>), WORKER (Busy=<span class=\"number\">7</span>,Free=<span class=\"number\">8184</span>,Min=<span class=\"number\">2</span>,Max=<span class=\"number\">8191</span>)</div></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th>Error code</th>\n<th>Details</th>\n<th>範例</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>inst</td>\n<td>in the last time slice: 0 commands have been issued</td>\n<td>在最後時脈：已發出0個命令</td>\n<td>最後的時脈發出的命令個數</td>\n</tr>\n<tr>\n<td>mgr</td>\n<td>the socket manager is performing “socket.select”, <br>which means it is asking the OS to indicate a socket <br>that has something to do; <br> basically: the reader is not actively reading from <br>the network because it doesn’t think there<br> is anything to do</td>\n<td></td>\n<td>最後的操作命令</td>\n</tr>\n<tr>\n<td>queue</td>\n<td>there are 73 total in-progress operations</td>\n<td>73個正在排隊中的操作</td>\n<td>正在排隊中的操作</td>\n</tr>\n<tr>\n<td>qu</td>\n<td>6 of those are in unsent queue: they have not yet been written to the outbound network</td>\n<td>6個未發送的queue</td>\n<td>未發送的queue</td>\n</tr>\n<tr>\n<td>qs</td>\n<td>67 of those have been sent to the server but a response is not yet available.  The response could be: Not yet sent by the server sent by the server but not yet processed by the client.</td>\n<td>67個已發送的queue</td>\n<td>已發送的queue</td>\n</tr>\n<tr>\n<td>qc</td>\n<td>0 of those have seen replies but have not yet been marked as complete due to waiting on the completion loop</td>\n<td>0個已發送未標記完成的queue</td>\n<td>已發送未標記完成的queue</td>\n</tr>\n<tr>\n<td>wr</td>\n<td>there is an active writer (meaning - those 6 unsent are not being ignored) bytes/activewriters</td>\n<td>有 1 個啟用的writer,(意味著qu的工作並沒有被忽略) bytes/activewriters</td>\n<td>bytes/activewriters</td>\n</tr>\n<tr>\n<td>in</td>\n<td>there are no active readers and zero bytes are available to be read on the NIC bytes/activereaders</td>\n<td>0個reader</td>\n<td>bytes/activereaders</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"其它的-Redis-Error-情境\"><a href=\"#其它的-Redis-Error-情境\" class=\"headerlink\" title=\"其它的 Redis Error 情境\"></a>其它的 Redis Error 情境</h2><p>只作摘要式的翻譯。</p>\n<h3 id=\"Memory-pressure-記憶體壓力\"><a href=\"#Memory-pressure-記憶體壓力\" class=\"headerlink\" title=\"Memory pressure (記憶體壓力)\"></a>Memory pressure (記憶體壓力)</h3><p><code>Problem:</code><br>記憶體不足而開始讀取虛擬記憶體(磁碟)而導致特能低落。<br>Memory pressure on the client machine leads to all kinds of performance problems that can<br>delay processing of data that was sent by the Redis instance without any delay.<br>When memory pressure hits, the system typically has to page data from physical memory to<br>virtual memory which is on disk. This page faulting causes the system to slow down significantly.  </p>\n<p><code>Measurement:</code><br>Monitory memory usage on machine to make sure that it does not exceed available memory.<br>Monitor the Page Faults/Sec perf counter. Most systems will have some page faults even during<br>normal operation, so watch for spikes in this page faults perf counter which correspond with timeouts.  </p>\n<p><code>Resolution:</code><br>增加記憶體或是減少記憶體使用量<br>Upgrade to a larger client VM size with more memory or dig into your memory usage patterns<br>to reduce memory consuption.  </p>\n<hr>\n<h3 id=\"Burst-of-traffic\"><a href=\"#Burst-of-traffic\" class=\"headerlink\" title=\"Burst of traffic\"></a><span style=\"color:red;\" id=\"burst_of_traffic\">Burst of traffic</span></h3><p><code>Problem:</code><br>ThreadPool突然大量的工作湧入queue導致執行緒來不及建立。<br> Bursts of traffic combined with poor ThreadPool settings can result in delays in processing<br> data already sent by the Redis Server but not yet consumed on the client side.  </p>\n<p><code>測量:</code><br>可以用<a href=\"https://github.com/JonCole/SampleCode/blob/master/ThreadPoolMonitor/ThreadPoolLogger.cs\" target=\"_blank\" rel=\"external\">程式</a>監控 ThreadPool .<br>或是單純透過 TimeoutException 的訊息,觀察IOCP與WORKER的Busy值來判斷.<br><code>Measurement:</code><br>Monitor how your ThreadPool statistics change over time using code like <a href=\"https://github.com/JonCole/SampleCode/blob/master/ThreadPoolMonitor/ThreadPoolLogger.cs\" target=\"_blank\" rel=\"external\">this</a>.<br>You can also look at the TimeoutException message from StackExchange.Redis.<br>Here is an example :  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.TimeoutException: Timeout performing EVAL, inst: <span class=\"number\">8</span>, mgr: Inactive, queue: <span class=\"number\">0</span>, qu: <span class=\"number\">0</span>, qs: <span class=\"number\">0</span>, qc: <span class=\"number\">0</span>, wr: <span class=\"number\">0</span>, wq: <span class=\"number\">0</span>, <span class=\"keyword\">in</span>: <span class=\"number\">64221</span>, ar: <span class=\"number\">0</span>, </div><div class=\"line\">IOCP: (Busy=<span class=\"number\">6</span>,Free=<span class=\"number\">999</span>,Min=<span class=\"number\">2</span>,Max=<span class=\"number\">1000</span>), WORKER: (Busy=<span class=\"number\">7</span>,Free=<span class=\"number\">8184</span>,Min=<span class=\"number\">2</span>,Max=<span class=\"number\">8191</span>)</div></pre></td></tr></table></figure>\n<p>In the above message, there are several issues that are interesting:<br>Notice that in the “IOCP” section and the “WORKER” section you have a “Busy” value that is<br>greater than the “Min” value. This means that your threadpool settings need adjusting.<br>You can also see “in: 64221”. This indicates that 64211 bytes have been received at the kernel<br>socket layer but haven’t yet been read by the application (e.g. StackExchange.Redis).<br>This typically means that your application isn’t reading data from the network as quickly as<br>the server is sending it to you.  </p>\n<p><code>Resolution:</code><br>調整ThreadPool設定<br>Configure your ThreadPool Settings to make sure that your threadpool will scale up quickly under burst scenarios.</p>\n<hr>\n<h3 id=\"High-CPU-usage-CPU-過載\"><a href=\"#High-CPU-usage-CPU-過載\" class=\"headerlink\" title=\"High CPU usage (CPU 過載)\"></a>High CPU usage (CPU 過載)</h3><p><code>Problem:</code><br>High CPU usage on the client is an indication that the system cannot keep up with the work that it has been asked to perform. High CPU is a problem because the CPU is busy and it can’t keep up with the work the application is asking it to do. The response from Redis can come very quickly, but because the CPU isn’t keeping up with the workload, the response sits in the socket’s kernel buffer waiting to be processed. If the delay is long enough, a timeout occurs in spite of the requested data having already arrived from the server.</p>\n<p><code>Measurement:</code><br>Monitor the System Wide CPU usage through the azure portal or through the associated perf counter.<br>Be careful not to monitor process CPU because a single process can have low CPU usage at the same time that overall system CPU can be high.<br>Watch for spikes in CPU usage that correspond with timeouts. As a result of high CPU,<br>you may also see high “in: XXX” values in TimeoutException error messages as described above in the “Burst of traffic” section.<br>Note that in newer builds of StackExchange.Redis, the client-side CPU will be printed out in the timeout error message as long as the environment doesn’t block access to the CPU perf counter.</p>\n<p><code>Note:</code><br>StackExchange.Redis version 1.1.603 or later now prints out “local-cpu” usage when a timeout occurs to help understand when client-side CPU usage may be affecting performance.</p>\n<p><code>Resolution:</code><br>增加CPU或是找出CPU產生過載的原因<br>Upgrade to a larger VM size with more CPU capacity or investigate what is causing CPU spikes.</p>\n<hr>\n<h3 id=\"Client-Side-Bandwidth-Exceeded-頻寬不足\"><a href=\"#Client-Side-Bandwidth-Exceeded-頻寬不足\" class=\"headerlink\" title=\"Client Side Bandwidth Exceeded (頻寬不足)\"></a>Client Side Bandwidth Exceeded (頻寬不足)</h3><p><code>Problem:</code><br>Different sized client machines have limitations on how much network bandwidth they have available.<br>If the client exceeds the available bandwidth, then data will not be processed on the client side as quickly as the server is sending it. This can lead to timeouts.</p>\n<p><code>Measurement:</code><br>Monitor how your Bandwidth usage change over time using code like this. Note that this code may not run successfully in some environments with restricted permissions (like Azure WebSites).</p>\n<p><code>Resolution:</code><br>加大頻寬或減少使用量<br>Increase Client VM size or reduce network bandwidth consumption.</p>\n<hr>\n<h3 id=\"Large-Request-Response-Size-過大的請求-回應量\"><a href=\"#Large-Request-Response-Size-過大的請求-回應量\" class=\"headerlink\" title=\"Large Request/Response Size (過大的請求/回應量)\"></a>Large Request/Response Size (過大的請求/回應量)</h3><p><code>Problem:</code><br>如圖所示,A與B兩個Request都太過龐大,當同時發動請求時,<br>A 回應的時間過長, 導致 B 的Timeout<br>A large request/response can cause timeouts. As an example, suppose your timeout value configured is 1 second.<br>Your application requests two keys (e.g. ‘A’ and ‘B’) at the same time using the same physical network connection.<br>Most clients support “Pipelining” of requests, such that both requests ‘A’ and ‘B’ are sent on the wire to the server one after the other without waiting for the responses.<br>The server will send the responses back in the same order. If response ‘A’ is large enough it can eat up most of the timeout for subsequent requests.</p>\n<p>Below, I will try to demonstrate this. In this scenario, Request ‘A’ and ‘B’ are sent quickly,<br>the server starts sending responses ‘A’ and ‘B’ quickly, but because of data transfer times,<br>‘B’ get stuck behind the other request and times out even though the server responded quickly.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">|-------- 1 Second Timeout (A)----------|</div><div class=\"line\">|-Request A-|</div><div class=\"line\">     |-------- 1 Second Timeout (B) ----------|</div><div class=\"line\">     |-Request B-|</div><div class=\"line\">            |- Read Response A --------|</div><div class=\"line\">                                       |- Read Response B-| (**TIMEOUT**)</div></pre></td></tr></table></figure>\n<p><code>Measurement:</code><br>This is a difficult one to measure. You basically have to instrument your client code to track large requests and responses.</p>\n<p><code>Resolution:</code><br>將所需要的資料分割成數個小片段 再分別取回<br>Redis is optimized for a large number of small values, rather than a few large values.<br>The preferred solution is to break up your data into related smaller values. See here for details around why smaller values are recommended.<br>Increase the size of your VM (for client and Redis Cache Server), to get higher bandwidth capabilities, reducing data transfer times for larger responses.<br>Note that getting more bandwidth on just the server or just on the client may not be enough.<br>Measure your bandwidth usage and compare it to the capabilities of the size of VM you currently have.<br>Increase the number of ConnectionMultiplexer objects you use and round-robin requests over different connections (e.g. use a connection pool).<br>If you go this route, make sure that you don’t create a brand new ConnectionMultiplexer for each request as the overhead of creating the new connection will kill your performance.</p>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx\" target=\"_blank\" rel=\"external\">Threading</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms998549.aspx\" target=\"_blank\" rel=\"external\">Improving ASP.NET Performance</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms973903.aspx\" target=\"_blank\" rel=\"external\">Programming the Thread Pool in the .NET Framework</a></li>\n<li><a href=\"https://gist.github.com/JonCole/db0e90bedeb3fc4823c2\" target=\"_blank\" rel=\"external\">DiagnoseRedisErrors-ClientSide</a></li>\n<li><a href=\"https://gist.github.com/JonCole/e65411214030f0d823cb\" target=\"_blank\" rel=\"external\">ThreadPool</a></li>\n</ul>\n<p>(fin)</p>\n","excerpt":"","more":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><p><em>這是一篇有關 ASP.NET Thread Pool 與 StackExchange.Redis 的文章</em><br><em>記錄著 Thread Pool 的機制如何影響 Redis</em></p>\n<h3 id=\"Thread-Pool-500ms-的機制\"><a href=\"#Thread-Pool-500ms-的機制\" class=\"headerlink\" title=\"Thread Pool 500ms 的機制\"></a>Thread Pool 500ms 的機制</h3><p>ASP.NET Thread Pool 的排隊機制與<code>minworkerthread</code> 設定值相關。<br>可以透過調整 <code>machine.config</code> 來修正。</p>\n<h3 id=\"官方說明\"><a href=\"#官方說明\" class=\"headerlink\" title=\"官方說明\"></a>官方說明</h3><ul>\n<li><a href=\"https://support.microsoft.com/zh-tw/kb/821268\">爭用、 效能不佳、 和死結 （deadlock） 當您從 ASP.NET 應用程式呼叫 Web 服務</a></li>\n<li>machine.config</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">system.web</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">processModel</span> <span class=\"attr\">autoConfig</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">maxWorkerThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">maxIoThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">minWorkerThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">minIoThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">requestQueueLimit</span>=<span class=\"string\">\"5000\"</span> <span class=\"attr\">responseDeadlockInterval</span>=<span class=\"string\">\"00:03:00\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">httpRuntime</span> <span class=\"attr\">minFreeThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">minLocalRequestFreeThreads</span>=<span class=\"string\">\"xxx\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">system.web</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"建議的設定值\"><a href=\"#建議的設定值\" class=\"headerlink\" title=\"建議的設定值\"></a>建議的設定值</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">system.web</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">processModel</span> <span class=\"attr\">autoConfig</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">minWorkerThreads</span>=<span class=\"string\">\"1\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">system.web</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><em>一種簡化的說法「 ASP.NET Thread Pool 一秒能建立2個Thread。」</em>  </p>\n<p>真正的原理如下:<br>設定值 <code>minworkerthread</code> 就像是遊樂場<em>已經開啟</em>的閘門,<br>每當有一個遊客(Task)進來時,立即提供給它使用。<br>但是當遊客(Task)變多的時候,就會開始排隊(Queue),<br>ASP.NET Thread Pool 隱含著一個機制,<br>當它的隊伍(Queue)長達500豪秒沒有移動的話,<br>就會開啟新的閘門(建立新的Thread)。<br>而我的情境屬於<a href=\"#burst_of_traffic\">Burst of traffic</a>,<br>突然大量 Task 湧入 Queue ,<br>ThreadPool 需要大量的 Thread<br>每個新的 Thread 都需要 500ms 的反應時間 ,<br>而累積的時間超過 Task 的 Timeout 設定值時 ,<br>就會拋出Exception. </p>\n<p><img src=\"/images/workerthread_and_iothread/110416_103521_AM.jpg\" alt=\"ASP.NET Thread Pool\"></p>\n<h3 id=\"與CPU的關係\"><a href=\"#與CPU的關係\" class=\"headerlink\" title=\"與CPU的關係\"></a>與CPU的關係</h3><p><code>minworkerthread</code> 的預設值是 1 。<br>但是會與執行環境的CPU個數有關,<br>假設你是四核的主機,那就要乘上 4。  </p>\n<hr>\n<h3 id=\"System-TimeoutException\"><a href=\"#System-TimeoutException\" class=\"headerlink\" title=\"System.TimeoutException\"></a>System.TimeoutException</h3><p>當StackExchange.Redis在進行同步作業的時候,<br>如果超過 <code>synctimeout</code> 的設定值(預設是1000ms),<br>就會拋出類似以下的錯誤</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Timeout performing SETEX Cache:Prod:WebAPI:Key:<span class=\"number\">20161121152607</span>, inst: <span class=\"number\">18</span>, mgr: ExecuteSelect, err: never,  </div><div class=\"line\">queue: <span class=\"number\">0</span>, qu: <span class=\"number\">0</span>, qs: <span class=\"number\">0</span>, qc: <span class=\"number\">0</span>, wr: <span class=\"number\">0</span>, wq: <span class=\"number\">0</span>, <span class=\"keyword\">in</span>: <span class=\"number\">0</span>, ar: <span class=\"number\">1</span>,  </div><div class=\"line\">IOCP: (Busy=<span class=\"number\">0</span>,Free=<span class=\"number\">1000</span>,Min=<span class=\"number\">8</span>,Max=<span class=\"number\">1000</span>), WORKER: (Busy=<span class=\"number\">13</span>,Free=<span class=\"number\">32754</span>,Min=<span class=\"number\">8</span>,Max=<span class=\"number\">32767</span>), clientName: TYO-MWEB</div></pre></td></tr></table></figure>\n<ul>\n<li>Redis Command - <a href=\"http://redis.io/commands\">參考</a>  </li>\n</ul>\n<p>拆解錯誤如下:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Timeout performing &#123;&#123;Redis Command&#125;&#125; &#123;&#123;Redis Key&#125;&#125;, inst: &#123;&#123;inst&#125;&#125;, mgr:&#123;&#123;mgr&#125;&#125; , err: &#123;&#123;err&#125;&#125;,  </div><div class=\"line\">queue: &#123;&#123;queue&#125;&#125;, qu: &#123;&#123;qu&#125;&#125;, qs: &#123;&#123;qs&#125;&#125;, qc: &#123;&#123;qc&#125;&#125;, wr: &#123;&#123;wr&#125;&#125;, wq: &#123;&#123;wq&#125;&#125;, <span class=\"keyword\">in</span>: &#123;&#123;<span class=\"keyword\">in</span>&#125;&#125;, ar: &#123;&#123;ar&#125;&#125;,  </div><div class=\"line\">IOCP: (Busy=<span class=\"number\">0</span>,Free=<span class=\"number\">1000</span>,Min=<span class=\"number\">8</span>,Max=<span class=\"number\">1000</span>), WORKER: (Busy=<span class=\"number\">13</span>,Free=<span class=\"number\">32754</span>,Min=<span class=\"number\">8</span>,Max=<span class=\"number\">32767</span>), clientName: &#123;&#123;clientName&#125;&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Redis Key - Redis Key</li>\n<li>其他參數說明</li>\n</ul>\n<p>範例<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.TimeoutException: Timeout performing MGET <span class=\"number\">2728</span>cc84<span class=\"number\">-58</span>ae<span class=\"number\">-406</span>b<span class=\"number\">-8</span>ec8<span class=\"number\">-3</span>f962419f641,  </div><div class=\"line\">inst: <span class=\"number\">1</span>,mgr: Inactive, queue: <span class=\"number\">73</span>, qu=<span class=\"number\">6</span>, qs=<span class=\"number\">67</span>, qc=<span class=\"number\">0</span>, wr=<span class=\"number\">1</span>/<span class=\"number\">1</span>, <span class=\"keyword\">in</span>=<span class=\"number\">0</span>/<span class=\"number\">0</span>  </div><div class=\"line\">IOCP: (Busy=<span class=\"number\">6</span>, Free=<span class=\"number\">999</span>, Min=<span class=\"number\">2</span>,Max=<span class=\"number\">1000</span>), WORKER (Busy=<span class=\"number\">7</span>,Free=<span class=\"number\">8184</span>,Min=<span class=\"number\">2</span>,Max=<span class=\"number\">8191</span>)</div></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th>Error code</th>\n<th>Details</th>\n<th>範例</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>inst</td>\n<td>in the last time slice: 0 commands have been issued</td>\n<td>在最後時脈：已發出0個命令</td>\n<td>最後的時脈發出的命令個數</td>\n</tr>\n<tr>\n<td>mgr</td>\n<td>the socket manager is performing “socket.select”, <br />which means it is asking the OS to indicate a socket <br />that has something to do; <br /> basically: the reader is not actively reading from <br />the network because it doesn’t think there<br /> is anything to do</td>\n<td></td>\n<td>最後的操作命令</td>\n</tr>\n<tr>\n<td>queue</td>\n<td>there are 73 total in-progress operations</td>\n<td>73個正在排隊中的操作</td>\n<td>正在排隊中的操作</td>\n</tr>\n<tr>\n<td>qu</td>\n<td>6 of those are in unsent queue: they have not yet been written to the outbound network</td>\n<td>6個未發送的queue</td>\n<td>未發送的queue</td>\n</tr>\n<tr>\n<td>qs</td>\n<td>67 of those have been sent to the server but a response is not yet available.  The response could be: Not yet sent by the server sent by the server but not yet processed by the client.</td>\n<td>67個已發送的queue</td>\n<td>已發送的queue</td>\n</tr>\n<tr>\n<td>qc</td>\n<td>0 of those have seen replies but have not yet been marked as complete due to waiting on the completion loop</td>\n<td>0個已發送未標記完成的queue</td>\n<td>已發送未標記完成的queue</td>\n</tr>\n<tr>\n<td>wr</td>\n<td>there is an active writer (meaning - those 6 unsent are not being ignored) bytes/activewriters</td>\n<td>有 1 個啟用的writer,(意味著qu的工作並沒有被忽略) bytes/activewriters</td>\n<td>bytes/activewriters</td>\n</tr>\n<tr>\n<td>in</td>\n<td>there are no active readers and zero bytes are available to be read on the NIC bytes/activereaders</td>\n<td>0個reader</td>\n<td>bytes/activereaders</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"其它的-Redis-Error-情境\"><a href=\"#其它的-Redis-Error-情境\" class=\"headerlink\" title=\"其它的 Redis Error 情境\"></a>其它的 Redis Error 情境</h2><p>只作摘要式的翻譯。</p>\n<h3 id=\"Memory-pressure-記憶體壓力\"><a href=\"#Memory-pressure-記憶體壓力\" class=\"headerlink\" title=\"Memory pressure (記憶體壓力)\"></a>Memory pressure (記憶體壓力)</h3><p><code>Problem:</code><br>記憶體不足而開始讀取虛擬記憶體(磁碟)而導致特能低落。<br>Memory pressure on the client machine leads to all kinds of performance problems that can<br>delay processing of data that was sent by the Redis instance without any delay.<br>When memory pressure hits, the system typically has to page data from physical memory to<br>virtual memory which is on disk. This page faulting causes the system to slow down significantly.  </p>\n<p><code>Measurement:</code><br>Monitory memory usage on machine to make sure that it does not exceed available memory.<br>Monitor the Page Faults/Sec perf counter. Most systems will have some page faults even during<br>normal operation, so watch for spikes in this page faults perf counter which correspond with timeouts.  </p>\n<p><code>Resolution:</code><br>增加記憶體或是減少記憶體使用量<br>Upgrade to a larger client VM size with more memory or dig into your memory usage patterns<br>to reduce memory consuption.  </p>\n<hr>\n<h3 id=\"Burst-of-traffic\"><a href=\"#Burst-of-traffic\" class=\"headerlink\" title=\"Burst of traffic\"></a><span style=\"color:red;\" id=\"burst_of_traffic\">Burst of traffic</span></h3><p><code>Problem:</code><br>ThreadPool突然大量的工作湧入queue導致執行緒來不及建立。<br> Bursts of traffic combined with poor ThreadPool settings can result in delays in processing<br> data already sent by the Redis Server but not yet consumed on the client side.  </p>\n<p><code>測量:</code><br>可以用<a href=\"https://github.com/JonCole/SampleCode/blob/master/ThreadPoolMonitor/ThreadPoolLogger.cs\">程式</a>監控 ThreadPool .<br>或是單純透過 TimeoutException 的訊息,觀察IOCP與WORKER的Busy值來判斷.<br><code>Measurement:</code><br>Monitor how your ThreadPool statistics change over time using code like <a href=\"https://github.com/JonCole/SampleCode/blob/master/ThreadPoolMonitor/ThreadPoolLogger.cs\">this</a>.<br>You can also look at the TimeoutException message from StackExchange.Redis.<br>Here is an example :  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.TimeoutException: Timeout performing EVAL, inst: <span class=\"number\">8</span>, mgr: Inactive, queue: <span class=\"number\">0</span>, qu: <span class=\"number\">0</span>, qs: <span class=\"number\">0</span>, qc: <span class=\"number\">0</span>, wr: <span class=\"number\">0</span>, wq: <span class=\"number\">0</span>, <span class=\"keyword\">in</span>: <span class=\"number\">64221</span>, ar: <span class=\"number\">0</span>, </div><div class=\"line\">IOCP: (Busy=<span class=\"number\">6</span>,Free=<span class=\"number\">999</span>,Min=<span class=\"number\">2</span>,Max=<span class=\"number\">1000</span>), WORKER: (Busy=<span class=\"number\">7</span>,Free=<span class=\"number\">8184</span>,Min=<span class=\"number\">2</span>,Max=<span class=\"number\">8191</span>)</div></pre></td></tr></table></figure>\n<p>In the above message, there are several issues that are interesting:<br>Notice that in the “IOCP” section and the “WORKER” section you have a “Busy” value that is<br>greater than the “Min” value. This means that your threadpool settings need adjusting.<br>You can also see “in: 64221”. This indicates that 64211 bytes have been received at the kernel<br>socket layer but haven’t yet been read by the application (e.g. StackExchange.Redis).<br>This typically means that your application isn’t reading data from the network as quickly as<br>the server is sending it to you.  </p>\n<p><code>Resolution:</code><br>調整ThreadPool設定<br>Configure your ThreadPool Settings to make sure that your threadpool will scale up quickly under burst scenarios.</p>\n<hr>\n<h3 id=\"High-CPU-usage-CPU-過載\"><a href=\"#High-CPU-usage-CPU-過載\" class=\"headerlink\" title=\"High CPU usage (CPU 過載)\"></a>High CPU usage (CPU 過載)</h3><p><code>Problem:</code><br>High CPU usage on the client is an indication that the system cannot keep up with the work that it has been asked to perform. High CPU is a problem because the CPU is busy and it can’t keep up with the work the application is asking it to do. The response from Redis can come very quickly, but because the CPU isn’t keeping up with the workload, the response sits in the socket’s kernel buffer waiting to be processed. If the delay is long enough, a timeout occurs in spite of the requested data having already arrived from the server.</p>\n<p><code>Measurement:</code><br>Monitor the System Wide CPU usage through the azure portal or through the associated perf counter.<br>Be careful not to monitor process CPU because a single process can have low CPU usage at the same time that overall system CPU can be high.<br>Watch for spikes in CPU usage that correspond with timeouts. As a result of high CPU,<br>you may also see high “in: XXX” values in TimeoutException error messages as described above in the “Burst of traffic” section.<br>Note that in newer builds of StackExchange.Redis, the client-side CPU will be printed out in the timeout error message as long as the environment doesn’t block access to the CPU perf counter.</p>\n<p><code>Note:</code><br>StackExchange.Redis version 1.1.603 or later now prints out “local-cpu” usage when a timeout occurs to help understand when client-side CPU usage may be affecting performance.</p>\n<p><code>Resolution:</code><br>增加CPU或是找出CPU產生過載的原因<br>Upgrade to a larger VM size with more CPU capacity or investigate what is causing CPU spikes.</p>\n<hr>\n<h3 id=\"Client-Side-Bandwidth-Exceeded-頻寬不足\"><a href=\"#Client-Side-Bandwidth-Exceeded-頻寬不足\" class=\"headerlink\" title=\"Client Side Bandwidth Exceeded (頻寬不足)\"></a>Client Side Bandwidth Exceeded (頻寬不足)</h3><p><code>Problem:</code><br>Different sized client machines have limitations on how much network bandwidth they have available.<br>If the client exceeds the available bandwidth, then data will not be processed on the client side as quickly as the server is sending it. This can lead to timeouts.</p>\n<p><code>Measurement:</code><br>Monitor how your Bandwidth usage change over time using code like this. Note that this code may not run successfully in some environments with restricted permissions (like Azure WebSites).</p>\n<p><code>Resolution:</code><br>加大頻寬或減少使用量<br>Increase Client VM size or reduce network bandwidth consumption.</p>\n<hr>\n<h3 id=\"Large-Request-Response-Size-過大的請求-回應量\"><a href=\"#Large-Request-Response-Size-過大的請求-回應量\" class=\"headerlink\" title=\"Large Request/Response Size (過大的請求/回應量)\"></a>Large Request/Response Size (過大的請求/回應量)</h3><p><code>Problem:</code><br>如圖所示,A與B兩個Request都太過龐大,當同時發動請求時,<br>A 回應的時間過長, 導致 B 的Timeout<br>A large request/response can cause timeouts. As an example, suppose your timeout value configured is 1 second.<br>Your application requests two keys (e.g. ‘A’ and ‘B’) at the same time using the same physical network connection.<br>Most clients support “Pipelining” of requests, such that both requests ‘A’ and ‘B’ are sent on the wire to the server one after the other without waiting for the responses.<br>The server will send the responses back in the same order. If response ‘A’ is large enough it can eat up most of the timeout for subsequent requests.</p>\n<p>Below, I will try to demonstrate this. In this scenario, Request ‘A’ and ‘B’ are sent quickly,<br>the server starts sending responses ‘A’ and ‘B’ quickly, but because of data transfer times,<br>‘B’ get stuck behind the other request and times out even though the server responded quickly.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">|-------- 1 Second Timeout (A)----------|</div><div class=\"line\">|-Request A-|</div><div class=\"line\">     |-------- 1 Second Timeout (B) ----------|</div><div class=\"line\">     |-Request B-|</div><div class=\"line\">            |- Read Response A --------|</div><div class=\"line\">                                       |- Read Response B-| (**TIMEOUT**)</div></pre></td></tr></table></figure>\n<p><code>Measurement:</code><br>This is a difficult one to measure. You basically have to instrument your client code to track large requests and responses.</p>\n<p><code>Resolution:</code><br>將所需要的資料分割成數個小片段 再分別取回<br>Redis is optimized for a large number of small values, rather than a few large values.<br>The preferred solution is to break up your data into related smaller values. See here for details around why smaller values are recommended.<br>Increase the size of your VM (for client and Redis Cache Server), to get higher bandwidth capabilities, reducing data transfer times for larger responses.<br>Note that getting more bandwidth on just the server or just on the client may not be enough.<br>Measure your bandwidth usage and compare it to the capabilities of the size of VM you currently have.<br>Increase the number of ConnectionMultiplexer objects you use and round-robin requests over different connections (e.g. use a connection pool).<br>If you go this route, make sure that you don’t create a brand new ConnectionMultiplexer for each request as the overhead of creating the new connection will kill your performance.</p>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx\">Threading</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms998549.aspx\">Improving ASP.NET Performance</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms973903.aspx\">Programming the Thread Pool in the .NET Framework</a></li>\n<li><a href=\"https://gist.github.com/JonCole/db0e90bedeb3fc4823c2\">DiagnoseRedisErrors-ClientSide</a></li>\n<li><a href=\"https://gist.github.com/JonCole/e65411214030f0d823cb\">ThreadPool</a></li>\n</ul>\n<p>(fin)</p>\n"},{"title":"有關 HTTP Header Content-Type","date":"2016-10-28T04:54:55.000Z","_content":"## 引言\n當我們對 Server 發出 request 的時候  \n需要註明你 request 的 Content-Type   \n以下簡單介紹一下這些格式  \n\n### 測試工具\n\n[PostMan](https://www.getpostman.com/)這套工具\n可以模擬不同的格式資料發動 request 到你的 Server\n\n---\n\n## Content-Type\n\n### `application/x-www-form-urlencoded`\n常用的Content-Type,簡單說就是KEY-VALUE的方式  \n如下, KEY firstname 的值是 marsen  \nlastname 是由使用者輸入\n\n```html\n<form>\n  First name:<br>\n  <input type=\"text\" name=\"firstname\" value=\"marsen\"><br>\n  Last name:<br>\n  <input type=\"text\" name=\"lastname\">\n</form>\n```\n同時資料會作一次url encoded,  \n產生類似下列的資料\nfirstname=marsen&lastname=lin&key%5b1%5d=value%5b1%5d\n\n---\n\n### `multipart/form-data` \n\nPostMan中的選項 `binary` 其實就是包成這種格式   \n上傳檔案會使用這種Content-Type,  \n這通常表示你的html element包含有 `<input type=\"file\">` \n\n---\n\n###  其它\nPostMan中的選項 `raw`,可以用字串組合成任意Content-Type,  \n參考[Content-Type Table](http://www.freeformatter.com/mime-types-list.html)  \n- `application/json`  \n目前主流的API會用輕巧的JSON作為傳遞資訊的媒介  \n- `text/xml`、`application/xml`  \n早期標準的Web服務通常會透過xml作為交換資訊的媒介  \n- `text/plain` \n有些email或debug的情況會使用text/plain作為Content-Type,但是一般的Request情況不建議使用  \n- 更多請參考[Spec](https://www.w3.org/TR/html5/forms.html#text/plain-encoding-algorithm)   \n\n---\n\n## 參考\n- https://imququ.com/post/four-ways-to-post-data-in-http.html\n- https://codeforgeek.com/2014/09/handle-get-post-request-express-4/\n- https://scotch.io/tutorials/use-expressjs-to-get-url-and-post-parameters\n- http://stackoverflow.com/questions/4832357/whats-the-difference-between-text-xml-vs-application-xml-for-webservice-respons?ref=mythemeco&t=pack\n- http://stackoverflow.com/questions/4526273/what-does-enctype-multipart-form-data-mean\n\n(fin)","source":"_posts/about_content_type.md","raw":"---\ntitle: 有關 HTTP Header Content-Type\ndate: 2016/10/28 12:54:55\ntag:\n  - post\n  - http\n  - html\n  - Content-Type\n---\n## 引言\n當我們對 Server 發出 request 的時候  \n需要註明你 request 的 Content-Type   \n以下簡單介紹一下這些格式  \n\n### 測試工具\n\n[PostMan](https://www.getpostman.com/)這套工具\n可以模擬不同的格式資料發動 request 到你的 Server\n\n---\n\n## Content-Type\n\n### `application/x-www-form-urlencoded`\n常用的Content-Type,簡單說就是KEY-VALUE的方式  \n如下, KEY firstname 的值是 marsen  \nlastname 是由使用者輸入\n\n```html\n<form>\n  First name:<br>\n  <input type=\"text\" name=\"firstname\" value=\"marsen\"><br>\n  Last name:<br>\n  <input type=\"text\" name=\"lastname\">\n</form>\n```\n同時資料會作一次url encoded,  \n產生類似下列的資料\nfirstname=marsen&lastname=lin&key%5b1%5d=value%5b1%5d\n\n---\n\n### `multipart/form-data` \n\nPostMan中的選項 `binary` 其實就是包成這種格式   \n上傳檔案會使用這種Content-Type,  \n這通常表示你的html element包含有 `<input type=\"file\">` \n\n---\n\n###  其它\nPostMan中的選項 `raw`,可以用字串組合成任意Content-Type,  \n參考[Content-Type Table](http://www.freeformatter.com/mime-types-list.html)  \n- `application/json`  \n目前主流的API會用輕巧的JSON作為傳遞資訊的媒介  \n- `text/xml`、`application/xml`  \n早期標準的Web服務通常會透過xml作為交換資訊的媒介  \n- `text/plain` \n有些email或debug的情況會使用text/plain作為Content-Type,但是一般的Request情況不建議使用  \n- 更多請參考[Spec](https://www.w3.org/TR/html5/forms.html#text/plain-encoding-algorithm)   \n\n---\n\n## 參考\n- https://imququ.com/post/four-ways-to-post-data-in-http.html\n- https://codeforgeek.com/2014/09/handle-get-post-request-express-4/\n- https://scotch.io/tutorials/use-expressjs-to-get-url-and-post-parameters\n- http://stackoverflow.com/questions/4832357/whats-the-difference-between-text-xml-vs-application-xml-for-webservice-respons?ref=mythemeco&t=pack\n- http://stackoverflow.com/questions/4526273/what-does-enctype-multipart-form-data-mean\n\n(fin)","slug":"about_content_type","published":1,"updated":"2016-11-10T03:43:31.111Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwawm31g000e38opv4v7w7l3","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>當我們對 Server 發出 request 的時候<br>需要註明你 request 的 Content-Type<br>以下簡單介紹一下這些格式  </p>\n<h3 id=\"測試工具\"><a href=\"#測試工具\" class=\"headerlink\" title=\"測試工具\"></a>測試工具</h3><p><a href=\"https://www.getpostman.com/\" target=\"_blank\" rel=\"external\">PostMan</a>這套工具<br>可以模擬不同的格式資料發動 request 到你的 Server</p>\n<hr>\n<h2 id=\"Content-Type\"><a href=\"#Content-Type\" class=\"headerlink\" title=\"Content-Type\"></a>Content-Type</h2><h3 id=\"application-x-www-form-urlencoded\"><a href=\"#application-x-www-form-urlencoded\" class=\"headerlink\" title=\"application/x-www-form-urlencoded\"></a><code>application/x-www-form-urlencoded</code></h3><p>常用的Content-Type,簡單說就是KEY-VALUE的方式<br>如下, KEY firstname 的值是 marsen<br>lastname 是由使用者輸入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  First name:<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"firstname\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"marsen\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  Last name:<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lastname\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>同時資料會作一次url encoded,<br>產生類似下列的資料<br>firstname=marsen&amp;lastname=lin&amp;key%5b1%5d=value%5b1%5d</p>\n<hr>\n<h3 id=\"multipart-form-data\"><a href=\"#multipart-form-data\" class=\"headerlink\" title=\"multipart/form-data\"></a><code>multipart/form-data</code></h3><p>PostMan中的選項 <code>binary</code> 其實就是包成這種格式<br>上傳檔案會使用這種Content-Type,<br>這通常表示你的html element包含有 <code>&lt;input type=&quot;file&quot;&gt;</code> </p>\n<hr>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>PostMan中的選項 <code>raw</code>,可以用字串組合成任意Content-Type,<br>參考<a href=\"http://www.freeformatter.com/mime-types-list.html\" target=\"_blank\" rel=\"external\">Content-Type Table</a>  </p>\n<ul>\n<li><code>application/json</code><br>目前主流的API會用輕巧的JSON作為傳遞資訊的媒介  </li>\n<li><code>text/xml</code>、<code>application/xml</code><br>早期標準的Web服務通常會透過xml作為交換資訊的媒介  </li>\n<li><code>text/plain</code><br>有些email或debug的情況會使用text/plain作為Content-Type,但是一般的Request情況不建議使用  </li>\n<li>更多請參考<a href=\"https://www.w3.org/TR/html5/forms.html#text/plain-encoding-algorithm\" target=\"_blank\" rel=\"external\">Spec</a>   </li>\n</ul>\n<hr>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://imququ.com/post/four-ways-to-post-data-in-http.html\" target=\"_blank\" rel=\"external\">https://imququ.com/post/four-ways-to-post-data-in-http.html</a></li>\n<li><a href=\"https://codeforgeek.com/2014/09/handle-get-post-request-express-4/\" target=\"_blank\" rel=\"external\">https://codeforgeek.com/2014/09/handle-get-post-request-express-4/</a></li>\n<li><a href=\"https://scotch.io/tutorials/use-expressjs-to-get-url-and-post-parameters\" target=\"_blank\" rel=\"external\">https://scotch.io/tutorials/use-expressjs-to-get-url-and-post-parameters</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4832357/whats-the-difference-between-text-xml-vs-application-xml-for-webservice-respons?ref=mythemeco&amp;t=pack\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/4832357/whats-the-difference-between-text-xml-vs-application-xml-for-webservice-respons?ref=mythemeco&amp;t=pack</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4526273/what-does-enctype-multipart-form-data-mean\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/4526273/what-does-enctype-multipart-form-data-mean</a></li>\n</ul>\n<p>(fin)</p>\n","excerpt":"","more":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>當我們對 Server 發出 request 的時候<br>需要註明你 request 的 Content-Type<br>以下簡單介紹一下這些格式  </p>\n<h3 id=\"測試工具\"><a href=\"#測試工具\" class=\"headerlink\" title=\"測試工具\"></a>測試工具</h3><p><a href=\"https://www.getpostman.com/\">PostMan</a>這套工具<br>可以模擬不同的格式資料發動 request 到你的 Server</p>\n<hr>\n<h2 id=\"Content-Type\"><a href=\"#Content-Type\" class=\"headerlink\" title=\"Content-Type\"></a>Content-Type</h2><h3 id=\"application-x-www-form-urlencoded\"><a href=\"#application-x-www-form-urlencoded\" class=\"headerlink\" title=\"application/x-www-form-urlencoded\"></a><code>application/x-www-form-urlencoded</code></h3><p>常用的Content-Type,簡單說就是KEY-VALUE的方式<br>如下, KEY firstname 的值是 marsen<br>lastname 是由使用者輸入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  First name:<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"firstname\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"marsen\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  Last name:<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lastname\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>同時資料會作一次url encoded,<br>產生類似下列的資料<br>firstname=marsen&amp;lastname=lin&amp;key%5b1%5d=value%5b1%5d</p>\n<hr>\n<h3 id=\"multipart-form-data\"><a href=\"#multipart-form-data\" class=\"headerlink\" title=\"multipart/form-data\"></a><code>multipart/form-data</code></h3><p>PostMan中的選項 <code>binary</code> 其實就是包成這種格式<br>上傳檔案會使用這種Content-Type,<br>這通常表示你的html element包含有 <code>&lt;input type=&quot;file&quot;&gt;</code> </p>\n<hr>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>PostMan中的選項 <code>raw</code>,可以用字串組合成任意Content-Type,<br>參考<a href=\"http://www.freeformatter.com/mime-types-list.html\">Content-Type Table</a>  </p>\n<ul>\n<li><code>application/json</code><br>目前主流的API會用輕巧的JSON作為傳遞資訊的媒介  </li>\n<li><code>text/xml</code>、<code>application/xml</code><br>早期標準的Web服務通常會透過xml作為交換資訊的媒介  </li>\n<li><code>text/plain</code><br>有些email或debug的情況會使用text/plain作為Content-Type,但是一般的Request情況不建議使用  </li>\n<li>更多請參考<a href=\"https://www.w3.org/TR/html5/forms.html#text/plain-encoding-algorithm\">Spec</a>   </li>\n</ul>\n<hr>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://imququ.com/post/four-ways-to-post-data-in-http.html\">https://imququ.com/post/four-ways-to-post-data-in-http.html</a></li>\n<li><a href=\"https://codeforgeek.com/2014/09/handle-get-post-request-express-4/\">https://codeforgeek.com/2014/09/handle-get-post-request-express-4/</a></li>\n<li><a href=\"https://scotch.io/tutorials/use-expressjs-to-get-url-and-post-parameters\">https://scotch.io/tutorials/use-expressjs-to-get-url-and-post-parameters</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4832357/whats-the-difference-between-text-xml-vs-application-xml-for-webservice-respons?ref=mythemeco&amp;t=pack\">http://stackoverflow.com/questions/4832357/whats-the-difference-between-text-xml-vs-application-xml-for-webservice-respons?ref=mythemeco&amp;t=pack</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4526273/what-does-enctype-multipart-form-data-mean\">http://stackoverflow.com/questions/4526273/what-does-enctype-multipart-form-data-mean</a></li>\n</ul>\n<p>(fin)</p>\n"},{"title":"匯入文字資料到MSSQL","date":"2016-08-29T09:24:55.000Z","_content":"## 前置作業0\n1. 一個有權限寫入的MSSQLServer與SSMS管理工具\n2. 準備好你的檔案資料(Row Data)\n3. 這份記錄僅供參考(DB版本使用Microsoft SQL Server 2014)\n\n## 步驟記錄\n1. 開啟SSMS，連線測試SQL Server\n2. 對測試資料庫右鍵>工作>匯入資料，開啟「SQL Server匯入匯出精靈」\n3. 「開始畫面」> 下一步\n4. 「資料來源」選擇一般檔案來源，「檔案名稱」選取Row Data的檔案路徑\n5. 請依實際狀況選擇下列欄位\n     - 「略過的標頭資料列數」: 預設為0，可透過設定此欄位略過 Row Data內含註解，標頭等資料\n     - 「第一個資料列的資料行名稱」:若Row Data第一行為標頭，請勾選此欄位\n     - 左側選單選擇「資料行」>「資料列分隔符號」選擇「{CR}{LF}」、「資料行分隔符號」選擇「Tab鍵{t}」\n6. 左側選單選擇「預覽」確認匯入的資料無誤後，點擊下一步\n7. 「目的地」請選擇「SqlServer」，設定ConnectionString\n     - Data Source=1**.***.***.***;Initial Catalog=TestDB;Persist Security Info=True;User ID=tester;Password=********;\n8. 「選取來源資料表和檢視畫面」確認無誤後，點擊下一步。\n9. 「檢閱資料類型對應畫面」請忽略資料類型的警告，點擊下一步。\n10. 「執行封裝畫面」勾選「立即執行」，點擊下一步。\n11. 「完成精靈畫面」點選完成。\n12.  執行時間長短，依Row Data大小而有所差異。\n\n(fin)\n","source":"_posts/file_rowdata_import_mssql.md","raw":"---\ntitle: 匯入文字資料到MSSQL\ndate: 2016/08/29 17:24:55 \ntag:\n- DBA\n- MSSQL\n- 記錄\n---\n## 前置作業0\n1. 一個有權限寫入的MSSQLServer與SSMS管理工具\n2. 準備好你的檔案資料(Row Data)\n3. 這份記錄僅供參考(DB版本使用Microsoft SQL Server 2014)\n\n## 步驟記錄\n1. 開啟SSMS，連線測試SQL Server\n2. 對測試資料庫右鍵>工作>匯入資料，開啟「SQL Server匯入匯出精靈」\n3. 「開始畫面」> 下一步\n4. 「資料來源」選擇一般檔案來源，「檔案名稱」選取Row Data的檔案路徑\n5. 請依實際狀況選擇下列欄位\n     - 「略過的標頭資料列數」: 預設為0，可透過設定此欄位略過 Row Data內含註解，標頭等資料\n     - 「第一個資料列的資料行名稱」:若Row Data第一行為標頭，請勾選此欄位\n     - 左側選單選擇「資料行」>「資料列分隔符號」選擇「{CR}{LF}」、「資料行分隔符號」選擇「Tab鍵{t}」\n6. 左側選單選擇「預覽」確認匯入的資料無誤後，點擊下一步\n7. 「目的地」請選擇「SqlServer」，設定ConnectionString\n     - Data Source=1**.***.***.***;Initial Catalog=TestDB;Persist Security Info=True;User ID=tester;Password=********;\n8. 「選取來源資料表和檢視畫面」確認無誤後，點擊下一步。\n9. 「檢閱資料類型對應畫面」請忽略資料類型的警告，點擊下一步。\n10. 「執行封裝畫面」勾選「立即執行」，點擊下一步。\n11. 「完成精靈畫面」點選完成。\n12.  執行時間長短，依Row Data大小而有所差異。\n\n(fin)\n","slug":"file_rowdata_import_mssql","published":1,"updated":"2016-12-04T17:00:46.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwawm31i000f38opxiwlt4a8","content":"<h2 id=\"前置作業0\"><a href=\"#前置作業0\" class=\"headerlink\" title=\"前置作業0\"></a>前置作業0</h2><ol>\n<li>一個有權限寫入的MSSQLServer與SSMS管理工具</li>\n<li>準備好你的檔案資料(Row Data)</li>\n<li>這份記錄僅供參考(DB版本使用Microsoft SQL Server 2014)</li>\n</ol>\n<h2 id=\"步驟記錄\"><a href=\"#步驟記錄\" class=\"headerlink\" title=\"步驟記錄\"></a>步驟記錄</h2><ol>\n<li>開啟SSMS，連線測試SQL Server</li>\n<li>對測試資料庫右鍵&gt;工作&gt;匯入資料，開啟「SQL Server匯入匯出精靈」</li>\n<li>「開始畫面」&gt; 下一步</li>\n<li>「資料來源」選擇一般檔案來源，「檔案名稱」選取Row Data的檔案路徑</li>\n<li>請依實際狀況選擇下列欄位<ul>\n<li>「略過的標頭資料列數」: 預設為0，可透過設定此欄位略過 Row Data內含註解，標頭等資料</li>\n<li>「第一個資料列的資料行名稱」:若Row Data第一行為標頭，請勾選此欄位</li>\n<li>左側選單選擇「資料行」&gt;「資料列分隔符號」選擇「{CR}{LF}」、「資料行分隔符號」選擇「Tab鍵{t}」</li>\n</ul>\n</li>\n<li>左側選單選擇「預覽」確認匯入的資料無誤後，點擊下一步</li>\n<li>「目的地」請選擇「SqlServer」，設定ConnectionString<ul>\n<li>Data Source=1<strong>.*</strong>.<strong><em>.</em></strong>;Initial Catalog=TestDB;Persist Security Info=True;User ID=tester;Password=<strong><em>**</em></strong>;</li>\n</ul>\n</li>\n<li>「選取來源資料表和檢視畫面」確認無誤後，點擊下一步。</li>\n<li>「檢閱資料類型對應畫面」請忽略資料類型的警告，點擊下一步。</li>\n<li>「執行封裝畫面」勾選「立即執行」，點擊下一步。</li>\n<li>「完成精靈畫面」點選完成。</li>\n<li>執行時間長短，依Row Data大小而有所差異。</li>\n</ol>\n<p>(fin)</p>\n","excerpt":"","more":"<h2 id=\"前置作業0\"><a href=\"#前置作業0\" class=\"headerlink\" title=\"前置作業0\"></a>前置作業0</h2><ol>\n<li>一個有權限寫入的MSSQLServer與SSMS管理工具</li>\n<li>準備好你的檔案資料(Row Data)</li>\n<li>這份記錄僅供參考(DB版本使用Microsoft SQL Server 2014)</li>\n</ol>\n<h2 id=\"步驟記錄\"><a href=\"#步驟記錄\" class=\"headerlink\" title=\"步驟記錄\"></a>步驟記錄</h2><ol>\n<li>開啟SSMS，連線測試SQL Server</li>\n<li>對測試資料庫右鍵&gt;工作&gt;匯入資料，開啟「SQL Server匯入匯出精靈」</li>\n<li>「開始畫面」&gt; 下一步</li>\n<li>「資料來源」選擇一般檔案來源，「檔案名稱」選取Row Data的檔案路徑</li>\n<li>請依實際狀況選擇下列欄位<ul>\n<li>「略過的標頭資料列數」: 預設為0，可透過設定此欄位略過 Row Data內含註解，標頭等資料</li>\n<li>「第一個資料列的資料行名稱」:若Row Data第一行為標頭，請勾選此欄位</li>\n<li>左側選單選擇「資料行」&gt;「資料列分隔符號」選擇「{CR}{LF}」、「資料行分隔符號」選擇「Tab鍵{t}」</li>\n</ul>\n</li>\n<li>左側選單選擇「預覽」確認匯入的資料無誤後，點擊下一步</li>\n<li>「目的地」請選擇「SqlServer」，設定ConnectionString<ul>\n<li>Data Source=1<strong>.*</strong>.<strong><em>.</em></strong>;Initial Catalog=TestDB;Persist Security Info=True;User ID=tester;Password=<strong><em>**</em></strong>;</li>\n</ul>\n</li>\n<li>「選取來源資料表和檢視畫面」確認無誤後，點擊下一步。</li>\n<li>「檢閱資料類型對應畫面」請忽略資料類型的警告，點擊下一步。</li>\n<li>「執行封裝畫面」勾選「立即執行」，點擊下一步。</li>\n<li>「完成精靈畫面」點選完成。</li>\n<li>執行時間長短，依Row Data大小而有所差異。</li>\n</ol>\n<p>(fin)</p>\n"},{"title":".NET PDB File 介紹","date":"2016-11-28T15:54:55.000Z","_content":"\n\n### PDB(Program Database Files )\n\n\n\n**.Net原始碼在Debug mode建置後，將產生.pdb檔案，  \n其中記錄了.dll、.exe與原始碼之間的對應關係。**\n\n\n\n#### MSDN 這樣說\n\n程式資料庫 (.pdb) 檔案也稱為符號檔，可將您在原始程式檔中為類別、  \n方法和其他程式碼建立的識別項對應至專案之編譯的可執行檔中使用的識別項。\n\n\n\n原文: \n\n>_A program database (.pdb) file, also called a symbol file,_   \n_maps the identifiers that you create in source files for classes,_  \n_methods, and other code to the identifiers that are used in the_   \n_compiled executables of your project._\n\n\n### PDB 記什麼\n\n- 原始碼的檔案名稱 (source code file name)\n- 變數與行號 (lines and the local variable names.)\n\n\n\n### 偵錯工具搜尋 .pdb 檔案的順序？\n\n1. DLL 或可執行檔內部指定的位置\n2. 可能和 DLL 或可執行檔存在相同資料夾中的 .pdb 檔案。\n3. 任何本機符號快取資料夾。\n4. 任何在像是 Microsoft 符號伺服器 (如果啟用) 等位置指定的網路、網際網路或本機符號伺服器和位置。\n\n\n\n### .pdb 檔案與.dll(或可執行檔)需要完全符合\n\n偵錯工具只會載入與可執行檔建置時所建立的 .pdb 檔案完全相同之可執行檔的 .pdb 檔案  \n*相同原始碼在不同機器建置的執行檔與PDB，偵錯工具將無法進行偵錯\n\n\n\n### 看看.pdb檔的內容\n\n1. 開啟 %ProgramFiles(x86)%\\Microsoft Visual Studio 14.0\\DIA SDK\\Samples\\DIA2Dump\\dia2dump.sln\n\n\n\n2. 執行以下命令 \n`Dia2Dump pdbfilepath >> dumpfileName.txt`\nex:\n`Dia2Dump C:\\myproj\\bin\\debug\\myproj.pdb >> myproj_dump.txt`\n\n\n\n3. 輸出的結果大致如下 \n\n\n\tFunction       : In MetaData, [00001F16][0001:00001F16], len = 000000ED, GetBookList\n\tFunction attribute:\n\tFunction info:\n\t\t\t\t \n\t\n\t//中略\n\t\n\tFunction: [0001F71A][0001:0001F71A] GetSalePage b_231\n\tFunction: [00001F16][0001:00001F16] GetBookList\n\tFunction: [0001F4F0][0001:0001F4F0] GetLayoutByAd b_0\n\t\n\t//中略\n\n\t** GetBookList\n\n\tline 46 at [00001F16][0001:00001F16], len = 0x1\tD:\\Repo\\Mark_Lin\\MYPROJ\\WebAPI\\Controllers\\BookController.cs\n\tline 47 at [00001F17][0001:00001F17], len = 0x6\n\tline 48 at [00001F1D][0001:00001F1D], len = 0x1C\t\t\t\t \n\n\n\n\n\n##### 參考\n- http://anferneehardaway.pixnet.net/blog/post/6273453\n- https://msdn.microsoft.com/zh-tw/library/ms241903(v=vs.100).aspx\n- http://www.wintellect.com/devcenter/jrobbins/pdb-files-what-every-developer-must-know\n- https://blogs.msdn.microsoft.com/jimgries/2007/07/06/why-does-visual-studio-require-debugger-symbol-files-to-exactly-match-the-binary-files-that-they-were-built-with/\n\n(fin)","source":"_posts/dotnet_pdb_file.md","raw":"---\ntitle: .NET PDB File 介紹\ndate: 2016/11/28 23:54:55\ntag:\n  - .Net Framework\n---\n\n\n### PDB(Program Database Files )\n\n\n\n**.Net原始碼在Debug mode建置後，將產生.pdb檔案，  \n其中記錄了.dll、.exe與原始碼之間的對應關係。**\n\n\n\n#### MSDN 這樣說\n\n程式資料庫 (.pdb) 檔案也稱為符號檔，可將您在原始程式檔中為類別、  \n方法和其他程式碼建立的識別項對應至專案之編譯的可執行檔中使用的識別項。\n\n\n\n原文: \n\n>_A program database (.pdb) file, also called a symbol file,_   \n_maps the identifiers that you create in source files for classes,_  \n_methods, and other code to the identifiers that are used in the_   \n_compiled executables of your project._\n\n\n### PDB 記什麼\n\n- 原始碼的檔案名稱 (source code file name)\n- 變數與行號 (lines and the local variable names.)\n\n\n\n### 偵錯工具搜尋 .pdb 檔案的順序？\n\n1. DLL 或可執行檔內部指定的位置\n2. 可能和 DLL 或可執行檔存在相同資料夾中的 .pdb 檔案。\n3. 任何本機符號快取資料夾。\n4. 任何在像是 Microsoft 符號伺服器 (如果啟用) 等位置指定的網路、網際網路或本機符號伺服器和位置。\n\n\n\n### .pdb 檔案與.dll(或可執行檔)需要完全符合\n\n偵錯工具只會載入與可執行檔建置時所建立的 .pdb 檔案完全相同之可執行檔的 .pdb 檔案  \n*相同原始碼在不同機器建置的執行檔與PDB，偵錯工具將無法進行偵錯\n\n\n\n### 看看.pdb檔的內容\n\n1. 開啟 %ProgramFiles(x86)%\\Microsoft Visual Studio 14.0\\DIA SDK\\Samples\\DIA2Dump\\dia2dump.sln\n\n\n\n2. 執行以下命令 \n`Dia2Dump pdbfilepath >> dumpfileName.txt`\nex:\n`Dia2Dump C:\\myproj\\bin\\debug\\myproj.pdb >> myproj_dump.txt`\n\n\n\n3. 輸出的結果大致如下 \n\n\n\tFunction       : In MetaData, [00001F16][0001:00001F16], len = 000000ED, GetBookList\n\tFunction attribute:\n\tFunction info:\n\t\t\t\t \n\t\n\t//中略\n\t\n\tFunction: [0001F71A][0001:0001F71A] GetSalePage b_231\n\tFunction: [00001F16][0001:00001F16] GetBookList\n\tFunction: [0001F4F0][0001:0001F4F0] GetLayoutByAd b_0\n\t\n\t//中略\n\n\t** GetBookList\n\n\tline 46 at [00001F16][0001:00001F16], len = 0x1\tD:\\Repo\\Mark_Lin\\MYPROJ\\WebAPI\\Controllers\\BookController.cs\n\tline 47 at [00001F17][0001:00001F17], len = 0x6\n\tline 48 at [00001F1D][0001:00001F1D], len = 0x1C\t\t\t\t \n\n\n\n\n\n##### 參考\n- http://anferneehardaway.pixnet.net/blog/post/6273453\n- https://msdn.microsoft.com/zh-tw/library/ms241903(v=vs.100).aspx\n- http://www.wintellect.com/devcenter/jrobbins/pdb-files-what-every-developer-must-know\n- https://blogs.msdn.microsoft.com/jimgries/2007/07/06/why-does-visual-studio-require-debugger-symbol-files-to-exactly-match-the-binary-files-that-they-were-built-with/\n\n(fin)","slug":"dotnet_pdb_file","published":1,"updated":"2016-12-04T17:00:48.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwawm31n000i38opiflb3apq","content":"<h3 id=\"PDB-Program-Database-Files\"><a href=\"#PDB-Program-Database-Files\" class=\"headerlink\" title=\"PDB(Program Database Files )\"></a>PDB(Program Database Files )</h3><p><strong>.Net原始碼在Debug mode建置後，將產生.pdb檔案，<br>其中記錄了.dll、.exe與原始碼之間的對應關係。</strong></p>\n<h4 id=\"MSDN-這樣說\"><a href=\"#MSDN-這樣說\" class=\"headerlink\" title=\"MSDN 這樣說\"></a>MSDN 這樣說</h4><p>程式資料庫 (.pdb) 檔案也稱為符號檔，可將您在原始程式檔中為類別、<br>方法和其他程式碼建立的識別項對應至專案之編譯的可執行檔中使用的識別項。</p>\n<p>原文: </p>\n<blockquote>\n<p><em>A program database (.pdb) file, also called a symbol file,</em><br><em>maps the identifiers that you create in source files for classes,</em><br><em>methods, and other code to the identifiers that are used in the</em><br><em>compiled executables of your project.</em></p>\n</blockquote>\n<h3 id=\"PDB-記什麼\"><a href=\"#PDB-記什麼\" class=\"headerlink\" title=\"PDB 記什麼\"></a>PDB 記什麼</h3><ul>\n<li>原始碼的檔案名稱 (source code file name)</li>\n<li>變數與行號 (lines and the local variable names.)</li>\n</ul>\n<h3 id=\"偵錯工具搜尋-pdb-檔案的順序？\"><a href=\"#偵錯工具搜尋-pdb-檔案的順序？\" class=\"headerlink\" title=\"偵錯工具搜尋 .pdb 檔案的順序？\"></a>偵錯工具搜尋 .pdb 檔案的順序？</h3><ol>\n<li>DLL 或可執行檔內部指定的位置</li>\n<li>可能和 DLL 或可執行檔存在相同資料夾中的 .pdb 檔案。</li>\n<li>任何本機符號快取資料夾。</li>\n<li>任何在像是 Microsoft 符號伺服器 (如果啟用) 等位置指定的網路、網際網路或本機符號伺服器和位置。</li>\n</ol>\n<h3 id=\"pdb-檔案與-dll-或可執行檔-需要完全符合\"><a href=\"#pdb-檔案與-dll-或可執行檔-需要完全符合\" class=\"headerlink\" title=\".pdb 檔案與.dll(或可執行檔)需要完全符合\"></a>.pdb 檔案與.dll(或可執行檔)需要完全符合</h3><p>偵錯工具只會載入與可執行檔建置時所建立的 .pdb 檔案完全相同之可執行檔的 .pdb 檔案<br>*相同原始碼在不同機器建置的執行檔與PDB，偵錯工具將無法進行偵錯</p>\n<h3 id=\"看看-pdb檔的內容\"><a href=\"#看看-pdb檔的內容\" class=\"headerlink\" title=\"看看.pdb檔的內容\"></a>看看.pdb檔的內容</h3><ol>\n<li>開啟 %ProgramFiles(x86)%\\Microsoft Visual Studio 14.0\\DIA SDK\\Samples\\DIA2Dump\\dia2dump.sln</li>\n</ol>\n<ol>\n<li>執行以下命令<br><code>Dia2Dump pdbfilepath &gt;&gt; dumpfileName.txt</code><br>ex:<br><code>Dia2Dump C:\\myproj\\bin\\debug\\myproj.pdb &gt;&gt; myproj_dump.txt</code></li>\n</ol>\n<ol>\n<li>輸出的結果大致如下 </li>\n</ol>\n<pre><code>Function       : In MetaData, [00001F16][0001:00001F16], len = 000000ED, GetBookList\nFunction attribute:\nFunction info:\n\n\n//中略\n\nFunction: [0001F71A][0001:0001F71A] GetSalePage b_231\nFunction: [00001F16][0001:00001F16] GetBookList\nFunction: [0001F4F0][0001:0001F4F0] GetLayoutByAd b_0\n\n//中略\n\n** GetBookList\n\nline 46 at [00001F16][0001:00001F16], len = 0x1    D:\\Repo\\Mark_Lin\\MYPROJ\\WebAPI\\Controllers\\BookController.cs\nline 47 at [00001F17][0001:00001F17], len = 0x6\nline 48 at [00001F1D][0001:00001F1D], len = 0x1C                 \n</code></pre><h5 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h5><ul>\n<li><a href=\"http://anferneehardaway.pixnet.net/blog/post/6273453\" target=\"_blank\" rel=\"external\">http://anferneehardaway.pixnet.net/blog/post/6273453</a></li>\n<li><a href=\"https://msdn.microsoft.com/zh-tw/library/ms241903(v=vs.100).aspx\" target=\"_blank\" rel=\"external\">https://msdn.microsoft.com/zh-tw/library/ms241903(v=vs.100).aspx</a></li>\n<li><a href=\"http://www.wintellect.com/devcenter/jrobbins/pdb-files-what-every-developer-must-know\" target=\"_blank\" rel=\"external\">http://www.wintellect.com/devcenter/jrobbins/pdb-files-what-every-developer-must-know</a></li>\n<li><a href=\"https://blogs.msdn.microsoft.com/jimgries/2007/07/06/why-does-visual-studio-require-debugger-symbol-files-to-exactly-match-the-binary-files-that-they-were-built-with/\" target=\"_blank\" rel=\"external\">https://blogs.msdn.microsoft.com/jimgries/2007/07/06/why-does-visual-studio-require-debugger-symbol-files-to-exactly-match-the-binary-files-that-they-were-built-with/</a></li>\n</ul>\n<p>(fin)</p>\n","excerpt":"","more":"<h3 id=\"PDB-Program-Database-Files\"><a href=\"#PDB-Program-Database-Files\" class=\"headerlink\" title=\"PDB(Program Database Files )\"></a>PDB(Program Database Files )</h3><p><strong>.Net原始碼在Debug mode建置後，將產生.pdb檔案，<br>其中記錄了.dll、.exe與原始碼之間的對應關係。</strong></p>\n<h4 id=\"MSDN-這樣說\"><a href=\"#MSDN-這樣說\" class=\"headerlink\" title=\"MSDN 這樣說\"></a>MSDN 這樣說</h4><p>程式資料庫 (.pdb) 檔案也稱為符號檔，可將您在原始程式檔中為類別、<br>方法和其他程式碼建立的識別項對應至專案之編譯的可執行檔中使用的識別項。</p>\n<p>原文: </p>\n<blockquote>\n<p><em>A program database (.pdb) file, also called a symbol file,</em><br><em>maps the identifiers that you create in source files for classes,</em><br><em>methods, and other code to the identifiers that are used in the</em><br><em>compiled executables of your project.</em></p>\n</blockquote>\n<h3 id=\"PDB-記什麼\"><a href=\"#PDB-記什麼\" class=\"headerlink\" title=\"PDB 記什麼\"></a>PDB 記什麼</h3><ul>\n<li>原始碼的檔案名稱 (source code file name)</li>\n<li>變數與行號 (lines and the local variable names.)</li>\n</ul>\n<h3 id=\"偵錯工具搜尋-pdb-檔案的順序？\"><a href=\"#偵錯工具搜尋-pdb-檔案的順序？\" class=\"headerlink\" title=\"偵錯工具搜尋 .pdb 檔案的順序？\"></a>偵錯工具搜尋 .pdb 檔案的順序？</h3><ol>\n<li>DLL 或可執行檔內部指定的位置</li>\n<li>可能和 DLL 或可執行檔存在相同資料夾中的 .pdb 檔案。</li>\n<li>任何本機符號快取資料夾。</li>\n<li>任何在像是 Microsoft 符號伺服器 (如果啟用) 等位置指定的網路、網際網路或本機符號伺服器和位置。</li>\n</ol>\n<h3 id=\"pdb-檔案與-dll-或可執行檔-需要完全符合\"><a href=\"#pdb-檔案與-dll-或可執行檔-需要完全符合\" class=\"headerlink\" title=\".pdb 檔案與.dll(或可執行檔)需要完全符合\"></a>.pdb 檔案與.dll(或可執行檔)需要完全符合</h3><p>偵錯工具只會載入與可執行檔建置時所建立的 .pdb 檔案完全相同之可執行檔的 .pdb 檔案<br>*相同原始碼在不同機器建置的執行檔與PDB，偵錯工具將無法進行偵錯</p>\n<h3 id=\"看看-pdb檔的內容\"><a href=\"#看看-pdb檔的內容\" class=\"headerlink\" title=\"看看.pdb檔的內容\"></a>看看.pdb檔的內容</h3><ol>\n<li>開啟 %ProgramFiles(x86)%\\Microsoft Visual Studio 14.0\\DIA SDK\\Samples\\DIA2Dump\\dia2dump.sln</li>\n</ol>\n<ol>\n<li>執行以下命令<br><code>Dia2Dump pdbfilepath &gt;&gt; dumpfileName.txt</code><br>ex:<br><code>Dia2Dump C:\\myproj\\bin\\debug\\myproj.pdb &gt;&gt; myproj_dump.txt</code></li>\n</ol>\n<ol>\n<li>輸出的結果大致如下 </li>\n</ol>\n<pre><code>Function       : In MetaData, [00001F16][0001:00001F16], len = 000000ED, GetBookList\nFunction attribute:\nFunction info:\n\n\n//中略\n\nFunction: [0001F71A][0001:0001F71A] GetSalePage b_231\nFunction: [00001F16][0001:00001F16] GetBookList\nFunction: [0001F4F0][0001:0001F4F0] GetLayoutByAd b_0\n\n//中略\n\n** GetBookList\n\nline 46 at [00001F16][0001:00001F16], len = 0x1    D:\\Repo\\Mark_Lin\\MYPROJ\\WebAPI\\Controllers\\BookController.cs\nline 47 at [00001F17][0001:00001F17], len = 0x6\nline 48 at [00001F1D][0001:00001F1D], len = 0x1C                 \n</code></pre><h5 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h5><ul>\n<li><a href=\"http://anferneehardaway.pixnet.net/blog/post/6273453\">http://anferneehardaway.pixnet.net/blog/post/6273453</a></li>\n<li><a href=\"https://msdn.microsoft.com/zh-tw/library/ms241903(v=vs.100).aspx\">https://msdn.microsoft.com/zh-tw/library/ms241903(v=vs.100).aspx</a></li>\n<li><a href=\"http://www.wintellect.com/devcenter/jrobbins/pdb-files-what-every-developer-must-know\">http://www.wintellect.com/devcenter/jrobbins/pdb-files-what-every-developer-must-know</a></li>\n<li><a href=\"https://blogs.msdn.microsoft.com/jimgries/2007/07/06/why-does-visual-studio-require-debugger-symbol-files-to-exactly-match-the-binary-files-that-they-were-built-with/\">https://blogs.msdn.microsoft.com/jimgries/2007/07/06/why-does-visual-studio-require-debugger-symbol-files-to-exactly-match-the-binary-files-that-they-were-built-with/</a></li>\n</ul>\n<p>(fin)</p>\n"},{"title":"怎麼建立一個網站？(三) - 簡單讓網站升級使用HTTP/2","date":"2016-09-03T17:12:15.000Z","_content":"## 應該知道的事\n- HTTP/1.1是目前被應用得最廣泛的通訊協定，也可以說是最成功的一個\n  - HTTP/1.1 基於TCP，需要三方交握。\n  - HTTP/1.1本身存在得需多問題，安全性、效率等…。\n- HTTP/2 可以有效改善HTTP/1.1的缺點，而且可以向下相容\n  - 主流的瀏覽器都開始支援了。  \n  - 只要設定好Web Server，Client 端看使用的[瀏覽器支不支援](http://caniuse.com/#feat=http2)。\n- 一流公司制定標準，二流作品牌，三流賣技術，四流作產品\n  - HTTP/2 是源自Google的SPDY。\n  - Google下一代 QUIC推動中。\n- HTTP/2 並不強制加密(HTTPS)\n  - 在主流瀏覽器為了向下相容，保留了80 port的HTTP/1.1通訊協定，用443 port 實作HTTP/2。\n  - 所以還是要走HTTPS，所以需要安全性憑証。\n  - 安全性憑証要錢(現在也有免費的)。\n  - [cloudflare](https://www.cloudflare.com/)提供免費的安全性憑証。\n\n## 前置作業\n1. 你要有[cloudflare](https://www.cloudflare.com/)帳號。\n2. 看過我之網站的設定，簡單說就是一個github page 與 透過OpenShift 這個 PaaS服務建立的網站。\n    - [怎麼建立一個網站？(一)](https://blog.marsen.me/2016/08/21/setting_DNS_with_google/)\n    - [怎麼建立一個網站？(二)](https://blog.marsen.me/2016/08/28/how_to_use_github_page/)\n\n## 配置\n1. [cloudflare](https://www.cloudflare.com/) 設定DNS，在指定的domain下，設定為「DNS and HTTP Proxy(CDN)」。\n![設定為「DNS and HTTP Proxy(CDN)」](/images/090516_021242_AM.jpg)\n2. 設定Page-Rules，這個是為了開啟SSL\n    1. 設定`SSL`為`Flexible`,輸入`*.username.com/*`。  \n這個時候你就可以瀏覽`https://blog.username.com/`,但同時也可以瀏覽`http://blog.username.com/` 。  \n我希望HTTP能自動跳轉HTTPS，這部份如果是Node建立的網站，我可以用程式作轉導，  \n但是如果是github page建立網站，就要再仰賴 [cloudflare](https://www.cloudflare.com/) 了。\n3. 設定Page-Rules，這個是為了開啟SSL\n    1. 設定`ALWAYS USE HTTPS`,輸入`http://*.username.com/*`。  \n![設定為「DNS and HTTP Proxy(CDN)」](/images/090516_023252_AM.jpg)\n\n設定完大致如下，順利的話幾分鐘就生效了。  \n![](/images/090516_023554_AM.jpg)\n\n這時候瀏覽`http://blog.username.com/`就會轉導到`https://blog.username.com/`了 。\n\n## 檢驗\n使用support HTTP/2的瀏覽器，瀏覽網頁，觀察其protocol 。\n![](/images/090516_024550_AM.jpg)\n\n(fin)\n\n## 參考\n- [了解 HTTP/2 的特色與 HTTP/1.1 的差異](https://simular.co/knowledge/site-build/68-about-http2-and-http11.html)\n- [你的網站升級到 HTTP/2 了嗎？](https://blog.alphacamp.co/2016/07/12/http2/)\n- [為什麼我們需要HTTP/2？](http://www.ithome.com.tw/voice/94371)\n- [HTTP/2登場，邁向新的紀元](http://www.ithome.com.tw/voice/94520)\n- [Google：將推動QUIC成為網路標準](http://www.ithome.com.tw/news/95353)\n","source":"_posts/http2 by cloudflare.md","raw":"---\ntitle: 怎麼建立一個網站？(三) - 簡單讓網站升級使用HTTP/2\ndate: 2016/09/04 01:12:15 \ntag:\n  - HTTP/1.1\n  - HTTP/2\n  - TCP\n---\n## 應該知道的事\n- HTTP/1.1是目前被應用得最廣泛的通訊協定，也可以說是最成功的一個\n  - HTTP/1.1 基於TCP，需要三方交握。\n  - HTTP/1.1本身存在得需多問題，安全性、效率等…。\n- HTTP/2 可以有效改善HTTP/1.1的缺點，而且可以向下相容\n  - 主流的瀏覽器都開始支援了。  \n  - 只要設定好Web Server，Client 端看使用的[瀏覽器支不支援](http://caniuse.com/#feat=http2)。\n- 一流公司制定標準，二流作品牌，三流賣技術，四流作產品\n  - HTTP/2 是源自Google的SPDY。\n  - Google下一代 QUIC推動中。\n- HTTP/2 並不強制加密(HTTPS)\n  - 在主流瀏覽器為了向下相容，保留了80 port的HTTP/1.1通訊協定，用443 port 實作HTTP/2。\n  - 所以還是要走HTTPS，所以需要安全性憑証。\n  - 安全性憑証要錢(現在也有免費的)。\n  - [cloudflare](https://www.cloudflare.com/)提供免費的安全性憑証。\n\n## 前置作業\n1. 你要有[cloudflare](https://www.cloudflare.com/)帳號。\n2. 看過我之網站的設定，簡單說就是一個github page 與 透過OpenShift 這個 PaaS服務建立的網站。\n    - [怎麼建立一個網站？(一)](https://blog.marsen.me/2016/08/21/setting_DNS_with_google/)\n    - [怎麼建立一個網站？(二)](https://blog.marsen.me/2016/08/28/how_to_use_github_page/)\n\n## 配置\n1. [cloudflare](https://www.cloudflare.com/) 設定DNS，在指定的domain下，設定為「DNS and HTTP Proxy(CDN)」。\n![設定為「DNS and HTTP Proxy(CDN)」](/images/090516_021242_AM.jpg)\n2. 設定Page-Rules，這個是為了開啟SSL\n    1. 設定`SSL`為`Flexible`,輸入`*.username.com/*`。  \n這個時候你就可以瀏覽`https://blog.username.com/`,但同時也可以瀏覽`http://blog.username.com/` 。  \n我希望HTTP能自動跳轉HTTPS，這部份如果是Node建立的網站，我可以用程式作轉導，  \n但是如果是github page建立網站，就要再仰賴 [cloudflare](https://www.cloudflare.com/) 了。\n3. 設定Page-Rules，這個是為了開啟SSL\n    1. 設定`ALWAYS USE HTTPS`,輸入`http://*.username.com/*`。  \n![設定為「DNS and HTTP Proxy(CDN)」](/images/090516_023252_AM.jpg)\n\n設定完大致如下，順利的話幾分鐘就生效了。  \n![](/images/090516_023554_AM.jpg)\n\n這時候瀏覽`http://blog.username.com/`就會轉導到`https://blog.username.com/`了 。\n\n## 檢驗\n使用support HTTP/2的瀏覽器，瀏覽網頁，觀察其protocol 。\n![](/images/090516_024550_AM.jpg)\n\n(fin)\n\n## 參考\n- [了解 HTTP/2 的特色與 HTTP/1.1 的差異](https://simular.co/knowledge/site-build/68-about-http2-and-http11.html)\n- [你的網站升級到 HTTP/2 了嗎？](https://blog.alphacamp.co/2016/07/12/http2/)\n- [為什麼我們需要HTTP/2？](http://www.ithome.com.tw/voice/94371)\n- [HTTP/2登場，邁向新的紀元](http://www.ithome.com.tw/voice/94520)\n- [Google：將推動QUIC成為網路標準](http://www.ithome.com.tw/news/95353)\n","slug":"http2 by cloudflare","published":1,"updated":"2016-12-04T17:05:32.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwawm31t000k38op2t9h72jz","content":"<h2 id=\"應該知道的事\"><a href=\"#應該知道的事\" class=\"headerlink\" title=\"應該知道的事\"></a>應該知道的事</h2><ul>\n<li>HTTP/1.1是目前被應用得最廣泛的通訊協定，也可以說是最成功的一個<ul>\n<li>HTTP/1.1 基於TCP，需要三方交握。</li>\n<li>HTTP/1.1本身存在得需多問題，安全性、效率等…。</li>\n</ul>\n</li>\n<li>HTTP/2 可以有效改善HTTP/1.1的缺點，而且可以向下相容<ul>\n<li>主流的瀏覽器都開始支援了。  </li>\n<li>只要設定好Web Server，Client 端看使用的<a href=\"http://caniuse.com/#feat=http2\" target=\"_blank\" rel=\"external\">瀏覽器支不支援</a>。</li>\n</ul>\n</li>\n<li>一流公司制定標準，二流作品牌，三流賣技術，四流作產品<ul>\n<li>HTTP/2 是源自Google的SPDY。</li>\n<li>Google下一代 QUIC推動中。</li>\n</ul>\n</li>\n<li>HTTP/2 並不強制加密(HTTPS)<ul>\n<li>在主流瀏覽器為了向下相容，保留了80 port的HTTP/1.1通訊協定，用443 port 實作HTTP/2。</li>\n<li>所以還是要走HTTPS，所以需要安全性憑証。</li>\n<li>安全性憑証要錢(現在也有免費的)。</li>\n<li><a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a>提供免費的安全性憑証。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ol>\n<li>你要有<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a>帳號。</li>\n<li>看過我之網站的設定，簡單說就是一個github page 與 透過OpenShift 這個 PaaS服務建立的網站。<ul>\n<li><a href=\"https://blog.marsen.me/2016/08/21/setting_DNS_with_google/\">怎麼建立一個網站？(一)</a></li>\n<li><a href=\"https://blog.marsen.me/2016/08/28/how_to_use_github_page/\">怎麼建立一個網站？(二)</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><ol>\n<li><a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a> 設定DNS，在指定的domain下，設定為「DNS and HTTP Proxy(CDN)」。<br><img src=\"/images/090516_021242_AM.jpg\" alt=\"設定為「DNS and HTTP Proxy(CDN)」\"></li>\n<li>設定Page-Rules，這個是為了開啟SSL<ol>\n<li>設定<code>SSL</code>為<code>Flexible</code>,輸入<code>*.username.com/*</code>。<br>這個時候你就可以瀏覽<code>https://blog.username.com/</code>,但同時也可以瀏覽<code>http://blog.username.com/</code> 。<br>我希望HTTP能自動跳轉HTTPS，這部份如果是Node建立的網站，我可以用程式作轉導，<br>但是如果是github page建立網站，就要再仰賴 <a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a> 了。</li>\n</ol>\n</li>\n<li>設定Page-Rules，這個是為了開啟SSL<ol>\n<li>設定<code>ALWAYS USE HTTPS</code>,輸入<code>http://*.username.com/*</code>。<br><img src=\"/images/090516_023252_AM.jpg\" alt=\"設定為「DNS and HTTP Proxy(CDN)」\"></li>\n</ol>\n</li>\n</ol>\n<p>設定完大致如下，順利的話幾分鐘就生效了。<br><img src=\"/images/090516_023554_AM.jpg\" alt=\"\"></p>\n<p>這時候瀏覽<code>http://blog.username.com/</code>就會轉導到<code>https://blog.username.com/</code>了 。</p>\n<h2 id=\"檢驗\"><a href=\"#檢驗\" class=\"headerlink\" title=\"檢驗\"></a>檢驗</h2><p>使用support HTTP/2的瀏覽器，瀏覽網頁，觀察其protocol 。<br><img src=\"/images/090516_024550_AM.jpg\" alt=\"\"></p>\n<p>(fin)</p>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://simular.co/knowledge/site-build/68-about-http2-and-http11.html\" target=\"_blank\" rel=\"external\">了解 HTTP/2 的特色與 HTTP/1.1 的差異</a></li>\n<li><a href=\"https://blog.alphacamp.co/2016/07/12/http2/\" target=\"_blank\" rel=\"external\">你的網站升級到 HTTP/2 了嗎？</a></li>\n<li><a href=\"http://www.ithome.com.tw/voice/94371\" target=\"_blank\" rel=\"external\">為什麼我們需要HTTP/2？</a></li>\n<li><a href=\"http://www.ithome.com.tw/voice/94520\" target=\"_blank\" rel=\"external\">HTTP/2登場，邁向新的紀元</a></li>\n<li><a href=\"http://www.ithome.com.tw/news/95353\" target=\"_blank\" rel=\"external\">Google：將推動QUIC成為網路標準</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"應該知道的事\"><a href=\"#應該知道的事\" class=\"headerlink\" title=\"應該知道的事\"></a>應該知道的事</h2><ul>\n<li>HTTP/1.1是目前被應用得最廣泛的通訊協定，也可以說是最成功的一個<ul>\n<li>HTTP/1.1 基於TCP，需要三方交握。</li>\n<li>HTTP/1.1本身存在得需多問題，安全性、效率等…。</li>\n</ul>\n</li>\n<li>HTTP/2 可以有效改善HTTP/1.1的缺點，而且可以向下相容<ul>\n<li>主流的瀏覽器都開始支援了。  </li>\n<li>只要設定好Web Server，Client 端看使用的<a href=\"http://caniuse.com/#feat=http2\">瀏覽器支不支援</a>。</li>\n</ul>\n</li>\n<li>一流公司制定標準，二流作品牌，三流賣技術，四流作產品<ul>\n<li>HTTP/2 是源自Google的SPDY。</li>\n<li>Google下一代 QUIC推動中。</li>\n</ul>\n</li>\n<li>HTTP/2 並不強制加密(HTTPS)<ul>\n<li>在主流瀏覽器為了向下相容，保留了80 port的HTTP/1.1通訊協定，用443 port 實作HTTP/2。</li>\n<li>所以還是要走HTTPS，所以需要安全性憑証。</li>\n<li>安全性憑証要錢(現在也有免費的)。</li>\n<li><a href=\"https://www.cloudflare.com/\">cloudflare</a>提供免費的安全性憑証。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ol>\n<li>你要有<a href=\"https://www.cloudflare.com/\">cloudflare</a>帳號。</li>\n<li>看過我之網站的設定，簡單說就是一個github page 與 透過OpenShift 這個 PaaS服務建立的網站。<ul>\n<li><a href=\"https://blog.marsen.me/2016/08/21/setting_DNS_with_google/\">怎麼建立一個網站？(一)</a></li>\n<li><a href=\"https://blog.marsen.me/2016/08/28/how_to_use_github_page/\">怎麼建立一個網站？(二)</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><ol>\n<li><a href=\"https://www.cloudflare.com/\">cloudflare</a> 設定DNS，在指定的domain下，設定為「DNS and HTTP Proxy(CDN)」。<br><img src=\"/images/090516_021242_AM.jpg\" alt=\"設定為「DNS and HTTP Proxy(CDN)」\"></li>\n<li>設定Page-Rules，這個是為了開啟SSL<ol>\n<li>設定<code>SSL</code>為<code>Flexible</code>,輸入<code>*.username.com/*</code>。<br>這個時候你就可以瀏覽<code>https://blog.username.com/</code>,但同時也可以瀏覽<code>http://blog.username.com/</code> 。<br>我希望HTTP能自動跳轉HTTPS，這部份如果是Node建立的網站，我可以用程式作轉導，<br>但是如果是github page建立網站，就要再仰賴 <a href=\"https://www.cloudflare.com/\">cloudflare</a> 了。</li>\n</ol>\n</li>\n<li>設定Page-Rules，這個是為了開啟SSL<ol>\n<li>設定<code>ALWAYS USE HTTPS</code>,輸入<code>http://*.username.com/*</code>。<br><img src=\"/images/090516_023252_AM.jpg\" alt=\"設定為「DNS and HTTP Proxy(CDN)」\"></li>\n</ol>\n</li>\n</ol>\n<p>設定完大致如下，順利的話幾分鐘就生效了。<br><img src=\"/images/090516_023554_AM.jpg\" alt=\"\"></p>\n<p>這時候瀏覽<code>http://blog.username.com/</code>就會轉導到<code>https://blog.username.com/</code>了 。</p>\n<h2 id=\"檢驗\"><a href=\"#檢驗\" class=\"headerlink\" title=\"檢驗\"></a>檢驗</h2><p>使用support HTTP/2的瀏覽器，瀏覽網頁，觀察其protocol 。<br><img src=\"/images/090516_024550_AM.jpg\" alt=\"\"></p>\n<p>(fin)</p>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://simular.co/knowledge/site-build/68-about-http2-and-http11.html\">了解 HTTP/2 的特色與 HTTP/1.1 的差異</a></li>\n<li><a href=\"https://blog.alphacamp.co/2016/07/12/http2/\">你的網站升級到 HTTP/2 了嗎？</a></li>\n<li><a href=\"http://www.ithome.com.tw/voice/94371\">為什麼我們需要HTTP/2？</a></li>\n<li><a href=\"http://www.ithome.com.tw/voice/94520\">HTTP/2登場，邁向新的紀元</a></li>\n<li><a href=\"http://www.ithome.com.tw/news/95353\">Google：將推動QUIC成為網路標準</a></li>\n</ul>\n"},{"title":"怎麼建立一個網站？(一) - 購買網域到設定DNS","date":"2016-08-21T14:12:53.000Z","_content":"\n## 前置作業\n1. 準備好你的google帳號。\n2. 可以連到美國的VPN。[google domain beta](https://atom.io/packages/atom-beautify) 台灣尚未開放\n3. 準備一張信用卡，狠狠的刷下去(挑對domain其實很便宜啦)\n4. 你的網站，什麼語言都可以，靜態的網頁也可以。  \n  *這裡我事先準備好了兩個網站,  \n  分別是用[github page](https://pages.github.com/) 與 [nodejs](https://nodejs.org) 的 [express](http://expressjs.com/),實作有機會再作記錄。\n\n\n## 設定domain\n1. github page 所建立的網站,會提供一組domain給你  \nex:`mydomain.github.io`\n2. openshift 建立的網站,一樣會提供一組domain給你  \nex:`mydomain.rhcloud.com`\n3. google domain 本身有提供 Name servers , 但是由於type`A`的domian,  \n必須指定公用ip(家中有裝hinet ADSL可以申請一組);但實際上我的兩個網站,並不需要我準備實體ip,  \n只需要使用 type `CNAME` 將我的subdomain指向原本服務的domain即可。  \nex:  \n  - blog.mydomain.me → mydomain.github.io\n  - www.mydomain.me → mydomain.rhcloud.com\n4. github page 要注意的事情，  \n你需要在你的github page 的repo root 加入一個名叫`CNAME`的檔案,\n檔案的內容很簡單, 只需要你的domain即可  \nex:\n        blog.mydomain.me  \n        mydomain.me\n\n## Bare CNAME\n大多數的時候, `CNAME` 的設定就夠了;不過對於我來說,  \n我會希望可以直接使用我的頂級domain,畢竟這樣網址可以更短一些,  \n`mydomain.me` 比 `www.mydomain.me` 更有感覺。\n\n這裡受限於google 的 Name servers , 頂級domain 必為Type`A`須綁定ip  \n這裡我們可以使用一個免費的服務[cloudflare](https://www.cloudflare.com/),來達成目的\n1. 註冊[cloudflare](https://www.cloudflare.com/)\n2. 登入後[add site](https://www.cloudflare.com/a/add-site),輸入你註冊的domain\nex:`mydomain`\n3. [cloudflare](https://www.cloudflare.com/) 會提供你至少兩組Name servers  \nex:  \n`carter.ns.cloudflare.com`  \n`tina.ns.cloudflare.com`\n4. 請先登入[google domain beta](https://atom.io/packages/atom-beautify)設定Name servers到[cloudflare](https://www.cloudflare.com/)\n5. 請依以下步驟設定\n  - \\*  → mydomain.me\n  - blog.mydomain.me → mydomain.github.io\n  - www.mydomain.me → mydomain.rhcloud.com\n6. 等待約數分鐘就ok啦\n\n## 結語\n前前後後查資料弄了一個禮拜，但是實際上設定大概1~2小時就搞定了。  \n對domain跟ip的相對關係與實務結合後更有體會了。\n\n歡迎指教討論。  \n(fin)\n","source":"_posts/setting_DNS_with_google.md","raw":"---\ntitle: 怎麼建立一個網站？(一) - 購買網域到設定DNS\ndate: 2016/08/21 22:12:53 \ntag:\n- website\n- domain\n- 記錄\n- DNS\n---\n\n## 前置作業\n1. 準備好你的google帳號。\n2. 可以連到美國的VPN。[google domain beta](https://atom.io/packages/atom-beautify) 台灣尚未開放\n3. 準備一張信用卡，狠狠的刷下去(挑對domain其實很便宜啦)\n4. 你的網站，什麼語言都可以，靜態的網頁也可以。  \n  *這裡我事先準備好了兩個網站,  \n  分別是用[github page](https://pages.github.com/) 與 [nodejs](https://nodejs.org) 的 [express](http://expressjs.com/),實作有機會再作記錄。\n\n\n## 設定domain\n1. github page 所建立的網站,會提供一組domain給你  \nex:`mydomain.github.io`\n2. openshift 建立的網站,一樣會提供一組domain給你  \nex:`mydomain.rhcloud.com`\n3. google domain 本身有提供 Name servers , 但是由於type`A`的domian,  \n必須指定公用ip(家中有裝hinet ADSL可以申請一組);但實際上我的兩個網站,並不需要我準備實體ip,  \n只需要使用 type `CNAME` 將我的subdomain指向原本服務的domain即可。  \nex:  \n  - blog.mydomain.me → mydomain.github.io\n  - www.mydomain.me → mydomain.rhcloud.com\n4. github page 要注意的事情，  \n你需要在你的github page 的repo root 加入一個名叫`CNAME`的檔案,\n檔案的內容很簡單, 只需要你的domain即可  \nex:\n        blog.mydomain.me  \n        mydomain.me\n\n## Bare CNAME\n大多數的時候, `CNAME` 的設定就夠了;不過對於我來說,  \n我會希望可以直接使用我的頂級domain,畢竟這樣網址可以更短一些,  \n`mydomain.me` 比 `www.mydomain.me` 更有感覺。\n\n這裡受限於google 的 Name servers , 頂級domain 必為Type`A`須綁定ip  \n這裡我們可以使用一個免費的服務[cloudflare](https://www.cloudflare.com/),來達成目的\n1. 註冊[cloudflare](https://www.cloudflare.com/)\n2. 登入後[add site](https://www.cloudflare.com/a/add-site),輸入你註冊的domain\nex:`mydomain`\n3. [cloudflare](https://www.cloudflare.com/) 會提供你至少兩組Name servers  \nex:  \n`carter.ns.cloudflare.com`  \n`tina.ns.cloudflare.com`\n4. 請先登入[google domain beta](https://atom.io/packages/atom-beautify)設定Name servers到[cloudflare](https://www.cloudflare.com/)\n5. 請依以下步驟設定\n  - \\*  → mydomain.me\n  - blog.mydomain.me → mydomain.github.io\n  - www.mydomain.me → mydomain.rhcloud.com\n6. 等待約數分鐘就ok啦\n\n## 結語\n前前後後查資料弄了一個禮拜，但是實際上設定大概1~2小時就搞定了。  \n對domain跟ip的相對關係與實務結合後更有體會了。\n\n歡迎指教討論。  \n(fin)\n","slug":"setting_DNS_with_google","published":1,"updated":"2016-12-04T17:07:44.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwawm321000n38opg20kjt7n","content":"<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ol>\n<li>準備好你的google帳號。</li>\n<li>可以連到美國的VPN。<a href=\"https://atom.io/packages/atom-beautify\" target=\"_blank\" rel=\"external\">google domain beta</a> 台灣尚未開放</li>\n<li>準備一張信用卡，狠狠的刷下去(挑對domain其實很便宜啦)</li>\n<li>你的網站，什麼語言都可以，靜態的網頁也可以。<br>*這裡我事先準備好了兩個網站,<br>分別是用<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">github page</a> 與 <a href=\"https://nodejs.org\" target=\"_blank\" rel=\"external\">nodejs</a> 的 <a href=\"http://expressjs.com/\" target=\"_blank\" rel=\"external\">express</a>,實作有機會再作記錄。</li>\n</ol>\n<h2 id=\"設定domain\"><a href=\"#設定domain\" class=\"headerlink\" title=\"設定domain\"></a>設定domain</h2><ol>\n<li>github page 所建立的網站,會提供一組domain給你<br>ex:<code>mydomain.github.io</code></li>\n<li>openshift 建立的網站,一樣會提供一組domain給你<br>ex:<code>mydomain.rhcloud.com</code></li>\n<li>google domain 本身有提供 Name servers , 但是由於type<code>A</code>的domian,<br>必須指定公用ip(家中有裝hinet ADSL可以申請一組);但實際上我的兩個網站,並不需要我準備實體ip,<br>只需要使用 type <code>CNAME</code> 將我的subdomain指向原本服務的domain即可。<br>ex:  <ul>\n<li>blog.mydomain.me → mydomain.github.io</li>\n<li>www.mydomain.me → mydomain.rhcloud.com</li>\n</ul>\n</li>\n<li>github page 要注意的事情，<br>你需要在你的github page 的repo root 加入一個名叫<code>CNAME</code>的檔案,<br>檔案的內容很簡單, 只需要你的domain即可<br>ex:<pre><code>blog.mydomain.me  \nmydomain.me\n</code></pre></li>\n</ol>\n<h2 id=\"Bare-CNAME\"><a href=\"#Bare-CNAME\" class=\"headerlink\" title=\"Bare CNAME\"></a>Bare CNAME</h2><p>大多數的時候, <code>CNAME</code> 的設定就夠了;不過對於我來說,<br>我會希望可以直接使用我的頂級domain,畢竟這樣網址可以更短一些,<br><code>mydomain.me</code> 比 <code>www.mydomain.me</code> 更有感覺。</p>\n<p>這裡受限於google 的 Name servers , 頂級domain 必為Type<code>A</code>須綁定ip<br>這裡我們可以使用一個免費的服務<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a>,來達成目的</p>\n<ol>\n<li>註冊<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a></li>\n<li>登入後<a href=\"https://www.cloudflare.com/a/add-site\" target=\"_blank\" rel=\"external\">add site</a>,輸入你註冊的domain<br>ex:<code>mydomain</code></li>\n<li><a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a> 會提供你至少兩組Name servers<br>ex:<br><code>carter.ns.cloudflare.com</code><br><code>tina.ns.cloudflare.com</code></li>\n<li>請先登入<a href=\"https://atom.io/packages/atom-beautify\" target=\"_blank\" rel=\"external\">google domain beta</a>設定Name servers到<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a></li>\n<li>請依以下步驟設定<ul>\n<li>*  → mydomain.me</li>\n<li>blog.mydomain.me → mydomain.github.io</li>\n<li>www.mydomain.me → mydomain.rhcloud.com</li>\n</ul>\n</li>\n<li>等待約數分鐘就ok啦</li>\n</ol>\n<h2 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h2><p>前前後後查資料弄了一個禮拜，但是實際上設定大概1~2小時就搞定了。<br>對domain跟ip的相對關係與實務結合後更有體會了。</p>\n<p>歡迎指教討論。<br>(fin)</p>\n","excerpt":"","more":"<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ol>\n<li>準備好你的google帳號。</li>\n<li>可以連到美國的VPN。<a href=\"https://atom.io/packages/atom-beautify\">google domain beta</a> 台灣尚未開放</li>\n<li>準備一張信用卡，狠狠的刷下去(挑對domain其實很便宜啦)</li>\n<li>你的網站，什麼語言都可以，靜態的網頁也可以。<br>*這裡我事先準備好了兩個網站,<br>分別是用<a href=\"https://pages.github.com/\">github page</a> 與 <a href=\"https://nodejs.org\">nodejs</a> 的 <a href=\"http://expressjs.com/\">express</a>,實作有機會再作記錄。</li>\n</ol>\n<h2 id=\"設定domain\"><a href=\"#設定domain\" class=\"headerlink\" title=\"設定domain\"></a>設定domain</h2><ol>\n<li>github page 所建立的網站,會提供一組domain給你<br>ex:<code>mydomain.github.io</code></li>\n<li>openshift 建立的網站,一樣會提供一組domain給你<br>ex:<code>mydomain.rhcloud.com</code></li>\n<li>google domain 本身有提供 Name servers , 但是由於type<code>A</code>的domian,<br>必須指定公用ip(家中有裝hinet ADSL可以申請一組);但實際上我的兩個網站,並不需要我準備實體ip,<br>只需要使用 type <code>CNAME</code> 將我的subdomain指向原本服務的domain即可。<br>ex:  <ul>\n<li>blog.mydomain.me → mydomain.github.io</li>\n<li>www.mydomain.me → mydomain.rhcloud.com</li>\n</ul>\n</li>\n<li>github page 要注意的事情，<br>你需要在你的github page 的repo root 加入一個名叫<code>CNAME</code>的檔案,<br>檔案的內容很簡單, 只需要你的domain即可<br>ex:<pre><code>blog.mydomain.me  \nmydomain.me\n</code></pre></li>\n</ol>\n<h2 id=\"Bare-CNAME\"><a href=\"#Bare-CNAME\" class=\"headerlink\" title=\"Bare CNAME\"></a>Bare CNAME</h2><p>大多數的時候, <code>CNAME</code> 的設定就夠了;不過對於我來說,<br>我會希望可以直接使用我的頂級domain,畢竟這樣網址可以更短一些,<br><code>mydomain.me</code> 比 <code>www.mydomain.me</code> 更有感覺。</p>\n<p>這裡受限於google 的 Name servers , 頂級domain 必為Type<code>A</code>須綁定ip<br>這裡我們可以使用一個免費的服務<a href=\"https://www.cloudflare.com/\">cloudflare</a>,來達成目的</p>\n<ol>\n<li>註冊<a href=\"https://www.cloudflare.com/\">cloudflare</a></li>\n<li>登入後<a href=\"https://www.cloudflare.com/a/add-site\">add site</a>,輸入你註冊的domain<br>ex:<code>mydomain</code></li>\n<li><a href=\"https://www.cloudflare.com/\">cloudflare</a> 會提供你至少兩組Name servers<br>ex:<br><code>carter.ns.cloudflare.com</code><br><code>tina.ns.cloudflare.com</code></li>\n<li>請先登入<a href=\"https://atom.io/packages/atom-beautify\">google domain beta</a>設定Name servers到<a href=\"https://www.cloudflare.com/\">cloudflare</a></li>\n<li>請依以下步驟設定<ul>\n<li>*  → mydomain.me</li>\n<li>blog.mydomain.me → mydomain.github.io</li>\n<li>www.mydomain.me → mydomain.rhcloud.com</li>\n</ul>\n</li>\n<li>等待約數分鐘就ok啦</li>\n</ol>\n<h2 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h2><p>前前後後查資料弄了一個禮拜，但是實際上設定大概1~2小時就搞定了。<br>對domain跟ip的相對關係與實務結合後更有體會了。</p>\n<p>歡迎指教討論。<br>(fin)</p>\n"},{"title":"怎麼建立一個網站？(二) - 簡單用github page 建立靜態網站","date":"2016-08-27T20:56:27.000Z","_content":"## 前置作業\n- 你要有一個github帳號\n\n## 建立github page\n如果不排斥看原文，可以直接[參考](https://pages.github.com/)  \n1. 建立一個repository,並且命名為`username.github.io`,這裡的username請使用你的Github帳號的username.  \n2. clone `username.github.io` 到你的本機上.\n        > git clone https://github.com/username/username.github.io\n3. 建立一個靜態網頁 `index.html` , 隨便打點什麼。  \n        <!DOCTYPE html PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n        <HTML>\n           <HEAD>\n              <TITLE>\n                 Hello world\n              </TITLE>\n           </HEAD>\n        <BODY>\n           <H1>Hello world</H1>\n           <P>This is my github page</P>\n        </BODY>\n        </HTML>\n4. commit之後,push 到github上\n        > git add --all\n        > git commit -m \"Initial commit\"\n        > git push -u origin master\n5. 瀏覽  http://username.github.io 即完成\n\n## 使用自訂的domain      \n\n1. 首先準備好一個domain ex: username.xyz\n2. 需要在根目錄底下，放入一個 CNAME file\n檔案的內容只需要你的domain即可  \nex:\n        blog.username.xyz  \n        username.xyz\n3. 在Name Servers (例如[cloudflare](https://www.cloudflare.com/))上設定`CNAME`到github page,   \n將`blog.username.xyz` 綁定到 `username.github.io`\nex:\n\n| TYPE | NAME | VALUE | TTL |\n|---|---|---|---|---|\n| CNAME  | * | username.xyz | auto |\n| CNAME  | blog | username.github.io | auto |\n更多請參考「[購買網域到設定DNS](http://blog.marsen.me/2016/08/21/setting_DNS_with_google/)」.\n\n## 透過Hexo部署\nHexo基本概念可以參考[官方中文文件](https://hexo.io/zh-tw/docs/index.html) .\n1. 重點在於`_config.yml`的設定\n        deploy:\n          type: git\n          repository: https://github.com/username/username.github.io\n          branche: master\n2. 執行`hexo d`進行部署，這個動作會將hexo 建立出來的靜態網站(html+css+javascript+圖片等…)部署到github page上。\n\n\n(fin)\n","source":"_posts/how_to_use_github_page.md","raw":"---\ntitle: 怎麼建立一個網站？(二) - 簡單用github page 建立靜態網站\ndate: 2016/08/28 4:56:27 \ntag:\n- github\n- 記錄\n---\n## 前置作業\n- 你要有一個github帳號\n\n## 建立github page\n如果不排斥看原文，可以直接[參考](https://pages.github.com/)  \n1. 建立一個repository,並且命名為`username.github.io`,這裡的username請使用你的Github帳號的username.  \n2. clone `username.github.io` 到你的本機上.\n        > git clone https://github.com/username/username.github.io\n3. 建立一個靜態網頁 `index.html` , 隨便打點什麼。  \n        <!DOCTYPE html PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n        <HTML>\n           <HEAD>\n              <TITLE>\n                 Hello world\n              </TITLE>\n           </HEAD>\n        <BODY>\n           <H1>Hello world</H1>\n           <P>This is my github page</P>\n        </BODY>\n        </HTML>\n4. commit之後,push 到github上\n        > git add --all\n        > git commit -m \"Initial commit\"\n        > git push -u origin master\n5. 瀏覽  http://username.github.io 即完成\n\n## 使用自訂的domain      \n\n1. 首先準備好一個domain ex: username.xyz\n2. 需要在根目錄底下，放入一個 CNAME file\n檔案的內容只需要你的domain即可  \nex:\n        blog.username.xyz  \n        username.xyz\n3. 在Name Servers (例如[cloudflare](https://www.cloudflare.com/))上設定`CNAME`到github page,   \n將`blog.username.xyz` 綁定到 `username.github.io`\nex:\n\n| TYPE | NAME | VALUE | TTL |\n|---|---|---|---|---|\n| CNAME  | * | username.xyz | auto |\n| CNAME  | blog | username.github.io | auto |\n更多請參考「[購買網域到設定DNS](http://blog.marsen.me/2016/08/21/setting_DNS_with_google/)」.\n\n## 透過Hexo部署\nHexo基本概念可以參考[官方中文文件](https://hexo.io/zh-tw/docs/index.html) .\n1. 重點在於`_config.yml`的設定\n        deploy:\n          type: git\n          repository: https://github.com/username/username.github.io\n          branche: master\n2. 執行`hexo d`進行部署，這個動作會將hexo 建立出來的靜態網站(html+css+javascript+圖片等…)部署到github page上。\n\n\n(fin)\n","slug":"how_to_use_github_page","published":1,"updated":"2016-12-04T17:03:32.179Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwawm325000p38opkyq59pew","content":"<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ul>\n<li>你要有一個github帳號</li>\n</ul>\n<h2 id=\"建立github-page\"><a href=\"#建立github-page\" class=\"headerlink\" title=\"建立github page\"></a>建立github page</h2><p>如果不排斥看原文，可以直接<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">參考</a>  </p>\n<ol>\n<li>建立一個repository,並且命名為<code>username.github.io</code>,這裡的username請使用你的Github帳號的username.  </li>\n<li>clone <code>username.github.io</code> 到你的本機上.<pre><code>&gt; git clone https://github.com/username/username.github.io\n</code></pre></li>\n<li>建立一個靜態網頁 <code>index.html</code> , 隨便打點什麼。  <pre><code>&lt;!DOCTYPE html PUBLIC &quot;-//IETF//DTD HTML 2.0//EN&quot;&gt;\n&lt;HTML&gt;\n   &lt;HEAD&gt;\n      &lt;TITLE&gt;\n         Hello world\n      &lt;/TITLE&gt;\n   &lt;/HEAD&gt;\n&lt;BODY&gt;\n   &lt;H1&gt;Hello world&lt;/H1&gt;\n   &lt;P&gt;This is my github page&lt;/P&gt;\n&lt;/BODY&gt;\n&lt;/HTML&gt;\n</code></pre></li>\n<li>commit之後,push 到github上<pre><code>&gt; git add --all\n&gt; git commit -m &quot;Initial commit&quot;\n&gt; git push -u origin master\n</code></pre></li>\n<li>瀏覽  <a href=\"http://username.github.io\" target=\"_blank\" rel=\"external\">http://username.github.io</a> 即完成</li>\n</ol>\n<h2 id=\"使用自訂的domain\"><a href=\"#使用自訂的domain\" class=\"headerlink\" title=\"使用自訂的domain\"></a>使用自訂的domain</h2><ol>\n<li>首先準備好一個domain ex: username.xyz</li>\n<li>需要在根目錄底下，放入一個 CNAME file<br>檔案的內容只需要你的domain即可<br>ex:<pre><code>blog.username.xyz  \nusername.xyz\n</code></pre></li>\n<li>在Name Servers (例如<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a>)上設定<code>CNAME</code>到github page,<br>將<code>blog.username.xyz</code> 綁定到 <code>username.github.io</code><br>ex:</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>TYPE</th>\n<th>NAME</th>\n<th>VALUE</th>\n<th>TTL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CNAME</td>\n<td>*</td>\n<td>username.xyz</td>\n<td>auto</td>\n</tr>\n<tr>\n<td>CNAME</td>\n<td>blog</td>\n<td>username.github.io</td>\n<td>auto</td>\n</tr>\n</tbody>\n</table>\n<p>更多請參考「<a href=\"http://blog.marsen.me/2016/08/21/setting_DNS_with_google/\">購買網域到設定DNS</a>」.</p>\n<h2 id=\"透過Hexo部署\"><a href=\"#透過Hexo部署\" class=\"headerlink\" title=\"透過Hexo部署\"></a>透過Hexo部署</h2><p>Hexo基本概念可以參考<a href=\"https://hexo.io/zh-tw/docs/index.html\" target=\"_blank\" rel=\"external\">官方中文文件</a> .</p>\n<ol>\n<li>重點在於<code>_config.yml</code>的設定<pre><code>deploy:\n  type: git\n  repository: https://github.com/username/username.github.io\n  branche: master\n</code></pre></li>\n<li>執行<code>hexo d</code>進行部署，這個動作會將hexo 建立出來的靜態網站(html+css+javascript+圖片等…)部署到github page上。</li>\n</ol>\n<p>(fin)</p>\n","excerpt":"","more":"<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ul>\n<li>你要有一個github帳號</li>\n</ul>\n<h2 id=\"建立github-page\"><a href=\"#建立github-page\" class=\"headerlink\" title=\"建立github page\"></a>建立github page</h2><p>如果不排斥看原文，可以直接<a href=\"https://pages.github.com/\">參考</a>  </p>\n<ol>\n<li>建立一個repository,並且命名為<code>username.github.io</code>,這裡的username請使用你的Github帳號的username.  </li>\n<li>clone <code>username.github.io</code> 到你的本機上.<pre><code>&gt; git clone https://github.com/username/username.github.io\n</code></pre></li>\n<li>建立一個靜態網頁 <code>index.html</code> , 隨便打點什麼。  <pre><code>&lt;!DOCTYPE html PUBLIC &quot;-//IETF//DTD HTML 2.0//EN&quot;&gt;\n&lt;HTML&gt;\n   &lt;HEAD&gt;\n      &lt;TITLE&gt;\n         Hello world\n      &lt;/TITLE&gt;\n   &lt;/HEAD&gt;\n&lt;BODY&gt;\n   &lt;H1&gt;Hello world&lt;/H1&gt;\n   &lt;P&gt;This is my github page&lt;/P&gt;\n&lt;/BODY&gt;\n&lt;/HTML&gt;\n</code></pre></li>\n<li>commit之後,push 到github上<pre><code>&gt; git add --all\n&gt; git commit -m &quot;Initial commit&quot;\n&gt; git push -u origin master\n</code></pre></li>\n<li>瀏覽  <a href=\"http://username.github.io\">http://username.github.io</a> 即完成</li>\n</ol>\n<h2 id=\"使用自訂的domain\"><a href=\"#使用自訂的domain\" class=\"headerlink\" title=\"使用自訂的domain\"></a>使用自訂的domain</h2><ol>\n<li>首先準備好一個domain ex: username.xyz</li>\n<li>需要在根目錄底下，放入一個 CNAME file<br>檔案的內容只需要你的domain即可<br>ex:<pre><code>blog.username.xyz  \nusername.xyz\n</code></pre></li>\n<li>在Name Servers (例如<a href=\"https://www.cloudflare.com/\">cloudflare</a>)上設定<code>CNAME</code>到github page,<br>將<code>blog.username.xyz</code> 綁定到 <code>username.github.io</code><br>ex:</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>TYPE</th>\n<th>NAME</th>\n<th>VALUE</th>\n<th>TTL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CNAME</td>\n<td>*</td>\n<td>username.xyz</td>\n<td>auto</td>\n</tr>\n<tr>\n<td>CNAME</td>\n<td>blog</td>\n<td>username.github.io</td>\n<td>auto</td>\n</tr>\n</tbody>\n</table>\n<p>更多請參考「<a href=\"http://blog.marsen.me/2016/08/21/setting_DNS_with_google/\">購買網域到設定DNS</a>」.</p>\n<h2 id=\"透過Hexo部署\"><a href=\"#透過Hexo部署\" class=\"headerlink\" title=\"透過Hexo部署\"></a>透過Hexo部署</h2><p>Hexo基本概念可以參考<a href=\"https://hexo.io/zh-tw/docs/index.html\">官方中文文件</a> .</p>\n<ol>\n<li>重點在於<code>_config.yml</code>的設定<pre><code>deploy:\n  type: git\n  repository: https://github.com/username/username.github.io\n  branche: master\n</code></pre></li>\n<li>執行<code>hexo d</code>進行部署，這個動作會將hexo 建立出來的靜態網站(html+css+javascript+圖片等…)部署到github page上。</li>\n</ol>\n<p>(fin)</p>\n"},{"title":"這個網站的待辦事項","date":"2016-08-19T18:09:07.000Z","_content":"1. ~~github page & hexo~~\n2. ~~nodejs express & Openshift~~\n3. DNS 原理簡介\n4. gulp學習筆記\n","source":"_posts/sites_todo_list.md","raw":"---\ntitle: 這個網站的待辦事項\ndate: 2016/08/20 02:09:07\n---\n1. ~~github page & hexo~~\n2. ~~nodejs express & Openshift~~\n3. DNS 原理簡介\n4. gulp學習筆記\n","slug":"sites_todo_list","published":1,"updated":"2016-10-08T18:07:46.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwawm329000s38op7gbn2v8b","content":"<ol>\n<li><del>github page &amp; hexo</del></li>\n<li><del>nodejs express &amp; Openshift</del></li>\n<li>DNS 原理簡介</li>\n<li>gulp學習筆記</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><del>github page &amp; hexo</del></li>\n<li><del>nodejs express &amp; Openshift</del></li>\n<li>DNS 原理簡介</li>\n<li>gulp學習筆記</li>\n</ol>\n"},{"title":"Hello World","date":"2016-08-13T03:32:15.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016/08/13 11:32:15 \n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2016-12-04T17:02:05.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwawm32b000u38opa2sk56ra","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"[KATA]用typescript作一個簡易的todolist(二) - 用JQuery實作","date":"2016-10-14T02:34:27.000Z","_content":"## 設計理念\n1. 顯示/新增/刪除 todolist \n2. todolist 會是一堆todoItem的集合,所以要定義todoItem的形別\n    - Content : todoItem 的內容\n    - Status : todoItem 的狀態,完成(done)、未完成(undo) ,設計成列舉\n3. 主要的功能\n    -  建立todoItem\n    -  完成todoItem\n    -  繪製todoList到前端的畫面上\n\n## 自我分析\n跟 UI 耦合太高,Render 應該與 TodoService 分離 ,\nDOM 註冊事件相依在 Service 裡面要抽離也不好抽 。\n沒有先寫測試 , 要想一想怎麼與 UI 層作隔離。\n\n\n\n## 程式碼\n\n  \n\n### 建立 BaseService\n\n```typescript\n    class BaseService<T>{\n        constructor(private type: string) {}\n        \n        List:Array<T> ;\n\n        Create(data: T) {\n            this.List.push(data);\n        }\n\n        Delete(data: T){\n            var index = this.List.indexOf(data);\n            this.List.splice(index,1) ;\n        }\n\n        Render(){\n\n        }\n    }\n\n```\n\n### 建立 todoItem interface\n\n```typescript\ninterface todoItem {\n    Content: string;\n    Status: todoStatus;\n}\n\n```\n\n### 建立 todoItem Status 列舉\n\n```typescript\nenum todoStatus{\n    undo,\n    done,    \n}\n\n```\n\n### 建立 TodoService\n\n```typescript\nclass TodoService extends BaseService<todoItem>{\n    constructor(){\n        super(\"todoItem\");        \n    }\n\n    public Render() : void {\n        let doneHtml = '';\n        let undoHtml = '';\n        \n        this.List.forEach((item)=>{\n            if(item.Status == todoStatus.done){\n                doneHtml += `<li>${item.Content}<button class=\"recover-item btn btn-default btn-xs pull-right\"><span class=\"glyphicon glyphicon-share-alt\"></span></button><button class=\"remove-item btn btn-default btn-xs pull-right\"><span class=\"glyphicon glyphicon-remove\"></span></button></li>`;\n            } else if (item.Status == todoStatus.undo){\n                undoHtml += `<li class=\"ui-state-default\"><div class=\"checkbox\"><label><input type=\"checkbox\" value=\"\" />${item.Content}</label></div></li>` ;\n            }\n        });\n        $(\"#done-items\").html(doneHtml);\n        $('#sortable').html(undoHtml);\n        $('.add-todo').val('');\n    }\n\n    Delete(data: todoItem){\n        data.Status = todoStatus.done ;\n    }\n\n\n\n    Init(){\n        //// todoList in localStorage         \n        var list = window.localStorage.getItem(\"todoList\");        \n        if(!list){\n            this.List = new Array<todoItem>();\n        }else{\n            this.List = JSON.parse(list);\n        }\n        window.onbeforeunload = (evt) => {\n            window.localStorage.setItem(\"todoList\",JSON.stringify(this.List));\n        };\n\n        // mark task as done\n        $('.todolist').on('change','#sortable li input[type=\"checkbox\"]',(evt)=>{\n            var self = evt.target;\n            var text = $(self).parent().text();\n            if($(self).prop('checked')){\n                var doneItem = this.List.filter((i)=>{return text == i.Content;})[0];\n                this.Delete(doneItem);\n                this.Render();\n            }\n        });\n\n        $('.add-todo').on('keypress',(evt) => {\n            evt.preventDefault\n            if (evt.which == 13) {\n                if($(evt.target).val() != ''){\n                    var todo = $(evt.target).val();\n                    this.Create(  {\n                        Content : $(evt.target).val() ,\n                        Status : todoStatus.undo \n                    });\n                    this.Render();                 \n                }else{\n                    // some validation\n                }\n            }\n        });\n        \n        $('.todolist').on('click', '#done-items li button.recover-item',(evt)=>{\n            var text = $(evt.target).parent().parent().text();\n            var recoverItem = this.List.filter((i)=>{return text == i.Content;})[0];\n            recoverItem.Status = todoStatus.undo ;\n            this.Render();\n        });\n\n        $('.todolist').on('click','#done-items li button.remove-item' ,(evt)=>{\n            var text = $(evt.target).parent().parent().text();\n            var removeItem = this.List.filter((i)=>{return text == i.Content;})[0];\n            var index = this.List.indexOf(removeItem);\n            this.List.splice(index,1) ;\n            this.Render();\n        });\n\n        $('#checkAll').on('click',(evt)=>{\n            this.List.forEach((item)=>{\n                item.Status = todoStatus.done;\n            });\n            this.Render();\n        });\n\n        //// Render\n        this.Render();\n    }\n}\n\n```\n\n### 使用建立好的 TodoService\n\n```typescript\nvar todoService = new TodoService();\ntodoService.Init();\n \n```\n\n(fin)","source":"_posts/todolist_by_typescript_2.md","raw":"---\ntitle: '[KATA]用typescript作一個簡易的todolist(二) - 用JQuery實作'\ndate: 2016/10/14 10:34:27\ntag: \n- kata\n- typescript\n- bootstrap\n- npm\n- jquery\n- jquery-ui\n---\n## 設計理念\n1. 顯示/新增/刪除 todolist \n2. todolist 會是一堆todoItem的集合,所以要定義todoItem的形別\n    - Content : todoItem 的內容\n    - Status : todoItem 的狀態,完成(done)、未完成(undo) ,設計成列舉\n3. 主要的功能\n    -  建立todoItem\n    -  完成todoItem\n    -  繪製todoList到前端的畫面上\n\n## 自我分析\n跟 UI 耦合太高,Render 應該與 TodoService 分離 ,\nDOM 註冊事件相依在 Service 裡面要抽離也不好抽 。\n沒有先寫測試 , 要想一想怎麼與 UI 層作隔離。\n\n\n\n## 程式碼\n\n  \n\n### 建立 BaseService\n\n```typescript\n    class BaseService<T>{\n        constructor(private type: string) {}\n        \n        List:Array<T> ;\n\n        Create(data: T) {\n            this.List.push(data);\n        }\n\n        Delete(data: T){\n            var index = this.List.indexOf(data);\n            this.List.splice(index,1) ;\n        }\n\n        Render(){\n\n        }\n    }\n\n```\n\n### 建立 todoItem interface\n\n```typescript\ninterface todoItem {\n    Content: string;\n    Status: todoStatus;\n}\n\n```\n\n### 建立 todoItem Status 列舉\n\n```typescript\nenum todoStatus{\n    undo,\n    done,    \n}\n\n```\n\n### 建立 TodoService\n\n```typescript\nclass TodoService extends BaseService<todoItem>{\n    constructor(){\n        super(\"todoItem\");        \n    }\n\n    public Render() : void {\n        let doneHtml = '';\n        let undoHtml = '';\n        \n        this.List.forEach((item)=>{\n            if(item.Status == todoStatus.done){\n                doneHtml += `<li>${item.Content}<button class=\"recover-item btn btn-default btn-xs pull-right\"><span class=\"glyphicon glyphicon-share-alt\"></span></button><button class=\"remove-item btn btn-default btn-xs pull-right\"><span class=\"glyphicon glyphicon-remove\"></span></button></li>`;\n            } else if (item.Status == todoStatus.undo){\n                undoHtml += `<li class=\"ui-state-default\"><div class=\"checkbox\"><label><input type=\"checkbox\" value=\"\" />${item.Content}</label></div></li>` ;\n            }\n        });\n        $(\"#done-items\").html(doneHtml);\n        $('#sortable').html(undoHtml);\n        $('.add-todo').val('');\n    }\n\n    Delete(data: todoItem){\n        data.Status = todoStatus.done ;\n    }\n\n\n\n    Init(){\n        //// todoList in localStorage         \n        var list = window.localStorage.getItem(\"todoList\");        \n        if(!list){\n            this.List = new Array<todoItem>();\n        }else{\n            this.List = JSON.parse(list);\n        }\n        window.onbeforeunload = (evt) => {\n            window.localStorage.setItem(\"todoList\",JSON.stringify(this.List));\n        };\n\n        // mark task as done\n        $('.todolist').on('change','#sortable li input[type=\"checkbox\"]',(evt)=>{\n            var self = evt.target;\n            var text = $(self).parent().text();\n            if($(self).prop('checked')){\n                var doneItem = this.List.filter((i)=>{return text == i.Content;})[0];\n                this.Delete(doneItem);\n                this.Render();\n            }\n        });\n\n        $('.add-todo').on('keypress',(evt) => {\n            evt.preventDefault\n            if (evt.which == 13) {\n                if($(evt.target).val() != ''){\n                    var todo = $(evt.target).val();\n                    this.Create(  {\n                        Content : $(evt.target).val() ,\n                        Status : todoStatus.undo \n                    });\n                    this.Render();                 \n                }else{\n                    // some validation\n                }\n            }\n        });\n        \n        $('.todolist').on('click', '#done-items li button.recover-item',(evt)=>{\n            var text = $(evt.target).parent().parent().text();\n            var recoverItem = this.List.filter((i)=>{return text == i.Content;})[0];\n            recoverItem.Status = todoStatus.undo ;\n            this.Render();\n        });\n\n        $('.todolist').on('click','#done-items li button.remove-item' ,(evt)=>{\n            var text = $(evt.target).parent().parent().text();\n            var removeItem = this.List.filter((i)=>{return text == i.Content;})[0];\n            var index = this.List.indexOf(removeItem);\n            this.List.splice(index,1) ;\n            this.Render();\n        });\n\n        $('#checkAll').on('click',(evt)=>{\n            this.List.forEach((item)=>{\n                item.Status = todoStatus.done;\n            });\n            this.Render();\n        });\n\n        //// Render\n        this.Render();\n    }\n}\n\n```\n\n### 使用建立好的 TodoService\n\n```typescript\nvar todoService = new TodoService();\ntodoService.Init();\n \n```\n\n(fin)","slug":"todolist_by_typescript_2","published":1,"updated":"2016-12-04T17:09:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwawm32c000x38opuep6woa5","content":"<h2 id=\"設計理念\"><a href=\"#設計理念\" class=\"headerlink\" title=\"設計理念\"></a>設計理念</h2><ol>\n<li>顯示/新增/刪除 todolist </li>\n<li>todolist 會是一堆todoItem的集合,所以要定義todoItem的形別<ul>\n<li>Content : todoItem 的內容</li>\n<li>Status : todoItem 的狀態,完成(done)、未完成(undo) ,設計成列舉</li>\n</ul>\n</li>\n<li>主要的功能<ul>\n<li>建立todoItem</li>\n<li>完成todoItem</li>\n<li>繪製todoList到前端的畫面上</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"自我分析\"><a href=\"#自我分析\" class=\"headerlink\" title=\"自我分析\"></a>自我分析</h2><p>跟 UI 耦合太高,Render 應該與 TodoService 分離 ,<br>DOM 註冊事件相依在 Service 裡面要抽離也不好抽 。<br>沒有先寫測試 , 要想一想怎麼與 UI 層作隔離。</p>\n<h2 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h2><h3 id=\"建立-BaseService\"><a href=\"#建立-BaseService\" class=\"headerlink\" title=\"建立 BaseService\"></a>建立 BaseService</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> BaseService&lt;T&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(private type: string) &#123;&#125;</div><div class=\"line\">    </div><div class=\"line\">    List:<span class=\"built_in\">Array</span>&lt;T&gt; ;</div><div class=\"line\"></div><div class=\"line\">    Create(data: T) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.List.push(data);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Delete(data: T)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> index = <span class=\"keyword\">this</span>.List.indexOf(data);</div><div class=\"line\">        <span class=\"keyword\">this</span>.List.splice(index,<span class=\"number\">1</span>) ;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Render()&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"建立-todoItem-interface\"><a href=\"#建立-todoItem-interface\" class=\"headerlink\" title=\"建立 todoItem interface\"></a>建立 todoItem interface</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> todoItem &#123;</div><div class=\"line\">    Content: <span class=\"built_in\">string</span>;</div><div class=\"line\">    Status: todoStatus;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"建立-todoItem-Status-列舉\"><a href=\"#建立-todoItem-Status-列舉\" class=\"headerlink\" title=\"建立 todoItem Status 列舉\"></a>建立 todoItem Status 列舉</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">enum</span> todoStatus&#123;</div><div class=\"line\">    undo,</div><div class=\"line\">    done,    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"建立-TodoService\"><a href=\"#建立-TodoService\" class=\"headerlink\" title=\"建立 TodoService\"></a>建立 TodoService</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> TodoService extends BaseService&lt;todoItem&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">\"todoItem\"</span>);        </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Render() : <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> doneHtml = <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"keyword\">let</span> undoHtml = <span class=\"string\">''</span>;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">this</span>.List.forEach((item)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(item.Status == todoStatus.done)&#123;</div><div class=\"line\">                doneHtml += <span class=\"string\">`&lt;li&gt;<span class=\"subst\">$&#123;item.Content&#125;</span>&lt;button class=\"recover-item btn btn-default btn-xs pull-right\"&gt;&lt;span class=\"glyphicon glyphicon-share-alt\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;button class=\"remove-item btn btn-default btn-xs pull-right\"&gt;&lt;span class=\"glyphicon glyphicon-remove\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt;`</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.Status == todoStatus.undo)&#123;</div><div class=\"line\">                undoHtml += <span class=\"string\">`&lt;li class=\"ui-state-default\"&gt;&lt;div class=\"checkbox\"&gt;&lt;label&gt;&lt;input type=\"checkbox\" value=\"\" /&gt;<span class=\"subst\">$&#123;item.Content&#125;</span>&lt;/label&gt;&lt;/div&gt;&lt;/li&gt;`</span> ;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        $(<span class=\"string\">\"#done-items\"</span>).html(doneHtml);</div><div class=\"line\">        $(<span class=\"string\">'#sortable'</span>).html(undoHtml);</div><div class=\"line\">        $(<span class=\"string\">'.add-todo'</span>).val(<span class=\"string\">''</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Delete(data: todoItem)&#123;</div><div class=\"line\">        data.Status = todoStatus.done ;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    Init()&#123;</div><div class=\"line\">        <span class=\"comment\">//// todoList in localStorage         </span></div><div class=\"line\">        <span class=\"keyword\">var</span> list = <span class=\"built_in\">window</span>.localStorage.getItem(<span class=\"string\">\"todoList\"</span>);        </div><div class=\"line\">        <span class=\"keyword\">if</span>(!list)&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.List = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>&lt;todoItem&gt;();</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.List = <span class=\"built_in\">JSON</span>.parse(list);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">window</span>.onbeforeunload = (evt) =&gt; &#123;</div><div class=\"line\">            <span class=\"built_in\">window</span>.localStorage.setItem(<span class=\"string\">\"todoList\"</span>,<span class=\"built_in\">JSON</span>.stringify(<span class=\"keyword\">this</span>.List));</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// mark task as done</span></div><div class=\"line\">        $(<span class=\"string\">'.todolist'</span>).on(<span class=\"string\">'change'</span>,<span class=\"string\">'#sortable li input[type=\"checkbox\"]'</span>,(evt)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> self = evt.target;</div><div class=\"line\">            <span class=\"keyword\">var</span> text = $(self).parent().text();</div><div class=\"line\">            <span class=\"keyword\">if</span>($(self).prop(<span class=\"string\">'checked'</span>))&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> doneItem = <span class=\"keyword\">this</span>.List.filter((i)=&gt;&#123;<span class=\"keyword\">return</span> text == i.Content;&#125;)[<span class=\"number\">0</span>];</div><div class=\"line\">                <span class=\"keyword\">this</span>.Delete(doneItem);</div><div class=\"line\">                <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        $(<span class=\"string\">'.add-todo'</span>).on(<span class=\"string\">'keypress'</span>,(evt) =&gt; &#123;</div><div class=\"line\">            evt.preventDefault</div><div class=\"line\">            <span class=\"keyword\">if</span> (evt.which == <span class=\"number\">13</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>($(evt.target).val() != <span class=\"string\">''</span>)&#123;</div><div class=\"line\">                    <span class=\"keyword\">var</span> todo = $(evt.target).val();</div><div class=\"line\">                    <span class=\"keyword\">this</span>.Create(  &#123;</div><div class=\"line\">                        Content : $(evt.target).val() ,</div><div class=\"line\">                        Status : todoStatus.undo </div><div class=\"line\">                    &#125;);</div><div class=\"line\">                    <span class=\"keyword\">this</span>.Render();                 </div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    <span class=\"comment\">// some validation</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        $(<span class=\"string\">'.todolist'</span>).on(<span class=\"string\">'click'</span>, <span class=\"string\">'#done-items li button.recover-item'</span>,(evt)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> text = $(evt.target).parent().parent().text();</div><div class=\"line\">            <span class=\"keyword\">var</span> recoverItem = <span class=\"keyword\">this</span>.List.filter((i)=&gt;&#123;<span class=\"keyword\">return</span> text == i.Content;&#125;)[<span class=\"number\">0</span>];</div><div class=\"line\">            recoverItem.Status = todoStatus.undo ;</div><div class=\"line\">            <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        $(<span class=\"string\">'.todolist'</span>).on(<span class=\"string\">'click'</span>,<span class=\"string\">'#done-items li button.remove-item'</span> ,(evt)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> text = $(evt.target).parent().parent().text();</div><div class=\"line\">            <span class=\"keyword\">var</span> removeItem = <span class=\"keyword\">this</span>.List.filter((i)=&gt;&#123;<span class=\"keyword\">return</span> text == i.Content;&#125;)[<span class=\"number\">0</span>];</div><div class=\"line\">            <span class=\"keyword\">var</span> index = <span class=\"keyword\">this</span>.List.indexOf(removeItem);</div><div class=\"line\">            <span class=\"keyword\">this</span>.List.splice(index,<span class=\"number\">1</span>) ;</div><div class=\"line\">            <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        $(<span class=\"string\">'#checkAll'</span>).on(<span class=\"string\">'click'</span>,(evt)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.List.forEach((item)=&gt;&#123;</div><div class=\"line\">                item.Status = todoStatus.done;</div><div class=\"line\">            &#125;);</div><div class=\"line\">            <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//// Render</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用建立好的-TodoService\"><a href=\"#使用建立好的-TodoService\" class=\"headerlink\" title=\"使用建立好的 TodoService\"></a>使用建立好的 TodoService</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> todoService = <span class=\"keyword\">new</span> TodoService();</div><div class=\"line\">todoService.Init();</div></pre></td></tr></table></figure>\n<p>(fin)</p>\n","excerpt":"","more":"<h2 id=\"設計理念\"><a href=\"#設計理念\" class=\"headerlink\" title=\"設計理念\"></a>設計理念</h2><ol>\n<li>顯示/新增/刪除 todolist </li>\n<li>todolist 會是一堆todoItem的集合,所以要定義todoItem的形別<ul>\n<li>Content : todoItem 的內容</li>\n<li>Status : todoItem 的狀態,完成(done)、未完成(undo) ,設計成列舉</li>\n</ul>\n</li>\n<li>主要的功能<ul>\n<li>建立todoItem</li>\n<li>完成todoItem</li>\n<li>繪製todoList到前端的畫面上</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"自我分析\"><a href=\"#自我分析\" class=\"headerlink\" title=\"自我分析\"></a>自我分析</h2><p>跟 UI 耦合太高,Render 應該與 TodoService 分離 ,<br>DOM 註冊事件相依在 Service 裡面要抽離也不好抽 。<br>沒有先寫測試 , 要想一想怎麼與 UI 層作隔離。</p>\n<h2 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h2><h3 id=\"建立-BaseService\"><a href=\"#建立-BaseService\" class=\"headerlink\" title=\"建立 BaseService\"></a>建立 BaseService</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> BaseService&lt;T&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(private type: string) &#123;&#125;</div><div class=\"line\">    </div><div class=\"line\">    List:<span class=\"built_in\">Array</span>&lt;T&gt; ;</div><div class=\"line\"></div><div class=\"line\">    Create(data: T) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.List.push(data);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Delete(data: T)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> index = <span class=\"keyword\">this</span>.List.indexOf(data);</div><div class=\"line\">        <span class=\"keyword\">this</span>.List.splice(index,<span class=\"number\">1</span>) ;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Render()&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"建立-todoItem-interface\"><a href=\"#建立-todoItem-interface\" class=\"headerlink\" title=\"建立 todoItem interface\"></a>建立 todoItem interface</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> todoItem &#123;</div><div class=\"line\">    Content: <span class=\"built_in\">string</span>;</div><div class=\"line\">    Status: todoStatus;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"建立-todoItem-Status-列舉\"><a href=\"#建立-todoItem-Status-列舉\" class=\"headerlink\" title=\"建立 todoItem Status 列舉\"></a>建立 todoItem Status 列舉</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">enum</span> todoStatus&#123;</div><div class=\"line\">    undo,</div><div class=\"line\">    done,    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"建立-TodoService\"><a href=\"#建立-TodoService\" class=\"headerlink\" title=\"建立 TodoService\"></a>建立 TodoService</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> TodoService extends BaseService&lt;todoItem&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">\"todoItem\"</span>);        </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Render() : <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> doneHtml = <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"keyword\">let</span> undoHtml = <span class=\"string\">''</span>;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">this</span>.List.forEach((item)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(item.Status == todoStatus.done)&#123;</div><div class=\"line\">                doneHtml += <span class=\"string\">`&lt;li&gt;<span class=\"subst\">$&#123;item.Content&#125;</span>&lt;button class=\"recover-item btn btn-default btn-xs pull-right\"&gt;&lt;span class=\"glyphicon glyphicon-share-alt\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;button class=\"remove-item btn btn-default btn-xs pull-right\"&gt;&lt;span class=\"glyphicon glyphicon-remove\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt;`</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.Status == todoStatus.undo)&#123;</div><div class=\"line\">                undoHtml += <span class=\"string\">`&lt;li class=\"ui-state-default\"&gt;&lt;div class=\"checkbox\"&gt;&lt;label&gt;&lt;input type=\"checkbox\" value=\"\" /&gt;<span class=\"subst\">$&#123;item.Content&#125;</span>&lt;/label&gt;&lt;/div&gt;&lt;/li&gt;`</span> ;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        $(<span class=\"string\">\"#done-items\"</span>).html(doneHtml);</div><div class=\"line\">        $(<span class=\"string\">'#sortable'</span>).html(undoHtml);</div><div class=\"line\">        $(<span class=\"string\">'.add-todo'</span>).val(<span class=\"string\">''</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Delete(data: todoItem)&#123;</div><div class=\"line\">        data.Status = todoStatus.done ;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    Init()&#123;</div><div class=\"line\">        <span class=\"comment\">//// todoList in localStorage         </span></div><div class=\"line\">        <span class=\"keyword\">var</span> list = <span class=\"built_in\">window</span>.localStorage.getItem(<span class=\"string\">\"todoList\"</span>);        </div><div class=\"line\">        <span class=\"keyword\">if</span>(!list)&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.List = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>&lt;todoItem&gt;();</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.List = <span class=\"built_in\">JSON</span>.parse(list);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">window</span>.onbeforeunload = (evt) =&gt; &#123;</div><div class=\"line\">            <span class=\"built_in\">window</span>.localStorage.setItem(<span class=\"string\">\"todoList\"</span>,<span class=\"built_in\">JSON</span>.stringify(<span class=\"keyword\">this</span>.List));</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// mark task as done</span></div><div class=\"line\">        $(<span class=\"string\">'.todolist'</span>).on(<span class=\"string\">'change'</span>,<span class=\"string\">'#sortable li input[type=\"checkbox\"]'</span>,(evt)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> self = evt.target;</div><div class=\"line\">            <span class=\"keyword\">var</span> text = $(self).parent().text();</div><div class=\"line\">            <span class=\"keyword\">if</span>($(self).prop(<span class=\"string\">'checked'</span>))&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> doneItem = <span class=\"keyword\">this</span>.List.filter((i)=&gt;&#123;<span class=\"keyword\">return</span> text == i.Content;&#125;)[<span class=\"number\">0</span>];</div><div class=\"line\">                <span class=\"keyword\">this</span>.Delete(doneItem);</div><div class=\"line\">                <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        $(<span class=\"string\">'.add-todo'</span>).on(<span class=\"string\">'keypress'</span>,(evt) =&gt; &#123;</div><div class=\"line\">            evt.preventDefault</div><div class=\"line\">            <span class=\"keyword\">if</span> (evt.which == <span class=\"number\">13</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>($(evt.target).val() != <span class=\"string\">''</span>)&#123;</div><div class=\"line\">                    <span class=\"keyword\">var</span> todo = $(evt.target).val();</div><div class=\"line\">                    <span class=\"keyword\">this</span>.Create(  &#123;</div><div class=\"line\">                        Content : $(evt.target).val() ,</div><div class=\"line\">                        Status : todoStatus.undo </div><div class=\"line\">                    &#125;);</div><div class=\"line\">                    <span class=\"keyword\">this</span>.Render();                 </div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    <span class=\"comment\">// some validation</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        $(<span class=\"string\">'.todolist'</span>).on(<span class=\"string\">'click'</span>, <span class=\"string\">'#done-items li button.recover-item'</span>,(evt)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> text = $(evt.target).parent().parent().text();</div><div class=\"line\">            <span class=\"keyword\">var</span> recoverItem = <span class=\"keyword\">this</span>.List.filter((i)=&gt;&#123;<span class=\"keyword\">return</span> text == i.Content;&#125;)[<span class=\"number\">0</span>];</div><div class=\"line\">            recoverItem.Status = todoStatus.undo ;</div><div class=\"line\">            <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        $(<span class=\"string\">'.todolist'</span>).on(<span class=\"string\">'click'</span>,<span class=\"string\">'#done-items li button.remove-item'</span> ,(evt)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> text = $(evt.target).parent().parent().text();</div><div class=\"line\">            <span class=\"keyword\">var</span> removeItem = <span class=\"keyword\">this</span>.List.filter((i)=&gt;&#123;<span class=\"keyword\">return</span> text == i.Content;&#125;)[<span class=\"number\">0</span>];</div><div class=\"line\">            <span class=\"keyword\">var</span> index = <span class=\"keyword\">this</span>.List.indexOf(removeItem);</div><div class=\"line\">            <span class=\"keyword\">this</span>.List.splice(index,<span class=\"number\">1</span>) ;</div><div class=\"line\">            <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        $(<span class=\"string\">'#checkAll'</span>).on(<span class=\"string\">'click'</span>,(evt)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.List.forEach((item)=&gt;&#123;</div><div class=\"line\">                item.Status = todoStatus.done;</div><div class=\"line\">            &#125;);</div><div class=\"line\">            <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//// Render</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用建立好的-TodoService\"><a href=\"#使用建立好的-TodoService\" class=\"headerlink\" title=\"使用建立好的 TodoService\"></a>使用建立好的 TodoService</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> todoService = <span class=\"keyword\">new</span> TodoService();</div><div class=\"line\">todoService.Init();</div></pre></td></tr></table></figure>\n<p>(fin)</p>\n"},{"title":"[KATA]用typescript作一個簡易的todolist(一) - 前置作業","date":"2016-10-08T02:34:27.000Z","_content":"## 目標\n1. 使用 typescript 開發\n2. 顯示/新增/刪除 todolist \n\n## 功能分析\n1. 只是練習,故不開發server side的程式\n2. 暫時存在 cookie 上\n3. 用 bootstrap 作簡單的樣式\n\n## 實作記錄\n\n### UI : 使用 Bootstrap _沒有必要重新打造輪子,能用的就拿來用_\n- 找到一個TODOLIST的[樣版](http://bootsnipp.com/index.php/snippets/featured/todo-example),內含 HTML 、 CSS 與 JS ,功能完整.\n- 取用[樣版](http://bootsnipp.com/index.php/snippets/featured/todo-example)的HTML .     \n- 引用 bootstrap 3.3.5 CDN上的 css .\n- 建立一個 todo.css 直接引用[樣版](http://bootsnipp.com/index.php/snippets/featured/todo-example)的 css 並加入頁面參考.\n\n\n### 開發環境 \n1. 安裝 typescript  \n`npm install typescript --save`\n2. 安裝 gulp  \n`npm install gulp`\n`npm install --global gulp` \n3. 安裝 gulp-typescript  \n`npm install gulp-typescript`\n4. 建立gulpfile.js \n\n```javascript\nvar gulp = require('gulp');\nvar tsc = require('gulp-typescript');\ngulp.task('default', function() {     \n        return gulp.src('public/javascripts/**/*.ts')\n        .pipe(tsc())\n        .pipe(gulp.dest('public/javascripts/'));\n});\n```\n\n### Typescript\n\n1. 關於 typescript 的定義檔, 以前有 tsd 與 typings兩種管理工具,現在可以更簡便的合併到 npm 作管理 .\n\n2. 透過 [TypeSearch](http://microsoft.github.io/TypeSearch/) 可以找到 [bootstrap](https://www.npmjs.com/package/@types/bootstrap) 的 typescript 定義檔.\n\n3. 執行 `npm install --save @types/bootstrap` 安裝 bootstrap (目前的版本是 Bootstrap 3.3.5) , 因為相依於 jquery 所以也會一併安裝\n\n4. 安裝 jquery-ui 的定義檔  \n`npm install --save @types/jqueryui`\n\n5. 新增檔案 `todo.ts` ,將 [樣版](http://bootsnipp.com/index.php/snippets/featured/todo-example) 的 javascript 複製貼上 .   \n   _*註:因為 typescript 是 javascript 的 superset , 完全可以相容原生 javascript, 如果有任何錯誤, TypeScript將會提示你_\n\n6. todo.ts 引用 jquery 、jquery-ui 與 bootstrap 的 typescript 定義檔.  \n        \n        /// <reference path=\"../../../node_modules/@types/jquery/index.d.ts\"/>  \n        /// <reference path=\"../../../node_modules/@types/bootstrap/index.d.ts\"/>  \n        /// <reference path=\"../../../node_modules/@types/jqueryui/index.d.ts\"/>\n\n7. 頁面載入對應的js檔,記得放置順序 jquery 要在最前面,並將放在`<\\body>`之後  \n        \n        <script src=\"http://code.jquery.com/jquery-2.2.4.min.js\"   integrity=\"sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=\"   crossorigin=\"anonymous\"></script>\n        <script src=\"//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js\"></script>\n        <script src=\"http://code.jquery.com/ui/1.12.1/jquery-ui.min.js\"   integrity=\"sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=\"   crossorigin=\"anonymous\"></script>\n\n8. 執行 `gulp` ,會產生todo.js\n\n7. 頁面載入js檔,記得要放在相依的js( jquery 、 bootstap 、 jqueryui)之後.\n        \n        <script type=\"text/javascript\" src=\"/javascripts/kata/todo.js\"></script>\n\n\n#### 截至目前為止,僅僅是在作複製樣版,同時一併處理一些基本 gulp 與 typescript 相關的配置\n#### 接下來才要開始寫 typescript \n\n(待續)\n\n#### 參考\n\n1. [關於 TypeScript 2.0 之後的模組定義檔 ( Declaration Files ) ( *.d.ts )](http://blog.miniasp.com/post/2016/08/22/TypeScript-Future-Declaration-Files.aspx)\n2. [bootsnipp](http://bootsnipp.com/)\n3. [TYPESCRIPT + EXPRESS + NODE.JS](http://com-brianflove.appspot.com/2016/03/29/typescript-express-node-js/)","source":"_posts/todolist_by_typescript_1.md","raw":"---\ntitle: '[KATA]用typescript作一個簡易的todolist(一) - 前置作業'\ndate: 2016/10/08 10:34:27\ntag: \n- kata\n- typescript\n- bootstrap\n- npm\n- jquery\n- jquery-ui\n---\n## 目標\n1. 使用 typescript 開發\n2. 顯示/新增/刪除 todolist \n\n## 功能分析\n1. 只是練習,故不開發server side的程式\n2. 暫時存在 cookie 上\n3. 用 bootstrap 作簡單的樣式\n\n## 實作記錄\n\n### UI : 使用 Bootstrap _沒有必要重新打造輪子,能用的就拿來用_\n- 找到一個TODOLIST的[樣版](http://bootsnipp.com/index.php/snippets/featured/todo-example),內含 HTML 、 CSS 與 JS ,功能完整.\n- 取用[樣版](http://bootsnipp.com/index.php/snippets/featured/todo-example)的HTML .     \n- 引用 bootstrap 3.3.5 CDN上的 css .\n- 建立一個 todo.css 直接引用[樣版](http://bootsnipp.com/index.php/snippets/featured/todo-example)的 css 並加入頁面參考.\n\n\n### 開發環境 \n1. 安裝 typescript  \n`npm install typescript --save`\n2. 安裝 gulp  \n`npm install gulp`\n`npm install --global gulp` \n3. 安裝 gulp-typescript  \n`npm install gulp-typescript`\n4. 建立gulpfile.js \n\n```javascript\nvar gulp = require('gulp');\nvar tsc = require('gulp-typescript');\ngulp.task('default', function() {     \n        return gulp.src('public/javascripts/**/*.ts')\n        .pipe(tsc())\n        .pipe(gulp.dest('public/javascripts/'));\n});\n```\n\n### Typescript\n\n1. 關於 typescript 的定義檔, 以前有 tsd 與 typings兩種管理工具,現在可以更簡便的合併到 npm 作管理 .\n\n2. 透過 [TypeSearch](http://microsoft.github.io/TypeSearch/) 可以找到 [bootstrap](https://www.npmjs.com/package/@types/bootstrap) 的 typescript 定義檔.\n\n3. 執行 `npm install --save @types/bootstrap` 安裝 bootstrap (目前的版本是 Bootstrap 3.3.5) , 因為相依於 jquery 所以也會一併安裝\n\n4. 安裝 jquery-ui 的定義檔  \n`npm install --save @types/jqueryui`\n\n5. 新增檔案 `todo.ts` ,將 [樣版](http://bootsnipp.com/index.php/snippets/featured/todo-example) 的 javascript 複製貼上 .   \n   _*註:因為 typescript 是 javascript 的 superset , 完全可以相容原生 javascript, 如果有任何錯誤, TypeScript將會提示你_\n\n6. todo.ts 引用 jquery 、jquery-ui 與 bootstrap 的 typescript 定義檔.  \n        \n        /// <reference path=\"../../../node_modules/@types/jquery/index.d.ts\"/>  \n        /// <reference path=\"../../../node_modules/@types/bootstrap/index.d.ts\"/>  \n        /// <reference path=\"../../../node_modules/@types/jqueryui/index.d.ts\"/>\n\n7. 頁面載入對應的js檔,記得放置順序 jquery 要在最前面,並將放在`<\\body>`之後  \n        \n        <script src=\"http://code.jquery.com/jquery-2.2.4.min.js\"   integrity=\"sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=\"   crossorigin=\"anonymous\"></script>\n        <script src=\"//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js\"></script>\n        <script src=\"http://code.jquery.com/ui/1.12.1/jquery-ui.min.js\"   integrity=\"sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=\"   crossorigin=\"anonymous\"></script>\n\n8. 執行 `gulp` ,會產生todo.js\n\n7. 頁面載入js檔,記得要放在相依的js( jquery 、 bootstap 、 jqueryui)之後.\n        \n        <script type=\"text/javascript\" src=\"/javascripts/kata/todo.js\"></script>\n\n\n#### 截至目前為止,僅僅是在作複製樣版,同時一併處理一些基本 gulp 與 typescript 相關的配置\n#### 接下來才要開始寫 typescript \n\n(待續)\n\n#### 參考\n\n1. [關於 TypeScript 2.0 之後的模組定義檔 ( Declaration Files ) ( *.d.ts )](http://blog.miniasp.com/post/2016/08/22/TypeScript-Future-Declaration-Files.aspx)\n2. [bootsnipp](http://bootsnipp.com/)\n3. [TYPESCRIPT + EXPRESS + NODE.JS](http://com-brianflove.appspot.com/2016/03/29/typescript-express-node-js/)","slug":"todolist_by_typescript_1","published":1,"updated":"2016-12-04T17:08:50.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwawm32e000z38opqy3ju2s0","content":"<h2 id=\"目標\"><a href=\"#目標\" class=\"headerlink\" title=\"目標\"></a>目標</h2><ol>\n<li>使用 typescript 開發</li>\n<li>顯示/新增/刪除 todolist </li>\n</ol>\n<h2 id=\"功能分析\"><a href=\"#功能分析\" class=\"headerlink\" title=\"功能分析\"></a>功能分析</h2><ol>\n<li>只是練習,故不開發server side的程式</li>\n<li>暫時存在 cookie 上</li>\n<li>用 bootstrap 作簡單的樣式</li>\n</ol>\n<h2 id=\"實作記錄\"><a href=\"#實作記錄\" class=\"headerlink\" title=\"實作記錄\"></a>實作記錄</h2><h3 id=\"UI-使用-Bootstrap-沒有必要重新打造輪子-能用的就拿來用\"><a href=\"#UI-使用-Bootstrap-沒有必要重新打造輪子-能用的就拿來用\" class=\"headerlink\" title=\"UI : 使用 Bootstrap 沒有必要重新打造輪子,能用的就拿來用\"></a>UI : 使用 Bootstrap <em>沒有必要重新打造輪子,能用的就拿來用</em></h3><ul>\n<li>找到一個TODOLIST的<a href=\"http://bootsnipp.com/index.php/snippets/featured/todo-example\" target=\"_blank\" rel=\"external\">樣版</a>,內含 HTML 、 CSS 與 JS ,功能完整.</li>\n<li>取用<a href=\"http://bootsnipp.com/index.php/snippets/featured/todo-example\" target=\"_blank\" rel=\"external\">樣版</a>的HTML .     </li>\n<li>引用 bootstrap 3.3.5 CDN上的 css .</li>\n<li>建立一個 todo.css 直接引用<a href=\"http://bootsnipp.com/index.php/snippets/featured/todo-example\" target=\"_blank\" rel=\"external\">樣版</a>的 css 並加入頁面參考.</li>\n</ul>\n<h3 id=\"開發環境\"><a href=\"#開發環境\" class=\"headerlink\" title=\"開發環境\"></a>開發環境</h3><ol>\n<li>安裝 typescript<br><code>npm install typescript --save</code></li>\n<li>安裝 gulp<br><code>npm install gulp</code><br><code>npm install --global gulp</code> </li>\n<li>安裝 gulp-typescript<br><code>npm install gulp-typescript</code></li>\n<li>建立gulpfile.js </li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> tsc = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-typescript'</span>);</div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;     </div><div class=\"line\">        <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'public/javascripts/**/*.ts'</span>)</div><div class=\"line\">        .pipe(tsc())</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'public/javascripts/'</span>));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"Typescript\"><a href=\"#Typescript\" class=\"headerlink\" title=\"Typescript\"></a>Typescript</h3><ol>\n<li><p>關於 typescript 的定義檔, 以前有 tsd 與 typings兩種管理工具,現在可以更簡便的合併到 npm 作管理 .</p>\n</li>\n<li><p>透過 <a href=\"http://microsoft.github.io/TypeSearch/\" target=\"_blank\" rel=\"external\">TypeSearch</a> 可以找到 <a href=\"https://www.npmjs.com/package/@types/bootstrap\" target=\"_blank\" rel=\"external\">bootstrap</a> 的 typescript 定義檔.</p>\n</li>\n<li><p>執行 <code>npm install --save @types/bootstrap</code> 安裝 bootstrap (目前的版本是 Bootstrap 3.3.5) , 因為相依於 jquery 所以也會一併安裝</p>\n</li>\n<li><p>安裝 jquery-ui 的定義檔<br><code>npm install --save @types/jqueryui</code></p>\n</li>\n<li><p>新增檔案 <code>todo.ts</code> ,將 <a href=\"http://bootsnipp.com/index.php/snippets/featured/todo-example\" target=\"_blank\" rel=\"external\">樣版</a> 的 javascript 複製貼上 .<br><em>*註:因為 typescript 是 javascript 的 superset , 完全可以相容原生 javascript, 如果有任何錯誤, TypeScript將會提示你</em></p>\n</li>\n<li><p>todo.ts 引用 jquery 、jquery-ui 與 bootstrap 的 typescript 定義檔.  </p>\n<pre><code>/// &lt;reference path=&quot;../../../node_modules/@types/jquery/index.d.ts&quot;/&gt;  \n/// &lt;reference path=&quot;../../../node_modules/@types/bootstrap/index.d.ts&quot;/&gt;  \n/// &lt;reference path=&quot;../../../node_modules/@types/jqueryui/index.d.ts&quot;/&gt;\n</code></pre></li>\n<li><p>頁面載入對應的js檔,記得放置順序 jquery 要在最前面,並將放在<code>&lt;\\body&gt;</code>之後  </p>\n<pre><code>&lt;script src=&quot;http://code.jquery.com/jquery-2.2.4.min.js&quot;   integrity=&quot;sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=&quot;   crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;http://code.jquery.com/ui/1.12.1/jquery-ui.min.js&quot;   integrity=&quot;sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=&quot;   crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;\n</code></pre></li>\n<li><p>執行 <code>gulp</code> ,會產生todo.js</p>\n</li>\n<li><p>頁面載入js檔,記得要放在相依的js( jquery 、 bootstap 、 jqueryui)之後.</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;/javascripts/kata/todo.js&quot;&gt;&lt;/script&gt;\n</code></pre></li>\n</ol>\n<h4 id=\"截至目前為止-僅僅是在作複製樣版-同時一併處理一些基本-gulp-與-typescript-相關的配置\"><a href=\"#截至目前為止-僅僅是在作複製樣版-同時一併處理一些基本-gulp-與-typescript-相關的配置\" class=\"headerlink\" title=\"截至目前為止,僅僅是在作複製樣版,同時一併處理一些基本 gulp 與 typescript 相關的配置\"></a>截至目前為止,僅僅是在作複製樣版,同時一併處理一些基本 gulp 與 typescript 相關的配置</h4><h4 id=\"接下來才要開始寫-typescript\"><a href=\"#接下來才要開始寫-typescript\" class=\"headerlink\" title=\"接下來才要開始寫 typescript\"></a>接下來才要開始寫 typescript</h4><p>(待續)</p>\n<h4 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h4><ol>\n<li><a href=\"http://blog.miniasp.com/post/2016/08/22/TypeScript-Future-Declaration-Files.aspx\" target=\"_blank\" rel=\"external\">關於 TypeScript 2.0 之後的模組定義檔 ( Declaration Files ) ( *.d.ts )</a></li>\n<li><a href=\"http://bootsnipp.com/\" target=\"_blank\" rel=\"external\">bootsnipp</a></li>\n<li><a href=\"http://com-brianflove.appspot.com/2016/03/29/typescript-express-node-js/\" target=\"_blank\" rel=\"external\">TYPESCRIPT + EXPRESS + NODE.JS</a></li>\n</ol>\n","excerpt":"","more":"<h2 id=\"目標\"><a href=\"#目標\" class=\"headerlink\" title=\"目標\"></a>目標</h2><ol>\n<li>使用 typescript 開發</li>\n<li>顯示/新增/刪除 todolist </li>\n</ol>\n<h2 id=\"功能分析\"><a href=\"#功能分析\" class=\"headerlink\" title=\"功能分析\"></a>功能分析</h2><ol>\n<li>只是練習,故不開發server side的程式</li>\n<li>暫時存在 cookie 上</li>\n<li>用 bootstrap 作簡單的樣式</li>\n</ol>\n<h2 id=\"實作記錄\"><a href=\"#實作記錄\" class=\"headerlink\" title=\"實作記錄\"></a>實作記錄</h2><h3 id=\"UI-使用-Bootstrap-沒有必要重新打造輪子-能用的就拿來用\"><a href=\"#UI-使用-Bootstrap-沒有必要重新打造輪子-能用的就拿來用\" class=\"headerlink\" title=\"UI : 使用 Bootstrap 沒有必要重新打造輪子,能用的就拿來用\"></a>UI : 使用 Bootstrap <em>沒有必要重新打造輪子,能用的就拿來用</em></h3><ul>\n<li>找到一個TODOLIST的<a href=\"http://bootsnipp.com/index.php/snippets/featured/todo-example\">樣版</a>,內含 HTML 、 CSS 與 JS ,功能完整.</li>\n<li>取用<a href=\"http://bootsnipp.com/index.php/snippets/featured/todo-example\">樣版</a>的HTML .     </li>\n<li>引用 bootstrap 3.3.5 CDN上的 css .</li>\n<li>建立一個 todo.css 直接引用<a href=\"http://bootsnipp.com/index.php/snippets/featured/todo-example\">樣版</a>的 css 並加入頁面參考.</li>\n</ul>\n<h3 id=\"開發環境\"><a href=\"#開發環境\" class=\"headerlink\" title=\"開發環境\"></a>開發環境</h3><ol>\n<li>安裝 typescript<br><code>npm install typescript --save</code></li>\n<li>安裝 gulp<br><code>npm install gulp</code><br><code>npm install --global gulp</code> </li>\n<li>安裝 gulp-typescript<br><code>npm install gulp-typescript</code></li>\n<li>建立gulpfile.js </li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> tsc = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-typescript'</span>);</div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;     </div><div class=\"line\">        <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'public/javascripts/**/*.ts'</span>)</div><div class=\"line\">        .pipe(tsc())</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'public/javascripts/'</span>));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"Typescript\"><a href=\"#Typescript\" class=\"headerlink\" title=\"Typescript\"></a>Typescript</h3><ol>\n<li><p>關於 typescript 的定義檔, 以前有 tsd 與 typings兩種管理工具,現在可以更簡便的合併到 npm 作管理 .</p>\n</li>\n<li><p>透過 <a href=\"http://microsoft.github.io/TypeSearch/\">TypeSearch</a> 可以找到 <a href=\"https://www.npmjs.com/package/@types/bootstrap\">bootstrap</a> 的 typescript 定義檔.</p>\n</li>\n<li><p>執行 <code>npm install --save @types/bootstrap</code> 安裝 bootstrap (目前的版本是 Bootstrap 3.3.5) , 因為相依於 jquery 所以也會一併安裝</p>\n</li>\n<li><p>安裝 jquery-ui 的定義檔<br><code>npm install --save @types/jqueryui</code></p>\n</li>\n<li><p>新增檔案 <code>todo.ts</code> ,將 <a href=\"http://bootsnipp.com/index.php/snippets/featured/todo-example\">樣版</a> 的 javascript 複製貼上 .<br><em>*註:因為 typescript 是 javascript 的 superset , 完全可以相容原生 javascript, 如果有任何錯誤, TypeScript將會提示你</em></p>\n</li>\n<li><p>todo.ts 引用 jquery 、jquery-ui 與 bootstrap 的 typescript 定義檔.  </p>\n<pre><code>/// &lt;reference path=&quot;../../../node_modules/@types/jquery/index.d.ts&quot;/&gt;  \n/// &lt;reference path=&quot;../../../node_modules/@types/bootstrap/index.d.ts&quot;/&gt;  \n/// &lt;reference path=&quot;../../../node_modules/@types/jqueryui/index.d.ts&quot;/&gt;\n</code></pre></li>\n<li><p>頁面載入對應的js檔,記得放置順序 jquery 要在最前面,並將放在<code>&lt;\\body&gt;</code>之後  </p>\n<pre><code>&lt;script src=&quot;http://code.jquery.com/jquery-2.2.4.min.js&quot;   integrity=&quot;sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=&quot;   crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;http://code.jquery.com/ui/1.12.1/jquery-ui.min.js&quot;   integrity=&quot;sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=&quot;   crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;\n</code></pre></li>\n<li><p>執行 <code>gulp</code> ,會產生todo.js</p>\n</li>\n<li><p>頁面載入js檔,記得要放在相依的js( jquery 、 bootstap 、 jqueryui)之後.</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;/javascripts/kata/todo.js&quot;&gt;&lt;/script&gt;\n</code></pre></li>\n</ol>\n<h4 id=\"截至目前為止-僅僅是在作複製樣版-同時一併處理一些基本-gulp-與-typescript-相關的配置\"><a href=\"#截至目前為止-僅僅是在作複製樣版-同時一併處理一些基本-gulp-與-typescript-相關的配置\" class=\"headerlink\" title=\"截至目前為止,僅僅是在作複製樣版,同時一併處理一些基本 gulp 與 typescript 相關的配置\"></a>截至目前為止,僅僅是在作複製樣版,同時一併處理一些基本 gulp 與 typescript 相關的配置</h4><h4 id=\"接下來才要開始寫-typescript\"><a href=\"#接下來才要開始寫-typescript\" class=\"headerlink\" title=\"接下來才要開始寫 typescript\"></a>接下來才要開始寫 typescript</h4><p>(待續)</p>\n<h4 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h4><ol>\n<li><a href=\"http://blog.miniasp.com/post/2016/08/22/TypeScript-Future-Declaration-Files.aspx\">關於 TypeScript 2.0 之後的模組定義檔 ( Declaration Files ) ( *.d.ts )</a></li>\n<li><a href=\"http://bootsnipp.com/\">bootsnipp</a></li>\n<li><a href=\"http://com-brianflove.appspot.com/2016/03/29/typescript-express-node-js/\">TYPESCRIPT + EXPRESS + NODE.JS</a></li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciwawm2zz000038opoxczxth9","tag_id":"ciwawm30b000138opxgdqyvmt","_id":"ciwawm30g000438op2z765jai"},{"post_id":"ciwawm2zz000038opoxczxth9","tag_id":"ciwawm30d000238opwdq0omwg","_id":"ciwawm30g000538opynii5q94"},{"post_id":"ciwawm2zz000038opoxczxth9","tag_id":"ciwawm30e000338opacljbds4","_id":"ciwawm30h000638opd8yzixij"},{"post_id":"ciwawm314000738oprkkivh5e","tag_id":"ciwawm30b000138opxgdqyvmt","_id":"ciwawm31m000h38op31thgp9h"},{"post_id":"ciwawm314000738oprkkivh5e","tag_id":"ciwawm30d000238opwdq0omwg","_id":"ciwawm31r000j38opdlqyngsb"},{"post_id":"ciwawm314000738oprkkivh5e","tag_id":"ciwawm319000938op2l3njxmo","_id":"ciwawm320000m38ops0r4cegc"},{"post_id":"ciwawm314000738oprkkivh5e","tag_id":"ciwawm31c000c38oplj9eoj2y","_id":"ciwawm325000o38op6grasy5j"},{"post_id":"ciwawm31n000i38opiflb3apq","tag_id":"ciwawm30b000138opxgdqyvmt","_id":"ciwawm329000r38opmx6ewkfc"},{"post_id":"ciwawm317000838opb6df4wup","tag_id":"ciwawm30b000138opxgdqyvmt","_id":"ciwawm32a000t38opknyh1q0w"},{"post_id":"ciwawm317000838opb6df4wup","tag_id":"ciwawm31l000g38opfd23bg99","_id":"ciwawm32c000w38op6h73h7z8"},{"post_id":"ciwawm317000838opb6df4wup","tag_id":"ciwawm31c000c38oplj9eoj2y","_id":"ciwawm32e000y38opcbot03ya"},{"post_id":"ciwawm31a000a38op7z3j40xa","tag_id":"ciwawm328000q38op3zt8lpk4","_id":"ciwawm32j001338oprehlgrr3"},{"post_id":"ciwawm31a000a38op7z3j40xa","tag_id":"ciwawm32b000v38opsydf9xp8","_id":"ciwawm32j001438opvbt07knw"},{"post_id":"ciwawm31a000a38op7z3j40xa","tag_id":"ciwawm32h001038opv3lqe1qa","_id":"ciwawm32j001638opoa4gps9d"},{"post_id":"ciwawm31a000a38op7z3j40xa","tag_id":"ciwawm32i001138opevwdsr4a","_id":"ciwawm32j001738op19oi0ezu"},{"post_id":"ciwawm31a000a38op7z3j40xa","tag_id":"ciwawm30e000338opacljbds4","_id":"ciwawm32l001938opglmi13n9"},{"post_id":"ciwawm31b000b38opaw8nporz","tag_id":"ciwawm32i001238opyltgrkjl","_id":"ciwawm32l001a38opko8v0u7g"},{"post_id":"ciwawm31b000b38opaw8nporz","tag_id":"ciwawm32j001538op9k2uq3zc","_id":"ciwawm32l001c38opt6w0ccyu"},{"post_id":"ciwawm31c000d38optwmu2gng","tag_id":"ciwawm30b000138opxgdqyvmt","_id":"ciwawm32m001e38opkbwn2sn2"},{"post_id":"ciwawm31c000d38optwmu2gng","tag_id":"ciwawm30d000238opwdq0omwg","_id":"ciwawm32m001f38op2lrope1j"},{"post_id":"ciwawm31c000d38optwmu2gng","tag_id":"ciwawm319000938op2l3njxmo","_id":"ciwawm32o001h38op0esshm1d"},{"post_id":"ciwawm31c000d38optwmu2gng","tag_id":"ciwawm31c000c38oplj9eoj2y","_id":"ciwawm32p001i38op69gfwhlz"},{"post_id":"ciwawm31c000d38optwmu2gng","tag_id":"ciwawm32l001b38opghg4ijzr","_id":"ciwawm32r001k38opl7h60oht"},{"post_id":"ciwawm31g000e38opv4v7w7l3","tag_id":"ciwawm32m001d38opyb0repwe","_id":"ciwawm32v001n38opxx490kt0"},{"post_id":"ciwawm31g000e38opv4v7w7l3","tag_id":"ciwawm32o001g38opvch3kqp9","_id":"ciwawm32v001o38opfn369a33"},{"post_id":"ciwawm31g000e38opv4v7w7l3","tag_id":"ciwawm32q001j38op9nbzmwfp","_id":"ciwawm32w001q38operygk12m"},{"post_id":"ciwawm31g000e38opv4v7w7l3","tag_id":"ciwawm32r001l38opgu17w1sj","_id":"ciwawm32w001r38op5s0it0ls"},{"post_id":"ciwawm31i000f38opxiwlt4a8","tag_id":"ciwawm32t001m38opnxxf6mqg","_id":"ciwawm32y001t38opks3iyp13"},{"post_id":"ciwawm31i000f38opxiwlt4a8","tag_id":"ciwawm32w001p38op4l5wtd2t","_id":"ciwawm32z001u38opu8nk9czb"},{"post_id":"ciwawm31i000f38opxiwlt4a8","tag_id":"ciwawm30e000338opacljbds4","_id":"ciwawm330001w38ops6j87x5l"},{"post_id":"ciwawm31t000k38op2t9h72jz","tag_id":"ciwawm32x001s38op1ke5c7cx","_id":"ciwawm332001z38op681rv1rn"},{"post_id":"ciwawm31t000k38op2t9h72jz","tag_id":"ciwawm32z001v38ops2ka10vg","_id":"ciwawm334002038opfbwd5ann"},{"post_id":"ciwawm31t000k38op2t9h72jz","tag_id":"ciwawm331001x38opkt8alvzh","_id":"ciwawm335002238op7r8sus9v"},{"post_id":"ciwawm321000n38opg20kjt7n","tag_id":"ciwawm331001y38opxab1j3hw","_id":"ciwawm339002538opzog9ikmn"},{"post_id":"ciwawm321000n38opg20kjt7n","tag_id":"ciwawm335002138opggirt8si","_id":"ciwawm339002638op3i24ln3t"},{"post_id":"ciwawm321000n38opg20kjt7n","tag_id":"ciwawm30e000338opacljbds4","_id":"ciwawm33c002838opv61j5tly"},{"post_id":"ciwawm321000n38opg20kjt7n","tag_id":"ciwawm336002338op26k53nto","_id":"ciwawm33c002938op07hn6v4r"},{"post_id":"ciwawm325000p38opkyq59pew","tag_id":"ciwawm338002438op052lu5zy","_id":"ciwawm33d002b38opgang3by8"},{"post_id":"ciwawm325000p38opkyq59pew","tag_id":"ciwawm30e000338opacljbds4","_id":"ciwawm33d002c38op5joaeplz"},{"post_id":"ciwawm32c000x38opuep6woa5","tag_id":"ciwawm339002738opiwl9ncim","_id":"ciwawm33j002i38opoabn7xxe"},{"post_id":"ciwawm32c000x38opuep6woa5","tag_id":"ciwawm33c002a38opknhbozxl","_id":"ciwawm33k002j38opuwsg0h3m"},{"post_id":"ciwawm32c000x38opuep6woa5","tag_id":"ciwawm33e002d38opy0audgsg","_id":"ciwawm33m002l38opfwvgxc19"},{"post_id":"ciwawm32c000x38opuep6woa5","tag_id":"ciwawm33e002e38op596qrzfk","_id":"ciwawm33n002m38opzei7mza2"},{"post_id":"ciwawm32c000x38opuep6woa5","tag_id":"ciwawm33g002f38op66r1aodi","_id":"ciwawm33n002o38opeh9fil8a"},{"post_id":"ciwawm32c000x38opuep6woa5","tag_id":"ciwawm33i002g38opjq6mgmsp","_id":"ciwawm33o002p38opmu6fex0m"},{"post_id":"ciwawm32e000z38opqy3ju2s0","tag_id":"ciwawm339002738opiwl9ncim","_id":"ciwawm33s002t38opy0b7bz21"},{"post_id":"ciwawm32e000z38opqy3ju2s0","tag_id":"ciwawm33c002a38opknhbozxl","_id":"ciwawm33s002u38op6zjgjltu"},{"post_id":"ciwawm32e000z38opqy3ju2s0","tag_id":"ciwawm33e002d38opy0audgsg","_id":"ciwawm33s002v38opqnimln09"},{"post_id":"ciwawm32e000z38opqy3ju2s0","tag_id":"ciwawm33e002e38op596qrzfk","_id":"ciwawm33s002w38op4mjp5eid"},{"post_id":"ciwawm32e000z38opqy3ju2s0","tag_id":"ciwawm33g002f38op66r1aodi","_id":"ciwawm33s002x38opyyazz5k2"},{"post_id":"ciwawm32e000z38opqy3ju2s0","tag_id":"ciwawm33i002g38opjq6mgmsp","_id":"ciwawm33t002y38op63ayrqml"}],"Tag":[{"name":".Net Framework","_id":"ciwawm30b000138opxgdqyvmt"},{"name":"IO","_id":"ciwawm30d000238opwdq0omwg"},{"name":"記錄","_id":"ciwawm30e000338opacljbds4"},{"name":"Thread","_id":"ciwawm319000938op2l3njxmo"},{"name":"ASP.Net","_id":"ciwawm31c000c38oplj9eoj2y"},{"name":"Thread Pool","_id":"ciwawm31l000g38opfd23bg99"},{"name":"powershell","_id":"ciwawm328000q38op3zt8lpk4"},{"name":"Database","_id":"ciwawm32b000v38opsydf9xp8"},{"name":"MsSQL","_id":"ciwawm32h001038opv3lqe1qa"},{"name":"BulkInsert","_id":"ciwawm32i001138opevwdsr4a"},{"name":"blog","_id":"ciwawm32i001238opyltgrkjl"},{"name":"google analytics","_id":"ciwawm32j001538op9k2uq3zc"},{"name":"Redis","_id":"ciwawm32l001b38opghg4ijzr"},{"name":"post","_id":"ciwawm32m001d38opyb0repwe"},{"name":"http","_id":"ciwawm32o001g38opvch3kqp9"},{"name":"html","_id":"ciwawm32q001j38op9nbzmwfp"},{"name":"Content-Type","_id":"ciwawm32r001l38opgu17w1sj"},{"name":"DBA","_id":"ciwawm32t001m38opnxxf6mqg"},{"name":"MSSQL","_id":"ciwawm32w001p38op4l5wtd2t"},{"name":"HTTP/1.1","_id":"ciwawm32x001s38op1ke5c7cx"},{"name":"HTTP/2","_id":"ciwawm32z001v38ops2ka10vg"},{"name":"TCP","_id":"ciwawm331001x38opkt8alvzh"},{"name":"website","_id":"ciwawm331001y38opxab1j3hw"},{"name":"domain","_id":"ciwawm335002138opggirt8si"},{"name":"DNS","_id":"ciwawm336002338op26k53nto"},{"name":"github","_id":"ciwawm338002438op052lu5zy"},{"name":"kata","_id":"ciwawm339002738opiwl9ncim"},{"name":"typescript","_id":"ciwawm33c002a38opknhbozxl"},{"name":"bootstrap","_id":"ciwawm33e002d38opy0audgsg"},{"name":"npm","_id":"ciwawm33e002e38op596qrzfk"},{"name":"jquery","_id":"ciwawm33g002f38op66r1aodi"},{"name":"jquery-ui","_id":"ciwawm33i002g38opjq6mgmsp"}]}}