{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/090516_023554_AM.jpg","path":"images/090516_023554_AM.jpg","modified":0,"renderable":0},{"_id":"source/images/102216_095355_PM.jpg","path":"images/102216_095355_PM.jpg","modified":0,"renderable":0},{"_id":"themes/landscape/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"source/images/090516_023252_AM.jpg","path":"images/090516_023252_AM.jpg","modified":0,"renderable":0},{"_id":"source/images/090516_021242_AM.jpg","path":"images/090516_021242_AM.jpg","modified":0,"renderable":0},{"_id":"source/amp-dist/sample/sample-logo.png","path":"amp-dist/sample/sample-logo.png","modified":0,"renderable":0},{"_id":"source/amp-dist/sample/sample-avator.png","path":"amp-dist/sample/sample-avator.png","modified":0,"renderable":0},{"_id":"source/amp-dist/sample/sample-substituteTitleImage.png","path":"amp-dist/sample/sample-substituteTitleImage.png","modified":0,"renderable":0},{"_id":"source/images/090516_024550_AM.jpg","path":"images/090516_024550_AM.jpg","modified":0,"renderable":0},{"_id":"source/images/workerthread_and_iothread/110416_102435_AM.jpg","path":"images/workerthread_and_iothread/110416_102435_AM.jpg","modified":0,"renderable":0},{"_id":"source/images/workerthread_and_iothread/110416_103521_AM.jpg","path":"images/workerthread_and_iothread/110416_103521_AM.jpg","modified":0,"renderable":0},{"_id":"source/images/workerthread_and_iothread/110416_112435_AM.jpg","path":"images/workerthread_and_iothread/110416_112435_AM.jpg","modified":0,"renderable":0},{"_id":"source/images/workerthread_and_iothread/278553_300x300.jpg","path":"images/workerthread_and_iothread/278553_300x300.jpg","modified":0,"renderable":0},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"source/images/workerthread_and_iothread/110416_102436_AM.png","path":"images/workerthread_and_iothread/110416_102436_AM.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"source/images/2018/six_strategies_for_application_deployment/canary.gif","path":"images/2018/six_strategies_for_application_deployment/canary.gif","modified":0,"renderable":0},{"_id":"source/images/2018/six_strategies_for_application_deployment/a-b.gif","path":"images/2018/six_strategies_for_application_deployment/a-b.gif","modified":0,"renderable":0},{"_id":"source/images/2018/six_strategies_for_application_deployment/blue-green.gif","path":"images/2018/six_strategies_for_application_deployment/blue-green.gif","modified":0,"renderable":0},{"_id":"source/images/workerthread_and_iothread/110416_170101_PM.jpg","path":"images/workerthread_and_iothread/110416_170101_PM.jpg","modified":0,"renderable":0},{"_id":"source/images/2018/six_strategies_for_application_deployment/recreate.gif","path":"images/2018/six_strategies_for_application_deployment/recreate.gif","modified":0,"renderable":0},{"_id":"source/images/2018/six_strategies_for_application_deployment/ramped.gif","path":"images/2018/six_strategies_for_application_deployment/ramped.gif","modified":0,"renderable":0},{"_id":"source/images/workerthread_and_iothread/110416_102437_AM.jpg","path":"images/workerthread_and_iothread/110416_102437_AM.jpg","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"source/images/2018/six_strategies_for_application_deployment/shadow.gif","path":"images/2018/six_strategies_for_application_deployment/shadow.gif","modified":0,"renderable":0},{"_id":"source/images/2018/six_strategies_for_application_deployment/deployment_strategies.png","path":"images/2018/six_strategies_for_application_deployment/deployment_strategies.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"source/images/workerthread_and_iothread/110416_170001_PM.jpg","path":"images/workerthread_and_iothread/110416_170001_PM.jpg","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.bak.jpg","path":"css/images/banner.bak.jpg","modified":0,"renderable":1},{"_id":"source/images/workerthread_and_iothread/螢幕擷取畫面_110716_110245_AM.jpg","path":"images/workerthread_and_iothread/螢幕擷取畫面_110716_110245_AM.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1480870644364},{"_id":"source/README.md","hash":"7e15d0a159a4a8be81924f6f4392266dcd4b407c","modified":1480869826989},{"_id":"source/CNAME","hash":"1c1ded058047f1d22275a8561240d1074b7a5cca","modified":1480869826989},{"_id":"themes/landscape/_config.yml","hash":"fcbda2ad11c8f442279c8ac2187683e9dde1ce01","modified":1522834245618},{"_id":"themes/landscape/package.json","hash":"d07f326588fef82f1d23ae3101c9ddfff34c132f","modified":1480870644481},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1480870644413},{"_id":"themes/landscape/README.md","hash":"e7cc82dc79596f36ba05a8139e7d6b2dfc4ae5f9","modified":1480870644427},{"_id":"source/_posts/1st_time_with_powershell.md","hash":"23b7e9ff77dea30b73b1d69efc1de2c9e08c9acd","modified":1480869826991},{"_id":"source/_posts/about_content_type.md","hash":"420eb749822ab967c33adc790557db33e5344198","modified":1522834886107},{"_id":"source/_posts/add_google_analytics_to_hexo_blog_1.md","hash":"26abe9643e7b65647f2aa0ccd422605120e16bb4","modified":1480869826992},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1480870644413},{"_id":"source/_posts/aspdotnet_threadpool_and_redis.md","hash":"6204e983255895cc7592dea87f8d40963b9a6a37","modified":1485756161615},{"_id":"source/_posts/aspdotnet_threadpool_monitor.md","hash":"58d623aab527976cc0174d804ec9d8fa5db23013","modified":1485756161615},{"_id":"source/_posts/auto_add_trello_card.md","hash":"5dfa9e5b9963df287db35d2be703b3c1305f0b0d","modified":1493443102198},{"_id":"source/_posts/be_friend_with_time.md","hash":"b0d062ed9880010a911629962256d1ef8f092602","modified":1481905920000},{"_id":"source/_posts/c_sharp_6_interpolation_string_stylecop_sa0102.md","hash":"3bee08fe04c5866438fbcb3b91bafeafaa86d0c8","modified":1484488348031},{"_id":"source/_posts/ci_use_jenkins.md","hash":"144115ca0ed22574597b445ae902b320c7469ad8","modified":1484491635037},{"_id":"source/_posts/ci_use_jenkins_on_openshfit.md","hash":"0e4e5929b2464ce02386f03e6a3cd762bee48513","modified":1484494527631},{"_id":"source/_posts/ci_use_jenkins_on_two_windows.md","hash":"69458756350ac9f671cc873b132bd75d055ff106","modified":1493443053520},{"_id":"source/_posts/ci_use_jenkins_on_windows.md","hash":"9c6280b7d104fcef6fd1c102ee596787eb0cb44f","modified":1484495667044},{"_id":"source/_posts/express_with_typescript.md","hash":"61730bedd57db4a1cae8ff9091fb04fdd8108fd3","modified":1517329784621},{"_id":"source/_posts/file_rowdata_import_mssql.md","hash":"1ff864c198c597b632fe7cd84ab0aacbed81e3a0","modified":1493443102199},{"_id":"source/_posts/google_api_auth_1.md","hash":"e1e5a23b862a29a5ef549726dccde82ad217c4fd","modified":1500483660051},{"_id":"source/_posts/dotnet_pdb_file.md","hash":"4cce1b7f684431a5d31dc42977a505b2cbe5c74b","modified":1480872151206},{"_id":"source/_posts/google_api_auth_2.md","hash":"e63f94a400a15f7349d9b2d729546801e664ccbc","modified":1500484325097},{"_id":"source/_posts/hello-world.md","hash":"129f80cf22aa52d007029bf2d22b90d86898ff67","modified":1480872151213},{"_id":"source/_posts/how_to_use_github_page.md","hash":"293fed508dd1050f6223b75f964d3f3ef762f468","modified":1480872151214},{"_id":"source/_posts/http2 by cloudflare.md","hash":"42d51d2508a498baf0df391aeaa4f683c777a21a","modified":1480872151216},{"_id":"source/_posts/iis_tracing_log_setting.md","hash":"0bd12e211406517b86b566448ae3852f70323a55","modified":1485756161616},{"_id":"source/_posts/integrated_testing_partice.md","hash":"b1ba25acc64991e1e3dd34b82962eff0a31ca515","modified":1517329784622},{"_id":"source/_posts/sites_todo_list.md","hash":"ea36c902ab0951804f5acaf0a2b0fcd620d160a0","modified":1480869826994},{"_id":"source/_posts/setting_DNS_with_google.md","hash":"1c65a5b037511f7c2a0d637a8acaeda35730cc3a","modified":1480872151218},{"_id":"source/_posts/sql_compatibility_level_with_datetime2.md","hash":"0a293d63255b4867a72f9fc5c48b6d4336c577d0","modified":1517329784622},{"_id":"source/_posts/testingislearning.md","hash":"9698766b0584d22c159b87c876fe825ef1a13095","modified":1500136091468},{"_id":"source/_posts/sql_ef6_dateInterceptor.md","hash":"383f80651f64a5357edab0e7f4a026d2f1a35b45","modified":1517329784623},{"_id":"source/_posts/unitestwriting.md","hash":"1b80445f7b1753a817edcd3d6a219d3ed60d6812","modified":1493443102199},{"_id":"source/_posts/todolist_by_typescript_1.md","hash":"3462cababdc21d3017ac8baf9d1aaf514f22cff5","modified":1480872151219},{"_id":"source/_posts/todolist_by_typescript_2.md","hash":"21426c2d4756d8839eca0bd3e86edd999de2de03","modified":1480872151221},{"_id":"source/images/090516_023554_AM.jpg","hash":"a9cec76e1e7b039f9c870fdf0f938cf4edfd7ce8","modified":1480869826997},{"_id":"source/images/102216_095355_PM.jpg","hash":"721e0caf732a8c6cd6b1b83a31fec062af16a744","modified":1480869826999},{"_id":"source/_drafts/dotNet_filestream.md","hash":"39d2b994d5656d3318930ec190d6fc20c185db0b","modified":1522834837057},{"_id":"source/_drafts/workerthread_and_iothread_2.md","hash":"1e7abc5c401e9abaafa8fd437457dc601b3c81ca","modified":1522835079160},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1480870644429},{"_id":"themes/landscape/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1480870644429},{"_id":"source/_drafts/workerthread_and_iothread_1.md","hash":"d2342e4a5305f3454cd75b4ff28240c9139adbcc","modified":1480869826990},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1480870644430},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1480870644432},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1480870644429},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1480870644430},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1480870644445},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1480870644431},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1480870644446},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1480870644448},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1480870644446},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1480870644448},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1480870644486},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1480870644448},{"_id":"themes/landscape/source/favicon.ico","hash":"998df8105a3500811219e4a176d14b1d88ab8b94","modified":1493443102202},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1480870644447},{"_id":"source/images/090516_023252_AM.jpg","hash":"509eef571252eebe3417bb7c89c589d3485a01af","modified":1480869826996},{"_id":"source/images/090516_021242_AM.jpg","hash":"015f6fff88214f8744c37b8d02a331ffadda5943","modified":1480869826995},{"_id":"source/amp-dist/sample/sample-logo.png","hash":"9dad0e8cc4d48c6e550820e91377e2028a344176","modified":1493443102200},{"_id":"source/amp-dist/sample/sample-avator.png","hash":"0c9e74f8207353ace09090a7d17def59ab9b98c8","modified":1493443102200},{"_id":"source/amp-dist/sample/sample-substituteTitleImage.png","hash":"f7d5b269516ed2ef4c855466b5d78d4ca136445c","modified":1493443102201},{"_id":"source/_posts/2018/2017_learned.md","hash":"2ee891f209c11306352ef3a5eae759f791c3c166","modified":1517329784593},{"_id":"source/_posts/2018/coding_standard_and_coding_style_and_principle.md","hash":"36f825b1fef2452cfb52342c73127b30f0d5d9f9","modified":1517329784594},{"_id":"source/_posts/2018/csharp_common_mistakes_1.md","hash":"ef15fd10098ced54b56cf470fdb0e33182bc95ba","modified":1522835315662},{"_id":"source/_posts/2018/linux_command_1.md","hash":"0858f490cea3a9c6b591d96425a0fe6021ca1f32","modified":1521994927708},{"_id":"source/_posts/2018/new_pc_install.md","hash":"5ff659a6f6c61f797a7c4faff90b4ab950838113","modified":1525242786797},{"_id":"source/_posts/2018/linux_command_2.md","hash":"4cf96f1f2ba02256c24edf8539b4fa53d5596eac","modified":1522916420484},{"_id":"source/_posts/2018/mutation_testing.md","hash":"f11eb93fcd8f3d600dfa390843336080fc382209","modified":1521652772869},{"_id":"source/_posts/2018/next_year.md","hash":"e7699392e798ceb670c39ad7f8fea47c636a9e20","modified":1520876607041},{"_id":"source/_posts/2018/shopee_tech_sharing.md","hash":"25fb11907861fa51c98ae627f0889dab24fd99ae","modified":1521652777661},{"_id":"source/_posts/2018/six_strategies_for_application_deployment.md","hash":"5b8a3edb4bcfbd82add377270340a9d783ba06b2","modified":1517329784617},{"_id":"source/_posts/2018/windows_with_sass.md","hash":"c161ccb008cdca8a007762256e4b0351a74fb253","modified":1525242786805},{"_id":"source/_posts/2018/the_art_of_unit_testing_2nd_0.md","hash":"c2ba128962e59bbbe2d95127c76f7b972f1b099e","modified":1521656474675},{"_id":"source/_posts/books/book_outliers_the_story_of_success.md","hash":"1fcf0f86d687fca80bc46a603c8e9f441811b9a0","modified":1517329784619},{"_id":"source/_posts/books/the_silo_effect_7.md","hash":"37215b95d610fdd3b74097c2240ab4df13b7709d","modified":1527528708007},{"_id":"source/_posts/2018/why-google-ibm-and-microsoft-all-decided-to-expand-in-taiwan-this-year.md","hash":"ce5e76f71249f6011c68bf1a886924e4d5681393","modified":1523202589422},{"_id":"source/_posts/books/book_attack_your_day.md","hash":"8aa2b5d489c37ae46975de19e14779978e0cd6fe","modified":1517329784618},{"_id":"source/_posts/cloud_learn/aws_access_billing_console.md","hash":"f4c6cef03f55417e61f64ad4fe7d08b263edce0f","modified":1522832976528},{"_id":"source/_posts/cloud_learn/aws_cli_login.md","hash":"a5cc4fd8829c33f13ecb9d0fc7f8c4b239726d15","modified":1522832888359},{"_id":"source/_posts/cloud_learn/aws_creat_ec2_instance.md","hash":"584639be111a597990c32a529ff284c34dc2351b","modified":1522832892393},{"_id":"source/_posts/test_learn/vs2017_mstest_with_nuget.md","hash":"0fac512c1f586b883fcc292ddc989fdc84200f74","modified":1517329784660},{"_id":"source/images/090516_024550_AM.jpg","hash":"16b8658ff25fec9ecc6c84a5354c8a6f015ddb30","modified":1480869826998},{"_id":"source/images/workerthread_and_iothread/110416_102435_AM.jpg","hash":"a876fb25212a93ae47f0447a83d64d2f5028d03a","modified":1480869826999},{"_id":"source/_posts/test_learn/integrated_testing_partice2_question.md","hash":"725c7644632962db83439abe90b3bc785d615773","modified":1517329784625},{"_id":"source/_posts/weekly_learn/20171023.md","hash":"3dbf602d303e6ad063f5543906744eff41ffdf87","modified":1517329784661},{"_id":"source/_posts/cloud_learn/aws_startup_with_iam.md","hash":"dd19e2ccd57d3b171a5e95e8d0a7937403857745","modified":1522832895930},{"_id":"source/images/workerthread_and_iothread/110416_103521_AM.jpg","hash":"839e4d25969fc11027a13413c74a3456524d8f3e","modified":1480869827002},{"_id":"source/images/workerthread_and_iothread/110416_112435_AM.jpg","hash":"3bc3703723f421303a5119d6563e8d32614f4ac2","modified":1480869827003},{"_id":"source/images/workerthread_and_iothread/278553_300x300.jpg","hash":"4cba555dc1ba4aef9e7aee3b4adb1d06a3937968","modified":1480869827008},{"_id":"source/_drafts/2017/retrospect.md","hash":"523ab563e3a0a9861ac7fee0928efa5e7b67a67f","modified":1517329784592},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1480870644433},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"a7faab4f3601b28107af5b1095b3966c2f88fec8","modified":1480870644433},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"a512a14bce954fadb0d9346d9d9ed4effbc90be2","modified":1493443102202},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1480870644435},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1480870644436},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1480870644435},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1480870644437},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1480870644442},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1522834093590},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"791812c0492cb2224535c2a71dbabe20eb1bfb8e","modified":1521994771193},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1480870644443},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1480870644444},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1480870644443},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1480870644445},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"89998e6b2929c4ff5093bbf6b86d611d7420be52","modified":1480870644437},{"_id":"themes/landscape/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1480870644498},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1480870644511},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1480870644511},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1480870644512},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1480870644512},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1480870644513},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1480870644512},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1480870644517},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1480870644513},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1480870644518},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1480870644487},{"_id":"source/images/workerthread_and_iothread/110416_102436_AM.png","hash":"b567d9a58721b13f82b351ba494c260ee86c77cb","modified":1480869827000},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1480870644519},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1480870644518},{"_id":"source/images/2018/six_strategies_for_application_deployment/canary.gif","hash":"8ddbdc76c656761c45341f2d6e95e3b3d1f2b43d","modified":1517329784665},{"_id":"source/images/2018/six_strategies_for_application_deployment/a-b.gif","hash":"defe435b40484fce7d4ccc5d745f93efc73805f1","modified":1517329784663},{"_id":"source/images/2018/six_strategies_for_application_deployment/blue-green.gif","hash":"a6622f287873c18232ed84eced936d62297abb74","modified":1517329784664},{"_id":"source/images/workerthread_and_iothread/110416_170101_PM.jpg","hash":"e941d0267614d431c0e422ef753c38de7b75087d","modified":1480869827008},{"_id":"source/images/2018/six_strategies_for_application_deployment/recreate.gif","hash":"a5f6117801f439932ccccb31ff1a8ecb0faea49a","modified":1517329784670},{"_id":"source/images/2018/six_strategies_for_application_deployment/ramped.gif","hash":"8c76c71e00d1c7bb3c044909f0a858acded8ce3d","modified":1517329784669},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1480870644439},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1480870644441},{"_id":"source/images/workerthread_and_iothread/110416_102437_AM.jpg","hash":"a4b6382cea823bea0be5757fe0800639ae0166ce","modified":1480869827002},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1480870644440},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1480870644441},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"ae3a7b5349a51e8c3835cea9b8e521fa837ff6ef","modified":1481556309460},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1480870644440},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1480870644489},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1480870644488},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1480870644492},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"a214ef8ba5bbf8416706b27a89d51944a2318047","modified":1521994690811},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1480870644495},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1480870644494},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1480870644495},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1480870644496},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1480870644500},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1480870644494},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1480870644501},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1480870644506},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1480870644514},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1480870644514},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1480870644516},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1480870644515},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1480870644515},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1480870644497},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1480870644439},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1480870644506},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"dd61b5b07fedf2fa657aa76c9058d19c1e30d294","modified":1480870644510},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1480870644497},{"_id":"source/images/2018/six_strategies_for_application_deployment/shadow.gif","hash":"b1f33ac16a7b637948b1847eea457002e4552f02","modified":1517329784671},{"_id":"source/images/2018/six_strategies_for_application_deployment/deployment_strategies.png","hash":"9a1dfbba887451527257f55ab1984a32d6c8deb0","modified":1517329784668},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1480870644516},{"_id":"source/images/workerthread_and_iothread/110416_170001_PM.jpg","hash":"bd9fa06701bd800e059df8fd499af13d1b8ad277","modified":1480869827006},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1480870644503},{"_id":"themes/landscape/source/css/images/banner.bak.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1480870644509},{"_id":"source/images/workerthread_and_iothread/螢幕擷取畫面_110716_110245_AM.jpg","hash":"556cffba3e1c86d4c33775c3cabfef8fd6fcebc9","modified":1480869827012},{"_id":"public/atom.xml","hash":"bcfa6754f80732e7106fe497773bd2f0a4318783","modified":1527528718988},{"_id":"public/2018/04/26/2018/windows_with_sass/index.html","hash":"5ff1ad8283c3a8ba87cdc2fb74aa05d857272766","modified":1527528656559},{"_id":"public/2018/04/17/2018/new_pc_install/index.html","hash":"564d698dabb7de6f705c88aeaf1a53e5361afc1d","modified":1527528656559},{"_id":"public/2018/04/05/2018/linux_command_2/index.html","hash":"af54595c2c0b9632e05784b6f43e8dd6499a5d45","modified":1527528656559},{"_id":"public/2018/04/08/2018/why-google-ibm-and-microsoft-all-decided-to-expand-in-taiwan-this-year/index.html","hash":"007ac89f2d9cd7e3732e3d01f05a684509379a05","modified":1527528656559},{"_id":"public/2018/04/04/cloud_learn/aws_access_billing_console/index.html","hash":"ef26d265deb30e71360b133326dbd8e68ebc658b","modified":1527528656559},{"_id":"public/2018/03/26/2018/linux_command_1/index.html","hash":"979123fa1d44e76352ec165fd4774eba628c9c4d","modified":1527528656559},{"_id":"public/2018/03/25/cloud_learn/aws_cli_login/index.html","hash":"0af8482038fc33caeab6a5c3297e022254ef1337","modified":1527528656559},{"_id":"public/2018/03/20/2018/mutation_testing/index.html","hash":"7cbc551616e0a205288cd2b60906634889e963fe","modified":1527528656560},{"_id":"public/2018/03/22/2018/the_art_of_unit_testing_2nd_0/index.html","hash":"cc0abb45d88cdd26fe1b688883b9764088170d32","modified":1527528656560},{"_id":"public/2018/03/15/2018/shopee_tech_sharing/index.html","hash":"b6e8c7d06ccf039ceb4e67398e927545e97250e7","modified":1527528656560},{"_id":"public/2018/02/12/2018/csharp_common_mistakes_1/index.html","hash":"dc36869ef48065d88a1738af2f2e4a23e4fab3f5","modified":1527528656560},{"_id":"public/2018/01/26/cloud_learn/aws_startup_with_iam/index.html","hash":"6541f2260e7b0e1d58eaa4126380886933755125","modified":1527528656561},{"_id":"public/2018/01/07/2018/six_strategies_for_application_deployment/index.html","hash":"8927e79e513156bdf1328fcfd60742bf9b44cdc5","modified":1527528656561},{"_id":"public/2018/01/04/2018/coding_standard_and_coding_style_and_principle/index.html","hash":"b9cdd63442a1702a3588514a01e5def7700a677f","modified":1527528656561},{"_id":"public/2018/01/01/2018/next_year/index.html","hash":"630a481fae5e016d4175a2151c7ffbe2abd1e500","modified":1527528656561},{"_id":"public/2018/01/01/2018/2017_learned/index.html","hash":"35bb67bd2a7b14b0ffae4358cf0af6ad443d2d69","modified":1527528656561},{"_id":"public/2017/12/11/test_learn/vs2017_mstest_with_nuget/index.html","hash":"8e753e42c515bcd489f2bc1e44e8898bd2c2fa66","modified":1527528656561},{"_id":"public/2017/12/08/test_learn/integrated_testing_partice2_question/index.html","hash":"5a113bff79b8c6911b96eeb488f39ed3a3bca212","modified":1527528656561},{"_id":"public/2017/12/08/cloud_learn/aws_creat_ec2_instance/index.html","hash":"b3ad8de16fd9ac28be2279e84635c64f408361d6","modified":1527528656561},{"_id":"public/2017/10/31/integrated_testing_partice/index.html","hash":"f527f57327949be1f9593192deeb78a5cf72cee9","modified":1527528656561},{"_id":"public/2017/10/23/weekly_learn/20171023/index.html","hash":"36c9cb897e9ebfe0c47be07903816274a57a3c85","modified":1527528656561},{"_id":"public/2017/10/22/books/book_outliers_the_story_of_success/index.html","hash":"54f0ec2089fa3734085d07010cc1f9af24b3840e","modified":1527528656561},{"_id":"public/2017/09/24/sql_ef6_dateInterceptor/index.html","hash":"41d7f8065913afc047ebae014e7946060f8739de","modified":1527528656561},{"_id":"public/2017/09/18/sql_compatibility_level_with_datetime2/index.html","hash":"7cdf7c304e33ecedf1071865758c198a2adf885b","modified":1527528656562},{"_id":"public/2017/08/16/express_with_typescript/index.html","hash":"86c8b29a285d46268655b95844a9bfee51b647f9","modified":1527528656562},{"_id":"public/2017/07/20/google_api_auth_2/index.html","hash":"0a7f0d7c947f7d8cc089737285cf30310771113c","modified":1527528656562},{"_id":"public/2017/07/14/google_api_auth_1/index.html","hash":"3e33857f9a78684a346048a7d08be3dcf44d7626","modified":1527528656562},{"_id":"public/2017/05/19/testingislearning/index.html","hash":"5f94efa2562374da4f786764299bc093f310fa6f","modified":1527528656562},{"_id":"public/2017/04/29/ci_use_jenkins_on_two_windows/index.html","hash":"6c9c3b6f8a4097d61c7e8346add46dc7b1c1f217","modified":1527528656562},{"_id":"public/2017/04/23/unitestwriting/index.html","hash":"dee0847c0ac717eabd4ed9bf751c3f3b8d1eabf2","modified":1527528656562},{"_id":"public/2017/03/26/books/book_attack_your_day/index.html","hash":"0549abef941525f658dad96dfc48e25834f9f805","modified":1527528656562},{"_id":"public/2017/02/08/auto_add_trello_card/index.html","hash":"18627a5d50ac4409691c1cfdcc8064e8acd3176f","modified":1527528656562},{"_id":"public/2017/01/28/aspdotnet_threadpool_monitor/index.html","hash":"53c34e4f26d52ee8a3848f050f02c930d510fb3a","modified":1527528656563},{"_id":"public/2017/01/24/iis_tracing_log_setting/index.html","hash":"f0dcde70ff48e77bd04c1b40d361bd15e0e951c4","modified":1527528656563},{"_id":"public/2017/01/15/ci_use_jenkins_on_openshfit/index.html","hash":"a3585748889704694cec7aab56e4402f058c0d5f","modified":1527528656563},{"_id":"public/2017/01/15/ci_use_jenkins_on_windows/index.html","hash":"bb013b9cb4db3063d3a0a10acfc3d7046805eef7","modified":1527528656563},{"_id":"public/2017/01/15/ci_use_jenkins/index.html","hash":"e375f6e70f8ecbe93a7d3f12106557d5f7f95e4e","modified":1527528656563},{"_id":"public/2017/01/11/c_sharp_6_interpolation_string_stylecop_sa0102/index.html","hash":"d8564b221131d52bfc877623f4cf444cf3c4c548","modified":1527528656563},{"_id":"public/2016/12/05/be_friend_with_time/index.html","hash":"15dc16f6fd1ff49f057cff51babfbb13da9c57b9","modified":1527528656563},{"_id":"public/2016/11/28/dotnet_pdb_file/index.html","hash":"a774bb69cba328fb89761ac219aacf2f0e012153","modified":1527528656564},{"_id":"public/2016/11/21/aspdotnet_threadpool_and_redis/index.html","hash":"424cc553bf1e06f74ba1de9228f5fd3659e6a6e3","modified":1527528656564},{"_id":"public/2016/10/28/about_content_type/index.html","hash":"b0810a62924a97f79f32c69669e6d5f3a17adefa","modified":1527528656564},{"_id":"public/2016/10/21/1st_time_with_powershell/index.html","hash":"893258beabb9f7d0746c84637535bf5a14b3285a","modified":1527528656564},{"_id":"public/2016/10/14/todolist_by_typescript_2/index.html","hash":"922a041698a2cc85453e06b402462d1126546399","modified":1527528656564},{"_id":"public/2016/10/08/todolist_by_typescript_1/index.html","hash":"bb5b6485962ea271c13c942ce52019f14aa2b186","modified":1527528656564},{"_id":"public/2016/09/04/http2 by cloudflare/index.html","hash":"92a3870d59a6e79f2020a6670643a80147163aba","modified":1527528656564},{"_id":"public/2016/08/29/file_rowdata_import_mssql/index.html","hash":"c0eb33a37c3b78201fa38f86da1688529a477b12","modified":1527528656564},{"_id":"public/2016/08/25/add_google_analytics_to_hexo_blog_1/index.html","hash":"2ba8a0ee65eb0f16e0960c177bd2fa0fec442c5a","modified":1527528656565},{"_id":"public/2016/08/21/setting_DNS_with_google/index.html","hash":"a19bc3bc5647dba3949f2ab57fbe3cf7401d1739","modified":1527528656565},{"_id":"public/2016/08/20/sites_todo_list/index.html","hash":"6104dc4971b8bd9579aeb0d99c7bcaceba6caddf","modified":1527528656565},{"_id":"public/2016/08/13/hello-world/index.html","hash":"97dcd3dc78404bc8b651fac413f3674bd6b7c5c7","modified":1527528656565},{"_id":"public/archives/index.html","hash":"b6fd4259ae539ba2c0750e4d4d01823ea081f0f6","modified":1527528656565},{"_id":"public/archives/page/2/index.html","hash":"11aaf6330ba88d99a199295985e5bed8010cde36","modified":1527528656565},{"_id":"public/archives/page/3/index.html","hash":"7e320caa4a63c76ea464828c9be31cd7078ba5c7","modified":1527528656565},{"_id":"public/archives/page/4/index.html","hash":"ca07e95e8907aa1508ea5eb6078b66a9aaf2fd9a","modified":1527528656565},{"_id":"public/archives/page/5/index.html","hash":"c1b715747aab916c5349aee1464621d90c645ffa","modified":1527528656565},{"_id":"public/archives/page/6/index.html","hash":"68d473b8b754815962c5844b85e6e1382c1ac1fc","modified":1527528656565},{"_id":"public/archives/2016/index.html","hash":"10a944cfe55c062e4451e87999809ed9943fb8fe","modified":1527528656565},{"_id":"public/archives/2016/08/index.html","hash":"476936f69973e9ac5b1dc3edfa1ec1c2d72460a1","modified":1527528656566},{"_id":"public/2016/08/28/how_to_use_github_page/index.html","hash":"d3cb41a267c5d024a390067e48f15e9e6a1495f1","modified":1527528656565},{"_id":"public/archives/2016/page/2/index.html","hash":"afa1d72e8723cc90a902b2542c22e87738f713c8","modified":1527528656566},{"_id":"public/archives/2016/09/index.html","hash":"cce5805bdc490079b0ac466aadb8e952fa55ee46","modified":1527528656566},{"_id":"public/archives/2016/11/index.html","hash":"d91977c918d197a55860202a71d58675f4312307","modified":1527528656566},{"_id":"public/archives/2016/10/index.html","hash":"f54e33b965bbe9076dbaaa8c778ab6704788c998","modified":1527528656566},{"_id":"public/archives/2016/12/index.html","hash":"142f55304d3292f1b342779d3e040fe2e823fd88","modified":1527528656566},{"_id":"public/archives/2017/index.html","hash":"ab53093f765805fc9c520f7ce235ba8683c51a13","modified":1527528656566},{"_id":"public/archives/2017/page/2/index.html","hash":"7e9232a0b764b993419375aa37353713a7e60cb9","modified":1527528656566},{"_id":"public/archives/2017/page/3/index.html","hash":"b6dc4853c863a7c75f4d29efec10f0f5bab189bc","modified":1527528656566},{"_id":"public/archives/2017/02/index.html","hash":"a2b9cbfa3072697b1fe0eb03c2d8e548ac6bff28","modified":1527528656566},{"_id":"public/archives/2017/01/index.html","hash":"ee23b2d1a51ccad0b212a7d3a8fbadf59eb2f7a6","modified":1527528656566},{"_id":"public/archives/2017/03/index.html","hash":"692feefe358b1561332de976e8bd6a95109f704f","modified":1527528656567},{"_id":"public/archives/2017/05/index.html","hash":"643464b11581839d5121b8149f2e0ce9b3773b56","modified":1527528656567},{"_id":"public/archives/2017/07/index.html","hash":"bd7605f82ac417e6b98b82b2c6baf4ecb925bb66","modified":1527528656567},{"_id":"public/archives/2017/04/index.html","hash":"c951e498b3ab9065bc29f14f3cb7eb46f1e94b63","modified":1527528656567},{"_id":"public/archives/2017/08/index.html","hash":"9c8d9f3ff9f5284f4e50c70c117409b80b631b49","modified":1527528656567},{"_id":"public/archives/2017/09/index.html","hash":"359a26c40db097c874e1d8076cce6cb9325a8a5a","modified":1527528656567},{"_id":"public/archives/2017/10/index.html","hash":"3bebcecf8abefb6dd364e5cf99d0ad649b61980e","modified":1527528656569},{"_id":"public/archives/2017/12/index.html","hash":"499d4abd814290d7590db9b054989ed8221d4074","modified":1527528656569},{"_id":"public/archives/2018/index.html","hash":"a3fda4cb0f688fd6ccdab1184c7568dabfdc8424","modified":1527528656569},{"_id":"public/archives/2018/page/2/index.html","hash":"5e9456452c1e434becd48ed8686b0394e3fbd622","modified":1527528656569},{"_id":"public/archives/2018/03/index.html","hash":"ae2857e8714f6906404463550c5fcae6b8521cf4","modified":1527528656570},{"_id":"public/archives/2018/02/index.html","hash":"847d0b3c41336a90afad62a29f09b07442fcee20","modified":1527528656569},{"_id":"public/archives/2018/01/index.html","hash":"e6aafe9114bbe3b05d8b0286b02b0ddb25949365","modified":1527528656569},{"_id":"public/archives/2018/04/index.html","hash":"a552ecc31539eef1ec2fc72f35f433ac099a7061","modified":1527528656569},{"_id":"public/index.html","hash":"dbf5403e02571fdbe603e43a1f86cc540ab60750","modified":1527528719665},{"_id":"public/page/2/index.html","hash":"dc5d10b33daad503d385f8559f6fec1926217f3e","modified":1527528656570},{"_id":"public/page/3/index.html","hash":"5c7e5fdfa71b1a2df31415eed3b71cc14e3e90d4","modified":1527528656570},{"_id":"public/page/4/index.html","hash":"2075a5f82a0a9bd2a394bc129172b77cac2c7c9e","modified":1527528656570},{"_id":"public/page/5/index.html","hash":"36f5bf3b99e9c2ab84754c6bad37e42378c91e9e","modified":1527528656570},{"_id":"public/page/6/index.html","hash":"e34b355feeacd6e41da766372cebb2897319270d","modified":1527528656570},{"_id":"public/tags/powershell/index.html","hash":"d90f24c4a777063c89954efd54fcbaef5ad3cb30","modified":1527528656570},{"_id":"public/tags/Database/index.html","hash":"b8e81cf7bd606940ffb63239c8a0cc0d0b49b6c9","modified":1527528656570},{"_id":"public/tags/MsSQL/index.html","hash":"e3e42cf53761a46e951e8afcb5f3c1379bfb79aa","modified":1527528656570},{"_id":"public/tags/BulkInsert/index.html","hash":"04e841dd51f57052bcf56fa4433e405797388aab","modified":1527528656570},{"_id":"public/tags/記錄/index.html","hash":"b9a1e3cf1b51b7a5433a787df1e0f82ff1f9da50","modified":1527528656570},{"_id":"public/tags/post/index.html","hash":"13c7bfdf19135eeded401c23755037636faddd6d","modified":1527528656570},{"_id":"public/tags/http/index.html","hash":"13620952af23777cba710b757c3ccaa715e0f472","modified":1527528656570},{"_id":"public/tags/html/index.html","hash":"906c8cb7e20277187874de9c8556851e52856125","modified":1527528656571},{"_id":"public/tags/Content-Type/index.html","hash":"843a69ea63641e57e6424946e53b290c5fb213df","modified":1527528656571},{"_id":"public/tags/blog/index.html","hash":"0dba44e7d32f5666af8edc643d235cf697319c59","modified":1527528656571},{"_id":"public/tags/google-analytics/index.html","hash":"077e08934bac31132379a3ad0629a47aac9578bf","modified":1527528656571},{"_id":"public/tags/Net-Framework/index.html","hash":"2303e825aa0086ed26e13939aae7cca023e8d4d1","modified":1527528656571},{"_id":"public/tags/IO/index.html","hash":"734298a32c20ea84b27a05ad71e5345b8c0d431e","modified":1527528656571},{"_id":"public/tags/Thread/index.html","hash":"3bb66a5cb057db92da8feee49c8717241542c9a0","modified":1527528656572},{"_id":"public/tags/ASP-Net/index.html","hash":"d14f6b0f98e6aab2c69be7e6f90d7ead66a89f87","modified":1527528656572},{"_id":"public/tags/Redis/index.html","hash":"d54e27d437aa64afc4989ccaedd93901f915308f","modified":1527528656572},{"_id":"public/tags/Trello/index.html","hash":"859b518eb45fdf926831c0e1f55bb6ccb3c5d915","modified":1527528656572},{"_id":"public/tags/閱讀筆記/index.html","hash":"9f0d5227ff306fb75cd92cbb804a09e1d64535f1","modified":1527528656572},{"_id":"public/tags/C/index.html","hash":"a883db56c752f7ace13028feedc4287b36667b61","modified":1527528656572},{"_id":"public/tags/StyleCop/index.html","hash":"0b0c3c30b889235e5c5a1a0d8c86b85164066198","modified":1527528656572},{"_id":"public/tags/CI/index.html","hash":"2779c218d0c3a68b6036ec8d78f6e7d17e55f283","modified":1527528656572},{"_id":"public/tags/expressjs/index.html","hash":"b7f14fbd713a3a340e7658e07f006d1b419ca0bc","modified":1527528656572},{"_id":"public/tags/Openshift/index.html","hash":"2bd671d8c66e238943f9a2e3f4823abe98c28dd0","modified":1527528656572},{"_id":"public/tags/typescript/index.html","hash":"5aca003f2d0d4f7222720f37de9f8d81b9d37f33","modified":1527528656572},{"_id":"public/tags/gulp/index.html","hash":"6f637afb5e30e60dce3d266ab08f3a648fbdad0c","modified":1527528656572},{"_id":"public/tags/nodejs/index.html","hash":"0b2cd71a25132e15887f828136b956a77fda6a33","modified":1527528656573},{"_id":"public/tags/DBA/index.html","hash":"2add40dff1bdcad1a2313b2a93c01a4954e93387","modified":1527528656573},{"_id":"public/tags/SQL-Server/index.html","hash":"bf768da2d7d36a22b71a850e8bbae835b5630bd3","modified":1527528656573},{"_id":"public/tags/Google-API/index.html","hash":"4b35f2524bf8c2f9178e43b05aa2cd6e845eb07b","modified":1527528656573},{"_id":"public/tags/最有生產力的一年/index.html","hash":"4d4f715baf587db4a1598cc80cf876b035cfe539","modified":1527528656573},{"_id":"public/tags/OAuth/index.html","hash":"171fe3f24eac7e6ffca0af5f39cd7de5283b7ea7","modified":1527528656573},{"_id":"public/tags/github/index.html","hash":"8a643ada27c910bf9958a63d40bae8a0169d00a2","modified":1527528656573},{"_id":"public/tags/HTTP-1-1/index.html","hash":"79f966d8b0ed9529ea5fdc83d04cb300524cfd8d","modified":1527528656573},{"_id":"public/tags/HTTP-2/index.html","hash":"50f7d56a053cc815512a10bd44d8401fa534b9c3","modified":1527528656573},{"_id":"public/tags/TCP/index.html","hash":"877456f5612999b4274f2d24415582f92ca57968","modified":1527528656573},{"_id":"public/tags/IIS/index.html","hash":"bf999dda6a1797190adb93429dd01109221d2963","modified":1527528656573},{"_id":"public/tags/Unit-Testing/index.html","hash":"c4263c6024c126c7da610ef888d66e56b3edb7ed","modified":1527528656573},{"_id":"public/tags/Integrated-Testing/index.html","hash":"3c6641fa0f4f83ab5926beb31d4f03ace0845c60","modified":1527528656573},{"_id":"public/tags/website/index.html","hash":"5a5d8d9e2bd6e6a3719b375d6d1fc9e113c0d61f","modified":1527528656574},{"_id":"public/tags/domain/index.html","hash":"34153a47f876614aa1249fd88d8bfacaf8aa76e8","modified":1527528656574},{"_id":"public/tags/DNS/index.html","hash":"501c989a7c309f562225a041bb3583608fdab7bf","modified":1527528656574},{"_id":"public/tags/Entity-Framework/index.html","hash":"afaa22eae2ac53887405217a5fae62b9d526da95","modified":1527528656574},{"_id":"public/tags/Testing/index.html","hash":"00445b91177e12ed8fb87b793e08a5c9097f27a0","modified":1527528656574},{"_id":"public/tags/Unit-Test/index.html","hash":"cea5b88b16561cd1be816e6dd3c9894719347866","modified":1527528656574},{"_id":"public/tags/kata/index.html","hash":"3545de841f224ddfb05c20ca83a0eb1fa41abebc","modified":1527528656574},{"_id":"public/tags/bootstrap/index.html","hash":"e310f1302bb294d19e487985142d83a1a132110a","modified":1527528656574},{"_id":"public/tags/npm/index.html","hash":"7bdbe4b8e2ebff6ac5dc1904b495f70064ed35ed","modified":1527528656574},{"_id":"public/tags/jquery/index.html","hash":"9c424ea1bc45c1f403c41ac9f2df6cf5a4901c02","modified":1527528656574},{"_id":"public/tags/jquery-ui/index.html","hash":"6f0be718ddf220a973e96e0ed456cbd964eead6e","modified":1527528656574},{"_id":"public/tags/Coding-Standard/index.html","hash":"7c751f0e637e6e115602665886ba9d18d0ffee71","modified":1527528656575},{"_id":"public/tags/Unix/index.html","hash":"452a223962d0ff25f7e3436b0191a4ef0336fd44","modified":1527528656575},{"_id":"public/tags/Linux/index.html","hash":"f994c07290814a3ffd7c2823a33b002386f0e04e","modified":1527528656575},{"_id":"public/tags/Shell/index.html","hash":"3d726451ccec067b17c54c4bd020cda9c2d116e2","modified":1527528656575},{"_id":"public/tags/testing/index.html","hash":"91cbf512b5610635290063e5b07a198951898dfa","modified":1527528656575},{"_id":"public/tags/TDD/index.html","hash":"e6075cae9242c91c43dbccd86a97219affcb428e","modified":1527528656575},{"_id":"public/tags/Jenkins/index.html","hash":"f1921d58766c7818c1463942d05ccea6307c61cb","modified":1527528656572},{"_id":"public/tags/unit-test/index.html","hash":"0f36a79b61c919e033731330ad0de29bccd0f035","modified":1527528656575},{"_id":"public/tags/mutation-teseting/index.html","hash":"fe85e4140cddef53fde1a16652b05d0968745ee6","modified":1527528656575},{"_id":"public/tags/Windows/index.html","hash":"eb0a4388351f835775b7c07af42ee90452e2660d","modified":1527528656575},{"_id":"public/tags/Kubernetes/index.html","hash":"b9a1b174601ddfce8ffac0dd737992f2ab18e19e","modified":1527528656575},{"_id":"public/tags/SCSS/index.html","hash":"ffd289cc7abd5c87020a3a834f40928bb77da91f","modified":1527528656575},{"_id":"public/tags/Ruby/index.html","hash":"ed2528a99b1db0be6e974748f8fb551eff872933","modified":1527528656575},{"_id":"public/tags/Node-js/index.html","hash":"5c071ff8e3a5f3641599c8178da59ec7aaa00a92","modified":1527528656575},{"_id":"public/tags/integration-testing/index.html","hash":"777c9274af69c770519e9e6e85a9a824fdb0b55e","modified":1527528656575},{"_id":"public/tags/IBM/index.html","hash":"f2a47f40b9c5f706ace856d3bf8c7b8e7235f970","modified":1527528656575},{"_id":"public/tags/Google/index.html","hash":"0a99b6eb6ad478f3995c749b27350d9d552d22e8","modified":1527528656575},{"_id":"public/tags/Microsoft/index.html","hash":"0bd03db4645f8f6f7f8bef67b2a51e1111ef6263","modified":1527528656576},{"_id":"public/tags/Taiwan/index.html","hash":"810cbf42ab2993cb7c565a75e361a611a6a67e1c","modified":1527528656576},{"_id":"public/tags/IoT/index.html","hash":"5cb79ae714780c4d8cbebf1d39f2b2757e0fd772","modified":1527528656576},{"_id":"public/tags/AI/index.html","hash":"63aba55e1a9e96340e3eef6da93fd8f1d25c7494","modified":1527528656576},{"_id":"public/tags/Machine-Learning/index.html","hash":"1bf6ccac3d22ab898941bcd0bc80c133e833d9f5","modified":1527528656576},{"_id":"public/tags/時間管理/index.html","hash":"4ed8858e541b1d29c5fefacd9c358655519368df","modified":1527528656576},{"_id":"public/tags/AWS/index.html","hash":"7f68297e8625e70d50d6a9de010cba2e01b22223","modified":1527528656576},{"_id":"public/tags/docker/index.html","hash":"753924f770f7869d47e66d0aa912b17faaff7bb9","modified":1527528656576},{"_id":"public/tags/Root-User/index.html","hash":"512514b10f93975437a8b242d789017d88ba1e90","modified":1527528656576},{"_id":"public/tags/EC2/index.html","hash":"f4f8d7bac6269581f62d01fade0869816f07e8a9","modified":1527528656576},{"_id":"public/tags/MsTest/index.html","hash":"d6a6f80c562424a9f9a9ddff39a9a9f4f615e818","modified":1527528656576},{"_id":"public/tags/Visual-Studio/index.html","hash":"51787fc81a7fbe5afff89bfd48b8effd43d7bcc3","modified":1527528656576},{"_id":"public/tags/Docker/index.html","hash":"7997a0db7eda9e35d8401f8cbbe421eb6eb083a3","modified":1527528656576},{"_id":"public/tags/TypeScript/index.html","hash":"f3d5bb4a4e7846a039707adec28adfccaabfa4a0","modified":1527528656576},{"_id":"public/tags/Nodejs/index.html","hash":"88f63669c7df9a575557b1b251ccaa40443b548f","modified":1527528656576},{"_id":"public/tags/IAM/index.html","hash":"e41ca593d68d24894988b06a35008f57f5d4f8b1","modified":1527528656576},{"_id":"public/2018/05/29/books/the_silo_effect_7/index.html","hash":"231a1815994db04dc7eacf03d252b23fa4dd866d","modified":1527528719665},{"_id":"public/archives/2018/05/index.html","hash":"d6ebb961fc43b9e989b1cd2f5517a6c374e21bc5","modified":1527528656569},{"_id":"public/CNAME","hash":"1c1ded058047f1d22275a8561240d1074b7a5cca","modified":1527528266473},{"_id":"public/README.md","hash":"7e15d0a159a4a8be81924f6f4392266dcd4b407c","modified":1527528266473},{"_id":"public/images/102216_095355_PM.jpg","hash":"721e0caf732a8c6cd6b1b83a31fec062af16a744","modified":1527528266473},{"_id":"public/favicon.ico","hash":"998df8105a3500811219e4a176d14b1d88ab8b94","modified":1527528266473},{"_id":"public/amp-dist/sample/sample-logo.png","hash":"9dad0e8cc4d48c6e550820e91377e2028a344176","modified":1527528266473},{"_id":"public/images/090516_023554_AM.jpg","hash":"a9cec76e1e7b039f9c870fdf0f938cf4edfd7ce8","modified":1527528266473},{"_id":"public/amp-dist/sample/sample-avator.png","hash":"0c9e74f8207353ace09090a7d17def59ab9b98c8","modified":1527528266473},{"_id":"public/amp-dist/sample/sample-substituteTitleImage.png","hash":"f7d5b269516ed2ef4c855466b5d78d4ca136445c","modified":1527528266473},{"_id":"public/images/workerthread_and_iothread/110416_102435_AM.jpg","hash":"a876fb25212a93ae47f0447a83d64d2f5028d03a","modified":1527528266473},{"_id":"public/images/workerthread_and_iothread/110416_103521_AM.jpg","hash":"839e4d25969fc11027a13413c74a3456524d8f3e","modified":1527528266473},{"_id":"public/images/workerthread_and_iothread/110416_112435_AM.jpg","hash":"3bc3703723f421303a5119d6563e8d32614f4ac2","modified":1527528266473},{"_id":"public/images/workerthread_and_iothread/278553_300x300.jpg","hash":"4cba555dc1ba4aef9e7aee3b4adb1d06a3937968","modified":1527528266473},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1527528266473},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1527528270839},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1527528270839},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1527528270840},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1527528270840},{"_id":"public/images/2018/six_strategies_for_application_deployment/canary.gif","hash":"8ddbdc76c656761c45341f2d6e95e3b3d1f2b43d","modified":1527528270840},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1527528270840},{"_id":"public/images/2018/six_strategies_for_application_deployment/blue-green.gif","hash":"a6622f287873c18232ed84eced936d62297abb74","modified":1527528270840},{"_id":"public/images/2018/six_strategies_for_application_deployment/recreate.gif","hash":"a5f6117801f439932ccccb31ff1a8ecb0faea49a","modified":1527528270840},{"_id":"public/images/2018/six_strategies_for_application_deployment/ramped.gif","hash":"8c76c71e00d1c7bb3c044909f0a858acded8ce3d","modified":1527528270841},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1527528270841},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1527528270841},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1527528270841},{"_id":"public/images/2018/six_strategies_for_application_deployment/a-b.gif","hash":"defe435b40484fce7d4ccc5d745f93efc73805f1","modified":1527528270841},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1527528270841},{"_id":"public/images/090516_023252_AM.jpg","hash":"509eef571252eebe3417bb7c89c589d3485a01af","modified":1527528270841},{"_id":"public/images/090516_021242_AM.jpg","hash":"015f6fff88214f8744c37b8d02a331ffadda5943","modified":1527528270841},{"_id":"public/css/style.css","hash":"611644db650f365ba6a56b06f00f27256044a47e","modified":1527528270841},{"_id":"public/images/workerthread_and_iothread/110416_102436_AM.png","hash":"b567d9a58721b13f82b351ba494c260ee86c77cb","modified":1527528270854},{"_id":"public/images/2018/six_strategies_for_application_deployment/shadow.gif","hash":"b1f33ac16a7b637948b1847eea457002e4552f02","modified":1527528270855},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1527528270855},{"_id":"public/css/images/banner.jpg","hash":"dd61b5b07fedf2fa657aa76c9058d19c1e30d294","modified":1527528270855},{"_id":"public/images/090516_024550_AM.jpg","hash":"16b8658ff25fec9ecc6c84a5354c8a6f015ddb30","modified":1527528270855},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1527528270857},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1527528270857},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1527528270857},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1527528270857},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1527528270857},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1527528270857},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1527528270857},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1527528270857},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1527528270857},{"_id":"public/images/workerthread_and_iothread/110416_170101_PM.jpg","hash":"e941d0267614d431c0e422ef753c38de7b75087d","modified":1527528270857},{"_id":"public/images/workerthread_and_iothread/110416_102437_AM.jpg","hash":"a4b6382cea823bea0be5757fe0800639ae0166ce","modified":1527528270857},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1527528272047},{"_id":"public/images/2018/six_strategies_for_application_deployment/deployment_strategies.png","hash":"9a1dfbba887451527257f55ab1984a32d6c8deb0","modified":1527528272047},{"_id":"public/css/images/banner.bak.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1527528272047},{"_id":"public/images/workerthread_and_iothread/110416_170001_PM.jpg","hash":"bd9fa06701bd800e059df8fd499af13d1b8ad277","modified":1527528272143},{"_id":"public/images/workerthread_and_iothread/螢幕擷取畫面_110716_110245_AM.jpg","hash":"556cffba3e1c86d4c33775c3cabfef8fd6fcebc9","modified":1527528272225}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"[記錄]powershell 初體驗","date":"2016-10-21T05:27:53.000Z","_content":"## 需求\n1. 將指定的Log記錄,匯入資料庫,產生row data\n2. 將row data 轉換成為需要的報表資料\n3. 產生報表\n\n## 規劃\n1. powershell 讀取檔案\n2. powershell 連接資料庫\n3. powershell 執行SQL\n4. powershell 作BulkInsert\n5. powershell 寫入檔案\n\n![](/images/102216_095355_PM.jpg)\n\n**簡記要點**\n- ***powershell 可以直接取用 .Net Framework 或 COM 元件***\n- ***宣告變用要用`$`字號***\n- ***`#` 是註解***\n\n### 讀取檔案\n```powershell\n#用New-Object 建立.Net StreamrReader 物件\n$reader = New-Object System.io.streamreader(get-item $filePath)\n#使用`[]`建立靜態類別讀取檔案\n$file = [System.IO.File]::ReadAllLines($filePath)  \n#直接使用Get-Content讀取文檔\n$file = Get-Content  \"C:\\filepath\\file\"\n```\n### 連線資料庫與執行語法\n```powershell\n$connection = New-Object System.Data.SQLClient.SQLConnection\n$connection.ConnectionString = \"server='$server';database='$database';uid='$user'; pwd='$pwd';Integrated Security=False;\"\n$connection.Open()\n# do something \n$connection.Close()\n```\n### BulkInsert\n- 從檔案建立DataTable\n\n```powershell\n$table = New-Object System.Data.DataTable\n#建立欄位\n$col_title = New-Object system.Data.DataColumn \"Title\",([string])\n$table.Columns.Add($col_title);\n$col_content = New-Object system.Data.DataColumn \"Content\",([string])\n$table.Columns.Add($col_content);\n$col_author = New-Object system.Data.DataColumn \"Author\",([string])\n$table.Columns.Add($col_author);\n#建立資料\nforeach($file in $files){\n  $dr = $table.NewRow();\n  $dr[\"Title\"] = $file[\"title\"]\n  $dr[\"Content\"] = $file[\"content\"]\n  $dr[\"Author\"] = $file[\"author\"]\n}\n#寫入資料表\n$table.Rows.Add($dr);\n```\n\n- 透過BulkCopy將DataTable寫入資料庫 \n\n```powershell\n$connection.Open()\n$bulkCopy = New-Object (“Data.SqlClient.SqlBulkCopy”) -ArgumentList $connection\n$bulkCopy.DestinationTableName = \"tablename\"\n$bulkCopy.WriteToServer($datatable)\n$connection.Close()\n```\n\n### 進度條\n```powershell\nWrite-Progress -Activity \"BulkInsert\" -Status \"載入百分比: 100 %\" -PercentComplete 100;\n```\n\n### 產生報表\n\n```powershell\n$datatable | export-csv C:\\Reports\\20161026.csv -Encoding UTF8\n```\n\n\n\n## 參考\n1. https://msdn.microsoft.com/en-us/powershell\n2. https://msdn.microsoft.com/en-us/powershell/scripting/getting-started/cookbooks/using-static-classes-and-methods\n3. https://cmatskas.com/execute-sql-query-with-powershell/\n4. https://blogs.technet.microsoft.com/heyscriptingguy/\n\n(fin)","source":"_posts/1st_time_with_powershell.md","raw":"---\ntitle: \"[記錄]powershell 初體驗\"\ndate: 2016/10/21 13:27:53 \ntag:\n  - powershell\n  - Database\n  - MsSQL\n  - BulkInsert\n  - 記錄\n---\n## 需求\n1. 將指定的Log記錄,匯入資料庫,產生row data\n2. 將row data 轉換成為需要的報表資料\n3. 產生報表\n\n## 規劃\n1. powershell 讀取檔案\n2. powershell 連接資料庫\n3. powershell 執行SQL\n4. powershell 作BulkInsert\n5. powershell 寫入檔案\n\n![](/images/102216_095355_PM.jpg)\n\n**簡記要點**\n- ***powershell 可以直接取用 .Net Framework 或 COM 元件***\n- ***宣告變用要用`$`字號***\n- ***`#` 是註解***\n\n### 讀取檔案\n```powershell\n#用New-Object 建立.Net StreamrReader 物件\n$reader = New-Object System.io.streamreader(get-item $filePath)\n#使用`[]`建立靜態類別讀取檔案\n$file = [System.IO.File]::ReadAllLines($filePath)  \n#直接使用Get-Content讀取文檔\n$file = Get-Content  \"C:\\filepath\\file\"\n```\n### 連線資料庫與執行語法\n```powershell\n$connection = New-Object System.Data.SQLClient.SQLConnection\n$connection.ConnectionString = \"server='$server';database='$database';uid='$user'; pwd='$pwd';Integrated Security=False;\"\n$connection.Open()\n# do something \n$connection.Close()\n```\n### BulkInsert\n- 從檔案建立DataTable\n\n```powershell\n$table = New-Object System.Data.DataTable\n#建立欄位\n$col_title = New-Object system.Data.DataColumn \"Title\",([string])\n$table.Columns.Add($col_title);\n$col_content = New-Object system.Data.DataColumn \"Content\",([string])\n$table.Columns.Add($col_content);\n$col_author = New-Object system.Data.DataColumn \"Author\",([string])\n$table.Columns.Add($col_author);\n#建立資料\nforeach($file in $files){\n  $dr = $table.NewRow();\n  $dr[\"Title\"] = $file[\"title\"]\n  $dr[\"Content\"] = $file[\"content\"]\n  $dr[\"Author\"] = $file[\"author\"]\n}\n#寫入資料表\n$table.Rows.Add($dr);\n```\n\n- 透過BulkCopy將DataTable寫入資料庫 \n\n```powershell\n$connection.Open()\n$bulkCopy = New-Object (“Data.SqlClient.SqlBulkCopy”) -ArgumentList $connection\n$bulkCopy.DestinationTableName = \"tablename\"\n$bulkCopy.WriteToServer($datatable)\n$connection.Close()\n```\n\n### 進度條\n```powershell\nWrite-Progress -Activity \"BulkInsert\" -Status \"載入百分比: 100 %\" -PercentComplete 100;\n```\n\n### 產生報表\n\n```powershell\n$datatable | export-csv C:\\Reports\\20161026.csv -Encoding UTF8\n```\n\n\n\n## 參考\n1. https://msdn.microsoft.com/en-us/powershell\n2. https://msdn.microsoft.com/en-us/powershell/scripting/getting-started/cookbooks/using-static-classes-and-methods\n3. https://cmatskas.com/execute-sql-query-with-powershell/\n4. https://blogs.technet.microsoft.com/heyscriptingguy/\n\n(fin)","slug":"1st_time_with_powershell","published":1,"updated":"2016-12-04T16:43:46.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyaz0000yk55j6vxat6t","content":"<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><ol>\n<li>將指定的Log記錄,匯入資料庫,產生row data</li>\n<li>將row data 轉換成為需要的報表資料</li>\n<li>產生報表</li>\n</ol>\n<h2 id=\"規劃\"><a href=\"#規劃\" class=\"headerlink\" title=\"規劃\"></a>規劃</h2><ol>\n<li>powershell 讀取檔案</li>\n<li>powershell 連接資料庫</li>\n<li>powershell 執行SQL</li>\n<li>powershell 作BulkInsert</li>\n<li>powershell 寫入檔案</li>\n</ol>\n<p><img src=\"/images/102216_095355_PM.jpg\" alt=\"\"></p>\n<p><strong>簡記要點</strong></p>\n<ul>\n<li><strong><em>powershell 可以直接取用 .Net Framework 或 COM 元件</em></strong></li>\n<li><strong><em>宣告變用要用<code>$</code>字號</em></strong></li>\n<li><strong><em><code>#</code> 是註解</em></strong></li>\n</ul>\n<h3 id=\"讀取檔案\"><a href=\"#讀取檔案\" class=\"headerlink\" title=\"讀取檔案\"></a>讀取檔案</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#用New-Object 建立.Net StreamrReader 物件</span></div><div class=\"line\"><span class=\"variable\">$reader</span> = <span class=\"built_in\">New-Object</span> System.io.streamreader(<span class=\"built_in\">get-item</span> <span class=\"variable\">$filePath</span>)</div><div class=\"line\"><span class=\"comment\">#使用`[]`建立靜態類別讀取檔案</span></div><div class=\"line\"><span class=\"variable\">$file</span> = [System.IO.File]::ReadAllLines(<span class=\"variable\">$filePath</span>)  </div><div class=\"line\"><span class=\"comment\">#直接使用Get-Content讀取文檔</span></div><div class=\"line\"><span class=\"variable\">$file</span> = <span class=\"built_in\">Get-Content</span>  <span class=\"string\">\"C:\\filepath\\file\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"連線資料庫與執行語法\"><a href=\"#連線資料庫與執行語法\" class=\"headerlink\" title=\"連線資料庫與執行語法\"></a>連線資料庫與執行語法</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$connection</span> = <span class=\"built_in\">New-Object</span> System.Data.SQLClient.SQLConnection</div><div class=\"line\"><span class=\"variable\">$connection</span>.ConnectionString = <span class=\"string\">\"server='<span class=\"variable\">$server</span>';database='<span class=\"variable\">$database</span>';uid='<span class=\"variable\">$user</span>'; pwd='<span class=\"variable\">$pwd</span>';Integrated Security=False;\"</span></div><div class=\"line\"><span class=\"variable\">$connection</span>.Open()</div><div class=\"line\"><span class=\"comment\"># do something </span></div><div class=\"line\"><span class=\"variable\">$connection</span>.Close()</div></pre></td></tr></table></figure>\n<h3 id=\"BulkInsert\"><a href=\"#BulkInsert\" class=\"headerlink\" title=\"BulkInsert\"></a>BulkInsert</h3><ul>\n<li>從檔案建立DataTable</li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$table</span> = <span class=\"built_in\">New-Object</span> System.Data.DataTable</div><div class=\"line\"><span class=\"comment\">#建立欄位</span></div><div class=\"line\"><span class=\"variable\">$col_title</span> = <span class=\"built_in\">New-Object</span> system.Data.DataColumn <span class=\"string\">\"Title\"</span>,([string])</div><div class=\"line\"><span class=\"variable\">$table</span>.Columns.Add(<span class=\"variable\">$col_title</span>);</div><div class=\"line\"><span class=\"variable\">$col_content</span> = <span class=\"built_in\">New-Object</span> system.Data.DataColumn <span class=\"string\">\"Content\"</span>,([string])</div><div class=\"line\"><span class=\"variable\">$table</span>.Columns.Add(<span class=\"variable\">$col_content</span>);</div><div class=\"line\"><span class=\"variable\">$col_author</span> = <span class=\"built_in\">New-Object</span> system.Data.DataColumn <span class=\"string\">\"Author\"</span>,([string])</div><div class=\"line\"><span class=\"variable\">$table</span>.Columns.Add(<span class=\"variable\">$col_author</span>);</div><div class=\"line\"><span class=\"comment\">#建立資料</span></div><div class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"variable\">$file</span> <span class=\"keyword\">in</span> <span class=\"variable\">$files</span>)&#123;</div><div class=\"line\">  <span class=\"variable\">$dr</span> = <span class=\"variable\">$table</span>.NewRow();</div><div class=\"line\">  <span class=\"variable\">$dr</span>[<span class=\"string\">\"Title\"</span>] = <span class=\"variable\">$file</span>[<span class=\"string\">\"title\"</span>]</div><div class=\"line\">  <span class=\"variable\">$dr</span>[<span class=\"string\">\"Content\"</span>] = <span class=\"variable\">$file</span>[<span class=\"string\">\"content\"</span>]</div><div class=\"line\">  <span class=\"variable\">$dr</span>[<span class=\"string\">\"Author\"</span>] = <span class=\"variable\">$file</span>[<span class=\"string\">\"author\"</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">#寫入資料表</span></div><div class=\"line\"><span class=\"variable\">$table</span>.Rows.Add(<span class=\"variable\">$dr</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>透過BulkCopy將DataTable寫入資料庫 </li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$connection</span>.Open()</div><div class=\"line\"><span class=\"variable\">$bulkCopy</span> = <span class=\"built_in\">New-Object</span> (“Data.SqlClient.SqlBulkCopy”) -ArgumentList <span class=\"variable\">$connection</span></div><div class=\"line\"><span class=\"variable\">$bulkCopy</span>.DestinationTableName = <span class=\"string\">\"tablename\"</span></div><div class=\"line\"><span class=\"variable\">$bulkCopy</span>.WriteToServer(<span class=\"variable\">$datatable</span>)</div><div class=\"line\"><span class=\"variable\">$connection</span>.Close()</div></pre></td></tr></table></figure>\n<h3 id=\"進度條\"><a href=\"#進度條\" class=\"headerlink\" title=\"進度條\"></a>進度條</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Write-Progress</span> -Activity <span class=\"string\">\"BulkInsert\"</span> -Status <span class=\"string\">\"載入百分比: 100 %\"</span> -PercentComplete <span class=\"number\">100</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"產生報表\"><a href=\"#產生報表\" class=\"headerlink\" title=\"產生報表\"></a>產生報表</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$datatable</span> | <span class=\"built_in\">export-csv</span> C:\\Reports\\<span class=\"number\">20161026</span>.csv -Encoding UTF8</div></pre></td></tr></table></figure>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ol>\n<li><a href=\"https://msdn.microsoft.com/en-us/powershell\" target=\"_blank\" rel=\"external\">https://msdn.microsoft.com/en-us/powershell</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/powershell/scripting/getting-started/cookbooks/using-static-classes-and-methods\" target=\"_blank\" rel=\"external\">https://msdn.microsoft.com/en-us/powershell/scripting/getting-started/cookbooks/using-static-classes-and-methods</a></li>\n<li><a href=\"https://cmatskas.com/execute-sql-query-with-powershell/\" target=\"_blank\" rel=\"external\">https://cmatskas.com/execute-sql-query-with-powershell/</a></li>\n<li><a href=\"https://blogs.technet.microsoft.com/heyscriptingguy/\" target=\"_blank\" rel=\"external\">https://blogs.technet.microsoft.com/heyscriptingguy/</a></li>\n</ol>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><ol>\n<li>將指定的Log記錄,匯入資料庫,產生row data</li>\n<li>將row data 轉換成為需要的報表資料</li>\n<li>產生報表</li>\n</ol>\n<h2 id=\"規劃\"><a href=\"#規劃\" class=\"headerlink\" title=\"規劃\"></a>規劃</h2><ol>\n<li>powershell 讀取檔案</li>\n<li>powershell 連接資料庫</li>\n<li>powershell 執行SQL</li>\n<li>powershell 作BulkInsert</li>\n<li>powershell 寫入檔案</li>\n</ol>\n<p><img src=\"/images/102216_095355_PM.jpg\" alt=\"\"></p>\n<p><strong>簡記要點</strong></p>\n<ul>\n<li><strong><em>powershell 可以直接取用 .Net Framework 或 COM 元件</em></strong></li>\n<li><strong><em>宣告變用要用<code>$</code>字號</em></strong></li>\n<li><strong><em><code>#</code> 是註解</em></strong></li>\n</ul>\n<h3 id=\"讀取檔案\"><a href=\"#讀取檔案\" class=\"headerlink\" title=\"讀取檔案\"></a>讀取檔案</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#用New-Object 建立.Net StreamrReader 物件</span></div><div class=\"line\"><span class=\"variable\">$reader</span> = <span class=\"built_in\">New-Object</span> System.io.streamreader(<span class=\"built_in\">get-item</span> <span class=\"variable\">$filePath</span>)</div><div class=\"line\"><span class=\"comment\">#使用`[]`建立靜態類別讀取檔案</span></div><div class=\"line\"><span class=\"variable\">$file</span> = [System.IO.File]::ReadAllLines(<span class=\"variable\">$filePath</span>)  </div><div class=\"line\"><span class=\"comment\">#直接使用Get-Content讀取文檔</span></div><div class=\"line\"><span class=\"variable\">$file</span> = <span class=\"built_in\">Get-Content</span>  <span class=\"string\">\"C:\\filepath\\file\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"連線資料庫與執行語法\"><a href=\"#連線資料庫與執行語法\" class=\"headerlink\" title=\"連線資料庫與執行語法\"></a>連線資料庫與執行語法</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$connection</span> = <span class=\"built_in\">New-Object</span> System.Data.SQLClient.SQLConnection</div><div class=\"line\"><span class=\"variable\">$connection</span>.ConnectionString = <span class=\"string\">\"server='<span class=\"variable\">$server</span>';database='<span class=\"variable\">$database</span>';uid='<span class=\"variable\">$user</span>'; pwd='<span class=\"variable\">$pwd</span>';Integrated Security=False;\"</span></div><div class=\"line\"><span class=\"variable\">$connection</span>.Open()</div><div class=\"line\"><span class=\"comment\"># do something </span></div><div class=\"line\"><span class=\"variable\">$connection</span>.Close()</div></pre></td></tr></table></figure>\n<h3 id=\"BulkInsert\"><a href=\"#BulkInsert\" class=\"headerlink\" title=\"BulkInsert\"></a>BulkInsert</h3><ul>\n<li>從檔案建立DataTable</li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$table</span> = <span class=\"built_in\">New-Object</span> System.Data.DataTable</div><div class=\"line\"><span class=\"comment\">#建立欄位</span></div><div class=\"line\"><span class=\"variable\">$col_title</span> = <span class=\"built_in\">New-Object</span> system.Data.DataColumn <span class=\"string\">\"Title\"</span>,([string])</div><div class=\"line\"><span class=\"variable\">$table</span>.Columns.Add(<span class=\"variable\">$col_title</span>);</div><div class=\"line\"><span class=\"variable\">$col_content</span> = <span class=\"built_in\">New-Object</span> system.Data.DataColumn <span class=\"string\">\"Content\"</span>,([string])</div><div class=\"line\"><span class=\"variable\">$table</span>.Columns.Add(<span class=\"variable\">$col_content</span>);</div><div class=\"line\"><span class=\"variable\">$col_author</span> = <span class=\"built_in\">New-Object</span> system.Data.DataColumn <span class=\"string\">\"Author\"</span>,([string])</div><div class=\"line\"><span class=\"variable\">$table</span>.Columns.Add(<span class=\"variable\">$col_author</span>);</div><div class=\"line\"><span class=\"comment\">#建立資料</span></div><div class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"variable\">$file</span> <span class=\"keyword\">in</span> <span class=\"variable\">$files</span>)&#123;</div><div class=\"line\">  <span class=\"variable\">$dr</span> = <span class=\"variable\">$table</span>.NewRow();</div><div class=\"line\">  <span class=\"variable\">$dr</span>[<span class=\"string\">\"Title\"</span>] = <span class=\"variable\">$file</span>[<span class=\"string\">\"title\"</span>]</div><div class=\"line\">  <span class=\"variable\">$dr</span>[<span class=\"string\">\"Content\"</span>] = <span class=\"variable\">$file</span>[<span class=\"string\">\"content\"</span>]</div><div class=\"line\">  <span class=\"variable\">$dr</span>[<span class=\"string\">\"Author\"</span>] = <span class=\"variable\">$file</span>[<span class=\"string\">\"author\"</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">#寫入資料表</span></div><div class=\"line\"><span class=\"variable\">$table</span>.Rows.Add(<span class=\"variable\">$dr</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>透過BulkCopy將DataTable寫入資料庫 </li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$connection</span>.Open()</div><div class=\"line\"><span class=\"variable\">$bulkCopy</span> = <span class=\"built_in\">New-Object</span> (“Data.SqlClient.SqlBulkCopy”) -ArgumentList <span class=\"variable\">$connection</span></div><div class=\"line\"><span class=\"variable\">$bulkCopy</span>.DestinationTableName = <span class=\"string\">\"tablename\"</span></div><div class=\"line\"><span class=\"variable\">$bulkCopy</span>.WriteToServer(<span class=\"variable\">$datatable</span>)</div><div class=\"line\"><span class=\"variable\">$connection</span>.Close()</div></pre></td></tr></table></figure>\n<h3 id=\"進度條\"><a href=\"#進度條\" class=\"headerlink\" title=\"進度條\"></a>進度條</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Write-Progress</span> -Activity <span class=\"string\">\"BulkInsert\"</span> -Status <span class=\"string\">\"載入百分比: 100 %\"</span> -PercentComplete <span class=\"number\">100</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"產生報表\"><a href=\"#產生報表\" class=\"headerlink\" title=\"產生報表\"></a>產生報表</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$datatable</span> | <span class=\"built_in\">export-csv</span> C:\\Reports\\<span class=\"number\">20161026</span>.csv -Encoding UTF8</div></pre></td></tr></table></figure>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ol>\n<li><a href=\"https://msdn.microsoft.com/en-us/powershell\" target=\"_blank\" rel=\"external\">https://msdn.microsoft.com/en-us/powershell</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/powershell/scripting/getting-started/cookbooks/using-static-classes-and-methods\" target=\"_blank\" rel=\"external\">https://msdn.microsoft.com/en-us/powershell/scripting/getting-started/cookbooks/using-static-classes-and-methods</a></li>\n<li><a href=\"https://cmatskas.com/execute-sql-query-with-powershell/\" target=\"_blank\" rel=\"external\">https://cmatskas.com/execute-sql-query-with-powershell/</a></li>\n<li><a href=\"https://blogs.technet.microsoft.com/heyscriptingguy/\" target=\"_blank\" rel=\"external\">https://blogs.technet.microsoft.com/heyscriptingguy/</a></li>\n</ol>\n<p>(fin)</p>\n"},{"title":"有關 HTTP Header Content-Type","date":"2016-10-28T04:54:55.000Z","_content":"## 引言\n當我們對 Server 發出 request 的時候  \n需要註明你 request 的 Content-Type   \n以下簡單介紹一下這些格式  \n\n### 測試工具\n\n[PostMan](https://www.getpostman.com/)這套工具\n可以模擬不同的格式資料發動 request 到你的 Server\n\n---\n\n## Content-Type\n\n### `application/x-www-form-urlencoded`\n常用的Content-Type,簡單說就是KEY-VALUE的方式  \n如下, KEY firstname 的值是 marsen  \nlastname 是由使用者輸入\n\n```html\n<form>\n  First name:<br>\n  <input type=\"text\" name=\"firstname\" value=\"marsen\"><br>\n  Last name:<br>\n  <input type=\"text\" name=\"lastname\">\n</form>\n```\n同時資料會作一次url encoded,  \n產生類似下列的資料\nfirstname=marsen&lastname=lin&key%5b1%5d=value%5b1%5d\n\n---\n\n### `multipart/form-data` \n\nPostMan中的選項 `binary` 其實就是包成這種格式   \n上傳檔案會使用這種Content-Type,  \n這通常表示你的html element包含有 `<input type=\"file\">` \n\n---\n\n###  其它\nPostMan中的選項 `raw`,可以用字串組合成任意Content-Type,  \n參考[Content-Type Table](http://www.freeformatter.com/mime-types-list.html)  \n- `application/json`  \n目前主流的API會用輕巧的JSON作為傳遞資訊的媒介  \n- `text/xml`、`application/xml`  \n早期標準的Web服務通常會透過xml作為交換資訊的媒介  \n- `text/plain` \n有些email或debug的情況會使用text/plain作為Content-Type,但是一般的Request情況不建議使用  \n- 更多請參考[Spec](https://www.w3.org/TR/html5/forms.html#text/plain-encoding-algorithm)   \n\n---\n\n## 參考\n- https://imququ.com/post/four-ways-to-post-data-in-http.html\n- https://codeforgeek.com/2014/09/handle-get-post-request-express-4/\n- https://scotch.io/tutorials/use-expressjs-to-get-url-and-post-parameters\n- https://stackoverflow.com/questions/4832357/whats-the-difference-between-text-xml-vs-application-xml-for-webservice-respons?ref=mythemeco&t=pack\n- https://stackoverflow.com/questions/4526273/what-does-enctype-multipart-form-data-mean\n\n(fin)","source":"_posts/about_content_type.md","raw":"---\ntitle: 有關 HTTP Header Content-Type\ndate: 2016/10/28 12:54:55\ntag:\n  - post\n  - http\n  - html\n  - Content-Type\n---\n## 引言\n當我們對 Server 發出 request 的時候  \n需要註明你 request 的 Content-Type   \n以下簡單介紹一下這些格式  \n\n### 測試工具\n\n[PostMan](https://www.getpostman.com/)這套工具\n可以模擬不同的格式資料發動 request 到你的 Server\n\n---\n\n## Content-Type\n\n### `application/x-www-form-urlencoded`\n常用的Content-Type,簡單說就是KEY-VALUE的方式  \n如下, KEY firstname 的值是 marsen  \nlastname 是由使用者輸入\n\n```html\n<form>\n  First name:<br>\n  <input type=\"text\" name=\"firstname\" value=\"marsen\"><br>\n  Last name:<br>\n  <input type=\"text\" name=\"lastname\">\n</form>\n```\n同時資料會作一次url encoded,  \n產生類似下列的資料\nfirstname=marsen&lastname=lin&key%5b1%5d=value%5b1%5d\n\n---\n\n### `multipart/form-data` \n\nPostMan中的選項 `binary` 其實就是包成這種格式   \n上傳檔案會使用這種Content-Type,  \n這通常表示你的html element包含有 `<input type=\"file\">` \n\n---\n\n###  其它\nPostMan中的選項 `raw`,可以用字串組合成任意Content-Type,  \n參考[Content-Type Table](http://www.freeformatter.com/mime-types-list.html)  \n- `application/json`  \n目前主流的API會用輕巧的JSON作為傳遞資訊的媒介  \n- `text/xml`、`application/xml`  \n早期標準的Web服務通常會透過xml作為交換資訊的媒介  \n- `text/plain` \n有些email或debug的情況會使用text/plain作為Content-Type,但是一般的Request情況不建議使用  \n- 更多請參考[Spec](https://www.w3.org/TR/html5/forms.html#text/plain-encoding-algorithm)   \n\n---\n\n## 參考\n- https://imququ.com/post/four-ways-to-post-data-in-http.html\n- https://codeforgeek.com/2014/09/handle-get-post-request-express-4/\n- https://scotch.io/tutorials/use-expressjs-to-get-url-and-post-parameters\n- https://stackoverflow.com/questions/4832357/whats-the-difference-between-text-xml-vs-application-xml-for-webservice-respons?ref=mythemeco&t=pack\n- https://stackoverflow.com/questions/4526273/what-does-enctype-multipart-form-data-mean\n\n(fin)","slug":"about_content_type","published":1,"updated":"2018-04-04T09:41:26.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyb60001yk55liajldk3","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>當我們對 Server 發出 request 的時候<br>需要註明你 request 的 Content-Type<br>以下簡單介紹一下這些格式  </p>\n<h3 id=\"測試工具\"><a href=\"#測試工具\" class=\"headerlink\" title=\"測試工具\"></a>測試工具</h3><p><a href=\"https://www.getpostman.com/\" target=\"_blank\" rel=\"external\">PostMan</a>這套工具<br>可以模擬不同的格式資料發動 request 到你的 Server</p>\n<hr>\n<h2 id=\"Content-Type\"><a href=\"#Content-Type\" class=\"headerlink\" title=\"Content-Type\"></a>Content-Type</h2><h3 id=\"application-x-www-form-urlencoded\"><a href=\"#application-x-www-form-urlencoded\" class=\"headerlink\" title=\"application/x-www-form-urlencoded\"></a><code>application/x-www-form-urlencoded</code></h3><p>常用的Content-Type,簡單說就是KEY-VALUE的方式<br>如下, KEY firstname 的值是 marsen<br>lastname 是由使用者輸入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  First name:<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"firstname\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"marsen\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  Last name:<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lastname\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>同時資料會作一次url encoded,<br>產生類似下列的資料<br>firstname=marsen&amp;lastname=lin&amp;key%5b1%5d=value%5b1%5d</p>\n<hr>\n<h3 id=\"multipart-form-data\"><a href=\"#multipart-form-data\" class=\"headerlink\" title=\"multipart/form-data\"></a><code>multipart/form-data</code></h3><p>PostMan中的選項 <code>binary</code> 其實就是包成這種格式<br>上傳檔案會使用這種Content-Type,<br>這通常表示你的html element包含有 <code>&lt;input type=&quot;file&quot;&gt;</code> </p>\n<hr>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>PostMan中的選項 <code>raw</code>,可以用字串組合成任意Content-Type,<br>參考<a href=\"http://www.freeformatter.com/mime-types-list.html\" target=\"_blank\" rel=\"external\">Content-Type Table</a>  </p>\n<ul>\n<li><code>application/json</code><br>目前主流的API會用輕巧的JSON作為傳遞資訊的媒介  </li>\n<li><code>text/xml</code>、<code>application/xml</code><br>早期標準的Web服務通常會透過xml作為交換資訊的媒介  </li>\n<li><code>text/plain</code><br>有些email或debug的情況會使用text/plain作為Content-Type,但是一般的Request情況不建議使用  </li>\n<li>更多請參考<a href=\"https://www.w3.org/TR/html5/forms.html#text/plain-encoding-algorithm\" target=\"_blank\" rel=\"external\">Spec</a>   </li>\n</ul>\n<hr>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://imququ.com/post/four-ways-to-post-data-in-http.html\" target=\"_blank\" rel=\"external\">https://imququ.com/post/four-ways-to-post-data-in-http.html</a></li>\n<li><a href=\"https://codeforgeek.com/2014/09/handle-get-post-request-express-4/\" target=\"_blank\" rel=\"external\">https://codeforgeek.com/2014/09/handle-get-post-request-express-4/</a></li>\n<li><a href=\"https://scotch.io/tutorials/use-expressjs-to-get-url-and-post-parameters\" target=\"_blank\" rel=\"external\">https://scotch.io/tutorials/use-expressjs-to-get-url-and-post-parameters</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4832357/whats-the-difference-between-text-xml-vs-application-xml-for-webservice-respons?ref=mythemeco&amp;t=pack\" target=\"_blank\" rel=\"external\">https://stackoverflow.com/questions/4832357/whats-the-difference-between-text-xml-vs-application-xml-for-webservice-respons?ref=mythemeco&amp;t=pack</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4526273/what-does-enctype-multipart-form-data-mean\" target=\"_blank\" rel=\"external\">https://stackoverflow.com/questions/4526273/what-does-enctype-multipart-form-data-mean</a></li>\n</ul>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>當我們對 Server 發出 request 的時候<br>需要註明你 request 的 Content-Type<br>以下簡單介紹一下這些格式  </p>\n<h3 id=\"測試工具\"><a href=\"#測試工具\" class=\"headerlink\" title=\"測試工具\"></a>測試工具</h3><p><a href=\"https://www.getpostman.com/\" target=\"_blank\" rel=\"external\">PostMan</a>這套工具<br>可以模擬不同的格式資料發動 request 到你的 Server</p>\n<hr>\n<h2 id=\"Content-Type\"><a href=\"#Content-Type\" class=\"headerlink\" title=\"Content-Type\"></a>Content-Type</h2><h3 id=\"application-x-www-form-urlencoded\"><a href=\"#application-x-www-form-urlencoded\" class=\"headerlink\" title=\"application/x-www-form-urlencoded\"></a><code>application/x-www-form-urlencoded</code></h3><p>常用的Content-Type,簡單說就是KEY-VALUE的方式<br>如下, KEY firstname 的值是 marsen<br>lastname 是由使用者輸入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  First name:<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"firstname\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"marsen\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  Last name:<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lastname\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>同時資料會作一次url encoded,<br>產生類似下列的資料<br>firstname=marsen&amp;lastname=lin&amp;key%5b1%5d=value%5b1%5d</p>\n<hr>\n<h3 id=\"multipart-form-data\"><a href=\"#multipart-form-data\" class=\"headerlink\" title=\"multipart/form-data\"></a><code>multipart/form-data</code></h3><p>PostMan中的選項 <code>binary</code> 其實就是包成這種格式<br>上傳檔案會使用這種Content-Type,<br>這通常表示你的html element包含有 <code>&lt;input type=&quot;file&quot;&gt;</code> </p>\n<hr>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>PostMan中的選項 <code>raw</code>,可以用字串組合成任意Content-Type,<br>參考<a href=\"http://www.freeformatter.com/mime-types-list.html\" target=\"_blank\" rel=\"external\">Content-Type Table</a>  </p>\n<ul>\n<li><code>application/json</code><br>目前主流的API會用輕巧的JSON作為傳遞資訊的媒介  </li>\n<li><code>text/xml</code>、<code>application/xml</code><br>早期標準的Web服務通常會透過xml作為交換資訊的媒介  </li>\n<li><code>text/plain</code><br>有些email或debug的情況會使用text/plain作為Content-Type,但是一般的Request情況不建議使用  </li>\n<li>更多請參考<a href=\"https://www.w3.org/TR/html5/forms.html#text/plain-encoding-algorithm\" target=\"_blank\" rel=\"external\">Spec</a>   </li>\n</ul>\n<hr>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://imququ.com/post/four-ways-to-post-data-in-http.html\" target=\"_blank\" rel=\"external\">https://imququ.com/post/four-ways-to-post-data-in-http.html</a></li>\n<li><a href=\"https://codeforgeek.com/2014/09/handle-get-post-request-express-4/\" target=\"_blank\" rel=\"external\">https://codeforgeek.com/2014/09/handle-get-post-request-express-4/</a></li>\n<li><a href=\"https://scotch.io/tutorials/use-expressjs-to-get-url-and-post-parameters\" target=\"_blank\" rel=\"external\">https://scotch.io/tutorials/use-expressjs-to-get-url-and-post-parameters</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4832357/whats-the-difference-between-text-xml-vs-application-xml-for-webservice-respons?ref=mythemeco&amp;t=pack\" target=\"_blank\" rel=\"external\">https://stackoverflow.com/questions/4832357/whats-the-difference-between-text-xml-vs-application-xml-for-webservice-respons?ref=mythemeco&amp;t=pack</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4526273/what-does-enctype-multipart-form-data-mean\" target=\"_blank\" rel=\"external\">https://stackoverflow.com/questions/4526273/what-does-enctype-multipart-form-data-mean</a></li>\n</ul>\n<p>(fin)</p>\n"},{"title":"如何讓google analytics追踪你的Hexo Blog","date":"2016-08-25T06:12:07.000Z","_content":"## 前置作業\n1. 你要有google帳號，並申請好你的google_analytics ID\n2. 這個記錄僅針對Hexo預設的Theme有作用，未來有改Theme的話，可能會需要手動加入，再寫文章補上\n\n## 開啟_config.yml\n1. 確定一下你是使用預設的theme `landscape`\n        ## Themes: https://hexo.io/themes/\n        theme: landscape\n2. 開啟 `root/themes/landscape/_config.yml`\n3. 找到以下的設定區段\n        # Miscellaneous\n        google_analytics:\n4. 填入步驟1. 中所取得 google_analytics ID\n5. 部署網站，完成!\n\n(fin)\n","source":"_posts/add_google_analytics_to_hexo_blog_1.md","raw":"---\ntitle: 如何讓google analytics追踪你的Hexo Blog\ndate: 2016/08/25 14:12:07\ntag:\n  - blog\n  - google analytics\n---\n## 前置作業\n1. 你要有google帳號，並申請好你的google_analytics ID\n2. 這個記錄僅針對Hexo預設的Theme有作用，未來有改Theme的話，可能會需要手動加入，再寫文章補上\n\n## 開啟_config.yml\n1. 確定一下你是使用預設的theme `landscape`\n        ## Themes: https://hexo.io/themes/\n        theme: landscape\n2. 開啟 `root/themes/landscape/_config.yml`\n3. 找到以下的設定區段\n        # Miscellaneous\n        google_analytics:\n4. 填入步驟1. 中所取得 google_analytics ID\n5. 部署網站，完成!\n\n(fin)\n","slug":"add_google_analytics_to_hexo_blog_1","published":1,"updated":"2016-12-04T16:43:46.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivybd0003yk55lcwirkkr","content":"<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ol>\n<li>你要有google帳號，並申請好你的google_analytics ID</li>\n<li>這個記錄僅針對Hexo預設的Theme有作用，未來有改Theme的話，可能會需要手動加入，再寫文章補上</li>\n</ol>\n<h2 id=\"開啟-config-yml\"><a href=\"#開啟-config-yml\" class=\"headerlink\" title=\"開啟_config.yml\"></a>開啟_config.yml</h2><ol>\n<li>確定一下你是使用預設的theme <code>landscape</code><pre><code>## Themes: https://hexo.io/themes/\ntheme: landscape\n</code></pre></li>\n<li>開啟 <code>root/themes/landscape/_config.yml</code></li>\n<li>找到以下的設定區段<pre><code># Miscellaneous\ngoogle_analytics:\n</code></pre></li>\n<li>填入步驟1. 中所取得 google_analytics ID</li>\n<li>部署網站，完成!</li>\n</ol>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ol>\n<li>你要有google帳號，並申請好你的google_analytics ID</li>\n<li>這個記錄僅針對Hexo預設的Theme有作用，未來有改Theme的話，可能會需要手動加入，再寫文章補上</li>\n</ol>\n<h2 id=\"開啟-config-yml\"><a href=\"#開啟-config-yml\" class=\"headerlink\" title=\"開啟_config.yml\"></a>開啟_config.yml</h2><ol>\n<li>確定一下你是使用預設的theme <code>landscape</code><pre><code>## Themes: https://hexo.io/themes/\ntheme: landscape\n</code></pre></li>\n<li>開啟 <code>root/themes/landscape/_config.yml</code></li>\n<li>找到以下的設定區段<pre><code># Miscellaneous\ngoogle_analytics:\n</code></pre></li>\n<li>填入步驟1. 中所取得 google_analytics ID</li>\n<li>部署網站，完成!</li>\n</ol>\n<p>(fin)</p>\n"},{"title":"ASP.NET Thread Pool 與 Redis Timeout Exception","date":"2016-11-21T08:49:17.000Z","_content":"\n\n## 概述\n_ASP.NET Thread Pool 的機制如何影響 Redis_\n\n## 案例\n\n線上維護的系統偶爾會發生 Redis Timeout Exception ,\n並在 elmah 發現以下的錯誤記錄\n\n```csharp\nTimeout performing SETEX Cache:Prod:WebAPI:Key:20161121152607, inst: 18, mgr: ExecuteSelect, err: never,  \nqueue: 0, qu: 0, qs: 0, qc: 0, wr: 0, wq: 0, in: 0, ar: 1,  \nIOCP: (Busy=0,Free=1000,Min=8,Max=1000), WORKER: (Busy=13,Free=32754,Min=8,Max=32767), clientName: TYO-MWEB \n```\n\n## 解析\n\n這時當 StackExchange.Redis 在進行同步作業的時候,  \n如果超過 `synctimeout` 的設定值(預設是1000ms), \nRedis 會佔用.NET的 workerthread \n而在 .NET 底層隱含著一個機制,\n會導致錯誤。\n\n### Thread Pool 500ms 的機制\n\n*一種簡化的說法「 ASP.NET Thread Pool 一秒能建立2個Thread。」*  \n\n設定值 `minworkerthread` 就像是遊樂場*已經開啟*的閘門, \n每當有一個遊客(Task)進來時,立即提供給它使用。\n但是當遊客(Task)變多的時候,就會開始排隊(Queue),\nASP.NET Thread Pool 隱含著一個機制,\n當它的隊伍(Queue)長達500豪秒沒有移動的話,\n就會開啟新的閘門(建立新的Thread)。\n而我的情境屬於[Burst of traffic](#burst_of_traffic),    \n突然大量 Task 湧入 Queue ,  \nThreadPool 需要大量的 Thread  \n每個新的 Thread 都需要 500ms 的反應時間 ,  \n而累積的時間超過 Task 的 Timeout 設定值時 ,  \n就會拋出Exception. \n\n\n![ASP.NET Thread Pool](/images/workerthread_and_iothread/110416_103521_AM.jpg)\n\nASP.NET Thread Pool 的排隊機制與`minworkerthread` 設定值相關。  \n可以透過調整 `machine.config` 來修正。  \n參考([爭用、 效能不佳、 和死結 （deadlock） 當您從 ASP.NET 應用程式呼叫 Web 服務](https://support.microsoft.com/zh-tw/kb/821268))。  \n\n`minworkerthread` 的預設值是 1 。  \n但是會與執行環境的CPU個數有關,  \n假設你是四核的主機,那就要乘上 4。\n\n```xml\n<system.web>\n    <processModel autoConfig=\"false\" minWorkerThreads=\"1\" />\n</system.web>    \n```\n\n### 範例\n\n當 Redis 發生 Timeout 時, \n可以透過錯誤訊息判斷其背後的原因是否與 workerthread 有關。\n在以下的例子可以看到 IOCP 與 WORKER 兩個值。\n這兩值表示 .Net ThreadPool 內的兩種執行緒,\n如果 Busy 值很高, 就有可能是 ThreadPool 來不及建立造成的錯誤。\n\n```csharp\nSystem.TimeoutException: Timeout performing MGET 2728cc84-58ae-406b-8ec8-3f962419f641,  \ninst: 1,mgr: Inactive, queue: 73, qu=6, qs=67, qc=0, wr=1/1, in=0/0  \nIOCP: (Busy=0, Free=999, Min=2,Max=1000), WORKER (Busy=7,Free=8184,Min=2,Max=8191) \n```\n\n### Error Code 說明\n\n|Error code|Details|範例|說明|\n|---|---|---|---|\n|inst|in the last time slice: 0 commands have been issued|在最後時脈：已發出0個命令|最後的時脈發出的命令個數|\n|mgr|the socket manager is performing \"socket.select\", <br />which means it is asking the OS to indicate a socket <br />that has something to do; <br /> basically: the reader is not actively reading from <br />the network because it doesn't think there<br /> is anything to do||最後的操作命令|\n|queue|  there are 73 total in-progress operations|73個正在排隊中的操作|正在排隊中的操作|\n|qu|6 of those are in unsent queue: they have not yet been written to the outbound network|6個未發送的queue|未發送的queue|\n|qs|67 of those have been sent to the server but a response is not yet available.  The response could be: Not yet sent by the server sent by the server but not yet processed by the client. |67個已發送的queue|已發送的queue|\n|qc|0 of those have seen replies but have not yet been marked as complete due to waiting on the completion loop|0個已發送未標記完成的queue|已發送未標記完成的queue|\n|wr|there is an active writer (meaning - those 6 unsent are not being ignored) bytes/activewriters |有 1 個啟用的writer,(意味著qu的工作並沒有被忽略) bytes/activewriters|bytes/activewriters|\n|in|there are no active readers and zero bytes are available to be read on the NIC bytes/activereaders|0個reader|bytes/activereaders|\n\n## 參考\n- [Threading](https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx)\n- [Improving ASP.NET Performance](https://msdn.microsoft.com/en-us/library/ms998549.aspx)\n- [Programming the Thread Pool in the .NET Framework](https://msdn.microsoft.com/en-us/library/ms973903.aspx)\n- [DiagnoseRedisErrors-ClientSide](https://gist.github.com/JonCole/db0e90bedeb3fc4823c2)\n- [ThreadPool](https://gist.github.com/JonCole/e65411214030f0d823cb)\n\n(fin)\n\n---\n\n## 其它的 Redis Error 情境 \n只作摘要式的翻譯。\n\n### Memory pressure (記憶體壓力)\n\n`Problem:`  \n記憶體不足而開始讀取虛擬記憶體(磁碟)而導致特能低落。\nMemory pressure on the client machine leads to all kinds of performance problems that can   \ndelay processing of data that was sent by the Redis instance without any delay.   \nWhen memory pressure hits, the system typically has to page data from physical memory to   \nvirtual memory which is on disk. This page faulting causes the system to slow down significantly.  \n\n`Measurement:`  \nMonitory memory usage on machine to make sure that it does not exceed available memory.\nMonitor the Page Faults/Sec perf counter. Most systems will have some page faults even during   \nnormal operation, so watch for spikes in this page faults perf counter which correspond with timeouts.  \n\n`Resolution:`   \n增加記憶體或是減少記憶體使用量\nUpgrade to a larger client VM size with more memory or dig into your memory usage patterns   \nto reduce memory consuption.  \n\n---\n\n### <span style=\"color:red;\" id=\"burst_of_traffic\">Burst of traffic</span>\n\n`Problem:`  \nThreadPool突然大量的工作湧入queue導致執行緒來不及建立。\n Bursts of traffic combined with poor ThreadPool settings can result in delays in processing   \n data already sent by the Redis Server but not yet consumed on the client side.  \n\n`測量:`   \n可以用[程式](https://github.com/JonCole/SampleCode/blob/master/ThreadPoolMonitor/ThreadPoolLogger.cs)監控 ThreadPool .  \n或是單純透過 TimeoutException 的訊息,觀察IOCP與WORKER的Busy值來判斷.   \n`Measurement:`  \nMonitor how your ThreadPool statistics change over time using code like [this](https://github.com/JonCole/SampleCode/blob/master/ThreadPoolMonitor/ThreadPoolLogger.cs).   \nYou can also look at the TimeoutException message from StackExchange.Redis.    \nHere is an example :  \n\n```csharp\nSystem.TimeoutException: Timeout performing EVAL, inst: 8, mgr: Inactive, queue: 0, qu: 0, qs: 0, qc: 0, wr: 0, wq: 0, in: 64221, ar: 0, \nIOCP: (Busy=6,Free=999,Min=2,Max=1000), WORKER: (Busy=7,Free=8184,Min=2,Max=8191)\n```\n\nIn the above message, there are several issues that are interesting:  \nNotice that in the \"IOCP\" section and the \"WORKER\" section you have a \"Busy\" value that is  \ngreater than the \"Min\" value. This means that your threadpool settings need adjusting.  \nYou can also see \"in: 64221\". This indicates that 64211 bytes have been received at the kernel   \nsocket layer but haven't yet been read by the application (e.g. StackExchange.Redis).   \nThis typically means that your application isn't reading data from the network as quickly as   \nthe server is sending it to you.  \n\n`Resolution:` \n調整ThreadPool設定  \nConfigure your ThreadPool Settings to make sure that your threadpool will scale up quickly under burst scenarios.\n\n---\n\n### High CPU usage (CPU 過載)\n\n`Problem:` \nHigh CPU usage on the client is an indication that the system cannot keep up with the work that it has been asked to perform. High CPU is a problem because the CPU is busy and it can't keep up with the work the application is asking it to do. The response from Redis can come very quickly, but because the CPU isn't keeping up with the workload, the response sits in the socket's kernel buffer waiting to be processed. If the delay is long enough, a timeout occurs in spite of the requested data having already arrived from the server.\n\n`Measurement:` \nMonitor the System Wide CPU usage through the azure portal or through the associated perf counter. \nBe careful not to monitor process CPU because a single process can have low CPU usage at the same time that overall system CPU can be high. \nWatch for spikes in CPU usage that correspond with timeouts. As a result of high CPU, \nyou may also see high \"in: XXX\" values in TimeoutException error messages as described above in the \"Burst of traffic\" section. \nNote that in newer builds of StackExchange.Redis, the client-side CPU will be printed out in the timeout error message as long as the environment doesn't block access to the CPU perf counter.\n\n`Note:` \nStackExchange.Redis version 1.1.603 or later now prints out \"local-cpu\" usage when a timeout occurs to help understand when client-side CPU usage may be affecting performance.\n\n`Resolution:` \n增加CPU或是找出CPU產生過載的原因  \nUpgrade to a larger VM size with more CPU capacity or investigate what is causing CPU spikes.\n\n---\n\n### Client Side Bandwidth Exceeded (頻寬不足)\n\n`Problem:` \nDifferent sized client machines have limitations on how much network bandwidth they have available. \nIf the client exceeds the available bandwidth, then data will not be processed on the client side as quickly as the server is sending it. This can lead to timeouts.\n\n`Measurement:` \nMonitor how your Bandwidth usage change over time using code like this. Note that this code may not run successfully in some environments with restricted permissions (like Azure WebSites).\n\n`Resolution:` \n加大頻寬或減少使用量\nIncrease Client VM size or reduce network bandwidth consumption.\n\n----\n\n### Large Request/Response Size (過大的請求/回應量)\n\n`Problem:` \n如圖所示,A與B兩個Request都太過龐大,當同時發動請求時,  \nA 回應的時間過長, 導致 B 的Timeout\nA large request/response can cause timeouts. As an example, suppose your timeout value configured is 1 second. \nYour application requests two keys (e.g. 'A' and 'B') at the same time using the same physical network connection. \nMost clients support \"Pipelining\" of requests, such that both requests 'A' and 'B' are sent on the wire to the server one after the other without waiting for the responses. \nThe server will send the responses back in the same order. If response 'A' is large enough it can eat up most of the timeout for subsequent requests.\n\nBelow, I will try to demonstrate this. In this scenario, Request 'A' and 'B' are sent quickly, \nthe server starts sending responses 'A' and 'B' quickly, but because of data transfer times, \n'B' get stuck behind the other request and times out even though the server responded quickly.\n\n```\n|-------- 1 Second Timeout (A)----------|\n|-Request A-|\n     |-------- 1 Second Timeout (B) ----------|\n     |-Request B-|\n            |- Read Response A --------|\n                                       |- Read Response B-| (**TIMEOUT**)\n```\n\n`Measurement:` \nThis is a difficult one to measure. You basically have to instrument your client code to track large requests and responses.\n\n`Resolution:`\n將所需要的資料分割成數個小片段 再分別取回\nRedis is optimized for a large number of small values, rather than a few large values. \nThe preferred solution is to break up your data into related smaller values. See here for details around why smaller values are recommended.\nIncrease the size of your VM (for client and Redis Cache Server), to get higher bandwidth capabilities, reducing data transfer times for larger responses. \nNote that getting more bandwidth on just the server or just on the client may not be enough. \nMeasure your bandwidth usage and compare it to the capabilities of the size of VM you currently have.\nIncrease the number of ConnectionMultiplexer objects you use and round-robin requests over different connections (e.g. use a connection pool). \nIf you go this route, make sure that you don't create a brand new ConnectionMultiplexer for each request as the overhead of creating the new connection will kill your performance.","source":"_posts/aspdotnet_threadpool_and_redis.md","raw":"---\ntitle: ASP.NET Thread Pool 與 Redis Timeout Exception\ndate: 2016/11/21 16:49:17\ntag:\n  - .Net Framework\n  - IO\n  - Thread\n  - ASP.Net\n  - Redis\n---\n\n\n## 概述\n_ASP.NET Thread Pool 的機制如何影響 Redis_\n\n## 案例\n\n線上維護的系統偶爾會發生 Redis Timeout Exception ,\n並在 elmah 發現以下的錯誤記錄\n\n```csharp\nTimeout performing SETEX Cache:Prod:WebAPI:Key:20161121152607, inst: 18, mgr: ExecuteSelect, err: never,  \nqueue: 0, qu: 0, qs: 0, qc: 0, wr: 0, wq: 0, in: 0, ar: 1,  \nIOCP: (Busy=0,Free=1000,Min=8,Max=1000), WORKER: (Busy=13,Free=32754,Min=8,Max=32767), clientName: TYO-MWEB \n```\n\n## 解析\n\n這時當 StackExchange.Redis 在進行同步作業的時候,  \n如果超過 `synctimeout` 的設定值(預設是1000ms), \nRedis 會佔用.NET的 workerthread \n而在 .NET 底層隱含著一個機制,\n會導致錯誤。\n\n### Thread Pool 500ms 的機制\n\n*一種簡化的說法「 ASP.NET Thread Pool 一秒能建立2個Thread。」*  \n\n設定值 `minworkerthread` 就像是遊樂場*已經開啟*的閘門, \n每當有一個遊客(Task)進來時,立即提供給它使用。\n但是當遊客(Task)變多的時候,就會開始排隊(Queue),\nASP.NET Thread Pool 隱含著一個機制,\n當它的隊伍(Queue)長達500豪秒沒有移動的話,\n就會開啟新的閘門(建立新的Thread)。\n而我的情境屬於[Burst of traffic](#burst_of_traffic),    \n突然大量 Task 湧入 Queue ,  \nThreadPool 需要大量的 Thread  \n每個新的 Thread 都需要 500ms 的反應時間 ,  \n而累積的時間超過 Task 的 Timeout 設定值時 ,  \n就會拋出Exception. \n\n\n![ASP.NET Thread Pool](/images/workerthread_and_iothread/110416_103521_AM.jpg)\n\nASP.NET Thread Pool 的排隊機制與`minworkerthread` 設定值相關。  \n可以透過調整 `machine.config` 來修正。  \n參考([爭用、 效能不佳、 和死結 （deadlock） 當您從 ASP.NET 應用程式呼叫 Web 服務](https://support.microsoft.com/zh-tw/kb/821268))。  \n\n`minworkerthread` 的預設值是 1 。  \n但是會與執行環境的CPU個數有關,  \n假設你是四核的主機,那就要乘上 4。\n\n```xml\n<system.web>\n    <processModel autoConfig=\"false\" minWorkerThreads=\"1\" />\n</system.web>    \n```\n\n### 範例\n\n當 Redis 發生 Timeout 時, \n可以透過錯誤訊息判斷其背後的原因是否與 workerthread 有關。\n在以下的例子可以看到 IOCP 與 WORKER 兩個值。\n這兩值表示 .Net ThreadPool 內的兩種執行緒,\n如果 Busy 值很高, 就有可能是 ThreadPool 來不及建立造成的錯誤。\n\n```csharp\nSystem.TimeoutException: Timeout performing MGET 2728cc84-58ae-406b-8ec8-3f962419f641,  \ninst: 1,mgr: Inactive, queue: 73, qu=6, qs=67, qc=0, wr=1/1, in=0/0  \nIOCP: (Busy=0, Free=999, Min=2,Max=1000), WORKER (Busy=7,Free=8184,Min=2,Max=8191) \n```\n\n### Error Code 說明\n\n|Error code|Details|範例|說明|\n|---|---|---|---|\n|inst|in the last time slice: 0 commands have been issued|在最後時脈：已發出0個命令|最後的時脈發出的命令個數|\n|mgr|the socket manager is performing \"socket.select\", <br />which means it is asking the OS to indicate a socket <br />that has something to do; <br /> basically: the reader is not actively reading from <br />the network because it doesn't think there<br /> is anything to do||最後的操作命令|\n|queue|  there are 73 total in-progress operations|73個正在排隊中的操作|正在排隊中的操作|\n|qu|6 of those are in unsent queue: they have not yet been written to the outbound network|6個未發送的queue|未發送的queue|\n|qs|67 of those have been sent to the server but a response is not yet available.  The response could be: Not yet sent by the server sent by the server but not yet processed by the client. |67個已發送的queue|已發送的queue|\n|qc|0 of those have seen replies but have not yet been marked as complete due to waiting on the completion loop|0個已發送未標記完成的queue|已發送未標記完成的queue|\n|wr|there is an active writer (meaning - those 6 unsent are not being ignored) bytes/activewriters |有 1 個啟用的writer,(意味著qu的工作並沒有被忽略) bytes/activewriters|bytes/activewriters|\n|in|there are no active readers and zero bytes are available to be read on the NIC bytes/activereaders|0個reader|bytes/activereaders|\n\n## 參考\n- [Threading](https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx)\n- [Improving ASP.NET Performance](https://msdn.microsoft.com/en-us/library/ms998549.aspx)\n- [Programming the Thread Pool in the .NET Framework](https://msdn.microsoft.com/en-us/library/ms973903.aspx)\n- [DiagnoseRedisErrors-ClientSide](https://gist.github.com/JonCole/db0e90bedeb3fc4823c2)\n- [ThreadPool](https://gist.github.com/JonCole/e65411214030f0d823cb)\n\n(fin)\n\n---\n\n## 其它的 Redis Error 情境 \n只作摘要式的翻譯。\n\n### Memory pressure (記憶體壓力)\n\n`Problem:`  \n記憶體不足而開始讀取虛擬記憶體(磁碟)而導致特能低落。\nMemory pressure on the client machine leads to all kinds of performance problems that can   \ndelay processing of data that was sent by the Redis instance without any delay.   \nWhen memory pressure hits, the system typically has to page data from physical memory to   \nvirtual memory which is on disk. This page faulting causes the system to slow down significantly.  \n\n`Measurement:`  \nMonitory memory usage on machine to make sure that it does not exceed available memory.\nMonitor the Page Faults/Sec perf counter. Most systems will have some page faults even during   \nnormal operation, so watch for spikes in this page faults perf counter which correspond with timeouts.  \n\n`Resolution:`   \n增加記憶體或是減少記憶體使用量\nUpgrade to a larger client VM size with more memory or dig into your memory usage patterns   \nto reduce memory consuption.  \n\n---\n\n### <span style=\"color:red;\" id=\"burst_of_traffic\">Burst of traffic</span>\n\n`Problem:`  \nThreadPool突然大量的工作湧入queue導致執行緒來不及建立。\n Bursts of traffic combined with poor ThreadPool settings can result in delays in processing   \n data already sent by the Redis Server but not yet consumed on the client side.  \n\n`測量:`   \n可以用[程式](https://github.com/JonCole/SampleCode/blob/master/ThreadPoolMonitor/ThreadPoolLogger.cs)監控 ThreadPool .  \n或是單純透過 TimeoutException 的訊息,觀察IOCP與WORKER的Busy值來判斷.   \n`Measurement:`  \nMonitor how your ThreadPool statistics change over time using code like [this](https://github.com/JonCole/SampleCode/blob/master/ThreadPoolMonitor/ThreadPoolLogger.cs).   \nYou can also look at the TimeoutException message from StackExchange.Redis.    \nHere is an example :  \n\n```csharp\nSystem.TimeoutException: Timeout performing EVAL, inst: 8, mgr: Inactive, queue: 0, qu: 0, qs: 0, qc: 0, wr: 0, wq: 0, in: 64221, ar: 0, \nIOCP: (Busy=6,Free=999,Min=2,Max=1000), WORKER: (Busy=7,Free=8184,Min=2,Max=8191)\n```\n\nIn the above message, there are several issues that are interesting:  \nNotice that in the \"IOCP\" section and the \"WORKER\" section you have a \"Busy\" value that is  \ngreater than the \"Min\" value. This means that your threadpool settings need adjusting.  \nYou can also see \"in: 64221\". This indicates that 64211 bytes have been received at the kernel   \nsocket layer but haven't yet been read by the application (e.g. StackExchange.Redis).   \nThis typically means that your application isn't reading data from the network as quickly as   \nthe server is sending it to you.  \n\n`Resolution:` \n調整ThreadPool設定  \nConfigure your ThreadPool Settings to make sure that your threadpool will scale up quickly under burst scenarios.\n\n---\n\n### High CPU usage (CPU 過載)\n\n`Problem:` \nHigh CPU usage on the client is an indication that the system cannot keep up with the work that it has been asked to perform. High CPU is a problem because the CPU is busy and it can't keep up with the work the application is asking it to do. The response from Redis can come very quickly, but because the CPU isn't keeping up with the workload, the response sits in the socket's kernel buffer waiting to be processed. If the delay is long enough, a timeout occurs in spite of the requested data having already arrived from the server.\n\n`Measurement:` \nMonitor the System Wide CPU usage through the azure portal or through the associated perf counter. \nBe careful not to monitor process CPU because a single process can have low CPU usage at the same time that overall system CPU can be high. \nWatch for spikes in CPU usage that correspond with timeouts. As a result of high CPU, \nyou may also see high \"in: XXX\" values in TimeoutException error messages as described above in the \"Burst of traffic\" section. \nNote that in newer builds of StackExchange.Redis, the client-side CPU will be printed out in the timeout error message as long as the environment doesn't block access to the CPU perf counter.\n\n`Note:` \nStackExchange.Redis version 1.1.603 or later now prints out \"local-cpu\" usage when a timeout occurs to help understand when client-side CPU usage may be affecting performance.\n\n`Resolution:` \n增加CPU或是找出CPU產生過載的原因  \nUpgrade to a larger VM size with more CPU capacity or investigate what is causing CPU spikes.\n\n---\n\n### Client Side Bandwidth Exceeded (頻寬不足)\n\n`Problem:` \nDifferent sized client machines have limitations on how much network bandwidth they have available. \nIf the client exceeds the available bandwidth, then data will not be processed on the client side as quickly as the server is sending it. This can lead to timeouts.\n\n`Measurement:` \nMonitor how your Bandwidth usage change over time using code like this. Note that this code may not run successfully in some environments with restricted permissions (like Azure WebSites).\n\n`Resolution:` \n加大頻寬或減少使用量\nIncrease Client VM size or reduce network bandwidth consumption.\n\n----\n\n### Large Request/Response Size (過大的請求/回應量)\n\n`Problem:` \n如圖所示,A與B兩個Request都太過龐大,當同時發動請求時,  \nA 回應的時間過長, 導致 B 的Timeout\nA large request/response can cause timeouts. As an example, suppose your timeout value configured is 1 second. \nYour application requests two keys (e.g. 'A' and 'B') at the same time using the same physical network connection. \nMost clients support \"Pipelining\" of requests, such that both requests 'A' and 'B' are sent on the wire to the server one after the other without waiting for the responses. \nThe server will send the responses back in the same order. If response 'A' is large enough it can eat up most of the timeout for subsequent requests.\n\nBelow, I will try to demonstrate this. In this scenario, Request 'A' and 'B' are sent quickly, \nthe server starts sending responses 'A' and 'B' quickly, but because of data transfer times, \n'B' get stuck behind the other request and times out even though the server responded quickly.\n\n```\n|-------- 1 Second Timeout (A)----------|\n|-Request A-|\n     |-------- 1 Second Timeout (B) ----------|\n     |-Request B-|\n            |- Read Response A --------|\n                                       |- Read Response B-| (**TIMEOUT**)\n```\n\n`Measurement:` \nThis is a difficult one to measure. You basically have to instrument your client code to track large requests and responses.\n\n`Resolution:`\n將所需要的資料分割成數個小片段 再分別取回\nRedis is optimized for a large number of small values, rather than a few large values. \nThe preferred solution is to break up your data into related smaller values. See here for details around why smaller values are recommended.\nIncrease the size of your VM (for client and Redis Cache Server), to get higher bandwidth capabilities, reducing data transfer times for larger responses. \nNote that getting more bandwidth on just the server or just on the client may not be enough. \nMeasure your bandwidth usage and compare it to the capabilities of the size of VM you currently have.\nIncrease the number of ConnectionMultiplexer objects you use and round-robin requests over different connections (e.g. use a connection pool). \nIf you go this route, make sure that you don't create a brand new ConnectionMultiplexer for each request as the overhead of creating the new connection will kill your performance.","slug":"aspdotnet_threadpool_and_redis","published":1,"updated":"2017-01-30T06:02:41.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivybf0004yk55iz25vbd6","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><em>ASP.NET Thread Pool 的機制如何影響 Redis</em></p>\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><p>線上維護的系統偶爾會發生 Redis Timeout Exception ,<br>並在 elmah 發現以下的錯誤記錄</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Timeout performing SETEX Cache:Prod:WebAPI:Key:<span class=\"number\">20161121152607</span>, inst: <span class=\"number\">18</span>, mgr: ExecuteSelect, err: never,  </div><div class=\"line\">queue: <span class=\"number\">0</span>, qu: <span class=\"number\">0</span>, qs: <span class=\"number\">0</span>, qc: <span class=\"number\">0</span>, wr: <span class=\"number\">0</span>, wq: <span class=\"number\">0</span>, <span class=\"keyword\">in</span>: <span class=\"number\">0</span>, ar: <span class=\"number\">1</span>,  </div><div class=\"line\">IOCP: (Busy=<span class=\"number\">0</span>,Free=<span class=\"number\">1000</span>,Min=<span class=\"number\">8</span>,Max=<span class=\"number\">1000</span>), WORKER: (Busy=<span class=\"number\">13</span>,Free=<span class=\"number\">32754</span>,Min=<span class=\"number\">8</span>,Max=<span class=\"number\">32767</span>), clientName: TYO-MWEB</div></pre></td></tr></table></figure>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><p>這時當 StackExchange.Redis 在進行同步作業的時候,<br>如果超過 <code>synctimeout</code> 的設定值(預設是1000ms),<br>Redis 會佔用.NET的 workerthread<br>而在 .NET 底層隱含著一個機制,<br>會導致錯誤。</p>\n<h3 id=\"Thread-Pool-500ms-的機制\"><a href=\"#Thread-Pool-500ms-的機制\" class=\"headerlink\" title=\"Thread Pool 500ms 的機制\"></a>Thread Pool 500ms 的機制</h3><p><em>一種簡化的說法「 ASP.NET Thread Pool 一秒能建立2個Thread。」</em>  </p>\n<p>設定值 <code>minworkerthread</code> 就像是遊樂場<em>已經開啟</em>的閘門,<br>每當有一個遊客(Task)進來時,立即提供給它使用。<br>但是當遊客(Task)變多的時候,就會開始排隊(Queue),<br>ASP.NET Thread Pool 隱含著一個機制,<br>當它的隊伍(Queue)長達500豪秒沒有移動的話,<br>就會開啟新的閘門(建立新的Thread)。<br>而我的情境屬於<a href=\"#burst_of_traffic\">Burst of traffic</a>,<br>突然大量 Task 湧入 Queue ,<br>ThreadPool 需要大量的 Thread<br>每個新的 Thread 都需要 500ms 的反應時間 ,<br>而累積的時間超過 Task 的 Timeout 設定值時 ,<br>就會拋出Exception. </p>\n<p><img src=\"/images/workerthread_and_iothread/110416_103521_AM.jpg\" alt=\"ASP.NET Thread Pool\"></p>\n<p>ASP.NET Thread Pool 的排隊機制與<code>minworkerthread</code> 設定值相關。<br>可以透過調整 <code>machine.config</code> 來修正。<br>參考(<a href=\"https://support.microsoft.com/zh-tw/kb/821268\" target=\"_blank\" rel=\"external\">爭用、 效能不佳、 和死結 （deadlock） 當您從 ASP.NET 應用程式呼叫 Web 服務</a>)。  </p>\n<p><code>minworkerthread</code> 的預設值是 1 。<br>但是會與執行環境的CPU個數有關,<br>假設你是四核的主機,那就要乘上 4。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">system.web</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">processModel</span> <span class=\"attr\">autoConfig</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">minWorkerThreads</span>=<span class=\"string\">\"1\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">system.web</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><p>當 Redis 發生 Timeout 時,<br>可以透過錯誤訊息判斷其背後的原因是否與 workerthread 有關。<br>在以下的例子可以看到 IOCP 與 WORKER 兩個值。<br>這兩值表示 .Net ThreadPool 內的兩種執行緒,<br>如果 Busy 值很高, 就有可能是 ThreadPool 來不及建立造成的錯誤。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.TimeoutException: Timeout performing MGET <span class=\"number\">2728</span>cc84<span class=\"number\">-58</span>ae<span class=\"number\">-406</span>b<span class=\"number\">-8</span>ec8<span class=\"number\">-3</span>f962419f641,  </div><div class=\"line\">inst: <span class=\"number\">1</span>,mgr: Inactive, queue: <span class=\"number\">73</span>, qu=<span class=\"number\">6</span>, qs=<span class=\"number\">67</span>, qc=<span class=\"number\">0</span>, wr=<span class=\"number\">1</span>/<span class=\"number\">1</span>, <span class=\"keyword\">in</span>=<span class=\"number\">0</span>/<span class=\"number\">0</span>  </div><div class=\"line\">IOCP: (Busy=<span class=\"number\">0</span>, Free=<span class=\"number\">999</span>, Min=<span class=\"number\">2</span>,Max=<span class=\"number\">1000</span>), WORKER (Busy=<span class=\"number\">7</span>,Free=<span class=\"number\">8184</span>,Min=<span class=\"number\">2</span>,Max=<span class=\"number\">8191</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"Error-Code-說明\"><a href=\"#Error-Code-說明\" class=\"headerlink\" title=\"Error Code 說明\"></a>Error Code 說明</h3><table>\n<thead>\n<tr>\n<th>Error code</th>\n<th>Details</th>\n<th>範例</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>inst</td>\n<td>in the last time slice: 0 commands have been issued</td>\n<td>在最後時脈：已發出0個命令</td>\n<td>最後的時脈發出的命令個數</td>\n</tr>\n<tr>\n<td>mgr</td>\n<td>the socket manager is performing “socket.select”, <br>which means it is asking the OS to indicate a socket <br>that has something to do; <br> basically: the reader is not actively reading from <br>the network because it doesn’t think there<br> is anything to do</td>\n<td></td>\n<td>最後的操作命令</td>\n</tr>\n<tr>\n<td>queue</td>\n<td>there are 73 total in-progress operations</td>\n<td>73個正在排隊中的操作</td>\n<td>正在排隊中的操作</td>\n</tr>\n<tr>\n<td>qu</td>\n<td>6 of those are in unsent queue: they have not yet been written to the outbound network</td>\n<td>6個未發送的queue</td>\n<td>未發送的queue</td>\n</tr>\n<tr>\n<td>qs</td>\n<td>67 of those have been sent to the server but a response is not yet available.  The response could be: Not yet sent by the server sent by the server but not yet processed by the client.</td>\n<td>67個已發送的queue</td>\n<td>已發送的queue</td>\n</tr>\n<tr>\n<td>qc</td>\n<td>0 of those have seen replies but have not yet been marked as complete due to waiting on the completion loop</td>\n<td>0個已發送未標記完成的queue</td>\n<td>已發送未標記完成的queue</td>\n</tr>\n<tr>\n<td>wr</td>\n<td>there is an active writer (meaning - those 6 unsent are not being ignored) bytes/activewriters</td>\n<td>有 1 個啟用的writer,(意味著qu的工作並沒有被忽略) bytes/activewriters</td>\n<td>bytes/activewriters</td>\n</tr>\n<tr>\n<td>in</td>\n<td>there are no active readers and zero bytes are available to be read on the NIC bytes/activereaders</td>\n<td>0個reader</td>\n<td>bytes/activereaders</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx\" target=\"_blank\" rel=\"external\">Threading</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms998549.aspx\" target=\"_blank\" rel=\"external\">Improving ASP.NET Performance</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms973903.aspx\" target=\"_blank\" rel=\"external\">Programming the Thread Pool in the .NET Framework</a></li>\n<li><a href=\"https://gist.github.com/JonCole/db0e90bedeb3fc4823c2\" target=\"_blank\" rel=\"external\">DiagnoseRedisErrors-ClientSide</a></li>\n<li><a href=\"https://gist.github.com/JonCole/e65411214030f0d823cb\" target=\"_blank\" rel=\"external\">ThreadPool</a></li>\n</ul>\n<p>(fin)</p>\n<hr>\n<h2 id=\"其它的-Redis-Error-情境\"><a href=\"#其它的-Redis-Error-情境\" class=\"headerlink\" title=\"其它的 Redis Error 情境\"></a>其它的 Redis Error 情境</h2><p>只作摘要式的翻譯。</p>\n<h3 id=\"Memory-pressure-記憶體壓力\"><a href=\"#Memory-pressure-記憶體壓力\" class=\"headerlink\" title=\"Memory pressure (記憶體壓力)\"></a>Memory pressure (記憶體壓力)</h3><p><code>Problem:</code><br>記憶體不足而開始讀取虛擬記憶體(磁碟)而導致特能低落。<br>Memory pressure on the client machine leads to all kinds of performance problems that can<br>delay processing of data that was sent by the Redis instance without any delay.<br>When memory pressure hits, the system typically has to page data from physical memory to<br>virtual memory which is on disk. This page faulting causes the system to slow down significantly.  </p>\n<p><code>Measurement:</code><br>Monitory memory usage on machine to make sure that it does not exceed available memory.<br>Monitor the Page Faults/Sec perf counter. Most systems will have some page faults even during<br>normal operation, so watch for spikes in this page faults perf counter which correspond with timeouts.  </p>\n<p><code>Resolution:</code><br>增加記憶體或是減少記憶體使用量<br>Upgrade to a larger client VM size with more memory or dig into your memory usage patterns<br>to reduce memory consuption.  </p>\n<hr>\n<h3 id=\"Burst-of-traffic\"><a href=\"#Burst-of-traffic\" class=\"headerlink\" title=\"Burst of traffic\"></a><span style=\"color:red;\" id=\"burst_of_traffic\">Burst of traffic</span></h3><p><code>Problem:</code><br>ThreadPool突然大量的工作湧入queue導致執行緒來不及建立。<br> Bursts of traffic combined with poor ThreadPool settings can result in delays in processing<br> data already sent by the Redis Server but not yet consumed on the client side.  </p>\n<p><code>測量:</code><br>可以用<a href=\"https://github.com/JonCole/SampleCode/blob/master/ThreadPoolMonitor/ThreadPoolLogger.cs\" target=\"_blank\" rel=\"external\">程式</a>監控 ThreadPool .<br>或是單純透過 TimeoutException 的訊息,觀察IOCP與WORKER的Busy值來判斷.<br><code>Measurement:</code><br>Monitor how your ThreadPool statistics change over time using code like <a href=\"https://github.com/JonCole/SampleCode/blob/master/ThreadPoolMonitor/ThreadPoolLogger.cs\" target=\"_blank\" rel=\"external\">this</a>.<br>You can also look at the TimeoutException message from StackExchange.Redis.<br>Here is an example :  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.TimeoutException: Timeout performing EVAL, inst: <span class=\"number\">8</span>, mgr: Inactive, queue: <span class=\"number\">0</span>, qu: <span class=\"number\">0</span>, qs: <span class=\"number\">0</span>, qc: <span class=\"number\">0</span>, wr: <span class=\"number\">0</span>, wq: <span class=\"number\">0</span>, <span class=\"keyword\">in</span>: <span class=\"number\">64221</span>, ar: <span class=\"number\">0</span>, </div><div class=\"line\">IOCP: (Busy=<span class=\"number\">6</span>,Free=<span class=\"number\">999</span>,Min=<span class=\"number\">2</span>,Max=<span class=\"number\">1000</span>), WORKER: (Busy=<span class=\"number\">7</span>,Free=<span class=\"number\">8184</span>,Min=<span class=\"number\">2</span>,Max=<span class=\"number\">8191</span>)</div></pre></td></tr></table></figure>\n<p>In the above message, there are several issues that are interesting:<br>Notice that in the “IOCP” section and the “WORKER” section you have a “Busy” value that is<br>greater than the “Min” value. This means that your threadpool settings need adjusting.<br>You can also see “in: 64221”. This indicates that 64211 bytes have been received at the kernel<br>socket layer but haven’t yet been read by the application (e.g. StackExchange.Redis).<br>This typically means that your application isn’t reading data from the network as quickly as<br>the server is sending it to you.  </p>\n<p><code>Resolution:</code><br>調整ThreadPool設定<br>Configure your ThreadPool Settings to make sure that your threadpool will scale up quickly under burst scenarios.</p>\n<hr>\n<h3 id=\"High-CPU-usage-CPU-過載\"><a href=\"#High-CPU-usage-CPU-過載\" class=\"headerlink\" title=\"High CPU usage (CPU 過載)\"></a>High CPU usage (CPU 過載)</h3><p><code>Problem:</code><br>High CPU usage on the client is an indication that the system cannot keep up with the work that it has been asked to perform. High CPU is a problem because the CPU is busy and it can’t keep up with the work the application is asking it to do. The response from Redis can come very quickly, but because the CPU isn’t keeping up with the workload, the response sits in the socket’s kernel buffer waiting to be processed. If the delay is long enough, a timeout occurs in spite of the requested data having already arrived from the server.</p>\n<p><code>Measurement:</code><br>Monitor the System Wide CPU usage through the azure portal or through the associated perf counter.<br>Be careful not to monitor process CPU because a single process can have low CPU usage at the same time that overall system CPU can be high.<br>Watch for spikes in CPU usage that correspond with timeouts. As a result of high CPU,<br>you may also see high “in: XXX” values in TimeoutException error messages as described above in the “Burst of traffic” section.<br>Note that in newer builds of StackExchange.Redis, the client-side CPU will be printed out in the timeout error message as long as the environment doesn’t block access to the CPU perf counter.</p>\n<p><code>Note:</code><br>StackExchange.Redis version 1.1.603 or later now prints out “local-cpu” usage when a timeout occurs to help understand when client-side CPU usage may be affecting performance.</p>\n<p><code>Resolution:</code><br>增加CPU或是找出CPU產生過載的原因<br>Upgrade to a larger VM size with more CPU capacity or investigate what is causing CPU spikes.</p>\n<hr>\n<h3 id=\"Client-Side-Bandwidth-Exceeded-頻寬不足\"><a href=\"#Client-Side-Bandwidth-Exceeded-頻寬不足\" class=\"headerlink\" title=\"Client Side Bandwidth Exceeded (頻寬不足)\"></a>Client Side Bandwidth Exceeded (頻寬不足)</h3><p><code>Problem:</code><br>Different sized client machines have limitations on how much network bandwidth they have available.<br>If the client exceeds the available bandwidth, then data will not be processed on the client side as quickly as the server is sending it. This can lead to timeouts.</p>\n<p><code>Measurement:</code><br>Monitor how your Bandwidth usage change over time using code like this. Note that this code may not run successfully in some environments with restricted permissions (like Azure WebSites).</p>\n<p><code>Resolution:</code><br>加大頻寬或減少使用量<br>Increase Client VM size or reduce network bandwidth consumption.</p>\n<hr>\n<h3 id=\"Large-Request-Response-Size-過大的請求-回應量\"><a href=\"#Large-Request-Response-Size-過大的請求-回應量\" class=\"headerlink\" title=\"Large Request/Response Size (過大的請求/回應量)\"></a>Large Request/Response Size (過大的請求/回應量)</h3><p><code>Problem:</code><br>如圖所示,A與B兩個Request都太過龐大,當同時發動請求時,<br>A 回應的時間過長, 導致 B 的Timeout<br>A large request/response can cause timeouts. As an example, suppose your timeout value configured is 1 second.<br>Your application requests two keys (e.g. ‘A’ and ‘B’) at the same time using the same physical network connection.<br>Most clients support “Pipelining” of requests, such that both requests ‘A’ and ‘B’ are sent on the wire to the server one after the other without waiting for the responses.<br>The server will send the responses back in the same order. If response ‘A’ is large enough it can eat up most of the timeout for subsequent requests.</p>\n<p>Below, I will try to demonstrate this. In this scenario, Request ‘A’ and ‘B’ are sent quickly,<br>the server starts sending responses ‘A’ and ‘B’ quickly, but because of data transfer times,<br>‘B’ get stuck behind the other request and times out even though the server responded quickly.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">|-------- 1 Second Timeout (A)----------|</div><div class=\"line\">|-Request A-|</div><div class=\"line\">     |-------- 1 Second Timeout (B) ----------|</div><div class=\"line\">     |-Request B-|</div><div class=\"line\">            |- Read Response A --------|</div><div class=\"line\">                                       |- Read Response B-| (**TIMEOUT**)</div></pre></td></tr></table></figure>\n<p><code>Measurement:</code><br>This is a difficult one to measure. You basically have to instrument your client code to track large requests and responses.</p>\n<p><code>Resolution:</code><br>將所需要的資料分割成數個小片段 再分別取回<br>Redis is optimized for a large number of small values, rather than a few large values.<br>The preferred solution is to break up your data into related smaller values. See here for details around why smaller values are recommended.<br>Increase the size of your VM (for client and Redis Cache Server), to get higher bandwidth capabilities, reducing data transfer times for larger responses.<br>Note that getting more bandwidth on just the server or just on the client may not be enough.<br>Measure your bandwidth usage and compare it to the capabilities of the size of VM you currently have.<br>Increase the number of ConnectionMultiplexer objects you use and round-robin requests over different connections (e.g. use a connection pool).<br>If you go this route, make sure that you don’t create a brand new ConnectionMultiplexer for each request as the overhead of creating the new connection will kill your performance.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><em>ASP.NET Thread Pool 的機制如何影響 Redis</em></p>\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><p>線上維護的系統偶爾會發生 Redis Timeout Exception ,<br>並在 elmah 發現以下的錯誤記錄</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Timeout performing SETEX Cache:Prod:WebAPI:Key:<span class=\"number\">20161121152607</span>, inst: <span class=\"number\">18</span>, mgr: ExecuteSelect, err: never,  </div><div class=\"line\">queue: <span class=\"number\">0</span>, qu: <span class=\"number\">0</span>, qs: <span class=\"number\">0</span>, qc: <span class=\"number\">0</span>, wr: <span class=\"number\">0</span>, wq: <span class=\"number\">0</span>, <span class=\"keyword\">in</span>: <span class=\"number\">0</span>, ar: <span class=\"number\">1</span>,  </div><div class=\"line\">IOCP: (Busy=<span class=\"number\">0</span>,Free=<span class=\"number\">1000</span>,Min=<span class=\"number\">8</span>,Max=<span class=\"number\">1000</span>), WORKER: (Busy=<span class=\"number\">13</span>,Free=<span class=\"number\">32754</span>,Min=<span class=\"number\">8</span>,Max=<span class=\"number\">32767</span>), clientName: TYO-MWEB</div></pre></td></tr></table></figure>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><p>這時當 StackExchange.Redis 在進行同步作業的時候,<br>如果超過 <code>synctimeout</code> 的設定值(預設是1000ms),<br>Redis 會佔用.NET的 workerthread<br>而在 .NET 底層隱含著一個機制,<br>會導致錯誤。</p>\n<h3 id=\"Thread-Pool-500ms-的機制\"><a href=\"#Thread-Pool-500ms-的機制\" class=\"headerlink\" title=\"Thread Pool 500ms 的機制\"></a>Thread Pool 500ms 的機制</h3><p><em>一種簡化的說法「 ASP.NET Thread Pool 一秒能建立2個Thread。」</em>  </p>\n<p>設定值 <code>minworkerthread</code> 就像是遊樂場<em>已經開啟</em>的閘門,<br>每當有一個遊客(Task)進來時,立即提供給它使用。<br>但是當遊客(Task)變多的時候,就會開始排隊(Queue),<br>ASP.NET Thread Pool 隱含著一個機制,<br>當它的隊伍(Queue)長達500豪秒沒有移動的話,<br>就會開啟新的閘門(建立新的Thread)。<br>而我的情境屬於<a href=\"#burst_of_traffic\">Burst of traffic</a>,<br>突然大量 Task 湧入 Queue ,<br>ThreadPool 需要大量的 Thread<br>每個新的 Thread 都需要 500ms 的反應時間 ,<br>而累積的時間超過 Task 的 Timeout 設定值時 ,<br>就會拋出Exception. </p>\n<p><img src=\"/images/workerthread_and_iothread/110416_103521_AM.jpg\" alt=\"ASP.NET Thread Pool\"></p>\n<p>ASP.NET Thread Pool 的排隊機制與<code>minworkerthread</code> 設定值相關。<br>可以透過調整 <code>machine.config</code> 來修正。<br>參考(<a href=\"https://support.microsoft.com/zh-tw/kb/821268\" target=\"_blank\" rel=\"external\">爭用、 效能不佳、 和死結 （deadlock） 當您從 ASP.NET 應用程式呼叫 Web 服務</a>)。  </p>\n<p><code>minworkerthread</code> 的預設值是 1 。<br>但是會與執行環境的CPU個數有關,<br>假設你是四核的主機,那就要乘上 4。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">system.web</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">processModel</span> <span class=\"attr\">autoConfig</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">minWorkerThreads</span>=<span class=\"string\">\"1\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">system.web</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><p>當 Redis 發生 Timeout 時,<br>可以透過錯誤訊息判斷其背後的原因是否與 workerthread 有關。<br>在以下的例子可以看到 IOCP 與 WORKER 兩個值。<br>這兩值表示 .Net ThreadPool 內的兩種執行緒,<br>如果 Busy 值很高, 就有可能是 ThreadPool 來不及建立造成的錯誤。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.TimeoutException: Timeout performing MGET <span class=\"number\">2728</span>cc84<span class=\"number\">-58</span>ae<span class=\"number\">-406</span>b<span class=\"number\">-8</span>ec8<span class=\"number\">-3</span>f962419f641,  </div><div class=\"line\">inst: <span class=\"number\">1</span>,mgr: Inactive, queue: <span class=\"number\">73</span>, qu=<span class=\"number\">6</span>, qs=<span class=\"number\">67</span>, qc=<span class=\"number\">0</span>, wr=<span class=\"number\">1</span>/<span class=\"number\">1</span>, <span class=\"keyword\">in</span>=<span class=\"number\">0</span>/<span class=\"number\">0</span>  </div><div class=\"line\">IOCP: (Busy=<span class=\"number\">0</span>, Free=<span class=\"number\">999</span>, Min=<span class=\"number\">2</span>,Max=<span class=\"number\">1000</span>), WORKER (Busy=<span class=\"number\">7</span>,Free=<span class=\"number\">8184</span>,Min=<span class=\"number\">2</span>,Max=<span class=\"number\">8191</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"Error-Code-說明\"><a href=\"#Error-Code-說明\" class=\"headerlink\" title=\"Error Code 說明\"></a>Error Code 說明</h3><table>\n<thead>\n<tr>\n<th>Error code</th>\n<th>Details</th>\n<th>範例</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>inst</td>\n<td>in the last time slice: 0 commands have been issued</td>\n<td>在最後時脈：已發出0個命令</td>\n<td>最後的時脈發出的命令個數</td>\n</tr>\n<tr>\n<td>mgr</td>\n<td>the socket manager is performing “socket.select”, <br>which means it is asking the OS to indicate a socket <br>that has something to do; <br> basically: the reader is not actively reading from <br>the network because it doesn’t think there<br> is anything to do</td>\n<td></td>\n<td>最後的操作命令</td>\n</tr>\n<tr>\n<td>queue</td>\n<td>there are 73 total in-progress operations</td>\n<td>73個正在排隊中的操作</td>\n<td>正在排隊中的操作</td>\n</tr>\n<tr>\n<td>qu</td>\n<td>6 of those are in unsent queue: they have not yet been written to the outbound network</td>\n<td>6個未發送的queue</td>\n<td>未發送的queue</td>\n</tr>\n<tr>\n<td>qs</td>\n<td>67 of those have been sent to the server but a response is not yet available.  The response could be: Not yet sent by the server sent by the server but not yet processed by the client.</td>\n<td>67個已發送的queue</td>\n<td>已發送的queue</td>\n</tr>\n<tr>\n<td>qc</td>\n<td>0 of those have seen replies but have not yet been marked as complete due to waiting on the completion loop</td>\n<td>0個已發送未標記完成的queue</td>\n<td>已發送未標記完成的queue</td>\n</tr>\n<tr>\n<td>wr</td>\n<td>there is an active writer (meaning - those 6 unsent are not being ignored) bytes/activewriters</td>\n<td>有 1 個啟用的writer,(意味著qu的工作並沒有被忽略) bytes/activewriters</td>\n<td>bytes/activewriters</td>\n</tr>\n<tr>\n<td>in</td>\n<td>there are no active readers and zero bytes are available to be read on the NIC bytes/activereaders</td>\n<td>0個reader</td>\n<td>bytes/activereaders</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx\" target=\"_blank\" rel=\"external\">Threading</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms998549.aspx\" target=\"_blank\" rel=\"external\">Improving ASP.NET Performance</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms973903.aspx\" target=\"_blank\" rel=\"external\">Programming the Thread Pool in the .NET Framework</a></li>\n<li><a href=\"https://gist.github.com/JonCole/db0e90bedeb3fc4823c2\" target=\"_blank\" rel=\"external\">DiagnoseRedisErrors-ClientSide</a></li>\n<li><a href=\"https://gist.github.com/JonCole/e65411214030f0d823cb\" target=\"_blank\" rel=\"external\">ThreadPool</a></li>\n</ul>\n<p>(fin)</p>\n<hr>\n<h2 id=\"其它的-Redis-Error-情境\"><a href=\"#其它的-Redis-Error-情境\" class=\"headerlink\" title=\"其它的 Redis Error 情境\"></a>其它的 Redis Error 情境</h2><p>只作摘要式的翻譯。</p>\n<h3 id=\"Memory-pressure-記憶體壓力\"><a href=\"#Memory-pressure-記憶體壓力\" class=\"headerlink\" title=\"Memory pressure (記憶體壓力)\"></a>Memory pressure (記憶體壓力)</h3><p><code>Problem:</code><br>記憶體不足而開始讀取虛擬記憶體(磁碟)而導致特能低落。<br>Memory pressure on the client machine leads to all kinds of performance problems that can<br>delay processing of data that was sent by the Redis instance without any delay.<br>When memory pressure hits, the system typically has to page data from physical memory to<br>virtual memory which is on disk. This page faulting causes the system to slow down significantly.  </p>\n<p><code>Measurement:</code><br>Monitory memory usage on machine to make sure that it does not exceed available memory.<br>Monitor the Page Faults/Sec perf counter. Most systems will have some page faults even during<br>normal operation, so watch for spikes in this page faults perf counter which correspond with timeouts.  </p>\n<p><code>Resolution:</code><br>增加記憶體或是減少記憶體使用量<br>Upgrade to a larger client VM size with more memory or dig into your memory usage patterns<br>to reduce memory consuption.  </p>\n<hr>\n<h3 id=\"Burst-of-traffic\"><a href=\"#Burst-of-traffic\" class=\"headerlink\" title=\"Burst of traffic\"></a><span style=\"color:red;\" id=\"burst_of_traffic\">Burst of traffic</span></h3><p><code>Problem:</code><br>ThreadPool突然大量的工作湧入queue導致執行緒來不及建立。<br> Bursts of traffic combined with poor ThreadPool settings can result in delays in processing<br> data already sent by the Redis Server but not yet consumed on the client side.  </p>\n<p><code>測量:</code><br>可以用<a href=\"https://github.com/JonCole/SampleCode/blob/master/ThreadPoolMonitor/ThreadPoolLogger.cs\" target=\"_blank\" rel=\"external\">程式</a>監控 ThreadPool .<br>或是單純透過 TimeoutException 的訊息,觀察IOCP與WORKER的Busy值來判斷.<br><code>Measurement:</code><br>Monitor how your ThreadPool statistics change over time using code like <a href=\"https://github.com/JonCole/SampleCode/blob/master/ThreadPoolMonitor/ThreadPoolLogger.cs\" target=\"_blank\" rel=\"external\">this</a>.<br>You can also look at the TimeoutException message from StackExchange.Redis.<br>Here is an example :  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.TimeoutException: Timeout performing EVAL, inst: <span class=\"number\">8</span>, mgr: Inactive, queue: <span class=\"number\">0</span>, qu: <span class=\"number\">0</span>, qs: <span class=\"number\">0</span>, qc: <span class=\"number\">0</span>, wr: <span class=\"number\">0</span>, wq: <span class=\"number\">0</span>, <span class=\"keyword\">in</span>: <span class=\"number\">64221</span>, ar: <span class=\"number\">0</span>, </div><div class=\"line\">IOCP: (Busy=<span class=\"number\">6</span>,Free=<span class=\"number\">999</span>,Min=<span class=\"number\">2</span>,Max=<span class=\"number\">1000</span>), WORKER: (Busy=<span class=\"number\">7</span>,Free=<span class=\"number\">8184</span>,Min=<span class=\"number\">2</span>,Max=<span class=\"number\">8191</span>)</div></pre></td></tr></table></figure>\n<p>In the above message, there are several issues that are interesting:<br>Notice that in the “IOCP” section and the “WORKER” section you have a “Busy” value that is<br>greater than the “Min” value. This means that your threadpool settings need adjusting.<br>You can also see “in: 64221”. This indicates that 64211 bytes have been received at the kernel<br>socket layer but haven’t yet been read by the application (e.g. StackExchange.Redis).<br>This typically means that your application isn’t reading data from the network as quickly as<br>the server is sending it to you.  </p>\n<p><code>Resolution:</code><br>調整ThreadPool設定<br>Configure your ThreadPool Settings to make sure that your threadpool will scale up quickly under burst scenarios.</p>\n<hr>\n<h3 id=\"High-CPU-usage-CPU-過載\"><a href=\"#High-CPU-usage-CPU-過載\" class=\"headerlink\" title=\"High CPU usage (CPU 過載)\"></a>High CPU usage (CPU 過載)</h3><p><code>Problem:</code><br>High CPU usage on the client is an indication that the system cannot keep up with the work that it has been asked to perform. High CPU is a problem because the CPU is busy and it can’t keep up with the work the application is asking it to do. The response from Redis can come very quickly, but because the CPU isn’t keeping up with the workload, the response sits in the socket’s kernel buffer waiting to be processed. If the delay is long enough, a timeout occurs in spite of the requested data having already arrived from the server.</p>\n<p><code>Measurement:</code><br>Monitor the System Wide CPU usage through the azure portal or through the associated perf counter.<br>Be careful not to monitor process CPU because a single process can have low CPU usage at the same time that overall system CPU can be high.<br>Watch for spikes in CPU usage that correspond with timeouts. As a result of high CPU,<br>you may also see high “in: XXX” values in TimeoutException error messages as described above in the “Burst of traffic” section.<br>Note that in newer builds of StackExchange.Redis, the client-side CPU will be printed out in the timeout error message as long as the environment doesn’t block access to the CPU perf counter.</p>\n<p><code>Note:</code><br>StackExchange.Redis version 1.1.603 or later now prints out “local-cpu” usage when a timeout occurs to help understand when client-side CPU usage may be affecting performance.</p>\n<p><code>Resolution:</code><br>增加CPU或是找出CPU產生過載的原因<br>Upgrade to a larger VM size with more CPU capacity or investigate what is causing CPU spikes.</p>\n<hr>\n<h3 id=\"Client-Side-Bandwidth-Exceeded-頻寬不足\"><a href=\"#Client-Side-Bandwidth-Exceeded-頻寬不足\" class=\"headerlink\" title=\"Client Side Bandwidth Exceeded (頻寬不足)\"></a>Client Side Bandwidth Exceeded (頻寬不足)</h3><p><code>Problem:</code><br>Different sized client machines have limitations on how much network bandwidth they have available.<br>If the client exceeds the available bandwidth, then data will not be processed on the client side as quickly as the server is sending it. This can lead to timeouts.</p>\n<p><code>Measurement:</code><br>Monitor how your Bandwidth usage change over time using code like this. Note that this code may not run successfully in some environments with restricted permissions (like Azure WebSites).</p>\n<p><code>Resolution:</code><br>加大頻寬或減少使用量<br>Increase Client VM size or reduce network bandwidth consumption.</p>\n<hr>\n<h3 id=\"Large-Request-Response-Size-過大的請求-回應量\"><a href=\"#Large-Request-Response-Size-過大的請求-回應量\" class=\"headerlink\" title=\"Large Request/Response Size (過大的請求/回應量)\"></a>Large Request/Response Size (過大的請求/回應量)</h3><p><code>Problem:</code><br>如圖所示,A與B兩個Request都太過龐大,當同時發動請求時,<br>A 回應的時間過長, 導致 B 的Timeout<br>A large request/response can cause timeouts. As an example, suppose your timeout value configured is 1 second.<br>Your application requests two keys (e.g. ‘A’ and ‘B’) at the same time using the same physical network connection.<br>Most clients support “Pipelining” of requests, such that both requests ‘A’ and ‘B’ are sent on the wire to the server one after the other without waiting for the responses.<br>The server will send the responses back in the same order. If response ‘A’ is large enough it can eat up most of the timeout for subsequent requests.</p>\n<p>Below, I will try to demonstrate this. In this scenario, Request ‘A’ and ‘B’ are sent quickly,<br>the server starts sending responses ‘A’ and ‘B’ quickly, but because of data transfer times,<br>‘B’ get stuck behind the other request and times out even though the server responded quickly.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">|-------- 1 Second Timeout (A)----------|</div><div class=\"line\">|-Request A-|</div><div class=\"line\">     |-------- 1 Second Timeout (B) ----------|</div><div class=\"line\">     |-Request B-|</div><div class=\"line\">            |- Read Response A --------|</div><div class=\"line\">                                       |- Read Response B-| (**TIMEOUT**)</div></pre></td></tr></table></figure>\n<p><code>Measurement:</code><br>This is a difficult one to measure. You basically have to instrument your client code to track large requests and responses.</p>\n<p><code>Resolution:</code><br>將所需要的資料分割成數個小片段 再分別取回<br>Redis is optimized for a large number of small values, rather than a few large values.<br>The preferred solution is to break up your data into related smaller values. See here for details around why smaller values are recommended.<br>Increase the size of your VM (for client and Redis Cache Server), to get higher bandwidth capabilities, reducing data transfer times for larger responses.<br>Note that getting more bandwidth on just the server or just on the client may not be enough.<br>Measure your bandwidth usage and compare it to the capabilities of the size of VM you currently have.<br>Increase the number of ConnectionMultiplexer objects you use and round-robin requests over different connections (e.g. use a connection pool).<br>If you go this route, make sure that you don’t create a brand new ConnectionMultiplexer for each request as the overhead of creating the new connection will kill your performance.</p>\n"},{"title":"ASP.NET Thread Pool 監控","date":"2017-01-28T12:46:49.000Z","_content":"\n## 前情提要\n\n[上一次](/2016/11/21/aspdotnet_threadpool_and_redis/)說明了 .NET Thread Pool 的機制如何影響 Redis,  \n.NET Thread Pool 的機制會貫穿任何與它互動的系統或服務,  \n所以這篇會簡單描述如何對 .NET Thread Pool [建立監控](https://msdn.microsoft.com/zh-tw/library/ff650682.aspx)。\n\n## 步驟\n1. 建立監控記數器\n2. 在系統寫入監控數值\n3. 開啟效能計數器\n\n## 建立監控記數器\n\n|記數器|說明|\n|---|---|\n|Available Worker Threads|目前在 thread-pool 可以使用的 worker threads |\n|Available IO Threads|目前在 thread-pool 可以使用的 I/O threads |\n|Max Worker Threads| 最大可以建立的 worker threads 數量 |\n|Max IO Threads| 最大可以建立的 I/O threads 數量 |\n\n### 建立一個 Console 應用程式\n\n``` csharp\nusing System;\nusing System.Diagnostics;\n\nclass MyAspNetThreadCounters\n{\n  [STAThread]\n  static void Main(string[] args)\n  {\n    CreateCounters();\n    Console.WriteLine(\"MyAspNetThreadCounters performance counter category \" +\n                      \"is created. [Press Enter]\");\n    Console.ReadLine();\n  }\n\n  public static void CreateCounters()\n  {\n    CounterCreationDataCollection col =  \n      new CounterCreationDataCollection();\n\n    // Create custom counter objects\n    CounterCreationData counter1 = new CounterCreationData();\n    counter1.CounterName = \"Available Worker Threads\";\n    counter1.CounterHelp = \"The difference between the maximum number \" + \n                           \"of thread pool worker threads and the \" +\n                           \"number currently active.\";\n    counter1.CounterType = PerformanceCounterType.NumberOfItems32;\n\n    CounterCreationData counter2 = new CounterCreationData();\n    counter2.CounterName = \"Available IO Threads\";\n    counter2.CounterHelp = \"The difference between the maximum number of \" + \n                           \"thread pool IO threads and the number \"+ \n                           \"currently active.\";\n    counter2.CounterType = PerformanceCounterType.NumberOfItems32;\n\n    CounterCreationData counter3 = new CounterCreationData();\n    counter3.CounterName = \"Max Worker Threads\";\n    counter3.CounterHelp = \"The number of requests to the thread pool \"+ \n                           \"that can be active concurrently. All \"+  \n                           \"requests above that number remain queued until \" +\n                           \"thread pool worker threads become available.\";\n    counter3.CounterType = PerformanceCounterType.NumberOfItems32;\n\n    CounterCreationData counter4 = new CounterCreationData();\n    counter4.CounterName = \"Max IO Threads\";\n    counter4.CounterHelp = \"The number of requests to the thread pool \" + \n                           \"that can be active concurrently. All \"+  \n                           \"requests above that number remain queued until \" +\n                           \"thread pool IO threads become available.\";\n    counter4.CounterType = PerformanceCounterType.NumberOfItems32;\n\n    // Add custom counter objects to CounterCreationDataCollection.\n    col.Add(counter1);\n    col.Add(counter2);\n    col.Add(counter3);\n    col.Add(counter4);\n    // delete the category if it already exists\n    if(PerformanceCounterCategory.Exists(\"MyAspNetThreadCounters\"))\n    {\n      PerformanceCounterCategory.Delete(\"MyAspNetThreadCounters\");\n    }\n    // bind the counters to the PerformanceCounterCategory\n    PerformanceCounterCategory category = \n            PerformanceCounterCategory.Create(\"MyAspNetThreadCounters\", \n                                              \"\", col);\n  }\n}\n```\n\n編譯後並執行即可,  \n執行 `regedit` 開啟登錄編輯程式,  \n輸入機碼 `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services`  \n將可以找到剛剛建立的 `MyAspNetThreadCounters` 記數器\n\n## 在系統寫入監控數值\n\n在站台的 `Global.asax` 加入以下的程式碼\n\n```csharp\npublic bool MonitorThreadPoolEnabled = true;\n\nprotected void Application_Start(Object sender, EventArgs e)\n{\n  Thread t = new Thread(new ThreadStart(RefreshCounters));\n  t.Start();\n}\n\npublic void RefreshCounters()\n{\n  while (MonitorThreadPoolEnabled)\n  {\n    ASPNETThreadInfo t = GetThreadInfo();\n    ShowPerfCounters(t);\n    System.Threading.Thread.Sleep(500);\n  }\n}\n\nprotected void Application_End(Object sender, EventArgs e)\n{\n  MonitorThreadPoolEnabled = false;\n}\n\npublic struct ASPNETThreadInfo\n{\n  public int MaxWorkerThreads;\n  public int MaxIOThreads;\n  public int MinFreeThreads;\n  public int MinLocalRequestFreeThreads;\n  public int AvailableWorkerThreads;\n  public int AvailableIOThreads;\n\n  public bool Equals(ASPNETThreadInfo other)\n  {\n    return (\n      MaxWorkerThreads == other.MaxWorkerThreads &&\n      MaxIOThreads == other.MaxIOThreads &&\n      MinFreeThreads == other.MinFreeThreads &&\n      MinLocalRequestFreeThreads == other.MinLocalRequestFreeThreads &&\n      AvailableWorkerThreads == other.AvailableWorkerThreads &&\n      AvailableIOThreads == other.AvailableIOThreads\n    );\n  }\n}\n\npublic ASPNETThreadInfo GetThreadInfo()\n{\n  // use ThreadPool to get the current status\n  int availableWorker, availableIO;\n  int maxWorker, maxIO;\n\n  ThreadPool.GetAvailableThreads( out availableWorker, out availableIO);\n  ThreadPool.GetMaxThreads(out maxWorker, out maxIO);\n\n  ASPNETThreadInfo threadInfo;\n  threadInfo.AvailableWorkerThreads = (Int16)availableWorker;\n  threadInfo.AvailableIOThreads = (Int16)availableIO;\n  threadInfo.MaxWorkerThreads = (Int16)maxWorker;\n  threadInfo.MaxIOThreads = (Int16)maxIO;\n // hard code for now; could get this from  machine.config\n  threadInfo.MinFreeThreads = 8;\n  threadInfo.MinLocalRequestFreeThreads = 4;\n  return threadInfo;\n}\n\npublic void ShowPerfCounters(ASPNETThreadInfo t)\n{\n\n  // get an instance of our Available Worker Threads counter\n  PerformanceCounter counter1 = new PerformanceCounter();\n  counter1.CategoryName = \"MyAspNetThreadCounters\";\n  counter1.CounterName = \"Available Worker Threads\";\n  counter1.ReadOnly = false;\n\n  // set the value of the counter\n  counter1.RawValue = t.AvailableWorkerThreads;\n  counter1.Close();\n\n  // repeat for other counters\n\n  PerformanceCounter counter2 = new PerformanceCounter();\n  counter2.CategoryName = \"MyAspNetThreadCounters\";\n  counter2.CounterName = \"Available IO Threads\";\n  counter2.ReadOnly = false;\n  counter2.RawValue = t.AvailableIOThreads;\n  counter2.Close();\n\n  PerformanceCounter counter3 = new PerformanceCounter();\n  counter3.CategoryName = \"MyAspNetThreadCounters\";\n  counter3.CounterName = \"Max Worker Threads\";\n  counter3.ReadOnly = false;\n  counter3.RawValue = t.MaxWorkerThreads;\n  counter3.Close();\n\n  PerformanceCounter counter4 = new PerformanceCounter();\n  counter4.CategoryName = \"MyAspNetThreadCounters\";\n  counter4.CounterName = \"Max IO Threads\";\n  counter4.ReadOnly = false;\n  counter4.RawValue = t.MaxIOThreads;\n  counter4.Close();\n}\n```\n\n當你的站台重新啟動後,  \n就會定期將 Worker Thread 與  I/O Threads 的監控數值傳遞給系統。  \n\n### 開啟效能計數器\n\n1. 執行 `perfmon.exe` 開啟效能計數器\n2. 新增效能計數器(點選綠色加符號)\n3. 選取前面所建立監控記數器就能看到當前 ThreadPool 的使用狀況。\n![](https://i.imgur.com/HhlbNH2.jpg)\n\n(fin)","source":"_posts/aspdotnet_threadpool_monitor.md","raw":"---\ntitle: ASP.NET Thread Pool 監控\ndate: 2017/01/28 20:46:49\ntag:\n  - .Net Framework\n  - Thread\n  - ASP.Net\n---\n\n## 前情提要\n\n[上一次](/2016/11/21/aspdotnet_threadpool_and_redis/)說明了 .NET Thread Pool 的機制如何影響 Redis,  \n.NET Thread Pool 的機制會貫穿任何與它互動的系統或服務,  \n所以這篇會簡單描述如何對 .NET Thread Pool [建立監控](https://msdn.microsoft.com/zh-tw/library/ff650682.aspx)。\n\n## 步驟\n1. 建立監控記數器\n2. 在系統寫入監控數值\n3. 開啟效能計數器\n\n## 建立監控記數器\n\n|記數器|說明|\n|---|---|\n|Available Worker Threads|目前在 thread-pool 可以使用的 worker threads |\n|Available IO Threads|目前在 thread-pool 可以使用的 I/O threads |\n|Max Worker Threads| 最大可以建立的 worker threads 數量 |\n|Max IO Threads| 最大可以建立的 I/O threads 數量 |\n\n### 建立一個 Console 應用程式\n\n``` csharp\nusing System;\nusing System.Diagnostics;\n\nclass MyAspNetThreadCounters\n{\n  [STAThread]\n  static void Main(string[] args)\n  {\n    CreateCounters();\n    Console.WriteLine(\"MyAspNetThreadCounters performance counter category \" +\n                      \"is created. [Press Enter]\");\n    Console.ReadLine();\n  }\n\n  public static void CreateCounters()\n  {\n    CounterCreationDataCollection col =  \n      new CounterCreationDataCollection();\n\n    // Create custom counter objects\n    CounterCreationData counter1 = new CounterCreationData();\n    counter1.CounterName = \"Available Worker Threads\";\n    counter1.CounterHelp = \"The difference between the maximum number \" + \n                           \"of thread pool worker threads and the \" +\n                           \"number currently active.\";\n    counter1.CounterType = PerformanceCounterType.NumberOfItems32;\n\n    CounterCreationData counter2 = new CounterCreationData();\n    counter2.CounterName = \"Available IO Threads\";\n    counter2.CounterHelp = \"The difference between the maximum number of \" + \n                           \"thread pool IO threads and the number \"+ \n                           \"currently active.\";\n    counter2.CounterType = PerformanceCounterType.NumberOfItems32;\n\n    CounterCreationData counter3 = new CounterCreationData();\n    counter3.CounterName = \"Max Worker Threads\";\n    counter3.CounterHelp = \"The number of requests to the thread pool \"+ \n                           \"that can be active concurrently. All \"+  \n                           \"requests above that number remain queued until \" +\n                           \"thread pool worker threads become available.\";\n    counter3.CounterType = PerformanceCounterType.NumberOfItems32;\n\n    CounterCreationData counter4 = new CounterCreationData();\n    counter4.CounterName = \"Max IO Threads\";\n    counter4.CounterHelp = \"The number of requests to the thread pool \" + \n                           \"that can be active concurrently. All \"+  \n                           \"requests above that number remain queued until \" +\n                           \"thread pool IO threads become available.\";\n    counter4.CounterType = PerformanceCounterType.NumberOfItems32;\n\n    // Add custom counter objects to CounterCreationDataCollection.\n    col.Add(counter1);\n    col.Add(counter2);\n    col.Add(counter3);\n    col.Add(counter4);\n    // delete the category if it already exists\n    if(PerformanceCounterCategory.Exists(\"MyAspNetThreadCounters\"))\n    {\n      PerformanceCounterCategory.Delete(\"MyAspNetThreadCounters\");\n    }\n    // bind the counters to the PerformanceCounterCategory\n    PerformanceCounterCategory category = \n            PerformanceCounterCategory.Create(\"MyAspNetThreadCounters\", \n                                              \"\", col);\n  }\n}\n```\n\n編譯後並執行即可,  \n執行 `regedit` 開啟登錄編輯程式,  \n輸入機碼 `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services`  \n將可以找到剛剛建立的 `MyAspNetThreadCounters` 記數器\n\n## 在系統寫入監控數值\n\n在站台的 `Global.asax` 加入以下的程式碼\n\n```csharp\npublic bool MonitorThreadPoolEnabled = true;\n\nprotected void Application_Start(Object sender, EventArgs e)\n{\n  Thread t = new Thread(new ThreadStart(RefreshCounters));\n  t.Start();\n}\n\npublic void RefreshCounters()\n{\n  while (MonitorThreadPoolEnabled)\n  {\n    ASPNETThreadInfo t = GetThreadInfo();\n    ShowPerfCounters(t);\n    System.Threading.Thread.Sleep(500);\n  }\n}\n\nprotected void Application_End(Object sender, EventArgs e)\n{\n  MonitorThreadPoolEnabled = false;\n}\n\npublic struct ASPNETThreadInfo\n{\n  public int MaxWorkerThreads;\n  public int MaxIOThreads;\n  public int MinFreeThreads;\n  public int MinLocalRequestFreeThreads;\n  public int AvailableWorkerThreads;\n  public int AvailableIOThreads;\n\n  public bool Equals(ASPNETThreadInfo other)\n  {\n    return (\n      MaxWorkerThreads == other.MaxWorkerThreads &&\n      MaxIOThreads == other.MaxIOThreads &&\n      MinFreeThreads == other.MinFreeThreads &&\n      MinLocalRequestFreeThreads == other.MinLocalRequestFreeThreads &&\n      AvailableWorkerThreads == other.AvailableWorkerThreads &&\n      AvailableIOThreads == other.AvailableIOThreads\n    );\n  }\n}\n\npublic ASPNETThreadInfo GetThreadInfo()\n{\n  // use ThreadPool to get the current status\n  int availableWorker, availableIO;\n  int maxWorker, maxIO;\n\n  ThreadPool.GetAvailableThreads( out availableWorker, out availableIO);\n  ThreadPool.GetMaxThreads(out maxWorker, out maxIO);\n\n  ASPNETThreadInfo threadInfo;\n  threadInfo.AvailableWorkerThreads = (Int16)availableWorker;\n  threadInfo.AvailableIOThreads = (Int16)availableIO;\n  threadInfo.MaxWorkerThreads = (Int16)maxWorker;\n  threadInfo.MaxIOThreads = (Int16)maxIO;\n // hard code for now; could get this from  machine.config\n  threadInfo.MinFreeThreads = 8;\n  threadInfo.MinLocalRequestFreeThreads = 4;\n  return threadInfo;\n}\n\npublic void ShowPerfCounters(ASPNETThreadInfo t)\n{\n\n  // get an instance of our Available Worker Threads counter\n  PerformanceCounter counter1 = new PerformanceCounter();\n  counter1.CategoryName = \"MyAspNetThreadCounters\";\n  counter1.CounterName = \"Available Worker Threads\";\n  counter1.ReadOnly = false;\n\n  // set the value of the counter\n  counter1.RawValue = t.AvailableWorkerThreads;\n  counter1.Close();\n\n  // repeat for other counters\n\n  PerformanceCounter counter2 = new PerformanceCounter();\n  counter2.CategoryName = \"MyAspNetThreadCounters\";\n  counter2.CounterName = \"Available IO Threads\";\n  counter2.ReadOnly = false;\n  counter2.RawValue = t.AvailableIOThreads;\n  counter2.Close();\n\n  PerformanceCounter counter3 = new PerformanceCounter();\n  counter3.CategoryName = \"MyAspNetThreadCounters\";\n  counter3.CounterName = \"Max Worker Threads\";\n  counter3.ReadOnly = false;\n  counter3.RawValue = t.MaxWorkerThreads;\n  counter3.Close();\n\n  PerformanceCounter counter4 = new PerformanceCounter();\n  counter4.CategoryName = \"MyAspNetThreadCounters\";\n  counter4.CounterName = \"Max IO Threads\";\n  counter4.ReadOnly = false;\n  counter4.RawValue = t.MaxIOThreads;\n  counter4.Close();\n}\n```\n\n當你的站台重新啟動後,  \n就會定期將 Worker Thread 與  I/O Threads 的監控數值傳遞給系統。  \n\n### 開啟效能計數器\n\n1. 執行 `perfmon.exe` 開啟效能計數器\n2. 新增效能計數器(點選綠色加符號)\n3. 選取前面所建立監控記數器就能看到當前 ThreadPool 的使用狀況。\n![](https://i.imgur.com/HhlbNH2.jpg)\n\n(fin)","slug":"aspdotnet_threadpool_monitor","published":1,"updated":"2017-01-30T06:02:41.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivybi0005yk55zgo1o10x","content":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><p><a href=\"/2016/11/21/aspdotnet_threadpool_and_redis/\">上一次</a>說明了 .NET Thread Pool 的機制如何影響 Redis,<br>.NET Thread Pool 的機制會貫穿任何與它互動的系統或服務,<br>所以這篇會簡單描述如何對 .NET Thread Pool <a href=\"https://msdn.microsoft.com/zh-tw/library/ff650682.aspx\" target=\"_blank\" rel=\"external\">建立監控</a>。</p>\n<h2 id=\"步驟\"><a href=\"#步驟\" class=\"headerlink\" title=\"步驟\"></a>步驟</h2><ol>\n<li>建立監控記數器</li>\n<li>在系統寫入監控數值</li>\n<li>開啟效能計數器</li>\n</ol>\n<h2 id=\"建立監控記數器\"><a href=\"#建立監控記數器\" class=\"headerlink\" title=\"建立監控記數器\"></a>建立監控記數器</h2><table>\n<thead>\n<tr>\n<th>記數器</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Available Worker Threads</td>\n<td>目前在 thread-pool 可以使用的 worker threads</td>\n</tr>\n<tr>\n<td>Available IO Threads</td>\n<td>目前在 thread-pool 可以使用的 I/O threads</td>\n</tr>\n<tr>\n<td>Max Worker Threads</td>\n<td>最大可以建立的 worker threads 數量</td>\n</tr>\n<tr>\n<td>Max IO Threads</td>\n<td>最大可以建立的 I/O threads 數量</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"建立一個-Console-應用程式\"><a href=\"#建立一個-Console-應用程式\" class=\"headerlink\" title=\"建立一個 Console 應用程式\"></a>建立一個 Console 應用程式</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> System;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Diagnostics;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">MyAspNetThreadCounters</span></div><div class=\"line\">&#123;</div><div class=\"line\">  [STAThread]</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    CreateCounters();</div><div class=\"line\">    Console.WriteLine(<span class=\"string\">\"MyAspNetThreadCounters performance counter category \"</span> +</div><div class=\"line\">                      <span class=\"string\">\"is created. [Press Enter]\"</span>);</div><div class=\"line\">    Console.ReadLine();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateCounters</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    CounterCreationDataCollection col =  </div><div class=\"line\">      <span class=\"keyword\">new</span> CounterCreationDataCollection();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Create custom counter objects</span></div><div class=\"line\">    CounterCreationData counter1 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">    counter1.CounterName = <span class=\"string\">\"Available Worker Threads\"</span>;</div><div class=\"line\">    counter1.CounterHelp = <span class=\"string\">\"The difference between the maximum number \"</span> + </div><div class=\"line\">                           <span class=\"string\">\"of thread pool worker threads and the \"</span> +</div><div class=\"line\">                           <span class=\"string\">\"number currently active.\"</span>;</div><div class=\"line\">    counter1.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">    CounterCreationData counter2 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">    counter2.CounterName = <span class=\"string\">\"Available IO Threads\"</span>;</div><div class=\"line\">    counter2.CounterHelp = <span class=\"string\">\"The difference between the maximum number of \"</span> + </div><div class=\"line\">                           <span class=\"string\">\"thread pool IO threads and the number \"</span>+ </div><div class=\"line\">                           <span class=\"string\">\"currently active.\"</span>;</div><div class=\"line\">    counter2.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">    CounterCreationData counter3 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">    counter3.CounterName = <span class=\"string\">\"Max Worker Threads\"</span>;</div><div class=\"line\">    counter3.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span>+ </div><div class=\"line\">                           <span class=\"string\">\"that can be active concurrently. All \"</span>+  </div><div class=\"line\">                           <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                           <span class=\"string\">\"thread pool worker threads become available.\"</span>;</div><div class=\"line\">    counter3.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">    CounterCreationData counter4 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">    counter4.CounterName = <span class=\"string\">\"Max IO Threads\"</span>;</div><div class=\"line\">    counter4.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> + </div><div class=\"line\">                           <span class=\"string\">\"that can be active concurrently. All \"</span>+  </div><div class=\"line\">                           <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                           <span class=\"string\">\"thread pool IO threads become available.\"</span>;</div><div class=\"line\">    counter4.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Add custom counter objects to CounterCreationDataCollection.</span></div><div class=\"line\">    col.Add(counter1);</div><div class=\"line\">    col.Add(counter2);</div><div class=\"line\">    col.Add(counter3);</div><div class=\"line\">    col.Add(counter4);</div><div class=\"line\">    <span class=\"comment\">// delete the category if it already exists</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(PerformanceCounterCategory.Exists(<span class=\"string\">\"MyAspNetThreadCounters\"</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">      PerformanceCounterCategory.Delete(<span class=\"string\">\"MyAspNetThreadCounters\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// bind the counters to the PerformanceCounterCategory</span></div><div class=\"line\">    PerformanceCounterCategory category = </div><div class=\"line\">            PerformanceCounterCategory.Create(<span class=\"string\">\"MyAspNetThreadCounters\"</span>, </div><div class=\"line\">                                              <span class=\"string\">\"\"</span>, col);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>編譯後並執行即可,<br>執行 <code>regedit</code> 開啟登錄編輯程式,<br>輸入機碼 <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services</code><br>將可以找到剛剛建立的 <code>MyAspNetThreadCounters</code> 記數器</p>\n<h2 id=\"在系統寫入監控數值\"><a href=\"#在系統寫入監控數值\" class=\"headerlink\" title=\"在系統寫入監控數值\"></a>在系統寫入監控數值</h2><p>在站台的 <code>Global.asax</code> 加入以下的程式碼</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> MonitorThreadPoolEnabled = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Application_Start</span>(<span class=\"params\">Object sender, EventArgs e</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">  Thread t = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> ThreadStart(RefreshCounters));</div><div class=\"line\">  t.Start();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">RefreshCounters</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">while</span> (MonitorThreadPoolEnabled)</div><div class=\"line\">  &#123;</div><div class=\"line\">    ASPNETThreadInfo t = GetThreadInfo();</div><div class=\"line\">    ShowPerfCounters(t);</div><div class=\"line\">    System.Threading.Thread.Sleep(<span class=\"number\">500</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Application_End</span>(<span class=\"params\">Object sender, EventArgs e</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">  MonitorThreadPoolEnabled = <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> ASPNETThreadInfo</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> MaxWorkerThreads;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> MaxIOThreads;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> MinFreeThreads;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> MinLocalRequestFreeThreads;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> AvailableWorkerThreads;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> AvailableIOThreads;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">Equals</span>(<span class=\"params\">ASPNETThreadInfo other</span>)</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      MaxWorkerThreads == other.MaxWorkerThreads &amp;&amp;</div><div class=\"line\">      MaxIOThreads == other.MaxIOThreads &amp;&amp;</div><div class=\"line\">      MinFreeThreads == other.MinFreeThreads &amp;&amp;</div><div class=\"line\">      MinLocalRequestFreeThreads == other.MinLocalRequestFreeThreads &amp;&amp;</div><div class=\"line\">      AvailableWorkerThreads == other.AvailableWorkerThreads &amp;&amp;</div><div class=\"line\">      AvailableIOThreads == other.AvailableIOThreads</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ASPNETThreadInfo <span class=\"title\">GetThreadInfo</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">// use ThreadPool to get the current status</span></div><div class=\"line\">  <span class=\"keyword\">int</span> availableWorker, availableIO;</div><div class=\"line\">  <span class=\"keyword\">int</span> maxWorker, maxIO;</div><div class=\"line\"></div><div class=\"line\">  ThreadPool.GetAvailableThreads( <span class=\"keyword\">out</span> availableWorker, <span class=\"keyword\">out</span> availableIO);</div><div class=\"line\">  ThreadPool.GetMaxThreads(<span class=\"keyword\">out</span> maxWorker, <span class=\"keyword\">out</span> maxIO);</div><div class=\"line\"></div><div class=\"line\">  ASPNETThreadInfo threadInfo;</div><div class=\"line\">  threadInfo.AvailableWorkerThreads = (Int16)availableWorker;</div><div class=\"line\">  threadInfo.AvailableIOThreads = (Int16)availableIO;</div><div class=\"line\">  threadInfo.MaxWorkerThreads = (Int16)maxWorker;</div><div class=\"line\">  threadInfo.MaxIOThreads = (Int16)maxIO;</div><div class=\"line\"> <span class=\"comment\">// hard code for now; could get this from  machine.config</span></div><div class=\"line\">  threadInfo.MinFreeThreads = <span class=\"number\">8</span>;</div><div class=\"line\">  threadInfo.MinLocalRequestFreeThreads = <span class=\"number\">4</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> threadInfo;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ShowPerfCounters</span>(<span class=\"params\">ASPNETThreadInfo t</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// get an instance of our Available Worker Threads counter</span></div><div class=\"line\">  PerformanceCounter counter1 = <span class=\"keyword\">new</span> PerformanceCounter();</div><div class=\"line\">  counter1.CategoryName = <span class=\"string\">\"MyAspNetThreadCounters\"</span>;</div><div class=\"line\">  counter1.CounterName = <span class=\"string\">\"Available Worker Threads\"</span>;</div><div class=\"line\">  counter1.ReadOnly = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// set the value of the counter</span></div><div class=\"line\">  counter1.RawValue = t.AvailableWorkerThreads;</div><div class=\"line\">  counter1.Close();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// repeat for other counters</span></div><div class=\"line\"></div><div class=\"line\">  PerformanceCounter counter2 = <span class=\"keyword\">new</span> PerformanceCounter();</div><div class=\"line\">  counter2.CategoryName = <span class=\"string\">\"MyAspNetThreadCounters\"</span>;</div><div class=\"line\">  counter2.CounterName = <span class=\"string\">\"Available IO Threads\"</span>;</div><div class=\"line\">  counter2.ReadOnly = <span class=\"literal\">false</span>;</div><div class=\"line\">  counter2.RawValue = t.AvailableIOThreads;</div><div class=\"line\">  counter2.Close();</div><div class=\"line\"></div><div class=\"line\">  PerformanceCounter counter3 = <span class=\"keyword\">new</span> PerformanceCounter();</div><div class=\"line\">  counter3.CategoryName = <span class=\"string\">\"MyAspNetThreadCounters\"</span>;</div><div class=\"line\">  counter3.CounterName = <span class=\"string\">\"Max Worker Threads\"</span>;</div><div class=\"line\">  counter3.ReadOnly = <span class=\"literal\">false</span>;</div><div class=\"line\">  counter3.RawValue = t.MaxWorkerThreads;</div><div class=\"line\">  counter3.Close();</div><div class=\"line\"></div><div class=\"line\">  PerformanceCounter counter4 = <span class=\"keyword\">new</span> PerformanceCounter();</div><div class=\"line\">  counter4.CategoryName = <span class=\"string\">\"MyAspNetThreadCounters\"</span>;</div><div class=\"line\">  counter4.CounterName = <span class=\"string\">\"Max IO Threads\"</span>;</div><div class=\"line\">  counter4.ReadOnly = <span class=\"literal\">false</span>;</div><div class=\"line\">  counter4.RawValue = t.MaxIOThreads;</div><div class=\"line\">  counter4.Close();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>當你的站台重新啟動後,<br>就會定期將 Worker Thread 與  I/O Threads 的監控數值傳遞給系統。  </p>\n<h3 id=\"開啟效能計數器\"><a href=\"#開啟效能計數器\" class=\"headerlink\" title=\"開啟效能計數器\"></a>開啟效能計數器</h3><ol>\n<li>執行 <code>perfmon.exe</code> 開啟效能計數器</li>\n<li>新增效能計數器(點選綠色加符號)</li>\n<li>選取前面所建立監控記數器就能看到當前 ThreadPool 的使用狀況。<br><img src=\"https://i.imgur.com/HhlbNH2.jpg\" alt=\"\"></li>\n</ol>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><p><a href=\"/2016/11/21/aspdotnet_threadpool_and_redis/\">上一次</a>說明了 .NET Thread Pool 的機制如何影響 Redis,<br>.NET Thread Pool 的機制會貫穿任何與它互動的系統或服務,<br>所以這篇會簡單描述如何對 .NET Thread Pool <a href=\"https://msdn.microsoft.com/zh-tw/library/ff650682.aspx\" target=\"_blank\" rel=\"external\">建立監控</a>。</p>\n<h2 id=\"步驟\"><a href=\"#步驟\" class=\"headerlink\" title=\"步驟\"></a>步驟</h2><ol>\n<li>建立監控記數器</li>\n<li>在系統寫入監控數值</li>\n<li>開啟效能計數器</li>\n</ol>\n<h2 id=\"建立監控記數器\"><a href=\"#建立監控記數器\" class=\"headerlink\" title=\"建立監控記數器\"></a>建立監控記數器</h2><table>\n<thead>\n<tr>\n<th>記數器</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Available Worker Threads</td>\n<td>目前在 thread-pool 可以使用的 worker threads</td>\n</tr>\n<tr>\n<td>Available IO Threads</td>\n<td>目前在 thread-pool 可以使用的 I/O threads</td>\n</tr>\n<tr>\n<td>Max Worker Threads</td>\n<td>最大可以建立的 worker threads 數量</td>\n</tr>\n<tr>\n<td>Max IO Threads</td>\n<td>最大可以建立的 I/O threads 數量</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"建立一個-Console-應用程式\"><a href=\"#建立一個-Console-應用程式\" class=\"headerlink\" title=\"建立一個 Console 應用程式\"></a>建立一個 Console 應用程式</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> System;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Diagnostics;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">MyAspNetThreadCounters</span></div><div class=\"line\">&#123;</div><div class=\"line\">  [STAThread]</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    CreateCounters();</div><div class=\"line\">    Console.WriteLine(<span class=\"string\">\"MyAspNetThreadCounters performance counter category \"</span> +</div><div class=\"line\">                      <span class=\"string\">\"is created. [Press Enter]\"</span>);</div><div class=\"line\">    Console.ReadLine();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateCounters</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    CounterCreationDataCollection col =  </div><div class=\"line\">      <span class=\"keyword\">new</span> CounterCreationDataCollection();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Create custom counter objects</span></div><div class=\"line\">    CounterCreationData counter1 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">    counter1.CounterName = <span class=\"string\">\"Available Worker Threads\"</span>;</div><div class=\"line\">    counter1.CounterHelp = <span class=\"string\">\"The difference between the maximum number \"</span> + </div><div class=\"line\">                           <span class=\"string\">\"of thread pool worker threads and the \"</span> +</div><div class=\"line\">                           <span class=\"string\">\"number currently active.\"</span>;</div><div class=\"line\">    counter1.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">    CounterCreationData counter2 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">    counter2.CounterName = <span class=\"string\">\"Available IO Threads\"</span>;</div><div class=\"line\">    counter2.CounterHelp = <span class=\"string\">\"The difference between the maximum number of \"</span> + </div><div class=\"line\">                           <span class=\"string\">\"thread pool IO threads and the number \"</span>+ </div><div class=\"line\">                           <span class=\"string\">\"currently active.\"</span>;</div><div class=\"line\">    counter2.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">    CounterCreationData counter3 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">    counter3.CounterName = <span class=\"string\">\"Max Worker Threads\"</span>;</div><div class=\"line\">    counter3.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span>+ </div><div class=\"line\">                           <span class=\"string\">\"that can be active concurrently. All \"</span>+  </div><div class=\"line\">                           <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                           <span class=\"string\">\"thread pool worker threads become available.\"</span>;</div><div class=\"line\">    counter3.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">    CounterCreationData counter4 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">    counter4.CounterName = <span class=\"string\">\"Max IO Threads\"</span>;</div><div class=\"line\">    counter4.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> + </div><div class=\"line\">                           <span class=\"string\">\"that can be active concurrently. All \"</span>+  </div><div class=\"line\">                           <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                           <span class=\"string\">\"thread pool IO threads become available.\"</span>;</div><div class=\"line\">    counter4.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Add custom counter objects to CounterCreationDataCollection.</span></div><div class=\"line\">    col.Add(counter1);</div><div class=\"line\">    col.Add(counter2);</div><div class=\"line\">    col.Add(counter3);</div><div class=\"line\">    col.Add(counter4);</div><div class=\"line\">    <span class=\"comment\">// delete the category if it already exists</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(PerformanceCounterCategory.Exists(<span class=\"string\">\"MyAspNetThreadCounters\"</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">      PerformanceCounterCategory.Delete(<span class=\"string\">\"MyAspNetThreadCounters\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// bind the counters to the PerformanceCounterCategory</span></div><div class=\"line\">    PerformanceCounterCategory category = </div><div class=\"line\">            PerformanceCounterCategory.Create(<span class=\"string\">\"MyAspNetThreadCounters\"</span>, </div><div class=\"line\">                                              <span class=\"string\">\"\"</span>, col);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>編譯後並執行即可,<br>執行 <code>regedit</code> 開啟登錄編輯程式,<br>輸入機碼 <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services</code><br>將可以找到剛剛建立的 <code>MyAspNetThreadCounters</code> 記數器</p>\n<h2 id=\"在系統寫入監控數值\"><a href=\"#在系統寫入監控數值\" class=\"headerlink\" title=\"在系統寫入監控數值\"></a>在系統寫入監控數值</h2><p>在站台的 <code>Global.asax</code> 加入以下的程式碼</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> MonitorThreadPoolEnabled = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Application_Start</span>(<span class=\"params\">Object sender, EventArgs e</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">  Thread t = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> ThreadStart(RefreshCounters));</div><div class=\"line\">  t.Start();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">RefreshCounters</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">while</span> (MonitorThreadPoolEnabled)</div><div class=\"line\">  &#123;</div><div class=\"line\">    ASPNETThreadInfo t = GetThreadInfo();</div><div class=\"line\">    ShowPerfCounters(t);</div><div class=\"line\">    System.Threading.Thread.Sleep(<span class=\"number\">500</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Application_End</span>(<span class=\"params\">Object sender, EventArgs e</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">  MonitorThreadPoolEnabled = <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> ASPNETThreadInfo</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> MaxWorkerThreads;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> MaxIOThreads;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> MinFreeThreads;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> MinLocalRequestFreeThreads;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> AvailableWorkerThreads;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> AvailableIOThreads;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">Equals</span>(<span class=\"params\">ASPNETThreadInfo other</span>)</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      MaxWorkerThreads == other.MaxWorkerThreads &amp;&amp;</div><div class=\"line\">      MaxIOThreads == other.MaxIOThreads &amp;&amp;</div><div class=\"line\">      MinFreeThreads == other.MinFreeThreads &amp;&amp;</div><div class=\"line\">      MinLocalRequestFreeThreads == other.MinLocalRequestFreeThreads &amp;&amp;</div><div class=\"line\">      AvailableWorkerThreads == other.AvailableWorkerThreads &amp;&amp;</div><div class=\"line\">      AvailableIOThreads == other.AvailableIOThreads</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ASPNETThreadInfo <span class=\"title\">GetThreadInfo</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">// use ThreadPool to get the current status</span></div><div class=\"line\">  <span class=\"keyword\">int</span> availableWorker, availableIO;</div><div class=\"line\">  <span class=\"keyword\">int</span> maxWorker, maxIO;</div><div class=\"line\"></div><div class=\"line\">  ThreadPool.GetAvailableThreads( <span class=\"keyword\">out</span> availableWorker, <span class=\"keyword\">out</span> availableIO);</div><div class=\"line\">  ThreadPool.GetMaxThreads(<span class=\"keyword\">out</span> maxWorker, <span class=\"keyword\">out</span> maxIO);</div><div class=\"line\"></div><div class=\"line\">  ASPNETThreadInfo threadInfo;</div><div class=\"line\">  threadInfo.AvailableWorkerThreads = (Int16)availableWorker;</div><div class=\"line\">  threadInfo.AvailableIOThreads = (Int16)availableIO;</div><div class=\"line\">  threadInfo.MaxWorkerThreads = (Int16)maxWorker;</div><div class=\"line\">  threadInfo.MaxIOThreads = (Int16)maxIO;</div><div class=\"line\"> <span class=\"comment\">// hard code for now; could get this from  machine.config</span></div><div class=\"line\">  threadInfo.MinFreeThreads = <span class=\"number\">8</span>;</div><div class=\"line\">  threadInfo.MinLocalRequestFreeThreads = <span class=\"number\">4</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> threadInfo;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ShowPerfCounters</span>(<span class=\"params\">ASPNETThreadInfo t</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// get an instance of our Available Worker Threads counter</span></div><div class=\"line\">  PerformanceCounter counter1 = <span class=\"keyword\">new</span> PerformanceCounter();</div><div class=\"line\">  counter1.CategoryName = <span class=\"string\">\"MyAspNetThreadCounters\"</span>;</div><div class=\"line\">  counter1.CounterName = <span class=\"string\">\"Available Worker Threads\"</span>;</div><div class=\"line\">  counter1.ReadOnly = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// set the value of the counter</span></div><div class=\"line\">  counter1.RawValue = t.AvailableWorkerThreads;</div><div class=\"line\">  counter1.Close();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// repeat for other counters</span></div><div class=\"line\"></div><div class=\"line\">  PerformanceCounter counter2 = <span class=\"keyword\">new</span> PerformanceCounter();</div><div class=\"line\">  counter2.CategoryName = <span class=\"string\">\"MyAspNetThreadCounters\"</span>;</div><div class=\"line\">  counter2.CounterName = <span class=\"string\">\"Available IO Threads\"</span>;</div><div class=\"line\">  counter2.ReadOnly = <span class=\"literal\">false</span>;</div><div class=\"line\">  counter2.RawValue = t.AvailableIOThreads;</div><div class=\"line\">  counter2.Close();</div><div class=\"line\"></div><div class=\"line\">  PerformanceCounter counter3 = <span class=\"keyword\">new</span> PerformanceCounter();</div><div class=\"line\">  counter3.CategoryName = <span class=\"string\">\"MyAspNetThreadCounters\"</span>;</div><div class=\"line\">  counter3.CounterName = <span class=\"string\">\"Max Worker Threads\"</span>;</div><div class=\"line\">  counter3.ReadOnly = <span class=\"literal\">false</span>;</div><div class=\"line\">  counter3.RawValue = t.MaxWorkerThreads;</div><div class=\"line\">  counter3.Close();</div><div class=\"line\"></div><div class=\"line\">  PerformanceCounter counter4 = <span class=\"keyword\">new</span> PerformanceCounter();</div><div class=\"line\">  counter4.CategoryName = <span class=\"string\">\"MyAspNetThreadCounters\"</span>;</div><div class=\"line\">  counter4.CounterName = <span class=\"string\">\"Max IO Threads\"</span>;</div><div class=\"line\">  counter4.ReadOnly = <span class=\"literal\">false</span>;</div><div class=\"line\">  counter4.RawValue = t.MaxIOThreads;</div><div class=\"line\">  counter4.Close();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>當你的站台重新啟動後,<br>就會定期將 Worker Thread 與  I/O Threads 的監控數值傳遞給系統。  </p>\n<h3 id=\"開啟效能計數器\"><a href=\"#開啟效能計數器\" class=\"headerlink\" title=\"開啟效能計數器\"></a>開啟效能計數器</h3><ol>\n<li>執行 <code>perfmon.exe</code> 開啟效能計數器</li>\n<li>新增效能計數器(點選綠色加符號)</li>\n<li>選取前面所建立監控記數器就能看到當前 ThreadPool 的使用狀況。<br><img src=\"https://i.imgur.com/HhlbNH2.jpg\" alt=\"\"></li>\n</ol>\n<p>(fin)</p>\n"},{"title":"自動化 Trello 操作","date":"2017-02-08T15:52:27.000Z","_content":"\nTrello 是一個非常方便的工作管理工具, \n最主要的功能只有 Boards 、 Lists 與 Cards,\n確可以發揮相當大的綜效功能,  \n用來當作敏捷開發的白板、安排工作項目與進度,\n作為協作的平台與工具。\n也有相當多元的外掛可以供不同的情境使用,\n開發人員也可以自行串接API與系統作整合。\n簡單記錄自動化產生 Cards 的兩種方法。\n\n## 第一種方法,使用mail\n\n1. 開啟 Menu > More\n2. 點選 Email-to-board Settings\n3. 選擇你要產生卡片的 List 與 位置(頂部或底部)\n\n![](https://i.imgur.com/PqDLtdO.gif)\n\n4. 寄信，信件格式如下\n\t- email 的 subject 會成為卡片的標題\n\t- email 的內容會成為卡片的描述\n\t- 如果有附加檔案在郵件中，會附加到卡片中\n\t- 在 subject 加入 `#label` 可以在卡片加入標籤(Labels)\n\t- 在 subject 加入 `@member` 可以在卡片加入成員(Members)\n\n\n更多請[參考](http://help.trello.com/article/809-creating-cards-by-email). \n\n## 第二種方法,使用API\n1. 登入 Trello\n2. 連線 https://developers.trello.com\n點選`Get your Application Key`. 連線到 https://trello.com/app-key\n\n### 取得Key\n![](https://i.imgur.com/bBoiUCr.jpg)\n\n### 生成Token\n\n![](https://i.imgur.com/gHsdYv8.jpg)\n\n\n![](https://i.imgur.com/bSXkChk.jpg)\n點選allow後，就會顯示你的token，特別注意登入的身份權限，\n並且千萬不要外洩你的token與key值。\n\n試打API,建立一張 Card 到指定的 List 中.\n並且設定期限(due)與標籤(labels),\n更多的API設定請[參考](https://developers.trello.com/advanced-reference).\n![](https://i.imgur.com/yk6SZYm.jpg)\n\n## 分析\n- Email:\n\t- 優點:簡單、方便、可以結合mail system 、附加檔案簡單\n\t- 缺點:部份功能無法實現(ex: 設定due date)\n- API:\n\t- 優點:靈活、Resful的API可以實現大部份的功能\n\t- 缺點:實作比較麻煩\n\n(fin)\t\n\n","source":"_posts/auto_add_trello_card.md","raw":"---\ntitle: 自動化 Trello 操作\ndate: 2017/02/08 23:52:27 \ntag:\n  - Trello\n---\n\nTrello 是一個非常方便的工作管理工具, \n最主要的功能只有 Boards 、 Lists 與 Cards,\n確可以發揮相當大的綜效功能,  \n用來當作敏捷開發的白板、安排工作項目與進度,\n作為協作的平台與工具。\n也有相當多元的外掛可以供不同的情境使用,\n開發人員也可以自行串接API與系統作整合。\n簡單記錄自動化產生 Cards 的兩種方法。\n\n## 第一種方法,使用mail\n\n1. 開啟 Menu > More\n2. 點選 Email-to-board Settings\n3. 選擇你要產生卡片的 List 與 位置(頂部或底部)\n\n![](https://i.imgur.com/PqDLtdO.gif)\n\n4. 寄信，信件格式如下\n\t- email 的 subject 會成為卡片的標題\n\t- email 的內容會成為卡片的描述\n\t- 如果有附加檔案在郵件中，會附加到卡片中\n\t- 在 subject 加入 `#label` 可以在卡片加入標籤(Labels)\n\t- 在 subject 加入 `@member` 可以在卡片加入成員(Members)\n\n\n更多請[參考](http://help.trello.com/article/809-creating-cards-by-email). \n\n## 第二種方法,使用API\n1. 登入 Trello\n2. 連線 https://developers.trello.com\n點選`Get your Application Key`. 連線到 https://trello.com/app-key\n\n### 取得Key\n![](https://i.imgur.com/bBoiUCr.jpg)\n\n### 生成Token\n\n![](https://i.imgur.com/gHsdYv8.jpg)\n\n\n![](https://i.imgur.com/bSXkChk.jpg)\n點選allow後，就會顯示你的token，特別注意登入的身份權限，\n並且千萬不要外洩你的token與key值。\n\n試打API,建立一張 Card 到指定的 List 中.\n並且設定期限(due)與標籤(labels),\n更多的API設定請[參考](https://developers.trello.com/advanced-reference).\n![](https://i.imgur.com/yk6SZYm.jpg)\n\n## 分析\n- Email:\n\t- 優點:簡單、方便、可以結合mail system 、附加檔案簡單\n\t- 缺點:部份功能無法實現(ex: 設定due date)\n- API:\n\t- 優點:靈活、Resful的API可以實現大部份的功能\n\t- 缺點:實作比較麻煩\n\n(fin)\t\n\n","slug":"auto_add_trello_card","published":1,"updated":"2017-04-29T05:18:22.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivybn0007yk55qingrdv8","content":"<p>Trello 是一個非常方便的工作管理工具,<br>最主要的功能只有 Boards 、 Lists 與 Cards,<br>確可以發揮相當大的綜效功能,<br>用來當作敏捷開發的白板、安排工作項目與進度,<br>作為協作的平台與工具。<br>也有相當多元的外掛可以供不同的情境使用,<br>開發人員也可以自行串接API與系統作整合。<br>簡單記錄自動化產生 Cards 的兩種方法。</p>\n<h2 id=\"第一種方法-使用mail\"><a href=\"#第一種方法-使用mail\" class=\"headerlink\" title=\"第一種方法,使用mail\"></a>第一種方法,使用mail</h2><ol>\n<li>開啟 Menu &gt; More</li>\n<li>點選 Email-to-board Settings</li>\n<li>選擇你要產生卡片的 List 與 位置(頂部或底部)</li>\n</ol>\n<p><img src=\"https://i.imgur.com/PqDLtdO.gif\" alt=\"\"></p>\n<ol>\n<li>寄信，信件格式如下<ul>\n<li>email 的 subject 會成為卡片的標題</li>\n<li>email 的內容會成為卡片的描述</li>\n<li>如果有附加檔案在郵件中，會附加到卡片中</li>\n<li>在 subject 加入 <code>#label</code> 可以在卡片加入標籤(Labels)</li>\n<li>在 subject 加入 <code>@member</code> 可以在卡片加入成員(Members)</li>\n</ul>\n</li>\n</ol>\n<p>更多請<a href=\"http://help.trello.com/article/809-creating-cards-by-email\" target=\"_blank\" rel=\"external\">參考</a>. </p>\n<h2 id=\"第二種方法-使用API\"><a href=\"#第二種方法-使用API\" class=\"headerlink\" title=\"第二種方法,使用API\"></a>第二種方法,使用API</h2><ol>\n<li>登入 Trello</li>\n<li>連線 <a href=\"https://developers.trello.com\" target=\"_blank\" rel=\"external\">https://developers.trello.com</a><br>點選<code>Get your Application Key</code>. 連線到 <a href=\"https://trello.com/app-key\" target=\"_blank\" rel=\"external\">https://trello.com/app-key</a></li>\n</ol>\n<h3 id=\"取得Key\"><a href=\"#取得Key\" class=\"headerlink\" title=\"取得Key\"></a>取得Key</h3><p><img src=\"https://i.imgur.com/bBoiUCr.jpg\" alt=\"\"></p>\n<h3 id=\"生成Token\"><a href=\"#生成Token\" class=\"headerlink\" title=\"生成Token\"></a>生成Token</h3><p><img src=\"https://i.imgur.com/gHsdYv8.jpg\" alt=\"\"></p>\n<p><img src=\"https://i.imgur.com/bSXkChk.jpg\" alt=\"\"><br>點選allow後，就會顯示你的token，特別注意登入的身份權限，<br>並且千萬不要外洩你的token與key值。</p>\n<p>試打API,建立一張 Card 到指定的 List 中.<br>並且設定期限(due)與標籤(labels),<br>更多的API設定請<a href=\"https://developers.trello.com/advanced-reference\" target=\"_blank\" rel=\"external\">參考</a>.<br><img src=\"https://i.imgur.com/yk6SZYm.jpg\" alt=\"\"></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>Email:<ul>\n<li>優點:簡單、方便、可以結合mail system 、附加檔案簡單</li>\n<li>缺點:部份功能無法實現(ex: 設定due date)</li>\n</ul>\n</li>\n<li>API:<ul>\n<li>優點:靈活、Resful的API可以實現大部份的功能</li>\n<li>缺點:實作比較麻煩</li>\n</ul>\n</li>\n</ul>\n<p>(fin)    </p>\n","site":{"data":{}},"excerpt":"","more":"<p>Trello 是一個非常方便的工作管理工具,<br>最主要的功能只有 Boards 、 Lists 與 Cards,<br>確可以發揮相當大的綜效功能,<br>用來當作敏捷開發的白板、安排工作項目與進度,<br>作為協作的平台與工具。<br>也有相當多元的外掛可以供不同的情境使用,<br>開發人員也可以自行串接API與系統作整合。<br>簡單記錄自動化產生 Cards 的兩種方法。</p>\n<h2 id=\"第一種方法-使用mail\"><a href=\"#第一種方法-使用mail\" class=\"headerlink\" title=\"第一種方法,使用mail\"></a>第一種方法,使用mail</h2><ol>\n<li>開啟 Menu &gt; More</li>\n<li>點選 Email-to-board Settings</li>\n<li>選擇你要產生卡片的 List 與 位置(頂部或底部)</li>\n</ol>\n<p><img src=\"https://i.imgur.com/PqDLtdO.gif\" alt=\"\"></p>\n<ol>\n<li>寄信，信件格式如下<ul>\n<li>email 的 subject 會成為卡片的標題</li>\n<li>email 的內容會成為卡片的描述</li>\n<li>如果有附加檔案在郵件中，會附加到卡片中</li>\n<li>在 subject 加入 <code>#label</code> 可以在卡片加入標籤(Labels)</li>\n<li>在 subject 加入 <code>@member</code> 可以在卡片加入成員(Members)</li>\n</ul>\n</li>\n</ol>\n<p>更多請<a href=\"http://help.trello.com/article/809-creating-cards-by-email\" target=\"_blank\" rel=\"external\">參考</a>. </p>\n<h2 id=\"第二種方法-使用API\"><a href=\"#第二種方法-使用API\" class=\"headerlink\" title=\"第二種方法,使用API\"></a>第二種方法,使用API</h2><ol>\n<li>登入 Trello</li>\n<li>連線 <a href=\"https://developers.trello.com\" target=\"_blank\" rel=\"external\">https://developers.trello.com</a><br>點選<code>Get your Application Key</code>. 連線到 <a href=\"https://trello.com/app-key\" target=\"_blank\" rel=\"external\">https://trello.com/app-key</a></li>\n</ol>\n<h3 id=\"取得Key\"><a href=\"#取得Key\" class=\"headerlink\" title=\"取得Key\"></a>取得Key</h3><p><img src=\"https://i.imgur.com/bBoiUCr.jpg\" alt=\"\"></p>\n<h3 id=\"生成Token\"><a href=\"#生成Token\" class=\"headerlink\" title=\"生成Token\"></a>生成Token</h3><p><img src=\"https://i.imgur.com/gHsdYv8.jpg\" alt=\"\"></p>\n<p><img src=\"https://i.imgur.com/bSXkChk.jpg\" alt=\"\"><br>點選allow後，就會顯示你的token，特別注意登入的身份權限，<br>並且千萬不要外洩你的token與key值。</p>\n<p>試打API,建立一張 Card 到指定的 List 中.<br>並且設定期限(due)與標籤(labels),<br>更多的API設定請<a href=\"https://developers.trello.com/advanced-reference\" target=\"_blank\" rel=\"external\">參考</a>.<br><img src=\"https://i.imgur.com/yk6SZYm.jpg\" alt=\"\"></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>Email:<ul>\n<li>優點:簡單、方便、可以結合mail system 、附加檔案簡單</li>\n<li>缺點:部份功能無法實現(ex: 設定due date)</li>\n</ul>\n</li>\n<li>API:<ul>\n<li>優點:靈活、Resful的API可以實現大部份的功能</li>\n<li>缺點:實作比較麻煩</li>\n</ul>\n</li>\n</ul>\n<p>(fin)    </p>\n"},{"title":"[閱讀筆記]把時間當作朋友","date":"2016-12-04T17:54:34.000Z","_content":"\n\n\n## 零、困境\n*✖ 時間無法管理 能管理的只有你自已。*\n## 一、醒悟\n- *✖ 用思考控制思考*\n- *✖ 心智:就是心靈的智慧，用理性處理感性，控制情緒與慾望。*\n- *✖ 人會在相同的情況下作出完全相反的結論*\n  \n> ...歷史上也常常出現這種情況——其實目的都是“為了人類更好的明天”，可偏偏出現了對立的兩派人，\n他們為了原本一模一樣的理想爭執不休，甚至“拋頭顱”、“撒熱血”，犧牲幾代人的福祉。  \n>> 比如，所謂“水火不相容”的“社會主義陣營”和“資本主義陣營”。\n\n\n> 看穿這一切，擺脫自己的局限，需要心智的力量。\n  \n\n## 二、現實\n- 速成絕無可能\n- 交換才是硬道理\n- 完美永不存在\n- 未知永遠存在\n> 未知分為兩種：一種是永遠不能解決的，另一種是在可預見的未來也許能夠解決的。\n\n*✖ 吾生也有涯，而知也無涯。以有涯隨無涯，殆已！已而為知者，殆而已矣！…指窮於為薪，火傳也，不知其盡也。--莊子。養生主*\n\n*✖ 站在巨人的肩膀上*\n\n- 現狀無法馬上擺脫\n\n{% blockquote %}\n接受現狀才是最優策略——有什麼做什麼，有什麼用什麼；做什麼都做好，用什麼都用好。\n不要常常覺得苦（這會讓人忍不住顧影自憐，浪費精力與時間），而要想辦法在任何情況下找到情趣——\n——**快樂是一種本事**。\n{% endblockquote %} \n\n{% blockquote %}\n心懷“夢想”的時間越長，它的沉沒成本就越高。\n{% endblockquote %} \n\n*✖ 積沙成塔，滴水穿石，時間可以累積，也可以消耗。*\n\n- 與時間做朋友\n\n{% blockquote %}\n與時間做朋友的方法很簡單：用正確的方法做正確的事情。\n{% endblockquote %}\n\n{% blockquote %}\n儘管現實總是如此難於接受，堅強的你卻應該坦然。以上提到的種種現實，包括“速成絕無可能”、“只有付出才有收穫”、“完美永不存在”、“未知永遠存在”、“現狀無法馬上擺脫”，都既清楚又簡單，你必須要接受——不僅要接受，還要牢記；不僅要牢記，還要堅信，不容半點動搖。最好時常把自己的一些念頭記下來，然後與這幾條現實對照，看看它們是否與這些現實相符。\n{% endblockquote %} \n\n{% blockquote %}\n時間是現實的人的朋友，是不現實的人的敵人。時間不是故意要這樣做，只不過事實如此。\n{% endblockquote %} \n\n*✖ 正確的事，正確的做 ; 首先要學會判斷什麼是正確的事。*\n\n## 三、管理\n-  估算時間\n\n{% blockquote %}\n分辨任務的屬性——它是熟悉的還是陌生的呢?\n{% endblockquote %}\n\n{% blockquote %}\n對學習來說，任務“陌生”的可能性更大，因為學習本身是一個探索未知的過程。完成學習任務常常需要花費比我們想像中多得多的時間。對工作來說，任務“熟悉”的可能性更大。因為工作本身是一個應用已知的過程。\n{% endblockquote %}\n\n\n*✖ 軟體工作的這個行業，很有可能是大多數是未知的情況。*\n \n- 及時行動\n\n{% blockquote %}\n接受任務之後，什麼時候開始執行才好呢？比“越早開始越好”更切實的答案是“現在就開始”。\n{% endblockquote %}\n\n*✖ ASAP 不是一個好答案 NOW 才是。*\n\n*✖ 不求有功，但求無過是種慢性自殺，滴水穿石---會消磨掉你的累積。*\n\n- 直面困難\n\n> 效率低下的根本原因是什麼？答案是：迴避困難。\n> ……\n> ……這些問題都源自同一個習慣：專做簡單的，迴避困難的。\n\n- 關注步驟\n\n{% blockquote %}\n所謂“三思而行”在我看來就是指做任何事情之前都要考慮相關的3個方面：內容（What）、原因（Why）、方法（How）。任何任務都起碼具備3個屬性：何事（What）、何因（Why）、何法（How）。\n{% endblockquote %}\n\n{% blockquote %}\n不停地細分、拆解任務，而且越具體越好，直至每個小任務都可以由一個人獨立完成。\n{% endblockquote %}\n\n例子\n> 擴充詞彙量→托福詞彙→托福核心詞彙→21個單元→每個單元大約100 個單詞→一個單元分2次完成……\n> ▷ 先嘗試做一兩個階段，測量一下完成一個階段需要多長時間。\n▷ 按照測量的結果製作一個時間表，把其餘若干個階段所需要的時間填寫完整（最終總是需要做一些調整的）。\n▷ 背單詞需要重複，所以，每3個階段過後要留出與完成1個階段相等的時間去複習。這就意味著一共需要花費完成56（42+14）個階段的時間。\n▷ 每完成總任務的1/3，就增加與完成1個階段相等的再复習時間。這就意味著一共需要花費完成59（56+3）個階段的時間。\n▷ 學習過程中可能需要多次快速重複記憶，每次可能相當於完成3～5個階段所需要的時間。由於熟悉程度的不斷增加，每次重複記憶所需要的時間會越來越短，所以，預計進行3次重複記憶需要相當於10個階段的時間。這就意味著一共需要花費完成69（59+10）個階段的時間。\n>\n>完成每個階段的具體步驟。\n>\n>▷ 每天早晨騰出一點時間。\n▷ 把前一天背過的單詞朗讀至少2 遍。\n▷ 聽錄音，跟讀當天要背的單詞3～5遍，主要關注發音、拼寫，順帶看看詞義，能記多少就記多少，不求速成。\n▷ 上午利用閒暇時間通讀詞彙列表，並反复閱讀例句。\n▷ 下午用專門的時間把當天要背的單詞集中背2～3遍。可以一邊讀，一邊抄，一邊背，不要只是坐在那里呆呆地盯著詞彙看。\n▷ 空閒的時候反复聽當天要背的單詞，重複次數越多越好。\n▷ 晚上睡覺前複習當天背的單詞。\n\n- 並行串行\n\n*✖ 拆分細項，尋找並行的可能。*\n\n>華羅庚先生曾經用燒水泡茶為例說明過這個問題。\n>>燒水泡茶：參見《統籌方法平話及補充》，華羅庚著，中國工業出版社，1966。\n▷ 辦法甲：洗好水壺，灌上涼水，放在火上。在等待水開的時候洗茶壺、洗茶杯、拿茶葉。等到水開，泡茶喝。\n▷ 辦法乙：先做好一些準備工作，包括洗水壺、洗壺杯、拿茶葉。一切就緒，灌水、燒水，坐待水開了泡茶喝。\n▷ 辦法丙：洗淨開壺，灌上涼水，放在火上，坐待水開。水開了之後急急忙忙找茶葉、洗茶壺、茶杯，泡茶喝。\n\n*✖ 分別為聖的**時間片***\n\n>一個處理器在一個時間段內其實只能做一件事，因為它只有一個個體、一個時空。而多任務操作系統把一個長時間段劃分成很多短小的時間片，每個時間片只讓處理器執行一個進程（Process）——儘管同時可能有多個進程需要處理。在第一個時間片裡，操作系統讓處理器處理A進程；時間片的時間用完之後，無論A進程處理到什麼程度，都要被“掛起”（即，A進程這時不能再佔用處理器資源——儘管它還是被允許使用計算機的其他資源，如內存、磁盤、屏幕輸出等）；在第二個時間片裡，處理器處理的是B進程，時間用完之後，B進程將與A進程一樣被中途“掛起”；\n\n- 感知時間\n\n> 逃避責任就會帶來輕鬆，可那恰恰就是“生命中不能承受之輕”啊！\n\n*有的時候「逃避雖可恥但有用」，學會判斷什麼是可以逃避的事，什麼是不可逃避的事。*\n\n> 學著做每天的“事件日誌”（Event Log）。除了自己經歷的事件之外，\n> 一概不記，而且盡量不記感想，不記感受，只記錄事件本身。\n> ...\n> ...記錄過程要比基於結果的記錄更為詳盡\n\n例子\n>>烏里揚諾夫斯克。一九六四年四月七日。分類昆蟲學（畫兩張無名袋蛾的圖）——三小時十五分。鑑定袋蛾——二十分（1.0）。\n>>\n>>附加工作：給斯拉瓦寫信——二小時四十五分（0.5）。\n>>\n>>社會工作：植物保護小組開會——二小時二十五分。休息：給伊戈爾寫信——十分；\n>>《烏里揚諾夫斯克真理報》——十分；列夫·托爾斯泰的《塞瓦斯托波爾紀事》——一小時二十五分。\n>>\n>>基本工作合計——六小時二十分。\n\n*✖ 簡單的分類 + 事件 + 費時，最後再合計起來。*\n*(其於事實)條列式的記錄法，與時間調色盤(預定)的方法不太一樣。*\n*你可以預定你要作的事，可是你無法正確的估時 ; 這是事實，請面對這個事實。*\n*輔助上分別為聖的時間切片或許可以有所幫助*\n\n- 記錄開銷 \n\n*練習中*\n\n- 制訂預算\n\n*✖ 先養成記錄的習慣，再養成制定預算的習慣*\n*✖ 只列事情，重要/不重要*\n\n{% blockquote %}\n每個人都喜歡做有趣的事情，做的時候往往並不關心這件事到底有沒有用。可是，有趣的事不見得有用啊！\n{% endblockquote %}\n\n{% blockquote %}\n養成任何一個哪怕很小的習慣都需要掙扎。然而，貌似痛苦的掙扎過程，在將來的某個時刻終將變得其樂無窮。\n{% endblockquote %}\n\n- 計劃\n\n{% blockquote %}\n計劃成功的前提：目標現實可行\n{% endblockquote %}\n\n{% blockquote %}\n我們不是計劃著失敗，而是失敗地計劃(People don't plan to fail, they fail to plan)。\n{% endblockquote %}\n\n*✖ 簡單的判斷目標是不是現實可行*\n\n{% blockquote %}\n>證明我的目標現實可行的方法比較簡單：\n> 1. 已經有人做到了。\n> 2. 我與那個人沒有太大的差距。\n{% endblockquote %}\n\n{% blockquote %}\n> 長期計劃是需要通過實踐才能習得的能力\n{% endblockquote %}\n\n{% blockquote %}\n>沒有人能給我做職業規劃。...生活本身充滿了意外，並且，總是意外到無以復加的地步。\n{% endblockquote %}\n\n*✖ 先從記錄開始，持續一周，繼續保持記錄下試著開始分配時間。*\n*✖ 再試著從周計劃開始作規劃，練習並且保持。*\n\n{% blockquote %}\n>計劃固然重要，行動更為重要。\n{% endblockquote %}\n\n{% blockquote %}\n>任何事情，都可能經歷相同的過程：逐步熟悉，小心摸索，失敗、失敗、再失敗，\n>認真反思，捲土重來，直至成功。而最初，在我們對任務連基本的認知都沒有的時候，\n>制定出來的計劃十有八九隻不過是空談。\n{% endblockquote %}\n\n\n- 列表\n\n- 流程\n\n*✖ 預想各種可能的情境，不用一次到位，持續整合的重點在持續。*\n\n範例:\n\n\n>▷ 確定對方最可能方便接電話的時間（難以確定的時候先發短信詢問）。\n▷ 在撥打電話甚至發短信詢問對方是否方便之前準備好一切計劃溝通的內容，作好檢查列表放在手邊，確保溝通過程中不會遺漏要點。\n▷ 通話前把重要信息整理成電子文本，在通話中做必要的更新，通話結束後，馬上通過電子郵件將備忘發送給對方。\n▷ 若對方沒有接電話，則給對方發署名短信告知詳細事由， 並做好記錄，防止自己遺忘此次溝通任務。\n▷ ……\n\n- 預演\n\n> 準備不足，所以害怕。\n\n*✖ 類似一種沙箱測試，讓錯誤發生在測試階段。*\n\n- 驗收\n\n> 向自己提出一個問題並要想辦法回答清楚：“怎樣才算'做好'？\n\n```\n本篇心得: 這是需要實際操作的一篇，仍在實踐中。\n首先是記錄自已的時間花在哪裡？\n再來是制定時間的預算，分別出神聖的時間去累積一些東西(ex:學習英文、跑步); \n當習慣養成，就不再困難了，而是生活的一部份。\n同時注意工作的流程，\n1. 問自已What Why How ?\n2. 儘可能拆解工作流程的步驟到最小化，建立列表。\n3. 常常發生的工作要設想各種情境,建立SOP,以縮短時間。\n4. 陌生的工作可以透過預演來試錯。\n5. 一定要驗收。\n6. 面對困難與失敗。\n7. 及時行動!\n8. 及時行動!!\n9. 及時行動!!!\n```\n## 四、學習\n\n### 基本途徑\n\n- 體驗\n- 觀察\n- 學習\n\n*✖ 自由是可以被剝奪的。*\n\n### 經驗局限\n\n{% blockquote %}\n> 日常生活中主要的“溝通障礙”本質上幾乎都是由於溝通雙方無法讓對方理解與他們的經驗相悖的知識或信息造成的。\n{% endblockquote %}\n\n{% blockquote %}\n> 長期的進化使人類到達了今天這個高度，但是每個人在出生的那一剎那，居然與其他動物站在幾乎同樣的起點上，心智要從零開始進化。\n{% endblockquote %}\n\n{% blockquote %}\n> > 優秀的領導，能夠把人們帶到他們想去的地方；而卓越的領導，能夠把人們帶到他們應該去但是沒想過要去的地方\n> > A leader takes people where they want to go. A great leader takes people where they don't necessarily want to go, but ought to be.\n{% endblockquote %}\n\n{% blockquote %}\n> 牢記在這世界上確實存在“與現有經驗相悖的知識”，再把這句話變成經驗，用它去類比未知，而後投入大量的時間和精力去學習和掌握“科學方法論”，掙扎著進化成為真正意義上的“人”。\n{% endblockquote %}\n\n### 自學能力\n- 閱讀理解能力 ->檢索能力 -> 寫作能力 -> 實踐能力\n- 永遠保持開放的心態\n\n> 最好固定一段時間來把那些目前暫時無法理解的、支持的、反對的、無所謂的論點和觀點記錄下來。對無法理解的，寫下自己當時的疑惑何在；對支持的，記錄幾個理由或者實例；對反對的，同樣記錄幾個理由或者實例；甚至對那些無所謂的，也記錄其原因。一個有著這樣良好記錄習慣的人會獲得他人無法擁有的處理信息和知識的能力——“反芻”。這種“反芻”能力是我們避免成為“選擇性輸入”受害者的重要保障。\n\n> 在學習的時候，進展和時間的關係肯定不是線性的：所謂“一分耕耘，一分收穫”。這個關係曲線更可能是階梯狀的：學習過程中有很長時間一點進展都沒有，但從某一刻開始突飛猛進，而後又是長長的一段所謂的“平台期”。...只有經歷積累的過程，“量變到質變”的效果才會出現，才有可能突飛猛進。\n\n## 五、思考\n- [勤於思考](#c51)\n- [思維陷阱](#c52)\n- [因果關係](#c53)\n- [逆命題](#c54)\n- [舉證責任](#c55)\n- [案例局限](#c56)\n- [對立論證](#c57)\n- [張冠李戴](#c58)\n- [感悟與道理](#c59)\n- [克服恐懼](#c510)\n- [輔助工具](#c511)\n### <span id='c51'>勤於思考</span>\n\n> 人都有大腦，閒置還是使用，是個問題。\n\n1. 獨立思考\n2. 思考任務的目標、實質、意義\n\n>很多人就是這樣，堅持拒絕思考，然後用天下最累的方式生活而不自知。大哲學家羅素曾觀察到這個現象，他為之奇怪並慨嘆，“ 很多人寧願死也不願思考 ”，然後戲謔道，“ 實際上，他們確實死得很快。”\n>>Most people would die sooner than think — in fact they do so. \n— Bertrand Russell，In The ABC of Relativity，1925，P.166\n\n### <span id='c52'>思維陷阱</span>\n#### 概念不清和拒絕接受不確定性\n\n1. 概念不清\n\n{% blockquote %}\n> 學習任何知識最重要的一點，就是搞清楚它所有的基礎概念。\n{% endblockquote %}\n\n{% blockquote %}\n> 讀教科書，要先把所有概念都記下來，暫時不懂的就死記硬背。把概念牢記於心，就可以通過以後的學習和實踐反複審視它，並形成透徹理解。\n{% endblockquote %}\n\n{% blockquote %}\n> 本書強調“時間不可管理”、“我們只能管理自己”，並非咬文嚼字。“時間管理”和“自我管理”是完全不同的概念——焦點不同，方法不同，效果不同\n{% endblockquote %}\n\n2. 拒絕接受不確定性\n\n> 未知永遠存在。從本質上來看，不確定性和未知是一回事。\n\n\n### <span id='c53'>因果關係</span>\n\n#### 基礎\n\n>外因會影響內因，內因同樣會影響外因。它們相互影響，互為因果。\n> \n> 舉一個特別好玩的現象為例：在某種意義上，學生的水平決定教師的水平。\n>\n>這話並沒有說反。師生之間的有效溝通，肯定不僅是教師單方面的灌輸。越是用心的教師，越關注學生的反饋；越是用心的學生，越關注教師對他的反饋的反饋。顯然，這種溝通不僅是雙向的，還隨著雙方的用心程度而不斷增強。\n>\n>這和下棋是一樣的道理。據說，棋藝到了一定程度，棋手就會不由自主地挑選對手，因為跟高手下棋就會進步，但反過來，與“臭手”交手多了，自己的手也會變“臭”……優質的學生，對他們的教師來說，不僅是令人愉悅的教學對象（學生一點就透，老師沒有不開心的），更重要的，他們還是對教師的挑戰——這些學生有著長期而且優秀的學習經驗，也因此擁有相對良好的判斷能力，隨時可能提出一般教師無法回答的問題。經過一段時間的積累，雙方都會因為教學和溝通發生巨大的進步——只要雙方都足夠優秀，足夠用心。\n\n{% blockquote %}\n正在塑造我們的這個環境，也是我們自己（參與）塑造的\n{% endblockquote %}\n\n>#### 要做一個用心的人，要用心做事，因為這世界其實也是有“心”的。\n\n#### 雙盲測試\n\n*註: 受測者不知道安慰劑的存在，測試者則不知道誰服用了安慰劑，單純以局外人的角度觀測記錄。*\n\n> 人群中也有差不多⅓的人更易受到（來自他人或來自自身的）心理暗示的影響。也就是說，他們更可能在服用安慰劑後病情真正好轉。\n\n#### 自證預言\n\n>莫頓教授用銀行擠兌的例子說明了自證預言的作用機理：\n>>一家銀行本來運作得很正常，但不知什麼原因，出現了“這家銀行要倒閉”的流言。流言越傳越廣，導致越來越多的人信以為真，有人為防意外而跑到銀行把自己的存款提走。恐慌情緒蔓延，並且變得愈加真實，更多的人衝進銀行提走自己的存款……最終，擠兌發生了，銀行真的倒閉了。\n\n>一個原本並不存在的原因竟然“無中生有”變成了真正的原因。\n\n#### 心中恐惧失敗，才是失敗的原因。\n\n### <span id='c54'>逆命題</span> \n\n>**原命題為真，它的逆命題不一定為真。**\n>P 則 Q 等於 ~Q 則 ~P\n>但是不一定存在 Q 則 P 的關係\n\n>有70%以上的人分不清楚原命題和逆命題之間的區別。\n>\n>>參見《認知心理學》（Cognitive Psychology: A Student's Handbook，2000），邁克爾·艾森克（Michael W. Eysenck）、馬克·基恩（Mark T. Keane）合著。\n\n*✖ 心得: 人很好騙，至少70%很好騙。*\n\n\n### <span id='c55'>舉證責任</span> \n\n> \"舉證責任\"是不對等的\n> 爭論雙方的境況常常處於這種狀態：\n▷其中一方肩負沉重的舉證責任（burden of proof）\n▷另外一方則享有來自假設的恩惠（benefit of assumption）\n\n{% blockquote %}\n既然你無法證明我是錯的，那麼我就是對的。這是一種典型的邏輯錯誤\n{% endblockquote %}\n\n*✖ 套用一下邏輯學:*\n*我是對的 則 你無法証明我是錯的，恒為真。*\n*你無法証明我是錯的 則 我是錯的，恒為真。*\n*你無法證明我是錯的 則 我是對的，不恒為真*\n\n### <span id='c56'>案例局限</span> \n\n\n>最為常見的邏輯錯誤就是“以偏概全”——某種經驗在某個人身上應驗了，並不意味著該經驗在所有人身上都會起作用。\n\n*✖ 常見的推銷話術，我作得到，你也作得到。努力就會成功。*\n*這類的話術可怕的地方在於它不完全是錯的，但是你必需客觀衡量各種條件，而非局限單一案例。*\n\n### <span id='c57'>對立論證</span> \n\n{% blockquote %}\n>人們可能基於一模一樣的原因做出截然相反的決定。換句話說，用同樣的論據證明截然相反的論點。\n{% endblockquote %}\n\n{% blockquote %}\n>抱怨上司“愚蠢”的人和能夠發覺“上司的愚蠢可能有另外的解釋”的人，得到的結論和採取的行動往往截然相反。**因此，時間在他們接下來的經歷中所產生的伴隨作用也截然相反。這裡，時間再一次選擇與心智強大的人做朋友**\n{% endblockquote %}\n\n{% blockquote %}\n>一旦意識到對立論證的存在，應該**“哪一個更合理、更現實就接受哪一個”**，而非“哪一個更積極就接受哪一個”，因為後者只是自我欺騙而已。積極的並不總是好的，哪一個極端理想主義者（以及他們的想法、理念）不是積極的呢？\n{% endblockquote %}\n\n*✖ 職場上不論是留下繼續努力，或是掛冠求去都無對錯之分，而是何者更為合理。這個道理在人生的選擇上也是，需要注意對立論證的存在，堅持或放棄本無對錯，合理的判斷即可。*\n\n### <span id='c58'>張冠李戴</span>\n\n{% blockquote %}\n>論點和論據之間儘管全無邏輯聯繫，卻可以用一種“顯然合理”的姿態綁在一起。\n{% endblockquote %}\n\n舉例:\n\n>將字母A到Z分別編上1到26的分數（A=1,B=2,…,Z=26），然後比較不同單詞的分值：\n▷Knowledge（知識）得到96分\n（11+14+15+23+12+5+4+7+5=96）；\n▷Hardwork（努力）也只得到98分\n（8+1+18+4+23+15+18+11=98）；\n▷Attitude（態度）才能左右你生命的全部，\n因為它能得到100分\n（1+20+20+9+20+21+4+5=100）——滿分。\n得出結論：“態度改變一切”。\nBullshit（胡說八道）\n(2+21+12+12+19+8+9+20=103)\n\n\n### <span id='c59'>感悟與道理</span>\n\n{% blockquote %}\n“道理”應該是普適的，而“感悟”只來自個體經驗。\n{% endblockquote %}\n\n{% blockquote %}\n並非只有專家級別的新聞工作者才要分清“看法與事實之間的區別”，其實每個人都需要清楚地認識“道理”和“感悟”之間的巨大差異。\n{% endblockquote %}\n\n{% blockquote %}\n如果某個人把他們說的當作全部，把他們沒說的當作沒有，那麼這個人的智商就跟寓言中那個掩耳盜鈴的傢伙屬於同一個水平了。\n{% endblockquote %}\n\n{% blockquote %}\n人類普遍擁有的一個認知偏差就是：把成功攬到自己身上，把失敗歸咎於別人或者壞運氣。（這在心理學上有個術語，叫做“自利性偏差(Self-servingBias)”。）從這裡我們就可以知道，那些“成功者”這麼做的時候，往往並不是有意欺騙——他們甚至出於好意。\n{% endblockquote %}\n\n{% blockquote %}\n一個很實用的建議：與其關注成功者，不妨反其道而行之——努力從失敗者身上汲取經驗。\n{% endblockquote %}\n\n\n*✖ 困難的點在於，感悟難以作\"雙盲測試\"，也深受\"案例局限\"與\"安慰劑效應\"影響*\n\n### <span id='c510'>克服恐懼</span>\n\n{% blockquote %}\n“道理都明白，可就做不到”\n{% endblockquote %}\n\n### <span id='c511'>輔助工具</span>\n#### 語言\n\n{% blockquote %}\n以下一些句式最好經常使用，因為它們特別有助於獨立思考習慣的養成，並且也有刺激思考的作用：\n▷……是一回事，而……是另外一回事。\n▷……和……其實根本不是一回事。\n▷……不一定……\n▷……。可是，這並不意味著……\n▷……也許還有另外一種可能性（解釋）。\n▷……看起來像……，可是……\n▷……。而事實卻可能遠比看起來的更為複雜（簡單）。\n▷……。然而，（這個論斷）反過來（陳述）卻不一定成立……\n▷……其實很可能與……根本就沒有任何關係。\n▷……和……之間不一定是單純的因果關係，它們也可能互為因果。\n▷……和……之間的比較也許沒有任何意義。\n▷……其實不過是表面現象，其背後的本質是……\n▷……有一個通常被忽略的前提。\n▷……儘管聽起來很有道理，然而卻完全不現實。\n▷……也許有人會說……，但是這種質疑卻……\n{% endblockquote %}\n\n{% blockquote %}\n要刻意迴避的句子\n▷……難道就沒有一點可取之處嗎？\n▷……要是……就好了！\n{% endblockquote %}\n\n\n## 六、交流\n###  學會傾聽\n\n{% blockquote %}\n為了真正做到有效傾聽，最需要克制的就是“過早質疑”。\n{% endblockquote %}\n\n{% blockquote %}\n就算需要質疑，也一定要等到對方把話說完。\n{% endblockquote %}\n\n### 說與不說\n\n{% blockquote %}\n“知無不言，言無不盡”在大部分情況下是最浪費時間和精力的做法。\n{% endblockquote %}\n\n{% blockquote %}\n...在分辨談話對象之前很可能要先分辨自己，所以，\n“可與言而不與言，失人。不可與言而與之言，失言。”這是說要分辨談話的對象。\n{% endblockquote %}\n\n### 共生狀態\n\n>見瓦茨拉夫·哈維爾先生製定的《對話守則》：\n1.對話的目的是尋求真理，不是為了鬥爭。\n2.不做人身攻擊。\n3.保持主題。\n4.辯論時要用證據。\n5.不要堅持錯誤不改。\n6.要分清對話與只准自己講話的區別。\n7.對話要有記錄。\n8.盡量理解對方。\n\n{% blockquote %}\n雙方想要進行有意義的討論，最基本的要求就是雙方必須共同遵守“理性討論基本原則”。\n{% endblockquote %}\n\n{% blockquote %}\n跨越“自以為是”\n{% endblockquote %}\n\n*✖ 「緣督以為經；因其故然」--- 莊子。養生主 ; 學習應順其自然，不然會把自已累死。「知知為知知，不知為不知，是知也」---論語* \n\n{% blockquote %}\n第一個原則：有意義的討論是競合\n第二個原則：真理是獨立存在的\n第三個原則：真理不變\n{% endblockquote %}\n\n### 正確複述\n\n> 為了保證溝通順利，往往需要添加一個驗證機制，或者說反饋機制。\n\n### 勤於反思\n- 深刻了解經驗的局限\n- 時時刻刻保持警惕 \n\n> 手裡只有一把錘子，看什麼問題都像釘子\t\n\n- 用記錄，使自己能夠記住更多的經驗 \n- 通過觀察和閱讀汲取他人的經驗\n- 經常試用類比來跨越未知與已知的障礙 \n- 耐心等待以獲得不能跨越時間的經驗  \n\n\n\n## 七、應用\n### 興趣\n\n>說來說去，是順序出了問題：往往並不是有興趣才能做好，而是做好了才有興趣。人們總是搞錯順序，並對這樣的錯誤毫不知曉。雖然並非絕對，但完成大多數事情，確實都需要熟能生巧。做得多了，自然就能擅長；擅長了，自然就做得比別人好；做得比別人好了，興趣就濃起來了，而後就更喜歡做、更擅長……進入良性循環。可同樣的，做得多，就需要大量的時間投入，所謂“沒興趣”，往往不過是結果，如果將它當作“不去做好”的理由，最終的懲罰就是大量時間白白流逝。\n\n### 方法\n\n>所有學習上的成功，都只依靠兩件事——策略和堅持，而堅持本身就是最重要的策略。堅持，其實就是重複；而重複，說到底就是時間的投入，準確地說，是大量時間的投入。\n\n*✖ 你沒有實際作之前，不會知道效果如何，再在找更好的方法之前，最好的策略是堅持*\n\n### 痛苦 -比較 - 運氣\n\n### 人脈\n{% blockquote %}\n> 當我們把時間花到一個人身上的時候，相當於在他身上傾注了自己生命的一段。\n{% endblockquote %}\n\n{% blockquote %}\n> ▷專心做可以提升自己的事情，學習並擁有更多、更好的技能，成為一個值得他人交往的人。\n▷學會獨善其身，以不給他人製造麻煩為美德，用自己的獨立贏得尊重。\n{% endblockquote %}\n\n*✖ 人必自重而後人重之---你值得人家交往，人家就會來跟你交往。*\n\n### 自卑\n\n*✖  保持謙卑，認識真正的自已。*\n\n### 靈感\n\n*✖ 靈感來自於累積，筆記是一個好工具*\n\n### 鼓勵\n\n### 效率\n\n### 節奏\n\n### 物極必反\n\n>- 絕對不要盲目地試圖減少睡眠時間\n- 盡量不要減少與家庭成員交流的時間\n- 最好不要放棄你的社交時間\n\n### 自我證明\n\n\n## 參考\n\n- [電子書](http://zhibimo.com/read/xiaolai/ba-shi-jian-dang-zuo-peng-you/index.html)\n- [奇特的一生](http://www.books.com.tw/products/CN11349756)\n","source":"_posts/be_friend_with_time.md","raw":"---\ntitle: \"[閱讀筆記]把時間當作朋友\"\ndate: 2016/12/05 01:54:34\ntag:\n  - 閱讀筆記\n---\n\n\n\n## 零、困境\n*✖ 時間無法管理 能管理的只有你自已。*\n## 一、醒悟\n- *✖ 用思考控制思考*\n- *✖ 心智:就是心靈的智慧，用理性處理感性，控制情緒與慾望。*\n- *✖ 人會在相同的情況下作出完全相反的結論*\n  \n> ...歷史上也常常出現這種情況——其實目的都是“為了人類更好的明天”，可偏偏出現了對立的兩派人，\n他們為了原本一模一樣的理想爭執不休，甚至“拋頭顱”、“撒熱血”，犧牲幾代人的福祉。  \n>> 比如，所謂“水火不相容”的“社會主義陣營”和“資本主義陣營”。\n\n\n> 看穿這一切，擺脫自己的局限，需要心智的力量。\n  \n\n## 二、現實\n- 速成絕無可能\n- 交換才是硬道理\n- 完美永不存在\n- 未知永遠存在\n> 未知分為兩種：一種是永遠不能解決的，另一種是在可預見的未來也許能夠解決的。\n\n*✖ 吾生也有涯，而知也無涯。以有涯隨無涯，殆已！已而為知者，殆而已矣！…指窮於為薪，火傳也，不知其盡也。--莊子。養生主*\n\n*✖ 站在巨人的肩膀上*\n\n- 現狀無法馬上擺脫\n\n{% blockquote %}\n接受現狀才是最優策略——有什麼做什麼，有什麼用什麼；做什麼都做好，用什麼都用好。\n不要常常覺得苦（這會讓人忍不住顧影自憐，浪費精力與時間），而要想辦法在任何情況下找到情趣——\n——**快樂是一種本事**。\n{% endblockquote %} \n\n{% blockquote %}\n心懷“夢想”的時間越長，它的沉沒成本就越高。\n{% endblockquote %} \n\n*✖ 積沙成塔，滴水穿石，時間可以累積，也可以消耗。*\n\n- 與時間做朋友\n\n{% blockquote %}\n與時間做朋友的方法很簡單：用正確的方法做正確的事情。\n{% endblockquote %}\n\n{% blockquote %}\n儘管現實總是如此難於接受，堅強的你卻應該坦然。以上提到的種種現實，包括“速成絕無可能”、“只有付出才有收穫”、“完美永不存在”、“未知永遠存在”、“現狀無法馬上擺脫”，都既清楚又簡單，你必須要接受——不僅要接受，還要牢記；不僅要牢記，還要堅信，不容半點動搖。最好時常把自己的一些念頭記下來，然後與這幾條現實對照，看看它們是否與這些現實相符。\n{% endblockquote %} \n\n{% blockquote %}\n時間是現實的人的朋友，是不現實的人的敵人。時間不是故意要這樣做，只不過事實如此。\n{% endblockquote %} \n\n*✖ 正確的事，正確的做 ; 首先要學會判斷什麼是正確的事。*\n\n## 三、管理\n-  估算時間\n\n{% blockquote %}\n分辨任務的屬性——它是熟悉的還是陌生的呢?\n{% endblockquote %}\n\n{% blockquote %}\n對學習來說，任務“陌生”的可能性更大，因為學習本身是一個探索未知的過程。完成學習任務常常需要花費比我們想像中多得多的時間。對工作來說，任務“熟悉”的可能性更大。因為工作本身是一個應用已知的過程。\n{% endblockquote %}\n\n\n*✖ 軟體工作的這個行業，很有可能是大多數是未知的情況。*\n \n- 及時行動\n\n{% blockquote %}\n接受任務之後，什麼時候開始執行才好呢？比“越早開始越好”更切實的答案是“現在就開始”。\n{% endblockquote %}\n\n*✖ ASAP 不是一個好答案 NOW 才是。*\n\n*✖ 不求有功，但求無過是種慢性自殺，滴水穿石---會消磨掉你的累積。*\n\n- 直面困難\n\n> 效率低下的根本原因是什麼？答案是：迴避困難。\n> ……\n> ……這些問題都源自同一個習慣：專做簡單的，迴避困難的。\n\n- 關注步驟\n\n{% blockquote %}\n所謂“三思而行”在我看來就是指做任何事情之前都要考慮相關的3個方面：內容（What）、原因（Why）、方法（How）。任何任務都起碼具備3個屬性：何事（What）、何因（Why）、何法（How）。\n{% endblockquote %}\n\n{% blockquote %}\n不停地細分、拆解任務，而且越具體越好，直至每個小任務都可以由一個人獨立完成。\n{% endblockquote %}\n\n例子\n> 擴充詞彙量→托福詞彙→托福核心詞彙→21個單元→每個單元大約100 個單詞→一個單元分2次完成……\n> ▷ 先嘗試做一兩個階段，測量一下完成一個階段需要多長時間。\n▷ 按照測量的結果製作一個時間表，把其餘若干個階段所需要的時間填寫完整（最終總是需要做一些調整的）。\n▷ 背單詞需要重複，所以，每3個階段過後要留出與完成1個階段相等的時間去複習。這就意味著一共需要花費完成56（42+14）個階段的時間。\n▷ 每完成總任務的1/3，就增加與完成1個階段相等的再复習時間。這就意味著一共需要花費完成59（56+3）個階段的時間。\n▷ 學習過程中可能需要多次快速重複記憶，每次可能相當於完成3～5個階段所需要的時間。由於熟悉程度的不斷增加，每次重複記憶所需要的時間會越來越短，所以，預計進行3次重複記憶需要相當於10個階段的時間。這就意味著一共需要花費完成69（59+10）個階段的時間。\n>\n>完成每個階段的具體步驟。\n>\n>▷ 每天早晨騰出一點時間。\n▷ 把前一天背過的單詞朗讀至少2 遍。\n▷ 聽錄音，跟讀當天要背的單詞3～5遍，主要關注發音、拼寫，順帶看看詞義，能記多少就記多少，不求速成。\n▷ 上午利用閒暇時間通讀詞彙列表，並反复閱讀例句。\n▷ 下午用專門的時間把當天要背的單詞集中背2～3遍。可以一邊讀，一邊抄，一邊背，不要只是坐在那里呆呆地盯著詞彙看。\n▷ 空閒的時候反复聽當天要背的單詞，重複次數越多越好。\n▷ 晚上睡覺前複習當天背的單詞。\n\n- 並行串行\n\n*✖ 拆分細項，尋找並行的可能。*\n\n>華羅庚先生曾經用燒水泡茶為例說明過這個問題。\n>>燒水泡茶：參見《統籌方法平話及補充》，華羅庚著，中國工業出版社，1966。\n▷ 辦法甲：洗好水壺，灌上涼水，放在火上。在等待水開的時候洗茶壺、洗茶杯、拿茶葉。等到水開，泡茶喝。\n▷ 辦法乙：先做好一些準備工作，包括洗水壺、洗壺杯、拿茶葉。一切就緒，灌水、燒水，坐待水開了泡茶喝。\n▷ 辦法丙：洗淨開壺，灌上涼水，放在火上，坐待水開。水開了之後急急忙忙找茶葉、洗茶壺、茶杯，泡茶喝。\n\n*✖ 分別為聖的**時間片***\n\n>一個處理器在一個時間段內其實只能做一件事，因為它只有一個個體、一個時空。而多任務操作系統把一個長時間段劃分成很多短小的時間片，每個時間片只讓處理器執行一個進程（Process）——儘管同時可能有多個進程需要處理。在第一個時間片裡，操作系統讓處理器處理A進程；時間片的時間用完之後，無論A進程處理到什麼程度，都要被“掛起”（即，A進程這時不能再佔用處理器資源——儘管它還是被允許使用計算機的其他資源，如內存、磁盤、屏幕輸出等）；在第二個時間片裡，處理器處理的是B進程，時間用完之後，B進程將與A進程一樣被中途“掛起”；\n\n- 感知時間\n\n> 逃避責任就會帶來輕鬆，可那恰恰就是“生命中不能承受之輕”啊！\n\n*有的時候「逃避雖可恥但有用」，學會判斷什麼是可以逃避的事，什麼是不可逃避的事。*\n\n> 學著做每天的“事件日誌”（Event Log）。除了自己經歷的事件之外，\n> 一概不記，而且盡量不記感想，不記感受，只記錄事件本身。\n> ...\n> ...記錄過程要比基於結果的記錄更為詳盡\n\n例子\n>>烏里揚諾夫斯克。一九六四年四月七日。分類昆蟲學（畫兩張無名袋蛾的圖）——三小時十五分。鑑定袋蛾——二十分（1.0）。\n>>\n>>附加工作：給斯拉瓦寫信——二小時四十五分（0.5）。\n>>\n>>社會工作：植物保護小組開會——二小時二十五分。休息：給伊戈爾寫信——十分；\n>>《烏里揚諾夫斯克真理報》——十分；列夫·托爾斯泰的《塞瓦斯托波爾紀事》——一小時二十五分。\n>>\n>>基本工作合計——六小時二十分。\n\n*✖ 簡單的分類 + 事件 + 費時，最後再合計起來。*\n*(其於事實)條列式的記錄法，與時間調色盤(預定)的方法不太一樣。*\n*你可以預定你要作的事，可是你無法正確的估時 ; 這是事實，請面對這個事實。*\n*輔助上分別為聖的時間切片或許可以有所幫助*\n\n- 記錄開銷 \n\n*練習中*\n\n- 制訂預算\n\n*✖ 先養成記錄的習慣，再養成制定預算的習慣*\n*✖ 只列事情，重要/不重要*\n\n{% blockquote %}\n每個人都喜歡做有趣的事情，做的時候往往並不關心這件事到底有沒有用。可是，有趣的事不見得有用啊！\n{% endblockquote %}\n\n{% blockquote %}\n養成任何一個哪怕很小的習慣都需要掙扎。然而，貌似痛苦的掙扎過程，在將來的某個時刻終將變得其樂無窮。\n{% endblockquote %}\n\n- 計劃\n\n{% blockquote %}\n計劃成功的前提：目標現實可行\n{% endblockquote %}\n\n{% blockquote %}\n我們不是計劃著失敗，而是失敗地計劃(People don't plan to fail, they fail to plan)。\n{% endblockquote %}\n\n*✖ 簡單的判斷目標是不是現實可行*\n\n{% blockquote %}\n>證明我的目標現實可行的方法比較簡單：\n> 1. 已經有人做到了。\n> 2. 我與那個人沒有太大的差距。\n{% endblockquote %}\n\n{% blockquote %}\n> 長期計劃是需要通過實踐才能習得的能力\n{% endblockquote %}\n\n{% blockquote %}\n>沒有人能給我做職業規劃。...生活本身充滿了意外，並且，總是意外到無以復加的地步。\n{% endblockquote %}\n\n*✖ 先從記錄開始，持續一周，繼續保持記錄下試著開始分配時間。*\n*✖ 再試著從周計劃開始作規劃，練習並且保持。*\n\n{% blockquote %}\n>計劃固然重要，行動更為重要。\n{% endblockquote %}\n\n{% blockquote %}\n>任何事情，都可能經歷相同的過程：逐步熟悉，小心摸索，失敗、失敗、再失敗，\n>認真反思，捲土重來，直至成功。而最初，在我們對任務連基本的認知都沒有的時候，\n>制定出來的計劃十有八九隻不過是空談。\n{% endblockquote %}\n\n\n- 列表\n\n- 流程\n\n*✖ 預想各種可能的情境，不用一次到位，持續整合的重點在持續。*\n\n範例:\n\n\n>▷ 確定對方最可能方便接電話的時間（難以確定的時候先發短信詢問）。\n▷ 在撥打電話甚至發短信詢問對方是否方便之前準備好一切計劃溝通的內容，作好檢查列表放在手邊，確保溝通過程中不會遺漏要點。\n▷ 通話前把重要信息整理成電子文本，在通話中做必要的更新，通話結束後，馬上通過電子郵件將備忘發送給對方。\n▷ 若對方沒有接電話，則給對方發署名短信告知詳細事由， 並做好記錄，防止自己遺忘此次溝通任務。\n▷ ……\n\n- 預演\n\n> 準備不足，所以害怕。\n\n*✖ 類似一種沙箱測試，讓錯誤發生在測試階段。*\n\n- 驗收\n\n> 向自己提出一個問題並要想辦法回答清楚：“怎樣才算'做好'？\n\n```\n本篇心得: 這是需要實際操作的一篇，仍在實踐中。\n首先是記錄自已的時間花在哪裡？\n再來是制定時間的預算，分別出神聖的時間去累積一些東西(ex:學習英文、跑步); \n當習慣養成，就不再困難了，而是生活的一部份。\n同時注意工作的流程，\n1. 問自已What Why How ?\n2. 儘可能拆解工作流程的步驟到最小化，建立列表。\n3. 常常發生的工作要設想各種情境,建立SOP,以縮短時間。\n4. 陌生的工作可以透過預演來試錯。\n5. 一定要驗收。\n6. 面對困難與失敗。\n7. 及時行動!\n8. 及時行動!!\n9. 及時行動!!!\n```\n## 四、學習\n\n### 基本途徑\n\n- 體驗\n- 觀察\n- 學習\n\n*✖ 自由是可以被剝奪的。*\n\n### 經驗局限\n\n{% blockquote %}\n> 日常生活中主要的“溝通障礙”本質上幾乎都是由於溝通雙方無法讓對方理解與他們的經驗相悖的知識或信息造成的。\n{% endblockquote %}\n\n{% blockquote %}\n> 長期的進化使人類到達了今天這個高度，但是每個人在出生的那一剎那，居然與其他動物站在幾乎同樣的起點上，心智要從零開始進化。\n{% endblockquote %}\n\n{% blockquote %}\n> > 優秀的領導，能夠把人們帶到他們想去的地方；而卓越的領導，能夠把人們帶到他們應該去但是沒想過要去的地方\n> > A leader takes people where they want to go. A great leader takes people where they don't necessarily want to go, but ought to be.\n{% endblockquote %}\n\n{% blockquote %}\n> 牢記在這世界上確實存在“與現有經驗相悖的知識”，再把這句話變成經驗，用它去類比未知，而後投入大量的時間和精力去學習和掌握“科學方法論”，掙扎著進化成為真正意義上的“人”。\n{% endblockquote %}\n\n### 自學能力\n- 閱讀理解能力 ->檢索能力 -> 寫作能力 -> 實踐能力\n- 永遠保持開放的心態\n\n> 最好固定一段時間來把那些目前暫時無法理解的、支持的、反對的、無所謂的論點和觀點記錄下來。對無法理解的，寫下自己當時的疑惑何在；對支持的，記錄幾個理由或者實例；對反對的，同樣記錄幾個理由或者實例；甚至對那些無所謂的，也記錄其原因。一個有著這樣良好記錄習慣的人會獲得他人無法擁有的處理信息和知識的能力——“反芻”。這種“反芻”能力是我們避免成為“選擇性輸入”受害者的重要保障。\n\n> 在學習的時候，進展和時間的關係肯定不是線性的：所謂“一分耕耘，一分收穫”。這個關係曲線更可能是階梯狀的：學習過程中有很長時間一點進展都沒有，但從某一刻開始突飛猛進，而後又是長長的一段所謂的“平台期”。...只有經歷積累的過程，“量變到質變”的效果才會出現，才有可能突飛猛進。\n\n## 五、思考\n- [勤於思考](#c51)\n- [思維陷阱](#c52)\n- [因果關係](#c53)\n- [逆命題](#c54)\n- [舉證責任](#c55)\n- [案例局限](#c56)\n- [對立論證](#c57)\n- [張冠李戴](#c58)\n- [感悟與道理](#c59)\n- [克服恐懼](#c510)\n- [輔助工具](#c511)\n### <span id='c51'>勤於思考</span>\n\n> 人都有大腦，閒置還是使用，是個問題。\n\n1. 獨立思考\n2. 思考任務的目標、實質、意義\n\n>很多人就是這樣，堅持拒絕思考，然後用天下最累的方式生活而不自知。大哲學家羅素曾觀察到這個現象，他為之奇怪並慨嘆，“ 很多人寧願死也不願思考 ”，然後戲謔道，“ 實際上，他們確實死得很快。”\n>>Most people would die sooner than think — in fact they do so. \n— Bertrand Russell，In The ABC of Relativity，1925，P.166\n\n### <span id='c52'>思維陷阱</span>\n#### 概念不清和拒絕接受不確定性\n\n1. 概念不清\n\n{% blockquote %}\n> 學習任何知識最重要的一點，就是搞清楚它所有的基礎概念。\n{% endblockquote %}\n\n{% blockquote %}\n> 讀教科書，要先把所有概念都記下來，暫時不懂的就死記硬背。把概念牢記於心，就可以通過以後的學習和實踐反複審視它，並形成透徹理解。\n{% endblockquote %}\n\n{% blockquote %}\n> 本書強調“時間不可管理”、“我們只能管理自己”，並非咬文嚼字。“時間管理”和“自我管理”是完全不同的概念——焦點不同，方法不同，效果不同\n{% endblockquote %}\n\n2. 拒絕接受不確定性\n\n> 未知永遠存在。從本質上來看，不確定性和未知是一回事。\n\n\n### <span id='c53'>因果關係</span>\n\n#### 基礎\n\n>外因會影響內因，內因同樣會影響外因。它們相互影響，互為因果。\n> \n> 舉一個特別好玩的現象為例：在某種意義上，學生的水平決定教師的水平。\n>\n>這話並沒有說反。師生之間的有效溝通，肯定不僅是教師單方面的灌輸。越是用心的教師，越關注學生的反饋；越是用心的學生，越關注教師對他的反饋的反饋。顯然，這種溝通不僅是雙向的，還隨著雙方的用心程度而不斷增強。\n>\n>這和下棋是一樣的道理。據說，棋藝到了一定程度，棋手就會不由自主地挑選對手，因為跟高手下棋就會進步，但反過來，與“臭手”交手多了，自己的手也會變“臭”……優質的學生，對他們的教師來說，不僅是令人愉悅的教學對象（學生一點就透，老師沒有不開心的），更重要的，他們還是對教師的挑戰——這些學生有著長期而且優秀的學習經驗，也因此擁有相對良好的判斷能力，隨時可能提出一般教師無法回答的問題。經過一段時間的積累，雙方都會因為教學和溝通發生巨大的進步——只要雙方都足夠優秀，足夠用心。\n\n{% blockquote %}\n正在塑造我們的這個環境，也是我們自己（參與）塑造的\n{% endblockquote %}\n\n>#### 要做一個用心的人，要用心做事，因為這世界其實也是有“心”的。\n\n#### 雙盲測試\n\n*註: 受測者不知道安慰劑的存在，測試者則不知道誰服用了安慰劑，單純以局外人的角度觀測記錄。*\n\n> 人群中也有差不多⅓的人更易受到（來自他人或來自自身的）心理暗示的影響。也就是說，他們更可能在服用安慰劑後病情真正好轉。\n\n#### 自證預言\n\n>莫頓教授用銀行擠兌的例子說明了自證預言的作用機理：\n>>一家銀行本來運作得很正常，但不知什麼原因，出現了“這家銀行要倒閉”的流言。流言越傳越廣，導致越來越多的人信以為真，有人為防意外而跑到銀行把自己的存款提走。恐慌情緒蔓延，並且變得愈加真實，更多的人衝進銀行提走自己的存款……最終，擠兌發生了，銀行真的倒閉了。\n\n>一個原本並不存在的原因竟然“無中生有”變成了真正的原因。\n\n#### 心中恐惧失敗，才是失敗的原因。\n\n### <span id='c54'>逆命題</span> \n\n>**原命題為真，它的逆命題不一定為真。**\n>P 則 Q 等於 ~Q 則 ~P\n>但是不一定存在 Q 則 P 的關係\n\n>有70%以上的人分不清楚原命題和逆命題之間的區別。\n>\n>>參見《認知心理學》（Cognitive Psychology: A Student's Handbook，2000），邁克爾·艾森克（Michael W. Eysenck）、馬克·基恩（Mark T. Keane）合著。\n\n*✖ 心得: 人很好騙，至少70%很好騙。*\n\n\n### <span id='c55'>舉證責任</span> \n\n> \"舉證責任\"是不對等的\n> 爭論雙方的境況常常處於這種狀態：\n▷其中一方肩負沉重的舉證責任（burden of proof）\n▷另外一方則享有來自假設的恩惠（benefit of assumption）\n\n{% blockquote %}\n既然你無法證明我是錯的，那麼我就是對的。這是一種典型的邏輯錯誤\n{% endblockquote %}\n\n*✖ 套用一下邏輯學:*\n*我是對的 則 你無法証明我是錯的，恒為真。*\n*你無法証明我是錯的 則 我是錯的，恒為真。*\n*你無法證明我是錯的 則 我是對的，不恒為真*\n\n### <span id='c56'>案例局限</span> \n\n\n>最為常見的邏輯錯誤就是“以偏概全”——某種經驗在某個人身上應驗了，並不意味著該經驗在所有人身上都會起作用。\n\n*✖ 常見的推銷話術，我作得到，你也作得到。努力就會成功。*\n*這類的話術可怕的地方在於它不完全是錯的，但是你必需客觀衡量各種條件，而非局限單一案例。*\n\n### <span id='c57'>對立論證</span> \n\n{% blockquote %}\n>人們可能基於一模一樣的原因做出截然相反的決定。換句話說，用同樣的論據證明截然相反的論點。\n{% endblockquote %}\n\n{% blockquote %}\n>抱怨上司“愚蠢”的人和能夠發覺“上司的愚蠢可能有另外的解釋”的人，得到的結論和採取的行動往往截然相反。**因此，時間在他們接下來的經歷中所產生的伴隨作用也截然相反。這裡，時間再一次選擇與心智強大的人做朋友**\n{% endblockquote %}\n\n{% blockquote %}\n>一旦意識到對立論證的存在，應該**“哪一個更合理、更現實就接受哪一個”**，而非“哪一個更積極就接受哪一個”，因為後者只是自我欺騙而已。積極的並不總是好的，哪一個極端理想主義者（以及他們的想法、理念）不是積極的呢？\n{% endblockquote %}\n\n*✖ 職場上不論是留下繼續努力，或是掛冠求去都無對錯之分，而是何者更為合理。這個道理在人生的選擇上也是，需要注意對立論證的存在，堅持或放棄本無對錯，合理的判斷即可。*\n\n### <span id='c58'>張冠李戴</span>\n\n{% blockquote %}\n>論點和論據之間儘管全無邏輯聯繫，卻可以用一種“顯然合理”的姿態綁在一起。\n{% endblockquote %}\n\n舉例:\n\n>將字母A到Z分別編上1到26的分數（A=1,B=2,…,Z=26），然後比較不同單詞的分值：\n▷Knowledge（知識）得到96分\n（11+14+15+23+12+5+4+7+5=96）；\n▷Hardwork（努力）也只得到98分\n（8+1+18+4+23+15+18+11=98）；\n▷Attitude（態度）才能左右你生命的全部，\n因為它能得到100分\n（1+20+20+9+20+21+4+5=100）——滿分。\n得出結論：“態度改變一切”。\nBullshit（胡說八道）\n(2+21+12+12+19+8+9+20=103)\n\n\n### <span id='c59'>感悟與道理</span>\n\n{% blockquote %}\n“道理”應該是普適的，而“感悟”只來自個體經驗。\n{% endblockquote %}\n\n{% blockquote %}\n並非只有專家級別的新聞工作者才要分清“看法與事實之間的區別”，其實每個人都需要清楚地認識“道理”和“感悟”之間的巨大差異。\n{% endblockquote %}\n\n{% blockquote %}\n如果某個人把他們說的當作全部，把他們沒說的當作沒有，那麼這個人的智商就跟寓言中那個掩耳盜鈴的傢伙屬於同一個水平了。\n{% endblockquote %}\n\n{% blockquote %}\n人類普遍擁有的一個認知偏差就是：把成功攬到自己身上，把失敗歸咎於別人或者壞運氣。（這在心理學上有個術語，叫做“自利性偏差(Self-servingBias)”。）從這裡我們就可以知道，那些“成功者”這麼做的時候，往往並不是有意欺騙——他們甚至出於好意。\n{% endblockquote %}\n\n{% blockquote %}\n一個很實用的建議：與其關注成功者，不妨反其道而行之——努力從失敗者身上汲取經驗。\n{% endblockquote %}\n\n\n*✖ 困難的點在於，感悟難以作\"雙盲測試\"，也深受\"案例局限\"與\"安慰劑效應\"影響*\n\n### <span id='c510'>克服恐懼</span>\n\n{% blockquote %}\n“道理都明白，可就做不到”\n{% endblockquote %}\n\n### <span id='c511'>輔助工具</span>\n#### 語言\n\n{% blockquote %}\n以下一些句式最好經常使用，因為它們特別有助於獨立思考習慣的養成，並且也有刺激思考的作用：\n▷……是一回事，而……是另外一回事。\n▷……和……其實根本不是一回事。\n▷……不一定……\n▷……。可是，這並不意味著……\n▷……也許還有另外一種可能性（解釋）。\n▷……看起來像……，可是……\n▷……。而事實卻可能遠比看起來的更為複雜（簡單）。\n▷……。然而，（這個論斷）反過來（陳述）卻不一定成立……\n▷……其實很可能與……根本就沒有任何關係。\n▷……和……之間不一定是單純的因果關係，它們也可能互為因果。\n▷……和……之間的比較也許沒有任何意義。\n▷……其實不過是表面現象，其背後的本質是……\n▷……有一個通常被忽略的前提。\n▷……儘管聽起來很有道理，然而卻完全不現實。\n▷……也許有人會說……，但是這種質疑卻……\n{% endblockquote %}\n\n{% blockquote %}\n要刻意迴避的句子\n▷……難道就沒有一點可取之處嗎？\n▷……要是……就好了！\n{% endblockquote %}\n\n\n## 六、交流\n###  學會傾聽\n\n{% blockquote %}\n為了真正做到有效傾聽，最需要克制的就是“過早質疑”。\n{% endblockquote %}\n\n{% blockquote %}\n就算需要質疑，也一定要等到對方把話說完。\n{% endblockquote %}\n\n### 說與不說\n\n{% blockquote %}\n“知無不言，言無不盡”在大部分情況下是最浪費時間和精力的做法。\n{% endblockquote %}\n\n{% blockquote %}\n...在分辨談話對象之前很可能要先分辨自己，所以，\n“可與言而不與言，失人。不可與言而與之言，失言。”這是說要分辨談話的對象。\n{% endblockquote %}\n\n### 共生狀態\n\n>見瓦茨拉夫·哈維爾先生製定的《對話守則》：\n1.對話的目的是尋求真理，不是為了鬥爭。\n2.不做人身攻擊。\n3.保持主題。\n4.辯論時要用證據。\n5.不要堅持錯誤不改。\n6.要分清對話與只准自己講話的區別。\n7.對話要有記錄。\n8.盡量理解對方。\n\n{% blockquote %}\n雙方想要進行有意義的討論，最基本的要求就是雙方必須共同遵守“理性討論基本原則”。\n{% endblockquote %}\n\n{% blockquote %}\n跨越“自以為是”\n{% endblockquote %}\n\n*✖ 「緣督以為經；因其故然」--- 莊子。養生主 ; 學習應順其自然，不然會把自已累死。「知知為知知，不知為不知，是知也」---論語* \n\n{% blockquote %}\n第一個原則：有意義的討論是競合\n第二個原則：真理是獨立存在的\n第三個原則：真理不變\n{% endblockquote %}\n\n### 正確複述\n\n> 為了保證溝通順利，往往需要添加一個驗證機制，或者說反饋機制。\n\n### 勤於反思\n- 深刻了解經驗的局限\n- 時時刻刻保持警惕 \n\n> 手裡只有一把錘子，看什麼問題都像釘子\t\n\n- 用記錄，使自己能夠記住更多的經驗 \n- 通過觀察和閱讀汲取他人的經驗\n- 經常試用類比來跨越未知與已知的障礙 \n- 耐心等待以獲得不能跨越時間的經驗  \n\n\n\n## 七、應用\n### 興趣\n\n>說來說去，是順序出了問題：往往並不是有興趣才能做好，而是做好了才有興趣。人們總是搞錯順序，並對這樣的錯誤毫不知曉。雖然並非絕對，但完成大多數事情，確實都需要熟能生巧。做得多了，自然就能擅長；擅長了，自然就做得比別人好；做得比別人好了，興趣就濃起來了，而後就更喜歡做、更擅長……進入良性循環。可同樣的，做得多，就需要大量的時間投入，所謂“沒興趣”，往往不過是結果，如果將它當作“不去做好”的理由，最終的懲罰就是大量時間白白流逝。\n\n### 方法\n\n>所有學習上的成功，都只依靠兩件事——策略和堅持，而堅持本身就是最重要的策略。堅持，其實就是重複；而重複，說到底就是時間的投入，準確地說，是大量時間的投入。\n\n*✖ 你沒有實際作之前，不會知道效果如何，再在找更好的方法之前，最好的策略是堅持*\n\n### 痛苦 -比較 - 運氣\n\n### 人脈\n{% blockquote %}\n> 當我們把時間花到一個人身上的時候，相當於在他身上傾注了自己生命的一段。\n{% endblockquote %}\n\n{% blockquote %}\n> ▷專心做可以提升自己的事情，學習並擁有更多、更好的技能，成為一個值得他人交往的人。\n▷學會獨善其身，以不給他人製造麻煩為美德，用自己的獨立贏得尊重。\n{% endblockquote %}\n\n*✖ 人必自重而後人重之---你值得人家交往，人家就會來跟你交往。*\n\n### 自卑\n\n*✖  保持謙卑，認識真正的自已。*\n\n### 靈感\n\n*✖ 靈感來自於累積，筆記是一個好工具*\n\n### 鼓勵\n\n### 效率\n\n### 節奏\n\n### 物極必反\n\n>- 絕對不要盲目地試圖減少睡眠時間\n- 盡量不要減少與家庭成員交流的時間\n- 最好不要放棄你的社交時間\n\n### 自我證明\n\n\n## 參考\n\n- [電子書](http://zhibimo.com/read/xiaolai/ba-shi-jian-dang-zuo-peng-you/index.html)\n- [奇特的一生](http://www.books.com.tw/products/CN11349756)\n","slug":"be_friend_with_time","published":1,"updated":"2016-12-16T16:32:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivybr0008yk55p4jle409","content":"<h2 id=\"零、困境\"><a href=\"#零、困境\" class=\"headerlink\" title=\"零、困境\"></a>零、困境</h2><p><em>✖ 時間無法管理 能管理的只有你自已。</em></p>\n<h2 id=\"一、醒悟\"><a href=\"#一、醒悟\" class=\"headerlink\" title=\"一、醒悟\"></a>一、醒悟</h2><ul>\n<li><em>✖ 用思考控制思考</em></li>\n<li><em>✖ 心智:就是心靈的智慧，用理性處理感性，控制情緒與慾望。</em></li>\n<li><em>✖ 人會在相同的情況下作出完全相反的結論</em></li>\n</ul>\n<blockquote>\n<p>…歷史上也常常出現這種情況——其實目的都是“為了人類更好的明天”，可偏偏出現了對立的兩派人，<br>他們為了原本一模一樣的理想爭執不休，甚至“拋頭顱”、“撒熱血”，犧牲幾代人的福祉。  </p>\n<blockquote>\n<p>比如，所謂“水火不相容”的“社會主義陣營”和“資本主義陣營”。</p>\n</blockquote>\n<p>看穿這一切，擺脫自己的局限，需要心智的力量。</p>\n</blockquote>\n<h2 id=\"二、現實\"><a href=\"#二、現實\" class=\"headerlink\" title=\"二、現實\"></a>二、現實</h2><ul>\n<li>速成絕無可能</li>\n<li>交換才是硬道理</li>\n<li>完美永不存在</li>\n<li>未知永遠存在<blockquote>\n<p>未知分為兩種：一種是永遠不能解決的，另一種是在可預見的未來也許能夠解決的。</p>\n</blockquote>\n</li>\n</ul>\n<p><em>✖ 吾生也有涯，而知也無涯。以有涯隨無涯，殆已！已而為知者，殆而已矣！…指窮於為薪，火傳也，不知其盡也。–莊子。養生主</em></p>\n<p><em>✖ 站在巨人的肩膀上</em></p>\n<ul>\n<li>現狀無法馬上擺脫</li>\n</ul>\n<blockquote><p>接受現狀才是最優策略——有什麼做什麼，有什麼用什麼；做什麼都做好，用什麼都用好。<br>不要常常覺得苦（這會讓人忍不住顧影自憐，浪費精力與時間），而要想辦法在任何情況下找到情趣——<br>——<strong>快樂是一種本事</strong>。</p>\n</blockquote> \n<blockquote><p>心懷“夢想”的時間越長，它的沉沒成本就越高。</p>\n</blockquote> \n<p><em>✖ 積沙成塔，滴水穿石，時間可以累積，也可以消耗。</em></p>\n<ul>\n<li>與時間做朋友</li>\n</ul>\n<blockquote><p>與時間做朋友的方法很簡單：用正確的方法做正確的事情。</p>\n</blockquote>\n<blockquote><p>儘管現實總是如此難於接受，堅強的你卻應該坦然。以上提到的種種現實，包括“速成絕無可能”、“只有付出才有收穫”、“完美永不存在”、“未知永遠存在”、“現狀無法馬上擺脫”，都既清楚又簡單，你必須要接受——不僅要接受，還要牢記；不僅要牢記，還要堅信，不容半點動搖。最好時常把自己的一些念頭記下來，然後與這幾條現實對照，看看它們是否與這些現實相符。</p>\n</blockquote> \n<blockquote><p>時間是現實的人的朋友，是不現實的人的敵人。時間不是故意要這樣做，只不過事實如此。</p>\n</blockquote> \n<p><em>✖ 正確的事，正確的做 ; 首先要學會判斷什麼是正確的事。</em></p>\n<h2 id=\"三、管理\"><a href=\"#三、管理\" class=\"headerlink\" title=\"三、管理\"></a>三、管理</h2><ul>\n<li>估算時間</li>\n</ul>\n<blockquote><p>分辨任務的屬性——它是熟悉的還是陌生的呢?</p>\n</blockquote>\n<blockquote><p>對學習來說，任務“陌生”的可能性更大，因為學習本身是一個探索未知的過程。完成學習任務常常需要花費比我們想像中多得多的時間。對工作來說，任務“熟悉”的可能性更大。因為工作本身是一個應用已知的過程。</p>\n</blockquote>\n<p><em>✖ 軟體工作的這個行業，很有可能是大多數是未知的情況。</em></p>\n<ul>\n<li>及時行動</li>\n</ul>\n<blockquote><p>接受任務之後，什麼時候開始執行才好呢？比“越早開始越好”更切實的答案是“現在就開始”。</p>\n</blockquote>\n<p><em>✖ ASAP 不是一個好答案 NOW 才是。</em></p>\n<p><em>✖ 不求有功，但求無過是種慢性自殺，滴水穿石—會消磨掉你的累積。</em></p>\n<ul>\n<li>直面困難</li>\n</ul>\n<blockquote>\n<p>效率低下的根本原因是什麼？答案是：迴避困難。<br>……<br>……這些問題都源自同一個習慣：專做簡單的，迴避困難的。</p>\n</blockquote>\n<ul>\n<li>關注步驟</li>\n</ul>\n<blockquote><p>所謂“三思而行”在我看來就是指做任何事情之前都要考慮相關的3個方面：內容（What）、原因（Why）、方法（How）。任何任務都起碼具備3個屬性：何事（What）、何因（Why）、何法（How）。</p>\n</blockquote>\n<blockquote><p>不停地細分、拆解任務，而且越具體越好，直至每個小任務都可以由一個人獨立完成。</p>\n</blockquote>\n<p>例子</p>\n<blockquote>\n<p>擴充詞彙量→托福詞彙→托福核心詞彙→21個單元→每個單元大約100 個單詞→一個單元分2次完成……<br>▷ 先嘗試做一兩個階段，測量一下完成一個階段需要多長時間。<br>▷ 按照測量的結果製作一個時間表，把其餘若干個階段所需要的時間填寫完整（最終總是需要做一些調整的）。<br>▷ 背單詞需要重複，所以，每3個階段過後要留出與完成1個階段相等的時間去複習。這就意味著一共需要花費完成56（42+14）個階段的時間。<br>▷ 每完成總任務的1/3，就增加與完成1個階段相等的再复習時間。這就意味著一共需要花費完成59（56+3）個階段的時間。<br>▷ 學習過程中可能需要多次快速重複記憶，每次可能相當於完成3～5個階段所需要的時間。由於熟悉程度的不斷增加，每次重複記憶所需要的時間會越來越短，所以，預計進行3次重複記憶需要相當於10個階段的時間。這就意味著一共需要花費完成69（59+10）個階段的時間。</p>\n<p>完成每個階段的具體步驟。</p>\n<p>▷ 每天早晨騰出一點時間。<br>▷ 把前一天背過的單詞朗讀至少2 遍。<br>▷ 聽錄音，跟讀當天要背的單詞3～5遍，主要關注發音、拼寫，順帶看看詞義，能記多少就記多少，不求速成。<br>▷ 上午利用閒暇時間通讀詞彙列表，並反复閱讀例句。<br>▷ 下午用專門的時間把當天要背的單詞集中背2～3遍。可以一邊讀，一邊抄，一邊背，不要只是坐在那里呆呆地盯著詞彙看。<br>▷ 空閒的時候反复聽當天要背的單詞，重複次數越多越好。<br>▷ 晚上睡覺前複習當天背的單詞。</p>\n</blockquote>\n<ul>\n<li>並行串行</li>\n</ul>\n<p><em>✖ 拆分細項，尋找並行的可能。</em></p>\n<blockquote>\n<p>華羅庚先生曾經用燒水泡茶為例說明過這個問題。</p>\n<blockquote>\n<p>燒水泡茶：參見《統籌方法平話及補充》，華羅庚著，中國工業出版社，1966。<br>▷ 辦法甲：洗好水壺，灌上涼水，放在火上。在等待水開的時候洗茶壺、洗茶杯、拿茶葉。等到水開，泡茶喝。<br>▷ 辦法乙：先做好一些準備工作，包括洗水壺、洗壺杯、拿茶葉。一切就緒，灌水、燒水，坐待水開了泡茶喝。<br>▷ 辦法丙：洗淨開壺，灌上涼水，放在火上，坐待水開。水開了之後急急忙忙找茶葉、洗茶壺、茶杯，泡茶喝。</p>\n</blockquote>\n</blockquote>\n<p><em>✖ 分別為聖的<strong>時間片</strong></em></p>\n<blockquote>\n<p>一個處理器在一個時間段內其實只能做一件事，因為它只有一個個體、一個時空。而多任務操作系統把一個長時間段劃分成很多短小的時間片，每個時間片只讓處理器執行一個進程（Process）——儘管同時可能有多個進程需要處理。在第一個時間片裡，操作系統讓處理器處理A進程；時間片的時間用完之後，無論A進程處理到什麼程度，都要被“掛起”（即，A進程這時不能再佔用處理器資源——儘管它還是被允許使用計算機的其他資源，如內存、磁盤、屏幕輸出等）；在第二個時間片裡，處理器處理的是B進程，時間用完之後，B進程將與A進程一樣被中途“掛起”；</p>\n</blockquote>\n<ul>\n<li>感知時間</li>\n</ul>\n<blockquote>\n<p>逃避責任就會帶來輕鬆，可那恰恰就是“生命中不能承受之輕”啊！</p>\n</blockquote>\n<p><em>有的時候「逃避雖可恥但有用」，學會判斷什麼是可以逃避的事，什麼是不可逃避的事。</em></p>\n<blockquote>\n<p>學著做每天的“事件日誌”（Event Log）。除了自己經歷的事件之外，<br>一概不記，而且盡量不記感想，不記感受，只記錄事件本身。<br>…<br>…記錄過程要比基於結果的記錄更為詳盡</p>\n</blockquote>\n<p>例子</p>\n<blockquote>\n<blockquote>\n<p>烏里揚諾夫斯克。一九六四年四月七日。分類昆蟲學（畫兩張無名袋蛾的圖）——三小時十五分。鑑定袋蛾——二十分（1.0）。</p>\n<p>附加工作：給斯拉瓦寫信——二小時四十五分（0.5）。</p>\n<p>社會工作：植物保護小組開會——二小時二十五分。休息：給伊戈爾寫信——十分；<br>《烏里揚諾夫斯克真理報》——十分；列夫·托爾斯泰的《塞瓦斯托波爾紀事》——一小時二十五分。</p>\n<p>基本工作合計——六小時二十分。</p>\n</blockquote>\n</blockquote>\n<p><em>✖ 簡單的分類 + 事件 + 費時，最後再合計起來。</em><br><em>(其於事實)條列式的記錄法，與時間調色盤(預定)的方法不太一樣。</em><br><em>你可以預定你要作的事，可是你無法正確的估時 ; 這是事實，請面對這個事實。</em><br><em>輔助上分別為聖的時間切片或許可以有所幫助</em></p>\n<ul>\n<li>記錄開銷 </li>\n</ul>\n<p><em>練習中</em></p>\n<ul>\n<li>制訂預算</li>\n</ul>\n<p><em>✖ 先養成記錄的習慣，再養成制定預算的習慣</em><br><em>✖ 只列事情，重要/不重要</em></p>\n<blockquote><p>每個人都喜歡做有趣的事情，做的時候往往並不關心這件事到底有沒有用。可是，有趣的事不見得有用啊！</p>\n</blockquote>\n<blockquote><p>養成任何一個哪怕很小的習慣都需要掙扎。然而，貌似痛苦的掙扎過程，在將來的某個時刻終將變得其樂無窮。</p>\n</blockquote>\n<ul>\n<li>計劃</li>\n</ul>\n<blockquote><p>計劃成功的前提：目標現實可行</p>\n</blockquote>\n<blockquote><p>我們不是計劃著失敗，而是失敗地計劃(People don’t plan to fail, they fail to plan)。</p>\n</blockquote>\n<p><em>✖ 簡單的判斷目標是不是現實可行</em></p>\n<blockquote><blockquote>\n<p>證明我的目標現實可行的方法比較簡單：</p>\n<ol>\n<li>已經有人做到了。</li>\n<li>我與那個人沒有太大的差距。</li>\n</ol>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>長期計劃是需要通過實踐才能習得的能力</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>沒有人能給我做職業規劃。…生活本身充滿了意外，並且，總是意外到無以復加的地步。</p>\n</blockquote>\n</blockquote>\n<p><em>✖ 先從記錄開始，持續一周，繼續保持記錄下試著開始分配時間。</em><br><em>✖ 再試著從周計劃開始作規劃，練習並且保持。</em></p>\n<blockquote><blockquote>\n<p>計劃固然重要，行動更為重要。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>任何事情，都可能經歷相同的過程：逐步熟悉，小心摸索，失敗、失敗、再失敗，<br>認真反思，捲土重來，直至成功。而最初，在我們對任務連基本的認知都沒有的時候，<br>制定出來的計劃十有八九隻不過是空談。</p>\n</blockquote>\n</blockquote>\n<ul>\n<li><p>列表</p>\n</li>\n<li><p>流程</p>\n</li>\n</ul>\n<p><em>✖ 預想各種可能的情境，不用一次到位，持續整合的重點在持續。</em></p>\n<p>範例:</p>\n<blockquote>\n<p>▷ 確定對方最可能方便接電話的時間（難以確定的時候先發短信詢問）。<br>▷ 在撥打電話甚至發短信詢問對方是否方便之前準備好一切計劃溝通的內容，作好檢查列表放在手邊，確保溝通過程中不會遺漏要點。<br>▷ 通話前把重要信息整理成電子文本，在通話中做必要的更新，通話結束後，馬上通過電子郵件將備忘發送給對方。<br>▷ 若對方沒有接電話，則給對方發署名短信告知詳細事由， 並做好記錄，防止自己遺忘此次溝通任務。<br>▷ ……</p>\n</blockquote>\n<ul>\n<li>預演</li>\n</ul>\n<blockquote>\n<p>準備不足，所以害怕。</p>\n</blockquote>\n<p><em>✖ 類似一種沙箱測試，讓錯誤發生在測試階段。</em></p>\n<ul>\n<li>驗收</li>\n</ul>\n<blockquote>\n<p>向自己提出一個問題並要想辦法回答清楚：“怎樣才算’做好’？</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">本篇心得: 這是需要實際操作的一篇，仍在實踐中。</div><div class=\"line\">首先是記錄自已的時間花在哪裡？</div><div class=\"line\">再來是制定時間的預算，分別出神聖的時間去累積一些東西(ex:學習英文、跑步); </div><div class=\"line\">當習慣養成，就不再困難了，而是生活的一部份。</div><div class=\"line\">同時注意工作的流程，</div><div class=\"line\">1. 問自已What Why How ?</div><div class=\"line\">2. 儘可能拆解工作流程的步驟到最小化，建立列表。</div><div class=\"line\">3. 常常發生的工作要設想各種情境,建立SOP,以縮短時間。</div><div class=\"line\">4. 陌生的工作可以透過預演來試錯。</div><div class=\"line\">5. 一定要驗收。</div><div class=\"line\">6. 面對困難與失敗。</div><div class=\"line\">7. 及時行動!</div><div class=\"line\">8. 及時行動!!</div><div class=\"line\">9. 及時行動!!!</div></pre></td></tr></table></figure>\n<h2 id=\"四、學習\"><a href=\"#四、學習\" class=\"headerlink\" title=\"四、學習\"></a>四、學習</h2><h3 id=\"基本途徑\"><a href=\"#基本途徑\" class=\"headerlink\" title=\"基本途徑\"></a>基本途徑</h3><ul>\n<li>體驗</li>\n<li>觀察</li>\n<li>學習</li>\n</ul>\n<p><em>✖ 自由是可以被剝奪的。</em></p>\n<h3 id=\"經驗局限\"><a href=\"#經驗局限\" class=\"headerlink\" title=\"經驗局限\"></a>經驗局限</h3><blockquote><blockquote>\n<p>日常生活中主要的“溝通障礙”本質上幾乎都是由於溝通雙方無法讓對方理解與他們的經驗相悖的知識或信息造成的。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>長期的進化使人類到達了今天這個高度，但是每個人在出生的那一剎那，居然與其他動物站在幾乎同樣的起點上，心智要從零開始進化。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<blockquote>\n<p>優秀的領導，能夠把人們帶到他們想去的地方；而卓越的領導，能夠把人們帶到他們應該去但是沒想過要去的地方<br>A leader takes people where they want to go. A great leader takes people where they don’t necessarily want to go, but ought to be.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>牢記在這世界上確實存在“與現有經驗相悖的知識”，再把這句話變成經驗，用它去類比未知，而後投入大量的時間和精力去學習和掌握“科學方法論”，掙扎著進化成為真正意義上的“人”。</p>\n</blockquote>\n</blockquote>\n<h3 id=\"自學能力\"><a href=\"#自學能力\" class=\"headerlink\" title=\"自學能力\"></a>自學能力</h3><ul>\n<li>閱讀理解能力 -&gt;檢索能力 -&gt; 寫作能力 -&gt; 實踐能力</li>\n<li>永遠保持開放的心態</li>\n</ul>\n<blockquote>\n<p>最好固定一段時間來把那些目前暫時無法理解的、支持的、反對的、無所謂的論點和觀點記錄下來。對無法理解的，寫下自己當時的疑惑何在；對支持的，記錄幾個理由或者實例；對反對的，同樣記錄幾個理由或者實例；甚至對那些無所謂的，也記錄其原因。一個有著這樣良好記錄習慣的人會獲得他人無法擁有的處理信息和知識的能力——“反芻”。這種“反芻”能力是我們避免成為“選擇性輸入”受害者的重要保障。</p>\n<p>在學習的時候，進展和時間的關係肯定不是線性的：所謂“一分耕耘，一分收穫”。這個關係曲線更可能是階梯狀的：學習過程中有很長時間一點進展都沒有，但從某一刻開始突飛猛進，而後又是長長的一段所謂的“平台期”。…只有經歷積累的過程，“量變到質變”的效果才會出現，才有可能突飛猛進。</p>\n</blockquote>\n<h2 id=\"五、思考\"><a href=\"#五、思考\" class=\"headerlink\" title=\"五、思考\"></a>五、思考</h2><ul>\n<li><a href=\"#c51\">勤於思考</a></li>\n<li><a href=\"#c52\">思維陷阱</a></li>\n<li><a href=\"#c53\">因果關係</a></li>\n<li><a href=\"#c54\">逆命題</a></li>\n<li><a href=\"#c55\">舉證責任</a></li>\n<li><a href=\"#c56\">案例局限</a></li>\n<li><a href=\"#c57\">對立論證</a></li>\n<li><a href=\"#c58\">張冠李戴</a></li>\n<li><a href=\"#c59\">感悟與道理</a></li>\n<li><a href=\"#c510\">克服恐懼</a></li>\n<li><a href=\"#c511\">輔助工具</a><h3 id=\"勤於思考\"><a href=\"#勤於思考\" class=\"headerlink\" title=\"勤於思考\"></a><span id=\"c51\">勤於思考</span></h3></li>\n</ul>\n<blockquote>\n<p>人都有大腦，閒置還是使用，是個問題。</p>\n</blockquote>\n<ol>\n<li>獨立思考</li>\n<li>思考任務的目標、實質、意義</li>\n</ol>\n<blockquote>\n<p>很多人就是這樣，堅持拒絕思考，然後用天下最累的方式生活而不自知。大哲學家羅素曾觀察到這個現象，他為之奇怪並慨嘆，“ 很多人寧願死也不願思考 ”，然後戲謔道，“ 實際上，他們確實死得很快。”</p>\n<blockquote>\n<p>Most people would die sooner than think — in fact they do so.<br>— Bertrand Russell，In The ABC of Relativity，1925，P.166</p>\n</blockquote>\n</blockquote>\n<h3 id=\"思維陷阱\"><a href=\"#思維陷阱\" class=\"headerlink\" title=\"思維陷阱\"></a><span id=\"c52\">思維陷阱</span></h3><h4 id=\"概念不清和拒絕接受不確定性\"><a href=\"#概念不清和拒絕接受不確定性\" class=\"headerlink\" title=\"概念不清和拒絕接受不確定性\"></a>概念不清和拒絕接受不確定性</h4><ol>\n<li>概念不清</li>\n</ol>\n<blockquote><blockquote>\n<p>學習任何知識最重要的一點，就是搞清楚它所有的基礎概念。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>讀教科書，要先把所有概念都記下來，暫時不懂的就死記硬背。把概念牢記於心，就可以通過以後的學習和實踐反複審視它，並形成透徹理解。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>本書強調“時間不可管理”、“我們只能管理自己”，並非咬文嚼字。“時間管理”和“自我管理”是完全不同的概念——焦點不同，方法不同，效果不同</p>\n</blockquote>\n</blockquote>\n<ol>\n<li>拒絕接受不確定性</li>\n</ol>\n<blockquote>\n<p>未知永遠存在。從本質上來看，不確定性和未知是一回事。</p>\n</blockquote>\n<h3 id=\"因果關係\"><a href=\"#因果關係\" class=\"headerlink\" title=\"因果關係\"></a><span id=\"c53\">因果關係</span></h3><h4 id=\"基礎\"><a href=\"#基礎\" class=\"headerlink\" title=\"基礎\"></a>基礎</h4><blockquote>\n<p>外因會影響內因，內因同樣會影響外因。它們相互影響，互為因果。</p>\n<p>舉一個特別好玩的現象為例：在某種意義上，學生的水平決定教師的水平。</p>\n<p>這話並沒有說反。師生之間的有效溝通，肯定不僅是教師單方面的灌輸。越是用心的教師，越關注學生的反饋；越是用心的學生，越關注教師對他的反饋的反饋。顯然，這種溝通不僅是雙向的，還隨著雙方的用心程度而不斷增強。</p>\n<p>這和下棋是一樣的道理。據說，棋藝到了一定程度，棋手就會不由自主地挑選對手，因為跟高手下棋就會進步，但反過來，與“臭手”交手多了，自己的手也會變“臭”……優質的學生，對他們的教師來說，不僅是令人愉悅的教學對象（學生一點就透，老師沒有不開心的），更重要的，他們還是對教師的挑戰——這些學生有著長期而且優秀的學習經驗，也因此擁有相對良好的判斷能力，隨時可能提出一般教師無法回答的問題。經過一段時間的積累，雙方都會因為教學和溝通發生巨大的進步——只要雙方都足夠優秀，足夠用心。</p>\n</blockquote>\n<blockquote><p>正在塑造我們的這個環境，也是我們自己（參與）塑造的</p>\n</blockquote>\n<blockquote>\n<h4 id=\"要做一個用心的人，要用心做事，因為這世界其實也是有“心”的。\"><a href=\"#要做一個用心的人，要用心做事，因為這世界其實也是有“心”的。\" class=\"headerlink\" title=\"要做一個用心的人，要用心做事，因為這世界其實也是有“心”的。\"></a>要做一個用心的人，要用心做事，因為這世界其實也是有“心”的。</h4></blockquote>\n<h4 id=\"雙盲測試\"><a href=\"#雙盲測試\" class=\"headerlink\" title=\"雙盲測試\"></a>雙盲測試</h4><p><em>註: 受測者不知道安慰劑的存在，測試者則不知道誰服用了安慰劑，單純以局外人的角度觀測記錄。</em></p>\n<blockquote>\n<p>人群中也有差不多⅓的人更易受到（來自他人或來自自身的）心理暗示的影響。也就是說，他們更可能在服用安慰劑後病情真正好轉。</p>\n</blockquote>\n<h4 id=\"自證預言\"><a href=\"#自證預言\" class=\"headerlink\" title=\"自證預言\"></a>自證預言</h4><blockquote>\n<p>莫頓教授用銀行擠兌的例子說明了自證預言的作用機理：</p>\n<blockquote>\n<p>一家銀行本來運作得很正常，但不知什麼原因，出現了“這家銀行要倒閉”的流言。流言越傳越廣，導致越來越多的人信以為真，有人為防意外而跑到銀行把自己的存款提走。恐慌情緒蔓延，並且變得愈加真實，更多的人衝進銀行提走自己的存款……最終，擠兌發生了，銀行真的倒閉了。</p>\n</blockquote>\n<p>一個原本並不存在的原因竟然“無中生有”變成了真正的原因。</p>\n</blockquote>\n<h4 id=\"心中恐惧失敗，才是失敗的原因。\"><a href=\"#心中恐惧失敗，才是失敗的原因。\" class=\"headerlink\" title=\"心中恐惧失敗，才是失敗的原因。\"></a>心中恐惧失敗，才是失敗的原因。</h4><h3 id=\"逆命題\"><a href=\"#逆命題\" class=\"headerlink\" title=\"逆命題\"></a><span id=\"c54\">逆命題</span></h3><blockquote>\n<p><strong>原命題為真，它的逆命題不一定為真。</strong><br>P 則 Q 等於 ~Q 則 ~P<br>但是不一定存在 Q 則 P 的關係</p>\n<p>有70%以上的人分不清楚原命題和逆命題之間的區別。</p>\n<blockquote>\n<p>參見《認知心理學》（Cognitive Psychology: A Student’s Handbook，2000），邁克爾·艾森克（Michael W. Eysenck）、馬克·基恩（Mark T. Keane）合著。</p>\n</blockquote>\n</blockquote>\n<p><em>✖ 心得: 人很好騙，至少70%很好騙。</em></p>\n<h3 id=\"舉證責任\"><a href=\"#舉證責任\" class=\"headerlink\" title=\"舉證責任\"></a><span id=\"c55\">舉證責任</span></h3><blockquote>\n<p>“舉證責任”是不對等的<br>爭論雙方的境況常常處於這種狀態：<br>▷其中一方肩負沉重的舉證責任（burden of proof）<br>▷另外一方則享有來自假設的恩惠（benefit of assumption）</p>\n</blockquote>\n<blockquote><p>既然你無法證明我是錯的，那麼我就是對的。這是一種典型的邏輯錯誤</p>\n</blockquote>\n<p><em>✖ 套用一下邏輯學:</em><br><em>我是對的 則 你無法証明我是錯的，恒為真。</em><br><em>你無法証明我是錯的 則 我是錯的，恒為真。</em><br><em>你無法證明我是錯的 則 我是對的，不恒為真</em></p>\n<h3 id=\"案例局限\"><a href=\"#案例局限\" class=\"headerlink\" title=\"案例局限\"></a><span id=\"c56\">案例局限</span></h3><blockquote>\n<p>最為常見的邏輯錯誤就是“以偏概全”——某種經驗在某個人身上應驗了，並不意味著該經驗在所有人身上都會起作用。</p>\n</blockquote>\n<p><em>✖ 常見的推銷話術，我作得到，你也作得到。努力就會成功。</em><br><em>這類的話術可怕的地方在於它不完全是錯的，但是你必需客觀衡量各種條件，而非局限單一案例。</em></p>\n<h3 id=\"對立論證\"><a href=\"#對立論證\" class=\"headerlink\" title=\"對立論證\"></a><span id=\"c57\">對立論證</span></h3><blockquote><blockquote>\n<p>人們可能基於一模一樣的原因做出截然相反的決定。換句話說，用同樣的論據證明截然相反的論點。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>抱怨上司“愚蠢”的人和能夠發覺“上司的愚蠢可能有另外的解釋”的人，得到的結論和採取的行動往往截然相反。<strong>因此，時間在他們接下來的經歷中所產生的伴隨作用也截然相反。這裡，時間再一次選擇與心智強大的人做朋友</strong></p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>一旦意識到對立論證的存在，應該<strong>“哪一個更合理、更現實就接受哪一個”</strong>，而非“哪一個更積極就接受哪一個”，因為後者只是自我欺騙而已。積極的並不總是好的，哪一個極端理想主義者（以及他們的想法、理念）不是積極的呢？</p>\n</blockquote>\n</blockquote>\n<p><em>✖ 職場上不論是留下繼續努力，或是掛冠求去都無對錯之分，而是何者更為合理。這個道理在人生的選擇上也是，需要注意對立論證的存在，堅持或放棄本無對錯，合理的判斷即可。</em></p>\n<h3 id=\"張冠李戴\"><a href=\"#張冠李戴\" class=\"headerlink\" title=\"張冠李戴\"></a><span id=\"c58\">張冠李戴</span></h3><blockquote><blockquote>\n<p>論點和論據之間儘管全無邏輯聯繫，卻可以用一種“顯然合理”的姿態綁在一起。</p>\n</blockquote>\n</blockquote>\n<p>舉例:</p>\n<blockquote>\n<p>將字母A到Z分別編上1到26的分數（A=1,B=2,…,Z=26），然後比較不同單詞的分值：<br>▷Knowledge（知識）得到96分<br>（11+14+15+23+12+5+4+7+5=96）；<br>▷Hardwork（努力）也只得到98分<br>（8+1+18+4+23+15+18+11=98）；<br>▷Attitude（態度）才能左右你生命的全部，<br>因為它能得到100分<br>（1+20+20+9+20+21+4+5=100）——滿分。<br>得出結論：“態度改變一切”。<br>Bullshit（胡說八道）<br>(2+21+12+12+19+8+9+20=103)</p>\n</blockquote>\n<h3 id=\"感悟與道理\"><a href=\"#感悟與道理\" class=\"headerlink\" title=\"感悟與道理\"></a><span id=\"c59\">感悟與道理</span></h3><blockquote><p>“道理”應該是普適的，而“感悟”只來自個體經驗。</p>\n</blockquote>\n<blockquote><p>並非只有專家級別的新聞工作者才要分清“看法與事實之間的區別”，其實每個人都需要清楚地認識“道理”和“感悟”之間的巨大差異。</p>\n</blockquote>\n<blockquote><p>如果某個人把他們說的當作全部，把他們沒說的當作沒有，那麼這個人的智商就跟寓言中那個掩耳盜鈴的傢伙屬於同一個水平了。</p>\n</blockquote>\n<blockquote><p>人類普遍擁有的一個認知偏差就是：把成功攬到自己身上，把失敗歸咎於別人或者壞運氣。（這在心理學上有個術語，叫做“自利性偏差(Self-servingBias)”。）從這裡我們就可以知道，那些“成功者”這麼做的時候，往往並不是有意欺騙——他們甚至出於好意。</p>\n</blockquote>\n<blockquote><p>一個很實用的建議：與其關注成功者，不妨反其道而行之——努力從失敗者身上汲取經驗。</p>\n</blockquote>\n<p><em>✖ 困難的點在於，感悟難以作”雙盲測試”，也深受”案例局限”與”安慰劑效應”影響</em></p>\n<h3 id=\"克服恐懼\"><a href=\"#克服恐懼\" class=\"headerlink\" title=\"克服恐懼\"></a><span id=\"c510\">克服恐懼</span></h3><blockquote><p>“道理都明白，可就做不到”</p>\n</blockquote>\n<h3 id=\"輔助工具\"><a href=\"#輔助工具\" class=\"headerlink\" title=\"輔助工具\"></a><span id=\"c511\">輔助工具</span></h3><h4 id=\"語言\"><a href=\"#語言\" class=\"headerlink\" title=\"語言\"></a>語言</h4><blockquote><p>以下一些句式最好經常使用，因為它們特別有助於獨立思考習慣的養成，並且也有刺激思考的作用：<br>▷……是一回事，而……是另外一回事。<br>▷……和……其實根本不是一回事。<br>▷……不一定……<br>▷……。可是，這並不意味著……<br>▷……也許還有另外一種可能性（解釋）。<br>▷……看起來像……，可是……<br>▷……。而事實卻可能遠比看起來的更為複雜（簡單）。<br>▷……。然而，（這個論斷）反過來（陳述）卻不一定成立……<br>▷……其實很可能與……根本就沒有任何關係。<br>▷……和……之間不一定是單純的因果關係，它們也可能互為因果。<br>▷……和……之間的比較也許沒有任何意義。<br>▷……其實不過是表面現象，其背後的本質是……<br>▷……有一個通常被忽略的前提。<br>▷……儘管聽起來很有道理，然而卻完全不現實。<br>▷……也許有人會說……，但是這種質疑卻……</p>\n</blockquote>\n<blockquote><p>要刻意迴避的句子<br>▷……難道就沒有一點可取之處嗎？<br>▷……要是……就好了！</p>\n</blockquote>\n<h2 id=\"六、交流\"><a href=\"#六、交流\" class=\"headerlink\" title=\"六、交流\"></a>六、交流</h2><h3 id=\"學會傾聽\"><a href=\"#學會傾聽\" class=\"headerlink\" title=\"學會傾聽\"></a>學會傾聽</h3><blockquote><p>為了真正做到有效傾聽，最需要克制的就是“過早質疑”。</p>\n</blockquote>\n<blockquote><p>就算需要質疑，也一定要等到對方把話說完。</p>\n</blockquote>\n<h3 id=\"說與不說\"><a href=\"#說與不說\" class=\"headerlink\" title=\"說與不說\"></a>說與不說</h3><blockquote><p>“知無不言，言無不盡”在大部分情況下是最浪費時間和精力的做法。</p>\n</blockquote>\n<blockquote><p>…在分辨談話對象之前很可能要先分辨自己，所以，<br>“可與言而不與言，失人。不可與言而與之言，失言。”這是說要分辨談話的對象。</p>\n</blockquote>\n<h3 id=\"共生狀態\"><a href=\"#共生狀態\" class=\"headerlink\" title=\"共生狀態\"></a>共生狀態</h3><blockquote>\n<p>見瓦茨拉夫·哈維爾先生製定的《對話守則》：<br>1.對話的目的是尋求真理，不是為了鬥爭。<br>2.不做人身攻擊。<br>3.保持主題。<br>4.辯論時要用證據。<br>5.不要堅持錯誤不改。<br>6.要分清對話與只准自己講話的區別。<br>7.對話要有記錄。<br>8.盡量理解對方。</p>\n</blockquote>\n<blockquote><p>雙方想要進行有意義的討論，最基本的要求就是雙方必須共同遵守“理性討論基本原則”。</p>\n</blockquote>\n<blockquote><p>跨越“自以為是”</p>\n</blockquote>\n<p><em>✖ 「緣督以為經；因其故然」— 莊子。養生主 ; 學習應順其自然，不然會把自已累死。「知知為知知，不知為不知，是知也」—論語</em> </p>\n<blockquote><p>第一個原則：有意義的討論是競合<br>第二個原則：真理是獨立存在的<br>第三個原則：真理不變</p>\n</blockquote>\n<h3 id=\"正確複述\"><a href=\"#正確複述\" class=\"headerlink\" title=\"正確複述\"></a>正確複述</h3><blockquote>\n<p>為了保證溝通順利，往往需要添加一個驗證機制，或者說反饋機制。</p>\n</blockquote>\n<h3 id=\"勤於反思\"><a href=\"#勤於反思\" class=\"headerlink\" title=\"勤於反思\"></a>勤於反思</h3><ul>\n<li>深刻了解經驗的局限</li>\n<li>時時刻刻保持警惕 </li>\n</ul>\n<blockquote>\n<p>手裡只有一把錘子，看什麼問題都像釘子    </p>\n</blockquote>\n<ul>\n<li>用記錄，使自己能夠記住更多的經驗 </li>\n<li>通過觀察和閱讀汲取他人的經驗</li>\n<li>經常試用類比來跨越未知與已知的障礙 </li>\n<li>耐心等待以獲得不能跨越時間的經驗  </li>\n</ul>\n<h2 id=\"七、應用\"><a href=\"#七、應用\" class=\"headerlink\" title=\"七、應用\"></a>七、應用</h2><h3 id=\"興趣\"><a href=\"#興趣\" class=\"headerlink\" title=\"興趣\"></a>興趣</h3><blockquote>\n<p>說來說去，是順序出了問題：往往並不是有興趣才能做好，而是做好了才有興趣。人們總是搞錯順序，並對這樣的錯誤毫不知曉。雖然並非絕對，但完成大多數事情，確實都需要熟能生巧。做得多了，自然就能擅長；擅長了，自然就做得比別人好；做得比別人好了，興趣就濃起來了，而後就更喜歡做、更擅長……進入良性循環。可同樣的，做得多，就需要大量的時間投入，所謂“沒興趣”，往往不過是結果，如果將它當作“不去做好”的理由，最終的懲罰就是大量時間白白流逝。</p>\n</blockquote>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><blockquote>\n<p>所有學習上的成功，都只依靠兩件事——策略和堅持，而堅持本身就是最重要的策略。堅持，其實就是重複；而重複，說到底就是時間的投入，準確地說，是大量時間的投入。</p>\n</blockquote>\n<p><em>✖ 你沒有實際作之前，不會知道效果如何，再在找更好的方法之前，最好的策略是堅持</em></p>\n<h3 id=\"痛苦-比較-運氣\"><a href=\"#痛苦-比較-運氣\" class=\"headerlink\" title=\"痛苦 -比較 - 運氣\"></a>痛苦 -比較 - 運氣</h3><h3 id=\"人脈\"><a href=\"#人脈\" class=\"headerlink\" title=\"人脈\"></a>人脈</h3><blockquote><blockquote>\n<p>當我們把時間花到一個人身上的時候，相當於在他身上傾注了自己生命的一段。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>▷專心做可以提升自己的事情，學習並擁有更多、更好的技能，成為一個值得他人交往的人。<br>▷學會獨善其身，以不給他人製造麻煩為美德，用自己的獨立贏得尊重。</p>\n</blockquote>\n</blockquote>\n<p><em>✖ 人必自重而後人重之—你值得人家交往，人家就會來跟你交往。</em></p>\n<h3 id=\"自卑\"><a href=\"#自卑\" class=\"headerlink\" title=\"自卑\"></a>自卑</h3><p><em>✖  保持謙卑，認識真正的自已。</em></p>\n<h3 id=\"靈感\"><a href=\"#靈感\" class=\"headerlink\" title=\"靈感\"></a>靈感</h3><p><em>✖ 靈感來自於累積，筆記是一個好工具</em></p>\n<h3 id=\"鼓勵\"><a href=\"#鼓勵\" class=\"headerlink\" title=\"鼓勵\"></a>鼓勵</h3><h3 id=\"效率\"><a href=\"#效率\" class=\"headerlink\" title=\"效率\"></a>效率</h3><h3 id=\"節奏\"><a href=\"#節奏\" class=\"headerlink\" title=\"節奏\"></a>節奏</h3><h3 id=\"物極必反\"><a href=\"#物極必反\" class=\"headerlink\" title=\"物極必反\"></a>物極必反</h3><blockquote>\n<ul>\n<li>絕對不要盲目地試圖減少睡眠時間</li>\n<li>盡量不要減少與家庭成員交流的時間</li>\n<li>最好不要放棄你的社交時間</li>\n</ul>\n</blockquote>\n<h3 id=\"自我證明\"><a href=\"#自我證明\" class=\"headerlink\" title=\"自我證明\"></a>自我證明</h3><h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"http://zhibimo.com/read/xiaolai/ba-shi-jian-dang-zuo-peng-you/index.html\" target=\"_blank\" rel=\"external\">電子書</a></li>\n<li><a href=\"http://www.books.com.tw/products/CN11349756\" target=\"_blank\" rel=\"external\">奇特的一生</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"零、困境\"><a href=\"#零、困境\" class=\"headerlink\" title=\"零、困境\"></a>零、困境</h2><p><em>✖ 時間無法管理 能管理的只有你自已。</em></p>\n<h2 id=\"一、醒悟\"><a href=\"#一、醒悟\" class=\"headerlink\" title=\"一、醒悟\"></a>一、醒悟</h2><ul>\n<li><em>✖ 用思考控制思考</em></li>\n<li><em>✖ 心智:就是心靈的智慧，用理性處理感性，控制情緒與慾望。</em></li>\n<li><em>✖ 人會在相同的情況下作出完全相反的結論</em></li>\n</ul>\n<blockquote>\n<p>…歷史上也常常出現這種情況——其實目的都是“為了人類更好的明天”，可偏偏出現了對立的兩派人，<br>他們為了原本一模一樣的理想爭執不休，甚至“拋頭顱”、“撒熱血”，犧牲幾代人的福祉。  </p>\n<blockquote>\n<p>比如，所謂“水火不相容”的“社會主義陣營”和“資本主義陣營”。</p>\n</blockquote>\n<p>看穿這一切，擺脫自己的局限，需要心智的力量。</p>\n</blockquote>\n<h2 id=\"二、現實\"><a href=\"#二、現實\" class=\"headerlink\" title=\"二、現實\"></a>二、現實</h2><ul>\n<li>速成絕無可能</li>\n<li>交換才是硬道理</li>\n<li>完美永不存在</li>\n<li>未知永遠存在<blockquote>\n<p>未知分為兩種：一種是永遠不能解決的，另一種是在可預見的未來也許能夠解決的。</p>\n</blockquote>\n</li>\n</ul>\n<p><em>✖ 吾生也有涯，而知也無涯。以有涯隨無涯，殆已！已而為知者，殆而已矣！…指窮於為薪，火傳也，不知其盡也。–莊子。養生主</em></p>\n<p><em>✖ 站在巨人的肩膀上</em></p>\n<ul>\n<li>現狀無法馬上擺脫</li>\n</ul>\n<blockquote><p>接受現狀才是最優策略——有什麼做什麼，有什麼用什麼；做什麼都做好，用什麼都用好。<br>不要常常覺得苦（這會讓人忍不住顧影自憐，浪費精力與時間），而要想辦法在任何情況下找到情趣——<br>——<strong>快樂是一種本事</strong>。</p>\n</blockquote> \n<blockquote><p>心懷“夢想”的時間越長，它的沉沒成本就越高。</p>\n</blockquote> \n<p><em>✖ 積沙成塔，滴水穿石，時間可以累積，也可以消耗。</em></p>\n<ul>\n<li>與時間做朋友</li>\n</ul>\n<blockquote><p>與時間做朋友的方法很簡單：用正確的方法做正確的事情。</p>\n</blockquote>\n<blockquote><p>儘管現實總是如此難於接受，堅強的你卻應該坦然。以上提到的種種現實，包括“速成絕無可能”、“只有付出才有收穫”、“完美永不存在”、“未知永遠存在”、“現狀無法馬上擺脫”，都既清楚又簡單，你必須要接受——不僅要接受，還要牢記；不僅要牢記，還要堅信，不容半點動搖。最好時常把自己的一些念頭記下來，然後與這幾條現實對照，看看它們是否與這些現實相符。</p>\n</blockquote> \n<blockquote><p>時間是現實的人的朋友，是不現實的人的敵人。時間不是故意要這樣做，只不過事實如此。</p>\n</blockquote> \n<p><em>✖ 正確的事，正確的做 ; 首先要學會判斷什麼是正確的事。</em></p>\n<h2 id=\"三、管理\"><a href=\"#三、管理\" class=\"headerlink\" title=\"三、管理\"></a>三、管理</h2><ul>\n<li>估算時間</li>\n</ul>\n<blockquote><p>分辨任務的屬性——它是熟悉的還是陌生的呢?</p>\n</blockquote>\n<blockquote><p>對學習來說，任務“陌生”的可能性更大，因為學習本身是一個探索未知的過程。完成學習任務常常需要花費比我們想像中多得多的時間。對工作來說，任務“熟悉”的可能性更大。因為工作本身是一個應用已知的過程。</p>\n</blockquote>\n<p><em>✖ 軟體工作的這個行業，很有可能是大多數是未知的情況。</em></p>\n<ul>\n<li>及時行動</li>\n</ul>\n<blockquote><p>接受任務之後，什麼時候開始執行才好呢？比“越早開始越好”更切實的答案是“現在就開始”。</p>\n</blockquote>\n<p><em>✖ ASAP 不是一個好答案 NOW 才是。</em></p>\n<p><em>✖ 不求有功，但求無過是種慢性自殺，滴水穿石—會消磨掉你的累積。</em></p>\n<ul>\n<li>直面困難</li>\n</ul>\n<blockquote>\n<p>效率低下的根本原因是什麼？答案是：迴避困難。<br>……<br>……這些問題都源自同一個習慣：專做簡單的，迴避困難的。</p>\n</blockquote>\n<ul>\n<li>關注步驟</li>\n</ul>\n<blockquote><p>所謂“三思而行”在我看來就是指做任何事情之前都要考慮相關的3個方面：內容（What）、原因（Why）、方法（How）。任何任務都起碼具備3個屬性：何事（What）、何因（Why）、何法（How）。</p>\n</blockquote>\n<blockquote><p>不停地細分、拆解任務，而且越具體越好，直至每個小任務都可以由一個人獨立完成。</p>\n</blockquote>\n<p>例子</p>\n<blockquote>\n<p>擴充詞彙量→托福詞彙→托福核心詞彙→21個單元→每個單元大約100 個單詞→一個單元分2次完成……<br>▷ 先嘗試做一兩個階段，測量一下完成一個階段需要多長時間。<br>▷ 按照測量的結果製作一個時間表，把其餘若干個階段所需要的時間填寫完整（最終總是需要做一些調整的）。<br>▷ 背單詞需要重複，所以，每3個階段過後要留出與完成1個階段相等的時間去複習。這就意味著一共需要花費完成56（42+14）個階段的時間。<br>▷ 每完成總任務的1/3，就增加與完成1個階段相等的再复習時間。這就意味著一共需要花費完成59（56+3）個階段的時間。<br>▷ 學習過程中可能需要多次快速重複記憶，每次可能相當於完成3～5個階段所需要的時間。由於熟悉程度的不斷增加，每次重複記憶所需要的時間會越來越短，所以，預計進行3次重複記憶需要相當於10個階段的時間。這就意味著一共需要花費完成69（59+10）個階段的時間。</p>\n<p>完成每個階段的具體步驟。</p>\n<p>▷ 每天早晨騰出一點時間。<br>▷ 把前一天背過的單詞朗讀至少2 遍。<br>▷ 聽錄音，跟讀當天要背的單詞3～5遍，主要關注發音、拼寫，順帶看看詞義，能記多少就記多少，不求速成。<br>▷ 上午利用閒暇時間通讀詞彙列表，並反复閱讀例句。<br>▷ 下午用專門的時間把當天要背的單詞集中背2～3遍。可以一邊讀，一邊抄，一邊背，不要只是坐在那里呆呆地盯著詞彙看。<br>▷ 空閒的時候反复聽當天要背的單詞，重複次數越多越好。<br>▷ 晚上睡覺前複習當天背的單詞。</p>\n</blockquote>\n<ul>\n<li>並行串行</li>\n</ul>\n<p><em>✖ 拆分細項，尋找並行的可能。</em></p>\n<blockquote>\n<p>華羅庚先生曾經用燒水泡茶為例說明過這個問題。</p>\n<blockquote>\n<p>燒水泡茶：參見《統籌方法平話及補充》，華羅庚著，中國工業出版社，1966。<br>▷ 辦法甲：洗好水壺，灌上涼水，放在火上。在等待水開的時候洗茶壺、洗茶杯、拿茶葉。等到水開，泡茶喝。<br>▷ 辦法乙：先做好一些準備工作，包括洗水壺、洗壺杯、拿茶葉。一切就緒，灌水、燒水，坐待水開了泡茶喝。<br>▷ 辦法丙：洗淨開壺，灌上涼水，放在火上，坐待水開。水開了之後急急忙忙找茶葉、洗茶壺、茶杯，泡茶喝。</p>\n</blockquote>\n</blockquote>\n<p><em>✖ 分別為聖的<strong>時間片</strong></em></p>\n<blockquote>\n<p>一個處理器在一個時間段內其實只能做一件事，因為它只有一個個體、一個時空。而多任務操作系統把一個長時間段劃分成很多短小的時間片，每個時間片只讓處理器執行一個進程（Process）——儘管同時可能有多個進程需要處理。在第一個時間片裡，操作系統讓處理器處理A進程；時間片的時間用完之後，無論A進程處理到什麼程度，都要被“掛起”（即，A進程這時不能再佔用處理器資源——儘管它還是被允許使用計算機的其他資源，如內存、磁盤、屏幕輸出等）；在第二個時間片裡，處理器處理的是B進程，時間用完之後，B進程將與A進程一樣被中途“掛起”；</p>\n</blockquote>\n<ul>\n<li>感知時間</li>\n</ul>\n<blockquote>\n<p>逃避責任就會帶來輕鬆，可那恰恰就是“生命中不能承受之輕”啊！</p>\n</blockquote>\n<p><em>有的時候「逃避雖可恥但有用」，學會判斷什麼是可以逃避的事，什麼是不可逃避的事。</em></p>\n<blockquote>\n<p>學著做每天的“事件日誌”（Event Log）。除了自己經歷的事件之外，<br>一概不記，而且盡量不記感想，不記感受，只記錄事件本身。<br>…<br>…記錄過程要比基於結果的記錄更為詳盡</p>\n</blockquote>\n<p>例子</p>\n<blockquote>\n<blockquote>\n<p>烏里揚諾夫斯克。一九六四年四月七日。分類昆蟲學（畫兩張無名袋蛾的圖）——三小時十五分。鑑定袋蛾——二十分（1.0）。</p>\n<p>附加工作：給斯拉瓦寫信——二小時四十五分（0.5）。</p>\n<p>社會工作：植物保護小組開會——二小時二十五分。休息：給伊戈爾寫信——十分；<br>《烏里揚諾夫斯克真理報》——十分；列夫·托爾斯泰的《塞瓦斯托波爾紀事》——一小時二十五分。</p>\n<p>基本工作合計——六小時二十分。</p>\n</blockquote>\n</blockquote>\n<p><em>✖ 簡單的分類 + 事件 + 費時，最後再合計起來。</em><br><em>(其於事實)條列式的記錄法，與時間調色盤(預定)的方法不太一樣。</em><br><em>你可以預定你要作的事，可是你無法正確的估時 ; 這是事實，請面對這個事實。</em><br><em>輔助上分別為聖的時間切片或許可以有所幫助</em></p>\n<ul>\n<li>記錄開銷 </li>\n</ul>\n<p><em>練習中</em></p>\n<ul>\n<li>制訂預算</li>\n</ul>\n<p><em>✖ 先養成記錄的習慣，再養成制定預算的習慣</em><br><em>✖ 只列事情，重要/不重要</em></p>\n<blockquote><p>每個人都喜歡做有趣的事情，做的時候往往並不關心這件事到底有沒有用。可是，有趣的事不見得有用啊！</p>\n</blockquote>\n<blockquote><p>養成任何一個哪怕很小的習慣都需要掙扎。然而，貌似痛苦的掙扎過程，在將來的某個時刻終將變得其樂無窮。</p>\n</blockquote>\n<ul>\n<li>計劃</li>\n</ul>\n<blockquote><p>計劃成功的前提：目標現實可行</p>\n</blockquote>\n<blockquote><p>我們不是計劃著失敗，而是失敗地計劃(People don’t plan to fail, they fail to plan)。</p>\n</blockquote>\n<p><em>✖ 簡單的判斷目標是不是現實可行</em></p>\n<blockquote><blockquote>\n<p>證明我的目標現實可行的方法比較簡單：</p>\n<ol>\n<li>已經有人做到了。</li>\n<li>我與那個人沒有太大的差距。</li>\n</ol>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>長期計劃是需要通過實踐才能習得的能力</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>沒有人能給我做職業規劃。…生活本身充滿了意外，並且，總是意外到無以復加的地步。</p>\n</blockquote>\n</blockquote>\n<p><em>✖ 先從記錄開始，持續一周，繼續保持記錄下試著開始分配時間。</em><br><em>✖ 再試著從周計劃開始作規劃，練習並且保持。</em></p>\n<blockquote><blockquote>\n<p>計劃固然重要，行動更為重要。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>任何事情，都可能經歷相同的過程：逐步熟悉，小心摸索，失敗、失敗、再失敗，<br>認真反思，捲土重來，直至成功。而最初，在我們對任務連基本的認知都沒有的時候，<br>制定出來的計劃十有八九隻不過是空談。</p>\n</blockquote>\n</blockquote>\n<ul>\n<li><p>列表</p>\n</li>\n<li><p>流程</p>\n</li>\n</ul>\n<p><em>✖ 預想各種可能的情境，不用一次到位，持續整合的重點在持續。</em></p>\n<p>範例:</p>\n<blockquote>\n<p>▷ 確定對方最可能方便接電話的時間（難以確定的時候先發短信詢問）。<br>▷ 在撥打電話甚至發短信詢問對方是否方便之前準備好一切計劃溝通的內容，作好檢查列表放在手邊，確保溝通過程中不會遺漏要點。<br>▷ 通話前把重要信息整理成電子文本，在通話中做必要的更新，通話結束後，馬上通過電子郵件將備忘發送給對方。<br>▷ 若對方沒有接電話，則給對方發署名短信告知詳細事由， 並做好記錄，防止自己遺忘此次溝通任務。<br>▷ ……</p>\n</blockquote>\n<ul>\n<li>預演</li>\n</ul>\n<blockquote>\n<p>準備不足，所以害怕。</p>\n</blockquote>\n<p><em>✖ 類似一種沙箱測試，讓錯誤發生在測試階段。</em></p>\n<ul>\n<li>驗收</li>\n</ul>\n<blockquote>\n<p>向自己提出一個問題並要想辦法回答清楚：“怎樣才算’做好’？</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">本篇心得: 這是需要實際操作的一篇，仍在實踐中。</div><div class=\"line\">首先是記錄自已的時間花在哪裡？</div><div class=\"line\">再來是制定時間的預算，分別出神聖的時間去累積一些東西(ex:學習英文、跑步); </div><div class=\"line\">當習慣養成，就不再困難了，而是生活的一部份。</div><div class=\"line\">同時注意工作的流程，</div><div class=\"line\">1. 問自已What Why How ?</div><div class=\"line\">2. 儘可能拆解工作流程的步驟到最小化，建立列表。</div><div class=\"line\">3. 常常發生的工作要設想各種情境,建立SOP,以縮短時間。</div><div class=\"line\">4. 陌生的工作可以透過預演來試錯。</div><div class=\"line\">5. 一定要驗收。</div><div class=\"line\">6. 面對困難與失敗。</div><div class=\"line\">7. 及時行動!</div><div class=\"line\">8. 及時行動!!</div><div class=\"line\">9. 及時行動!!!</div></pre></td></tr></table></figure>\n<h2 id=\"四、學習\"><a href=\"#四、學習\" class=\"headerlink\" title=\"四、學習\"></a>四、學習</h2><h3 id=\"基本途徑\"><a href=\"#基本途徑\" class=\"headerlink\" title=\"基本途徑\"></a>基本途徑</h3><ul>\n<li>體驗</li>\n<li>觀察</li>\n<li>學習</li>\n</ul>\n<p><em>✖ 自由是可以被剝奪的。</em></p>\n<h3 id=\"經驗局限\"><a href=\"#經驗局限\" class=\"headerlink\" title=\"經驗局限\"></a>經驗局限</h3><blockquote><blockquote>\n<p>日常生活中主要的“溝通障礙”本質上幾乎都是由於溝通雙方無法讓對方理解與他們的經驗相悖的知識或信息造成的。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>長期的進化使人類到達了今天這個高度，但是每個人在出生的那一剎那，居然與其他動物站在幾乎同樣的起點上，心智要從零開始進化。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<blockquote>\n<p>優秀的領導，能夠把人們帶到他們想去的地方；而卓越的領導，能夠把人們帶到他們應該去但是沒想過要去的地方<br>A leader takes people where they want to go. A great leader takes people where they don’t necessarily want to go, but ought to be.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>牢記在這世界上確實存在“與現有經驗相悖的知識”，再把這句話變成經驗，用它去類比未知，而後投入大量的時間和精力去學習和掌握“科學方法論”，掙扎著進化成為真正意義上的“人”。</p>\n</blockquote>\n</blockquote>\n<h3 id=\"自學能力\"><a href=\"#自學能力\" class=\"headerlink\" title=\"自學能力\"></a>自學能力</h3><ul>\n<li>閱讀理解能力 -&gt;檢索能力 -&gt; 寫作能力 -&gt; 實踐能力</li>\n<li>永遠保持開放的心態</li>\n</ul>\n<blockquote>\n<p>最好固定一段時間來把那些目前暫時無法理解的、支持的、反對的、無所謂的論點和觀點記錄下來。對無法理解的，寫下自己當時的疑惑何在；對支持的，記錄幾個理由或者實例；對反對的，同樣記錄幾個理由或者實例；甚至對那些無所謂的，也記錄其原因。一個有著這樣良好記錄習慣的人會獲得他人無法擁有的處理信息和知識的能力——“反芻”。這種“反芻”能力是我們避免成為“選擇性輸入”受害者的重要保障。</p>\n<p>在學習的時候，進展和時間的關係肯定不是線性的：所謂“一分耕耘，一分收穫”。這個關係曲線更可能是階梯狀的：學習過程中有很長時間一點進展都沒有，但從某一刻開始突飛猛進，而後又是長長的一段所謂的“平台期”。…只有經歷積累的過程，“量變到質變”的效果才會出現，才有可能突飛猛進。</p>\n</blockquote>\n<h2 id=\"五、思考\"><a href=\"#五、思考\" class=\"headerlink\" title=\"五、思考\"></a>五、思考</h2><ul>\n<li><a href=\"#c51\">勤於思考</a></li>\n<li><a href=\"#c52\">思維陷阱</a></li>\n<li><a href=\"#c53\">因果關係</a></li>\n<li><a href=\"#c54\">逆命題</a></li>\n<li><a href=\"#c55\">舉證責任</a></li>\n<li><a href=\"#c56\">案例局限</a></li>\n<li><a href=\"#c57\">對立論證</a></li>\n<li><a href=\"#c58\">張冠李戴</a></li>\n<li><a href=\"#c59\">感悟與道理</a></li>\n<li><a href=\"#c510\">克服恐懼</a></li>\n<li><a href=\"#c511\">輔助工具</a><h3 id=\"勤於思考\"><a href=\"#勤於思考\" class=\"headerlink\" title=\"勤於思考\"></a><span id=\"c51\">勤於思考</span></h3></li>\n</ul>\n<blockquote>\n<p>人都有大腦，閒置還是使用，是個問題。</p>\n</blockquote>\n<ol>\n<li>獨立思考</li>\n<li>思考任務的目標、實質、意義</li>\n</ol>\n<blockquote>\n<p>很多人就是這樣，堅持拒絕思考，然後用天下最累的方式生活而不自知。大哲學家羅素曾觀察到這個現象，他為之奇怪並慨嘆，“ 很多人寧願死也不願思考 ”，然後戲謔道，“ 實際上，他們確實死得很快。”</p>\n<blockquote>\n<p>Most people would die sooner than think — in fact they do so.<br>— Bertrand Russell，In The ABC of Relativity，1925，P.166</p>\n</blockquote>\n</blockquote>\n<h3 id=\"思維陷阱\"><a href=\"#思維陷阱\" class=\"headerlink\" title=\"思維陷阱\"></a><span id=\"c52\">思維陷阱</span></h3><h4 id=\"概念不清和拒絕接受不確定性\"><a href=\"#概念不清和拒絕接受不確定性\" class=\"headerlink\" title=\"概念不清和拒絕接受不確定性\"></a>概念不清和拒絕接受不確定性</h4><ol>\n<li>概念不清</li>\n</ol>\n<blockquote><blockquote>\n<p>學習任何知識最重要的一點，就是搞清楚它所有的基礎概念。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>讀教科書，要先把所有概念都記下來，暫時不懂的就死記硬背。把概念牢記於心，就可以通過以後的學習和實踐反複審視它，並形成透徹理解。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>本書強調“時間不可管理”、“我們只能管理自己”，並非咬文嚼字。“時間管理”和“自我管理”是完全不同的概念——焦點不同，方法不同，效果不同</p>\n</blockquote>\n</blockquote>\n<ol>\n<li>拒絕接受不確定性</li>\n</ol>\n<blockquote>\n<p>未知永遠存在。從本質上來看，不確定性和未知是一回事。</p>\n</blockquote>\n<h3 id=\"因果關係\"><a href=\"#因果關係\" class=\"headerlink\" title=\"因果關係\"></a><span id=\"c53\">因果關係</span></h3><h4 id=\"基礎\"><a href=\"#基礎\" class=\"headerlink\" title=\"基礎\"></a>基礎</h4><blockquote>\n<p>外因會影響內因，內因同樣會影響外因。它們相互影響，互為因果。</p>\n<p>舉一個特別好玩的現象為例：在某種意義上，學生的水平決定教師的水平。</p>\n<p>這話並沒有說反。師生之間的有效溝通，肯定不僅是教師單方面的灌輸。越是用心的教師，越關注學生的反饋；越是用心的學生，越關注教師對他的反饋的反饋。顯然，這種溝通不僅是雙向的，還隨著雙方的用心程度而不斷增強。</p>\n<p>這和下棋是一樣的道理。據說，棋藝到了一定程度，棋手就會不由自主地挑選對手，因為跟高手下棋就會進步，但反過來，與“臭手”交手多了，自己的手也會變“臭”……優質的學生，對他們的教師來說，不僅是令人愉悅的教學對象（學生一點就透，老師沒有不開心的），更重要的，他們還是對教師的挑戰——這些學生有著長期而且優秀的學習經驗，也因此擁有相對良好的判斷能力，隨時可能提出一般教師無法回答的問題。經過一段時間的積累，雙方都會因為教學和溝通發生巨大的進步——只要雙方都足夠優秀，足夠用心。</p>\n</blockquote>\n<blockquote><p>正在塑造我們的這個環境，也是我們自己（參與）塑造的</p>\n</blockquote>\n<blockquote>\n<h4 id=\"要做一個用心的人，要用心做事，因為這世界其實也是有“心”的。\"><a href=\"#要做一個用心的人，要用心做事，因為這世界其實也是有“心”的。\" class=\"headerlink\" title=\"要做一個用心的人，要用心做事，因為這世界其實也是有“心”的。\"></a>要做一個用心的人，要用心做事，因為這世界其實也是有“心”的。</h4></blockquote>\n<h4 id=\"雙盲測試\"><a href=\"#雙盲測試\" class=\"headerlink\" title=\"雙盲測試\"></a>雙盲測試</h4><p><em>註: 受測者不知道安慰劑的存在，測試者則不知道誰服用了安慰劑，單純以局外人的角度觀測記錄。</em></p>\n<blockquote>\n<p>人群中也有差不多⅓的人更易受到（來自他人或來自自身的）心理暗示的影響。也就是說，他們更可能在服用安慰劑後病情真正好轉。</p>\n</blockquote>\n<h4 id=\"自證預言\"><a href=\"#自證預言\" class=\"headerlink\" title=\"自證預言\"></a>自證預言</h4><blockquote>\n<p>莫頓教授用銀行擠兌的例子說明了自證預言的作用機理：</p>\n<blockquote>\n<p>一家銀行本來運作得很正常，但不知什麼原因，出現了“這家銀行要倒閉”的流言。流言越傳越廣，導致越來越多的人信以為真，有人為防意外而跑到銀行把自己的存款提走。恐慌情緒蔓延，並且變得愈加真實，更多的人衝進銀行提走自己的存款……最終，擠兌發生了，銀行真的倒閉了。</p>\n</blockquote>\n<p>一個原本並不存在的原因竟然“無中生有”變成了真正的原因。</p>\n</blockquote>\n<h4 id=\"心中恐惧失敗，才是失敗的原因。\"><a href=\"#心中恐惧失敗，才是失敗的原因。\" class=\"headerlink\" title=\"心中恐惧失敗，才是失敗的原因。\"></a>心中恐惧失敗，才是失敗的原因。</h4><h3 id=\"逆命題\"><a href=\"#逆命題\" class=\"headerlink\" title=\"逆命題\"></a><span id=\"c54\">逆命題</span></h3><blockquote>\n<p><strong>原命題為真，它的逆命題不一定為真。</strong><br>P 則 Q 等於 ~Q 則 ~P<br>但是不一定存在 Q 則 P 的關係</p>\n<p>有70%以上的人分不清楚原命題和逆命題之間的區別。</p>\n<blockquote>\n<p>參見《認知心理學》（Cognitive Psychology: A Student’s Handbook，2000），邁克爾·艾森克（Michael W. Eysenck）、馬克·基恩（Mark T. Keane）合著。</p>\n</blockquote>\n</blockquote>\n<p><em>✖ 心得: 人很好騙，至少70%很好騙。</em></p>\n<h3 id=\"舉證責任\"><a href=\"#舉證責任\" class=\"headerlink\" title=\"舉證責任\"></a><span id=\"c55\">舉證責任</span></h3><blockquote>\n<p>“舉證責任”是不對等的<br>爭論雙方的境況常常處於這種狀態：<br>▷其中一方肩負沉重的舉證責任（burden of proof）<br>▷另外一方則享有來自假設的恩惠（benefit of assumption）</p>\n</blockquote>\n<blockquote><p>既然你無法證明我是錯的，那麼我就是對的。這是一種典型的邏輯錯誤</p>\n</blockquote>\n<p><em>✖ 套用一下邏輯學:</em><br><em>我是對的 則 你無法証明我是錯的，恒為真。</em><br><em>你無法証明我是錯的 則 我是錯的，恒為真。</em><br><em>你無法證明我是錯的 則 我是對的，不恒為真</em></p>\n<h3 id=\"案例局限\"><a href=\"#案例局限\" class=\"headerlink\" title=\"案例局限\"></a><span id=\"c56\">案例局限</span></h3><blockquote>\n<p>最為常見的邏輯錯誤就是“以偏概全”——某種經驗在某個人身上應驗了，並不意味著該經驗在所有人身上都會起作用。</p>\n</blockquote>\n<p><em>✖ 常見的推銷話術，我作得到，你也作得到。努力就會成功。</em><br><em>這類的話術可怕的地方在於它不完全是錯的，但是你必需客觀衡量各種條件，而非局限單一案例。</em></p>\n<h3 id=\"對立論證\"><a href=\"#對立論證\" class=\"headerlink\" title=\"對立論證\"></a><span id=\"c57\">對立論證</span></h3><blockquote><blockquote>\n<p>人們可能基於一模一樣的原因做出截然相反的決定。換句話說，用同樣的論據證明截然相反的論點。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>抱怨上司“愚蠢”的人和能夠發覺“上司的愚蠢可能有另外的解釋”的人，得到的結論和採取的行動往往截然相反。<strong>因此，時間在他們接下來的經歷中所產生的伴隨作用也截然相反。這裡，時間再一次選擇與心智強大的人做朋友</strong></p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>一旦意識到對立論證的存在，應該<strong>“哪一個更合理、更現實就接受哪一個”</strong>，而非“哪一個更積極就接受哪一個”，因為後者只是自我欺騙而已。積極的並不總是好的，哪一個極端理想主義者（以及他們的想法、理念）不是積極的呢？</p>\n</blockquote>\n</blockquote>\n<p><em>✖ 職場上不論是留下繼續努力，或是掛冠求去都無對錯之分，而是何者更為合理。這個道理在人生的選擇上也是，需要注意對立論證的存在，堅持或放棄本無對錯，合理的判斷即可。</em></p>\n<h3 id=\"張冠李戴\"><a href=\"#張冠李戴\" class=\"headerlink\" title=\"張冠李戴\"></a><span id=\"c58\">張冠李戴</span></h3><blockquote><blockquote>\n<p>論點和論據之間儘管全無邏輯聯繫，卻可以用一種“顯然合理”的姿態綁在一起。</p>\n</blockquote>\n</blockquote>\n<p>舉例:</p>\n<blockquote>\n<p>將字母A到Z分別編上1到26的分數（A=1,B=2,…,Z=26），然後比較不同單詞的分值：<br>▷Knowledge（知識）得到96分<br>（11+14+15+23+12+5+4+7+5=96）；<br>▷Hardwork（努力）也只得到98分<br>（8+1+18+4+23+15+18+11=98）；<br>▷Attitude（態度）才能左右你生命的全部，<br>因為它能得到100分<br>（1+20+20+9+20+21+4+5=100）——滿分。<br>得出結論：“態度改變一切”。<br>Bullshit（胡說八道）<br>(2+21+12+12+19+8+9+20=103)</p>\n</blockquote>\n<h3 id=\"感悟與道理\"><a href=\"#感悟與道理\" class=\"headerlink\" title=\"感悟與道理\"></a><span id=\"c59\">感悟與道理</span></h3><blockquote><p>“道理”應該是普適的，而“感悟”只來自個體經驗。</p>\n</blockquote>\n<blockquote><p>並非只有專家級別的新聞工作者才要分清“看法與事實之間的區別”，其實每個人都需要清楚地認識“道理”和“感悟”之間的巨大差異。</p>\n</blockquote>\n<blockquote><p>如果某個人把他們說的當作全部，把他們沒說的當作沒有，那麼這個人的智商就跟寓言中那個掩耳盜鈴的傢伙屬於同一個水平了。</p>\n</blockquote>\n<blockquote><p>人類普遍擁有的一個認知偏差就是：把成功攬到自己身上，把失敗歸咎於別人或者壞運氣。（這在心理學上有個術語，叫做“自利性偏差(Self-servingBias)”。）從這裡我們就可以知道，那些“成功者”這麼做的時候，往往並不是有意欺騙——他們甚至出於好意。</p>\n</blockquote>\n<blockquote><p>一個很實用的建議：與其關注成功者，不妨反其道而行之——努力從失敗者身上汲取經驗。</p>\n</blockquote>\n<p><em>✖ 困難的點在於，感悟難以作”雙盲測試”，也深受”案例局限”與”安慰劑效應”影響</em></p>\n<h3 id=\"克服恐懼\"><a href=\"#克服恐懼\" class=\"headerlink\" title=\"克服恐懼\"></a><span id=\"c510\">克服恐懼</span></h3><blockquote><p>“道理都明白，可就做不到”</p>\n</blockquote>\n<h3 id=\"輔助工具\"><a href=\"#輔助工具\" class=\"headerlink\" title=\"輔助工具\"></a><span id=\"c511\">輔助工具</span></h3><h4 id=\"語言\"><a href=\"#語言\" class=\"headerlink\" title=\"語言\"></a>語言</h4><blockquote><p>以下一些句式最好經常使用，因為它們特別有助於獨立思考習慣的養成，並且也有刺激思考的作用：<br>▷……是一回事，而……是另外一回事。<br>▷……和……其實根本不是一回事。<br>▷……不一定……<br>▷……。可是，這並不意味著……<br>▷……也許還有另外一種可能性（解釋）。<br>▷……看起來像……，可是……<br>▷……。而事實卻可能遠比看起來的更為複雜（簡單）。<br>▷……。然而，（這個論斷）反過來（陳述）卻不一定成立……<br>▷……其實很可能與……根本就沒有任何關係。<br>▷……和……之間不一定是單純的因果關係，它們也可能互為因果。<br>▷……和……之間的比較也許沒有任何意義。<br>▷……其實不過是表面現象，其背後的本質是……<br>▷……有一個通常被忽略的前提。<br>▷……儘管聽起來很有道理，然而卻完全不現實。<br>▷……也許有人會說……，但是這種質疑卻……</p>\n</blockquote>\n<blockquote><p>要刻意迴避的句子<br>▷……難道就沒有一點可取之處嗎？<br>▷……要是……就好了！</p>\n</blockquote>\n<h2 id=\"六、交流\"><a href=\"#六、交流\" class=\"headerlink\" title=\"六、交流\"></a>六、交流</h2><h3 id=\"學會傾聽\"><a href=\"#學會傾聽\" class=\"headerlink\" title=\"學會傾聽\"></a>學會傾聽</h3><blockquote><p>為了真正做到有效傾聽，最需要克制的就是“過早質疑”。</p>\n</blockquote>\n<blockquote><p>就算需要質疑，也一定要等到對方把話說完。</p>\n</blockquote>\n<h3 id=\"說與不說\"><a href=\"#說與不說\" class=\"headerlink\" title=\"說與不說\"></a>說與不說</h3><blockquote><p>“知無不言，言無不盡”在大部分情況下是最浪費時間和精力的做法。</p>\n</blockquote>\n<blockquote><p>…在分辨談話對象之前很可能要先分辨自己，所以，<br>“可與言而不與言，失人。不可與言而與之言，失言。”這是說要分辨談話的對象。</p>\n</blockquote>\n<h3 id=\"共生狀態\"><a href=\"#共生狀態\" class=\"headerlink\" title=\"共生狀態\"></a>共生狀態</h3><blockquote>\n<p>見瓦茨拉夫·哈維爾先生製定的《對話守則》：<br>1.對話的目的是尋求真理，不是為了鬥爭。<br>2.不做人身攻擊。<br>3.保持主題。<br>4.辯論時要用證據。<br>5.不要堅持錯誤不改。<br>6.要分清對話與只准自己講話的區別。<br>7.對話要有記錄。<br>8.盡量理解對方。</p>\n</blockquote>\n<blockquote><p>雙方想要進行有意義的討論，最基本的要求就是雙方必須共同遵守“理性討論基本原則”。</p>\n</blockquote>\n<blockquote><p>跨越“自以為是”</p>\n</blockquote>\n<p><em>✖ 「緣督以為經；因其故然」— 莊子。養生主 ; 學習應順其自然，不然會把自已累死。「知知為知知，不知為不知，是知也」—論語</em> </p>\n<blockquote><p>第一個原則：有意義的討論是競合<br>第二個原則：真理是獨立存在的<br>第三個原則：真理不變</p>\n</blockquote>\n<h3 id=\"正確複述\"><a href=\"#正確複述\" class=\"headerlink\" title=\"正確複述\"></a>正確複述</h3><blockquote>\n<p>為了保證溝通順利，往往需要添加一個驗證機制，或者說反饋機制。</p>\n</blockquote>\n<h3 id=\"勤於反思\"><a href=\"#勤於反思\" class=\"headerlink\" title=\"勤於反思\"></a>勤於反思</h3><ul>\n<li>深刻了解經驗的局限</li>\n<li>時時刻刻保持警惕 </li>\n</ul>\n<blockquote>\n<p>手裡只有一把錘子，看什麼問題都像釘子    </p>\n</blockquote>\n<ul>\n<li>用記錄，使自己能夠記住更多的經驗 </li>\n<li>通過觀察和閱讀汲取他人的經驗</li>\n<li>經常試用類比來跨越未知與已知的障礙 </li>\n<li>耐心等待以獲得不能跨越時間的經驗  </li>\n</ul>\n<h2 id=\"七、應用\"><a href=\"#七、應用\" class=\"headerlink\" title=\"七、應用\"></a>七、應用</h2><h3 id=\"興趣\"><a href=\"#興趣\" class=\"headerlink\" title=\"興趣\"></a>興趣</h3><blockquote>\n<p>說來說去，是順序出了問題：往往並不是有興趣才能做好，而是做好了才有興趣。人們總是搞錯順序，並對這樣的錯誤毫不知曉。雖然並非絕對，但完成大多數事情，確實都需要熟能生巧。做得多了，自然就能擅長；擅長了，自然就做得比別人好；做得比別人好了，興趣就濃起來了，而後就更喜歡做、更擅長……進入良性循環。可同樣的，做得多，就需要大量的時間投入，所謂“沒興趣”，往往不過是結果，如果將它當作“不去做好”的理由，最終的懲罰就是大量時間白白流逝。</p>\n</blockquote>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><blockquote>\n<p>所有學習上的成功，都只依靠兩件事——策略和堅持，而堅持本身就是最重要的策略。堅持，其實就是重複；而重複，說到底就是時間的投入，準確地說，是大量時間的投入。</p>\n</blockquote>\n<p><em>✖ 你沒有實際作之前，不會知道效果如何，再在找更好的方法之前，最好的策略是堅持</em></p>\n<h3 id=\"痛苦-比較-運氣\"><a href=\"#痛苦-比較-運氣\" class=\"headerlink\" title=\"痛苦 -比較 - 運氣\"></a>痛苦 -比較 - 運氣</h3><h3 id=\"人脈\"><a href=\"#人脈\" class=\"headerlink\" title=\"人脈\"></a>人脈</h3><blockquote><blockquote>\n<p>當我們把時間花到一個人身上的時候，相當於在他身上傾注了自己生命的一段。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>▷專心做可以提升自己的事情，學習並擁有更多、更好的技能，成為一個值得他人交往的人。<br>▷學會獨善其身，以不給他人製造麻煩為美德，用自己的獨立贏得尊重。</p>\n</blockquote>\n</blockquote>\n<p><em>✖ 人必自重而後人重之—你值得人家交往，人家就會來跟你交往。</em></p>\n<h3 id=\"自卑\"><a href=\"#自卑\" class=\"headerlink\" title=\"自卑\"></a>自卑</h3><p><em>✖  保持謙卑，認識真正的自已。</em></p>\n<h3 id=\"靈感\"><a href=\"#靈感\" class=\"headerlink\" title=\"靈感\"></a>靈感</h3><p><em>✖ 靈感來自於累積，筆記是一個好工具</em></p>\n<h3 id=\"鼓勵\"><a href=\"#鼓勵\" class=\"headerlink\" title=\"鼓勵\"></a>鼓勵</h3><h3 id=\"效率\"><a href=\"#效率\" class=\"headerlink\" title=\"效率\"></a>效率</h3><h3 id=\"節奏\"><a href=\"#節奏\" class=\"headerlink\" title=\"節奏\"></a>節奏</h3><h3 id=\"物極必反\"><a href=\"#物極必反\" class=\"headerlink\" title=\"物極必反\"></a>物極必反</h3><blockquote>\n<ul>\n<li>絕對不要盲目地試圖減少睡眠時間</li>\n<li>盡量不要減少與家庭成員交流的時間</li>\n<li>最好不要放棄你的社交時間</li>\n</ul>\n</blockquote>\n<h3 id=\"自我證明\"><a href=\"#自我證明\" class=\"headerlink\" title=\"自我證明\"></a>自我證明</h3><h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"http://zhibimo.com/read/xiaolai/ba-shi-jian-dang-zuo-peng-you/index.html\" target=\"_blank\" rel=\"external\">電子書</a></li>\n<li><a href=\"http://www.books.com.tw/products/CN11349756\" target=\"_blank\" rel=\"external\">奇特的一生</a></li>\n</ul>\n"},{"title":"[記錄]VS2015 StyleCop 誤判SA0102","date":"2017-01-11T06:51:25.000Z","_content":"## 環境\n- 作業系統:Windows 10\n- 開發工具:Visual Studio 2015 (Professional ver14.0.25431.01 Update 3)\n- StyleCop 4.7.50.0\n\n## 情境\n\n當使用C# 6 的`INTERPOLATION STRING`組合字串時，在StyleCop 4.7會誤判並回報SA0102的警告。\n\n``` c_sharp\n\treturn new ExcelResult\n\t{\n\t\tData = exportData,\n\t\tFileName = $\"{shopId}_Code_{DateTime.Now.ToString(\"yyyyMMddHHmm\")}\",\n\t\tSheetName = \"ECouponCode\"\n\t};\n```\n\n## 修正目標\n1. 將 StyleCop 4.7 更新至 StyleCop 5.0\n2. 編輯客製化的StyleCop Rules(直接將4.7的設定檔覆蓋VS會報錯)\n\n## 修正記錄\n1. 移除 StyleCop \n控制台 > 新增移除程式\n![](https://i.imgur.com/PCYZxIK.png)\n\n2. 移除 Visual Studio 上的 StyleCop \n工具 > 擴充功能和更新\n![](https://i.imgur.com/1HdVoko.png)\n\n3. 自你的程式碼移除所有對StyleCop的參考 \n`我的程式碼中並不包含對StyleCop的參考，故略過此步驟`\n\n4. 搜尋`StyleCop*.dll` 並且移除(非必要)\n\n5. 重新安裝 [StyleCop Visual Studio Extension](https://marketplace.visualstudio.com/items?itemName=ChristopheHEISER.VisualStyleCop)\n\t1.  安裝完成檢視安裝記錄檔\n![](https://i.imgur.com/Kny5aU9.png)\n\n\t2.  可以透過安裝記錄檔取得安裝路徑\n![](https://i.imgur.com/edSDREN.png)\n\n\n6. 客製修改StyleCop設定檔\n\t5-2的步驟可以找到`Settings`子資料夾，內含預設StyleCop設定檔， \n\t複制這個檔案到上一層，重新命名為`Settings.StyleCop`,\n\t透過`StyleCop.SettingsEditor`開啟`Settings.StyleCop`調整設定值。\n\t![](https://i.imgur.com/DJjoEYJ.gif)\n\n\n## 參考\n- [Github StyleCop](https://github.com/StyleCop)\n- [Github Visual-StyleCop](https://github.com/Visual-Stylecop/Visual-StyleCop/wiki)\n- [Marketplace Visual StyleCop ](https://marketplace.visualstudio.com/items?itemName=ChristopheHEISER.VisualStyleCop)\n\n(fin)\n","source":"_posts/c_sharp_6_interpolation_string_stylecop_sa0102.md","raw":"---\ntitle: \"[記錄]VS2015 StyleCop 誤判SA0102\"\ndate: 2017/01/11 14:51:25\ntag:\n  - C#\n  - StyleCop\n---\n## 環境\n- 作業系統:Windows 10\n- 開發工具:Visual Studio 2015 (Professional ver14.0.25431.01 Update 3)\n- StyleCop 4.7.50.0\n\n## 情境\n\n當使用C# 6 的`INTERPOLATION STRING`組合字串時，在StyleCop 4.7會誤判並回報SA0102的警告。\n\n``` c_sharp\n\treturn new ExcelResult\n\t{\n\t\tData = exportData,\n\t\tFileName = $\"{shopId}_Code_{DateTime.Now.ToString(\"yyyyMMddHHmm\")}\",\n\t\tSheetName = \"ECouponCode\"\n\t};\n```\n\n## 修正目標\n1. 將 StyleCop 4.7 更新至 StyleCop 5.0\n2. 編輯客製化的StyleCop Rules(直接將4.7的設定檔覆蓋VS會報錯)\n\n## 修正記錄\n1. 移除 StyleCop \n控制台 > 新增移除程式\n![](https://i.imgur.com/PCYZxIK.png)\n\n2. 移除 Visual Studio 上的 StyleCop \n工具 > 擴充功能和更新\n![](https://i.imgur.com/1HdVoko.png)\n\n3. 自你的程式碼移除所有對StyleCop的參考 \n`我的程式碼中並不包含對StyleCop的參考，故略過此步驟`\n\n4. 搜尋`StyleCop*.dll` 並且移除(非必要)\n\n5. 重新安裝 [StyleCop Visual Studio Extension](https://marketplace.visualstudio.com/items?itemName=ChristopheHEISER.VisualStyleCop)\n\t1.  安裝完成檢視安裝記錄檔\n![](https://i.imgur.com/Kny5aU9.png)\n\n\t2.  可以透過安裝記錄檔取得安裝路徑\n![](https://i.imgur.com/edSDREN.png)\n\n\n6. 客製修改StyleCop設定檔\n\t5-2的步驟可以找到`Settings`子資料夾，內含預設StyleCop設定檔， \n\t複制這個檔案到上一層，重新命名為`Settings.StyleCop`,\n\t透過`StyleCop.SettingsEditor`開啟`Settings.StyleCop`調整設定值。\n\t![](https://i.imgur.com/DJjoEYJ.gif)\n\n\n## 參考\n- [Github StyleCop](https://github.com/StyleCop)\n- [Github Visual-StyleCop](https://github.com/Visual-Stylecop/Visual-StyleCop/wiki)\n- [Marketplace Visual StyleCop ](https://marketplace.visualstudio.com/items?itemName=ChristopheHEISER.VisualStyleCop)\n\n(fin)\n","slug":"c_sharp_6_interpolation_string_stylecop_sa0102","published":1,"updated":"2017-01-15T13:52:28.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivybw000ayk55gdw6jfeg","content":"<h2 id=\"環境\"><a href=\"#環境\" class=\"headerlink\" title=\"環境\"></a>環境</h2><ul>\n<li>作業系統:Windows 10</li>\n<li>開發工具:Visual Studio 2015 (Professional ver14.0.25431.01 Update 3)</li>\n<li>StyleCop 4.7.50.0</li>\n</ul>\n<h2 id=\"情境\"><a href=\"#情境\" class=\"headerlink\" title=\"情境\"></a>情境</h2><p>當使用C# 6 的<code>INTERPOLATION STRING</code>組合字串時，在StyleCop 4.7會誤判並回報SA0102的警告。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">return new ExcelResult</div><div class=\"line\">&#123;</div><div class=\"line\">\tData = exportData,</div><div class=\"line\">\tFileName = $&quot;&#123;shopId&#125;_Code_&#123;DateTime.Now.ToString(&quot;yyyyMMddHHmm&quot;)&#125;&quot;,</div><div class=\"line\">\tSheetName = &quot;ECouponCode&quot;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"修正目標\"><a href=\"#修正目標\" class=\"headerlink\" title=\"修正目標\"></a>修正目標</h2><ol>\n<li>將 StyleCop 4.7 更新至 StyleCop 5.0</li>\n<li>編輯客製化的StyleCop Rules(直接將4.7的設定檔覆蓋VS會報錯)</li>\n</ol>\n<h2 id=\"修正記錄\"><a href=\"#修正記錄\" class=\"headerlink\" title=\"修正記錄\"></a>修正記錄</h2><ol>\n<li><p>移除 StyleCop<br>控制台 &gt; 新增移除程式<br><img src=\"https://i.imgur.com/PCYZxIK.png\" alt=\"\"></p>\n</li>\n<li><p>移除 Visual Studio 上的 StyleCop<br>工具 &gt; 擴充功能和更新<br><img src=\"https://i.imgur.com/1HdVoko.png\" alt=\"\"></p>\n</li>\n<li><p>自你的程式碼移除所有對StyleCop的參考<br><code>我的程式碼中並不包含對StyleCop的參考，故略過此步驟</code></p>\n</li>\n<li><p>搜尋<code>StyleCop*.dll</code> 並且移除(非必要)</p>\n</li>\n<li><p>重新安裝 <a href=\"https://marketplace.visualstudio.com/items?itemName=ChristopheHEISER.VisualStyleCop\" target=\"_blank\" rel=\"external\">StyleCop Visual Studio Extension</a></p>\n<ol>\n<li><p>安裝完成檢視安裝記錄檔<br><img src=\"https://i.imgur.com/Kny5aU9.png\" alt=\"\"></p>\n</li>\n<li><p>可以透過安裝記錄檔取得安裝路徑<br><img src=\"https://i.imgur.com/edSDREN.png\" alt=\"\"></p>\n</li>\n</ol>\n</li>\n</ol>\n<ol>\n<li>客製修改StyleCop設定檔<br> 5-2的步驟可以找到<code>Settings</code>子資料夾，內含預設StyleCop設定檔，<br> 複制這個檔案到上一層，重新命名為<code>Settings.StyleCop</code>,<br> 透過<code>StyleCop.SettingsEditor</code>開啟<code>Settings.StyleCop</code>調整設定值。<br> <img src=\"https://i.imgur.com/DJjoEYJ.gif\" alt=\"\"></li>\n</ol>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://github.com/StyleCop\" target=\"_blank\" rel=\"external\">Github StyleCop</a></li>\n<li><a href=\"https://github.com/Visual-Stylecop/Visual-StyleCop/wiki\" target=\"_blank\" rel=\"external\">Github Visual-StyleCop</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=ChristopheHEISER.VisualStyleCop\" target=\"_blank\" rel=\"external\">Marketplace Visual StyleCop </a></li>\n</ul>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"環境\"><a href=\"#環境\" class=\"headerlink\" title=\"環境\"></a>環境</h2><ul>\n<li>作業系統:Windows 10</li>\n<li>開發工具:Visual Studio 2015 (Professional ver14.0.25431.01 Update 3)</li>\n<li>StyleCop 4.7.50.0</li>\n</ul>\n<h2 id=\"情境\"><a href=\"#情境\" class=\"headerlink\" title=\"情境\"></a>情境</h2><p>當使用C# 6 的<code>INTERPOLATION STRING</code>組合字串時，在StyleCop 4.7會誤判並回報SA0102的警告。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">return new ExcelResult</div><div class=\"line\">&#123;</div><div class=\"line\">\tData = exportData,</div><div class=\"line\">\tFileName = $&quot;&#123;shopId&#125;_Code_&#123;DateTime.Now.ToString(&quot;yyyyMMddHHmm&quot;)&#125;&quot;,</div><div class=\"line\">\tSheetName = &quot;ECouponCode&quot;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"修正目標\"><a href=\"#修正目標\" class=\"headerlink\" title=\"修正目標\"></a>修正目標</h2><ol>\n<li>將 StyleCop 4.7 更新至 StyleCop 5.0</li>\n<li>編輯客製化的StyleCop Rules(直接將4.7的設定檔覆蓋VS會報錯)</li>\n</ol>\n<h2 id=\"修正記錄\"><a href=\"#修正記錄\" class=\"headerlink\" title=\"修正記錄\"></a>修正記錄</h2><ol>\n<li><p>移除 StyleCop<br>控制台 &gt; 新增移除程式<br><img src=\"https://i.imgur.com/PCYZxIK.png\" alt=\"\"></p>\n</li>\n<li><p>移除 Visual Studio 上的 StyleCop<br>工具 &gt; 擴充功能和更新<br><img src=\"https://i.imgur.com/1HdVoko.png\" alt=\"\"></p>\n</li>\n<li><p>自你的程式碼移除所有對StyleCop的參考<br><code>我的程式碼中並不包含對StyleCop的參考，故略過此步驟</code></p>\n</li>\n<li><p>搜尋<code>StyleCop*.dll</code> 並且移除(非必要)</p>\n</li>\n<li><p>重新安裝 <a href=\"https://marketplace.visualstudio.com/items?itemName=ChristopheHEISER.VisualStyleCop\" target=\"_blank\" rel=\"external\">StyleCop Visual Studio Extension</a></p>\n<ol>\n<li><p>安裝完成檢視安裝記錄檔<br><img src=\"https://i.imgur.com/Kny5aU9.png\" alt=\"\"></p>\n</li>\n<li><p>可以透過安裝記錄檔取得安裝路徑<br><img src=\"https://i.imgur.com/edSDREN.png\" alt=\"\"></p>\n</li>\n</ol>\n</li>\n</ol>\n<ol>\n<li>客製修改StyleCop設定檔<br> 5-2的步驟可以找到<code>Settings</code>子資料夾，內含預設StyleCop設定檔，<br> 複制這個檔案到上一層，重新命名為<code>Settings.StyleCop</code>,<br> 透過<code>StyleCop.SettingsEditor</code>開啟<code>Settings.StyleCop</code>調整設定值。<br> <img src=\"https://i.imgur.com/DJjoEYJ.gif\" alt=\"\"></li>\n</ol>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://github.com/StyleCop\" target=\"_blank\" rel=\"external\">Github StyleCop</a></li>\n<li><a href=\"https://github.com/Visual-Stylecop/Visual-StyleCop/wiki\" target=\"_blank\" rel=\"external\">Github Visual-StyleCop</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=ChristopheHEISER.VisualStyleCop\" target=\"_blank\" rel=\"external\">Marketplace Visual StyleCop </a></li>\n</ul>\n<p>(fin)</p>\n"},{"title":"CI/CD 環境建置筆記 - 前言<目的>","date":"2017-01-15T13:54:00.000Z","_content":"\n## 現有架構\n![](https://i.imgur.com/QLzPTrp.jpg)\n### 版本控制\n1. Github\n2. Openshift\nOpenshift 是實際線上服務所在,也可以稱作是我的產品(Product),\nGithub 則是單純的負責版本控制。\n### 開發流程\n作為獨立開發的專案,這個網站只是我很單純的自我介紹、練習(KATA)、學習與分享的集散地。\n原本的開發流程很單純,如上圖。完成的CODE同步到 GITHUB 後也同步上 Openshift ,\n這樣的流程雖然簡單,但是每次都要人工執行,因為其執行順序,其實都隱含著風險,\n例如:上錯版本或是產品未進版控等等…,\n而當進一步想要執行建置、編譯 、套件管理、測試、分析與產生報表時,\n產品與源碼將會產生差異(ex:產品會包含壓縮的檔案而源碼則是未壓縮的檔案)\n\n\n#### 缺點:\n1. 在這樣的架構上容易不小心發佈還在開發中的功能。\n2. Prod的來源就是程式碼,無法確保與版控一致,如此就喪失版控的用意。\n3. 難以擴展其他功能,如:建置、編譯 、套件管理、測試、分析與產生報表\n\n#### 目標:\n![](https://i.imgur.com/dHYRJKr.jpg)\n如圖所示, \n第一步 Jenkins要將原始碼自Github pull下來\n第二到第N步 Jenkins要執行建置、測試、coding style的檢查、壓縮…等等。\n最後一步 Jenkins 將會將程式碼發佈到Openshift 上面。\n中間的步驟先跳過,之後再一一補上。\n所以第一目標很簡單,\n從Github Pull再Push到Openshift。\n","source":"_posts/ci_use_jenkins.md","raw":"---\ntitle: CI/CD 環境建置筆記 - 前言<目的>\ndate: 2017/01/15 21:54:00\ntag:\n  - CI\n  - Jenkins\n---\n\n## 現有架構\n![](https://i.imgur.com/QLzPTrp.jpg)\n### 版本控制\n1. Github\n2. Openshift\nOpenshift 是實際線上服務所在,也可以稱作是我的產品(Product),\nGithub 則是單純的負責版本控制。\n### 開發流程\n作為獨立開發的專案,這個網站只是我很單純的自我介紹、練習(KATA)、學習與分享的集散地。\n原本的開發流程很單純,如上圖。完成的CODE同步到 GITHUB 後也同步上 Openshift ,\n這樣的流程雖然簡單,但是每次都要人工執行,因為其執行順序,其實都隱含著風險,\n例如:上錯版本或是產品未進版控等等…,\n而當進一步想要執行建置、編譯 、套件管理、測試、分析與產生報表時,\n產品與源碼將會產生差異(ex:產品會包含壓縮的檔案而源碼則是未壓縮的檔案)\n\n\n#### 缺點:\n1. 在這樣的架構上容易不小心發佈還在開發中的功能。\n2. Prod的來源就是程式碼,無法確保與版控一致,如此就喪失版控的用意。\n3. 難以擴展其他功能,如:建置、編譯 、套件管理、測試、分析與產生報表\n\n#### 目標:\n![](https://i.imgur.com/dHYRJKr.jpg)\n如圖所示, \n第一步 Jenkins要將原始碼自Github pull下來\n第二到第N步 Jenkins要執行建置、測試、coding style的檢查、壓縮…等等。\n最後一步 Jenkins 將會將程式碼發佈到Openshift 上面。\n中間的步驟先跳過,之後再一一補上。\n所以第一目標很簡單,\n從Github Pull再Push到Openshift。\n","slug":"ci_use_jenkins","published":1,"updated":"2017-01-15T14:47:15.037Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivybx000byk5558wv5m66","content":"<h2 id=\"現有架構\"><a href=\"#現有架構\" class=\"headerlink\" title=\"現有架構\"></a>現有架構</h2><p><img src=\"https://i.imgur.com/QLzPTrp.jpg\" alt=\"\"></p>\n<h3 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h3><ol>\n<li>Github</li>\n<li>Openshift<br>Openshift 是實際線上服務所在,也可以稱作是我的產品(Product),<br>Github 則是單純的負責版本控制。<h3 id=\"開發流程\"><a href=\"#開發流程\" class=\"headerlink\" title=\"開發流程\"></a>開發流程</h3>作為獨立開發的專案,這個網站只是我很單純的自我介紹、練習(KATA)、學習與分享的集散地。<br>原本的開發流程很單純,如上圖。完成的CODE同步到 GITHUB 後也同步上 Openshift ,<br>這樣的流程雖然簡單,但是每次都要人工執行,因為其執行順序,其實都隱含著風險,<br>例如:上錯版本或是產品未進版控等等…,<br>而當進一步想要執行建置、編譯 、套件管理、測試、分析與產生報表時,<br>產品與源碼將會產生差異(ex:產品會包含壓縮的檔案而源碼則是未壓縮的檔案)</li>\n</ol>\n<h4 id=\"缺點\"><a href=\"#缺點\" class=\"headerlink\" title=\"缺點:\"></a>缺點:</h4><ol>\n<li>在這樣的架構上容易不小心發佈還在開發中的功能。</li>\n<li>Prod的來源就是程式碼,無法確保與版控一致,如此就喪失版控的用意。</li>\n<li>難以擴展其他功能,如:建置、編譯 、套件管理、測試、分析與產生報表</li>\n</ol>\n<h4 id=\"目標\"><a href=\"#目標\" class=\"headerlink\" title=\"目標:\"></a>目標:</h4><p><img src=\"https://i.imgur.com/dHYRJKr.jpg\" alt=\"\"><br>如圖所示,<br>第一步 Jenkins要將原始碼自Github pull下來<br>第二到第N步 Jenkins要執行建置、測試、coding style的檢查、壓縮…等等。<br>最後一步 Jenkins 將會將程式碼發佈到Openshift 上面。<br>中間的步驟先跳過,之後再一一補上。<br>所以第一目標很簡單,<br>從Github Pull再Push到Openshift。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"現有架構\"><a href=\"#現有架構\" class=\"headerlink\" title=\"現有架構\"></a>現有架構</h2><p><img src=\"https://i.imgur.com/QLzPTrp.jpg\" alt=\"\"></p>\n<h3 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h3><ol>\n<li>Github</li>\n<li>Openshift<br>Openshift 是實際線上服務所在,也可以稱作是我的產品(Product),<br>Github 則是單純的負責版本控制。<h3 id=\"開發流程\"><a href=\"#開發流程\" class=\"headerlink\" title=\"開發流程\"></a>開發流程</h3>作為獨立開發的專案,這個網站只是我很單純的自我介紹、練習(KATA)、學習與分享的集散地。<br>原本的開發流程很單純,如上圖。完成的CODE同步到 GITHUB 後也同步上 Openshift ,<br>這樣的流程雖然簡單,但是每次都要人工執行,因為其執行順序,其實都隱含著風險,<br>例如:上錯版本或是產品未進版控等等…,<br>而當進一步想要執行建置、編譯 、套件管理、測試、分析與產生報表時,<br>產品與源碼將會產生差異(ex:產品會包含壓縮的檔案而源碼則是未壓縮的檔案)</li>\n</ol>\n<h4 id=\"缺點\"><a href=\"#缺點\" class=\"headerlink\" title=\"缺點:\"></a>缺點:</h4><ol>\n<li>在這樣的架構上容易不小心發佈還在開發中的功能。</li>\n<li>Prod的來源就是程式碼,無法確保與版控一致,如此就喪失版控的用意。</li>\n<li>難以擴展其他功能,如:建置、編譯 、套件管理、測試、分析與產生報表</li>\n</ol>\n<h4 id=\"目標\"><a href=\"#目標\" class=\"headerlink\" title=\"目標:\"></a>目標:</h4><p><img src=\"https://i.imgur.com/dHYRJKr.jpg\" alt=\"\"><br>如圖所示,<br>第一步 Jenkins要將原始碼自Github pull下來<br>第二到第N步 Jenkins要執行建置、測試、coding style的檢查、壓縮…等等。<br>最後一步 Jenkins 將會將程式碼發佈到Openshift 上面。<br>中間的步驟先跳過,之後再一一補上。<br>所以第一目標很簡單,<br>從Github Pull再Push到Openshift。</p>\n"},{"title":"CI/CD 環境建置筆記 - 使用Openshift 的 Jenkins (失敗)","date":"2017-01-15T14:16:42.000Z","_content":"\n## 前情提要\n\n- [CI/CD 環境建置筆記 - 前言<目的>](/2017/01/15/ci_use_jenkins/)\n\n## 操作記錄(失敗)\n\n### 目標: \n\n- 在 Openshift 新增一個 Jenkins Server\n\n### 失敗原因: \n\n- 我找不到方法在 Openshift 上建置的 Jenkins Server \n\n### 記錄:\n\n1. 登入OpenShift的[web console](https://openshift.redhat.com/app/console/applications)\n2. Add Application 選擇 `Jenkins Server`，使用預設設定Create Application.  \nPublic URL 設定為 http://jenkins-youraccount.rhcloud.com\n3. 連線進 http://jenkins-youraccount.rhcloud.com 會發現需要帳密登入\n4. 取得帳號密碼\n\t1. 使用 SSH 連線 Openshift 的 Jenkins Server (可以在web console 查到連結)\n\t\t`> ssh 4263*****************@jenkins-youraccount.rhcloud.com`\n\t2. 查看以下兩個檔案可以取得帳號密碼\n\t`JENKINS_USERNAME`\n\t`JENKINS_PASSWORD` \n\t\n\t \n5. 登入後，管理 Jenkins > 設定系統\n\t1. 將執行程式數量設定為 1 \n6. 選擇新增作業\n\t1. 第一步要將原始碼自Github pull下來;在原始碼管理選擇`Git` , 設定好`Repositories`、`Branches to build`\n\t\n7. **執行一次建置**，這個步驟是為了產生work space 。 \n8.  SSH 連線 Openshift，切換目錄到你的專案的work space \n\t`> ssh 4263*****************@jenkins-youraccount.rhcloud.com`\n\t`> cd app-root/data/workspace/your_project_name`\n9.  檢查一下目前Git的遠端Repo有哪些\n\t`> git remote -v`\n10. 將Openshift上的nodejs應用程式repo設為remote\n\t`>git remote add openshift ssh://5**********************@nodejs-youraccount.rhcloud.com/~/git/nodejs.git/`\n11. 推送到`openshift remote`\n失敗!!原因是權限問題，Openshift remote 是透過 SSH 連線，\n在認証公鑰的過程中，需要寫入 `~/.ssh/known_hosts` 檔案。\n但是 Openshift 建立的 Jenkins Server 登入帳號，權限並不足以寫入而造成失敗\n\n","source":"_posts/ci_use_jenkins_on_openshfit.md","raw":"---\ntitle: CI/CD 環境建置筆記 - 使用Openshift 的 Jenkins (失敗)\ndate: 2017/01/15 22:16:42\ntag:\n  - CI\n  - Jenkins\n  - Openshift\n---\n\n## 前情提要\n\n- [CI/CD 環境建置筆記 - 前言<目的>](/2017/01/15/ci_use_jenkins/)\n\n## 操作記錄(失敗)\n\n### 目標: \n\n- 在 Openshift 新增一個 Jenkins Server\n\n### 失敗原因: \n\n- 我找不到方法在 Openshift 上建置的 Jenkins Server \n\n### 記錄:\n\n1. 登入OpenShift的[web console](https://openshift.redhat.com/app/console/applications)\n2. Add Application 選擇 `Jenkins Server`，使用預設設定Create Application.  \nPublic URL 設定為 http://jenkins-youraccount.rhcloud.com\n3. 連線進 http://jenkins-youraccount.rhcloud.com 會發現需要帳密登入\n4. 取得帳號密碼\n\t1. 使用 SSH 連線 Openshift 的 Jenkins Server (可以在web console 查到連結)\n\t\t`> ssh 4263*****************@jenkins-youraccount.rhcloud.com`\n\t2. 查看以下兩個檔案可以取得帳號密碼\n\t`JENKINS_USERNAME`\n\t`JENKINS_PASSWORD` \n\t\n\t \n5. 登入後，管理 Jenkins > 設定系統\n\t1. 將執行程式數量設定為 1 \n6. 選擇新增作業\n\t1. 第一步要將原始碼自Github pull下來;在原始碼管理選擇`Git` , 設定好`Repositories`、`Branches to build`\n\t\n7. **執行一次建置**，這個步驟是為了產生work space 。 \n8.  SSH 連線 Openshift，切換目錄到你的專案的work space \n\t`> ssh 4263*****************@jenkins-youraccount.rhcloud.com`\n\t`> cd app-root/data/workspace/your_project_name`\n9.  檢查一下目前Git的遠端Repo有哪些\n\t`> git remote -v`\n10. 將Openshift上的nodejs應用程式repo設為remote\n\t`>git remote add openshift ssh://5**********************@nodejs-youraccount.rhcloud.com/~/git/nodejs.git/`\n11. 推送到`openshift remote`\n失敗!!原因是權限問題，Openshift remote 是透過 SSH 連線，\n在認証公鑰的過程中，需要寫入 `~/.ssh/known_hosts` 檔案。\n但是 Openshift 建立的 Jenkins Server 登入帳號，權限並不足以寫入而造成失敗\n\n","slug":"ci_use_jenkins_on_openshfit","published":1,"updated":"2017-01-15T15:35:27.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivybz000dyk55llinnph1","content":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><ul>\n<li><a href=\"/2017/01/15/ci_use_jenkins/\">CI/CD 環境建置筆記 - 前言&lt;目的&gt;</a></li>\n</ul>\n<h2 id=\"操作記錄-失敗\"><a href=\"#操作記錄-失敗\" class=\"headerlink\" title=\"操作記錄(失敗)\"></a>操作記錄(失敗)</h2><h3 id=\"目標\"><a href=\"#目標\" class=\"headerlink\" title=\"目標:\"></a>目標:</h3><ul>\n<li>在 Openshift 新增一個 Jenkins Server</li>\n</ul>\n<h3 id=\"失敗原因\"><a href=\"#失敗原因\" class=\"headerlink\" title=\"失敗原因:\"></a>失敗原因:</h3><ul>\n<li>我找不到方法在 Openshift 上建置的 Jenkins Server </li>\n</ul>\n<h3 id=\"記錄\"><a href=\"#記錄\" class=\"headerlink\" title=\"記錄:\"></a>記錄:</h3><ol>\n<li>登入OpenShift的<a href=\"https://openshift.redhat.com/app/console/applications\" target=\"_blank\" rel=\"external\">web console</a></li>\n<li>Add Application 選擇 <code>Jenkins Server</code>，使用預設設定Create Application.<br>Public URL 設定為 <a href=\"http://jenkins-youraccount.rhcloud.com\" target=\"_blank\" rel=\"external\">http://jenkins-youraccount.rhcloud.com</a></li>\n<li>連線進 <a href=\"http://jenkins-youraccount.rhcloud.com\" target=\"_blank\" rel=\"external\">http://jenkins-youraccount.rhcloud.com</a> 會發現需要帳密登入</li>\n<li>取得帳號密碼<ol>\n<li>使用 SSH 連線 Openshift 的 Jenkins Server (可以在web console 查到連結)<br> <code>&gt; ssh 4263*****************@jenkins-youraccount.rhcloud.com</code></li>\n<li>查看以下兩個檔案可以取得帳號密碼<br><code>JENKINS_USERNAME</code><br><code>JENKINS_PASSWORD</code> </li>\n</ol>\n</li>\n</ol>\n<ol>\n<li>登入後，管理 Jenkins &gt; 設定系統<ol>\n<li>將執行程式數量設定為 1 </li>\n</ol>\n</li>\n<li><p>選擇新增作業</p>\n<ol>\n<li>第一步要將原始碼自Github pull下來;在原始碼管理選擇<code>Git</code> , 設定好<code>Repositories</code>、<code>Branches to build</code></li>\n</ol>\n</li>\n<li><p><strong>執行一次建置</strong>，這個步驟是為了產生work space 。 </p>\n</li>\n<li>SSH 連線 Openshift，切換目錄到你的專案的work space<br><code>&gt; ssh 4263*****************@jenkins-youraccount.rhcloud.com</code><br><code>&gt; cd app-root/data/workspace/your_project_name</code></li>\n<li>檢查一下目前Git的遠端Repo有哪些<br><code>&gt; git remote -v</code></li>\n<li>將Openshift上的nodejs應用程式repo設為remote<br><code>&gt;git remote add openshift ssh://5**********************@nodejs-youraccount.rhcloud.com/~/git/nodejs.git/</code></li>\n<li>推送到<code>openshift remote</code><br>失敗!!原因是權限問題，Openshift remote 是透過 SSH 連線，<br>在認証公鑰的過程中，需要寫入 <code>~/.ssh/known_hosts</code> 檔案。<br>但是 Openshift 建立的 Jenkins Server 登入帳號，權限並不足以寫入而造成失敗</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><ul>\n<li><a href=\"/2017/01/15/ci_use_jenkins/\">CI/CD 環境建置筆記 - 前言&lt;目的&gt;</a></li>\n</ul>\n<h2 id=\"操作記錄-失敗\"><a href=\"#操作記錄-失敗\" class=\"headerlink\" title=\"操作記錄(失敗)\"></a>操作記錄(失敗)</h2><h3 id=\"目標\"><a href=\"#目標\" class=\"headerlink\" title=\"目標:\"></a>目標:</h3><ul>\n<li>在 Openshift 新增一個 Jenkins Server</li>\n</ul>\n<h3 id=\"失敗原因\"><a href=\"#失敗原因\" class=\"headerlink\" title=\"失敗原因:\"></a>失敗原因:</h3><ul>\n<li>我找不到方法在 Openshift 上建置的 Jenkins Server </li>\n</ul>\n<h3 id=\"記錄\"><a href=\"#記錄\" class=\"headerlink\" title=\"記錄:\"></a>記錄:</h3><ol>\n<li>登入OpenShift的<a href=\"https://openshift.redhat.com/app/console/applications\" target=\"_blank\" rel=\"external\">web console</a></li>\n<li>Add Application 選擇 <code>Jenkins Server</code>，使用預設設定Create Application.<br>Public URL 設定為 <a href=\"http://jenkins-youraccount.rhcloud.com\" target=\"_blank\" rel=\"external\">http://jenkins-youraccount.rhcloud.com</a></li>\n<li>連線進 <a href=\"http://jenkins-youraccount.rhcloud.com\" target=\"_blank\" rel=\"external\">http://jenkins-youraccount.rhcloud.com</a> 會發現需要帳密登入</li>\n<li>取得帳號密碼<ol>\n<li>使用 SSH 連線 Openshift 的 Jenkins Server (可以在web console 查到連結)<br> <code>&gt; ssh 4263*****************@jenkins-youraccount.rhcloud.com</code></li>\n<li>查看以下兩個檔案可以取得帳號密碼<br><code>JENKINS_USERNAME</code><br><code>JENKINS_PASSWORD</code> </li>\n</ol>\n</li>\n</ol>\n<ol>\n<li>登入後，管理 Jenkins &gt; 設定系統<ol>\n<li>將執行程式數量設定為 1 </li>\n</ol>\n</li>\n<li><p>選擇新增作業</p>\n<ol>\n<li>第一步要將原始碼自Github pull下來;在原始碼管理選擇<code>Git</code> , 設定好<code>Repositories</code>、<code>Branches to build</code></li>\n</ol>\n</li>\n<li><p><strong>執行一次建置</strong>，這個步驟是為了產生work space 。 </p>\n</li>\n<li>SSH 連線 Openshift，切換目錄到你的專案的work space<br><code>&gt; ssh 4263*****************@jenkins-youraccount.rhcloud.com</code><br><code>&gt; cd app-root/data/workspace/your_project_name</code></li>\n<li>檢查一下目前Git的遠端Repo有哪些<br><code>&gt; git remote -v</code></li>\n<li>將Openshift上的nodejs應用程式repo設為remote<br><code>&gt;git remote add openshift ssh://5**********************@nodejs-youraccount.rhcloud.com/~/git/nodejs.git/</code></li>\n<li>推送到<code>openshift remote</code><br>失敗!!原因是權限問題，Openshift remote 是透過 SSH 連線，<br>在認証公鑰的過程中，需要寫入 <code>~/.ssh/known_hosts</code> 檔案。<br>但是 Openshift 建立的 Jenkins Server 登入帳號，權限並不足以寫入而造成失敗</li>\n</ol>\n"},{"title":"CI/CD 環境建置筆記(二) - 在 windows 安裝 Jenkins 之旁門左道私有雲","date":"2017-04-29T03:55:16.000Z","_content":"\n## 應該要知道的事\n\n- Dropbox\n- Windows Service\n- [CI/CD 環境建置筆記(一) - 在 windows 安裝 Jenkins ](/2017/01/15/ci_use_jenkins/)\n\n## 問題\n\n在 windows 上安裝了Jenkins , 也建立了一個新的作業 ,\n讓程式可以透過 Jenkins 執行自動化部署。\n不過實務上仍有缺點，那就是只有這台機器可以執行部署 ,\n最理想的狀況是擁有一個在雲端的 CI Server ,\n隨時隨地想部署只需要能連上網 , 登入執行就好\n這部份可以試試看 `Travis-CI`、`CircleCI`之類的服務 ;\n不過對於只熟悉 Jenkins 的我來說 ,\n我想了另一套解決辦法(旁門左道) ,\n不過至少解決了我目前的需求 ,\n在公司與家中隨時都能透過本機Jenkins Server 進行部署 , \n並且不用花時間同步設定值. \n在花時間研究`Travis-CI`、`CircleCI`的部署方式之前 ,\n算是一個折衷的方式 .\n\n## 方案\n1. 首先你要有 Dropbox \n2. 下載 Windows 版的 Jenkins\n3. 安裝在 Dropbox 資料夾內\n4. 在另外一台電腦 , 進行相同的安裝\n\n想法很簡單 , 透過 Dropbox 與 Jenkins Service\n在兩台電腦安裝 Jenkins\n只要將 Jenkins Service 的啟動路徑\n設定在 Dropbox 中 , \n就可以達成我們的目標 .\n![](https://i.imgur.com/DyrNMJD.jpg)\n\n## 問題 \n1. Windows 要如何修改 Jenkins Service 的啟動路徑 ?\n\n`HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Jenkins`\n\n修改路徑以符合你本機的檔案位置即可。\n\n![](https://i.imgur.com/KGemCSe.jpg)\n\n(fin)","source":"_posts/ci_use_jenkins_on_two_windows.md","raw":"---\ntitle: CI/CD 環境建置筆記(二) - 在 windows 安裝 Jenkins 之旁門左道私有雲\ndate: 2017/04/29 11:55:16\ntag:\n  - CI\n  - Jenkins\n---\n\n## 應該要知道的事\n\n- Dropbox\n- Windows Service\n- [CI/CD 環境建置筆記(一) - 在 windows 安裝 Jenkins ](/2017/01/15/ci_use_jenkins/)\n\n## 問題\n\n在 windows 上安裝了Jenkins , 也建立了一個新的作業 ,\n讓程式可以透過 Jenkins 執行自動化部署。\n不過實務上仍有缺點，那就是只有這台機器可以執行部署 ,\n最理想的狀況是擁有一個在雲端的 CI Server ,\n隨時隨地想部署只需要能連上網 , 登入執行就好\n這部份可以試試看 `Travis-CI`、`CircleCI`之類的服務 ;\n不過對於只熟悉 Jenkins 的我來說 ,\n我想了另一套解決辦法(旁門左道) ,\n不過至少解決了我目前的需求 ,\n在公司與家中隨時都能透過本機Jenkins Server 進行部署 , \n並且不用花時間同步設定值. \n在花時間研究`Travis-CI`、`CircleCI`的部署方式之前 ,\n算是一個折衷的方式 .\n\n## 方案\n1. 首先你要有 Dropbox \n2. 下載 Windows 版的 Jenkins\n3. 安裝在 Dropbox 資料夾內\n4. 在另外一台電腦 , 進行相同的安裝\n\n想法很簡單 , 透過 Dropbox 與 Jenkins Service\n在兩台電腦安裝 Jenkins\n只要將 Jenkins Service 的啟動路徑\n設定在 Dropbox 中 , \n就可以達成我們的目標 .\n![](https://i.imgur.com/DyrNMJD.jpg)\n\n## 問題 \n1. Windows 要如何修改 Jenkins Service 的啟動路徑 ?\n\n`HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Jenkins`\n\n修改路徑以符合你本機的檔案位置即可。\n\n![](https://i.imgur.com/KGemCSe.jpg)\n\n(fin)","slug":"ci_use_jenkins_on_two_windows","published":1,"updated":"2017-04-29T05:17:33.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyc0000eyk55bdfpa3g6","content":"<h2 id=\"應該要知道的事\"><a href=\"#應該要知道的事\" class=\"headerlink\" title=\"應該要知道的事\"></a>應該要知道的事</h2><ul>\n<li>Dropbox</li>\n<li>Windows Service</li>\n<li><a href=\"/2017/01/15/ci_use_jenkins/\">CI/CD 環境建置筆記(一) - 在 windows 安裝 Jenkins </a></li>\n</ul>\n<h2 id=\"問題\"><a href=\"#問題\" class=\"headerlink\" title=\"問題\"></a>問題</h2><p>在 windows 上安裝了Jenkins , 也建立了一個新的作業 ,<br>讓程式可以透過 Jenkins 執行自動化部署。<br>不過實務上仍有缺點，那就是只有這台機器可以執行部署 ,<br>最理想的狀況是擁有一個在雲端的 CI Server ,<br>隨時隨地想部署只需要能連上網 , 登入執行就好<br>這部份可以試試看 <code>Travis-CI</code>、<code>CircleCI</code>之類的服務 ;<br>不過對於只熟悉 Jenkins 的我來說 ,<br>我想了另一套解決辦法(旁門左道) ,<br>不過至少解決了我目前的需求 ,<br>在公司與家中隨時都能透過本機Jenkins Server 進行部署 ,<br>並且不用花時間同步設定值.<br>在花時間研究<code>Travis-CI</code>、<code>CircleCI</code>的部署方式之前 ,<br>算是一個折衷的方式 .</p>\n<h2 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h2><ol>\n<li>首先你要有 Dropbox </li>\n<li>下載 Windows 版的 Jenkins</li>\n<li>安裝在 Dropbox 資料夾內</li>\n<li>在另外一台電腦 , 進行相同的安裝</li>\n</ol>\n<p>想法很簡單 , 透過 Dropbox 與 Jenkins Service<br>在兩台電腦安裝 Jenkins<br>只要將 Jenkins Service 的啟動路徑<br>設定在 Dropbox 中 ,<br>就可以達成我們的目標 .<br><img src=\"https://i.imgur.com/DyrNMJD.jpg\" alt=\"\"></p>\n<h2 id=\"問題-1\"><a href=\"#問題-1\" class=\"headerlink\" title=\"問題\"></a>問題</h2><ol>\n<li>Windows 要如何修改 Jenkins Service 的啟動路徑 ?</li>\n</ol>\n<p><code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Jenkins</code></p>\n<p>修改路徑以符合你本機的檔案位置即可。</p>\n<p><img src=\"https://i.imgur.com/KGemCSe.jpg\" alt=\"\"></p>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"應該要知道的事\"><a href=\"#應該要知道的事\" class=\"headerlink\" title=\"應該要知道的事\"></a>應該要知道的事</h2><ul>\n<li>Dropbox</li>\n<li>Windows Service</li>\n<li><a href=\"/2017/01/15/ci_use_jenkins/\">CI/CD 環境建置筆記(一) - 在 windows 安裝 Jenkins </a></li>\n</ul>\n<h2 id=\"問題\"><a href=\"#問題\" class=\"headerlink\" title=\"問題\"></a>問題</h2><p>在 windows 上安裝了Jenkins , 也建立了一個新的作業 ,<br>讓程式可以透過 Jenkins 執行自動化部署。<br>不過實務上仍有缺點，那就是只有這台機器可以執行部署 ,<br>最理想的狀況是擁有一個在雲端的 CI Server ,<br>隨時隨地想部署只需要能連上網 , 登入執行就好<br>這部份可以試試看 <code>Travis-CI</code>、<code>CircleCI</code>之類的服務 ;<br>不過對於只熟悉 Jenkins 的我來說 ,<br>我想了另一套解決辦法(旁門左道) ,<br>不過至少解決了我目前的需求 ,<br>在公司與家中隨時都能透過本機Jenkins Server 進行部署 ,<br>並且不用花時間同步設定值.<br>在花時間研究<code>Travis-CI</code>、<code>CircleCI</code>的部署方式之前 ,<br>算是一個折衷的方式 .</p>\n<h2 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h2><ol>\n<li>首先你要有 Dropbox </li>\n<li>下載 Windows 版的 Jenkins</li>\n<li>安裝在 Dropbox 資料夾內</li>\n<li>在另外一台電腦 , 進行相同的安裝</li>\n</ol>\n<p>想法很簡單 , 透過 Dropbox 與 Jenkins Service<br>在兩台電腦安裝 Jenkins<br>只要將 Jenkins Service 的啟動路徑<br>設定在 Dropbox 中 ,<br>就可以達成我們的目標 .<br><img src=\"https://i.imgur.com/DyrNMJD.jpg\" alt=\"\"></p>\n<h2 id=\"問題-1\"><a href=\"#問題-1\" class=\"headerlink\" title=\"問題\"></a>問題</h2><ol>\n<li>Windows 要如何修改 Jenkins Service 的啟動路徑 ?</li>\n</ol>\n<p><code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Jenkins</code></p>\n<p>修改路徑以符合你本機的檔案位置即可。</p>\n<p><img src=\"https://i.imgur.com/KGemCSe.jpg\" alt=\"\"></p>\n<p>(fin)</p>\n"},{"title":"CI/CD 環境建置筆記(一) - 在 windows 安裝 Jenkins","date":"2017-01-15T14:16:42.000Z","_content":"\n## 前情提要\n\n- [CI/CD 環境建置筆記 - 前言<目的>](/2017/01/15/ci_use_jenkins/)\n\n## 操作記錄\n\n1. 下載並安裝Jenkins（記錄版本為2.32.1）\n2. 連線localhost:8080,會要求輸入`Administrator password`\n![](https://i.imgur.com/ik5l0sq.jpg)\n\n3. 安裝Plugins(這裡選擇預設)\n![](https://i.imgur.com/dOad35P.jpg)\n\n\n4. 安裝畫面\n![](https://i.imgur.com/6FyGHPm.jpg)\n\n5. 建立管理者帳號密碼\n![](https://i.imgur.com/AzHrJdu.jpg)\n![](https://i.imgur.com/2ct8GiO.jpg)\n\n6. 登入後,管理 Jenkins > 設定系統\n\t1. 將執行程式數量設定為 1  (安裝完預設為2,其實可以不用修改)\n\t2. `Shell` 設定為 `C:\\Windows\\system32\\cmd.exe` \n\n7. 建立第一個作業,選擇新增作業 > 輸入作業名稱 ,選擇「建立多重設定專案」\n![](https://i.imgur.com/0xkci16.jpg)\n8.  **執行一次建置**,這個步驟是為了產生work space 。\nwork space 路徑大致如下 `.\\Jenkins\\workspace\\Project name`\n\n9. 執行 console 並切換路徑至 work space \n10. 將 Openshift 上的 nodejs 應用程式 repo 設為 remote\n\t`>git remote add prod ssh://5**********************@nodejs-youraccount.rhcloud.com/~/git/nodejs.git/`\n\t\n11. 回到Jenkins,作業 > 組態 > 建置 > 新增「執行Windows批次指令」\n\t\n\t``` bat\n\tREM 測試\n\twhoami\n\tgit push prod HEAD^:master\n\t```\n\n\t1. 額外處理事項:\n\t直接在 Jenkins server 發 pr 給 openshift 時,發生 503 錯誤。\n\t使用 ssh 登入 openshift 看 log ,發現 \n\t`Node Sass does not yet support your current environment` 錯誤\n\t必須登入執行以下語法修正模組問題 `npm rebuild node-sass` \n\t\n12. 建置作業,會得到錯誤訊息\n```\n上略...\n19:44:46 Host key verification failed.\n19:44:46 fatal: Could not read from remote repository.\n下略...\n```\n\t\n原因:主機密鑰驗證失敗,這個錯誤的意思是我的 Jenkins Server 主機並不認得遠端的 Openshift Server 的 host key,主要的原因是 Jenkins Service 在執行的身份是 `NT AUTHORITY\\SYSTEM`,由於我已經有合適權限的帳號,所以只需要切換執行 Jenkins Server 的身份即可。\n![](https://i.imgur.com/HSJoXJp.jpg)\n\n如果你尚未建立遠端ssh連線的存取權限,或是對ssh連線不熟悉,可以參考文末的參考聯結。\n\n## 參考\n\n- [SSH原理与运用（一）：远程登录](http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html)\n- [SSH原理与运用（二）：远程操作与端口转发](http://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html)\n- [[Tip] Windows使用ssh對Github進行操作](https://dotblogs.com.tw/kirkchen/2013/04/23/use_ssh_to_interact_with_github_in_windows)\n- [在 Windows 使用「非對稱金鑰」來遠端登入 SSH 的方法](http://www.vixual.net/blog/archives/190)\n\n(fin)","source":"_posts/ci_use_jenkins_on_windows.md","raw":"---\ntitle: CI/CD 環境建置筆記(一) - 在 windows 安裝 Jenkins \ndate: 2017/01/15 22:16:42\ntag:\n  - CI\n  - Jenkins\n  - Openshift\n---\n\n## 前情提要\n\n- [CI/CD 環境建置筆記 - 前言<目的>](/2017/01/15/ci_use_jenkins/)\n\n## 操作記錄\n\n1. 下載並安裝Jenkins（記錄版本為2.32.1）\n2. 連線localhost:8080,會要求輸入`Administrator password`\n![](https://i.imgur.com/ik5l0sq.jpg)\n\n3. 安裝Plugins(這裡選擇預設)\n![](https://i.imgur.com/dOad35P.jpg)\n\n\n4. 安裝畫面\n![](https://i.imgur.com/6FyGHPm.jpg)\n\n5. 建立管理者帳號密碼\n![](https://i.imgur.com/AzHrJdu.jpg)\n![](https://i.imgur.com/2ct8GiO.jpg)\n\n6. 登入後,管理 Jenkins > 設定系統\n\t1. 將執行程式數量設定為 1  (安裝完預設為2,其實可以不用修改)\n\t2. `Shell` 設定為 `C:\\Windows\\system32\\cmd.exe` \n\n7. 建立第一個作業,選擇新增作業 > 輸入作業名稱 ,選擇「建立多重設定專案」\n![](https://i.imgur.com/0xkci16.jpg)\n8.  **執行一次建置**,這個步驟是為了產生work space 。\nwork space 路徑大致如下 `.\\Jenkins\\workspace\\Project name`\n\n9. 執行 console 並切換路徑至 work space \n10. 將 Openshift 上的 nodejs 應用程式 repo 設為 remote\n\t`>git remote add prod ssh://5**********************@nodejs-youraccount.rhcloud.com/~/git/nodejs.git/`\n\t\n11. 回到Jenkins,作業 > 組態 > 建置 > 新增「執行Windows批次指令」\n\t\n\t``` bat\n\tREM 測試\n\twhoami\n\tgit push prod HEAD^:master\n\t```\n\n\t1. 額外處理事項:\n\t直接在 Jenkins server 發 pr 給 openshift 時,發生 503 錯誤。\n\t使用 ssh 登入 openshift 看 log ,發現 \n\t`Node Sass does not yet support your current environment` 錯誤\n\t必須登入執行以下語法修正模組問題 `npm rebuild node-sass` \n\t\n12. 建置作業,會得到錯誤訊息\n```\n上略...\n19:44:46 Host key verification failed.\n19:44:46 fatal: Could not read from remote repository.\n下略...\n```\n\t\n原因:主機密鑰驗證失敗,這個錯誤的意思是我的 Jenkins Server 主機並不認得遠端的 Openshift Server 的 host key,主要的原因是 Jenkins Service 在執行的身份是 `NT AUTHORITY\\SYSTEM`,由於我已經有合適權限的帳號,所以只需要切換執行 Jenkins Server 的身份即可。\n![](https://i.imgur.com/HSJoXJp.jpg)\n\n如果你尚未建立遠端ssh連線的存取權限,或是對ssh連線不熟悉,可以參考文末的參考聯結。\n\n## 參考\n\n- [SSH原理与运用（一）：远程登录](http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html)\n- [SSH原理与运用（二）：远程操作与端口转发](http://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html)\n- [[Tip] Windows使用ssh對Github進行操作](https://dotblogs.com.tw/kirkchen/2013/04/23/use_ssh_to_interact_with_github_in_windows)\n- [在 Windows 使用「非對稱金鑰」來遠端登入 SSH 的方法](http://www.vixual.net/blog/archives/190)\n\n(fin)","slug":"ci_use_jenkins_on_windows","published":1,"updated":"2017-01-15T15:54:27.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyc3000gyk55yrfhntkp","content":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><ul>\n<li><a href=\"/2017/01/15/ci_use_jenkins/\">CI/CD 環境建置筆記 - 前言&lt;目的&gt;</a></li>\n</ul>\n<h2 id=\"操作記錄\"><a href=\"#操作記錄\" class=\"headerlink\" title=\"操作記錄\"></a>操作記錄</h2><ol>\n<li>下載並安裝Jenkins（記錄版本為2.32.1）</li>\n<li><p>連線localhost:8080,會要求輸入<code>Administrator password</code><br><img src=\"https://i.imgur.com/ik5l0sq.jpg\" alt=\"\"></p>\n</li>\n<li><p>安裝Plugins(這裡選擇預設)<br><img src=\"https://i.imgur.com/dOad35P.jpg\" alt=\"\"></p>\n</li>\n</ol>\n<ol>\n<li><p>安裝畫面<br><img src=\"https://i.imgur.com/6FyGHPm.jpg\" alt=\"\"></p>\n</li>\n<li><p>建立管理者帳號密碼<br><img src=\"https://i.imgur.com/AzHrJdu.jpg\" alt=\"\"><br><img src=\"https://i.imgur.com/2ct8GiO.jpg\" alt=\"\"></p>\n</li>\n<li><p>登入後,管理 Jenkins &gt; 設定系統</p>\n<ol>\n<li>將執行程式數量設定為 1  (安裝完預設為2,其實可以不用修改)</li>\n<li><code>Shell</code> 設定為 <code>C:\\Windows\\system32\\cmd.exe</code> </li>\n</ol>\n</li>\n<li><p>建立第一個作業,選擇新增作業 &gt; 輸入作業名稱 ,選擇「建立多重設定專案」<br><img src=\"https://i.imgur.com/0xkci16.jpg\" alt=\"\"></p>\n</li>\n<li><p><strong>執行一次建置</strong>,這個步驟是為了產生work space 。<br>work space 路徑大致如下 <code>.\\Jenkins\\workspace\\Project name</code></p>\n</li>\n<li><p>執行 console 並切換路徑至 work space </p>\n</li>\n<li><p>將 Openshift 上的 nodejs 應用程式 repo 設為 remote<br><code>&gt;git remote add prod ssh://5**********************@nodejs-youraccount.rhcloud.com/~/git/nodejs.git/</code></p>\n</li>\n<li><p>回到Jenkins,作業 &gt; 組態 &gt; 建置 &gt; 新增「執行Windows批次指令」</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">REM 測試</span></div><div class=\"line\">whoami</div><div class=\"line\">git push prod HEAD^:master</div></pre></td></tr></table></figure>\n<ol>\n<li>額外處理事項:<br>直接在 Jenkins server 發 pr 給 openshift 時,發生 503 錯誤。<br>使用 ssh 登入 openshift 看 log ,發現<br><code>Node Sass does not yet support your current environment</code> 錯誤<br>必須登入執行以下語法修正模組問題 <code>npm rebuild node-sass</code> </li>\n</ol>\n</li>\n<li><p>建置作業,會得到錯誤訊息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">上略...</div><div class=\"line\">19:44:46 Host key verification failed.</div><div class=\"line\">19:44:46 fatal: Could not read from remote repository.</div><div class=\"line\">下略...</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>原因:主機密鑰驗證失敗,這個錯誤的意思是我的 Jenkins Server 主機並不認得遠端的 Openshift Server 的 host key,主要的原因是 Jenkins Service 在執行的身份是 <code>NT AUTHORITY\\SYSTEM</code>,由於我已經有合適權限的帳號,所以只需要切換執行 Jenkins Server 的身份即可。<br><img src=\"https://i.imgur.com/HSJoXJp.jpg\" alt=\"\"></p>\n<p>如果你尚未建立遠端ssh連線的存取權限,或是對ssh連線不熟悉,可以參考文末的參考聯結。</p>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html\" target=\"_blank\" rel=\"external\">SSH原理与运用（一）：远程登录</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html\" target=\"_blank\" rel=\"external\">SSH原理与运用（二）：远程操作与端口转发</a></li>\n<li><a href=\"https://dotblogs.com.tw/kirkchen/2013/04/23/use_ssh_to_interact_with_github_in_windows\" target=\"_blank\" rel=\"external\">[Tip] Windows使用ssh對Github進行操作</a></li>\n<li><a href=\"http://www.vixual.net/blog/archives/190\" target=\"_blank\" rel=\"external\">在 Windows 使用「非對稱金鑰」來遠端登入 SSH 的方法</a></li>\n</ul>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><ul>\n<li><a href=\"/2017/01/15/ci_use_jenkins/\">CI/CD 環境建置筆記 - 前言&lt;目的&gt;</a></li>\n</ul>\n<h2 id=\"操作記錄\"><a href=\"#操作記錄\" class=\"headerlink\" title=\"操作記錄\"></a>操作記錄</h2><ol>\n<li>下載並安裝Jenkins（記錄版本為2.32.1）</li>\n<li><p>連線localhost:8080,會要求輸入<code>Administrator password</code><br><img src=\"https://i.imgur.com/ik5l0sq.jpg\" alt=\"\"></p>\n</li>\n<li><p>安裝Plugins(這裡選擇預設)<br><img src=\"https://i.imgur.com/dOad35P.jpg\" alt=\"\"></p>\n</li>\n</ol>\n<ol>\n<li><p>安裝畫面<br><img src=\"https://i.imgur.com/6FyGHPm.jpg\" alt=\"\"></p>\n</li>\n<li><p>建立管理者帳號密碼<br><img src=\"https://i.imgur.com/AzHrJdu.jpg\" alt=\"\"><br><img src=\"https://i.imgur.com/2ct8GiO.jpg\" alt=\"\"></p>\n</li>\n<li><p>登入後,管理 Jenkins &gt; 設定系統</p>\n<ol>\n<li>將執行程式數量設定為 1  (安裝完預設為2,其實可以不用修改)</li>\n<li><code>Shell</code> 設定為 <code>C:\\Windows\\system32\\cmd.exe</code> </li>\n</ol>\n</li>\n<li><p>建立第一個作業,選擇新增作業 &gt; 輸入作業名稱 ,選擇「建立多重設定專案」<br><img src=\"https://i.imgur.com/0xkci16.jpg\" alt=\"\"></p>\n</li>\n<li><p><strong>執行一次建置</strong>,這個步驟是為了產生work space 。<br>work space 路徑大致如下 <code>.\\Jenkins\\workspace\\Project name</code></p>\n</li>\n<li><p>執行 console 並切換路徑至 work space </p>\n</li>\n<li><p>將 Openshift 上的 nodejs 應用程式 repo 設為 remote<br><code>&gt;git remote add prod ssh://5**********************@nodejs-youraccount.rhcloud.com/~/git/nodejs.git/</code></p>\n</li>\n<li><p>回到Jenkins,作業 &gt; 組態 &gt; 建置 &gt; 新增「執行Windows批次指令」</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">REM 測試</span></div><div class=\"line\">whoami</div><div class=\"line\">git push prod HEAD^:master</div></pre></td></tr></table></figure>\n<ol>\n<li>額外處理事項:<br>直接在 Jenkins server 發 pr 給 openshift 時,發生 503 錯誤。<br>使用 ssh 登入 openshift 看 log ,發現<br><code>Node Sass does not yet support your current environment</code> 錯誤<br>必須登入執行以下語法修正模組問題 <code>npm rebuild node-sass</code> </li>\n</ol>\n</li>\n<li><p>建置作業,會得到錯誤訊息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">上略...</div><div class=\"line\">19:44:46 Host key verification failed.</div><div class=\"line\">19:44:46 fatal: Could not read from remote repository.</div><div class=\"line\">下略...</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>原因:主機密鑰驗證失敗,這個錯誤的意思是我的 Jenkins Server 主機並不認得遠端的 Openshift Server 的 host key,主要的原因是 Jenkins Service 在執行的身份是 <code>NT AUTHORITY\\SYSTEM</code>,由於我已經有合適權限的帳號,所以只需要切換執行 Jenkins Server 的身份即可。<br><img src=\"https://i.imgur.com/HSJoXJp.jpg\" alt=\"\"></p>\n<p>如果你尚未建立遠端ssh連線的存取權限,或是對ssh連線不熟悉,可以參考文末的參考聯結。</p>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html\" target=\"_blank\" rel=\"external\">SSH原理与运用（一）：远程登录</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html\" target=\"_blank\" rel=\"external\">SSH原理与运用（二）：远程操作与端口转发</a></li>\n<li><a href=\"https://dotblogs.com.tw/kirkchen/2013/04/23/use_ssh_to_interact_with_github_in_windows\" target=\"_blank\" rel=\"external\">[Tip] Windows使用ssh對Github進行操作</a></li>\n<li><a href=\"http://www.vixual.net/blog/archives/190\" target=\"_blank\" rel=\"external\">在 Windows 使用「非對稱金鑰」來遠端登入 SSH 的方法</a></li>\n</ul>\n<p>(fin)</p>\n"},{"title":"將 Express 網站整合 Typescirpt 開發","date":"2017-08-16T08:26:14.000Z","_content":"## 原因與目的\n- 目前我使用 express 作為網站開發\n- 我是個 .NET 工程師,習慣用強型別語言作開發 (C#)\n- 網路上找的文章\n\t- [TypeScript 2 + Express + Node.js](http://brianflove.com/2016/11/08/typescript-2-express-node/)\n\t- [TypeScript + Express + Node.js](http://brianflove.com/2016/03/29/typescript-express-node-js/)\n- 這件事情理論上是可行的,而且又有人作過,又能讓我以自已比較習慣的方式作開發\n\n## 技術問題\n- grunt/gulp/webpack \n\t- 選擇 gulp希望能切換到webpack\n- typescript\n\n## 初期目標\n\n- 把所有js 改成 ts\n- 相同指令即可完成編譯與開啟站台\n- 可部署到正式環境\n\n## 構想\n~~原本我是想把整個專案重新編譯至另外一個資料夾中,~~  \n~~再由該資料夾設為起始專案執行~~\n在建立typescript資料夾，只編譯相關的ts檔;\n至於哪些是**相關的ts檔**?\n1. `app.ts`(編譯為`app.js`)\n\t在根目錄作為所有request入口的起始檔案,用來解析request需要對應的router\n\t這裡可能會有一些共用的商務/系統邏輯或是錯誤處理\n2. 所有的router\n\t這是最接近使用者的 business logic code,影響返回的頁面與呈現的資料,\n\t通常這裡主要的目的是組合來自不同的service的資訊,再返回給view層,\n\t不過有時候也會處理一些顯示邏輯.\n3. 所有的service\n\t這層擁最主要的商務邏輯,大多會依功能性作區分(ex:授權、會員、購物車等...)\n\t也有專門的service提供共用的方法及模組,\n\t並透過repository取得/更新資料\n\t\n4. 所有的repository\n\t這層最主要的功能是直接與資料庫作存取\n5. 其它\n\t例如:Interface, Class, Enum 或是一些框架所需要額外的方法.\n\n## 實作\n\n定義好需要修改的範圍後,我建立了一個typescript資料夾\n裡面會建立相對應的`router`,`service`與`repository`資料夾\n與一個`app.ts`檔案.\n\n一開始將所有js檔案依照相對的位置,照抄複製放入對應位置,並將副檔名改為`.ts`\n接下我將利用gulp幫執行相關的編譯行為.\n我們可以預期編譯產生的`.js`檔可以執行,因為Typescript是Javascript的Super Set\n\n### gulp\n- 安裝gulp\n`npm install gulp -g`\n`npm install gulp --save`\n`npm install gulp-typescript --save`\n\n- 安裝相關模組 \n`npm install @types/node --save-dev`\n`npm install --save @types/express`\n`npm install --save @types/morgan`\n`npm install --save @types/cookie-parser`\n`npm install --save @types/httperr` \n實際安裝哪些模組與專案所需要的有關,通常只要在npm搜尋`npm @types module_name`\n就可以找得到,不過有時候也會有找不到情況\n這個時候很苦惱了,我們想要ts的強型別即時除錯,但是自已刻又太自虐,\n我的想法是只有自已寫的`router`,`service`與`repository`有需要即時除錯.\n之後實務上有遇到再回來補充.\n\n- 設定gulp file\n```\nvar gulp = require('gulp');\nvar tsc = require('gulp-typescript'); \n\ngulp.task('app', function() {     \n        return gulp.src(['typescript/app.ts','typescript/**/*.ts'])        \n        .pipe(tsc({\n                target: \"es2017\",                          /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'. */\n                module: \"es2015\",                     /* Specify module code generation: 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */\n                lib: [\"es2015\",\"dom\"],\n                noImplicitAny: false,\n            }))\n        .pipe(gulp.dest('./'));        \n}); \n```\n我們不需要`tsconfig.json`這個檔案,直接可以寫成json物件\n另外記得設定src(ts所在的位置)與dest(輸出ts的位置)\n\n- 設定package.json\n```\n  \"scripts\": {\n    \"start\": \"node ./bin/www\",\n    \"dev\": \"supervisor ./bin/www\",\n    \"test\": \"node_modules/.bin/nightwatch\",\n    \"e2e\": \"npm-run-all --parallel start test\",\n    \"run\": \"node ./bin/www\",\n    \"ts\": \"gulp app\"\n  }\n```\n\n- 執行 `npm run ts`\n- 檢查輸出的js,再說一次因為Typescript是Javascript的Super Set\n  所以可以預期會產生相同的檔案內容(副檔名變成.js)\n- 運行網站確定功能正常\n\n### 修改ts檔\n雖然js檔已正常產生,但是其實這一切都是假的!\n原因是我們的ts檔其實仍然在寫js\n![](https://i.imgur.com/5aCuXSy.jpg)\n在執行gulp的過程當中,應該可以看到一些提示訊息.\n由於有各種情況,就不一一說明了. \n我在這此改版的疑難就附在下面,如果有遇到相同的問題,可以作為參考.\n如果有不同問題,也可以留言討論喔(雖然我覺得是自行google會快一些) XD\n\n### 疑難\n\n- [typescript getting error TS2304: cannot find name 'require'](https://stackoverflow.com/questions/31173738/typescript-getting-error-ts2304-cannot-find-name-require)\n\n- [Express and Typescript - Error.stack and Error.status properties do not exist](https://stackoverflow.com/questions/28793098/express-and-typescript-error-stack-and-error-status-properties-do-not-exist)\t\n- [Error TS2693: 'Promise' only refers to a type, but is being used as a value here.](https://github.com/Microsoft/vscode/issues/21968)\n\t\n\n## 參考\n\n1. [npm scripts 使用指南](http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html)\n2. [typescript getting error TS2304: cannot find name ' require'\n](https://stackoverflow.com/questions/31173738/typescript-getting-error-ts2304-cannot-find-name-require)\n3. [Express and Typescript - Error.stack and Error.status properties do not exist](https://stackoverflow.com/questions/28793098/express-and-typescript-error-stack-and-error-status-properties-do-not-exist)\n4. [gulp-typescript](https://github.com/ivogabe/gulp-typescript)\n5. [Promise static method give error](https://github.com/Microsoft/vscode/issues/21968)\n","source":"_posts/express_with_typescript.md","raw":"---\ntitle: \"將 Express 網站整合 Typescirpt 開發\"\ndate: 2017/08/16 16:26:14\ntag:\n  - expressjs\n  - typescript\n  - gulp\n  - nodejs\n---\n## 原因與目的\n- 目前我使用 express 作為網站開發\n- 我是個 .NET 工程師,習慣用強型別語言作開發 (C#)\n- 網路上找的文章\n\t- [TypeScript 2 + Express + Node.js](http://brianflove.com/2016/11/08/typescript-2-express-node/)\n\t- [TypeScript + Express + Node.js](http://brianflove.com/2016/03/29/typescript-express-node-js/)\n- 這件事情理論上是可行的,而且又有人作過,又能讓我以自已比較習慣的方式作開發\n\n## 技術問題\n- grunt/gulp/webpack \n\t- 選擇 gulp希望能切換到webpack\n- typescript\n\n## 初期目標\n\n- 把所有js 改成 ts\n- 相同指令即可完成編譯與開啟站台\n- 可部署到正式環境\n\n## 構想\n~~原本我是想把整個專案重新編譯至另外一個資料夾中,~~  \n~~再由該資料夾設為起始專案執行~~\n在建立typescript資料夾，只編譯相關的ts檔;\n至於哪些是**相關的ts檔**?\n1. `app.ts`(編譯為`app.js`)\n\t在根目錄作為所有request入口的起始檔案,用來解析request需要對應的router\n\t這裡可能會有一些共用的商務/系統邏輯或是錯誤處理\n2. 所有的router\n\t這是最接近使用者的 business logic code,影響返回的頁面與呈現的資料,\n\t通常這裡主要的目的是組合來自不同的service的資訊,再返回給view層,\n\t不過有時候也會處理一些顯示邏輯.\n3. 所有的service\n\t這層擁最主要的商務邏輯,大多會依功能性作區分(ex:授權、會員、購物車等...)\n\t也有專門的service提供共用的方法及模組,\n\t並透過repository取得/更新資料\n\t\n4. 所有的repository\n\t這層最主要的功能是直接與資料庫作存取\n5. 其它\n\t例如:Interface, Class, Enum 或是一些框架所需要額外的方法.\n\n## 實作\n\n定義好需要修改的範圍後,我建立了一個typescript資料夾\n裡面會建立相對應的`router`,`service`與`repository`資料夾\n與一個`app.ts`檔案.\n\n一開始將所有js檔案依照相對的位置,照抄複製放入對應位置,並將副檔名改為`.ts`\n接下我將利用gulp幫執行相關的編譯行為.\n我們可以預期編譯產生的`.js`檔可以執行,因為Typescript是Javascript的Super Set\n\n### gulp\n- 安裝gulp\n`npm install gulp -g`\n`npm install gulp --save`\n`npm install gulp-typescript --save`\n\n- 安裝相關模組 \n`npm install @types/node --save-dev`\n`npm install --save @types/express`\n`npm install --save @types/morgan`\n`npm install --save @types/cookie-parser`\n`npm install --save @types/httperr` \n實際安裝哪些模組與專案所需要的有關,通常只要在npm搜尋`npm @types module_name`\n就可以找得到,不過有時候也會有找不到情況\n這個時候很苦惱了,我們想要ts的強型別即時除錯,但是自已刻又太自虐,\n我的想法是只有自已寫的`router`,`service`與`repository`有需要即時除錯.\n之後實務上有遇到再回來補充.\n\n- 設定gulp file\n```\nvar gulp = require('gulp');\nvar tsc = require('gulp-typescript'); \n\ngulp.task('app', function() {     \n        return gulp.src(['typescript/app.ts','typescript/**/*.ts'])        \n        .pipe(tsc({\n                target: \"es2017\",                          /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'. */\n                module: \"es2015\",                     /* Specify module code generation: 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */\n                lib: [\"es2015\",\"dom\"],\n                noImplicitAny: false,\n            }))\n        .pipe(gulp.dest('./'));        \n}); \n```\n我們不需要`tsconfig.json`這個檔案,直接可以寫成json物件\n另外記得設定src(ts所在的位置)與dest(輸出ts的位置)\n\n- 設定package.json\n```\n  \"scripts\": {\n    \"start\": \"node ./bin/www\",\n    \"dev\": \"supervisor ./bin/www\",\n    \"test\": \"node_modules/.bin/nightwatch\",\n    \"e2e\": \"npm-run-all --parallel start test\",\n    \"run\": \"node ./bin/www\",\n    \"ts\": \"gulp app\"\n  }\n```\n\n- 執行 `npm run ts`\n- 檢查輸出的js,再說一次因為Typescript是Javascript的Super Set\n  所以可以預期會產生相同的檔案內容(副檔名變成.js)\n- 運行網站確定功能正常\n\n### 修改ts檔\n雖然js檔已正常產生,但是其實這一切都是假的!\n原因是我們的ts檔其實仍然在寫js\n![](https://i.imgur.com/5aCuXSy.jpg)\n在執行gulp的過程當中,應該可以看到一些提示訊息.\n由於有各種情況,就不一一說明了. \n我在這此改版的疑難就附在下面,如果有遇到相同的問題,可以作為參考.\n如果有不同問題,也可以留言討論喔(雖然我覺得是自行google會快一些) XD\n\n### 疑難\n\n- [typescript getting error TS2304: cannot find name 'require'](https://stackoverflow.com/questions/31173738/typescript-getting-error-ts2304-cannot-find-name-require)\n\n- [Express and Typescript - Error.stack and Error.status properties do not exist](https://stackoverflow.com/questions/28793098/express-and-typescript-error-stack-and-error-status-properties-do-not-exist)\t\n- [Error TS2693: 'Promise' only refers to a type, but is being used as a value here.](https://github.com/Microsoft/vscode/issues/21968)\n\t\n\n## 參考\n\n1. [npm scripts 使用指南](http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html)\n2. [typescript getting error TS2304: cannot find name ' require'\n](https://stackoverflow.com/questions/31173738/typescript-getting-error-ts2304-cannot-find-name-require)\n3. [Express and Typescript - Error.stack and Error.status properties do not exist](https://stackoverflow.com/questions/28793098/express-and-typescript-error-stack-and-error-status-properties-do-not-exist)\n4. [gulp-typescript](https://github.com/ivogabe/gulp-typescript)\n5. [Promise static method give error](https://github.com/Microsoft/vscode/issues/21968)\n","slug":"express_with_typescript","published":1,"updated":"2018-01-30T16:29:44.621Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyc5000hyk555riwrfic","content":"<h2 id=\"原因與目的\"><a href=\"#原因與目的\" class=\"headerlink\" title=\"原因與目的\"></a>原因與目的</h2><ul>\n<li>目前我使用 express 作為網站開發</li>\n<li>我是個 .NET 工程師,習慣用強型別語言作開發 (C#)</li>\n<li>網路上找的文章<ul>\n<li><a href=\"http://brianflove.com/2016/11/08/typescript-2-express-node/\" target=\"_blank\" rel=\"external\">TypeScript 2 + Express + Node.js</a></li>\n<li><a href=\"http://brianflove.com/2016/03/29/typescript-express-node-js/\" target=\"_blank\" rel=\"external\">TypeScript + Express + Node.js</a></li>\n</ul>\n</li>\n<li>這件事情理論上是可行的,而且又有人作過,又能讓我以自已比較習慣的方式作開發</li>\n</ul>\n<h2 id=\"技術問題\"><a href=\"#技術問題\" class=\"headerlink\" title=\"技術問題\"></a>技術問題</h2><ul>\n<li>grunt/gulp/webpack <ul>\n<li>選擇 gulp希望能切換到webpack</li>\n</ul>\n</li>\n<li>typescript</li>\n</ul>\n<h2 id=\"初期目標\"><a href=\"#初期目標\" class=\"headerlink\" title=\"初期目標\"></a>初期目標</h2><ul>\n<li>把所有js 改成 ts</li>\n<li>相同指令即可完成編譯與開啟站台</li>\n<li>可部署到正式環境</li>\n</ul>\n<h2 id=\"構想\"><a href=\"#構想\" class=\"headerlink\" title=\"構想\"></a>構想</h2><p><del>原本我是想把整個專案重新編譯至另外一個資料夾中,</del><br><del>再由該資料夾設為起始專案執行</del><br>在建立typescript資料夾，只編譯相關的ts檔;<br>至於哪些是<strong>相關的ts檔</strong>?</p>\n<ol>\n<li><code>app.ts</code>(編譯為<code>app.js</code>)<br> 在根目錄作為所有request入口的起始檔案,用來解析request需要對應的router<br> 這裡可能會有一些共用的商務/系統邏輯或是錯誤處理</li>\n<li>所有的router<br> 這是最接近使用者的 business logic code,影響返回的頁面與呈現的資料,<br> 通常這裡主要的目的是組合來自不同的service的資訊,再返回給view層,<br> 不過有時候也會處理一些顯示邏輯.</li>\n<li><p>所有的service<br> 這層擁最主要的商務邏輯,大多會依功能性作區分(ex:授權、會員、購物車等…)<br> 也有專門的service提供共用的方法及模組,<br> 並透過repository取得/更新資料</p>\n</li>\n<li><p>所有的repository<br> 這層最主要的功能是直接與資料庫作存取</p>\n</li>\n<li>其它<br> 例如:Interface, Class, Enum 或是一些框架所需要額外的方法.</li>\n</ol>\n<h2 id=\"實作\"><a href=\"#實作\" class=\"headerlink\" title=\"實作\"></a>實作</h2><p>定義好需要修改的範圍後,我建立了一個typescript資料夾<br>裡面會建立相對應的<code>router</code>,<code>service</code>與<code>repository</code>資料夾<br>與一個<code>app.ts</code>檔案.</p>\n<p>一開始將所有js檔案依照相對的位置,照抄複製放入對應位置,並將副檔名改為<code>.ts</code><br>接下我將利用gulp幫執行相關的編譯行為.<br>我們可以預期編譯產生的<code>.js</code>檔可以執行,因為Typescript是Javascript的Super Set</p>\n<h3 id=\"gulp\"><a href=\"#gulp\" class=\"headerlink\" title=\"gulp\"></a>gulp</h3><ul>\n<li><p>安裝gulp<br><code>npm install gulp -g</code><br><code>npm install gulp --save</code><br><code>npm install gulp-typescript --save</code></p>\n</li>\n<li><p>安裝相關模組<br><code>npm install @types/node --save-dev</code><br><code>npm install --save @types/express</code><br><code>npm install --save @types/morgan</code><br><code>npm install --save @types/cookie-parser</code><br><code>npm install --save @types/httperr</code><br>實際安裝哪些模組與專案所需要的有關,通常只要在npm搜尋<code>npm @types module_name</code><br>就可以找得到,不過有時候也會有找不到情況<br>這個時候很苦惱了,我們想要ts的強型別即時除錯,但是自已刻又太自虐,<br>我的想法是只有自已寫的<code>router</code>,<code>service</code>與<code>repository</code>有需要即時除錯.<br>之後實務上有遇到再回來補充.</p>\n</li>\n<li><p>設定gulp file</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var gulp = require(&apos;gulp&apos;);</div><div class=\"line\">var tsc = require(&apos;gulp-typescript&apos;); </div><div class=\"line\"></div><div class=\"line\">gulp.task(&apos;app&apos;, function() &#123;     </div><div class=\"line\">        return gulp.src([&apos;typescript/app.ts&apos;,&apos;typescript/**/*.ts&apos;])        </div><div class=\"line\">        .pipe(tsc(&#123;</div><div class=\"line\">                target: &quot;es2017&quot;,                          /* Specify ECMAScript target version: &apos;ES3&apos; (default), &apos;ES5&apos;, &apos;ES2015&apos;, &apos;ES2016&apos;, &apos;ES2017&apos;, or &apos;ESNEXT&apos;. */</div><div class=\"line\">                module: &quot;es2015&quot;,                     /* Specify module code generation: &apos;commonjs&apos;, &apos;amd&apos;, &apos;system&apos;, &apos;umd&apos;, &apos;es2015&apos;, or &apos;ESNext&apos;. */</div><div class=\"line\">                lib: [&quot;es2015&quot;,&quot;dom&quot;],</div><div class=\"line\">                noImplicitAny: false,</div><div class=\"line\">            &#125;))</div><div class=\"line\">        .pipe(gulp.dest(&apos;./&apos;));        </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>我們不需要<code>tsconfig.json</code>這個檔案,直接可以寫成json物件<br>另外記得設定src(ts所在的位置)與dest(輸出ts的位置)</p>\n<ul>\n<li><p>設定package.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;scripts&quot;: &#123;</div><div class=\"line\">  &quot;start&quot;: &quot;node ./bin/www&quot;,</div><div class=\"line\">  &quot;dev&quot;: &quot;supervisor ./bin/www&quot;,</div><div class=\"line\">  &quot;test&quot;: &quot;node_modules/.bin/nightwatch&quot;,</div><div class=\"line\">  &quot;e2e&quot;: &quot;npm-run-all --parallel start test&quot;,</div><div class=\"line\">  &quot;run&quot;: &quot;node ./bin/www&quot;,</div><div class=\"line\">  &quot;ts&quot;: &quot;gulp app&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>執行 <code>npm run ts</code></p>\n</li>\n<li>檢查輸出的js,再說一次因為Typescript是Javascript的Super Set<br>所以可以預期會產生相同的檔案內容(副檔名變成.js)</li>\n<li>運行網站確定功能正常</li>\n</ul>\n<h3 id=\"修改ts檔\"><a href=\"#修改ts檔\" class=\"headerlink\" title=\"修改ts檔\"></a>修改ts檔</h3><p>雖然js檔已正常產生,但是其實這一切都是假的!<br>原因是我們的ts檔其實仍然在寫js<br><img src=\"https://i.imgur.com/5aCuXSy.jpg\" alt=\"\"><br>在執行gulp的過程當中,應該可以看到一些提示訊息.<br>由於有各種情況,就不一一說明了.<br>我在這此改版的疑難就附在下面,如果有遇到相同的問題,可以作為參考.<br>如果有不同問題,也可以留言討論喔(雖然我覺得是自行google會快一些) XD</p>\n<h3 id=\"疑難\"><a href=\"#疑難\" class=\"headerlink\" title=\"疑難\"></a>疑難</h3><ul>\n<li><p><a href=\"https://stackoverflow.com/questions/31173738/typescript-getting-error-ts2304-cannot-find-name-require\" target=\"_blank\" rel=\"external\">typescript getting error TS2304: cannot find name ‘require’</a></p>\n</li>\n<li><p><a href=\"https://stackoverflow.com/questions/28793098/express-and-typescript-error-stack-and-error-status-properties-do-not-exist\" target=\"_blank\" rel=\"external\">Express and Typescript - Error.stack and Error.status properties do not exist</a>    </p>\n</li>\n<li><a href=\"https://github.com/Microsoft/vscode/issues/21968\" target=\"_blank\" rel=\"external\">Error TS2693: ‘Promise’ only refers to a type, but is being used as a value here.</a></li>\n</ul>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ol>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html\" target=\"_blank\" rel=\"external\">npm scripts 使用指南</a></li>\n<li><a href=\"https://stackoverflow.com/questions/31173738/typescript-getting-error-ts2304-cannot-find-name-require\" target=\"_blank\" rel=\"external\">typescript getting error TS2304: cannot find name ‘ require’\n</a></li>\n<li><a href=\"https://stackoverflow.com/questions/28793098/express-and-typescript-error-stack-and-error-status-properties-do-not-exist\" target=\"_blank\" rel=\"external\">Express and Typescript - Error.stack and Error.status properties do not exist</a></li>\n<li><a href=\"https://github.com/ivogabe/gulp-typescript\" target=\"_blank\" rel=\"external\">gulp-typescript</a></li>\n<li><a href=\"https://github.com/Microsoft/vscode/issues/21968\" target=\"_blank\" rel=\"external\">Promise static method give error</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"原因與目的\"><a href=\"#原因與目的\" class=\"headerlink\" title=\"原因與目的\"></a>原因與目的</h2><ul>\n<li>目前我使用 express 作為網站開發</li>\n<li>我是個 .NET 工程師,習慣用強型別語言作開發 (C#)</li>\n<li>網路上找的文章<ul>\n<li><a href=\"http://brianflove.com/2016/11/08/typescript-2-express-node/\" target=\"_blank\" rel=\"external\">TypeScript 2 + Express + Node.js</a></li>\n<li><a href=\"http://brianflove.com/2016/03/29/typescript-express-node-js/\" target=\"_blank\" rel=\"external\">TypeScript + Express + Node.js</a></li>\n</ul>\n</li>\n<li>這件事情理論上是可行的,而且又有人作過,又能讓我以自已比較習慣的方式作開發</li>\n</ul>\n<h2 id=\"技術問題\"><a href=\"#技術問題\" class=\"headerlink\" title=\"技術問題\"></a>技術問題</h2><ul>\n<li>grunt/gulp/webpack <ul>\n<li>選擇 gulp希望能切換到webpack</li>\n</ul>\n</li>\n<li>typescript</li>\n</ul>\n<h2 id=\"初期目標\"><a href=\"#初期目標\" class=\"headerlink\" title=\"初期目標\"></a>初期目標</h2><ul>\n<li>把所有js 改成 ts</li>\n<li>相同指令即可完成編譯與開啟站台</li>\n<li>可部署到正式環境</li>\n</ul>\n<h2 id=\"構想\"><a href=\"#構想\" class=\"headerlink\" title=\"構想\"></a>構想</h2><p><del>原本我是想把整個專案重新編譯至另外一個資料夾中,</del><br><del>再由該資料夾設為起始專案執行</del><br>在建立typescript資料夾，只編譯相關的ts檔;<br>至於哪些是<strong>相關的ts檔</strong>?</p>\n<ol>\n<li><code>app.ts</code>(編譯為<code>app.js</code>)<br> 在根目錄作為所有request入口的起始檔案,用來解析request需要對應的router<br> 這裡可能會有一些共用的商務/系統邏輯或是錯誤處理</li>\n<li>所有的router<br> 這是最接近使用者的 business logic code,影響返回的頁面與呈現的資料,<br> 通常這裡主要的目的是組合來自不同的service的資訊,再返回給view層,<br> 不過有時候也會處理一些顯示邏輯.</li>\n<li><p>所有的service<br> 這層擁最主要的商務邏輯,大多會依功能性作區分(ex:授權、會員、購物車等…)<br> 也有專門的service提供共用的方法及模組,<br> 並透過repository取得/更新資料</p>\n</li>\n<li><p>所有的repository<br> 這層最主要的功能是直接與資料庫作存取</p>\n</li>\n<li>其它<br> 例如:Interface, Class, Enum 或是一些框架所需要額外的方法.</li>\n</ol>\n<h2 id=\"實作\"><a href=\"#實作\" class=\"headerlink\" title=\"實作\"></a>實作</h2><p>定義好需要修改的範圍後,我建立了一個typescript資料夾<br>裡面會建立相對應的<code>router</code>,<code>service</code>與<code>repository</code>資料夾<br>與一個<code>app.ts</code>檔案.</p>\n<p>一開始將所有js檔案依照相對的位置,照抄複製放入對應位置,並將副檔名改為<code>.ts</code><br>接下我將利用gulp幫執行相關的編譯行為.<br>我們可以預期編譯產生的<code>.js</code>檔可以執行,因為Typescript是Javascript的Super Set</p>\n<h3 id=\"gulp\"><a href=\"#gulp\" class=\"headerlink\" title=\"gulp\"></a>gulp</h3><ul>\n<li><p>安裝gulp<br><code>npm install gulp -g</code><br><code>npm install gulp --save</code><br><code>npm install gulp-typescript --save</code></p>\n</li>\n<li><p>安裝相關模組<br><code>npm install @types/node --save-dev</code><br><code>npm install --save @types/express</code><br><code>npm install --save @types/morgan</code><br><code>npm install --save @types/cookie-parser</code><br><code>npm install --save @types/httperr</code><br>實際安裝哪些模組與專案所需要的有關,通常只要在npm搜尋<code>npm @types module_name</code><br>就可以找得到,不過有時候也會有找不到情況<br>這個時候很苦惱了,我們想要ts的強型別即時除錯,但是自已刻又太自虐,<br>我的想法是只有自已寫的<code>router</code>,<code>service</code>與<code>repository</code>有需要即時除錯.<br>之後實務上有遇到再回來補充.</p>\n</li>\n<li><p>設定gulp file</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var gulp = require(&apos;gulp&apos;);</div><div class=\"line\">var tsc = require(&apos;gulp-typescript&apos;); </div><div class=\"line\"></div><div class=\"line\">gulp.task(&apos;app&apos;, function() &#123;     </div><div class=\"line\">        return gulp.src([&apos;typescript/app.ts&apos;,&apos;typescript/**/*.ts&apos;])        </div><div class=\"line\">        .pipe(tsc(&#123;</div><div class=\"line\">                target: &quot;es2017&quot;,                          /* Specify ECMAScript target version: &apos;ES3&apos; (default), &apos;ES5&apos;, &apos;ES2015&apos;, &apos;ES2016&apos;, &apos;ES2017&apos;, or &apos;ESNEXT&apos;. */</div><div class=\"line\">                module: &quot;es2015&quot;,                     /* Specify module code generation: &apos;commonjs&apos;, &apos;amd&apos;, &apos;system&apos;, &apos;umd&apos;, &apos;es2015&apos;, or &apos;ESNext&apos;. */</div><div class=\"line\">                lib: [&quot;es2015&quot;,&quot;dom&quot;],</div><div class=\"line\">                noImplicitAny: false,</div><div class=\"line\">            &#125;))</div><div class=\"line\">        .pipe(gulp.dest(&apos;./&apos;));        </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>我們不需要<code>tsconfig.json</code>這個檔案,直接可以寫成json物件<br>另外記得設定src(ts所在的位置)與dest(輸出ts的位置)</p>\n<ul>\n<li><p>設定package.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;scripts&quot;: &#123;</div><div class=\"line\">  &quot;start&quot;: &quot;node ./bin/www&quot;,</div><div class=\"line\">  &quot;dev&quot;: &quot;supervisor ./bin/www&quot;,</div><div class=\"line\">  &quot;test&quot;: &quot;node_modules/.bin/nightwatch&quot;,</div><div class=\"line\">  &quot;e2e&quot;: &quot;npm-run-all --parallel start test&quot;,</div><div class=\"line\">  &quot;run&quot;: &quot;node ./bin/www&quot;,</div><div class=\"line\">  &quot;ts&quot;: &quot;gulp app&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>執行 <code>npm run ts</code></p>\n</li>\n<li>檢查輸出的js,再說一次因為Typescript是Javascript的Super Set<br>所以可以預期會產生相同的檔案內容(副檔名變成.js)</li>\n<li>運行網站確定功能正常</li>\n</ul>\n<h3 id=\"修改ts檔\"><a href=\"#修改ts檔\" class=\"headerlink\" title=\"修改ts檔\"></a>修改ts檔</h3><p>雖然js檔已正常產生,但是其實這一切都是假的!<br>原因是我們的ts檔其實仍然在寫js<br><img src=\"https://i.imgur.com/5aCuXSy.jpg\" alt=\"\"><br>在執行gulp的過程當中,應該可以看到一些提示訊息.<br>由於有各種情況,就不一一說明了.<br>我在這此改版的疑難就附在下面,如果有遇到相同的問題,可以作為參考.<br>如果有不同問題,也可以留言討論喔(雖然我覺得是自行google會快一些) XD</p>\n<h3 id=\"疑難\"><a href=\"#疑難\" class=\"headerlink\" title=\"疑難\"></a>疑難</h3><ul>\n<li><p><a href=\"https://stackoverflow.com/questions/31173738/typescript-getting-error-ts2304-cannot-find-name-require\" target=\"_blank\" rel=\"external\">typescript getting error TS2304: cannot find name ‘require’</a></p>\n</li>\n<li><p><a href=\"https://stackoverflow.com/questions/28793098/express-and-typescript-error-stack-and-error-status-properties-do-not-exist\" target=\"_blank\" rel=\"external\">Express and Typescript - Error.stack and Error.status properties do not exist</a>    </p>\n</li>\n<li><a href=\"https://github.com/Microsoft/vscode/issues/21968\" target=\"_blank\" rel=\"external\">Error TS2693: ‘Promise’ only refers to a type, but is being used as a value here.</a></li>\n</ul>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ol>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html\" target=\"_blank\" rel=\"external\">npm scripts 使用指南</a></li>\n<li><a href=\"https://stackoverflow.com/questions/31173738/typescript-getting-error-ts2304-cannot-find-name-require\" target=\"_blank\" rel=\"external\">typescript getting error TS2304: cannot find name ‘ require’\n</a></li>\n<li><a href=\"https://stackoverflow.com/questions/28793098/express-and-typescript-error-stack-and-error-status-properties-do-not-exist\" target=\"_blank\" rel=\"external\">Express and Typescript - Error.stack and Error.status properties do not exist</a></li>\n<li><a href=\"https://github.com/ivogabe/gulp-typescript\" target=\"_blank\" rel=\"external\">gulp-typescript</a></li>\n<li><a href=\"https://github.com/Microsoft/vscode/issues/21968\" target=\"_blank\" rel=\"external\">Promise static method give error</a></li>\n</ol>\n"},{"title":"匯入文字資料到MSSQL","date":"2016-08-29T09:24:55.000Z","_content":"## 前置作業\n1. 一個有權限寫入的MSSQLServer與SSMS管理工具\n2. 準備好你的檔案資料(Row Data)\n3. 這份記錄僅供參考(DB版本使用Microsoft SQL Server 2014)\n\n## 步驟記錄\n1. 開啟SSMS，連線測試SQL Server\n2. 對測試資料庫右鍵>工作>匯入資料，開啟「SQL Server匯入匯出精靈」\n3. 「開始畫面」> 下一步\n4. 「資料來源」選擇一般檔案來源，「檔案名稱」選取Row Data的檔案路徑\n5. 請依實際狀況選擇下列欄位\n     - 「略過的標頭資料列數」: 預設為0，可透過設定此欄位略過 Row Data內含註解，標頭等資料\n     - 「第一個資料列的資料行名稱」:若Row Data第一行為標頭，請勾選此欄位\n     - 左側選單選擇「資料行」>「資料列分隔符號」選擇「{CR}{LF}」、「資料行分隔符號」選擇「Tab鍵{t}」\n6. 左側選單選擇「預覽」確認匯入的資料無誤後，點擊下一步\n7. 「目的地」請選擇「SqlServer」，設定ConnectionString\n     - Data Source=1**.***.***.***;Initial Catalog=TestDB;Persist Security Info=True;User ID=tester;Password=********;\n8. 「選取來源資料表和檢視畫面」確認無誤後，點擊下一步。\n9. 「檢閱資料類型對應畫面」請忽略資料類型的警告，點擊下一步。\n10. 「執行封裝畫面」勾選「立即執行」，點擊下一步。\n11. 「完成精靈畫面」點選完成。\n12.  執行時間長短，依Row Data大小而有所差異。\n\n(fin)\n","source":"_posts/file_rowdata_import_mssql.md","raw":"---\ntitle: 匯入文字資料到MSSQL\ndate: 2016/08/29 17:24:55 \ntag:\n- DBA\n- SQL Server\n- 記錄\n---\n## 前置作業\n1. 一個有權限寫入的MSSQLServer與SSMS管理工具\n2. 準備好你的檔案資料(Row Data)\n3. 這份記錄僅供參考(DB版本使用Microsoft SQL Server 2014)\n\n## 步驟記錄\n1. 開啟SSMS，連線測試SQL Server\n2. 對測試資料庫右鍵>工作>匯入資料，開啟「SQL Server匯入匯出精靈」\n3. 「開始畫面」> 下一步\n4. 「資料來源」選擇一般檔案來源，「檔案名稱」選取Row Data的檔案路徑\n5. 請依實際狀況選擇下列欄位\n     - 「略過的標頭資料列數」: 預設為0，可透過設定此欄位略過 Row Data內含註解，標頭等資料\n     - 「第一個資料列的資料行名稱」:若Row Data第一行為標頭，請勾選此欄位\n     - 左側選單選擇「資料行」>「資料列分隔符號」選擇「{CR}{LF}」、「資料行分隔符號」選擇「Tab鍵{t}」\n6. 左側選單選擇「預覽」確認匯入的資料無誤後，點擊下一步\n7. 「目的地」請選擇「SqlServer」，設定ConnectionString\n     - Data Source=1**.***.***.***;Initial Catalog=TestDB;Persist Security Info=True;User ID=tester;Password=********;\n8. 「選取來源資料表和檢視畫面」確認無誤後，點擊下一步。\n9. 「檢閱資料類型對應畫面」請忽略資料類型的警告，點擊下一步。\n10. 「執行封裝畫面」勾選「立即執行」，點擊下一步。\n11. 「完成精靈畫面」點選完成。\n12.  執行時間長短，依Row Data大小而有所差異。\n\n(fin)\n","slug":"file_rowdata_import_mssql","published":1,"updated":"2017-04-29T05:18:22.199Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyc7000iyk55x9elr7gd","content":"<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ol>\n<li>一個有權限寫入的MSSQLServer與SSMS管理工具</li>\n<li>準備好你的檔案資料(Row Data)</li>\n<li>這份記錄僅供參考(DB版本使用Microsoft SQL Server 2014)</li>\n</ol>\n<h2 id=\"步驟記錄\"><a href=\"#步驟記錄\" class=\"headerlink\" title=\"步驟記錄\"></a>步驟記錄</h2><ol>\n<li>開啟SSMS，連線測試SQL Server</li>\n<li>對測試資料庫右鍵&gt;工作&gt;匯入資料，開啟「SQL Server匯入匯出精靈」</li>\n<li>「開始畫面」&gt; 下一步</li>\n<li>「資料來源」選擇一般檔案來源，「檔案名稱」選取Row Data的檔案路徑</li>\n<li>請依實際狀況選擇下列欄位<ul>\n<li>「略過的標頭資料列數」: 預設為0，可透過設定此欄位略過 Row Data內含註解，標頭等資料</li>\n<li>「第一個資料列的資料行名稱」:若Row Data第一行為標頭，請勾選此欄位</li>\n<li>左側選單選擇「資料行」&gt;「資料列分隔符號」選擇「{CR}{LF}」、「資料行分隔符號」選擇「Tab鍵{t}」</li>\n</ul>\n</li>\n<li>左側選單選擇「預覽」確認匯入的資料無誤後，點擊下一步</li>\n<li>「目的地」請選擇「SqlServer」，設定ConnectionString<ul>\n<li>Data Source=1<strong>.*</strong>.<strong><em>.</em></strong>;Initial Catalog=TestDB;Persist Security Info=True;User ID=tester;Password=<strong><em>**</em></strong>;</li>\n</ul>\n</li>\n<li>「選取來源資料表和檢視畫面」確認無誤後，點擊下一步。</li>\n<li>「檢閱資料類型對應畫面」請忽略資料類型的警告，點擊下一步。</li>\n<li>「執行封裝畫面」勾選「立即執行」，點擊下一步。</li>\n<li>「完成精靈畫面」點選完成。</li>\n<li>執行時間長短，依Row Data大小而有所差異。</li>\n</ol>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ol>\n<li>一個有權限寫入的MSSQLServer與SSMS管理工具</li>\n<li>準備好你的檔案資料(Row Data)</li>\n<li>這份記錄僅供參考(DB版本使用Microsoft SQL Server 2014)</li>\n</ol>\n<h2 id=\"步驟記錄\"><a href=\"#步驟記錄\" class=\"headerlink\" title=\"步驟記錄\"></a>步驟記錄</h2><ol>\n<li>開啟SSMS，連線測試SQL Server</li>\n<li>對測試資料庫右鍵&gt;工作&gt;匯入資料，開啟「SQL Server匯入匯出精靈」</li>\n<li>「開始畫面」&gt; 下一步</li>\n<li>「資料來源」選擇一般檔案來源，「檔案名稱」選取Row Data的檔案路徑</li>\n<li>請依實際狀況選擇下列欄位<ul>\n<li>「略過的標頭資料列數」: 預設為0，可透過設定此欄位略過 Row Data內含註解，標頭等資料</li>\n<li>「第一個資料列的資料行名稱」:若Row Data第一行為標頭，請勾選此欄位</li>\n<li>左側選單選擇「資料行」&gt;「資料列分隔符號」選擇「{CR}{LF}」、「資料行分隔符號」選擇「Tab鍵{t}」</li>\n</ul>\n</li>\n<li>左側選單選擇「預覽」確認匯入的資料無誤後，點擊下一步</li>\n<li>「目的地」請選擇「SqlServer」，設定ConnectionString<ul>\n<li>Data Source=1<strong>.*</strong>.<strong><em>.</em></strong>;Initial Catalog=TestDB;Persist Security Info=True;User ID=tester;Password=<strong><em>**</em></strong>;</li>\n</ul>\n</li>\n<li>「選取來源資料表和檢視畫面」確認無誤後，點擊下一步。</li>\n<li>「檢閱資料類型對應畫面」請忽略資料類型的警告，點擊下一步。</li>\n<li>「執行封裝畫面」勾選「立即執行」，點擊下一步。</li>\n<li>「完成精靈畫面」點選完成。</li>\n<li>執行時間長短，依Row Data大小而有所差異。</li>\n</ol>\n<p>(fin)</p>\n"},{"title":"[記錄]串接 GOOGLE API 取得資料(一)","date":"2017-07-14T07:14:27.000Z","_content":"## 原由\n\n最近看了一本書,「最有生產力的一年」. 書如其名,是一本有關生產力的書,作者用了一年的時間, \n\n以自已作實驗,測試各種方法並檢驗是否有效. \n\n作者認為,時間 x 專注力 x 精力 = 生產力, 在他眾多的方法之中, \n\n「黃金時間」與「精神力評鑑」是一組相關的方法. \n\n簡單的說,一個人的精力狀況,會隨著一天的生理、心理等客觀或主觀因素起起伏伏,\n\n就像潮汐一樣,而作者認為人應該在精力最好的時段,作最有價值的事.\n\n這個時段就被稱作「黃金時間」.\n\n有些人黃金時間在早上,有些人在晚上,每個人都不相同,\n\n因此需要記錄精神狀態來判斷.\n\n## 規劃\n\n於是我設計一組簡單的方法來記錄精神狀態\n\n透過google表單用來作記錄,\n\n![](https://i.imgur.com/XjfNTZR.jpg)\n\n狀態我以10分制來作為評選, 再兩兩一組, 共分為五組「優、良、佳、可、劣」\n\n在評鑑時先以五分法判斷精力狀況, 再以感覺是好一點或差一點來選取分數. \n\n### 行動化\n\n以我個人的習慣, 手機其實是不離身的, 如果每次記錄都要在個人電腦上作業, 其實是很不方便的.\n\n所以我參考了電腦玩物的「[Excel 記帳雲端進化！ Google 表單比記帳 App 還好用](http://www.playpcesor.com/2015/09/excel-google-sheet-form-account-book.html)」\n\n將我的表單(偽)APP化\n\n![](https://i.imgur.com/FW0VvjY.jpg)\n\n如此一來便完成了方便記錄的工具, 至於記錄下來的數據如何應用\n\n又是後話了. 不過順帶一提,我會透過整點報時的工具來提醒自已作記錄,\n\n另外我不像「最有生產力的一年」的作者特別準時睡覺,或是不喝咖啡,\n\n因為不準時睡覺跟嗜飲咖啡是我目前的習慣,我認為抱持平常的狀態去記錄才有意義.\n\n又或者當我戒掉咖啡或是開始早睡早起的習慣時,我就可以用記錄來評量這樣的行為是否有所改善.\n\n\n(fin)","source":"_posts/google_api_auth_1.md","raw":"---\ntitle: \"[記錄]串接 GOOGLE API 取得資料(一)\"\ndate: 2017/07/14 15:14:27\ntag:\n  - Google API\n  - 最有生產力的一年\n---\n## 原由\n\n最近看了一本書,「最有生產力的一年」. 書如其名,是一本有關生產力的書,作者用了一年的時間, \n\n以自已作實驗,測試各種方法並檢驗是否有效. \n\n作者認為,時間 x 專注力 x 精力 = 生產力, 在他眾多的方法之中, \n\n「黃金時間」與「精神力評鑑」是一組相關的方法. \n\n簡單的說,一個人的精力狀況,會隨著一天的生理、心理等客觀或主觀因素起起伏伏,\n\n就像潮汐一樣,而作者認為人應該在精力最好的時段,作最有價值的事.\n\n這個時段就被稱作「黃金時間」.\n\n有些人黃金時間在早上,有些人在晚上,每個人都不相同,\n\n因此需要記錄精神狀態來判斷.\n\n## 規劃\n\n於是我設計一組簡單的方法來記錄精神狀態\n\n透過google表單用來作記錄,\n\n![](https://i.imgur.com/XjfNTZR.jpg)\n\n狀態我以10分制來作為評選, 再兩兩一組, 共分為五組「優、良、佳、可、劣」\n\n在評鑑時先以五分法判斷精力狀況, 再以感覺是好一點或差一點來選取分數. \n\n### 行動化\n\n以我個人的習慣, 手機其實是不離身的, 如果每次記錄都要在個人電腦上作業, 其實是很不方便的.\n\n所以我參考了電腦玩物的「[Excel 記帳雲端進化！ Google 表單比記帳 App 還好用](http://www.playpcesor.com/2015/09/excel-google-sheet-form-account-book.html)」\n\n將我的表單(偽)APP化\n\n![](https://i.imgur.com/FW0VvjY.jpg)\n\n如此一來便完成了方便記錄的工具, 至於記錄下來的數據如何應用\n\n又是後話了. 不過順帶一提,我會透過整點報時的工具來提醒自已作記錄,\n\n另外我不像「最有生產力的一年」的作者特別準時睡覺,或是不喝咖啡,\n\n因為不準時睡覺跟嗜飲咖啡是我目前的習慣,我認為抱持平常的狀態去記錄才有意義.\n\n又或者當我戒掉咖啡或是開始早睡早起的習慣時,我就可以用記錄來評量這樣的行為是否有所改善.\n\n\n(fin)","slug":"google_api_auth_1","published":1,"updated":"2017-07-19T17:01:00.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivycb000lyk55bh9jazz9","content":"<h2 id=\"原由\"><a href=\"#原由\" class=\"headerlink\" title=\"原由\"></a>原由</h2><p>最近看了一本書,「最有生產力的一年」. 書如其名,是一本有關生產力的書,作者用了一年的時間, </p>\n<p>以自已作實驗,測試各種方法並檢驗是否有效. </p>\n<p>作者認為,時間 x 專注力 x 精力 = 生產力, 在他眾多的方法之中, </p>\n<p>「黃金時間」與「精神力評鑑」是一組相關的方法. </p>\n<p>簡單的說,一個人的精力狀況,會隨著一天的生理、心理等客觀或主觀因素起起伏伏,</p>\n<p>就像潮汐一樣,而作者認為人應該在精力最好的時段,作最有價值的事.</p>\n<p>這個時段就被稱作「黃金時間」.</p>\n<p>有些人黃金時間在早上,有些人在晚上,每個人都不相同,</p>\n<p>因此需要記錄精神狀態來判斷.</p>\n<h2 id=\"規劃\"><a href=\"#規劃\" class=\"headerlink\" title=\"規劃\"></a>規劃</h2><p>於是我設計一組簡單的方法來記錄精神狀態</p>\n<p>透過google表單用來作記錄,</p>\n<p><img src=\"https://i.imgur.com/XjfNTZR.jpg\" alt=\"\"></p>\n<p>狀態我以10分制來作為評選, 再兩兩一組, 共分為五組「優、良、佳、可、劣」</p>\n<p>在評鑑時先以五分法判斷精力狀況, 再以感覺是好一點或差一點來選取分數. </p>\n<h3 id=\"行動化\"><a href=\"#行動化\" class=\"headerlink\" title=\"行動化\"></a>行動化</h3><p>以我個人的習慣, 手機其實是不離身的, 如果每次記錄都要在個人電腦上作業, 其實是很不方便的.</p>\n<p>所以我參考了電腦玩物的「<a href=\"http://www.playpcesor.com/2015/09/excel-google-sheet-form-account-book.html\" target=\"_blank\" rel=\"external\">Excel 記帳雲端進化！ Google 表單比記帳 App 還好用</a>」</p>\n<p>將我的表單(偽)APP化</p>\n<p><img src=\"https://i.imgur.com/FW0VvjY.jpg\" alt=\"\"></p>\n<p>如此一來便完成了方便記錄的工具, 至於記錄下來的數據如何應用</p>\n<p>又是後話了. 不過順帶一提,我會透過整點報時的工具來提醒自已作記錄,</p>\n<p>另外我不像「最有生產力的一年」的作者特別準時睡覺,或是不喝咖啡,</p>\n<p>因為不準時睡覺跟嗜飲咖啡是我目前的習慣,我認為抱持平常的狀態去記錄才有意義.</p>\n<p>又或者當我戒掉咖啡或是開始早睡早起的習慣時,我就可以用記錄來評量這樣的行為是否有所改善.</p>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"原由\"><a href=\"#原由\" class=\"headerlink\" title=\"原由\"></a>原由</h2><p>最近看了一本書,「最有生產力的一年」. 書如其名,是一本有關生產力的書,作者用了一年的時間, </p>\n<p>以自已作實驗,測試各種方法並檢驗是否有效. </p>\n<p>作者認為,時間 x 專注力 x 精力 = 生產力, 在他眾多的方法之中, </p>\n<p>「黃金時間」與「精神力評鑑」是一組相關的方法. </p>\n<p>簡單的說,一個人的精力狀況,會隨著一天的生理、心理等客觀或主觀因素起起伏伏,</p>\n<p>就像潮汐一樣,而作者認為人應該在精力最好的時段,作最有價值的事.</p>\n<p>這個時段就被稱作「黃金時間」.</p>\n<p>有些人黃金時間在早上,有些人在晚上,每個人都不相同,</p>\n<p>因此需要記錄精神狀態來判斷.</p>\n<h2 id=\"規劃\"><a href=\"#規劃\" class=\"headerlink\" title=\"規劃\"></a>規劃</h2><p>於是我設計一組簡單的方法來記錄精神狀態</p>\n<p>透過google表單用來作記錄,</p>\n<p><img src=\"https://i.imgur.com/XjfNTZR.jpg\" alt=\"\"></p>\n<p>狀態我以10分制來作為評選, 再兩兩一組, 共分為五組「優、良、佳、可、劣」</p>\n<p>在評鑑時先以五分法判斷精力狀況, 再以感覺是好一點或差一點來選取分數. </p>\n<h3 id=\"行動化\"><a href=\"#行動化\" class=\"headerlink\" title=\"行動化\"></a>行動化</h3><p>以我個人的習慣, 手機其實是不離身的, 如果每次記錄都要在個人電腦上作業, 其實是很不方便的.</p>\n<p>所以我參考了電腦玩物的「<a href=\"http://www.playpcesor.com/2015/09/excel-google-sheet-form-account-book.html\" target=\"_blank\" rel=\"external\">Excel 記帳雲端進化！ Google 表單比記帳 App 還好用</a>」</p>\n<p>將我的表單(偽)APP化</p>\n<p><img src=\"https://i.imgur.com/FW0VvjY.jpg\" alt=\"\"></p>\n<p>如此一來便完成了方便記錄的工具, 至於記錄下來的數據如何應用</p>\n<p>又是後話了. 不過順帶一提,我會透過整點報時的工具來提醒自已作記錄,</p>\n<p>另外我不像「最有生產力的一年」的作者特別準時睡覺,或是不喝咖啡,</p>\n<p>因為不準時睡覺跟嗜飲咖啡是我目前的習慣,我認為抱持平常的狀態去記錄才有意義.</p>\n<p>又或者當我戒掉咖啡或是開始早睡早起的習慣時,我就可以用記錄來評量這樣的行為是否有所改善.</p>\n<p>(fin)</p>\n"},{"title":".NET PDB File 介紹","date":"2016-11-28T15:54:55.000Z","_content":"\n\n### PDB(Program Database Files )\n\n\n\n**.Net原始碼在Debug mode建置後，將產生.pdb檔案，  \n其中記錄了.dll、.exe與原始碼之間的對應關係。**\n\n\n\n#### MSDN 這樣說\n\n程式資料庫 (.pdb) 檔案也稱為符號檔，可將您在原始程式檔中為類別、  \n方法和其他程式碼建立的識別項對應至專案之編譯的可執行檔中使用的識別項。\n\n\n\n原文: \n\n>_A program database (.pdb) file, also called a symbol file,_   \n_maps the identifiers that you create in source files for classes,_  \n_methods, and other code to the identifiers that are used in the_   \n_compiled executables of your project._\n\n\n### PDB 記什麼\n\n- 原始碼的檔案名稱 (source code file name)\n- 變數與行號 (lines and the local variable names.)\n\n\n\n### 偵錯工具搜尋 .pdb 檔案的順序？\n\n1. DLL 或可執行檔內部指定的位置\n2. 可能和 DLL 或可執行檔存在相同資料夾中的 .pdb 檔案。\n3. 任何本機符號快取資料夾。\n4. 任何在像是 Microsoft 符號伺服器 (如果啟用) 等位置指定的網路、網際網路或本機符號伺服器和位置。\n\n\n\n### .pdb 檔案與.dll(或可執行檔)需要完全符合\n\n偵錯工具只會載入與可執行檔建置時所建立的 .pdb 檔案完全相同之可執行檔的 .pdb 檔案  \n*相同原始碼在不同機器建置的執行檔與PDB，偵錯工具將無法進行偵錯\n\n\n\n### 看看.pdb檔的內容\n\n1. 開啟 %ProgramFiles(x86)%\\Microsoft Visual Studio 14.0\\DIA SDK\\Samples\\DIA2Dump\\dia2dump.sln\n\n\n\n2. 執行以下命令 \n`Dia2Dump pdbfilepath >> dumpfileName.txt`\nex:\n`Dia2Dump C:\\myproj\\bin\\debug\\myproj.pdb >> myproj_dump.txt`\n\n\n\n3. 輸出的結果大致如下 \n\n\n\tFunction       : In MetaData, [00001F16][0001:00001F16], len = 000000ED, GetBookList\n\tFunction attribute:\n\tFunction info:\n\t\t\t\t \n\t\n\t//中略\n\t\n\tFunction: [0001F71A][0001:0001F71A] GetSalePage b_231\n\tFunction: [00001F16][0001:00001F16] GetBookList\n\tFunction: [0001F4F0][0001:0001F4F0] GetLayoutByAd b_0\n\t\n\t//中略\n\n\t** GetBookList\n\n\tline 46 at [00001F16][0001:00001F16], len = 0x1\tD:\\Repo\\Mark_Lin\\MYPROJ\\WebAPI\\Controllers\\BookController.cs\n\tline 47 at [00001F17][0001:00001F17], len = 0x6\n\tline 48 at [00001F1D][0001:00001F1D], len = 0x1C\t\t\t\t \n\n\n\n\n\n##### 參考\n- http://anferneehardaway.pixnet.net/blog/post/6273453\n- https://msdn.microsoft.com/zh-tw/library/ms241903(v=vs.100).aspx\n- http://www.wintellect.com/devcenter/jrobbins/pdb-files-what-every-developer-must-know\n- https://blogs.msdn.microsoft.com/jimgries/2007/07/06/why-does-visual-studio-require-debugger-symbol-files-to-exactly-match-the-binary-files-that-they-were-built-with/\n\n(fin)","source":"_posts/dotnet_pdb_file.md","raw":"---\ntitle: .NET PDB File 介紹\ndate: 2016/11/28 23:54:55\ntag:\n  - .Net Framework\n---\n\n\n### PDB(Program Database Files )\n\n\n\n**.Net原始碼在Debug mode建置後，將產生.pdb檔案，  \n其中記錄了.dll、.exe與原始碼之間的對應關係。**\n\n\n\n#### MSDN 這樣說\n\n程式資料庫 (.pdb) 檔案也稱為符號檔，可將您在原始程式檔中為類別、  \n方法和其他程式碼建立的識別項對應至專案之編譯的可執行檔中使用的識別項。\n\n\n\n原文: \n\n>_A program database (.pdb) file, also called a symbol file,_   \n_maps the identifiers that you create in source files for classes,_  \n_methods, and other code to the identifiers that are used in the_   \n_compiled executables of your project._\n\n\n### PDB 記什麼\n\n- 原始碼的檔案名稱 (source code file name)\n- 變數與行號 (lines and the local variable names.)\n\n\n\n### 偵錯工具搜尋 .pdb 檔案的順序？\n\n1. DLL 或可執行檔內部指定的位置\n2. 可能和 DLL 或可執行檔存在相同資料夾中的 .pdb 檔案。\n3. 任何本機符號快取資料夾。\n4. 任何在像是 Microsoft 符號伺服器 (如果啟用) 等位置指定的網路、網際網路或本機符號伺服器和位置。\n\n\n\n### .pdb 檔案與.dll(或可執行檔)需要完全符合\n\n偵錯工具只會載入與可執行檔建置時所建立的 .pdb 檔案完全相同之可執行檔的 .pdb 檔案  \n*相同原始碼在不同機器建置的執行檔與PDB，偵錯工具將無法進行偵錯\n\n\n\n### 看看.pdb檔的內容\n\n1. 開啟 %ProgramFiles(x86)%\\Microsoft Visual Studio 14.0\\DIA SDK\\Samples\\DIA2Dump\\dia2dump.sln\n\n\n\n2. 執行以下命令 \n`Dia2Dump pdbfilepath >> dumpfileName.txt`\nex:\n`Dia2Dump C:\\myproj\\bin\\debug\\myproj.pdb >> myproj_dump.txt`\n\n\n\n3. 輸出的結果大致如下 \n\n\n\tFunction       : In MetaData, [00001F16][0001:00001F16], len = 000000ED, GetBookList\n\tFunction attribute:\n\tFunction info:\n\t\t\t\t \n\t\n\t//中略\n\t\n\tFunction: [0001F71A][0001:0001F71A] GetSalePage b_231\n\tFunction: [00001F16][0001:00001F16] GetBookList\n\tFunction: [0001F4F0][0001:0001F4F0] GetLayoutByAd b_0\n\t\n\t//中略\n\n\t** GetBookList\n\n\tline 46 at [00001F16][0001:00001F16], len = 0x1\tD:\\Repo\\Mark_Lin\\MYPROJ\\WebAPI\\Controllers\\BookController.cs\n\tline 47 at [00001F17][0001:00001F17], len = 0x6\n\tline 48 at [00001F1D][0001:00001F1D], len = 0x1C\t\t\t\t \n\n\n\n\n\n##### 參考\n- http://anferneehardaway.pixnet.net/blog/post/6273453\n- https://msdn.microsoft.com/zh-tw/library/ms241903(v=vs.100).aspx\n- http://www.wintellect.com/devcenter/jrobbins/pdb-files-what-every-developer-must-know\n- https://blogs.msdn.microsoft.com/jimgries/2007/07/06/why-does-visual-studio-require-debugger-symbol-files-to-exactly-match-the-binary-files-that-they-were-built-with/\n\n(fin)","slug":"dotnet_pdb_file","published":1,"updated":"2016-12-04T17:22:31.206Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyce000nyk55ypqqco5s","content":"<h3 id=\"PDB-Program-Database-Files\"><a href=\"#PDB-Program-Database-Files\" class=\"headerlink\" title=\"PDB(Program Database Files )\"></a>PDB(Program Database Files )</h3><p><strong>.Net原始碼在Debug mode建置後，將產生.pdb檔案，<br>其中記錄了.dll、.exe與原始碼之間的對應關係。</strong></p>\n<h4 id=\"MSDN-這樣說\"><a href=\"#MSDN-這樣說\" class=\"headerlink\" title=\"MSDN 這樣說\"></a>MSDN 這樣說</h4><p>程式資料庫 (.pdb) 檔案也稱為符號檔，可將您在原始程式檔中為類別、<br>方法和其他程式碼建立的識別項對應至專案之編譯的可執行檔中使用的識別項。</p>\n<p>原文: </p>\n<blockquote>\n<p><em>A program database (.pdb) file, also called a symbol file,</em><br><em>maps the identifiers that you create in source files for classes,</em><br><em>methods, and other code to the identifiers that are used in the</em><br><em>compiled executables of your project.</em></p>\n</blockquote>\n<h3 id=\"PDB-記什麼\"><a href=\"#PDB-記什麼\" class=\"headerlink\" title=\"PDB 記什麼\"></a>PDB 記什麼</h3><ul>\n<li>原始碼的檔案名稱 (source code file name)</li>\n<li>變數與行號 (lines and the local variable names.)</li>\n</ul>\n<h3 id=\"偵錯工具搜尋-pdb-檔案的順序？\"><a href=\"#偵錯工具搜尋-pdb-檔案的順序？\" class=\"headerlink\" title=\"偵錯工具搜尋 .pdb 檔案的順序？\"></a>偵錯工具搜尋 .pdb 檔案的順序？</h3><ol>\n<li>DLL 或可執行檔內部指定的位置</li>\n<li>可能和 DLL 或可執行檔存在相同資料夾中的 .pdb 檔案。</li>\n<li>任何本機符號快取資料夾。</li>\n<li>任何在像是 Microsoft 符號伺服器 (如果啟用) 等位置指定的網路、網際網路或本機符號伺服器和位置。</li>\n</ol>\n<h3 id=\"pdb-檔案與-dll-或可執行檔-需要完全符合\"><a href=\"#pdb-檔案與-dll-或可執行檔-需要完全符合\" class=\"headerlink\" title=\".pdb 檔案與.dll(或可執行檔)需要完全符合\"></a>.pdb 檔案與.dll(或可執行檔)需要完全符合</h3><p>偵錯工具只會載入與可執行檔建置時所建立的 .pdb 檔案完全相同之可執行檔的 .pdb 檔案<br>*相同原始碼在不同機器建置的執行檔與PDB，偵錯工具將無法進行偵錯</p>\n<h3 id=\"看看-pdb檔的內容\"><a href=\"#看看-pdb檔的內容\" class=\"headerlink\" title=\"看看.pdb檔的內容\"></a>看看.pdb檔的內容</h3><ol>\n<li>開啟 %ProgramFiles(x86)%\\Microsoft Visual Studio 14.0\\DIA SDK\\Samples\\DIA2Dump\\dia2dump.sln</li>\n</ol>\n<ol>\n<li>執行以下命令<br><code>Dia2Dump pdbfilepath &gt;&gt; dumpfileName.txt</code><br>ex:<br><code>Dia2Dump C:\\myproj\\bin\\debug\\myproj.pdb &gt;&gt; myproj_dump.txt</code></li>\n</ol>\n<ol>\n<li>輸出的結果大致如下 </li>\n</ol>\n<pre><code>Function       : In MetaData, [00001F16][0001:00001F16], len = 000000ED, GetBookList\nFunction attribute:\nFunction info:\n\n\n//中略\n\nFunction: [0001F71A][0001:0001F71A] GetSalePage b_231\nFunction: [00001F16][0001:00001F16] GetBookList\nFunction: [0001F4F0][0001:0001F4F0] GetLayoutByAd b_0\n\n//中略\n\n** GetBookList\n\nline 46 at [00001F16][0001:00001F16], len = 0x1    D:\\Repo\\Mark_Lin\\MYPROJ\\WebAPI\\Controllers\\BookController.cs\nline 47 at [00001F17][0001:00001F17], len = 0x6\nline 48 at [00001F1D][0001:00001F1D], len = 0x1C                 \n</code></pre><h5 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h5><ul>\n<li><a href=\"http://anferneehardaway.pixnet.net/blog/post/6273453\" target=\"_blank\" rel=\"external\">http://anferneehardaway.pixnet.net/blog/post/6273453</a></li>\n<li><a href=\"https://msdn.microsoft.com/zh-tw/library/ms241903(v=vs.100).aspx\" target=\"_blank\" rel=\"external\">https://msdn.microsoft.com/zh-tw/library/ms241903(v=vs.100).aspx</a></li>\n<li><a href=\"http://www.wintellect.com/devcenter/jrobbins/pdb-files-what-every-developer-must-know\" target=\"_blank\" rel=\"external\">http://www.wintellect.com/devcenter/jrobbins/pdb-files-what-every-developer-must-know</a></li>\n<li><a href=\"https://blogs.msdn.microsoft.com/jimgries/2007/07/06/why-does-visual-studio-require-debugger-symbol-files-to-exactly-match-the-binary-files-that-they-were-built-with/\" target=\"_blank\" rel=\"external\">https://blogs.msdn.microsoft.com/jimgries/2007/07/06/why-does-visual-studio-require-debugger-symbol-files-to-exactly-match-the-binary-files-that-they-were-built-with/</a></li>\n</ul>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"PDB-Program-Database-Files\"><a href=\"#PDB-Program-Database-Files\" class=\"headerlink\" title=\"PDB(Program Database Files )\"></a>PDB(Program Database Files )</h3><p><strong>.Net原始碼在Debug mode建置後，將產生.pdb檔案，<br>其中記錄了.dll、.exe與原始碼之間的對應關係。</strong></p>\n<h4 id=\"MSDN-這樣說\"><a href=\"#MSDN-這樣說\" class=\"headerlink\" title=\"MSDN 這樣說\"></a>MSDN 這樣說</h4><p>程式資料庫 (.pdb) 檔案也稱為符號檔，可將您在原始程式檔中為類別、<br>方法和其他程式碼建立的識別項對應至專案之編譯的可執行檔中使用的識別項。</p>\n<p>原文: </p>\n<blockquote>\n<p><em>A program database (.pdb) file, also called a symbol file,</em><br><em>maps the identifiers that you create in source files for classes,</em><br><em>methods, and other code to the identifiers that are used in the</em><br><em>compiled executables of your project.</em></p>\n</blockquote>\n<h3 id=\"PDB-記什麼\"><a href=\"#PDB-記什麼\" class=\"headerlink\" title=\"PDB 記什麼\"></a>PDB 記什麼</h3><ul>\n<li>原始碼的檔案名稱 (source code file name)</li>\n<li>變數與行號 (lines and the local variable names.)</li>\n</ul>\n<h3 id=\"偵錯工具搜尋-pdb-檔案的順序？\"><a href=\"#偵錯工具搜尋-pdb-檔案的順序？\" class=\"headerlink\" title=\"偵錯工具搜尋 .pdb 檔案的順序？\"></a>偵錯工具搜尋 .pdb 檔案的順序？</h3><ol>\n<li>DLL 或可執行檔內部指定的位置</li>\n<li>可能和 DLL 或可執行檔存在相同資料夾中的 .pdb 檔案。</li>\n<li>任何本機符號快取資料夾。</li>\n<li>任何在像是 Microsoft 符號伺服器 (如果啟用) 等位置指定的網路、網際網路或本機符號伺服器和位置。</li>\n</ol>\n<h3 id=\"pdb-檔案與-dll-或可執行檔-需要完全符合\"><a href=\"#pdb-檔案與-dll-或可執行檔-需要完全符合\" class=\"headerlink\" title=\".pdb 檔案與.dll(或可執行檔)需要完全符合\"></a>.pdb 檔案與.dll(或可執行檔)需要完全符合</h3><p>偵錯工具只會載入與可執行檔建置時所建立的 .pdb 檔案完全相同之可執行檔的 .pdb 檔案<br>*相同原始碼在不同機器建置的執行檔與PDB，偵錯工具將無法進行偵錯</p>\n<h3 id=\"看看-pdb檔的內容\"><a href=\"#看看-pdb檔的內容\" class=\"headerlink\" title=\"看看.pdb檔的內容\"></a>看看.pdb檔的內容</h3><ol>\n<li>開啟 %ProgramFiles(x86)%\\Microsoft Visual Studio 14.0\\DIA SDK\\Samples\\DIA2Dump\\dia2dump.sln</li>\n</ol>\n<ol>\n<li>執行以下命令<br><code>Dia2Dump pdbfilepath &gt;&gt; dumpfileName.txt</code><br>ex:<br><code>Dia2Dump C:\\myproj\\bin\\debug\\myproj.pdb &gt;&gt; myproj_dump.txt</code></li>\n</ol>\n<ol>\n<li>輸出的結果大致如下 </li>\n</ol>\n<pre><code>Function       : In MetaData, [00001F16][0001:00001F16], len = 000000ED, GetBookList\nFunction attribute:\nFunction info:\n\n\n//中略\n\nFunction: [0001F71A][0001:0001F71A] GetSalePage b_231\nFunction: [00001F16][0001:00001F16] GetBookList\nFunction: [0001F4F0][0001:0001F4F0] GetLayoutByAd b_0\n\n//中略\n\n** GetBookList\n\nline 46 at [00001F16][0001:00001F16], len = 0x1    D:\\Repo\\Mark_Lin\\MYPROJ\\WebAPI\\Controllers\\BookController.cs\nline 47 at [00001F17][0001:00001F17], len = 0x6\nline 48 at [00001F1D][0001:00001F1D], len = 0x1C                 \n</code></pre><h5 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h5><ul>\n<li><a href=\"http://anferneehardaway.pixnet.net/blog/post/6273453\" target=\"_blank\" rel=\"external\">http://anferneehardaway.pixnet.net/blog/post/6273453</a></li>\n<li><a href=\"https://msdn.microsoft.com/zh-tw/library/ms241903(v=vs.100).aspx\" target=\"_blank\" rel=\"external\">https://msdn.microsoft.com/zh-tw/library/ms241903(v=vs.100).aspx</a></li>\n<li><a href=\"http://www.wintellect.com/devcenter/jrobbins/pdb-files-what-every-developer-must-know\" target=\"_blank\" rel=\"external\">http://www.wintellect.com/devcenter/jrobbins/pdb-files-what-every-developer-must-know</a></li>\n<li><a href=\"https://blogs.msdn.microsoft.com/jimgries/2007/07/06/why-does-visual-studio-require-debugger-symbol-files-to-exactly-match-the-binary-files-that-they-were-built-with/\" target=\"_blank\" rel=\"external\">https://blogs.msdn.microsoft.com/jimgries/2007/07/06/why-does-visual-studio-require-debugger-symbol-files-to-exactly-match-the-binary-files-that-they-were-built-with/</a></li>\n</ul>\n<p>(fin)</p>\n"},{"title":"[記錄]串接 GOOGLE API 取得資料(二)","date":"2017-07-19T17:04:14.000Z","_content":"## 前情提要\n\n在[前篇](https://blog.marsen.me/2017/07/14/google_api_auth_1/)說明為什麼我要作「精神力評鑑」 \n\n原因是為了記錄自已的精力,能更有效率使用時間,進而提昇個人的生產力.\n\n## 應用\n\n有了數據後, 就要看怎麼運用.  \nGoogle 的表單,可以自動產生回應結果試算表,  \n持之以恒的每天記錄,很快就有上百千筆的資料.\n\n我打算取得這些資料後,繪制成分佈圖\n這樣就可以知道,我的黃金時間是在每一天的什麼時段.\n\n### 如何透過 [GOOGLE Sheets API](https://developers.google.com/sheets/api/reference/rest/) 可以取得資料.\n\n在[Google Cloud Platform](https://cloud.google.com/?hl=zh-tw),建立起 Google API 的服務。\n\n1. 前往[Google API Wizard](https://console.developers.google.com/start/api?id=sheets.googleapis.com),建立或選擇專案。\n2. 建立憑証,選擇OAuth Client ID\n\t- 在這裡我會一次性的建立起所有環境(開發、測試、正式)的憑証 。\n3. 下載JSON放置專案的指定位置.\n4. 如何取得授權與取得資料，請參考[QuickStart](https://developers.google.com/sheets/api/quickstart/nodejs)\n\t- 安全考量,我不會將client_secret.json與取回的token 加入版本控制\n\t- 以Google 試算表為例，如何取得[spreadsheetId](https://developers.google.com/sheets/api/guides/concepts)? 很簡單，網址上就可以取得。\n\t```\n\tex:\n\thttps://docs.google.com/spreadsheets/d/1qpyC0XzvTcKT6EISywvqESX3A0MwQoFDE8p-Bll4hps/edit#gid=0\n\t的spreadsheetId就是1qpyC0XzvTcKT6EISywvqESX3A0MwQoFDE8p-Bll4hps\n\t```\n### 說明  \n以 QuickStart 的程式為例 ,  \n下載回來的檔案 `client_secret.json`  \n可以提供 `clientSecret`、`clientId` 與授權後轉導的 url ,  \n當程式執行時, 便會透 `googleAuth` 去取得授權 ,  \n過程之中會需要使用者作驗証, 驗証完成即取得授權 , \n授權有一定的效期, 故一段時間之後需要重新取得授權 \n\n### 其它\n1. `client_secret.json` 是機敏資料, 不可以放入版本控制, 需要特殊的流程步驟上傳到你的 Web Server 的位置\n    - Openshift可以透過SSH或是SFTP登入來上傳`client_secret.json`\n    - CI 以 JENKINS 為例 ; 可以使用 Publish over SSH 上傳檔案\n![](https://i.imgur.com/Fo4Ml5M.jpg)\n\t  - 需要注意 CI Server 要有 Web Server 的 SSH Key\n\t  - LINUX 複製資料夾語法 `cp -rf src/folder/. target/folder`\n\n2. 在正式公開的環境上可能會發生`Error: invalid_scope`的錯誤 ，可以[參考](https://support.google.com/code/contact/oauth_app_verification?id=705847791246&client=705847791246-l20jeqj1ncv2vffaki70ing4c8cda2r1.apps.googleusercontent.com&query=https://www.googleapis.com/auth/spreadsheets.readonly)。\n\t- 填寫表單作驗証\n\t- 個人測試可以加入[Risky Access Permissions By Unreviewed Apps](https://groups.google.com/forum/#!forum/risky-access-by-unreviewed-apps) 論壇\n\n3. 我最後是使用[d3.js](https://d3js.org/)作為繪圖的library , 因為網路上的資源相當的多 , 而且這次的著墨並不多 , 所以不在這裡介紹. \n\n## Demo\n\n![](https://i.imgur.com/8FYzhdg.gif)\n\n## 參考\n1. [Openshift SFPT](https://blog.openshift.com/using-filezilla-and-sftp-on-windows-with-openshift/)\n2. [Linux CP](https://www.phpini.com/linux/cp-force-copy)\n\n(fin)","source":"_posts/google_api_auth_2.md","raw":"---\ntitle: \"[記錄]串接 GOOGLE API 取得資料(二)\"\ndate: 2017/07/20 01:04:14\ntag:\n  - Google API\n  - OAuth \n---\n## 前情提要\n\n在[前篇](https://blog.marsen.me/2017/07/14/google_api_auth_1/)說明為什麼我要作「精神力評鑑」 \n\n原因是為了記錄自已的精力,能更有效率使用時間,進而提昇個人的生產力.\n\n## 應用\n\n有了數據後, 就要看怎麼運用.  \nGoogle 的表單,可以自動產生回應結果試算表,  \n持之以恒的每天記錄,很快就有上百千筆的資料.\n\n我打算取得這些資料後,繪制成分佈圖\n這樣就可以知道,我的黃金時間是在每一天的什麼時段.\n\n### 如何透過 [GOOGLE Sheets API](https://developers.google.com/sheets/api/reference/rest/) 可以取得資料.\n\n在[Google Cloud Platform](https://cloud.google.com/?hl=zh-tw),建立起 Google API 的服務。\n\n1. 前往[Google API Wizard](https://console.developers.google.com/start/api?id=sheets.googleapis.com),建立或選擇專案。\n2. 建立憑証,選擇OAuth Client ID\n\t- 在這裡我會一次性的建立起所有環境(開發、測試、正式)的憑証 。\n3. 下載JSON放置專案的指定位置.\n4. 如何取得授權與取得資料，請參考[QuickStart](https://developers.google.com/sheets/api/quickstart/nodejs)\n\t- 安全考量,我不會將client_secret.json與取回的token 加入版本控制\n\t- 以Google 試算表為例，如何取得[spreadsheetId](https://developers.google.com/sheets/api/guides/concepts)? 很簡單，網址上就可以取得。\n\t```\n\tex:\n\thttps://docs.google.com/spreadsheets/d/1qpyC0XzvTcKT6EISywvqESX3A0MwQoFDE8p-Bll4hps/edit#gid=0\n\t的spreadsheetId就是1qpyC0XzvTcKT6EISywvqESX3A0MwQoFDE8p-Bll4hps\n\t```\n### 說明  \n以 QuickStart 的程式為例 ,  \n下載回來的檔案 `client_secret.json`  \n可以提供 `clientSecret`、`clientId` 與授權後轉導的 url ,  \n當程式執行時, 便會透 `googleAuth` 去取得授權 ,  \n過程之中會需要使用者作驗証, 驗証完成即取得授權 , \n授權有一定的效期, 故一段時間之後需要重新取得授權 \n\n### 其它\n1. `client_secret.json` 是機敏資料, 不可以放入版本控制, 需要特殊的流程步驟上傳到你的 Web Server 的位置\n    - Openshift可以透過SSH或是SFTP登入來上傳`client_secret.json`\n    - CI 以 JENKINS 為例 ; 可以使用 Publish over SSH 上傳檔案\n![](https://i.imgur.com/Fo4Ml5M.jpg)\n\t  - 需要注意 CI Server 要有 Web Server 的 SSH Key\n\t  - LINUX 複製資料夾語法 `cp -rf src/folder/. target/folder`\n\n2. 在正式公開的環境上可能會發生`Error: invalid_scope`的錯誤 ，可以[參考](https://support.google.com/code/contact/oauth_app_verification?id=705847791246&client=705847791246-l20jeqj1ncv2vffaki70ing4c8cda2r1.apps.googleusercontent.com&query=https://www.googleapis.com/auth/spreadsheets.readonly)。\n\t- 填寫表單作驗証\n\t- 個人測試可以加入[Risky Access Permissions By Unreviewed Apps](https://groups.google.com/forum/#!forum/risky-access-by-unreviewed-apps) 論壇\n\n3. 我最後是使用[d3.js](https://d3js.org/)作為繪圖的library , 因為網路上的資源相當的多 , 而且這次的著墨並不多 , 所以不在這裡介紹. \n\n## Demo\n\n![](https://i.imgur.com/8FYzhdg.gif)\n\n## 參考\n1. [Openshift SFPT](https://blog.openshift.com/using-filezilla-and-sftp-on-windows-with-openshift/)\n2. [Linux CP](https://www.phpini.com/linux/cp-force-copy)\n\n(fin)","slug":"google_api_auth_2","published":1,"updated":"2017-07-19T17:12:05.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivycj000qyk55r5blx13s","content":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><p>在<a href=\"https://blog.marsen.me/2017/07/14/google_api_auth_1/\">前篇</a>說明為什麼我要作「精神力評鑑」 </p>\n<p>原因是為了記錄自已的精力,能更有效率使用時間,進而提昇個人的生產力.</p>\n<h2 id=\"應用\"><a href=\"#應用\" class=\"headerlink\" title=\"應用\"></a>應用</h2><p>有了數據後, 就要看怎麼運用.<br>Google 的表單,可以自動產生回應結果試算表,<br>持之以恒的每天記錄,很快就有上百千筆的資料.</p>\n<p>我打算取得這些資料後,繪制成分佈圖<br>這樣就可以知道,我的黃金時間是在每一天的什麼時段.</p>\n<h3 id=\"如何透過-GOOGLE-Sheets-API-可以取得資料\"><a href=\"#如何透過-GOOGLE-Sheets-API-可以取得資料\" class=\"headerlink\" title=\"如何透過 GOOGLE Sheets API 可以取得資料.\"></a>如何透過 <a href=\"https://developers.google.com/sheets/api/reference/rest/\" target=\"_blank\" rel=\"external\">GOOGLE Sheets API</a> 可以取得資料.</h3><p>在<a href=\"https://cloud.google.com/?hl=zh-tw\" target=\"_blank\" rel=\"external\">Google Cloud Platform</a>,建立起 Google API 的服務。</p>\n<ol>\n<li>前往<a href=\"https://console.developers.google.com/start/api?id=sheets.googleapis.com\" target=\"_blank\" rel=\"external\">Google API Wizard</a>,建立或選擇專案。</li>\n<li>建立憑証,選擇OAuth Client ID<ul>\n<li>在這裡我會一次性的建立起所有環境(開發、測試、正式)的憑証 。</li>\n</ul>\n</li>\n<li>下載JSON放置專案的指定位置.</li>\n<li>如何取得授權與取得資料，請參考<a href=\"https://developers.google.com/sheets/api/quickstart/nodejs\" target=\"_blank\" rel=\"external\">QuickStart</a><ul>\n<li>安全考量,我不會將client_secret.json與取回的token 加入版本控制</li>\n<li>以Google 試算表為例，如何取得<a href=\"https://developers.google.com/sheets/api/guides/concepts\" target=\"_blank\" rel=\"external\">spreadsheetId</a>? 很簡單，網址上就可以取得。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ex:</div><div class=\"line\">https://docs.google.com/spreadsheets/d/1qpyC0XzvTcKT6EISywvqESX3A0MwQoFDE8p-Bll4hps/edit#gid=0</div><div class=\"line\">的spreadsheetId就是1qpyC0XzvTcKT6EISywvqESX3A0MwQoFDE8p-Bll4hps</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"說明\"><a href=\"#說明\" class=\"headerlink\" title=\"說明\"></a>說明</h3><p>以 QuickStart 的程式為例 ,<br>下載回來的檔案 <code>client_secret.json</code><br>可以提供 <code>clientSecret</code>、<code>clientId</code> 與授權後轉導的 url ,<br>當程式執行時, 便會透 <code>googleAuth</code> 去取得授權 ,<br>過程之中會需要使用者作驗証, 驗証完成即取得授權 ,<br>授權有一定的效期, 故一段時間之後需要重新取得授權 </p>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><ol>\n<li><p><code>client_secret.json</code> 是機敏資料, 不可以放入版本控制, 需要特殊的流程步驟上傳到你的 Web Server 的位置</p>\n<ul>\n<li>Openshift可以透過SSH或是SFTP登入來上傳<code>client_secret.json</code></li>\n<li>CI 以 JENKINS 為例 ; 可以使用 Publish over SSH 上傳檔案<br><img src=\"https://i.imgur.com/Fo4Ml5M.jpg\" alt=\"\"><ul>\n<li>需要注意 CI Server 要有 Web Server 的 SSH Key</li>\n<li>LINUX 複製資料夾語法 <code>cp -rf src/folder/. target/folder</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>在正式公開的環境上可能會發生<code>Error: invalid_scope</code>的錯誤 ，可以<a href=\"https://support.google.com/code/contact/oauth_app_verification?id=705847791246&amp;client=705847791246-l20jeqj1ncv2vffaki70ing4c8cda2r1.apps.googleusercontent.com&amp;query=https://www.googleapis.com/auth/spreadsheets.readonly\" target=\"_blank\" rel=\"external\">參考</a>。</p>\n<ul>\n<li>填寫表單作驗証</li>\n<li>個人測試可以加入<a href=\"https://groups.google.com/forum/#!forum/risky-access-by-unreviewed-apps\" target=\"_blank\" rel=\"external\">Risky Access Permissions By Unreviewed Apps</a> 論壇</li>\n</ul>\n</li>\n<li><p>我最後是使用<a href=\"https://d3js.org/\" target=\"_blank\" rel=\"external\">d3.js</a>作為繪圖的library , 因為網路上的資源相當的多 , 而且這次的著墨並不多 , 所以不在這裡介紹. </p>\n</li>\n</ol>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><img src=\"https://i.imgur.com/8FYzhdg.gif\" alt=\"\"></p>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ol>\n<li><a href=\"https://blog.openshift.com/using-filezilla-and-sftp-on-windows-with-openshift/\" target=\"_blank\" rel=\"external\">Openshift SFPT</a></li>\n<li><a href=\"https://www.phpini.com/linux/cp-force-copy\" target=\"_blank\" rel=\"external\">Linux CP</a></li>\n</ol>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><p>在<a href=\"https://blog.marsen.me/2017/07/14/google_api_auth_1/\">前篇</a>說明為什麼我要作「精神力評鑑」 </p>\n<p>原因是為了記錄自已的精力,能更有效率使用時間,進而提昇個人的生產力.</p>\n<h2 id=\"應用\"><a href=\"#應用\" class=\"headerlink\" title=\"應用\"></a>應用</h2><p>有了數據後, 就要看怎麼運用.<br>Google 的表單,可以自動產生回應結果試算表,<br>持之以恒的每天記錄,很快就有上百千筆的資料.</p>\n<p>我打算取得這些資料後,繪制成分佈圖<br>這樣就可以知道,我的黃金時間是在每一天的什麼時段.</p>\n<h3 id=\"如何透過-GOOGLE-Sheets-API-可以取得資料\"><a href=\"#如何透過-GOOGLE-Sheets-API-可以取得資料\" class=\"headerlink\" title=\"如何透過 GOOGLE Sheets API 可以取得資料.\"></a>如何透過 <a href=\"https://developers.google.com/sheets/api/reference/rest/\" target=\"_blank\" rel=\"external\">GOOGLE Sheets API</a> 可以取得資料.</h3><p>在<a href=\"https://cloud.google.com/?hl=zh-tw\" target=\"_blank\" rel=\"external\">Google Cloud Platform</a>,建立起 Google API 的服務。</p>\n<ol>\n<li>前往<a href=\"https://console.developers.google.com/start/api?id=sheets.googleapis.com\" target=\"_blank\" rel=\"external\">Google API Wizard</a>,建立或選擇專案。</li>\n<li>建立憑証,選擇OAuth Client ID<ul>\n<li>在這裡我會一次性的建立起所有環境(開發、測試、正式)的憑証 。</li>\n</ul>\n</li>\n<li>下載JSON放置專案的指定位置.</li>\n<li>如何取得授權與取得資料，請參考<a href=\"https://developers.google.com/sheets/api/quickstart/nodejs\" target=\"_blank\" rel=\"external\">QuickStart</a><ul>\n<li>安全考量,我不會將client_secret.json與取回的token 加入版本控制</li>\n<li>以Google 試算表為例，如何取得<a href=\"https://developers.google.com/sheets/api/guides/concepts\" target=\"_blank\" rel=\"external\">spreadsheetId</a>? 很簡單，網址上就可以取得。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ex:</div><div class=\"line\">https://docs.google.com/spreadsheets/d/1qpyC0XzvTcKT6EISywvqESX3A0MwQoFDE8p-Bll4hps/edit#gid=0</div><div class=\"line\">的spreadsheetId就是1qpyC0XzvTcKT6EISywvqESX3A0MwQoFDE8p-Bll4hps</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"說明\"><a href=\"#說明\" class=\"headerlink\" title=\"說明\"></a>說明</h3><p>以 QuickStart 的程式為例 ,<br>下載回來的檔案 <code>client_secret.json</code><br>可以提供 <code>clientSecret</code>、<code>clientId</code> 與授權後轉導的 url ,<br>當程式執行時, 便會透 <code>googleAuth</code> 去取得授權 ,<br>過程之中會需要使用者作驗証, 驗証完成即取得授權 ,<br>授權有一定的效期, 故一段時間之後需要重新取得授權 </p>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><ol>\n<li><p><code>client_secret.json</code> 是機敏資料, 不可以放入版本控制, 需要特殊的流程步驟上傳到你的 Web Server 的位置</p>\n<ul>\n<li>Openshift可以透過SSH或是SFTP登入來上傳<code>client_secret.json</code></li>\n<li>CI 以 JENKINS 為例 ; 可以使用 Publish over SSH 上傳檔案<br><img src=\"https://i.imgur.com/Fo4Ml5M.jpg\" alt=\"\"><ul>\n<li>需要注意 CI Server 要有 Web Server 的 SSH Key</li>\n<li>LINUX 複製資料夾語法 <code>cp -rf src/folder/. target/folder</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>在正式公開的環境上可能會發生<code>Error: invalid_scope</code>的錯誤 ，可以<a href=\"https://support.google.com/code/contact/oauth_app_verification?id=705847791246&amp;client=705847791246-l20jeqj1ncv2vffaki70ing4c8cda2r1.apps.googleusercontent.com&amp;query=https://www.googleapis.com/auth/spreadsheets.readonly\" target=\"_blank\" rel=\"external\">參考</a>。</p>\n<ul>\n<li>填寫表單作驗証</li>\n<li>個人測試可以加入<a href=\"https://groups.google.com/forum/#!forum/risky-access-by-unreviewed-apps\" target=\"_blank\" rel=\"external\">Risky Access Permissions By Unreviewed Apps</a> 論壇</li>\n</ul>\n</li>\n<li><p>我最後是使用<a href=\"https://d3js.org/\" target=\"_blank\" rel=\"external\">d3.js</a>作為繪圖的library , 因為網路上的資源相當的多 , 而且這次的著墨並不多 , 所以不在這裡介紹. </p>\n</li>\n</ol>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><img src=\"https://i.imgur.com/8FYzhdg.gif\" alt=\"\"></p>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ol>\n<li><a href=\"https://blog.openshift.com/using-filezilla-and-sftp-on-windows-with-openshift/\" target=\"_blank\" rel=\"external\">Openshift SFPT</a></li>\n<li><a href=\"https://www.phpini.com/linux/cp-force-copy\" target=\"_blank\" rel=\"external\">Linux CP</a></li>\n</ol>\n<p>(fin)</p>\n"},{"title":"Hello World","date":"2016-08-13T03:32:15.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016/08/13 11:32:15 \n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2016-12-04T17:22:31.213Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivycl000syk551xujnnrz","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"怎麼建立一個網站？(二) - 簡單用github page 建立靜態網站","date":"2016-08-27T20:56:27.000Z","_content":"## 前置作業\n- 你要有一個github帳號\n\n## 建立github page\n如果不排斥看原文，可以直接[參考](https://pages.github.com/)  \n1. 建立一個repository,並且命名為`username.github.io`,這裡的username請使用你的Github帳號的username.  \n2. clone `username.github.io` 到你的本機上.\n        > git clone https://github.com/username/username.github.io\n3. 建立一個靜態網頁 `index.html` , 隨便打點什麼。  \n        <!DOCTYPE html PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n        <HTML>\n           <HEAD>\n              <TITLE>\n                 Hello world\n              </TITLE>\n           </HEAD>\n        <BODY>\n           <H1>Hello world</H1>\n           <P>This is my github page</P>\n        </BODY>\n        </HTML>\n4. commit之後,push 到github上\n        > git add --all\n        > git commit -m \"Initial commit\"\n        > git push -u origin master\n5. 瀏覽  http://username.github.io 即完成\n\n## 使用自訂的domain      \n\n1. 首先準備好一個domain ex: username.xyz\n2. 需要在根目錄底下，放入一個 CNAME file\n檔案的內容只需要你的domain即可  \nex:\n        blog.username.xyz  \n        username.xyz\n3. 在Name Servers (例如[cloudflare](https://www.cloudflare.com/))上設定`CNAME`到github page,   \n將`blog.username.xyz` 綁定到 `username.github.io`\nex:\n\n| TYPE | NAME | VALUE | TTL |\n|---|---|---|---|---|\n| CNAME  | * | username.xyz | auto |\n| CNAME  | blog | username.github.io | auto |\n更多請參考「[購買網域到設定DNS](http://blog.marsen.me/2016/08/21/setting_DNS_with_google/)」.\n\n## 透過Hexo部署\nHexo基本概念可以參考[官方中文文件](https://hexo.io/zh-tw/docs/index.html) .\n1. 重點在於`_config.yml`的設定\n        deploy:\n          type: git\n          repository: https://github.com/username/username.github.io\n          branche: master\n2. 執行`hexo d`進行部署，這個動作會將hexo 建立出來的靜態網站(html+css+javascript+圖片等…)部署到github page上。\n\n\n(fin)\n","source":"_posts/how_to_use_github_page.md","raw":"---\ntitle: 怎麼建立一個網站？(二) - 簡單用github page 建立靜態網站\ndate: 2016/08/28 4:56:27 \ntag:\n- github\n- 記錄\n---\n## 前置作業\n- 你要有一個github帳號\n\n## 建立github page\n如果不排斥看原文，可以直接[參考](https://pages.github.com/)  \n1. 建立一個repository,並且命名為`username.github.io`,這裡的username請使用你的Github帳號的username.  \n2. clone `username.github.io` 到你的本機上.\n        > git clone https://github.com/username/username.github.io\n3. 建立一個靜態網頁 `index.html` , 隨便打點什麼。  \n        <!DOCTYPE html PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n        <HTML>\n           <HEAD>\n              <TITLE>\n                 Hello world\n              </TITLE>\n           </HEAD>\n        <BODY>\n           <H1>Hello world</H1>\n           <P>This is my github page</P>\n        </BODY>\n        </HTML>\n4. commit之後,push 到github上\n        > git add --all\n        > git commit -m \"Initial commit\"\n        > git push -u origin master\n5. 瀏覽  http://username.github.io 即完成\n\n## 使用自訂的domain      \n\n1. 首先準備好一個domain ex: username.xyz\n2. 需要在根目錄底下，放入一個 CNAME file\n檔案的內容只需要你的domain即可  \nex:\n        blog.username.xyz  \n        username.xyz\n3. 在Name Servers (例如[cloudflare](https://www.cloudflare.com/))上設定`CNAME`到github page,   \n將`blog.username.xyz` 綁定到 `username.github.io`\nex:\n\n| TYPE | NAME | VALUE | TTL |\n|---|---|---|---|---|\n| CNAME  | * | username.xyz | auto |\n| CNAME  | blog | username.github.io | auto |\n更多請參考「[購買網域到設定DNS](http://blog.marsen.me/2016/08/21/setting_DNS_with_google/)」.\n\n## 透過Hexo部署\nHexo基本概念可以參考[官方中文文件](https://hexo.io/zh-tw/docs/index.html) .\n1. 重點在於`_config.yml`的設定\n        deploy:\n          type: git\n          repository: https://github.com/username/username.github.io\n          branche: master\n2. 執行`hexo d`進行部署，這個動作會將hexo 建立出來的靜態網站(html+css+javascript+圖片等…)部署到github page上。\n\n\n(fin)\n","slug":"how_to_use_github_page","published":1,"updated":"2016-12-04T17:22:31.214Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivycp000vyk550q2abm1l","content":"<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ul>\n<li>你要有一個github帳號</li>\n</ul>\n<h2 id=\"建立github-page\"><a href=\"#建立github-page\" class=\"headerlink\" title=\"建立github page\"></a>建立github page</h2><p>如果不排斥看原文，可以直接<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">參考</a>  </p>\n<ol>\n<li>建立一個repository,並且命名為<code>username.github.io</code>,這裡的username請使用你的Github帳號的username.  </li>\n<li>clone <code>username.github.io</code> 到你的本機上.<pre><code>&gt; git clone https://github.com/username/username.github.io\n</code></pre></li>\n<li>建立一個靜態網頁 <code>index.html</code> , 隨便打點什麼。  <pre><code>&lt;!DOCTYPE html PUBLIC &quot;-//IETF//DTD HTML 2.0//EN&quot;&gt;\n&lt;HTML&gt;\n   &lt;HEAD&gt;\n      &lt;TITLE&gt;\n         Hello world\n      &lt;/TITLE&gt;\n   &lt;/HEAD&gt;\n&lt;BODY&gt;\n   &lt;H1&gt;Hello world&lt;/H1&gt;\n   &lt;P&gt;This is my github page&lt;/P&gt;\n&lt;/BODY&gt;\n&lt;/HTML&gt;\n</code></pre></li>\n<li>commit之後,push 到github上<pre><code>&gt; git add --all\n&gt; git commit -m &quot;Initial commit&quot;\n&gt; git push -u origin master\n</code></pre></li>\n<li>瀏覽  <a href=\"http://username.github.io\" target=\"_blank\" rel=\"external\">http://username.github.io</a> 即完成</li>\n</ol>\n<h2 id=\"使用自訂的domain\"><a href=\"#使用自訂的domain\" class=\"headerlink\" title=\"使用自訂的domain\"></a>使用自訂的domain</h2><ol>\n<li>首先準備好一個domain ex: username.xyz</li>\n<li>需要在根目錄底下，放入一個 CNAME file<br>檔案的內容只需要你的domain即可<br>ex:<pre><code>blog.username.xyz  \nusername.xyz\n</code></pre></li>\n<li>在Name Servers (例如<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a>)上設定<code>CNAME</code>到github page,<br>將<code>blog.username.xyz</code> 綁定到 <code>username.github.io</code><br>ex:</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>TYPE</th>\n<th>NAME</th>\n<th>VALUE</th>\n<th>TTL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CNAME</td>\n<td>*</td>\n<td>username.xyz</td>\n<td>auto</td>\n</tr>\n<tr>\n<td>CNAME</td>\n<td>blog</td>\n<td>username.github.io</td>\n<td>auto</td>\n</tr>\n</tbody>\n</table>\n<p>更多請參考「<a href=\"http://blog.marsen.me/2016/08/21/setting_DNS_with_google/\">購買網域到設定DNS</a>」.</p>\n<h2 id=\"透過Hexo部署\"><a href=\"#透過Hexo部署\" class=\"headerlink\" title=\"透過Hexo部署\"></a>透過Hexo部署</h2><p>Hexo基本概念可以參考<a href=\"https://hexo.io/zh-tw/docs/index.html\" target=\"_blank\" rel=\"external\">官方中文文件</a> .</p>\n<ol>\n<li>重點在於<code>_config.yml</code>的設定<pre><code>deploy:\n  type: git\n  repository: https://github.com/username/username.github.io\n  branche: master\n</code></pre></li>\n<li>執行<code>hexo d</code>進行部署，這個動作會將hexo 建立出來的靜態網站(html+css+javascript+圖片等…)部署到github page上。</li>\n</ol>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ul>\n<li>你要有一個github帳號</li>\n</ul>\n<h2 id=\"建立github-page\"><a href=\"#建立github-page\" class=\"headerlink\" title=\"建立github page\"></a>建立github page</h2><p>如果不排斥看原文，可以直接<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">參考</a>  </p>\n<ol>\n<li>建立一個repository,並且命名為<code>username.github.io</code>,這裡的username請使用你的Github帳號的username.  </li>\n<li>clone <code>username.github.io</code> 到你的本機上.<pre><code>&gt; git clone https://github.com/username/username.github.io\n</code></pre></li>\n<li>建立一個靜態網頁 <code>index.html</code> , 隨便打點什麼。  <pre><code>&lt;!DOCTYPE html PUBLIC &quot;-//IETF//DTD HTML 2.0//EN&quot;&gt;\n&lt;HTML&gt;\n   &lt;HEAD&gt;\n      &lt;TITLE&gt;\n         Hello world\n      &lt;/TITLE&gt;\n   &lt;/HEAD&gt;\n&lt;BODY&gt;\n   &lt;H1&gt;Hello world&lt;/H1&gt;\n   &lt;P&gt;This is my github page&lt;/P&gt;\n&lt;/BODY&gt;\n&lt;/HTML&gt;\n</code></pre></li>\n<li>commit之後,push 到github上<pre><code>&gt; git add --all\n&gt; git commit -m &quot;Initial commit&quot;\n&gt; git push -u origin master\n</code></pre></li>\n<li>瀏覽  <a href=\"http://username.github.io\" target=\"_blank\" rel=\"external\">http://username.github.io</a> 即完成</li>\n</ol>\n<h2 id=\"使用自訂的domain\"><a href=\"#使用自訂的domain\" class=\"headerlink\" title=\"使用自訂的domain\"></a>使用自訂的domain</h2><ol>\n<li>首先準備好一個domain ex: username.xyz</li>\n<li>需要在根目錄底下，放入一個 CNAME file<br>檔案的內容只需要你的domain即可<br>ex:<pre><code>blog.username.xyz  \nusername.xyz\n</code></pre></li>\n<li>在Name Servers (例如<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a>)上設定<code>CNAME</code>到github page,<br>將<code>blog.username.xyz</code> 綁定到 <code>username.github.io</code><br>ex:</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>TYPE</th>\n<th>NAME</th>\n<th>VALUE</th>\n<th>TTL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CNAME</td>\n<td>*</td>\n<td>username.xyz</td>\n<td>auto</td>\n</tr>\n<tr>\n<td>CNAME</td>\n<td>blog</td>\n<td>username.github.io</td>\n<td>auto</td>\n</tr>\n</tbody>\n</table>\n<p>更多請參考「<a href=\"http://blog.marsen.me/2016/08/21/setting_DNS_with_google/\">購買網域到設定DNS</a>」.</p>\n<h2 id=\"透過Hexo部署\"><a href=\"#透過Hexo部署\" class=\"headerlink\" title=\"透過Hexo部署\"></a>透過Hexo部署</h2><p>Hexo基本概念可以參考<a href=\"https://hexo.io/zh-tw/docs/index.html\" target=\"_blank\" rel=\"external\">官方中文文件</a> .</p>\n<ol>\n<li>重點在於<code>_config.yml</code>的設定<pre><code>deploy:\n  type: git\n  repository: https://github.com/username/username.github.io\n  branche: master\n</code></pre></li>\n<li>執行<code>hexo d</code>進行部署，這個動作會將hexo 建立出來的靜態網站(html+css+javascript+圖片等…)部署到github page上。</li>\n</ol>\n<p>(fin)</p>\n"},{"title":"怎麼建立一個網站？(三) - 簡單讓網站升級使用HTTP/2","date":"2016-09-03T17:12:15.000Z","_content":"## 應該知道的事\n- HTTP/1.1是目前被應用得最廣泛的通訊協定，也可以說是最成功的一個\n  - HTTP/1.1 基於TCP，需要三方交握。\n  - HTTP/1.1本身存在得需多問題，安全性、效率等…。\n- HTTP/2 可以有效改善HTTP/1.1的缺點，而且可以向下相容\n  - 主流的瀏覽器都開始支援了。  \n  - 只要設定好Web Server，Client 端看使用的[瀏覽器支不支援](http://caniuse.com/#feat=http2)。\n- 一流公司制定標準，二流作品牌，三流賣技術，四流作產品\n  - HTTP/2 是源自Google的SPDY。\n  - Google下一代 QUIC推動中。\n- HTTP/2 並不強制加密(HTTPS)\n  - 在主流瀏覽器為了向下相容，保留了80 port的HTTP/1.1通訊協定，用443 port 實作HTTP/2。\n  - 所以還是要走HTTPS，所以需要安全性憑証。\n  - 安全性憑証要錢(現在也有免費的)。\n  - [cloudflare](https://www.cloudflare.com/)提供免費的安全性憑証。\n\n## 前置作業\n1. 你要有[cloudflare](https://www.cloudflare.com/)帳號。\n2. 看過我之網站的設定，簡單說就是一個github page 與 透過OpenShift 這個 PaaS服務建立的網站。\n    - [怎麼建立一個網站？(一)](https://blog.marsen.me/2016/08/21/setting_DNS_with_google/)\n    - [怎麼建立一個網站？(二)](https://blog.marsen.me/2016/08/28/how_to_use_github_page/)\n\n## 配置\n1. [cloudflare](https://www.cloudflare.com/) 設定DNS，在指定的domain下，設定為「DNS and HTTP Proxy(CDN)」。\n![設定為「DNS and HTTP Proxy(CDN)」](/images/090516_021242_AM.jpg)\n2. 設定Page-Rules，這個是為了開啟SSL\n    1. 設定`SSL`為`Flexible`,輸入`*.username.com/*`。  \n這個時候你就可以瀏覽`https://blog.username.com/`,但同時也可以瀏覽`http://blog.username.com/` 。  \n我希望HTTP能自動跳轉HTTPS，這部份如果是Node建立的網站，我可以用程式作轉導，  \n但是如果是github page建立網站，就要再仰賴 [cloudflare](https://www.cloudflare.com/) 了。\n3. 設定Page-Rules，這個是為了開啟SSL\n    1. 設定`ALWAYS USE HTTPS`,輸入`http://*.username.com/*`。  \n![設定為「DNS and HTTP Proxy(CDN)」](/images/090516_023252_AM.jpg)\n\n設定完大致如下，順利的話幾分鐘就生效了。  \n![](/images/090516_023554_AM.jpg)\n\n這時候瀏覽`http://blog.username.com/`就會轉導到`https://blog.username.com/`了 。\n\n## 檢驗\n使用support HTTP/2的瀏覽器，瀏覽網頁，觀察其protocol 。\n![](/images/090516_024550_AM.jpg)\n\n(fin)\n\n## 參考\n- [了解 HTTP/2 的特色與 HTTP/1.1 的差異](https://simular.co/knowledge/site-build/68-about-http2-and-http11.html)\n- [你的網站升級到 HTTP/2 了嗎？](https://blog.alphacamp.co/2016/07/12/http2/)\n- [為什麼我們需要HTTP/2？](http://www.ithome.com.tw/voice/94371)\n- [HTTP/2登場，邁向新的紀元](http://www.ithome.com.tw/voice/94520)\n- [Google：將推動QUIC成為網路標準](http://www.ithome.com.tw/news/95353)\n","source":"_posts/http2 by cloudflare.md","raw":"---\ntitle: 怎麼建立一個網站？(三) - 簡單讓網站升級使用HTTP/2\ndate: 2016/09/04 01:12:15 \ntag:\n  - HTTP/1.1\n  - HTTP/2\n  - TCP\n---\n## 應該知道的事\n- HTTP/1.1是目前被應用得最廣泛的通訊協定，也可以說是最成功的一個\n  - HTTP/1.1 基於TCP，需要三方交握。\n  - HTTP/1.1本身存在得需多問題，安全性、效率等…。\n- HTTP/2 可以有效改善HTTP/1.1的缺點，而且可以向下相容\n  - 主流的瀏覽器都開始支援了。  \n  - 只要設定好Web Server，Client 端看使用的[瀏覽器支不支援](http://caniuse.com/#feat=http2)。\n- 一流公司制定標準，二流作品牌，三流賣技術，四流作產品\n  - HTTP/2 是源自Google的SPDY。\n  - Google下一代 QUIC推動中。\n- HTTP/2 並不強制加密(HTTPS)\n  - 在主流瀏覽器為了向下相容，保留了80 port的HTTP/1.1通訊協定，用443 port 實作HTTP/2。\n  - 所以還是要走HTTPS，所以需要安全性憑証。\n  - 安全性憑証要錢(現在也有免費的)。\n  - [cloudflare](https://www.cloudflare.com/)提供免費的安全性憑証。\n\n## 前置作業\n1. 你要有[cloudflare](https://www.cloudflare.com/)帳號。\n2. 看過我之網站的設定，簡單說就是一個github page 與 透過OpenShift 這個 PaaS服務建立的網站。\n    - [怎麼建立一個網站？(一)](https://blog.marsen.me/2016/08/21/setting_DNS_with_google/)\n    - [怎麼建立一個網站？(二)](https://blog.marsen.me/2016/08/28/how_to_use_github_page/)\n\n## 配置\n1. [cloudflare](https://www.cloudflare.com/) 設定DNS，在指定的domain下，設定為「DNS and HTTP Proxy(CDN)」。\n![設定為「DNS and HTTP Proxy(CDN)」](/images/090516_021242_AM.jpg)\n2. 設定Page-Rules，這個是為了開啟SSL\n    1. 設定`SSL`為`Flexible`,輸入`*.username.com/*`。  \n這個時候你就可以瀏覽`https://blog.username.com/`,但同時也可以瀏覽`http://blog.username.com/` 。  \n我希望HTTP能自動跳轉HTTPS，這部份如果是Node建立的網站，我可以用程式作轉導，  \n但是如果是github page建立網站，就要再仰賴 [cloudflare](https://www.cloudflare.com/) 了。\n3. 設定Page-Rules，這個是為了開啟SSL\n    1. 設定`ALWAYS USE HTTPS`,輸入`http://*.username.com/*`。  \n![設定為「DNS and HTTP Proxy(CDN)」](/images/090516_023252_AM.jpg)\n\n設定完大致如下，順利的話幾分鐘就生效了。  \n![](/images/090516_023554_AM.jpg)\n\n這時候瀏覽`http://blog.username.com/`就會轉導到`https://blog.username.com/`了 。\n\n## 檢驗\n使用support HTTP/2的瀏覽器，瀏覽網頁，觀察其protocol 。\n![](/images/090516_024550_AM.jpg)\n\n(fin)\n\n## 參考\n- [了解 HTTP/2 的特色與 HTTP/1.1 的差異](https://simular.co/knowledge/site-build/68-about-http2-and-http11.html)\n- [你的網站升級到 HTTP/2 了嗎？](https://blog.alphacamp.co/2016/07/12/http2/)\n- [為什麼我們需要HTTP/2？](http://www.ithome.com.tw/voice/94371)\n- [HTTP/2登場，邁向新的紀元](http://www.ithome.com.tw/voice/94520)\n- [Google：將推動QUIC成為網路標準](http://www.ithome.com.tw/news/95353)\n","slug":"http2 by cloudflare","published":1,"updated":"2016-12-04T17:22:31.216Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivycr000wyk55tstdpnl0","content":"<h2 id=\"應該知道的事\"><a href=\"#應該知道的事\" class=\"headerlink\" title=\"應該知道的事\"></a>應該知道的事</h2><ul>\n<li>HTTP/1.1是目前被應用得最廣泛的通訊協定，也可以說是最成功的一個<ul>\n<li>HTTP/1.1 基於TCP，需要三方交握。</li>\n<li>HTTP/1.1本身存在得需多問題，安全性、效率等…。</li>\n</ul>\n</li>\n<li>HTTP/2 可以有效改善HTTP/1.1的缺點，而且可以向下相容<ul>\n<li>主流的瀏覽器都開始支援了。  </li>\n<li>只要設定好Web Server，Client 端看使用的<a href=\"http://caniuse.com/#feat=http2\" target=\"_blank\" rel=\"external\">瀏覽器支不支援</a>。</li>\n</ul>\n</li>\n<li>一流公司制定標準，二流作品牌，三流賣技術，四流作產品<ul>\n<li>HTTP/2 是源自Google的SPDY。</li>\n<li>Google下一代 QUIC推動中。</li>\n</ul>\n</li>\n<li>HTTP/2 並不強制加密(HTTPS)<ul>\n<li>在主流瀏覽器為了向下相容，保留了80 port的HTTP/1.1通訊協定，用443 port 實作HTTP/2。</li>\n<li>所以還是要走HTTPS，所以需要安全性憑証。</li>\n<li>安全性憑証要錢(現在也有免費的)。</li>\n<li><a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a>提供免費的安全性憑証。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ol>\n<li>你要有<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a>帳號。</li>\n<li>看過我之網站的設定，簡單說就是一個github page 與 透過OpenShift 這個 PaaS服務建立的網站。<ul>\n<li><a href=\"https://blog.marsen.me/2016/08/21/setting_DNS_with_google/\">怎麼建立一個網站？(一)</a></li>\n<li><a href=\"https://blog.marsen.me/2016/08/28/how_to_use_github_page/\">怎麼建立一個網站？(二)</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><ol>\n<li><a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a> 設定DNS，在指定的domain下，設定為「DNS and HTTP Proxy(CDN)」。<br><img src=\"/images/090516_021242_AM.jpg\" alt=\"設定為「DNS and HTTP Proxy(CDN)」\"></li>\n<li>設定Page-Rules，這個是為了開啟SSL<ol>\n<li>設定<code>SSL</code>為<code>Flexible</code>,輸入<code>*.username.com/*</code>。<br>這個時候你就可以瀏覽<code>https://blog.username.com/</code>,但同時也可以瀏覽<code>http://blog.username.com/</code> 。<br>我希望HTTP能自動跳轉HTTPS，這部份如果是Node建立的網站，我可以用程式作轉導，<br>但是如果是github page建立網站，就要再仰賴 <a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a> 了。</li>\n</ol>\n</li>\n<li>設定Page-Rules，這個是為了開啟SSL<ol>\n<li>設定<code>ALWAYS USE HTTPS</code>,輸入<code>http://*.username.com/*</code>。<br><img src=\"/images/090516_023252_AM.jpg\" alt=\"設定為「DNS and HTTP Proxy(CDN)」\"></li>\n</ol>\n</li>\n</ol>\n<p>設定完大致如下，順利的話幾分鐘就生效了。<br><img src=\"/images/090516_023554_AM.jpg\" alt=\"\"></p>\n<p>這時候瀏覽<code>http://blog.username.com/</code>就會轉導到<code>https://blog.username.com/</code>了 。</p>\n<h2 id=\"檢驗\"><a href=\"#檢驗\" class=\"headerlink\" title=\"檢驗\"></a>檢驗</h2><p>使用support HTTP/2的瀏覽器，瀏覽網頁，觀察其protocol 。<br><img src=\"/images/090516_024550_AM.jpg\" alt=\"\"></p>\n<p>(fin)</p>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://simular.co/knowledge/site-build/68-about-http2-and-http11.html\" target=\"_blank\" rel=\"external\">了解 HTTP/2 的特色與 HTTP/1.1 的差異</a></li>\n<li><a href=\"https://blog.alphacamp.co/2016/07/12/http2/\" target=\"_blank\" rel=\"external\">你的網站升級到 HTTP/2 了嗎？</a></li>\n<li><a href=\"http://www.ithome.com.tw/voice/94371\" target=\"_blank\" rel=\"external\">為什麼我們需要HTTP/2？</a></li>\n<li><a href=\"http://www.ithome.com.tw/voice/94520\" target=\"_blank\" rel=\"external\">HTTP/2登場，邁向新的紀元</a></li>\n<li><a href=\"http://www.ithome.com.tw/news/95353\" target=\"_blank\" rel=\"external\">Google：將推動QUIC成為網路標準</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"應該知道的事\"><a href=\"#應該知道的事\" class=\"headerlink\" title=\"應該知道的事\"></a>應該知道的事</h2><ul>\n<li>HTTP/1.1是目前被應用得最廣泛的通訊協定，也可以說是最成功的一個<ul>\n<li>HTTP/1.1 基於TCP，需要三方交握。</li>\n<li>HTTP/1.1本身存在得需多問題，安全性、效率等…。</li>\n</ul>\n</li>\n<li>HTTP/2 可以有效改善HTTP/1.1的缺點，而且可以向下相容<ul>\n<li>主流的瀏覽器都開始支援了。  </li>\n<li>只要設定好Web Server，Client 端看使用的<a href=\"http://caniuse.com/#feat=http2\" target=\"_blank\" rel=\"external\">瀏覽器支不支援</a>。</li>\n</ul>\n</li>\n<li>一流公司制定標準，二流作品牌，三流賣技術，四流作產品<ul>\n<li>HTTP/2 是源自Google的SPDY。</li>\n<li>Google下一代 QUIC推動中。</li>\n</ul>\n</li>\n<li>HTTP/2 並不強制加密(HTTPS)<ul>\n<li>在主流瀏覽器為了向下相容，保留了80 port的HTTP/1.1通訊協定，用443 port 實作HTTP/2。</li>\n<li>所以還是要走HTTPS，所以需要安全性憑証。</li>\n<li>安全性憑証要錢(現在也有免費的)。</li>\n<li><a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a>提供免費的安全性憑証。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ol>\n<li>你要有<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a>帳號。</li>\n<li>看過我之網站的設定，簡單說就是一個github page 與 透過OpenShift 這個 PaaS服務建立的網站。<ul>\n<li><a href=\"https://blog.marsen.me/2016/08/21/setting_DNS_with_google/\">怎麼建立一個網站？(一)</a></li>\n<li><a href=\"https://blog.marsen.me/2016/08/28/how_to_use_github_page/\">怎麼建立一個網站？(二)</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><ol>\n<li><a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a> 設定DNS，在指定的domain下，設定為「DNS and HTTP Proxy(CDN)」。<br><img src=\"/images/090516_021242_AM.jpg\" alt=\"設定為「DNS and HTTP Proxy(CDN)」\"></li>\n<li>設定Page-Rules，這個是為了開啟SSL<ol>\n<li>設定<code>SSL</code>為<code>Flexible</code>,輸入<code>*.username.com/*</code>。<br>這個時候你就可以瀏覽<code>https://blog.username.com/</code>,但同時也可以瀏覽<code>http://blog.username.com/</code> 。<br>我希望HTTP能自動跳轉HTTPS，這部份如果是Node建立的網站，我可以用程式作轉導，<br>但是如果是github page建立網站，就要再仰賴 <a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a> 了。</li>\n</ol>\n</li>\n<li>設定Page-Rules，這個是為了開啟SSL<ol>\n<li>設定<code>ALWAYS USE HTTPS</code>,輸入<code>http://*.username.com/*</code>。<br><img src=\"/images/090516_023252_AM.jpg\" alt=\"設定為「DNS and HTTP Proxy(CDN)」\"></li>\n</ol>\n</li>\n</ol>\n<p>設定完大致如下，順利的話幾分鐘就生效了。<br><img src=\"/images/090516_023554_AM.jpg\" alt=\"\"></p>\n<p>這時候瀏覽<code>http://blog.username.com/</code>就會轉導到<code>https://blog.username.com/</code>了 。</p>\n<h2 id=\"檢驗\"><a href=\"#檢驗\" class=\"headerlink\" title=\"檢驗\"></a>檢驗</h2><p>使用support HTTP/2的瀏覽器，瀏覽網頁，觀察其protocol 。<br><img src=\"/images/090516_024550_AM.jpg\" alt=\"\"></p>\n<p>(fin)</p>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://simular.co/knowledge/site-build/68-about-http2-and-http11.html\" target=\"_blank\" rel=\"external\">了解 HTTP/2 的特色與 HTTP/1.1 的差異</a></li>\n<li><a href=\"https://blog.alphacamp.co/2016/07/12/http2/\" target=\"_blank\" rel=\"external\">你的網站升級到 HTTP/2 了嗎？</a></li>\n<li><a href=\"http://www.ithome.com.tw/voice/94371\" target=\"_blank\" rel=\"external\">為什麼我們需要HTTP/2？</a></li>\n<li><a href=\"http://www.ithome.com.tw/voice/94520\" target=\"_blank\" rel=\"external\">HTTP/2登場，邁向新的紀元</a></li>\n<li><a href=\"http://www.ithome.com.tw/news/95353\" target=\"_blank\" rel=\"external\">Google：將推動QUIC成為網路標準</a></li>\n</ul>\n"},{"title":"IIS Tracing Log 設定","date":"2017-01-24T06:27:12.000Z","_content":"## 緣由\n當你需要Trace送到IIS的每個Request的細節(包含在pipe line各個模組之間的input/output 與 傳入的參數、header等…), \n可以透過開啟tracing log來作追蹤\n\n## 環境\n1. Windows Server 2012 R2\n2. IIS 8.5.9600.16384\n\n## 開啟 tracing log\n\n1. 新增 Tracing Rules \n![](https://i.imgur.com/4llAgOa.jpg)\n![](https://i.imgur.com/BavVoWy.gif)\n\n\n2. 開啟網站 Tracing 功能\n![](https://i.imgur.com/LUgbESR.jpg)\n![](https://i.imgur.com/aKtgj5m.jpg)\n\n## 調整 IE Security 層級\n\n1. 使用 IE 開啟 Log，因 Security 設定無法套用版型\n![](https://i.imgur.com/4VsuQWp.jpg)\n\n2. 調整ie enhanced security\n\n![](https://i.imgur.com/Lvnygqr.jpg)\n\n3. 開啟IE > 點選小齒輪，選擇  Internet Options > 點選 Security 頁籤 > 將 Internet 的 Security Level 調整為 Medium-high\n![](https://i.imgur.com/H2F06OU.jpg)\n\n4. 完成\n![](https://i.imgur.com/biiX6w8.jpg)\n\n\n\n(fin)","source":"_posts/iis_tracing_log_setting.md","raw":"---\ntitle: IIS Tracing Log 設定\ndate: 2017/01/24 14:27:12 \ntag:\n  - IIS\n  - 記錄\n---\n## 緣由\n當你需要Trace送到IIS的每個Request的細節(包含在pipe line各個模組之間的input/output 與 傳入的參數、header等…), \n可以透過開啟tracing log來作追蹤\n\n## 環境\n1. Windows Server 2012 R2\n2. IIS 8.5.9600.16384\n\n## 開啟 tracing log\n\n1. 新增 Tracing Rules \n![](https://i.imgur.com/4llAgOa.jpg)\n![](https://i.imgur.com/BavVoWy.gif)\n\n\n2. 開啟網站 Tracing 功能\n![](https://i.imgur.com/LUgbESR.jpg)\n![](https://i.imgur.com/aKtgj5m.jpg)\n\n## 調整 IE Security 層級\n\n1. 使用 IE 開啟 Log，因 Security 設定無法套用版型\n![](https://i.imgur.com/4VsuQWp.jpg)\n\n2. 調整ie enhanced security\n\n![](https://i.imgur.com/Lvnygqr.jpg)\n\n3. 開啟IE > 點選小齒輪，選擇  Internet Options > 點選 Security 頁籤 > 將 Internet 的 Security Level 調整為 Medium-high\n![](https://i.imgur.com/H2F06OU.jpg)\n\n4. 完成\n![](https://i.imgur.com/biiX6w8.jpg)\n\n\n\n(fin)","slug":"iis_tracing_log_setting","published":1,"updated":"2017-01-30T06:02:41.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyct000yyk55zb7kmj02","content":"<h2 id=\"緣由\"><a href=\"#緣由\" class=\"headerlink\" title=\"緣由\"></a>緣由</h2><p>當你需要Trace送到IIS的每個Request的細節(包含在pipe line各個模組之間的input/output 與 傳入的參數、header等…),<br>可以透過開啟tracing log來作追蹤</p>\n<h2 id=\"環境\"><a href=\"#環境\" class=\"headerlink\" title=\"環境\"></a>環境</h2><ol>\n<li>Windows Server 2012 R2</li>\n<li>IIS 8.5.9600.16384</li>\n</ol>\n<h2 id=\"開啟-tracing-log\"><a href=\"#開啟-tracing-log\" class=\"headerlink\" title=\"開啟 tracing log\"></a>開啟 tracing log</h2><ol>\n<li>新增 Tracing Rules<br><img src=\"https://i.imgur.com/4llAgOa.jpg\" alt=\"\"><br><img src=\"https://i.imgur.com/BavVoWy.gif\" alt=\"\"></li>\n</ol>\n<ol>\n<li>開啟網站 Tracing 功能<br><img src=\"https://i.imgur.com/LUgbESR.jpg\" alt=\"\"><br><img src=\"https://i.imgur.com/aKtgj5m.jpg\" alt=\"\"></li>\n</ol>\n<h2 id=\"調整-IE-Security-層級\"><a href=\"#調整-IE-Security-層級\" class=\"headerlink\" title=\"調整 IE Security 層級\"></a>調整 IE Security 層級</h2><ol>\n<li><p>使用 IE 開啟 Log，因 Security 設定無法套用版型<br><img src=\"https://i.imgur.com/4VsuQWp.jpg\" alt=\"\"></p>\n</li>\n<li><p>調整ie enhanced security</p>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/Lvnygqr.jpg\" alt=\"\"></p>\n<ol>\n<li><p>開啟IE &gt; 點選小齒輪，選擇  Internet Options &gt; 點選 Security 頁籤 &gt; 將 Internet 的 Security Level 調整為 Medium-high<br><img src=\"https://i.imgur.com/H2F06OU.jpg\" alt=\"\"></p>\n</li>\n<li><p>完成<br><img src=\"https://i.imgur.com/biiX6w8.jpg\" alt=\"\"></p>\n</li>\n</ol>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"緣由\"><a href=\"#緣由\" class=\"headerlink\" title=\"緣由\"></a>緣由</h2><p>當你需要Trace送到IIS的每個Request的細節(包含在pipe line各個模組之間的input/output 與 傳入的參數、header等…),<br>可以透過開啟tracing log來作追蹤</p>\n<h2 id=\"環境\"><a href=\"#環境\" class=\"headerlink\" title=\"環境\"></a>環境</h2><ol>\n<li>Windows Server 2012 R2</li>\n<li>IIS 8.5.9600.16384</li>\n</ol>\n<h2 id=\"開啟-tracing-log\"><a href=\"#開啟-tracing-log\" class=\"headerlink\" title=\"開啟 tracing log\"></a>開啟 tracing log</h2><ol>\n<li>新增 Tracing Rules<br><img src=\"https://i.imgur.com/4llAgOa.jpg\" alt=\"\"><br><img src=\"https://i.imgur.com/BavVoWy.gif\" alt=\"\"></li>\n</ol>\n<ol>\n<li>開啟網站 Tracing 功能<br><img src=\"https://i.imgur.com/LUgbESR.jpg\" alt=\"\"><br><img src=\"https://i.imgur.com/aKtgj5m.jpg\" alt=\"\"></li>\n</ol>\n<h2 id=\"調整-IE-Security-層級\"><a href=\"#調整-IE-Security-層級\" class=\"headerlink\" title=\"調整 IE Security 層級\"></a>調整 IE Security 層級</h2><ol>\n<li><p>使用 IE 開啟 Log，因 Security 設定無法套用版型<br><img src=\"https://i.imgur.com/4VsuQWp.jpg\" alt=\"\"></p>\n</li>\n<li><p>調整ie enhanced security</p>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/Lvnygqr.jpg\" alt=\"\"></p>\n<ol>\n<li><p>開啟IE &gt; 點選小齒輪，選擇  Internet Options &gt; 點選 Security 頁籤 &gt; 將 Internet 的 Security Level 調整為 Medium-high<br><img src=\"https://i.imgur.com/H2F06OU.jpg\" alt=\"\"></p>\n</li>\n<li><p>完成<br><img src=\"https://i.imgur.com/biiX6w8.jpg\" alt=\"\"></p>\n</li>\n</ol>\n<p>(fin)</p>\n"},{"title":"單元測試與重構記錄(一)","date":"2017-10-30T16:42:10.000Z","_content":"\n## 前情提要\n有幸參與了一個跨國的專案,  \n為了快速上線，決定將整套原本在台灣程式碼搬移到跨國專案上,  \n上線後再依使用者的需求調整開發功能, \n而在搬移的過程中,有需多模組並未開啟。\n…\n\n## 現況\n遺留代碼 → 跨國 遇到的問題\n1. Copy Paste 最快卻不一定最適合\n2. Copy Paste 最快卻不一定改得動\n3. Copy Paste 最快但是有的地方沒Copy完\n\n`用明朝的劍，斬清朝的官`\n\n## 實務需求\n將本來跨國未開啟的**折扣活動**模組打開,  \n簡單的流程大致如下:\n購物車 → 取得購物車資料 → 折扣活動 → 計算\n\n實務上,整個流程作了許多事\n![](https://i.imgur.com/pM36Joo.jpg)\n\n應該說作了太多事. \n![](https://i.imgur.com/NU0PqCh.jpg)\n\n程式碼有壞味道,卻不能修改(重構). \n因為沒有測試保護. \n\n單一的Process，複雜度過高的方法(12)\n\n`CalculateShoppingCartPromotionDiscountV2Processor.Process()`\n\n![](https://i.imgur.com/qleqGPb.jpg)\n\n### 目標與執行順序\n1. 由 PM 或 QA 補足整合測試情境到足夠\n    - 由實務上的需求來認定\n2. 刪除台灣的測試\n3. 解析 `CalculateShoppingCartPromotionDiscountV2Processor` \n4. 補上單元測試\n    - Code Coverage(測試覆蓋率)\n5. 重構\n\n## 最終的目標是重構\n\n- 心態:[沒有時間，完美的借口](http://www.danielteng.com/2012/09/25/no-time-to-learn-perfect-excuse/)\n- 重構前要先作整合測試\n- 現有的整合測試的缺陷\n    1. 測試項目不符合馬來西亞現狀\n    2. 測試項目未處理多語系\n    3. 測試項目未處理小數點\n    4. 測試項目難以閱讀\n    5. 測試項目有重覆的覆蓋範圍\n- RD與PM與QA合作\n\n### UAT 讓「人」讀得懂\n\n#### 原本的 UAT (RD)\n```gherkin\n場景: case37：商品活動+全店活動(有排除)；宅配，運費50元，滿350免運\n\t．全店活動 / 有排除商品；滿額打折，多階(滿第1階)，跨溫層\n\t．折扣條件：滿199元，打95折 / 滿299元，打89折 / 滿399元，打84折\n\t．商品活動；滿件折現，單階，跨溫層\n\t．折扣條件：滿2件，折45元\n\t假設 購物車中溫層\"Freezer\"商品為\n\t\t| SalePageId | SaleProductSKUId | Price | Qty |\n\t\t| 50         | 50               | 75    | 1   |\n\t\t| 27         | 27               | 66    | 2   |\n\t並且 購物車中溫層\"Refrigerator\"商品為\n\t\t| SalePageId | SaleProductSKUId | Price | Qty |\n\t\t| 26         | 26               | 55    | 2   |\n\t並且 購物車中溫層\"Normal\"商品為\n\t\t| SalePageId | SaleProductSKUId | Price | Qty |\n\t\t| 25         | 25               | 2     | 2   |\n\t並且 活動\"1\"範圍設定為\n\t\t| TargetType | TargetIdList |\n\t\t| Shop       | 1            |\n\t並且 活動目標排除商品頁為\n\t\t| PromotionId | TargetExcludeSalePageList |\n\t\t| 1           | 50          |\n\t並且  現折活動\"1\"的折扣為\n\t\t| Id | TypeDef      | TotalPrice | DiscountTypeDef | DiscountRate |\n\t\t| 1  | TotalPriceV2 | 199        | DiscountRate    | 0.95         |\n\t\t| 2  | TotalPriceV2 | 299        | DiscountRate    | 0.89         |\n\t\t| 3  | TotalPriceV2 | 399        | DiscountRate    | 0.84         |\n\t並且 活動\"2\"範圍設定為\n\t\t| TargetType        | TargetIdList |\n\t\t| PromotionSalePage | 0            |\n\t並且 活動目標商品頁為\n\t\t| PromotionId | TargetSalePageList |\n\t\t| 2           | 50,25,26,27        |\n\t並且  現折活動\"2\"的折扣為\n\t\t| Id | TypeDef    | TotalQty | DiscountTypeDef | DiscountPrice |\n\t\t| 4  | TotalQtyV2 | 2        | DiscountPrice   | 45            |\n\t當 計算活動折扣\n\t那麼 購物車商品折扣後為\n\t\t| SalePageId | SaleProductSKUId | PromotionDiscount |\n\t\t| 50         | 50               | -12               |\n\t\t| 27         | 27               | -25               |\n\t\t| 26         | 26               | -19               |\n\t\t| 25         | 25               | 0                 |\n```\n\n #### 「人」寫的UAT \n\n\n\n\n\n\n```gherkin\n場景: 商品有兩檔活動，全店活動與商品活動；\n\t．第一檔是全店活動 / 排除商品B；滿額打折，\n\t．折扣條件：滿10元，打95折 / 滿20元，打89折 / 滿30元，打84折\n\t．第二檔是指定商品；滿件折現，單階，指定商品A 、商品B\n\t．折扣條件：滿2件，折3元\n\n當 購物車中的商品為\"商品A 與商品B\"\n\t\t| Title | SalePageId | SaleProductSKUId | Price | Qty |\n\t\t| 商品A   | 25         | 25               | 7.45  | 2   |\n\t\t| 商品B   | 26         | 26               | 4.45  | 2   |\n\t\n並且 第\"1\"檔是全店活動 ,排除以下商品\n\t    | Title | SalePageId |\n\t    | 商品A   | 26         |\n\n而且 第\"1\"檔折扣條件是\"滿額打折,滿10元，打95折 / 滿20元，打89折 / 滿30元，打84折\",如下\n    | Id | TypeDef      | TotalPrice | DiscountTypeDef | DiscountRate |\n    | 1  | TotalPriceV2 | 10         | DiscountRate    | 0.95         |\n    | 2  | TotalPriceV2 | 20         | DiscountRate    | 0.89         |\n    | 3  | TotalPriceV2 | 30         | DiscountRate    | 0.84         |\n\n並且 第\"2\"檔是指定商品,指定商品如下\n    | Title | SalePageId |\n    | 商品A   | 25         |\n    | 商品B   | 26         |\n    | 商品C   | 27         |\n    | 商品D   | 50         |\n\n而且 第\"2\"檔折扣條件是\"滿件折現,滿2件，折3元\",如下\n    | Id | TypeDef    | TotalQty | DiscountTypeDef | DiscountPrice |\n    | 4  | TotalQtyV2 | 2        | DiscountPrice   | 3             |\n\n當 計算活動折扣\n\n那麼 購物車商品折扣金額及折扣後小計為 \n    | Title | SalePageId | Price | Qty | PromotionDiscount | TotalPayment |\n    | 商品A   | 25         | 7.45  | 2   | -2.55             | 12.35        |\n    | 商品B   | 26         | 4.45  | 2   | -1.11             | 7.79         |\n```\n\n與 PM 及 QA 討論後 , 寫的 UAT 可閱讀性提高了  \n這裡用到了一些小技巧 , 讓 Cucumber 文件的可讀性更高  \n而不會有太多的重複方法 , 比如說把描述性的文字當作參數傳遞  \n實際上測試不會使用到這些變數 ,但是可以增加可讀性 .\n\n### 刪除台灣測試\n因為已經有了跨國所需要的測試 , \n台灣的測試便可以退場了.\n實際上也不符合現況, 如多語系、時差與小數點等問題\n\n### 解析 `CalculateShoppingCartPromotionDiscountV2Processor` \n\n![](https://i.imgur.com/FioG5NG.jpg)\n1. 無折扣的情境\n2. 新舊相容的情境\n3. 排序\n4. 計算折扣金額\n5. 看見相依\n    1. 程式碼中有 new 別的 class 的部份\n    2. 程式碼中有使用靜態方法的部份\n\n### 補上單元測試\n\n最簡單的重構,就是將整個方法內的四個邏輯  \n拆成四塊個子方法,並為他們加上單元測試.  \n修改的過程,如果有紅燈就要修改成綠燈,  \n而整個成品要保證整合測試與單元測試都是綠燈. \n\n此外,重構的過程中如果過到靜態方法,  \n或是 new 新物件, 都很有可能是種相依,  \n可以透過一些方法作解耦,  \n參考之前的文章[單元測試這樣玩就對了](/2017/04/23/unitestwriting/) \n\n### 重構\n最後一步就是大膽的重構了,  \n有了測試作保護,  \n可以作更大範圍的重構,  \n如下圖示,這裡揭露了在台灣原有的繼承結構, \n而紅色的部份是在跨國用不到的類別.\n![](https://i.imgur.com/VQ10wY6.jpg)\n\n下一步，待續…\n\n(fin)","source":"_posts/integrated_testing_partice.md","raw":"---\ntitle: \"單元測試與重構記錄(一)\"\ndate: 2017/10/31 00:42:10\ntag:\n  - Unit Testing\n  - Integrated Testing\n---\n\n## 前情提要\n有幸參與了一個跨國的專案,  \n為了快速上線，決定將整套原本在台灣程式碼搬移到跨國專案上,  \n上線後再依使用者的需求調整開發功能, \n而在搬移的過程中,有需多模組並未開啟。\n…\n\n## 現況\n遺留代碼 → 跨國 遇到的問題\n1. Copy Paste 最快卻不一定最適合\n2. Copy Paste 最快卻不一定改得動\n3. Copy Paste 最快但是有的地方沒Copy完\n\n`用明朝的劍，斬清朝的官`\n\n## 實務需求\n將本來跨國未開啟的**折扣活動**模組打開,  \n簡單的流程大致如下:\n購物車 → 取得購物車資料 → 折扣活動 → 計算\n\n實務上,整個流程作了許多事\n![](https://i.imgur.com/pM36Joo.jpg)\n\n應該說作了太多事. \n![](https://i.imgur.com/NU0PqCh.jpg)\n\n程式碼有壞味道,卻不能修改(重構). \n因為沒有測試保護. \n\n單一的Process，複雜度過高的方法(12)\n\n`CalculateShoppingCartPromotionDiscountV2Processor.Process()`\n\n![](https://i.imgur.com/qleqGPb.jpg)\n\n### 目標與執行順序\n1. 由 PM 或 QA 補足整合測試情境到足夠\n    - 由實務上的需求來認定\n2. 刪除台灣的測試\n3. 解析 `CalculateShoppingCartPromotionDiscountV2Processor` \n4. 補上單元測試\n    - Code Coverage(測試覆蓋率)\n5. 重構\n\n## 最終的目標是重構\n\n- 心態:[沒有時間，完美的借口](http://www.danielteng.com/2012/09/25/no-time-to-learn-perfect-excuse/)\n- 重構前要先作整合測試\n- 現有的整合測試的缺陷\n    1. 測試項目不符合馬來西亞現狀\n    2. 測試項目未處理多語系\n    3. 測試項目未處理小數點\n    4. 測試項目難以閱讀\n    5. 測試項目有重覆的覆蓋範圍\n- RD與PM與QA合作\n\n### UAT 讓「人」讀得懂\n\n#### 原本的 UAT (RD)\n```gherkin\n場景: case37：商品活動+全店活動(有排除)；宅配，運費50元，滿350免運\n\t．全店活動 / 有排除商品；滿額打折，多階(滿第1階)，跨溫層\n\t．折扣條件：滿199元，打95折 / 滿299元，打89折 / 滿399元，打84折\n\t．商品活動；滿件折現，單階，跨溫層\n\t．折扣條件：滿2件，折45元\n\t假設 購物車中溫層\"Freezer\"商品為\n\t\t| SalePageId | SaleProductSKUId | Price | Qty |\n\t\t| 50         | 50               | 75    | 1   |\n\t\t| 27         | 27               | 66    | 2   |\n\t並且 購物車中溫層\"Refrigerator\"商品為\n\t\t| SalePageId | SaleProductSKUId | Price | Qty |\n\t\t| 26         | 26               | 55    | 2   |\n\t並且 購物車中溫層\"Normal\"商品為\n\t\t| SalePageId | SaleProductSKUId | Price | Qty |\n\t\t| 25         | 25               | 2     | 2   |\n\t並且 活動\"1\"範圍設定為\n\t\t| TargetType | TargetIdList |\n\t\t| Shop       | 1            |\n\t並且 活動目標排除商品頁為\n\t\t| PromotionId | TargetExcludeSalePageList |\n\t\t| 1           | 50          |\n\t並且  現折活動\"1\"的折扣為\n\t\t| Id | TypeDef      | TotalPrice | DiscountTypeDef | DiscountRate |\n\t\t| 1  | TotalPriceV2 | 199        | DiscountRate    | 0.95         |\n\t\t| 2  | TotalPriceV2 | 299        | DiscountRate    | 0.89         |\n\t\t| 3  | TotalPriceV2 | 399        | DiscountRate    | 0.84         |\n\t並且 活動\"2\"範圍設定為\n\t\t| TargetType        | TargetIdList |\n\t\t| PromotionSalePage | 0            |\n\t並且 活動目標商品頁為\n\t\t| PromotionId | TargetSalePageList |\n\t\t| 2           | 50,25,26,27        |\n\t並且  現折活動\"2\"的折扣為\n\t\t| Id | TypeDef    | TotalQty | DiscountTypeDef | DiscountPrice |\n\t\t| 4  | TotalQtyV2 | 2        | DiscountPrice   | 45            |\n\t當 計算活動折扣\n\t那麼 購物車商品折扣後為\n\t\t| SalePageId | SaleProductSKUId | PromotionDiscount |\n\t\t| 50         | 50               | -12               |\n\t\t| 27         | 27               | -25               |\n\t\t| 26         | 26               | -19               |\n\t\t| 25         | 25               | 0                 |\n```\n\n #### 「人」寫的UAT \n\n\n\n\n\n\n```gherkin\n場景: 商品有兩檔活動，全店活動與商品活動；\n\t．第一檔是全店活動 / 排除商品B；滿額打折，\n\t．折扣條件：滿10元，打95折 / 滿20元，打89折 / 滿30元，打84折\n\t．第二檔是指定商品；滿件折現，單階，指定商品A 、商品B\n\t．折扣條件：滿2件，折3元\n\n當 購物車中的商品為\"商品A 與商品B\"\n\t\t| Title | SalePageId | SaleProductSKUId | Price | Qty |\n\t\t| 商品A   | 25         | 25               | 7.45  | 2   |\n\t\t| 商品B   | 26         | 26               | 4.45  | 2   |\n\t\n並且 第\"1\"檔是全店活動 ,排除以下商品\n\t    | Title | SalePageId |\n\t    | 商品A   | 26         |\n\n而且 第\"1\"檔折扣條件是\"滿額打折,滿10元，打95折 / 滿20元，打89折 / 滿30元，打84折\",如下\n    | Id | TypeDef      | TotalPrice | DiscountTypeDef | DiscountRate |\n    | 1  | TotalPriceV2 | 10         | DiscountRate    | 0.95         |\n    | 2  | TotalPriceV2 | 20         | DiscountRate    | 0.89         |\n    | 3  | TotalPriceV2 | 30         | DiscountRate    | 0.84         |\n\n並且 第\"2\"檔是指定商品,指定商品如下\n    | Title | SalePageId |\n    | 商品A   | 25         |\n    | 商品B   | 26         |\n    | 商品C   | 27         |\n    | 商品D   | 50         |\n\n而且 第\"2\"檔折扣條件是\"滿件折現,滿2件，折3元\",如下\n    | Id | TypeDef    | TotalQty | DiscountTypeDef | DiscountPrice |\n    | 4  | TotalQtyV2 | 2        | DiscountPrice   | 3             |\n\n當 計算活動折扣\n\n那麼 購物車商品折扣金額及折扣後小計為 \n    | Title | SalePageId | Price | Qty | PromotionDiscount | TotalPayment |\n    | 商品A   | 25         | 7.45  | 2   | -2.55             | 12.35        |\n    | 商品B   | 26         | 4.45  | 2   | -1.11             | 7.79         |\n```\n\n與 PM 及 QA 討論後 , 寫的 UAT 可閱讀性提高了  \n這裡用到了一些小技巧 , 讓 Cucumber 文件的可讀性更高  \n而不會有太多的重複方法 , 比如說把描述性的文字當作參數傳遞  \n實際上測試不會使用到這些變數 ,但是可以增加可讀性 .\n\n### 刪除台灣測試\n因為已經有了跨國所需要的測試 , \n台灣的測試便可以退場了.\n實際上也不符合現況, 如多語系、時差與小數點等問題\n\n### 解析 `CalculateShoppingCartPromotionDiscountV2Processor` \n\n![](https://i.imgur.com/FioG5NG.jpg)\n1. 無折扣的情境\n2. 新舊相容的情境\n3. 排序\n4. 計算折扣金額\n5. 看見相依\n    1. 程式碼中有 new 別的 class 的部份\n    2. 程式碼中有使用靜態方法的部份\n\n### 補上單元測試\n\n最簡單的重構,就是將整個方法內的四個邏輯  \n拆成四塊個子方法,並為他們加上單元測試.  \n修改的過程,如果有紅燈就要修改成綠燈,  \n而整個成品要保證整合測試與單元測試都是綠燈. \n\n此外,重構的過程中如果過到靜態方法,  \n或是 new 新物件, 都很有可能是種相依,  \n可以透過一些方法作解耦,  \n參考之前的文章[單元測試這樣玩就對了](/2017/04/23/unitestwriting/) \n\n### 重構\n最後一步就是大膽的重構了,  \n有了測試作保護,  \n可以作更大範圍的重構,  \n如下圖示,這裡揭露了在台灣原有的繼承結構, \n而紅色的部份是在跨國用不到的類別.\n![](https://i.imgur.com/VQ10wY6.jpg)\n\n下一步，待續…\n\n(fin)","slug":"integrated_testing_partice","published":1,"updated":"2018-01-30T16:29:44.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivycv000zyk55malr7mlr","content":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><p>有幸參與了一個跨國的專案,<br>為了快速上線，決定將整套原本在台灣程式碼搬移到跨國專案上,<br>上線後再依使用者的需求調整開發功能,<br>而在搬移的過程中,有需多模組並未開啟。<br>…</p>\n<h2 id=\"現況\"><a href=\"#現況\" class=\"headerlink\" title=\"現況\"></a>現況</h2><p>遺留代碼 → 跨國 遇到的問題</p>\n<ol>\n<li>Copy Paste 最快卻不一定最適合</li>\n<li>Copy Paste 最快卻不一定改得動</li>\n<li>Copy Paste 最快但是有的地方沒Copy完</li>\n</ol>\n<p><code>用明朝的劍，斬清朝的官</code></p>\n<h2 id=\"實務需求\"><a href=\"#實務需求\" class=\"headerlink\" title=\"實務需求\"></a>實務需求</h2><p>將本來跨國未開啟的<strong>折扣活動</strong>模組打開,<br>簡單的流程大致如下:<br>購物車 → 取得購物車資料 → 折扣活動 → 計算</p>\n<p>實務上,整個流程作了許多事<br><img src=\"https://i.imgur.com/pM36Joo.jpg\" alt=\"\"></p>\n<p>應該說作了太多事.<br><img src=\"https://i.imgur.com/NU0PqCh.jpg\" alt=\"\"></p>\n<p>程式碼有壞味道,卻不能修改(重構).<br>因為沒有測試保護. </p>\n<p>單一的Process，複雜度過高的方法(12)</p>\n<p><code>CalculateShoppingCartPromotionDiscountV2Processor.Process()</code></p>\n<p><img src=\"https://i.imgur.com/qleqGPb.jpg\" alt=\"\"></p>\n<h3 id=\"目標與執行順序\"><a href=\"#目標與執行順序\" class=\"headerlink\" title=\"目標與執行順序\"></a>目標與執行順序</h3><ol>\n<li>由 PM 或 QA 補足整合測試情境到足夠<ul>\n<li>由實務上的需求來認定</li>\n</ul>\n</li>\n<li>刪除台灣的測試</li>\n<li>解析 <code>CalculateShoppingCartPromotionDiscountV2Processor</code> </li>\n<li>補上單元測試<ul>\n<li>Code Coverage(測試覆蓋率)</li>\n</ul>\n</li>\n<li>重構</li>\n</ol>\n<h2 id=\"最終的目標是重構\"><a href=\"#最終的目標是重構\" class=\"headerlink\" title=\"最終的目標是重構\"></a>最終的目標是重構</h2><ul>\n<li>心態:<a href=\"http://www.danielteng.com/2012/09/25/no-time-to-learn-perfect-excuse/\" target=\"_blank\" rel=\"external\">沒有時間，完美的借口</a></li>\n<li>重構前要先作整合測試</li>\n<li>現有的整合測試的缺陷<ol>\n<li>測試項目不符合馬來西亞現狀</li>\n<li>測試項目未處理多語系</li>\n<li>測試項目未處理小數點</li>\n<li>測試項目難以閱讀</li>\n<li>測試項目有重覆的覆蓋範圍</li>\n</ol>\n</li>\n<li>RD與PM與QA合作</li>\n</ul>\n<h3 id=\"UAT-讓「人」讀得懂\"><a href=\"#UAT-讓「人」讀得懂\" class=\"headerlink\" title=\"UAT 讓「人」讀得懂\"></a>UAT 讓「人」讀得懂</h3><h4 id=\"原本的-UAT-RD\"><a href=\"#原本的-UAT-RD\" class=\"headerlink\" title=\"原本的 UAT (RD)\"></a>原本的 UAT (RD)</h4><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">場景: case37：商品活動+全店活動(有排除)；宅配，運費50元，滿350免運</div><div class=\"line\">\t．全店活動 / 有排除商品；滿額打折，多階(滿第1階)，跨溫層</div><div class=\"line\">\t．折扣條件：滿199元，打95折 / 滿299元，打89折 / 滿399元，打84折</div><div class=\"line\">\t．商品活動；滿件折現，單階，跨溫層</div><div class=\"line\">\t．折扣條件：滿2件，折45元</div><div class=\"line\">\t假設 購物車中溫層<span class=\"string\">\"Freezer\"</span>商品為</div><div class=\"line\">\t\t|<span class=\"string\"> SalePageId </span>|<span class=\"string\"> SaleProductSKUId </span>|<span class=\"string\"> Price </span>|<span class=\"string\"> Qty </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 50         </span>|<span class=\"string\"> 50               </span>|<span class=\"string\"> 75    </span>|<span class=\"string\"> 1   </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 27         </span>|<span class=\"string\"> 27               </span>|<span class=\"string\"> 66    </span>|<span class=\"string\"> 2   </span>|</div><div class=\"line\">\t並且 購物車中溫層<span class=\"string\">\"Refrigerator\"</span>商品為</div><div class=\"line\">\t\t|<span class=\"string\"> SalePageId </span>|<span class=\"string\"> SaleProductSKUId </span>|<span class=\"string\"> Price </span>|<span class=\"string\"> Qty </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 26         </span>|<span class=\"string\"> 26               </span>|<span class=\"string\"> 55    </span>|<span class=\"string\"> 2   </span>|</div><div class=\"line\">\t並且 購物車中溫層<span class=\"string\">\"Normal\"</span>商品為</div><div class=\"line\">\t\t|<span class=\"string\"> SalePageId </span>|<span class=\"string\"> SaleProductSKUId </span>|<span class=\"string\"> Price </span>|<span class=\"string\"> Qty </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 25         </span>|<span class=\"string\"> 25               </span>|<span class=\"string\"> 2     </span>|<span class=\"string\"> 2   </span>|</div><div class=\"line\">\t並且 活動<span class=\"string\">\"1\"</span>範圍設定為</div><div class=\"line\">\t\t|<span class=\"string\"> TargetType </span>|<span class=\"string\"> TargetIdList </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> Shop       </span>|<span class=\"string\"> 1            </span>|</div><div class=\"line\">\t並且 活動目標排除商品頁為</div><div class=\"line\">\t\t|<span class=\"string\"> PromotionId </span>|<span class=\"string\"> TargetExcludeSalePageList </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 1           </span>|<span class=\"string\"> 50          </span>|</div><div class=\"line\">\t並且  現折活動<span class=\"string\">\"1\"</span>的折扣為</div><div class=\"line\">\t\t|<span class=\"string\"> Id </span>|<span class=\"string\"> TypeDef      </span>|<span class=\"string\"> TotalPrice </span>|<span class=\"string\"> DiscountTypeDef </span>|<span class=\"string\"> DiscountRate </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 1  </span>|<span class=\"string\"> TotalPriceV2 </span>|<span class=\"string\"> 199        </span>|<span class=\"string\"> DiscountRate    </span>|<span class=\"string\"> 0.95         </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 2  </span>|<span class=\"string\"> TotalPriceV2 </span>|<span class=\"string\"> 299        </span>|<span class=\"string\"> DiscountRate    </span>|<span class=\"string\"> 0.89         </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 3  </span>|<span class=\"string\"> TotalPriceV2 </span>|<span class=\"string\"> 399        </span>|<span class=\"string\"> DiscountRate    </span>|<span class=\"string\"> 0.84         </span>|</div><div class=\"line\">\t並且 活動<span class=\"string\">\"2\"</span>範圍設定為</div><div class=\"line\">\t\t|<span class=\"string\"> TargetType        </span>|<span class=\"string\"> TargetIdList </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> PromotionSalePage </span>|<span class=\"string\"> 0            </span>|</div><div class=\"line\">\t並且 活動目標商品頁為</div><div class=\"line\">\t\t|<span class=\"string\"> PromotionId </span>|<span class=\"string\"> TargetSalePageList </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 2           </span>|<span class=\"string\"> 50,25,26,27        </span>|</div><div class=\"line\">\t並且  現折活動<span class=\"string\">\"2\"</span>的折扣為</div><div class=\"line\">\t\t|<span class=\"string\"> Id </span>|<span class=\"string\"> TypeDef    </span>|<span class=\"string\"> TotalQty </span>|<span class=\"string\"> DiscountTypeDef </span>|<span class=\"string\"> DiscountPrice </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 4  </span>|<span class=\"string\"> TotalQtyV2 </span>|<span class=\"string\"> 2        </span>|<span class=\"string\"> DiscountPrice   </span>|<span class=\"string\"> 45            </span>|</div><div class=\"line\">\t當 計算活動折扣</div><div class=\"line\">\t那麼 購物車商品折扣後為</div><div class=\"line\">\t\t|<span class=\"string\"> SalePageId </span>|<span class=\"string\"> SaleProductSKUId </span>|<span class=\"string\"> PromotionDiscount </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 50         </span>|<span class=\"string\"> 50               </span>|<span class=\"string\"> -12               </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 27         </span>|<span class=\"string\"> 27               </span>|<span class=\"string\"> -25               </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 26         </span>|<span class=\"string\"> 26               </span>|<span class=\"string\"> -19               </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 25         </span>|<span class=\"string\"> 25               </span>|<span class=\"string\"> 0                 </span>|</div></pre></td></tr></table></figure>\n<h4 id=\"「人」寫的UAT\"><a href=\"#「人」寫的UAT\" class=\"headerlink\" title=\"「人」寫的UAT\"></a>「人」寫的UAT</h4><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">場景: 商品有兩檔活動，全店活動與商品活動；</div><div class=\"line\">\t．第一檔是全店活動 / 排除商品B；滿額打折，</div><div class=\"line\">\t．折扣條件：滿10元，打95折 / 滿20元，打89折 / 滿30元，打84折</div><div class=\"line\">\t．第二檔是指定商品；滿件折現，單階，指定商品A 、商品B</div><div class=\"line\">\t．折扣條件：滿2件，折3元</div><div class=\"line\"></div><div class=\"line\">當 購物車中的商品為<span class=\"string\">\"商品A 與商品B\"</span></div><div class=\"line\">\t\t|<span class=\"string\"> Title </span>|<span class=\"string\"> SalePageId </span>|<span class=\"string\"> SaleProductSKUId </span>|<span class=\"string\"> Price </span>|<span class=\"string\"> Qty </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 商品A   </span>|<span class=\"string\"> 25         </span>|<span class=\"string\"> 25               </span>|<span class=\"string\"> 7.45  </span>|<span class=\"string\"> 2   </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 商品B   </span>|<span class=\"string\"> 26         </span>|<span class=\"string\"> 26               </span>|<span class=\"string\"> 4.45  </span>|<span class=\"string\"> 2   </span>|</div><div class=\"line\">\t</div><div class=\"line\">並且 第<span class=\"string\">\"1\"</span>檔是全店活動 ,排除以下商品</div><div class=\"line\">\t    |<span class=\"string\"> Title </span>|<span class=\"string\"> SalePageId </span>|</div><div class=\"line\">\t    |<span class=\"string\"> 商品A   </span>|<span class=\"string\"> 26         </span>|</div><div class=\"line\"></div><div class=\"line\">而且 第<span class=\"string\">\"1\"</span>檔折扣條件是<span class=\"string\">\"滿額打折,滿10元，打95折 / 滿20元，打89折 / 滿30元，打84折\"</span>,如下</div><div class=\"line\">    |<span class=\"string\"> Id </span>|<span class=\"string\"> TypeDef      </span>|<span class=\"string\"> TotalPrice </span>|<span class=\"string\"> DiscountTypeDef </span>|<span class=\"string\"> DiscountRate </span>|</div><div class=\"line\">    |<span class=\"string\"> 1  </span>|<span class=\"string\"> TotalPriceV2 </span>|<span class=\"string\"> 10         </span>|<span class=\"string\"> DiscountRate    </span>|<span class=\"string\"> 0.95         </span>|</div><div class=\"line\">    |<span class=\"string\"> 2  </span>|<span class=\"string\"> TotalPriceV2 </span>|<span class=\"string\"> 20         </span>|<span class=\"string\"> DiscountRate    </span>|<span class=\"string\"> 0.89         </span>|</div><div class=\"line\">    |<span class=\"string\"> 3  </span>|<span class=\"string\"> TotalPriceV2 </span>|<span class=\"string\"> 30         </span>|<span class=\"string\"> DiscountRate    </span>|<span class=\"string\"> 0.84         </span>|</div><div class=\"line\"></div><div class=\"line\">並且 第<span class=\"string\">\"2\"</span>檔是指定商品,指定商品如下</div><div class=\"line\">    |<span class=\"string\"> Title </span>|<span class=\"string\"> SalePageId </span>|</div><div class=\"line\">    |<span class=\"string\"> 商品A   </span>|<span class=\"string\"> 25         </span>|</div><div class=\"line\">    |<span class=\"string\"> 商品B   </span>|<span class=\"string\"> 26         </span>|</div><div class=\"line\">    |<span class=\"string\"> 商品C   </span>|<span class=\"string\"> 27         </span>|</div><div class=\"line\">    |<span class=\"string\"> 商品D   </span>|<span class=\"string\"> 50         </span>|</div><div class=\"line\"></div><div class=\"line\">而且 第<span class=\"string\">\"2\"</span>檔折扣條件是<span class=\"string\">\"滿件折現,滿2件，折3元\"</span>,如下</div><div class=\"line\">    |<span class=\"string\"> Id </span>|<span class=\"string\"> TypeDef    </span>|<span class=\"string\"> TotalQty </span>|<span class=\"string\"> DiscountTypeDef </span>|<span class=\"string\"> DiscountPrice </span>|</div><div class=\"line\">    |<span class=\"string\"> 4  </span>|<span class=\"string\"> TotalQtyV2 </span>|<span class=\"string\"> 2        </span>|<span class=\"string\"> DiscountPrice   </span>|<span class=\"string\"> 3             </span>|</div><div class=\"line\"></div><div class=\"line\">當 計算活動折扣</div><div class=\"line\"></div><div class=\"line\">那麼 購物車商品折扣金額及折扣後小計為 </div><div class=\"line\">    |<span class=\"string\"> Title </span>|<span class=\"string\"> SalePageId </span>|<span class=\"string\"> Price </span>|<span class=\"string\"> Qty </span>|<span class=\"string\"> PromotionDiscount </span>|<span class=\"string\"> TotalPayment </span>|</div><div class=\"line\">    |<span class=\"string\"> 商品A   </span>|<span class=\"string\"> 25         </span>|<span class=\"string\"> 7.45  </span>|<span class=\"string\"> 2   </span>|<span class=\"string\"> -2.55             </span>|<span class=\"string\"> 12.35        </span>|</div><div class=\"line\">    |<span class=\"string\"> 商品B   </span>|<span class=\"string\"> 26         </span>|<span class=\"string\"> 4.45  </span>|<span class=\"string\"> 2   </span>|<span class=\"string\"> -1.11             </span>|<span class=\"string\"> 7.79         </span>|</div></pre></td></tr></table></figure>\n<p>與 PM 及 QA 討論後 , 寫的 UAT 可閱讀性提高了<br>這裡用到了一些小技巧 , 讓 Cucumber 文件的可讀性更高<br>而不會有太多的重複方法 , 比如說把描述性的文字當作參數傳遞<br>實際上測試不會使用到這些變數 ,但是可以增加可讀性 .</p>\n<h3 id=\"刪除台灣測試\"><a href=\"#刪除台灣測試\" class=\"headerlink\" title=\"刪除台灣測試\"></a>刪除台灣測試</h3><p>因為已經有了跨國所需要的測試 ,<br>台灣的測試便可以退場了.<br>實際上也不符合現況, 如多語系、時差與小數點等問題</p>\n<h3 id=\"解析-CalculateShoppingCartPromotionDiscountV2Processor\"><a href=\"#解析-CalculateShoppingCartPromotionDiscountV2Processor\" class=\"headerlink\" title=\"解析 CalculateShoppingCartPromotionDiscountV2Processor\"></a>解析 <code>CalculateShoppingCartPromotionDiscountV2Processor</code></h3><p><img src=\"https://i.imgur.com/FioG5NG.jpg\" alt=\"\"></p>\n<ol>\n<li>無折扣的情境</li>\n<li>新舊相容的情境</li>\n<li>排序</li>\n<li>計算折扣金額</li>\n<li>看見相依<ol>\n<li>程式碼中有 new 別的 class 的部份</li>\n<li>程式碼中有使用靜態方法的部份</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"補上單元測試\"><a href=\"#補上單元測試\" class=\"headerlink\" title=\"補上單元測試\"></a>補上單元測試</h3><p>最簡單的重構,就是將整個方法內的四個邏輯<br>拆成四塊個子方法,並為他們加上單元測試.<br>修改的過程,如果有紅燈就要修改成綠燈,<br>而整個成品要保證整合測試與單元測試都是綠燈. </p>\n<p>此外,重構的過程中如果過到靜態方法,<br>或是 new 新物件, 都很有可能是種相依,<br>可以透過一些方法作解耦,<br>參考之前的文章<a href=\"/2017/04/23/unitestwriting/\">單元測試這樣玩就對了</a> </p>\n<h3 id=\"重構\"><a href=\"#重構\" class=\"headerlink\" title=\"重構\"></a>重構</h3><p>最後一步就是大膽的重構了,<br>有了測試作保護,<br>可以作更大範圍的重構,<br>如下圖示,這裡揭露了在台灣原有的繼承結構,<br>而紅色的部份是在跨國用不到的類別.<br><img src=\"https://i.imgur.com/VQ10wY6.jpg\" alt=\"\"></p>\n<p>下一步，待續…</p>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><p>有幸參與了一個跨國的專案,<br>為了快速上線，決定將整套原本在台灣程式碼搬移到跨國專案上,<br>上線後再依使用者的需求調整開發功能,<br>而在搬移的過程中,有需多模組並未開啟。<br>…</p>\n<h2 id=\"現況\"><a href=\"#現況\" class=\"headerlink\" title=\"現況\"></a>現況</h2><p>遺留代碼 → 跨國 遇到的問題</p>\n<ol>\n<li>Copy Paste 最快卻不一定最適合</li>\n<li>Copy Paste 最快卻不一定改得動</li>\n<li>Copy Paste 最快但是有的地方沒Copy完</li>\n</ol>\n<p><code>用明朝的劍，斬清朝的官</code></p>\n<h2 id=\"實務需求\"><a href=\"#實務需求\" class=\"headerlink\" title=\"實務需求\"></a>實務需求</h2><p>將本來跨國未開啟的<strong>折扣活動</strong>模組打開,<br>簡單的流程大致如下:<br>購物車 → 取得購物車資料 → 折扣活動 → 計算</p>\n<p>實務上,整個流程作了許多事<br><img src=\"https://i.imgur.com/pM36Joo.jpg\" alt=\"\"></p>\n<p>應該說作了太多事.<br><img src=\"https://i.imgur.com/NU0PqCh.jpg\" alt=\"\"></p>\n<p>程式碼有壞味道,卻不能修改(重構).<br>因為沒有測試保護. </p>\n<p>單一的Process，複雜度過高的方法(12)</p>\n<p><code>CalculateShoppingCartPromotionDiscountV2Processor.Process()</code></p>\n<p><img src=\"https://i.imgur.com/qleqGPb.jpg\" alt=\"\"></p>\n<h3 id=\"目標與執行順序\"><a href=\"#目標與執行順序\" class=\"headerlink\" title=\"目標與執行順序\"></a>目標與執行順序</h3><ol>\n<li>由 PM 或 QA 補足整合測試情境到足夠<ul>\n<li>由實務上的需求來認定</li>\n</ul>\n</li>\n<li>刪除台灣的測試</li>\n<li>解析 <code>CalculateShoppingCartPromotionDiscountV2Processor</code> </li>\n<li>補上單元測試<ul>\n<li>Code Coverage(測試覆蓋率)</li>\n</ul>\n</li>\n<li>重構</li>\n</ol>\n<h2 id=\"最終的目標是重構\"><a href=\"#最終的目標是重構\" class=\"headerlink\" title=\"最終的目標是重構\"></a>最終的目標是重構</h2><ul>\n<li>心態:<a href=\"http://www.danielteng.com/2012/09/25/no-time-to-learn-perfect-excuse/\" target=\"_blank\" rel=\"external\">沒有時間，完美的借口</a></li>\n<li>重構前要先作整合測試</li>\n<li>現有的整合測試的缺陷<ol>\n<li>測試項目不符合馬來西亞現狀</li>\n<li>測試項目未處理多語系</li>\n<li>測試項目未處理小數點</li>\n<li>測試項目難以閱讀</li>\n<li>測試項目有重覆的覆蓋範圍</li>\n</ol>\n</li>\n<li>RD與PM與QA合作</li>\n</ul>\n<h3 id=\"UAT-讓「人」讀得懂\"><a href=\"#UAT-讓「人」讀得懂\" class=\"headerlink\" title=\"UAT 讓「人」讀得懂\"></a>UAT 讓「人」讀得懂</h3><h4 id=\"原本的-UAT-RD\"><a href=\"#原本的-UAT-RD\" class=\"headerlink\" title=\"原本的 UAT (RD)\"></a>原本的 UAT (RD)</h4><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">場景: case37：商品活動+全店活動(有排除)；宅配，運費50元，滿350免運</div><div class=\"line\">\t．全店活動 / 有排除商品；滿額打折，多階(滿第1階)，跨溫層</div><div class=\"line\">\t．折扣條件：滿199元，打95折 / 滿299元，打89折 / 滿399元，打84折</div><div class=\"line\">\t．商品活動；滿件折現，單階，跨溫層</div><div class=\"line\">\t．折扣條件：滿2件，折45元</div><div class=\"line\">\t假設 購物車中溫層<span class=\"string\">\"Freezer\"</span>商品為</div><div class=\"line\">\t\t|<span class=\"string\"> SalePageId </span>|<span class=\"string\"> SaleProductSKUId </span>|<span class=\"string\"> Price </span>|<span class=\"string\"> Qty </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 50         </span>|<span class=\"string\"> 50               </span>|<span class=\"string\"> 75    </span>|<span class=\"string\"> 1   </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 27         </span>|<span class=\"string\"> 27               </span>|<span class=\"string\"> 66    </span>|<span class=\"string\"> 2   </span>|</div><div class=\"line\">\t並且 購物車中溫層<span class=\"string\">\"Refrigerator\"</span>商品為</div><div class=\"line\">\t\t|<span class=\"string\"> SalePageId </span>|<span class=\"string\"> SaleProductSKUId </span>|<span class=\"string\"> Price </span>|<span class=\"string\"> Qty </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 26         </span>|<span class=\"string\"> 26               </span>|<span class=\"string\"> 55    </span>|<span class=\"string\"> 2   </span>|</div><div class=\"line\">\t並且 購物車中溫層<span class=\"string\">\"Normal\"</span>商品為</div><div class=\"line\">\t\t|<span class=\"string\"> SalePageId </span>|<span class=\"string\"> SaleProductSKUId </span>|<span class=\"string\"> Price </span>|<span class=\"string\"> Qty </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 25         </span>|<span class=\"string\"> 25               </span>|<span class=\"string\"> 2     </span>|<span class=\"string\"> 2   </span>|</div><div class=\"line\">\t並且 活動<span class=\"string\">\"1\"</span>範圍設定為</div><div class=\"line\">\t\t|<span class=\"string\"> TargetType </span>|<span class=\"string\"> TargetIdList </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> Shop       </span>|<span class=\"string\"> 1            </span>|</div><div class=\"line\">\t並且 活動目標排除商品頁為</div><div class=\"line\">\t\t|<span class=\"string\"> PromotionId </span>|<span class=\"string\"> TargetExcludeSalePageList </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 1           </span>|<span class=\"string\"> 50          </span>|</div><div class=\"line\">\t並且  現折活動<span class=\"string\">\"1\"</span>的折扣為</div><div class=\"line\">\t\t|<span class=\"string\"> Id </span>|<span class=\"string\"> TypeDef      </span>|<span class=\"string\"> TotalPrice </span>|<span class=\"string\"> DiscountTypeDef </span>|<span class=\"string\"> DiscountRate </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 1  </span>|<span class=\"string\"> TotalPriceV2 </span>|<span class=\"string\"> 199        </span>|<span class=\"string\"> DiscountRate    </span>|<span class=\"string\"> 0.95         </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 2  </span>|<span class=\"string\"> TotalPriceV2 </span>|<span class=\"string\"> 299        </span>|<span class=\"string\"> DiscountRate    </span>|<span class=\"string\"> 0.89         </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 3  </span>|<span class=\"string\"> TotalPriceV2 </span>|<span class=\"string\"> 399        </span>|<span class=\"string\"> DiscountRate    </span>|<span class=\"string\"> 0.84         </span>|</div><div class=\"line\">\t並且 活動<span class=\"string\">\"2\"</span>範圍設定為</div><div class=\"line\">\t\t|<span class=\"string\"> TargetType        </span>|<span class=\"string\"> TargetIdList </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> PromotionSalePage </span>|<span class=\"string\"> 0            </span>|</div><div class=\"line\">\t並且 活動目標商品頁為</div><div class=\"line\">\t\t|<span class=\"string\"> PromotionId </span>|<span class=\"string\"> TargetSalePageList </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 2           </span>|<span class=\"string\"> 50,25,26,27        </span>|</div><div class=\"line\">\t並且  現折活動<span class=\"string\">\"2\"</span>的折扣為</div><div class=\"line\">\t\t|<span class=\"string\"> Id </span>|<span class=\"string\"> TypeDef    </span>|<span class=\"string\"> TotalQty </span>|<span class=\"string\"> DiscountTypeDef </span>|<span class=\"string\"> DiscountPrice </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 4  </span>|<span class=\"string\"> TotalQtyV2 </span>|<span class=\"string\"> 2        </span>|<span class=\"string\"> DiscountPrice   </span>|<span class=\"string\"> 45            </span>|</div><div class=\"line\">\t當 計算活動折扣</div><div class=\"line\">\t那麼 購物車商品折扣後為</div><div class=\"line\">\t\t|<span class=\"string\"> SalePageId </span>|<span class=\"string\"> SaleProductSKUId </span>|<span class=\"string\"> PromotionDiscount </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 50         </span>|<span class=\"string\"> 50               </span>|<span class=\"string\"> -12               </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 27         </span>|<span class=\"string\"> 27               </span>|<span class=\"string\"> -25               </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 26         </span>|<span class=\"string\"> 26               </span>|<span class=\"string\"> -19               </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 25         </span>|<span class=\"string\"> 25               </span>|<span class=\"string\"> 0                 </span>|</div></pre></td></tr></table></figure>\n<h4 id=\"「人」寫的UAT\"><a href=\"#「人」寫的UAT\" class=\"headerlink\" title=\"「人」寫的UAT\"></a>「人」寫的UAT</h4><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">場景: 商品有兩檔活動，全店活動與商品活動；</div><div class=\"line\">\t．第一檔是全店活動 / 排除商品B；滿額打折，</div><div class=\"line\">\t．折扣條件：滿10元，打95折 / 滿20元，打89折 / 滿30元，打84折</div><div class=\"line\">\t．第二檔是指定商品；滿件折現，單階，指定商品A 、商品B</div><div class=\"line\">\t．折扣條件：滿2件，折3元</div><div class=\"line\"></div><div class=\"line\">當 購物車中的商品為<span class=\"string\">\"商品A 與商品B\"</span></div><div class=\"line\">\t\t|<span class=\"string\"> Title </span>|<span class=\"string\"> SalePageId </span>|<span class=\"string\"> SaleProductSKUId </span>|<span class=\"string\"> Price </span>|<span class=\"string\"> Qty </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 商品A   </span>|<span class=\"string\"> 25         </span>|<span class=\"string\"> 25               </span>|<span class=\"string\"> 7.45  </span>|<span class=\"string\"> 2   </span>|</div><div class=\"line\">\t\t|<span class=\"string\"> 商品B   </span>|<span class=\"string\"> 26         </span>|<span class=\"string\"> 26               </span>|<span class=\"string\"> 4.45  </span>|<span class=\"string\"> 2   </span>|</div><div class=\"line\">\t</div><div class=\"line\">並且 第<span class=\"string\">\"1\"</span>檔是全店活動 ,排除以下商品</div><div class=\"line\">\t    |<span class=\"string\"> Title </span>|<span class=\"string\"> SalePageId </span>|</div><div class=\"line\">\t    |<span class=\"string\"> 商品A   </span>|<span class=\"string\"> 26         </span>|</div><div class=\"line\"></div><div class=\"line\">而且 第<span class=\"string\">\"1\"</span>檔折扣條件是<span class=\"string\">\"滿額打折,滿10元，打95折 / 滿20元，打89折 / 滿30元，打84折\"</span>,如下</div><div class=\"line\">    |<span class=\"string\"> Id </span>|<span class=\"string\"> TypeDef      </span>|<span class=\"string\"> TotalPrice </span>|<span class=\"string\"> DiscountTypeDef </span>|<span class=\"string\"> DiscountRate </span>|</div><div class=\"line\">    |<span class=\"string\"> 1  </span>|<span class=\"string\"> TotalPriceV2 </span>|<span class=\"string\"> 10         </span>|<span class=\"string\"> DiscountRate    </span>|<span class=\"string\"> 0.95         </span>|</div><div class=\"line\">    |<span class=\"string\"> 2  </span>|<span class=\"string\"> TotalPriceV2 </span>|<span class=\"string\"> 20         </span>|<span class=\"string\"> DiscountRate    </span>|<span class=\"string\"> 0.89         </span>|</div><div class=\"line\">    |<span class=\"string\"> 3  </span>|<span class=\"string\"> TotalPriceV2 </span>|<span class=\"string\"> 30         </span>|<span class=\"string\"> DiscountRate    </span>|<span class=\"string\"> 0.84         </span>|</div><div class=\"line\"></div><div class=\"line\">並且 第<span class=\"string\">\"2\"</span>檔是指定商品,指定商品如下</div><div class=\"line\">    |<span class=\"string\"> Title </span>|<span class=\"string\"> SalePageId </span>|</div><div class=\"line\">    |<span class=\"string\"> 商品A   </span>|<span class=\"string\"> 25         </span>|</div><div class=\"line\">    |<span class=\"string\"> 商品B   </span>|<span class=\"string\"> 26         </span>|</div><div class=\"line\">    |<span class=\"string\"> 商品C   </span>|<span class=\"string\"> 27         </span>|</div><div class=\"line\">    |<span class=\"string\"> 商品D   </span>|<span class=\"string\"> 50         </span>|</div><div class=\"line\"></div><div class=\"line\">而且 第<span class=\"string\">\"2\"</span>檔折扣條件是<span class=\"string\">\"滿件折現,滿2件，折3元\"</span>,如下</div><div class=\"line\">    |<span class=\"string\"> Id </span>|<span class=\"string\"> TypeDef    </span>|<span class=\"string\"> TotalQty </span>|<span class=\"string\"> DiscountTypeDef </span>|<span class=\"string\"> DiscountPrice </span>|</div><div class=\"line\">    |<span class=\"string\"> 4  </span>|<span class=\"string\"> TotalQtyV2 </span>|<span class=\"string\"> 2        </span>|<span class=\"string\"> DiscountPrice   </span>|<span class=\"string\"> 3             </span>|</div><div class=\"line\"></div><div class=\"line\">當 計算活動折扣</div><div class=\"line\"></div><div class=\"line\">那麼 購物車商品折扣金額及折扣後小計為 </div><div class=\"line\">    |<span class=\"string\"> Title </span>|<span class=\"string\"> SalePageId </span>|<span class=\"string\"> Price </span>|<span class=\"string\"> Qty </span>|<span class=\"string\"> PromotionDiscount </span>|<span class=\"string\"> TotalPayment </span>|</div><div class=\"line\">    |<span class=\"string\"> 商品A   </span>|<span class=\"string\"> 25         </span>|<span class=\"string\"> 7.45  </span>|<span class=\"string\"> 2   </span>|<span class=\"string\"> -2.55             </span>|<span class=\"string\"> 12.35        </span>|</div><div class=\"line\">    |<span class=\"string\"> 商品B   </span>|<span class=\"string\"> 26         </span>|<span class=\"string\"> 4.45  </span>|<span class=\"string\"> 2   </span>|<span class=\"string\"> -1.11             </span>|<span class=\"string\"> 7.79         </span>|</div></pre></td></tr></table></figure>\n<p>與 PM 及 QA 討論後 , 寫的 UAT 可閱讀性提高了<br>這裡用到了一些小技巧 , 讓 Cucumber 文件的可讀性更高<br>而不會有太多的重複方法 , 比如說把描述性的文字當作參數傳遞<br>實際上測試不會使用到這些變數 ,但是可以增加可讀性 .</p>\n<h3 id=\"刪除台灣測試\"><a href=\"#刪除台灣測試\" class=\"headerlink\" title=\"刪除台灣測試\"></a>刪除台灣測試</h3><p>因為已經有了跨國所需要的測試 ,<br>台灣的測試便可以退場了.<br>實際上也不符合現況, 如多語系、時差與小數點等問題</p>\n<h3 id=\"解析-CalculateShoppingCartPromotionDiscountV2Processor\"><a href=\"#解析-CalculateShoppingCartPromotionDiscountV2Processor\" class=\"headerlink\" title=\"解析 CalculateShoppingCartPromotionDiscountV2Processor\"></a>解析 <code>CalculateShoppingCartPromotionDiscountV2Processor</code></h3><p><img src=\"https://i.imgur.com/FioG5NG.jpg\" alt=\"\"></p>\n<ol>\n<li>無折扣的情境</li>\n<li>新舊相容的情境</li>\n<li>排序</li>\n<li>計算折扣金額</li>\n<li>看見相依<ol>\n<li>程式碼中有 new 別的 class 的部份</li>\n<li>程式碼中有使用靜態方法的部份</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"補上單元測試\"><a href=\"#補上單元測試\" class=\"headerlink\" title=\"補上單元測試\"></a>補上單元測試</h3><p>最簡單的重構,就是將整個方法內的四個邏輯<br>拆成四塊個子方法,並為他們加上單元測試.<br>修改的過程,如果有紅燈就要修改成綠燈,<br>而整個成品要保證整合測試與單元測試都是綠燈. </p>\n<p>此外,重構的過程中如果過到靜態方法,<br>或是 new 新物件, 都很有可能是種相依,<br>可以透過一些方法作解耦,<br>參考之前的文章<a href=\"/2017/04/23/unitestwriting/\">單元測試這樣玩就對了</a> </p>\n<h3 id=\"重構\"><a href=\"#重構\" class=\"headerlink\" title=\"重構\"></a>重構</h3><p>最後一步就是大膽的重構了,<br>有了測試作保護,<br>可以作更大範圍的重構,<br>如下圖示,這裡揭露了在台灣原有的繼承結構,<br>而紅色的部份是在跨國用不到的類別.<br><img src=\"https://i.imgur.com/VQ10wY6.jpg\" alt=\"\"></p>\n<p>下一步，待續…</p>\n<p>(fin)</p>\n"},{"title":"這個網站的待辦事項","date":"2016-08-19T18:09:07.000Z","_content":"1. ~~github page & hexo~~\n2. ~~nodejs express & Openshift~~\n3. DNS 原理簡介\n4. gulp學習筆記\n","source":"_posts/sites_todo_list.md","raw":"---\ntitle: 這個網站的待辦事項\ndate: 2016/08/20 02:09:07\n---\n1. ~~github page & hexo~~\n2. ~~nodejs express & Openshift~~\n3. DNS 原理簡介\n4. gulp學習筆記\n","slug":"sites_todo_list","published":1,"updated":"2016-12-04T16:43:46.994Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivycw0010yk55bsdtf8k5","content":"<ol>\n<li><del>github page &amp; hexo</del></li>\n<li><del>nodejs express &amp; Openshift</del></li>\n<li>DNS 原理簡介</li>\n<li>gulp學習筆記</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><del>github page &amp; hexo</del></li>\n<li><del>nodejs express &amp; Openshift</del></li>\n<li>DNS 原理簡介</li>\n<li>gulp學習筆記</li>\n</ol>\n"},{"title":"怎麼建立一個網站？(一) - 購買網域到設定DNS","date":"2016-08-21T14:12:53.000Z","_content":"\n## 前置作業\n1. 準備好你的google帳號。\n2. 可以連到美國的VPN。[google domain beta](https://atom.io/packages/atom-beautify) 台灣尚未開放\n3. 準備一張信用卡，狠狠的刷下去(挑對domain其實很便宜啦)\n4. 你的網站，什麼語言都可以，靜態的網頁也可以。  \n  *這裡我事先準備好了兩個網站,  \n  分別是用[github page](https://pages.github.com/) 與 [nodejs](https://nodejs.org) 的 [express](http://expressjs.com/),實作有機會再作記錄。\n\n\n## 設定domain\n1. github page 所建立的網站,會提供一組domain給你  \nex:`mydomain.github.io`\n2. openshift 建立的網站,一樣會提供一組domain給你  \nex:`mydomain.rhcloud.com`\n3. google domain 本身有提供 Name servers , 但是由於type`A`的domian,  \n必須指定公用ip(家中有裝hinet ADSL可以申請一組);但實際上我的兩個網站,並不需要我準備實體ip,  \n只需要使用 type `CNAME` 將我的subdomain指向原本服務的domain即可。  \nex:  \n  - blog.mydomain.me → mydomain.github.io\n  - www.mydomain.me → mydomain.rhcloud.com\n4. github page 要注意的事情，  \n你需要在你的github page 的repo root 加入一個名叫`CNAME`的檔案,\n檔案的內容很簡單, 只需要你的domain即可  \nex:\n        blog.mydomain.me  \n        mydomain.me\n\n## Bare CNAME\n大多數的時候, `CNAME` 的設定就夠了;不過對於我來說,  \n我會希望可以直接使用我的頂級domain,畢竟這樣網址可以更短一些,  \n`mydomain.me` 比 `www.mydomain.me` 更有感覺。\n\n這裡受限於google 的 Name servers , 頂級domain 必為Type`A`須綁定ip  \n這裡我們可以使用一個免費的服務[cloudflare](https://www.cloudflare.com/),來達成目的\n1. 註冊[cloudflare](https://www.cloudflare.com/)\n2. 登入後[add site](https://www.cloudflare.com/a/add-site),輸入你註冊的domain\nex:`mydomain`\n3. [cloudflare](https://www.cloudflare.com/) 會提供你至少兩組Name servers  \nex:  \n`carter.ns.cloudflare.com`  \n`tina.ns.cloudflare.com`\n4. 請先登入[google domain beta](https://atom.io/packages/atom-beautify)設定Name servers到[cloudflare](https://www.cloudflare.com/)\n5. 請依以下步驟設定\n  - \\*  → mydomain.me\n  - blog.mydomain.me → mydomain.github.io\n  - www.mydomain.me → mydomain.rhcloud.com\n6. 等待約數分鐘就ok啦\n\n## 結語\n前前後後查資料弄了一個禮拜，但是實際上設定大概1~2小時就搞定了。  \n對domain跟ip的相對關係與實務結合後更有體會了。\n\n歡迎指教討論。  \n(fin)\n","source":"_posts/setting_DNS_with_google.md","raw":"---\ntitle: 怎麼建立一個網站？(一) - 購買網域到設定DNS\ndate: 2016/08/21 22:12:53 \ntag:\n- website\n- domain\n- 記錄\n- DNS\n---\n\n## 前置作業\n1. 準備好你的google帳號。\n2. 可以連到美國的VPN。[google domain beta](https://atom.io/packages/atom-beautify) 台灣尚未開放\n3. 準備一張信用卡，狠狠的刷下去(挑對domain其實很便宜啦)\n4. 你的網站，什麼語言都可以，靜態的網頁也可以。  \n  *這裡我事先準備好了兩個網站,  \n  分別是用[github page](https://pages.github.com/) 與 [nodejs](https://nodejs.org) 的 [express](http://expressjs.com/),實作有機會再作記錄。\n\n\n## 設定domain\n1. github page 所建立的網站,會提供一組domain給你  \nex:`mydomain.github.io`\n2. openshift 建立的網站,一樣會提供一組domain給你  \nex:`mydomain.rhcloud.com`\n3. google domain 本身有提供 Name servers , 但是由於type`A`的domian,  \n必須指定公用ip(家中有裝hinet ADSL可以申請一組);但實際上我的兩個網站,並不需要我準備實體ip,  \n只需要使用 type `CNAME` 將我的subdomain指向原本服務的domain即可。  \nex:  \n  - blog.mydomain.me → mydomain.github.io\n  - www.mydomain.me → mydomain.rhcloud.com\n4. github page 要注意的事情，  \n你需要在你的github page 的repo root 加入一個名叫`CNAME`的檔案,\n檔案的內容很簡單, 只需要你的domain即可  \nex:\n        blog.mydomain.me  \n        mydomain.me\n\n## Bare CNAME\n大多數的時候, `CNAME` 的設定就夠了;不過對於我來說,  \n我會希望可以直接使用我的頂級domain,畢竟這樣網址可以更短一些,  \n`mydomain.me` 比 `www.mydomain.me` 更有感覺。\n\n這裡受限於google 的 Name servers , 頂級domain 必為Type`A`須綁定ip  \n這裡我們可以使用一個免費的服務[cloudflare](https://www.cloudflare.com/),來達成目的\n1. 註冊[cloudflare](https://www.cloudflare.com/)\n2. 登入後[add site](https://www.cloudflare.com/a/add-site),輸入你註冊的domain\nex:`mydomain`\n3. [cloudflare](https://www.cloudflare.com/) 會提供你至少兩組Name servers  \nex:  \n`carter.ns.cloudflare.com`  \n`tina.ns.cloudflare.com`\n4. 請先登入[google domain beta](https://atom.io/packages/atom-beautify)設定Name servers到[cloudflare](https://www.cloudflare.com/)\n5. 請依以下步驟設定\n  - \\*  → mydomain.me\n  - blog.mydomain.me → mydomain.github.io\n  - www.mydomain.me → mydomain.rhcloud.com\n6. 等待約數分鐘就ok啦\n\n## 結語\n前前後後查資料弄了一個禮拜，但是實際上設定大概1~2小時就搞定了。  \n對domain跟ip的相對關係與實務結合後更有體會了。\n\n歡迎指教討論。  \n(fin)\n","slug":"setting_DNS_with_google","published":1,"updated":"2016-12-04T17:22:31.218Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivycy0013yk55yoiblhib","content":"<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ol>\n<li>準備好你的google帳號。</li>\n<li>可以連到美國的VPN。<a href=\"https://atom.io/packages/atom-beautify\" target=\"_blank\" rel=\"external\">google domain beta</a> 台灣尚未開放</li>\n<li>準備一張信用卡，狠狠的刷下去(挑對domain其實很便宜啦)</li>\n<li>你的網站，什麼語言都可以，靜態的網頁也可以。<br>*這裡我事先準備好了兩個網站,<br>分別是用<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">github page</a> 與 <a href=\"https://nodejs.org\" target=\"_blank\" rel=\"external\">nodejs</a> 的 <a href=\"http://expressjs.com/\" target=\"_blank\" rel=\"external\">express</a>,實作有機會再作記錄。</li>\n</ol>\n<h2 id=\"設定domain\"><a href=\"#設定domain\" class=\"headerlink\" title=\"設定domain\"></a>設定domain</h2><ol>\n<li>github page 所建立的網站,會提供一組domain給你<br>ex:<code>mydomain.github.io</code></li>\n<li>openshift 建立的網站,一樣會提供一組domain給你<br>ex:<code>mydomain.rhcloud.com</code></li>\n<li>google domain 本身有提供 Name servers , 但是由於type<code>A</code>的domian,<br>必須指定公用ip(家中有裝hinet ADSL可以申請一組);但實際上我的兩個網站,並不需要我準備實體ip,<br>只需要使用 type <code>CNAME</code> 將我的subdomain指向原本服務的domain即可。<br>ex:  <ul>\n<li>blog.mydomain.me → mydomain.github.io</li>\n<li>www.mydomain.me → mydomain.rhcloud.com</li>\n</ul>\n</li>\n<li>github page 要注意的事情，<br>你需要在你的github page 的repo root 加入一個名叫<code>CNAME</code>的檔案,<br>檔案的內容很簡單, 只需要你的domain即可<br>ex:<pre><code>blog.mydomain.me  \nmydomain.me\n</code></pre></li>\n</ol>\n<h2 id=\"Bare-CNAME\"><a href=\"#Bare-CNAME\" class=\"headerlink\" title=\"Bare CNAME\"></a>Bare CNAME</h2><p>大多數的時候, <code>CNAME</code> 的設定就夠了;不過對於我來說,<br>我會希望可以直接使用我的頂級domain,畢竟這樣網址可以更短一些,<br><code>mydomain.me</code> 比 <code>www.mydomain.me</code> 更有感覺。</p>\n<p>這裡受限於google 的 Name servers , 頂級domain 必為Type<code>A</code>須綁定ip<br>這裡我們可以使用一個免費的服務<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a>,來達成目的</p>\n<ol>\n<li>註冊<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a></li>\n<li>登入後<a href=\"https://www.cloudflare.com/a/add-site\" target=\"_blank\" rel=\"external\">add site</a>,輸入你註冊的domain<br>ex:<code>mydomain</code></li>\n<li><a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a> 會提供你至少兩組Name servers<br>ex:<br><code>carter.ns.cloudflare.com</code><br><code>tina.ns.cloudflare.com</code></li>\n<li>請先登入<a href=\"https://atom.io/packages/atom-beautify\" target=\"_blank\" rel=\"external\">google domain beta</a>設定Name servers到<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a></li>\n<li>請依以下步驟設定<ul>\n<li>*  → mydomain.me</li>\n<li>blog.mydomain.me → mydomain.github.io</li>\n<li>www.mydomain.me → mydomain.rhcloud.com</li>\n</ul>\n</li>\n<li>等待約數分鐘就ok啦</li>\n</ol>\n<h2 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h2><p>前前後後查資料弄了一個禮拜，但是實際上設定大概1~2小時就搞定了。<br>對domain跟ip的相對關係與實務結合後更有體會了。</p>\n<p>歡迎指教討論。<br>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ol>\n<li>準備好你的google帳號。</li>\n<li>可以連到美國的VPN。<a href=\"https://atom.io/packages/atom-beautify\" target=\"_blank\" rel=\"external\">google domain beta</a> 台灣尚未開放</li>\n<li>準備一張信用卡，狠狠的刷下去(挑對domain其實很便宜啦)</li>\n<li>你的網站，什麼語言都可以，靜態的網頁也可以。<br>*這裡我事先準備好了兩個網站,<br>分別是用<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">github page</a> 與 <a href=\"https://nodejs.org\" target=\"_blank\" rel=\"external\">nodejs</a> 的 <a href=\"http://expressjs.com/\" target=\"_blank\" rel=\"external\">express</a>,實作有機會再作記錄。</li>\n</ol>\n<h2 id=\"設定domain\"><a href=\"#設定domain\" class=\"headerlink\" title=\"設定domain\"></a>設定domain</h2><ol>\n<li>github page 所建立的網站,會提供一組domain給你<br>ex:<code>mydomain.github.io</code></li>\n<li>openshift 建立的網站,一樣會提供一組domain給你<br>ex:<code>mydomain.rhcloud.com</code></li>\n<li>google domain 本身有提供 Name servers , 但是由於type<code>A</code>的domian,<br>必須指定公用ip(家中有裝hinet ADSL可以申請一組);但實際上我的兩個網站,並不需要我準備實體ip,<br>只需要使用 type <code>CNAME</code> 將我的subdomain指向原本服務的domain即可。<br>ex:  <ul>\n<li>blog.mydomain.me → mydomain.github.io</li>\n<li>www.mydomain.me → mydomain.rhcloud.com</li>\n</ul>\n</li>\n<li>github page 要注意的事情，<br>你需要在你的github page 的repo root 加入一個名叫<code>CNAME</code>的檔案,<br>檔案的內容很簡單, 只需要你的domain即可<br>ex:<pre><code>blog.mydomain.me  \nmydomain.me\n</code></pre></li>\n</ol>\n<h2 id=\"Bare-CNAME\"><a href=\"#Bare-CNAME\" class=\"headerlink\" title=\"Bare CNAME\"></a>Bare CNAME</h2><p>大多數的時候, <code>CNAME</code> 的設定就夠了;不過對於我來說,<br>我會希望可以直接使用我的頂級domain,畢竟這樣網址可以更短一些,<br><code>mydomain.me</code> 比 <code>www.mydomain.me</code> 更有感覺。</p>\n<p>這裡受限於google 的 Name servers , 頂級domain 必為Type<code>A</code>須綁定ip<br>這裡我們可以使用一個免費的服務<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a>,來達成目的</p>\n<ol>\n<li>註冊<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a></li>\n<li>登入後<a href=\"https://www.cloudflare.com/a/add-site\" target=\"_blank\" rel=\"external\">add site</a>,輸入你註冊的domain<br>ex:<code>mydomain</code></li>\n<li><a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a> 會提供你至少兩組Name servers<br>ex:<br><code>carter.ns.cloudflare.com</code><br><code>tina.ns.cloudflare.com</code></li>\n<li>請先登入<a href=\"https://atom.io/packages/atom-beautify\" target=\"_blank\" rel=\"external\">google domain beta</a>設定Name servers到<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a></li>\n<li>請依以下步驟設定<ul>\n<li>*  → mydomain.me</li>\n<li>blog.mydomain.me → mydomain.github.io</li>\n<li>www.mydomain.me → mydomain.rhcloud.com</li>\n</ul>\n</li>\n<li>等待約數分鐘就ok啦</li>\n</ol>\n<h2 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h2><p>前前後後查資料弄了一個禮拜，但是實際上設定大概1~2小時就搞定了。<br>對domain跟ip的相對關係與實務結合後更有體會了。</p>\n<p>歡迎指教討論。<br>(fin)</p>\n"},{"title":"SQL Compatibility Level 對MsSQL時間查詢的影響","date":"2017-09-18T03:30:13.000Z","_content":"\n## 大綱\n\n這次透過Entity Framework(EF5)作了一個簡單的資料庫更新,  \n恰巧的是這次更新的Table因為某些需求,使用 datetime 作為 Key 值.  \n進而引發一連串的錯誤, 最後才找到 SQL Compatibility Level 對 MsSQL 時間查詢影響. \n\n\n### 正式環境 SQL 版本 13.0.4422.0\n\n### 程式碼\n```csharp\npublic void UpdateBatchUploadData(BatchUploadDataEntity batchUploadDataEntity)\n{\n    using (WebStoreDBEntitiesV2 context = this.LifetimeScope.Resolve<WebStoreDBEntitiesV2>())\n    {\n        var item = (from batchUploadData in context.BatchUploadData.Valids()\n                    where batchUploadData.BatchUploadData_Id == batchUploadDataEntity.BatchUploadData_Id\n                    select batchUploadData).FirstOrDefault();\n\n        this.MapBatchUploadData(batchUploadDataEntity, item);\n\n        context.SaveChanges();\n    }\n}\n```\n\n如上面程式所示, `item` 是透過 Key 值 `BatchUploadData_Id` 取回來的物件.  \n而 `MapBatchUploadData` 是一段簡單的程式碼,  \n單純的將 `batchUploadDataEntity` 的值 mapping 到 item  \n再呼叫 SaveChanges , 卻引發了 [dbupdateconcurrencyexception](https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.dbupdateconcurrencyexception(v=vs.103).aspx)\n\n\n### 錯誤畫面\n![](https://i.imgur.com/8kBIYRr.jpg)\n\n### 錯誤訊息\n```\n存放區更新、插入或刪除陳述式影響到非預期數目的資料列 (0)。\n這些實體載入之後可能被修改或刪除了。請重新整理 ObjectStateManager 實體。\n```\n\n\n這一段訊息的意思就是: Entity Framework 預期更新了`0`筆資料，與它所預期的不符, 所以拋出錯誤。\n\n\n### 原因\n\n透過用**Sql Profiler**我們錄製到了以下的SQL\n```sql\nexec sp_executesql N'update [dbo].[BatchUploadData]\nset [BatchUploadData_StatusDef] = @0, [BatchUploadData_UpdatedTimes] = @1, [BatchUploadData_UpdatedDateTime] = @2\nwhere (([BatchUploadData_Id] = @3) and ([BatchUploadData_CreatedDateTime] = @4))\nselect [BatchUploadData_Rowversion]\nfrom [dbo].[BatchUploadData]\nwhere @@ROWCOUNT > 0 and [BatchUploadData_Id] = @3 and [BatchUploadData_CreatedDateTime] = @4',N'@0 varchar(30),@1 tinyint,@2 datetime2(7),@3 bigint,@4 datetime2(7)',@0='ProcessFailed',@1=1,@2='2017-09-16 11:29:35.3720061',@3=52,@4='2017-09-05 18:53:36.3530000'\n```\n\n請注意到 **@4 datetime2(7) ... @4='2017-09-05 18:53:36.3530000'**  \n如果將 `datetime2(7)` 改為 `datetime`或是將查詢語句改為 `@4='2017-09-05 18:53:36.353` 就能正確更新資料.  \n\n![](https://i.imgur.com/8pGTYL4.gif)\n\n### 本機實測 (SQL 版本 12.0.4459.0)\n透過本機寫了一小段的SQL作測試,  \n![](https://i.imgur.com/iJntV1i.gif)  \n**竟然不會有問題!!!**  \n\n這跟 SQL Compatibility Level 有關,  \nmssql 2014 預設是 120, 2016 預設是130,  \nDatetime2 在 120 跟 130 的結果會不一樣.  \n\n### 解決方法\n\n主要的查詢與更新 SQL 是 Entity Framework 產生的,  \n所以我無法透過修改 SQL 的方式解決這個問題,  \n而正式環境的 SQL Compatibility Level 調整將會牽一髮動全身  \n且基於版本演進, 往新的版本靠攏是合理的選擇  \n暫時的解法是透過修改 edmx ,  \n不讓 datetime 作為整個 table 的 Key值.  \n較好的解法是升級 Entity Framework  \n透過 Entity Framework 的機制, 指定查詢時間的精準度.  \n實作的部份未來再補上. \n\n\n## 參考資料\n- [ALTER DATABASE (Transact-SQL) Compatibility](https://docs.microsoft.com/en-us/sql/t-sql/statements/alter-database-transact-sql-compatibility-level)\n- [Change in datetime2 implementation in SQL Server 2016](https://social.msdn.microsoft.com/Forums/silverlight/en-US/de5dbf3e-8c95-40f4-9e31-b71f1f31983d/change-in-datetime2-implementation-in-sql-server-2016?forum=transactsql)\n- [檢視或變更資料庫的相容性層級](https://docs.microsoft.com/zh-tw/sql/relational-databases/databases/view-or-change-the-compatibility-level-of-a-database)\n\n(fin)","source":"_posts/sql_compatibility_level_with_datetime2.md","raw":"---\ntitle: \"SQL Compatibility Level 對MsSQL時間查詢的影響\"\ndate: 2017/09/18 11:30:13\ntag:\n  - Entity Framework\n  - Database\n  - MsSQL\n  - 記錄\n---\n\n## 大綱\n\n這次透過Entity Framework(EF5)作了一個簡單的資料庫更新,  \n恰巧的是這次更新的Table因為某些需求,使用 datetime 作為 Key 值.  \n進而引發一連串的錯誤, 最後才找到 SQL Compatibility Level 對 MsSQL 時間查詢影響. \n\n\n### 正式環境 SQL 版本 13.0.4422.0\n\n### 程式碼\n```csharp\npublic void UpdateBatchUploadData(BatchUploadDataEntity batchUploadDataEntity)\n{\n    using (WebStoreDBEntitiesV2 context = this.LifetimeScope.Resolve<WebStoreDBEntitiesV2>())\n    {\n        var item = (from batchUploadData in context.BatchUploadData.Valids()\n                    where batchUploadData.BatchUploadData_Id == batchUploadDataEntity.BatchUploadData_Id\n                    select batchUploadData).FirstOrDefault();\n\n        this.MapBatchUploadData(batchUploadDataEntity, item);\n\n        context.SaveChanges();\n    }\n}\n```\n\n如上面程式所示, `item` 是透過 Key 值 `BatchUploadData_Id` 取回來的物件.  \n而 `MapBatchUploadData` 是一段簡單的程式碼,  \n單純的將 `batchUploadDataEntity` 的值 mapping 到 item  \n再呼叫 SaveChanges , 卻引發了 [dbupdateconcurrencyexception](https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.dbupdateconcurrencyexception(v=vs.103).aspx)\n\n\n### 錯誤畫面\n![](https://i.imgur.com/8kBIYRr.jpg)\n\n### 錯誤訊息\n```\n存放區更新、插入或刪除陳述式影響到非預期數目的資料列 (0)。\n這些實體載入之後可能被修改或刪除了。請重新整理 ObjectStateManager 實體。\n```\n\n\n這一段訊息的意思就是: Entity Framework 預期更新了`0`筆資料，與它所預期的不符, 所以拋出錯誤。\n\n\n### 原因\n\n透過用**Sql Profiler**我們錄製到了以下的SQL\n```sql\nexec sp_executesql N'update [dbo].[BatchUploadData]\nset [BatchUploadData_StatusDef] = @0, [BatchUploadData_UpdatedTimes] = @1, [BatchUploadData_UpdatedDateTime] = @2\nwhere (([BatchUploadData_Id] = @3) and ([BatchUploadData_CreatedDateTime] = @4))\nselect [BatchUploadData_Rowversion]\nfrom [dbo].[BatchUploadData]\nwhere @@ROWCOUNT > 0 and [BatchUploadData_Id] = @3 and [BatchUploadData_CreatedDateTime] = @4',N'@0 varchar(30),@1 tinyint,@2 datetime2(7),@3 bigint,@4 datetime2(7)',@0='ProcessFailed',@1=1,@2='2017-09-16 11:29:35.3720061',@3=52,@4='2017-09-05 18:53:36.3530000'\n```\n\n請注意到 **@4 datetime2(7) ... @4='2017-09-05 18:53:36.3530000'**  \n如果將 `datetime2(7)` 改為 `datetime`或是將查詢語句改為 `@4='2017-09-05 18:53:36.353` 就能正確更新資料.  \n\n![](https://i.imgur.com/8pGTYL4.gif)\n\n### 本機實測 (SQL 版本 12.0.4459.0)\n透過本機寫了一小段的SQL作測試,  \n![](https://i.imgur.com/iJntV1i.gif)  \n**竟然不會有問題!!!**  \n\n這跟 SQL Compatibility Level 有關,  \nmssql 2014 預設是 120, 2016 預設是130,  \nDatetime2 在 120 跟 130 的結果會不一樣.  \n\n### 解決方法\n\n主要的查詢與更新 SQL 是 Entity Framework 產生的,  \n所以我無法透過修改 SQL 的方式解決這個問題,  \n而正式環境的 SQL Compatibility Level 調整將會牽一髮動全身  \n且基於版本演進, 往新的版本靠攏是合理的選擇  \n暫時的解法是透過修改 edmx ,  \n不讓 datetime 作為整個 table 的 Key值.  \n較好的解法是升級 Entity Framework  \n透過 Entity Framework 的機制, 指定查詢時間的精準度.  \n實作的部份未來再補上. \n\n\n## 參考資料\n- [ALTER DATABASE (Transact-SQL) Compatibility](https://docs.microsoft.com/en-us/sql/t-sql/statements/alter-database-transact-sql-compatibility-level)\n- [Change in datetime2 implementation in SQL Server 2016](https://social.msdn.microsoft.com/Forums/silverlight/en-US/de5dbf3e-8c95-40f4-9e31-b71f1f31983d/change-in-datetime2-implementation-in-sql-server-2016?forum=transactsql)\n- [檢視或變更資料庫的相容性層級](https://docs.microsoft.com/zh-tw/sql/relational-databases/databases/view-or-change-the-compatibility-level-of-a-database)\n\n(fin)","slug":"sql_compatibility_level_with_datetime2","published":1,"updated":"2018-01-30T16:29:44.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyd00015yk55nxsbvc7g","content":"<h2 id=\"大綱\"><a href=\"#大綱\" class=\"headerlink\" title=\"大綱\"></a>大綱</h2><p>這次透過Entity Framework(EF5)作了一個簡單的資料庫更新,<br>恰巧的是這次更新的Table因為某些需求,使用 datetime 作為 Key 值.<br>進而引發一連串的錯誤, 最後才找到 SQL Compatibility Level 對 MsSQL 時間查詢影響. </p>\n<h3 id=\"正式環境-SQL-版本-13-0-4422-0\"><a href=\"#正式環境-SQL-版本-13-0-4422-0\" class=\"headerlink\" title=\"正式環境 SQL 版本 13.0.4422.0\"></a>正式環境 SQL 版本 13.0.4422.0</h3><h3 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">UpdateBatchUploadData</span>(<span class=\"params\">BatchUploadDataEntity batchUploadDataEntity</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">using</span> (WebStoreDBEntitiesV2 context = <span class=\"keyword\">this</span>.LifetimeScope.Resolve&lt;WebStoreDBEntitiesV2&gt;())</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> item = (<span class=\"keyword\">from</span> batchUploadData <span class=\"keyword\">in</span> context.BatchUploadData.Valids()</div><div class=\"line\">                    <span class=\"keyword\">where</span> batchUploadData.BatchUploadData_Id == batchUploadDataEntity.BatchUploadData_Id</div><div class=\"line\">                    <span class=\"keyword\">select</span> batchUploadData).FirstOrDefault();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.MapBatchUploadData(batchUploadDataEntity, item);</div><div class=\"line\"></div><div class=\"line\">        context.SaveChanges();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如上面程式所示, <code>item</code> 是透過 Key 值 <code>BatchUploadData_Id</code> 取回來的物件.<br>而 <code>MapBatchUploadData</code> 是一段簡單的程式碼,<br>單純的將 <code>batchUploadDataEntity</code> 的值 mapping 到 item<br>再呼叫 SaveChanges , 卻引發了 <a href=\"https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.dbupdateconcurrencyexception(v=vs.103\" target=\"_blank\" rel=\"external\">dbupdateconcurrencyexception</a>.aspx)</p>\n<h3 id=\"錯誤畫面\"><a href=\"#錯誤畫面\" class=\"headerlink\" title=\"錯誤畫面\"></a>錯誤畫面</h3><p><img src=\"https://i.imgur.com/8kBIYRr.jpg\" alt=\"\"></p>\n<h3 id=\"錯誤訊息\"><a href=\"#錯誤訊息\" class=\"headerlink\" title=\"錯誤訊息\"></a>錯誤訊息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">存放區更新、插入或刪除陳述式影響到非預期數目的資料列 (0)。</div><div class=\"line\">這些實體載入之後可能被修改或刪除了。請重新整理 ObjectStateManager 實體。</div></pre></td></tr></table></figure>\n<p>這一段訊息的意思就是: Entity Framework 預期更新了<code>0</code>筆資料，與它所預期的不符, 所以拋出錯誤。</p>\n<h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p>透過用<strong>Sql Profiler</strong>我們錄製到了以下的SQL<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">exec sp_executesql N'<span class=\"keyword\">update</span> [dbo].[BatchUploadData]</div><div class=\"line\"><span class=\"keyword\">set</span> [BatchUploadData_StatusDef] = @<span class=\"number\">0</span>, [BatchUploadData_UpdatedTimes] = @<span class=\"number\">1</span>, [BatchUploadData_UpdatedDateTime] = @<span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">where</span> (([BatchUploadData_Id] = @<span class=\"number\">3</span>) <span class=\"keyword\">and</span> ([BatchUploadData_CreatedDateTime] = @<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"keyword\">select</span> [BatchUploadData_Rowversion]</div><div class=\"line\"><span class=\"keyword\">from</span> [dbo].[BatchUploadData]</div><div class=\"line\"><span class=\"keyword\">where</span> @@ROWCOUNT &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> [BatchUploadData_Id] = @<span class=\"number\">3</span> <span class=\"keyword\">and</span> [BatchUploadData_CreatedDateTime] = @<span class=\"number\">4</span><span class=\"string\">',N'</span>@<span class=\"number\">0</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">30</span>),@<span class=\"number\">1</span> tinyint,@<span class=\"number\">2</span> datetime2(<span class=\"number\">7</span>),@<span class=\"number\">3</span> <span class=\"built_in\">bigint</span>,@<span class=\"number\">4</span> datetime2(<span class=\"number\">7</span>)<span class=\"string\">',@0='</span>ProcessFailed<span class=\"string\">',@1=1,@2='</span><span class=\"number\">2017</span><span class=\"number\">-09</span><span class=\"number\">-16</span> <span class=\"number\">11</span>:<span class=\"number\">29</span>:<span class=\"number\">35.3720061</span><span class=\"string\">',@3=52,@4='</span><span class=\"number\">2017</span><span class=\"number\">-09</span><span class=\"number\">-05</span> <span class=\"number\">18</span>:<span class=\"number\">53</span>:<span class=\"number\">36.3530000</span><span class=\"string\">'</span></div></pre></td></tr></table></figure></p>\n<p>請注意到 <strong>@4 datetime2(7) … @4=’2017-09-05 18:53:36.3530000’</strong><br>如果將 <code>datetime2(7)</code> 改為 <code>datetime</code>或是將查詢語句改為 <code>@4=&#39;2017-09-05 18:53:36.353</code> 就能正確更新資料.  </p>\n<p><img src=\"https://i.imgur.com/8pGTYL4.gif\" alt=\"\"></p>\n<h3 id=\"本機實測-SQL-版本-12-0-4459-0\"><a href=\"#本機實測-SQL-版本-12-0-4459-0\" class=\"headerlink\" title=\"本機實測 (SQL 版本 12.0.4459.0)\"></a>本機實測 (SQL 版本 12.0.4459.0)</h3><p>透過本機寫了一小段的SQL作測試,<br><img src=\"https://i.imgur.com/iJntV1i.gif\" alt=\"\"><br><strong>竟然不會有問題!!!</strong>  </p>\n<p>這跟 SQL Compatibility Level 有關,<br>mssql 2014 預設是 120, 2016 預設是130,<br>Datetime2 在 120 跟 130 的結果會不一樣.  </p>\n<h3 id=\"解決方法\"><a href=\"#解決方法\" class=\"headerlink\" title=\"解決方法\"></a>解決方法</h3><p>主要的查詢與更新 SQL 是 Entity Framework 產生的,<br>所以我無法透過修改 SQL 的方式解決這個問題,<br>而正式環境的 SQL Compatibility Level 調整將會牽一髮動全身<br>且基於版本演進, 往新的版本靠攏是合理的選擇<br>暫時的解法是透過修改 edmx ,<br>不讓 datetime 作為整個 table 的 Key值.<br>較好的解法是升級 Entity Framework<br>透過 Entity Framework 的機制, 指定查詢時間的精準度.<br>實作的部份未來再補上. </p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://docs.microsoft.com/en-us/sql/t-sql/statements/alter-database-transact-sql-compatibility-level\" target=\"_blank\" rel=\"external\">ALTER DATABASE (Transact-SQL) Compatibility</a></li>\n<li><a href=\"https://social.msdn.microsoft.com/Forums/silverlight/en-US/de5dbf3e-8c95-40f4-9e31-b71f1f31983d/change-in-datetime2-implementation-in-sql-server-2016?forum=transactsql\" target=\"_blank\" rel=\"external\">Change in datetime2 implementation in SQL Server 2016</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-tw/sql/relational-databases/databases/view-or-change-the-compatibility-level-of-a-database\" target=\"_blank\" rel=\"external\">檢視或變更資料庫的相容性層級</a></li>\n</ul>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"大綱\"><a href=\"#大綱\" class=\"headerlink\" title=\"大綱\"></a>大綱</h2><p>這次透過Entity Framework(EF5)作了一個簡單的資料庫更新,<br>恰巧的是這次更新的Table因為某些需求,使用 datetime 作為 Key 值.<br>進而引發一連串的錯誤, 最後才找到 SQL Compatibility Level 對 MsSQL 時間查詢影響. </p>\n<h3 id=\"正式環境-SQL-版本-13-0-4422-0\"><a href=\"#正式環境-SQL-版本-13-0-4422-0\" class=\"headerlink\" title=\"正式環境 SQL 版本 13.0.4422.0\"></a>正式環境 SQL 版本 13.0.4422.0</h3><h3 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">UpdateBatchUploadData</span>(<span class=\"params\">BatchUploadDataEntity batchUploadDataEntity</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">using</span> (WebStoreDBEntitiesV2 context = <span class=\"keyword\">this</span>.LifetimeScope.Resolve&lt;WebStoreDBEntitiesV2&gt;())</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> item = (<span class=\"keyword\">from</span> batchUploadData <span class=\"keyword\">in</span> context.BatchUploadData.Valids()</div><div class=\"line\">                    <span class=\"keyword\">where</span> batchUploadData.BatchUploadData_Id == batchUploadDataEntity.BatchUploadData_Id</div><div class=\"line\">                    <span class=\"keyword\">select</span> batchUploadData).FirstOrDefault();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.MapBatchUploadData(batchUploadDataEntity, item);</div><div class=\"line\"></div><div class=\"line\">        context.SaveChanges();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如上面程式所示, <code>item</code> 是透過 Key 值 <code>BatchUploadData_Id</code> 取回來的物件.<br>而 <code>MapBatchUploadData</code> 是一段簡單的程式碼,<br>單純的將 <code>batchUploadDataEntity</code> 的值 mapping 到 item<br>再呼叫 SaveChanges , 卻引發了 <a href=\"https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.dbupdateconcurrencyexception(v=vs.103\" target=\"_blank\" rel=\"external\">dbupdateconcurrencyexception</a>.aspx)</p>\n<h3 id=\"錯誤畫面\"><a href=\"#錯誤畫面\" class=\"headerlink\" title=\"錯誤畫面\"></a>錯誤畫面</h3><p><img src=\"https://i.imgur.com/8kBIYRr.jpg\" alt=\"\"></p>\n<h3 id=\"錯誤訊息\"><a href=\"#錯誤訊息\" class=\"headerlink\" title=\"錯誤訊息\"></a>錯誤訊息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">存放區更新、插入或刪除陳述式影響到非預期數目的資料列 (0)。</div><div class=\"line\">這些實體載入之後可能被修改或刪除了。請重新整理 ObjectStateManager 實體。</div></pre></td></tr></table></figure>\n<p>這一段訊息的意思就是: Entity Framework 預期更新了<code>0</code>筆資料，與它所預期的不符, 所以拋出錯誤。</p>\n<h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p>透過用<strong>Sql Profiler</strong>我們錄製到了以下的SQL<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">exec sp_executesql N'<span class=\"keyword\">update</span> [dbo].[BatchUploadData]</div><div class=\"line\"><span class=\"keyword\">set</span> [BatchUploadData_StatusDef] = @<span class=\"number\">0</span>, [BatchUploadData_UpdatedTimes] = @<span class=\"number\">1</span>, [BatchUploadData_UpdatedDateTime] = @<span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">where</span> (([BatchUploadData_Id] = @<span class=\"number\">3</span>) <span class=\"keyword\">and</span> ([BatchUploadData_CreatedDateTime] = @<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"keyword\">select</span> [BatchUploadData_Rowversion]</div><div class=\"line\"><span class=\"keyword\">from</span> [dbo].[BatchUploadData]</div><div class=\"line\"><span class=\"keyword\">where</span> @@ROWCOUNT &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> [BatchUploadData_Id] = @<span class=\"number\">3</span> <span class=\"keyword\">and</span> [BatchUploadData_CreatedDateTime] = @<span class=\"number\">4</span><span class=\"string\">',N'</span>@<span class=\"number\">0</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">30</span>),@<span class=\"number\">1</span> tinyint,@<span class=\"number\">2</span> datetime2(<span class=\"number\">7</span>),@<span class=\"number\">3</span> <span class=\"built_in\">bigint</span>,@<span class=\"number\">4</span> datetime2(<span class=\"number\">7</span>)<span class=\"string\">',@0='</span>ProcessFailed<span class=\"string\">',@1=1,@2='</span><span class=\"number\">2017</span><span class=\"number\">-09</span><span class=\"number\">-16</span> <span class=\"number\">11</span>:<span class=\"number\">29</span>:<span class=\"number\">35.3720061</span><span class=\"string\">',@3=52,@4='</span><span class=\"number\">2017</span><span class=\"number\">-09</span><span class=\"number\">-05</span> <span class=\"number\">18</span>:<span class=\"number\">53</span>:<span class=\"number\">36.3530000</span><span class=\"string\">'</span></div></pre></td></tr></table></figure></p>\n<p>請注意到 <strong>@4 datetime2(7) … @4=’2017-09-05 18:53:36.3530000’</strong><br>如果將 <code>datetime2(7)</code> 改為 <code>datetime</code>或是將查詢語句改為 <code>@4=&#39;2017-09-05 18:53:36.353</code> 就能正確更新資料.  </p>\n<p><img src=\"https://i.imgur.com/8pGTYL4.gif\" alt=\"\"></p>\n<h3 id=\"本機實測-SQL-版本-12-0-4459-0\"><a href=\"#本機實測-SQL-版本-12-0-4459-0\" class=\"headerlink\" title=\"本機實測 (SQL 版本 12.0.4459.0)\"></a>本機實測 (SQL 版本 12.0.4459.0)</h3><p>透過本機寫了一小段的SQL作測試,<br><img src=\"https://i.imgur.com/iJntV1i.gif\" alt=\"\"><br><strong>竟然不會有問題!!!</strong>  </p>\n<p>這跟 SQL Compatibility Level 有關,<br>mssql 2014 預設是 120, 2016 預設是130,<br>Datetime2 在 120 跟 130 的結果會不一樣.  </p>\n<h3 id=\"解決方法\"><a href=\"#解決方法\" class=\"headerlink\" title=\"解決方法\"></a>解決方法</h3><p>主要的查詢與更新 SQL 是 Entity Framework 產生的,<br>所以我無法透過修改 SQL 的方式解決這個問題,<br>而正式環境的 SQL Compatibility Level 調整將會牽一髮動全身<br>且基於版本演進, 往新的版本靠攏是合理的選擇<br>暫時的解法是透過修改 edmx ,<br>不讓 datetime 作為整個 table 的 Key值.<br>較好的解法是升級 Entity Framework<br>透過 Entity Framework 的機制, 指定查詢時間的精準度.<br>實作的部份未來再補上. </p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://docs.microsoft.com/en-us/sql/t-sql/statements/alter-database-transact-sql-compatibility-level\" target=\"_blank\" rel=\"external\">ALTER DATABASE (Transact-SQL) Compatibility</a></li>\n<li><a href=\"https://social.msdn.microsoft.com/Forums/silverlight/en-US/de5dbf3e-8c95-40f4-9e31-b71f1f31983d/change-in-datetime2-implementation-in-sql-server-2016?forum=transactsql\" target=\"_blank\" rel=\"external\">Change in datetime2 implementation in SQL Server 2016</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-tw/sql/relational-databases/databases/view-or-change-the-compatibility-level-of-a-database\" target=\"_blank\" rel=\"external\">檢視或變更資料庫的相容性層級</a></li>\n</ul>\n<p>(fin)</p>\n"},{"title":"[活動筆記]測試即學習","date":"2017-05-19T06:03:01.000Z","_content":"## 應該知道的事:\n- 報名資訊(已結束)\n[Agile Meetup 2017/05 (2): 測試即學習](http://www.accupass.com/go/testingislearning)\n\n- 這裡不講TDD,沒有程式 \n\n## 流程\n讀這篇文章的人，或許可以找一位朋友來作相同的流程練習\n\n1. 一張不明所以的圖片當作受測對象，任意發散的詢問測試問題\n2. 分類所有的問題為WHY、HOW、WHAT\n3. 畫出Golden Circle，核心是WHY\n4. 透過WHY揭露受測對象圖片的本質(TAROT)，收斂測試範圍\n5. 重新詢問測試問題，儘可能的發散\n6. 所有人交流自已看到可能的測試問題\n7. 重複5~6步，有意識的去覺察自已的感覺\n\t- 別人注意到的問題你為什麼沒發現？\n\t- 別人如何發現問題？\n\t- 你有沒有辦法發現相同的問題(殊途同歸)？\n\n\n## 測試的概念\n\t\n1. 受測者\n2. 問題\n3. 答案\n4. 預期的結果(test oracles)\n\n![](https://i.imgur.com/Qy8F4Vw.png)\n\n## 問題的核心 Know Your Mission(KNW)\n\n1. WHY ? \n\t本次分享的重點，如何了解、探索、學習產品的知識，給客戶的價值等… 。\n2. HOW ? => 如何作到？\n3. WHAT ? => 產生測試項目\n4. TEST ? => 執行測試，回饋並且回到第一步Loop。\n\n## 應該觀注的資訊 information is learning\n1. Customer\n2. Product\n3. Project\n4. Mission\n\n透過WHY的詰問，了解你的任務(Know Your Mission) \n學習到受測對象的本質，排除不必要的測試發想。\n收斂了測試範圍，決定了測試方向。\n\n## 探索測試\n1. 儘可能的發散\n2. 摹仿別人看事情的角度\n3. 有意識的學習(mindful learning)\t\n\t- 記錄\n\t- 總結\n\t- 歸納問題的核心\n\t- 給它起一個名字(沒有專有名詞的話)\n\t- 有意識的逃離第一印象\n\t- 小心不經意的盲區(inattentional blindness)\n\t- 數量 X 練習 X 思考 X 學習 = 提昇\n\n## 回饋\n1. 刻意練習 vs 有意識的練習，類似的東西，但是沒有具體的方法\n2. 課程中提到的[影片](https://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action?language=zh-tw)\n\n\n\n\n(fin)","source":"_posts/testingislearning.md","raw":"---\ntitle: \"[活動筆記]測試即學習\"\ndate: 2017/05/19 14:03:01\ntag:\n  - Testing\n---\n## 應該知道的事:\n- 報名資訊(已結束)\n[Agile Meetup 2017/05 (2): 測試即學習](http://www.accupass.com/go/testingislearning)\n\n- 這裡不講TDD,沒有程式 \n\n## 流程\n讀這篇文章的人，或許可以找一位朋友來作相同的流程練習\n\n1. 一張不明所以的圖片當作受測對象，任意發散的詢問測試問題\n2. 分類所有的問題為WHY、HOW、WHAT\n3. 畫出Golden Circle，核心是WHY\n4. 透過WHY揭露受測對象圖片的本質(TAROT)，收斂測試範圍\n5. 重新詢問測試問題，儘可能的發散\n6. 所有人交流自已看到可能的測試問題\n7. 重複5~6步，有意識的去覺察自已的感覺\n\t- 別人注意到的問題你為什麼沒發現？\n\t- 別人如何發現問題？\n\t- 你有沒有辦法發現相同的問題(殊途同歸)？\n\n\n## 測試的概念\n\t\n1. 受測者\n2. 問題\n3. 答案\n4. 預期的結果(test oracles)\n\n![](https://i.imgur.com/Qy8F4Vw.png)\n\n## 問題的核心 Know Your Mission(KNW)\n\n1. WHY ? \n\t本次分享的重點，如何了解、探索、學習產品的知識，給客戶的價值等… 。\n2. HOW ? => 如何作到？\n3. WHAT ? => 產生測試項目\n4. TEST ? => 執行測試，回饋並且回到第一步Loop。\n\n## 應該觀注的資訊 information is learning\n1. Customer\n2. Product\n3. Project\n4. Mission\n\n透過WHY的詰問，了解你的任務(Know Your Mission) \n學習到受測對象的本質，排除不必要的測試發想。\n收斂了測試範圍，決定了測試方向。\n\n## 探索測試\n1. 儘可能的發散\n2. 摹仿別人看事情的角度\n3. 有意識的學習(mindful learning)\t\n\t- 記錄\n\t- 總結\n\t- 歸納問題的核心\n\t- 給它起一個名字(沒有專有名詞的話)\n\t- 有意識的逃離第一印象\n\t- 小心不經意的盲區(inattentional blindness)\n\t- 數量 X 練習 X 思考 X 學習 = 提昇\n\n## 回饋\n1. 刻意練習 vs 有意識的練習，類似的東西，但是沒有具體的方法\n2. 課程中提到的[影片](https://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action?language=zh-tw)\n\n\n\n\n(fin)","slug":"testingislearning","published":1,"updated":"2017-07-15T16:28:11.468Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyd20018yk55z3hyx567","content":"<h2 id=\"應該知道的事\"><a href=\"#應該知道的事\" class=\"headerlink\" title=\"應該知道的事:\"></a>應該知道的事:</h2><ul>\n<li><p>報名資訊(已結束)<br><a href=\"http://www.accupass.com/go/testingislearning\" target=\"_blank\" rel=\"external\">Agile Meetup 2017/05 (2): 測試即學習</a></p>\n</li>\n<li><p>這裡不講TDD,沒有程式 </p>\n</li>\n</ul>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><p>讀這篇文章的人，或許可以找一位朋友來作相同的流程練習</p>\n<ol>\n<li>一張不明所以的圖片當作受測對象，任意發散的詢問測試問題</li>\n<li>分類所有的問題為WHY、HOW、WHAT</li>\n<li>畫出Golden Circle，核心是WHY</li>\n<li>透過WHY揭露受測對象圖片的本質(TAROT)，收斂測試範圍</li>\n<li>重新詢問測試問題，儘可能的發散</li>\n<li>所有人交流自已看到可能的測試問題</li>\n<li>重複5~6步，有意識的去覺察自已的感覺<ul>\n<li>別人注意到的問題你為什麼沒發現？</li>\n<li>別人如何發現問題？</li>\n<li>你有沒有辦法發現相同的問題(殊途同歸)？</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"測試的概念\"><a href=\"#測試的概念\" class=\"headerlink\" title=\"測試的概念\"></a>測試的概念</h2><ol>\n<li>受測者</li>\n<li>問題</li>\n<li>答案</li>\n<li>預期的結果(test oracles)</li>\n</ol>\n<p><img src=\"https://i.imgur.com/Qy8F4Vw.png\" alt=\"\"></p>\n<h2 id=\"問題的核心-Know-Your-Mission-KNW\"><a href=\"#問題的核心-Know-Your-Mission-KNW\" class=\"headerlink\" title=\"問題的核心 Know Your Mission(KNW)\"></a>問題的核心 Know Your Mission(KNW)</h2><ol>\n<li>WHY ?<br> 本次分享的重點，如何了解、探索、學習產品的知識，給客戶的價值等… 。</li>\n<li>HOW ? =&gt; 如何作到？</li>\n<li>WHAT ? =&gt; 產生測試項目</li>\n<li>TEST ? =&gt; 執行測試，回饋並且回到第一步Loop。</li>\n</ol>\n<h2 id=\"應該觀注的資訊-information-is-learning\"><a href=\"#應該觀注的資訊-information-is-learning\" class=\"headerlink\" title=\"應該觀注的資訊 information is learning\"></a>應該觀注的資訊 information is learning</h2><ol>\n<li>Customer</li>\n<li>Product</li>\n<li>Project</li>\n<li>Mission</li>\n</ol>\n<p>透過WHY的詰問，了解你的任務(Know Your Mission)<br>學習到受測對象的本質，排除不必要的測試發想。<br>收斂了測試範圍，決定了測試方向。</p>\n<h2 id=\"探索測試\"><a href=\"#探索測試\" class=\"headerlink\" title=\"探索測試\"></a>探索測試</h2><ol>\n<li>儘可能的發散</li>\n<li>摹仿別人看事情的角度</li>\n<li>有意識的學習(mindful learning)    <ul>\n<li>記錄</li>\n<li>總結</li>\n<li>歸納問題的核心</li>\n<li>給它起一個名字(沒有專有名詞的話)</li>\n<li>有意識的逃離第一印象</li>\n<li>小心不經意的盲區(inattentional blindness)</li>\n<li>數量 X 練習 X 思考 X 學習 = 提昇</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"回饋\"><a href=\"#回饋\" class=\"headerlink\" title=\"回饋\"></a>回饋</h2><ol>\n<li>刻意練習 vs 有意識的練習，類似的東西，但是沒有具體的方法</li>\n<li>課程中提到的<a href=\"https://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action?language=zh-tw\" target=\"_blank\" rel=\"external\">影片</a></li>\n</ol>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"應該知道的事\"><a href=\"#應該知道的事\" class=\"headerlink\" title=\"應該知道的事:\"></a>應該知道的事:</h2><ul>\n<li><p>報名資訊(已結束)<br><a href=\"http://www.accupass.com/go/testingislearning\" target=\"_blank\" rel=\"external\">Agile Meetup 2017/05 (2): 測試即學習</a></p>\n</li>\n<li><p>這裡不講TDD,沒有程式 </p>\n</li>\n</ul>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><p>讀這篇文章的人，或許可以找一位朋友來作相同的流程練習</p>\n<ol>\n<li>一張不明所以的圖片當作受測對象，任意發散的詢問測試問題</li>\n<li>分類所有的問題為WHY、HOW、WHAT</li>\n<li>畫出Golden Circle，核心是WHY</li>\n<li>透過WHY揭露受測對象圖片的本質(TAROT)，收斂測試範圍</li>\n<li>重新詢問測試問題，儘可能的發散</li>\n<li>所有人交流自已看到可能的測試問題</li>\n<li>重複5~6步，有意識的去覺察自已的感覺<ul>\n<li>別人注意到的問題你為什麼沒發現？</li>\n<li>別人如何發現問題？</li>\n<li>你有沒有辦法發現相同的問題(殊途同歸)？</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"測試的概念\"><a href=\"#測試的概念\" class=\"headerlink\" title=\"測試的概念\"></a>測試的概念</h2><ol>\n<li>受測者</li>\n<li>問題</li>\n<li>答案</li>\n<li>預期的結果(test oracles)</li>\n</ol>\n<p><img src=\"https://i.imgur.com/Qy8F4Vw.png\" alt=\"\"></p>\n<h2 id=\"問題的核心-Know-Your-Mission-KNW\"><a href=\"#問題的核心-Know-Your-Mission-KNW\" class=\"headerlink\" title=\"問題的核心 Know Your Mission(KNW)\"></a>問題的核心 Know Your Mission(KNW)</h2><ol>\n<li>WHY ?<br> 本次分享的重點，如何了解、探索、學習產品的知識，給客戶的價值等… 。</li>\n<li>HOW ? =&gt; 如何作到？</li>\n<li>WHAT ? =&gt; 產生測試項目</li>\n<li>TEST ? =&gt; 執行測試，回饋並且回到第一步Loop。</li>\n</ol>\n<h2 id=\"應該觀注的資訊-information-is-learning\"><a href=\"#應該觀注的資訊-information-is-learning\" class=\"headerlink\" title=\"應該觀注的資訊 information is learning\"></a>應該觀注的資訊 information is learning</h2><ol>\n<li>Customer</li>\n<li>Product</li>\n<li>Project</li>\n<li>Mission</li>\n</ol>\n<p>透過WHY的詰問，了解你的任務(Know Your Mission)<br>學習到受測對象的本質，排除不必要的測試發想。<br>收斂了測試範圍，決定了測試方向。</p>\n<h2 id=\"探索測試\"><a href=\"#探索測試\" class=\"headerlink\" title=\"探索測試\"></a>探索測試</h2><ol>\n<li>儘可能的發散</li>\n<li>摹仿別人看事情的角度</li>\n<li>有意識的學習(mindful learning)    <ul>\n<li>記錄</li>\n<li>總結</li>\n<li>歸納問題的核心</li>\n<li>給它起一個名字(沒有專有名詞的話)</li>\n<li>有意識的逃離第一印象</li>\n<li>小心不經意的盲區(inattentional blindness)</li>\n<li>數量 X 練習 X 思考 X 學習 = 提昇</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"回饋\"><a href=\"#回饋\" class=\"headerlink\" title=\"回饋\"></a>回饋</h2><ol>\n<li>刻意練習 vs 有意識的練習，類似的東西，但是沒有具體的方法</li>\n<li>課程中提到的<a href=\"https://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action?language=zh-tw\" target=\"_blank\" rel=\"external\">影片</a></li>\n</ol>\n<p>(fin)</p>\n"},{"title":"使用 DateInterceptor 攔截SQL 語法","date":"2017-09-24T02:55:30.000Z","_content":"\n## 前言\n在[SQL Compatibility Level 對MsSQL時間查詢的影響](https://blog.marsen.me/2017/09/18/sql_compatibility_level_with_datetime2/)這篇文章裡,  \n遇到了一個令難以處理的問題, 簡單的複述一下,  \n\n1. 我的資料表以一個 datetime 欄位當作 PK\n2. 我的SQL DB版本為 2016 以上 (Compatibility Level預設值為130)\n\n這個時候我所有的 Entity Context 更新語法在呼叫 SaveChange 時會拋出錯誤;  \n原因在於 EF 所產生的 SQL Query 語法 , 會以 PK 值作為查詢條件,   \n而在這個時候 查詢時間的條件會精準到微秒(μs=1/1000000秒),  \n但是 datetime 欄位只會記錄到豪秒(ms=1/1000秒),  \n於是精準不足的部份就會補 0 ,  \nEX:  \n`2017-09-24 11:55:35.3720000` 與 `2017-09-24 11:55:35.372`  \n這會導致查無資料進而引發 [dbupdateconcurrencyexception](https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.dbupdateconcurrencyexception(v=vs.103).aspx)\n\n## 解決方針\n### 修改資料欄位\n 將資料庫的欄位datatype datetime 改成 datetime2 ,  \n 這或許是最理想的解法了, 你不需要更動程式碼,  \n 而且會提昇你資料的時間精準度.  \n 不過實務上,你必須考慮到你是否有dba的權限與即有的資料量,  \n 當產品的核心功能依賴著這張表的時候且有巨量資料存在時,  \n 更新欄位的資料型態的衝擊與風險或許是難以承受的.   \n 更不用說還要考慮到整個 DB Server Cluster 的架構之類的問題.\n\n### 修改 SQL Server Compatibility Level 從 130 至 120 \n非常不建議的作法, 除了要考慮上述權限、衝擊與風險的問題外,  \n如果降轉 Compatibility Level \n或許會使得其他有使用到 datetime2 型態的資料欄位發生異常,  \n或是是失去原本精度的意義. \n\n### 使用 DateInterceptor 攔截SQL 語法\n在考量上述兩種情況, 為了不增加~~DBA的工作量~~無謂的風險與權責問題, \n(其實是實務上我沒有DB Server的異動權限),  \n我們可以透過 [IDbInterceptor](https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.interception.idbcommandinterceptor(v=vs.113).aspx) 來欄截 Entity Framework 對DB 存取時執行的 Query\n\n以下是個簡單的範例,\n\n```csharp\n    public class DateInterceptor : IDbInterceptor\n    {\n        public void ReaderExecuting(DbCommand command,\n            DbCommandInterceptionContext<DbDataReader> interceptionContext)\n        {\n            var dateParameters = command.Parameters.OfType<DbParameter>()\n                .Where(p => p.DbType == DbType.DateTime2);\n            foreach (var parameter in dateParameters)\n            {\n                parameter.DbType = DbType.DateTime;\n            }\n        }\n    }\n```\n \n我們實作了一個 IDbInterceptor 的類別, \n用來將 datetime2 的資料型別轉型成 datetime,     \n接下要將它掛載在 Entity Context之中 \n\n```csharp\n    public partial class EF6Entities : DbContext\n    {\n        public EF6Entities()\n            : base(\"name=EF6Entities\")\n        {\n            DbInterception.Add(new DateInterceptor());\n        }\n    \n        protected override void OnModelCreating(DbModelBuilder modelBuilder)\n        {\n            throw new UnintentionalCodeFirstException();\n        }\n    \n        public virtual DbSet<BatchUploadData> BatchUploadData { get; set; }\n    }\n ```\n如此一來就會以 datetime 的精準度產生 SQL Query\n\n\n ## 參考   \n- [程式碼](https://github.com/marsen/EFDemo)\n- [IDbInterceptor](https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.interception.idbcommandinterceptor.aspx)\n- [IDbCommandInterceptor](https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.interception.idbcommandinterceptor.aspx)\n- [How to change how Entity Framework generates SQL precision for Datetime](https://stackoverflow.com/questions/46387565/how-to-change-how-entity-framework-generates-sql-precision-for-datetime)\n\n(fin)","source":"_posts/sql_ef6_dateInterceptor.md","raw":"---\ntitle: \"使用 DateInterceptor 攔截SQL 語法\"\ndate: 2017/09/24 10:55:30\ntag:\n  - Entity Framework\n  - Database\n  - MsSQL\n---\n\n## 前言\n在[SQL Compatibility Level 對MsSQL時間查詢的影響](https://blog.marsen.me/2017/09/18/sql_compatibility_level_with_datetime2/)這篇文章裡,  \n遇到了一個令難以處理的問題, 簡單的複述一下,  \n\n1. 我的資料表以一個 datetime 欄位當作 PK\n2. 我的SQL DB版本為 2016 以上 (Compatibility Level預設值為130)\n\n這個時候我所有的 Entity Context 更新語法在呼叫 SaveChange 時會拋出錯誤;  \n原因在於 EF 所產生的 SQL Query 語法 , 會以 PK 值作為查詢條件,   \n而在這個時候 查詢時間的條件會精準到微秒(μs=1/1000000秒),  \n但是 datetime 欄位只會記錄到豪秒(ms=1/1000秒),  \n於是精準不足的部份就會補 0 ,  \nEX:  \n`2017-09-24 11:55:35.3720000` 與 `2017-09-24 11:55:35.372`  \n這會導致查無資料進而引發 [dbupdateconcurrencyexception](https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.dbupdateconcurrencyexception(v=vs.103).aspx)\n\n## 解決方針\n### 修改資料欄位\n 將資料庫的欄位datatype datetime 改成 datetime2 ,  \n 這或許是最理想的解法了, 你不需要更動程式碼,  \n 而且會提昇你資料的時間精準度.  \n 不過實務上,你必須考慮到你是否有dba的權限與即有的資料量,  \n 當產品的核心功能依賴著這張表的時候且有巨量資料存在時,  \n 更新欄位的資料型態的衝擊與風險或許是難以承受的.   \n 更不用說還要考慮到整個 DB Server Cluster 的架構之類的問題.\n\n### 修改 SQL Server Compatibility Level 從 130 至 120 \n非常不建議的作法, 除了要考慮上述權限、衝擊與風險的問題外,  \n如果降轉 Compatibility Level \n或許會使得其他有使用到 datetime2 型態的資料欄位發生異常,  \n或是是失去原本精度的意義. \n\n### 使用 DateInterceptor 攔截SQL 語法\n在考量上述兩種情況, 為了不增加~~DBA的工作量~~無謂的風險與權責問題, \n(其實是實務上我沒有DB Server的異動權限),  \n我們可以透過 [IDbInterceptor](https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.interception.idbcommandinterceptor(v=vs.113).aspx) 來欄截 Entity Framework 對DB 存取時執行的 Query\n\n以下是個簡單的範例,\n\n```csharp\n    public class DateInterceptor : IDbInterceptor\n    {\n        public void ReaderExecuting(DbCommand command,\n            DbCommandInterceptionContext<DbDataReader> interceptionContext)\n        {\n            var dateParameters = command.Parameters.OfType<DbParameter>()\n                .Where(p => p.DbType == DbType.DateTime2);\n            foreach (var parameter in dateParameters)\n            {\n                parameter.DbType = DbType.DateTime;\n            }\n        }\n    }\n```\n \n我們實作了一個 IDbInterceptor 的類別, \n用來將 datetime2 的資料型別轉型成 datetime,     \n接下要將它掛載在 Entity Context之中 \n\n```csharp\n    public partial class EF6Entities : DbContext\n    {\n        public EF6Entities()\n            : base(\"name=EF6Entities\")\n        {\n            DbInterception.Add(new DateInterceptor());\n        }\n    \n        protected override void OnModelCreating(DbModelBuilder modelBuilder)\n        {\n            throw new UnintentionalCodeFirstException();\n        }\n    \n        public virtual DbSet<BatchUploadData> BatchUploadData { get; set; }\n    }\n ```\n如此一來就會以 datetime 的精準度產生 SQL Query\n\n\n ## 參考   \n- [程式碼](https://github.com/marsen/EFDemo)\n- [IDbInterceptor](https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.interception.idbcommandinterceptor.aspx)\n- [IDbCommandInterceptor](https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.interception.idbcommandinterceptor.aspx)\n- [How to change how Entity Framework generates SQL precision for Datetime](https://stackoverflow.com/questions/46387565/how-to-change-how-entity-framework-generates-sql-precision-for-datetime)\n\n(fin)","slug":"sql_ef6_dateInterceptor","published":1,"updated":"2018-01-30T16:29:44.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyd4001ayk55tgowr788","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在<a href=\"https://blog.marsen.me/2017/09/18/sql_compatibility_level_with_datetime2/\">SQL Compatibility Level 對MsSQL時間查詢的影響</a>這篇文章裡,<br>遇到了一個令難以處理的問題, 簡單的複述一下,  </p>\n<ol>\n<li>我的資料表以一個 datetime 欄位當作 PK</li>\n<li>我的SQL DB版本為 2016 以上 (Compatibility Level預設值為130)</li>\n</ol>\n<p>這個時候我所有的 Entity Context 更新語法在呼叫 SaveChange 時會拋出錯誤;<br>原因在於 EF 所產生的 SQL Query 語法 , 會以 PK 值作為查詢條件,<br>而在這個時候 查詢時間的條件會精準到微秒(μs=1/1000000秒),<br>但是 datetime 欄位只會記錄到豪秒(ms=1/1000秒),<br>於是精準不足的部份就會補 0 ,<br>EX:<br><code>2017-09-24 11:55:35.3720000</code> 與 <code>2017-09-24 11:55:35.372</code><br>這會導致查無資料進而引發 <a href=\"https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.dbupdateconcurrencyexception(v=vs.103\" target=\"_blank\" rel=\"external\">dbupdateconcurrencyexception</a>.aspx)</p>\n<h2 id=\"解決方針\"><a href=\"#解決方針\" class=\"headerlink\" title=\"解決方針\"></a>解決方針</h2><h3 id=\"修改資料欄位\"><a href=\"#修改資料欄位\" class=\"headerlink\" title=\"修改資料欄位\"></a>修改資料欄位</h3><p> 將資料庫的欄位datatype datetime 改成 datetime2 ,<br> 這或許是最理想的解法了, 你不需要更動程式碼,<br> 而且會提昇你資料的時間精準度.<br> 不過實務上,你必須考慮到你是否有dba的權限與即有的資料量,<br> 當產品的核心功能依賴著這張表的時候且有巨量資料存在時,<br> 更新欄位的資料型態的衝擊與風險或許是難以承受的.<br> 更不用說還要考慮到整個 DB Server Cluster 的架構之類的問題.</p>\n<h3 id=\"修改-SQL-Server-Compatibility-Level-從-130-至-120\"><a href=\"#修改-SQL-Server-Compatibility-Level-從-130-至-120\" class=\"headerlink\" title=\"修改 SQL Server Compatibility Level 從 130 至 120\"></a>修改 SQL Server Compatibility Level 從 130 至 120</h3><p>非常不建議的作法, 除了要考慮上述權限、衝擊與風險的問題外,<br>如果降轉 Compatibility Level<br>或許會使得其他有使用到 datetime2 型態的資料欄位發生異常,<br>或是是失去原本精度的意義. </p>\n<h3 id=\"使用-DateInterceptor-攔截SQL-語法\"><a href=\"#使用-DateInterceptor-攔截SQL-語法\" class=\"headerlink\" title=\"使用 DateInterceptor 攔截SQL 語法\"></a>使用 DateInterceptor 攔截SQL 語法</h3><p>在考量上述兩種情況, 為了不增加<del>DBA的工作量</del>無謂的風險與權責問題,<br>(其實是實務上我沒有DB Server的異動權限),<br>我們可以透過 <a href=\"https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.interception.idbcommandinterceptor(v=vs.113\" target=\"_blank\" rel=\"external\">IDbInterceptor</a>.aspx) 來欄截 Entity Framework 對DB 存取時執行的 Query</p>\n<p>以下是個簡單的範例,</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DateInterceptor</span> : <span class=\"title\">IDbInterceptor</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ReaderExecuting</span>(<span class=\"params\">DbCommand command,</span></span></div><div class=\"line\">        DbCommandInterceptionContext&lt;DbDataReader&gt; interceptionContext)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> dateParameters = command.Parameters.OfType&lt;DbParameter&gt;()</div><div class=\"line\">            .Where(p =&gt; p.DbType == DbType.DateTime2);</div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> parameter <span class=\"keyword\">in</span> dateParameters)</div><div class=\"line\">        &#123;</div><div class=\"line\">            parameter.DbType = DbType.DateTime;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我們實作了一個 IDbInterceptor 的類別,<br>用來將 datetime2 的資料型別轉型成 datetime,<br>接下要將它掛載在 Entity Context之中 </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">EF6Entities</span> : <span class=\"title\">DbContext</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EF6Entities</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">        : <span class=\"title\">base</span>(<span class=\"params\"><span class=\"string\">\"name=EF6Entities\"</span></span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        DbInterception.Add(<span class=\"keyword\">new</span> DateInterceptor());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnModelCreating</span>(<span class=\"params\">DbModelBuilder modelBuilder</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnintentionalCodeFirstException();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> DbSet&lt;BatchUploadData&gt; BatchUploadData &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如此一來就會以 datetime 的精準度產生 SQL Query</p>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://github.com/marsen/EFDemo\" target=\"_blank\" rel=\"external\">程式碼</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.interception.idbcommandinterceptor.aspx\" target=\"_blank\" rel=\"external\">IDbInterceptor</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.interception.idbcommandinterceptor.aspx\" target=\"_blank\" rel=\"external\">IDbCommandInterceptor</a></li>\n<li><a href=\"https://stackoverflow.com/questions/46387565/how-to-change-how-entity-framework-generates-sql-precision-for-datetime\" target=\"_blank\" rel=\"external\">How to change how Entity Framework generates SQL precision for Datetime</a></li>\n</ul>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在<a href=\"https://blog.marsen.me/2017/09/18/sql_compatibility_level_with_datetime2/\">SQL Compatibility Level 對MsSQL時間查詢的影響</a>這篇文章裡,<br>遇到了一個令難以處理的問題, 簡單的複述一下,  </p>\n<ol>\n<li>我的資料表以一個 datetime 欄位當作 PK</li>\n<li>我的SQL DB版本為 2016 以上 (Compatibility Level預設值為130)</li>\n</ol>\n<p>這個時候我所有的 Entity Context 更新語法在呼叫 SaveChange 時會拋出錯誤;<br>原因在於 EF 所產生的 SQL Query 語法 , 會以 PK 值作為查詢條件,<br>而在這個時候 查詢時間的條件會精準到微秒(μs=1/1000000秒),<br>但是 datetime 欄位只會記錄到豪秒(ms=1/1000秒),<br>於是精準不足的部份就會補 0 ,<br>EX:<br><code>2017-09-24 11:55:35.3720000</code> 與 <code>2017-09-24 11:55:35.372</code><br>這會導致查無資料進而引發 <a href=\"https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.dbupdateconcurrencyexception(v=vs.103\" target=\"_blank\" rel=\"external\">dbupdateconcurrencyexception</a>.aspx)</p>\n<h2 id=\"解決方針\"><a href=\"#解決方針\" class=\"headerlink\" title=\"解決方針\"></a>解決方針</h2><h3 id=\"修改資料欄位\"><a href=\"#修改資料欄位\" class=\"headerlink\" title=\"修改資料欄位\"></a>修改資料欄位</h3><p> 將資料庫的欄位datatype datetime 改成 datetime2 ,<br> 這或許是最理想的解法了, 你不需要更動程式碼,<br> 而且會提昇你資料的時間精準度.<br> 不過實務上,你必須考慮到你是否有dba的權限與即有的資料量,<br> 當產品的核心功能依賴著這張表的時候且有巨量資料存在時,<br> 更新欄位的資料型態的衝擊與風險或許是難以承受的.<br> 更不用說還要考慮到整個 DB Server Cluster 的架構之類的問題.</p>\n<h3 id=\"修改-SQL-Server-Compatibility-Level-從-130-至-120\"><a href=\"#修改-SQL-Server-Compatibility-Level-從-130-至-120\" class=\"headerlink\" title=\"修改 SQL Server Compatibility Level 從 130 至 120\"></a>修改 SQL Server Compatibility Level 從 130 至 120</h3><p>非常不建議的作法, 除了要考慮上述權限、衝擊與風險的問題外,<br>如果降轉 Compatibility Level<br>或許會使得其他有使用到 datetime2 型態的資料欄位發生異常,<br>或是是失去原本精度的意義. </p>\n<h3 id=\"使用-DateInterceptor-攔截SQL-語法\"><a href=\"#使用-DateInterceptor-攔截SQL-語法\" class=\"headerlink\" title=\"使用 DateInterceptor 攔截SQL 語法\"></a>使用 DateInterceptor 攔截SQL 語法</h3><p>在考量上述兩種情況, 為了不增加<del>DBA的工作量</del>無謂的風險與權責問題,<br>(其實是實務上我沒有DB Server的異動權限),<br>我們可以透過 <a href=\"https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.interception.idbcommandinterceptor(v=vs.113\" target=\"_blank\" rel=\"external\">IDbInterceptor</a>.aspx) 來欄截 Entity Framework 對DB 存取時執行的 Query</p>\n<p>以下是個簡單的範例,</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DateInterceptor</span> : <span class=\"title\">IDbInterceptor</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ReaderExecuting</span>(<span class=\"params\">DbCommand command,</span></span></div><div class=\"line\">        DbCommandInterceptionContext&lt;DbDataReader&gt; interceptionContext)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> dateParameters = command.Parameters.OfType&lt;DbParameter&gt;()</div><div class=\"line\">            .Where(p =&gt; p.DbType == DbType.DateTime2);</div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> parameter <span class=\"keyword\">in</span> dateParameters)</div><div class=\"line\">        &#123;</div><div class=\"line\">            parameter.DbType = DbType.DateTime;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我們實作了一個 IDbInterceptor 的類別,<br>用來將 datetime2 的資料型別轉型成 datetime,<br>接下要將它掛載在 Entity Context之中 </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">EF6Entities</span> : <span class=\"title\">DbContext</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EF6Entities</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">        : <span class=\"title\">base</span>(<span class=\"params\"><span class=\"string\">\"name=EF6Entities\"</span></span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        DbInterception.Add(<span class=\"keyword\">new</span> DateInterceptor());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnModelCreating</span>(<span class=\"params\">DbModelBuilder modelBuilder</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnintentionalCodeFirstException();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> DbSet&lt;BatchUploadData&gt; BatchUploadData &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如此一來就會以 datetime 的精準度產生 SQL Query</p>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://github.com/marsen/EFDemo\" target=\"_blank\" rel=\"external\">程式碼</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.interception.idbcommandinterceptor.aspx\" target=\"_blank\" rel=\"external\">IDbInterceptor</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/system.data.entity.infrastructure.interception.idbcommandinterceptor.aspx\" target=\"_blank\" rel=\"external\">IDbCommandInterceptor</a></li>\n<li><a href=\"https://stackoverflow.com/questions/46387565/how-to-change-how-entity-framework-generates-sql-precision-for-datetime\" target=\"_blank\" rel=\"external\">How to change how Entity Framework generates SQL precision for Datetime</a></li>\n</ul>\n<p>(fin)</p>\n"},{"title":"[活動筆記]單元測試這樣玩就對了","date":"2017-04-22T16:01:39.000Z","_content":"## 應該知道的事:\n- 使用 C# , 但是其他語言也適用 \n- 使用 Visual Studio\n- 案例一有基本數理的專有名詞\n    - 上界(Upper Bound)、下界(lower Bound)、左邊界(Left Bound)、右邊界(Right Bound)\n- 報名資訊(已結束)\n[Agile Meetup 2017/04 意外版: 單元測試這樣玩就對了](http://www.accupass.com/go/unitestwriting)\n\n\n\n\n## 案例一、數值區間\n```\n假定給任一整數區間\nex:\n(1,6] = {2,3,4,5,6} \n[-2,4) = {-2,-1,0,1,2,3}\n透過一個function(x)檢查x是否包含在整數區間內,\n並撰寫測試,驗証 function(x)是對的。\n```\n\n### 解析 \n\n如上範例所示,\n「(」「)」小括號(parentheses)表示`OPEN`(不包含,大於或小於)\n「[」「]」中括號(square brackets)表示`CLOSE`(包含,大於等於或小於等於)\n (1,6] , 代表這個區間大於1小於等於6,包含的整數有 2、3、4、5、6 \n [-2,4), 代表這個區間大於等於-2小於4,包含的整數有-2、-1、0、1、2、3\n \n![](https://i.imgur.com/TDHhx0A.png)\n\n這題比較單純,只需要考慮所有的情況,\n並且寫成單元測試即可。\n1. x 落在區間內\n2. x 落在左邊界外\n3. x 落在右邊界外\n4. x 落在左邊界上,左邊界為`OPEN`\n5. x 落在左邊界上,左邊界為`CLOSE`\n6. x 落在右邊界上,右邊界為`OPEN`\n7. x 落在右邊界上,右邊界為`CLOSE`\n\n有幾種特殊的情境,特別說明一下\n1. 假設區間為(0,1),這個區間是不包含任何整數\n2. 假設區間為(1,1),這個區間是不包含任何整數,且不包含任何數值\n3. 假設區間為[1,1],這個區間恰巧包含1個整數,且只包含1這個整數\n4. 假設\"區間\"為[2,1],或任何左邊界大右邊界的表示,這不是一個正確的區間,將要作例外處理。\n\n讓我們回歸單元測試,\n這裡的重點是**一個測試只作一件事**,\n只把一個情境釐清,並且在測試的程式碼中\n**明確的表達測試目的**\n\n```cs\nprivate int leftBound = 1;\nprivate int rightBound = 6;\nprivate int testNum = 4;\n\n[TestMethod]\npublic void IncludeWhenLeftOpenRightClose()\n{\n    var checker = new RangeChecker(Bound.Open,this.leftBound,Bound.Close,this.rightBound);\n    bool expect = false;            \n    bool result = checker.IsContains(testNum);\n    Assert.IsTrue(result);\n}\n```\n\n## 案例二、現在時間轉字串\n```\n寫一個方法GetNowString,不傳入任何參數,\n取得現在的時間字串,需要精準到豪秒。\n再寫一個測試去測試這個方法是對的‧\n```\n### 版本1\n最簡單的寫法:\n\n```cs\npublic class DateHelper\n{\n\tpublic string GetNowString()\n\t{\n\t\treturn DateTime.Now.ToString(\"yyyy-MM-dd hh:mm:ss ff\");\n\t}\n}\n```\n撰寫測試\n```cs\n[TestMethod]\npublic void GetNowString()\n{\n\tvar \n\t//// 寫不下去,因為我們無法凍結系統的時間\n\tstring expect = \"2017-04-19 20:45:17.88\";\n\tstring result = dater.GetNowString();\n\tAssert.AreEqual(expect, result);\n}\n```\n### 解析\n`GetNowString`與系統的時間`DateTime.Now`,\n是具有耦合性,要解耦需要透過一些IoC的手段去處理。\n\n### 版本2\n利用繼承的方法,作出假的類別\n```cs\npublic class DateHelper\n{\n\tprotected DateTime now;\n\tprotected virtual DateTime GetNow()\n\t{\n\t\tnow = DateTime.Now;\n\t\treturn now;\n\t}\n\tpublic string GetNowString()\n\t{\n\t\tGetNow();\n\t\treturn now.ToString(\"yyyy-MM-dd HH:mm:ss.ff\");\n\t}\n}\n\nclass StubDateHelper: DateHelper\n{\n\tprotected override DateTime GetNow()\n\t{\n\t\treturn now;\n\t}\n\n\tpublic void SetNow(DateTime datetime)\n\t{\n\t\tnow = datetime;\n\t}\n}\n```\n撰寫測試\n```cs\n[TestMethod]\npublic void GetNowString()\n{\n\tStubDateHelper dateHelper = new StubDateHelper();\n\tvar fakeNow = new DateTime(2017,4,19,20,45,17,880);\n\tdateHelper.SetNow(fakeNow);\n\tstring expect = \"2017-04-19 20:45:17.88\";\n\tstring result = dateHelper.GetNowString();\n\tAssert.AreEqual(expect, result);\n}\n\n```\n\n### 解析\n基本上這樣就可以測試了,\n原來的代碼,經過一定的重構,\n透過`virtual`方法GetNow,\n將`Datetime.Now`作了隔離\n適當利用假類別,取代掉GetNow的方法。\n\n這樣夠好了,但是我們可以看看另一種作法\n\n### 版本3 \n先看看我們的`DateHelper`,\n在這裡我們將GetNow交由IDateProvider的類別去實作,\n如此一來就斷開了耦合性。\n```cs\npublic class DateHelper\n{\n\tprivate IDateProvider DateProvider;\n\n\tpublic DateHelper(IDateProvider dateProvider)\n\t{\n\t\tthis.DateProvider = dateProvider;\n\t}\n\tpublic string GetNowString()\n\t{\n\t\tvar now = this.DateProvider.GetNow();\n\t\treturn now.ToString(\"yyyy-MM-dd HH:mm:ss.ff\");\n\t}\n}\n```\n實作IDateProvider的類別,\n在這裡其實不重要.\n```cs\npublic class DateProviderV1 : IDateProvider\n{\n\tpublic DateTime GetNow()\n\t{\n\t\treturn DateTime.Now;\n\t}\n}\n```\n讓我們看看測試,\n在這裡我們透過一個假的`IDateProvider`的實作`DateProviderStub`,\n完成了測試,\nIDateProvider將`DateTime.Now`作了隔離,\n並且提供更容易修改的假物件(僅僅需要實作觀注的方法即可,不用擔心繼承帶來的附作用)\n\n```cs\n[TestMethod]\npublic void GetNowString()\n{\n\tDateProviderStub dateProvider = new DateProviderStub();\n\tdateProvider.now = new DateTime(2017, 4, 19, 20, 45, 17, 880);\n\tvar dateHelper = new DateHelper(dateProvider);\n\tstring expect = \"2017-04-19 20:45:17.88\";\n\tstring result = dateHelper.GetNowString();\n\tAssert.AreEqual(expect, result);\n}\n```\n```cs\npublic class DateProviderStub : IDateProvider\n{\n\tpublic DateTime now;\n\tpublic DateTime GetNow()\n\t{\n\t\treturn now;\n\t}\n}\n```\n\n### 圖例解析\n我們剛剛究竟幹了什麼？\n![](https://i.imgur.com/qeqzaoO.jpg)\n看看原本的情況,本來的方法因為相依與`Datetime`而無法測試\n![](https://i.imgur.com/Mquk1Cm.png)\n讓我們開始下刀,\n先用一個新的方法`GetNow`\n將它與待測的方法作分割,\n但是對整個類來說仍舊是耦合。\n![](https://i.imgur.com/c0Xg4vw.png)\n繼續把這刀往下切,\n我們墊一層介面,\n待測方法不再直接呼叫`GetNow`\n而是透過介面執行,當然會有額外實作介面與注入的功(請參考程式碼,不在此處繪出了.)\n![](https://i.imgur.com/8dDlWi2.png)\n最後,別忘了我們的目的\n測試原本的待測方法,\n我們可以透過一個`假的`類,\n來操控他的行為(ex:凍結時間). \n如此一來,就可進行測試了.\n![](https://i.imgur.com/c3mW59v.png)\n另外,這種被待測方法呼叫後\n會回傳一個假值的方法或類\n被叫作`STUB`\n![](https://i.imgur.com/KXvYMsx.png)\n\n## 案例三、發送郵件\n事先聲明,這題沒有程式碼,\n有興趣實作的人可以試試看.\n如果可以分享實作後的資訊給我更好XD\n```\nQ:註冊發送郵件如何寫單元測試？\n```\n\n### 解析\n很明顯的發送郵件需要依賴外部的郵件系統,\n這裡就會有耦合性,我們可以參考案例2的方式解耦\n不過發送郵件並不會有回傳值,\n我們要如何驗証正確性呢？\n\nA:檢查調用次數、參數\n\n### 圖例解析\n在案例2的單元測試,\n我們透過STUB偽造的回傳值完成測試\n並執行驗証. \n但是在沒有回傳的值的方法中(被稱作`MOCK`)\n我們只能透過傳遞的參數(如果有多載)\n與方法被調用的次數來進行驗証。\n\n![](https://i.imgur.com/zbllutC.png)\n\n\n## 重點摘要\n\n\n- 單元測試要能清楚表達測試的目的(**達意**)\n\t- 命名\n\t- 減少意外的細節\n- 單元測試一次只作一件事 \n- new 本身就是一種邏輯 一種偶合\n- static 是一種高偶合\n- 繼承也是高偶合,能使用繼承的情境很少\n\t- A is a B 通常只有這種情境才適合繼承\n- STUB & MOCK\n\t- STUB 會有回傳值,可以在 Unit Test 作驗証(ASSERT)\n\t- MOCK 沒有回傳值,可以在 MOCK 本身中 作驗証(ASSERT)\n\n## 其它\n- SLIM \n- 注入相依的幾種方式\n    - Pool\n    - Constructor\n    - Property\n- 書單 : XUnit Test Patterns\n\n## 直播影片\n_如果連結失效,煩請告知._\n- [影片1](https://www.facebook.com/AgileCommunity.tw/videos/948509765286712/)\n- [影片2](https://www.facebook.com/AgileCommunity.tw/videos/948548118616210/)\n\n文章內容如有謬誤,煩請指正.\n\n(fin)","source":"_posts/unitestwriting.md","raw":"---\ntitle: \"[活動筆記]單元測試這樣玩就對了\"\ndate: 2017/04/23 00:01:39\ntag:\n  - Unit Test\n---\n## 應該知道的事:\n- 使用 C# , 但是其他語言也適用 \n- 使用 Visual Studio\n- 案例一有基本數理的專有名詞\n    - 上界(Upper Bound)、下界(lower Bound)、左邊界(Left Bound)、右邊界(Right Bound)\n- 報名資訊(已結束)\n[Agile Meetup 2017/04 意外版: 單元測試這樣玩就對了](http://www.accupass.com/go/unitestwriting)\n\n\n\n\n## 案例一、數值區間\n```\n假定給任一整數區間\nex:\n(1,6] = {2,3,4,5,6} \n[-2,4) = {-2,-1,0,1,2,3}\n透過一個function(x)檢查x是否包含在整數區間內,\n並撰寫測試,驗証 function(x)是對的。\n```\n\n### 解析 \n\n如上範例所示,\n「(」「)」小括號(parentheses)表示`OPEN`(不包含,大於或小於)\n「[」「]」中括號(square brackets)表示`CLOSE`(包含,大於等於或小於等於)\n (1,6] , 代表這個區間大於1小於等於6,包含的整數有 2、3、4、5、6 \n [-2,4), 代表這個區間大於等於-2小於4,包含的整數有-2、-1、0、1、2、3\n \n![](https://i.imgur.com/TDHhx0A.png)\n\n這題比較單純,只需要考慮所有的情況,\n並且寫成單元測試即可。\n1. x 落在區間內\n2. x 落在左邊界外\n3. x 落在右邊界外\n4. x 落在左邊界上,左邊界為`OPEN`\n5. x 落在左邊界上,左邊界為`CLOSE`\n6. x 落在右邊界上,右邊界為`OPEN`\n7. x 落在右邊界上,右邊界為`CLOSE`\n\n有幾種特殊的情境,特別說明一下\n1. 假設區間為(0,1),這個區間是不包含任何整數\n2. 假設區間為(1,1),這個區間是不包含任何整數,且不包含任何數值\n3. 假設區間為[1,1],這個區間恰巧包含1個整數,且只包含1這個整數\n4. 假設\"區間\"為[2,1],或任何左邊界大右邊界的表示,這不是一個正確的區間,將要作例外處理。\n\n讓我們回歸單元測試,\n這裡的重點是**一個測試只作一件事**,\n只把一個情境釐清,並且在測試的程式碼中\n**明確的表達測試目的**\n\n```cs\nprivate int leftBound = 1;\nprivate int rightBound = 6;\nprivate int testNum = 4;\n\n[TestMethod]\npublic void IncludeWhenLeftOpenRightClose()\n{\n    var checker = new RangeChecker(Bound.Open,this.leftBound,Bound.Close,this.rightBound);\n    bool expect = false;            \n    bool result = checker.IsContains(testNum);\n    Assert.IsTrue(result);\n}\n```\n\n## 案例二、現在時間轉字串\n```\n寫一個方法GetNowString,不傳入任何參數,\n取得現在的時間字串,需要精準到豪秒。\n再寫一個測試去測試這個方法是對的‧\n```\n### 版本1\n最簡單的寫法:\n\n```cs\npublic class DateHelper\n{\n\tpublic string GetNowString()\n\t{\n\t\treturn DateTime.Now.ToString(\"yyyy-MM-dd hh:mm:ss ff\");\n\t}\n}\n```\n撰寫測試\n```cs\n[TestMethod]\npublic void GetNowString()\n{\n\tvar \n\t//// 寫不下去,因為我們無法凍結系統的時間\n\tstring expect = \"2017-04-19 20:45:17.88\";\n\tstring result = dater.GetNowString();\n\tAssert.AreEqual(expect, result);\n}\n```\n### 解析\n`GetNowString`與系統的時間`DateTime.Now`,\n是具有耦合性,要解耦需要透過一些IoC的手段去處理。\n\n### 版本2\n利用繼承的方法,作出假的類別\n```cs\npublic class DateHelper\n{\n\tprotected DateTime now;\n\tprotected virtual DateTime GetNow()\n\t{\n\t\tnow = DateTime.Now;\n\t\treturn now;\n\t}\n\tpublic string GetNowString()\n\t{\n\t\tGetNow();\n\t\treturn now.ToString(\"yyyy-MM-dd HH:mm:ss.ff\");\n\t}\n}\n\nclass StubDateHelper: DateHelper\n{\n\tprotected override DateTime GetNow()\n\t{\n\t\treturn now;\n\t}\n\n\tpublic void SetNow(DateTime datetime)\n\t{\n\t\tnow = datetime;\n\t}\n}\n```\n撰寫測試\n```cs\n[TestMethod]\npublic void GetNowString()\n{\n\tStubDateHelper dateHelper = new StubDateHelper();\n\tvar fakeNow = new DateTime(2017,4,19,20,45,17,880);\n\tdateHelper.SetNow(fakeNow);\n\tstring expect = \"2017-04-19 20:45:17.88\";\n\tstring result = dateHelper.GetNowString();\n\tAssert.AreEqual(expect, result);\n}\n\n```\n\n### 解析\n基本上這樣就可以測試了,\n原來的代碼,經過一定的重構,\n透過`virtual`方法GetNow,\n將`Datetime.Now`作了隔離\n適當利用假類別,取代掉GetNow的方法。\n\n這樣夠好了,但是我們可以看看另一種作法\n\n### 版本3 \n先看看我們的`DateHelper`,\n在這裡我們將GetNow交由IDateProvider的類別去實作,\n如此一來就斷開了耦合性。\n```cs\npublic class DateHelper\n{\n\tprivate IDateProvider DateProvider;\n\n\tpublic DateHelper(IDateProvider dateProvider)\n\t{\n\t\tthis.DateProvider = dateProvider;\n\t}\n\tpublic string GetNowString()\n\t{\n\t\tvar now = this.DateProvider.GetNow();\n\t\treturn now.ToString(\"yyyy-MM-dd HH:mm:ss.ff\");\n\t}\n}\n```\n實作IDateProvider的類別,\n在這裡其實不重要.\n```cs\npublic class DateProviderV1 : IDateProvider\n{\n\tpublic DateTime GetNow()\n\t{\n\t\treturn DateTime.Now;\n\t}\n}\n```\n讓我們看看測試,\n在這裡我們透過一個假的`IDateProvider`的實作`DateProviderStub`,\n完成了測試,\nIDateProvider將`DateTime.Now`作了隔離,\n並且提供更容易修改的假物件(僅僅需要實作觀注的方法即可,不用擔心繼承帶來的附作用)\n\n```cs\n[TestMethod]\npublic void GetNowString()\n{\n\tDateProviderStub dateProvider = new DateProviderStub();\n\tdateProvider.now = new DateTime(2017, 4, 19, 20, 45, 17, 880);\n\tvar dateHelper = new DateHelper(dateProvider);\n\tstring expect = \"2017-04-19 20:45:17.88\";\n\tstring result = dateHelper.GetNowString();\n\tAssert.AreEqual(expect, result);\n}\n```\n```cs\npublic class DateProviderStub : IDateProvider\n{\n\tpublic DateTime now;\n\tpublic DateTime GetNow()\n\t{\n\t\treturn now;\n\t}\n}\n```\n\n### 圖例解析\n我們剛剛究竟幹了什麼？\n![](https://i.imgur.com/qeqzaoO.jpg)\n看看原本的情況,本來的方法因為相依與`Datetime`而無法測試\n![](https://i.imgur.com/Mquk1Cm.png)\n讓我們開始下刀,\n先用一個新的方法`GetNow`\n將它與待測的方法作分割,\n但是對整個類來說仍舊是耦合。\n![](https://i.imgur.com/c0Xg4vw.png)\n繼續把這刀往下切,\n我們墊一層介面,\n待測方法不再直接呼叫`GetNow`\n而是透過介面執行,當然會有額外實作介面與注入的功(請參考程式碼,不在此處繪出了.)\n![](https://i.imgur.com/8dDlWi2.png)\n最後,別忘了我們的目的\n測試原本的待測方法,\n我們可以透過一個`假的`類,\n來操控他的行為(ex:凍結時間). \n如此一來,就可進行測試了.\n![](https://i.imgur.com/c3mW59v.png)\n另外,這種被待測方法呼叫後\n會回傳一個假值的方法或類\n被叫作`STUB`\n![](https://i.imgur.com/KXvYMsx.png)\n\n## 案例三、發送郵件\n事先聲明,這題沒有程式碼,\n有興趣實作的人可以試試看.\n如果可以分享實作後的資訊給我更好XD\n```\nQ:註冊發送郵件如何寫單元測試？\n```\n\n### 解析\n很明顯的發送郵件需要依賴外部的郵件系統,\n這裡就會有耦合性,我們可以參考案例2的方式解耦\n不過發送郵件並不會有回傳值,\n我們要如何驗証正確性呢？\n\nA:檢查調用次數、參數\n\n### 圖例解析\n在案例2的單元測試,\n我們透過STUB偽造的回傳值完成測試\n並執行驗証. \n但是在沒有回傳的值的方法中(被稱作`MOCK`)\n我們只能透過傳遞的參數(如果有多載)\n與方法被調用的次數來進行驗証。\n\n![](https://i.imgur.com/zbllutC.png)\n\n\n## 重點摘要\n\n\n- 單元測試要能清楚表達測試的目的(**達意**)\n\t- 命名\n\t- 減少意外的細節\n- 單元測試一次只作一件事 \n- new 本身就是一種邏輯 一種偶合\n- static 是一種高偶合\n- 繼承也是高偶合,能使用繼承的情境很少\n\t- A is a B 通常只有這種情境才適合繼承\n- STUB & MOCK\n\t- STUB 會有回傳值,可以在 Unit Test 作驗証(ASSERT)\n\t- MOCK 沒有回傳值,可以在 MOCK 本身中 作驗証(ASSERT)\n\n## 其它\n- SLIM \n- 注入相依的幾種方式\n    - Pool\n    - Constructor\n    - Property\n- 書單 : XUnit Test Patterns\n\n## 直播影片\n_如果連結失效,煩請告知._\n- [影片1](https://www.facebook.com/AgileCommunity.tw/videos/948509765286712/)\n- [影片2](https://www.facebook.com/AgileCommunity.tw/videos/948548118616210/)\n\n文章內容如有謬誤,煩請指正.\n\n(fin)","slug":"unitestwriting","published":1,"updated":"2017-04-29T05:18:22.199Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyd6001cyk55q8qic85e","content":"<h2 id=\"應該知道的事\"><a href=\"#應該知道的事\" class=\"headerlink\" title=\"應該知道的事:\"></a>應該知道的事:</h2><ul>\n<li>使用 C# , 但是其他語言也適用 </li>\n<li>使用 Visual Studio</li>\n<li>案例一有基本數理的專有名詞<ul>\n<li>上界(Upper Bound)、下界(lower Bound)、左邊界(Left Bound)、右邊界(Right Bound)</li>\n</ul>\n</li>\n<li>報名資訊(已結束)<br><a href=\"http://www.accupass.com/go/unitestwriting\" target=\"_blank\" rel=\"external\">Agile Meetup 2017/04 意外版: 單元測試這樣玩就對了</a></li>\n</ul>\n<h2 id=\"案例一、數值區間\"><a href=\"#案例一、數值區間\" class=\"headerlink\" title=\"案例一、數值區間\"></a>案例一、數值區間</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">假定給任一整數區間</div><div class=\"line\">ex:</div><div class=\"line\">(1,6] = &#123;2,3,4,5,6&#125; </div><div class=\"line\">[-2,4) = &#123;-2,-1,0,1,2,3&#125;</div><div class=\"line\">透過一個function(x)檢查x是否包含在整數區間內,</div><div class=\"line\">並撰寫測試,驗証 function(x)是對的。</div></pre></td></tr></table></figure>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>如上範例所示,<br>「(」「)」小括號(parentheses)表示<code>OPEN</code>(不包含,大於或小於)<br>「[」「]」中括號(square brackets)表示<code>CLOSE</code>(包含,大於等於或小於等於)<br> (1,6] , 代表這個區間大於1小於等於6,包含的整數有 2、3、4、5、6<br> [-2,4), 代表這個區間大於等於-2小於4,包含的整數有-2、-1、0、1、2、3</p>\n<p><img src=\"https://i.imgur.com/TDHhx0A.png\" alt=\"\"></p>\n<p>這題比較單純,只需要考慮所有的情況,<br>並且寫成單元測試即可。</p>\n<ol>\n<li>x 落在區間內</li>\n<li>x 落在左邊界外</li>\n<li>x 落在右邊界外</li>\n<li>x 落在左邊界上,左邊界為<code>OPEN</code></li>\n<li>x 落在左邊界上,左邊界為<code>CLOSE</code></li>\n<li>x 落在右邊界上,右邊界為<code>OPEN</code></li>\n<li>x 落在右邊界上,右邊界為<code>CLOSE</code></li>\n</ol>\n<p>有幾種特殊的情境,特別說明一下</p>\n<ol>\n<li>假設區間為(0,1),這個區間是不包含任何整數</li>\n<li>假設區間為(1,1),這個區間是不包含任何整數,且不包含任何數值</li>\n<li>假設區間為[1,1],這個區間恰巧包含1個整數,且只包含1這個整數</li>\n<li>假設”區間”為[2,1],或任何左邊界大右邊界的表示,這不是一個正確的區間,將要作例外處理。</li>\n</ol>\n<p>讓我們回歸單元測試,<br>這裡的重點是<strong>一個測試只作一件事</strong>,<br>只把一個情境釐清,並且在測試的程式碼中<br><strong>明確的表達測試目的</strong></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> leftBound = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> rightBound = <span class=\"number\">6</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> testNum = <span class=\"number\">4</span>;</div><div class=\"line\"></div><div class=\"line\">[TestMethod]</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">IncludeWhenLeftOpenRightClose</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> checker = <span class=\"keyword\">new</span> RangeChecker(Bound.Open,<span class=\"keyword\">this</span>.leftBound,Bound.Close,<span class=\"keyword\">this</span>.rightBound);</div><div class=\"line\">    <span class=\"keyword\">bool</span> expect = <span class=\"literal\">false</span>;            </div><div class=\"line\">    <span class=\"keyword\">bool</span> result = checker.IsContains(testNum);</div><div class=\"line\">    Assert.IsTrue(result);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"案例二、現在時間轉字串\"><a href=\"#案例二、現在時間轉字串\" class=\"headerlink\" title=\"案例二、現在時間轉字串\"></a>案例二、現在時間轉字串</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">寫一個方法GetNowString,不傳入任何參數,</div><div class=\"line\">取得現在的時間字串,需要精準到豪秒。</div><div class=\"line\">再寫一個測試去測試這個方法是對的‧</div></pre></td></tr></table></figure>\n<h3 id=\"版本1\"><a href=\"#版本1\" class=\"headerlink\" title=\"版本1\"></a>版本1</h3><p>最簡單的寫法:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DateHelper</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetNowString</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> DateTime.Now.ToString(<span class=\"string\">\"yyyy-MM-dd hh:mm:ss ff\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>撰寫測試<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">[TestMethod]</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">GetNowString</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> </div><div class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span>/ 寫不下去,因為我們無法凍結系統的時間</span></div><div class=\"line\">\t<span class=\"keyword\">string</span> expect = <span class=\"string\">\"2017-04-19 20:45:17.88\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">string</span> result = dater.GetNowString();</div><div class=\"line\">\tAssert.AreEqual(expect, result);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"解析-1\"><a href=\"#解析-1\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p><code>GetNowString</code>與系統的時間<code>DateTime.Now</code>,<br>是具有耦合性,要解耦需要透過一些IoC的手段去處理。</p>\n<h3 id=\"版本2\"><a href=\"#版本2\" class=\"headerlink\" title=\"版本2\"></a>版本2</h3><p>利用繼承的方法,作出假的類別<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DateHelper</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">protected</span> DateTime now;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">virtual</span> DateTime <span class=\"title\">GetNow</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tnow = DateTime.Now;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> now;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetNowString</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tGetNow();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> now.ToString(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss.ff\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">StubDateHelper</span>: <span class=\"title\">DateHelper</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> DateTime <span class=\"title\">GetNow</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> now;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SetNow</span>(<span class=\"params\">DateTime datetime</span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tnow = datetime;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>撰寫測試<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[TestMethod]</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">GetNowString</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">\tStubDateHelper dateHelper = <span class=\"keyword\">new</span> StubDateHelper();</div><div class=\"line\">\t<span class=\"keyword\">var</span> fakeNow = <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2017</span>,<span class=\"number\">4</span>,<span class=\"number\">19</span>,<span class=\"number\">20</span>,<span class=\"number\">45</span>,<span class=\"number\">17</span>,<span class=\"number\">880</span>);</div><div class=\"line\">\tdateHelper.SetNow(fakeNow);</div><div class=\"line\">\t<span class=\"keyword\">string</span> expect = <span class=\"string\">\"2017-04-19 20:45:17.88\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">string</span> result = dateHelper.GetNowString();</div><div class=\"line\">\tAssert.AreEqual(expect, result);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"解析-2\"><a href=\"#解析-2\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>基本上這樣就可以測試了,<br>原來的代碼,經過一定的重構,<br>透過<code>virtual</code>方法GetNow,<br>將<code>Datetime.Now</code>作了隔離<br>適當利用假類別,取代掉GetNow的方法。</p>\n<p>這樣夠好了,但是我們可以看看另一種作法</p>\n<h3 id=\"版本3\"><a href=\"#版本3\" class=\"headerlink\" title=\"版本3\"></a>版本3</h3><p>先看看我們的<code>DateHelper</code>,<br>在這裡我們將GetNow交由IDateProvider的類別去實作,<br>如此一來就斷開了耦合性。<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DateHelper</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> IDateProvider DateProvider;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DateHelper</span>(<span class=\"params\">IDateProvider dateProvider</span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.DateProvider = dateProvider;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetNowString</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> now = <span class=\"keyword\">this</span>.DateProvider.GetNow();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> now.ToString(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss.ff\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>實作IDateProvider的類別,<br>在這裡其實不重要.<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DateProviderV1</span> : <span class=\"title\">IDateProvider</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> DateTime <span class=\"title\">GetNow</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> DateTime.Now;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>讓我們看看測試,<br>在這裡我們透過一個假的<code>IDateProvider</code>的實作<code>DateProviderStub</code>,<br>完成了測試,<br>IDateProvider將<code>DateTime.Now</code>作了隔離,<br>並且提供更容易修改的假物件(僅僅需要實作觀注的方法即可,不用擔心繼承帶來的附作用)</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[TestMethod]</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">GetNowString</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">\tDateProviderStub dateProvider = <span class=\"keyword\">new</span> DateProviderStub();</div><div class=\"line\">\tdateProvider.now = <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2017</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">20</span>, <span class=\"number\">45</span>, <span class=\"number\">17</span>, <span class=\"number\">880</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> dateHelper = <span class=\"keyword\">new</span> DateHelper(dateProvider);</div><div class=\"line\">\t<span class=\"keyword\">string</span> expect = <span class=\"string\">\"2017-04-19 20:45:17.88\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">string</span> result = dateHelper.GetNowString();</div><div class=\"line\">\tAssert.AreEqual(expect, result);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DateProviderStub</span> : <span class=\"title\">IDateProvider</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> DateTime now;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> DateTime <span class=\"title\">GetNow</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> now;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"圖例解析\"><a href=\"#圖例解析\" class=\"headerlink\" title=\"圖例解析\"></a>圖例解析</h3><p>我們剛剛究竟幹了什麼？<br><img src=\"https://i.imgur.com/qeqzaoO.jpg\" alt=\"\"><br>看看原本的情況,本來的方法因為相依與<code>Datetime</code>而無法測試<br><img src=\"https://i.imgur.com/Mquk1Cm.png\" alt=\"\"><br>讓我們開始下刀,<br>先用一個新的方法<code>GetNow</code><br>將它與待測的方法作分割,<br>但是對整個類來說仍舊是耦合。<br><img src=\"https://i.imgur.com/c0Xg4vw.png\" alt=\"\"><br>繼續把這刀往下切,<br>我們墊一層介面,<br>待測方法不再直接呼叫<code>GetNow</code><br>而是透過介面執行,當然會有額外實作介面與注入的功(請參考程式碼,不在此處繪出了.)<br><img src=\"https://i.imgur.com/8dDlWi2.png\" alt=\"\"><br>最後,別忘了我們的目的<br>測試原本的待測方法,<br>我們可以透過一個<code>假的</code>類,<br>來操控他的行為(ex:凍結時間).<br>如此一來,就可進行測試了.<br><img src=\"https://i.imgur.com/c3mW59v.png\" alt=\"\"><br>另外,這種被待測方法呼叫後<br>會回傳一個假值的方法或類<br>被叫作<code>STUB</code><br><img src=\"https://i.imgur.com/KXvYMsx.png\" alt=\"\"></p>\n<h2 id=\"案例三、發送郵件\"><a href=\"#案例三、發送郵件\" class=\"headerlink\" title=\"案例三、發送郵件\"></a>案例三、發送郵件</h2><p>事先聲明,這題沒有程式碼,<br>有興趣實作的人可以試試看.<br>如果可以分享實作後的資訊給我更好XD<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Q:註冊發送郵件如何寫單元測試？</div></pre></td></tr></table></figure></p>\n<h3 id=\"解析-3\"><a href=\"#解析-3\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>很明顯的發送郵件需要依賴外部的郵件系統,<br>這裡就會有耦合性,我們可以參考案例2的方式解耦<br>不過發送郵件並不會有回傳值,<br>我們要如何驗証正確性呢？</p>\n<p>A:檢查調用次數、參數</p>\n<h3 id=\"圖例解析-1\"><a href=\"#圖例解析-1\" class=\"headerlink\" title=\"圖例解析\"></a>圖例解析</h3><p>在案例2的單元測試,<br>我們透過STUB偽造的回傳值完成測試<br>並執行驗証.<br>但是在沒有回傳的值的方法中(被稱作<code>MOCK</code>)<br>我們只能透過傳遞的參數(如果有多載)<br>與方法被調用的次數來進行驗証。</p>\n<p><img src=\"https://i.imgur.com/zbllutC.png\" alt=\"\"></p>\n<h2 id=\"重點摘要\"><a href=\"#重點摘要\" class=\"headerlink\" title=\"重點摘要\"></a>重點摘要</h2><ul>\n<li>單元測試要能清楚表達測試的目的(<strong>達意</strong>)<ul>\n<li>命名</li>\n<li>減少意外的細節</li>\n</ul>\n</li>\n<li>單元測試一次只作一件事 </li>\n<li>new 本身就是一種邏輯 一種偶合</li>\n<li>static 是一種高偶合</li>\n<li>繼承也是高偶合,能使用繼承的情境很少<ul>\n<li>A is a B 通常只有這種情境才適合繼承</li>\n</ul>\n</li>\n<li>STUB &amp; MOCK<ul>\n<li>STUB 會有回傳值,可以在 Unit Test 作驗証(ASSERT)</li>\n<li>MOCK 沒有回傳值,可以在 MOCK 本身中 作驗証(ASSERT)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><ul>\n<li>SLIM </li>\n<li>注入相依的幾種方式<ul>\n<li>Pool</li>\n<li>Constructor</li>\n<li>Property</li>\n</ul>\n</li>\n<li>書單 : XUnit Test Patterns</li>\n</ul>\n<h2 id=\"直播影片\"><a href=\"#直播影片\" class=\"headerlink\" title=\"直播影片\"></a>直播影片</h2><p><em>如果連結失效,煩請告知.</em></p>\n<ul>\n<li><a href=\"https://www.facebook.com/AgileCommunity.tw/videos/948509765286712/\" target=\"_blank\" rel=\"external\">影片1</a></li>\n<li><a href=\"https://www.facebook.com/AgileCommunity.tw/videos/948548118616210/\" target=\"_blank\" rel=\"external\">影片2</a></li>\n</ul>\n<p>文章內容如有謬誤,煩請指正.</p>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"應該知道的事\"><a href=\"#應該知道的事\" class=\"headerlink\" title=\"應該知道的事:\"></a>應該知道的事:</h2><ul>\n<li>使用 C# , 但是其他語言也適用 </li>\n<li>使用 Visual Studio</li>\n<li>案例一有基本數理的專有名詞<ul>\n<li>上界(Upper Bound)、下界(lower Bound)、左邊界(Left Bound)、右邊界(Right Bound)</li>\n</ul>\n</li>\n<li>報名資訊(已結束)<br><a href=\"http://www.accupass.com/go/unitestwriting\" target=\"_blank\" rel=\"external\">Agile Meetup 2017/04 意外版: 單元測試這樣玩就對了</a></li>\n</ul>\n<h2 id=\"案例一、數值區間\"><a href=\"#案例一、數值區間\" class=\"headerlink\" title=\"案例一、數值區間\"></a>案例一、數值區間</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">假定給任一整數區間</div><div class=\"line\">ex:</div><div class=\"line\">(1,6] = &#123;2,3,4,5,6&#125; </div><div class=\"line\">[-2,4) = &#123;-2,-1,0,1,2,3&#125;</div><div class=\"line\">透過一個function(x)檢查x是否包含在整數區間內,</div><div class=\"line\">並撰寫測試,驗証 function(x)是對的。</div></pre></td></tr></table></figure>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>如上範例所示,<br>「(」「)」小括號(parentheses)表示<code>OPEN</code>(不包含,大於或小於)<br>「[」「]」中括號(square brackets)表示<code>CLOSE</code>(包含,大於等於或小於等於)<br> (1,6] , 代表這個區間大於1小於等於6,包含的整數有 2、3、4、5、6<br> [-2,4), 代表這個區間大於等於-2小於4,包含的整數有-2、-1、0、1、2、3</p>\n<p><img src=\"https://i.imgur.com/TDHhx0A.png\" alt=\"\"></p>\n<p>這題比較單純,只需要考慮所有的情況,<br>並且寫成單元測試即可。</p>\n<ol>\n<li>x 落在區間內</li>\n<li>x 落在左邊界外</li>\n<li>x 落在右邊界外</li>\n<li>x 落在左邊界上,左邊界為<code>OPEN</code></li>\n<li>x 落在左邊界上,左邊界為<code>CLOSE</code></li>\n<li>x 落在右邊界上,右邊界為<code>OPEN</code></li>\n<li>x 落在右邊界上,右邊界為<code>CLOSE</code></li>\n</ol>\n<p>有幾種特殊的情境,特別說明一下</p>\n<ol>\n<li>假設區間為(0,1),這個區間是不包含任何整數</li>\n<li>假設區間為(1,1),這個區間是不包含任何整數,且不包含任何數值</li>\n<li>假設區間為[1,1],這個區間恰巧包含1個整數,且只包含1這個整數</li>\n<li>假設”區間”為[2,1],或任何左邊界大右邊界的表示,這不是一個正確的區間,將要作例外處理。</li>\n</ol>\n<p>讓我們回歸單元測試,<br>這裡的重點是<strong>一個測試只作一件事</strong>,<br>只把一個情境釐清,並且在測試的程式碼中<br><strong>明確的表達測試目的</strong></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> leftBound = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> rightBound = <span class=\"number\">6</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> testNum = <span class=\"number\">4</span>;</div><div class=\"line\"></div><div class=\"line\">[TestMethod]</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">IncludeWhenLeftOpenRightClose</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> checker = <span class=\"keyword\">new</span> RangeChecker(Bound.Open,<span class=\"keyword\">this</span>.leftBound,Bound.Close,<span class=\"keyword\">this</span>.rightBound);</div><div class=\"line\">    <span class=\"keyword\">bool</span> expect = <span class=\"literal\">false</span>;            </div><div class=\"line\">    <span class=\"keyword\">bool</span> result = checker.IsContains(testNum);</div><div class=\"line\">    Assert.IsTrue(result);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"案例二、現在時間轉字串\"><a href=\"#案例二、現在時間轉字串\" class=\"headerlink\" title=\"案例二、現在時間轉字串\"></a>案例二、現在時間轉字串</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">寫一個方法GetNowString,不傳入任何參數,</div><div class=\"line\">取得現在的時間字串,需要精準到豪秒。</div><div class=\"line\">再寫一個測試去測試這個方法是對的‧</div></pre></td></tr></table></figure>\n<h3 id=\"版本1\"><a href=\"#版本1\" class=\"headerlink\" title=\"版本1\"></a>版本1</h3><p>最簡單的寫法:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DateHelper</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetNowString</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> DateTime.Now.ToString(<span class=\"string\">\"yyyy-MM-dd hh:mm:ss ff\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>撰寫測試<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">[TestMethod]</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">GetNowString</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> </div><div class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span>/ 寫不下去,因為我們無法凍結系統的時間</span></div><div class=\"line\">\t<span class=\"keyword\">string</span> expect = <span class=\"string\">\"2017-04-19 20:45:17.88\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">string</span> result = dater.GetNowString();</div><div class=\"line\">\tAssert.AreEqual(expect, result);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"解析-1\"><a href=\"#解析-1\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p><code>GetNowString</code>與系統的時間<code>DateTime.Now</code>,<br>是具有耦合性,要解耦需要透過一些IoC的手段去處理。</p>\n<h3 id=\"版本2\"><a href=\"#版本2\" class=\"headerlink\" title=\"版本2\"></a>版本2</h3><p>利用繼承的方法,作出假的類別<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DateHelper</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">protected</span> DateTime now;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">virtual</span> DateTime <span class=\"title\">GetNow</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tnow = DateTime.Now;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> now;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetNowString</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tGetNow();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> now.ToString(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss.ff\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">StubDateHelper</span>: <span class=\"title\">DateHelper</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> DateTime <span class=\"title\">GetNow</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> now;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SetNow</span>(<span class=\"params\">DateTime datetime</span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tnow = datetime;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>撰寫測試<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[TestMethod]</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">GetNowString</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">\tStubDateHelper dateHelper = <span class=\"keyword\">new</span> StubDateHelper();</div><div class=\"line\">\t<span class=\"keyword\">var</span> fakeNow = <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2017</span>,<span class=\"number\">4</span>,<span class=\"number\">19</span>,<span class=\"number\">20</span>,<span class=\"number\">45</span>,<span class=\"number\">17</span>,<span class=\"number\">880</span>);</div><div class=\"line\">\tdateHelper.SetNow(fakeNow);</div><div class=\"line\">\t<span class=\"keyword\">string</span> expect = <span class=\"string\">\"2017-04-19 20:45:17.88\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">string</span> result = dateHelper.GetNowString();</div><div class=\"line\">\tAssert.AreEqual(expect, result);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"解析-2\"><a href=\"#解析-2\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>基本上這樣就可以測試了,<br>原來的代碼,經過一定的重構,<br>透過<code>virtual</code>方法GetNow,<br>將<code>Datetime.Now</code>作了隔離<br>適當利用假類別,取代掉GetNow的方法。</p>\n<p>這樣夠好了,但是我們可以看看另一種作法</p>\n<h3 id=\"版本3\"><a href=\"#版本3\" class=\"headerlink\" title=\"版本3\"></a>版本3</h3><p>先看看我們的<code>DateHelper</code>,<br>在這裡我們將GetNow交由IDateProvider的類別去實作,<br>如此一來就斷開了耦合性。<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DateHelper</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> IDateProvider DateProvider;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DateHelper</span>(<span class=\"params\">IDateProvider dateProvider</span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.DateProvider = dateProvider;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetNowString</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> now = <span class=\"keyword\">this</span>.DateProvider.GetNow();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> now.ToString(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss.ff\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>實作IDateProvider的類別,<br>在這裡其實不重要.<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DateProviderV1</span> : <span class=\"title\">IDateProvider</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> DateTime <span class=\"title\">GetNow</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> DateTime.Now;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>讓我們看看測試,<br>在這裡我們透過一個假的<code>IDateProvider</code>的實作<code>DateProviderStub</code>,<br>完成了測試,<br>IDateProvider將<code>DateTime.Now</code>作了隔離,<br>並且提供更容易修改的假物件(僅僅需要實作觀注的方法即可,不用擔心繼承帶來的附作用)</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[TestMethod]</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">GetNowString</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">\tDateProviderStub dateProvider = <span class=\"keyword\">new</span> DateProviderStub();</div><div class=\"line\">\tdateProvider.now = <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2017</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">20</span>, <span class=\"number\">45</span>, <span class=\"number\">17</span>, <span class=\"number\">880</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> dateHelper = <span class=\"keyword\">new</span> DateHelper(dateProvider);</div><div class=\"line\">\t<span class=\"keyword\">string</span> expect = <span class=\"string\">\"2017-04-19 20:45:17.88\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">string</span> result = dateHelper.GetNowString();</div><div class=\"line\">\tAssert.AreEqual(expect, result);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DateProviderStub</span> : <span class=\"title\">IDateProvider</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> DateTime now;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> DateTime <span class=\"title\">GetNow</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> now;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"圖例解析\"><a href=\"#圖例解析\" class=\"headerlink\" title=\"圖例解析\"></a>圖例解析</h3><p>我們剛剛究竟幹了什麼？<br><img src=\"https://i.imgur.com/qeqzaoO.jpg\" alt=\"\"><br>看看原本的情況,本來的方法因為相依與<code>Datetime</code>而無法測試<br><img src=\"https://i.imgur.com/Mquk1Cm.png\" alt=\"\"><br>讓我們開始下刀,<br>先用一個新的方法<code>GetNow</code><br>將它與待測的方法作分割,<br>但是對整個類來說仍舊是耦合。<br><img src=\"https://i.imgur.com/c0Xg4vw.png\" alt=\"\"><br>繼續把這刀往下切,<br>我們墊一層介面,<br>待測方法不再直接呼叫<code>GetNow</code><br>而是透過介面執行,當然會有額外實作介面與注入的功(請參考程式碼,不在此處繪出了.)<br><img src=\"https://i.imgur.com/8dDlWi2.png\" alt=\"\"><br>最後,別忘了我們的目的<br>測試原本的待測方法,<br>我們可以透過一個<code>假的</code>類,<br>來操控他的行為(ex:凍結時間).<br>如此一來,就可進行測試了.<br><img src=\"https://i.imgur.com/c3mW59v.png\" alt=\"\"><br>另外,這種被待測方法呼叫後<br>會回傳一個假值的方法或類<br>被叫作<code>STUB</code><br><img src=\"https://i.imgur.com/KXvYMsx.png\" alt=\"\"></p>\n<h2 id=\"案例三、發送郵件\"><a href=\"#案例三、發送郵件\" class=\"headerlink\" title=\"案例三、發送郵件\"></a>案例三、發送郵件</h2><p>事先聲明,這題沒有程式碼,<br>有興趣實作的人可以試試看.<br>如果可以分享實作後的資訊給我更好XD<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Q:註冊發送郵件如何寫單元測試？</div></pre></td></tr></table></figure></p>\n<h3 id=\"解析-3\"><a href=\"#解析-3\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>很明顯的發送郵件需要依賴外部的郵件系統,<br>這裡就會有耦合性,我們可以參考案例2的方式解耦<br>不過發送郵件並不會有回傳值,<br>我們要如何驗証正確性呢？</p>\n<p>A:檢查調用次數、參數</p>\n<h3 id=\"圖例解析-1\"><a href=\"#圖例解析-1\" class=\"headerlink\" title=\"圖例解析\"></a>圖例解析</h3><p>在案例2的單元測試,<br>我們透過STUB偽造的回傳值完成測試<br>並執行驗証.<br>但是在沒有回傳的值的方法中(被稱作<code>MOCK</code>)<br>我們只能透過傳遞的參數(如果有多載)<br>與方法被調用的次數來進行驗証。</p>\n<p><img src=\"https://i.imgur.com/zbllutC.png\" alt=\"\"></p>\n<h2 id=\"重點摘要\"><a href=\"#重點摘要\" class=\"headerlink\" title=\"重點摘要\"></a>重點摘要</h2><ul>\n<li>單元測試要能清楚表達測試的目的(<strong>達意</strong>)<ul>\n<li>命名</li>\n<li>減少意外的細節</li>\n</ul>\n</li>\n<li>單元測試一次只作一件事 </li>\n<li>new 本身就是一種邏輯 一種偶合</li>\n<li>static 是一種高偶合</li>\n<li>繼承也是高偶合,能使用繼承的情境很少<ul>\n<li>A is a B 通常只有這種情境才適合繼承</li>\n</ul>\n</li>\n<li>STUB &amp; MOCK<ul>\n<li>STUB 會有回傳值,可以在 Unit Test 作驗証(ASSERT)</li>\n<li>MOCK 沒有回傳值,可以在 MOCK 本身中 作驗証(ASSERT)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><ul>\n<li>SLIM </li>\n<li>注入相依的幾種方式<ul>\n<li>Pool</li>\n<li>Constructor</li>\n<li>Property</li>\n</ul>\n</li>\n<li>書單 : XUnit Test Patterns</li>\n</ul>\n<h2 id=\"直播影片\"><a href=\"#直播影片\" class=\"headerlink\" title=\"直播影片\"></a>直播影片</h2><p><em>如果連結失效,煩請告知.</em></p>\n<ul>\n<li><a href=\"https://www.facebook.com/AgileCommunity.tw/videos/948509765286712/\" target=\"_blank\" rel=\"external\">影片1</a></li>\n<li><a href=\"https://www.facebook.com/AgileCommunity.tw/videos/948548118616210/\" target=\"_blank\" rel=\"external\">影片2</a></li>\n</ul>\n<p>文章內容如有謬誤,煩請指正.</p>\n<p>(fin)</p>\n"},{"title":"[KATA]用typescript作一個簡易的todolist(一) - 前置作業","date":"2016-10-08T02:34:27.000Z","_content":"## 目標\n1. 使用 typescript 開發\n2. 顯示/新增/刪除 todolist \n\n## 功能分析\n1. 只是練習,故不開發server side的程式\n2. 暫時存在 cookie 上\n3. 用 bootstrap 作簡單的樣式\n\n## 實作記錄\n\n### UI : 使用 Bootstrap _沒有必要重新打造輪子,能用的就拿來用_\n- 找到一個TODOLIST的[樣版](http://bootsnipp.com/index.php/snippets/featured/todo-example),內含 HTML 、 CSS 與 JS ,功能完整.\n- 取用[樣版](http://bootsnipp.com/index.php/snippets/featured/todo-example)的HTML .     \n- 引用 bootstrap 3.3.5 CDN上的 css .\n- 建立一個 todo.css 直接引用[樣版](http://bootsnipp.com/index.php/snippets/featured/todo-example)的 css 並加入頁面參考.\n\n\n### 開發環境 \n1. 安裝 typescript  \n`npm install typescript --save`\n2. 安裝 gulp  \n`npm install gulp`\n`npm install --global gulp` \n3. 安裝 gulp-typescript  \n`npm install gulp-typescript`\n4. 建立gulpfile.js \n\n```javascript\nvar gulp = require('gulp');\nvar tsc = require('gulp-typescript');\ngulp.task('default', function() {     \n        return gulp.src('public/javascripts/**/*.ts')\n        .pipe(tsc())\n        .pipe(gulp.dest('public/javascripts/'));\n});\n```\n\n### Typescript\n\n1. 關於 typescript 的定義檔, 以前有 tsd 與 typings兩種管理工具,現在可以更簡便的合併到 npm 作管理 .\n\n2. 透過 [TypeSearch](http://microsoft.github.io/TypeSearch/) 可以找到 [bootstrap](https://www.npmjs.com/package/@types/bootstrap) 的 typescript 定義檔.\n\n3. 執行 `npm install --save @types/bootstrap` 安裝 bootstrap (目前的版本是 Bootstrap 3.3.5) , 因為相依於 jquery 所以也會一併安裝\n\n4. 安裝 jquery-ui 的定義檔  \n`npm install --save @types/jqueryui`\n\n5. 新增檔案 `todo.ts` ,將 [樣版](http://bootsnipp.com/index.php/snippets/featured/todo-example) 的 javascript 複製貼上 .   \n   _*註:因為 typescript 是 javascript 的 superset , 完全可以相容原生 javascript, 如果有任何錯誤, TypeScript將會提示你_\n\n6. todo.ts 引用 jquery 、jquery-ui 與 bootstrap 的 typescript 定義檔.  \n        \n        /// <reference path=\"../../../node_modules/@types/jquery/index.d.ts\"/>  \n        /// <reference path=\"../../../node_modules/@types/bootstrap/index.d.ts\"/>  \n        /// <reference path=\"../../../node_modules/@types/jqueryui/index.d.ts\"/>\n\n7. 頁面載入對應的js檔,記得放置順序 jquery 要在最前面,並將放在`<\\body>`之後  \n        \n        <script src=\"http://code.jquery.com/jquery-2.2.4.min.js\"   integrity=\"sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=\"   crossorigin=\"anonymous\"></script>\n        <script src=\"//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js\"></script>\n        <script src=\"http://code.jquery.com/ui/1.12.1/jquery-ui.min.js\"   integrity=\"sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=\"   crossorigin=\"anonymous\"></script>\n\n8. 執行 `gulp` ,會產生todo.js\n\n7. 頁面載入js檔,記得要放在相依的js( jquery 、 bootstap 、 jqueryui)之後.\n        \n        <script type=\"text/javascript\" src=\"/javascripts/kata/todo.js\"></script>\n\n\n#### 截至目前為止,僅僅是在作複製樣版,同時一併處理一些基本 gulp 與 typescript 相關的配置\n#### 接下來才要開始寫 typescript \n\n(待續)\n\n#### 參考\n\n1. [關於 TypeScript 2.0 之後的模組定義檔 ( Declaration Files ) ( *.d.ts )](http://blog.miniasp.com/post/2016/08/22/TypeScript-Future-Declaration-Files.aspx)\n2. [bootsnipp](http://bootsnipp.com/)\n3. [TYPESCRIPT + EXPRESS + NODE.JS](http://com-brianflove.appspot.com/2016/03/29/typescript-express-node-js/)","source":"_posts/todolist_by_typescript_1.md","raw":"---\ntitle: '[KATA]用typescript作一個簡易的todolist(一) - 前置作業'\ndate: 2016/10/08 10:34:27\ntag: \n- kata\n- typescript\n- bootstrap\n- npm\n- jquery\n- jquery-ui\n---\n## 目標\n1. 使用 typescript 開發\n2. 顯示/新增/刪除 todolist \n\n## 功能分析\n1. 只是練習,故不開發server side的程式\n2. 暫時存在 cookie 上\n3. 用 bootstrap 作簡單的樣式\n\n## 實作記錄\n\n### UI : 使用 Bootstrap _沒有必要重新打造輪子,能用的就拿來用_\n- 找到一個TODOLIST的[樣版](http://bootsnipp.com/index.php/snippets/featured/todo-example),內含 HTML 、 CSS 與 JS ,功能完整.\n- 取用[樣版](http://bootsnipp.com/index.php/snippets/featured/todo-example)的HTML .     \n- 引用 bootstrap 3.3.5 CDN上的 css .\n- 建立一個 todo.css 直接引用[樣版](http://bootsnipp.com/index.php/snippets/featured/todo-example)的 css 並加入頁面參考.\n\n\n### 開發環境 \n1. 安裝 typescript  \n`npm install typescript --save`\n2. 安裝 gulp  \n`npm install gulp`\n`npm install --global gulp` \n3. 安裝 gulp-typescript  \n`npm install gulp-typescript`\n4. 建立gulpfile.js \n\n```javascript\nvar gulp = require('gulp');\nvar tsc = require('gulp-typescript');\ngulp.task('default', function() {     \n        return gulp.src('public/javascripts/**/*.ts')\n        .pipe(tsc())\n        .pipe(gulp.dest('public/javascripts/'));\n});\n```\n\n### Typescript\n\n1. 關於 typescript 的定義檔, 以前有 tsd 與 typings兩種管理工具,現在可以更簡便的合併到 npm 作管理 .\n\n2. 透過 [TypeSearch](http://microsoft.github.io/TypeSearch/) 可以找到 [bootstrap](https://www.npmjs.com/package/@types/bootstrap) 的 typescript 定義檔.\n\n3. 執行 `npm install --save @types/bootstrap` 安裝 bootstrap (目前的版本是 Bootstrap 3.3.5) , 因為相依於 jquery 所以也會一併安裝\n\n4. 安裝 jquery-ui 的定義檔  \n`npm install --save @types/jqueryui`\n\n5. 新增檔案 `todo.ts` ,將 [樣版](http://bootsnipp.com/index.php/snippets/featured/todo-example) 的 javascript 複製貼上 .   \n   _*註:因為 typescript 是 javascript 的 superset , 完全可以相容原生 javascript, 如果有任何錯誤, TypeScript將會提示你_\n\n6. todo.ts 引用 jquery 、jquery-ui 與 bootstrap 的 typescript 定義檔.  \n        \n        /// <reference path=\"../../../node_modules/@types/jquery/index.d.ts\"/>  \n        /// <reference path=\"../../../node_modules/@types/bootstrap/index.d.ts\"/>  \n        /// <reference path=\"../../../node_modules/@types/jqueryui/index.d.ts\"/>\n\n7. 頁面載入對應的js檔,記得放置順序 jquery 要在最前面,並將放在`<\\body>`之後  \n        \n        <script src=\"http://code.jquery.com/jquery-2.2.4.min.js\"   integrity=\"sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=\"   crossorigin=\"anonymous\"></script>\n        <script src=\"//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js\"></script>\n        <script src=\"http://code.jquery.com/ui/1.12.1/jquery-ui.min.js\"   integrity=\"sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=\"   crossorigin=\"anonymous\"></script>\n\n8. 執行 `gulp` ,會產生todo.js\n\n7. 頁面載入js檔,記得要放在相依的js( jquery 、 bootstap 、 jqueryui)之後.\n        \n        <script type=\"text/javascript\" src=\"/javascripts/kata/todo.js\"></script>\n\n\n#### 截至目前為止,僅僅是在作複製樣版,同時一併處理一些基本 gulp 與 typescript 相關的配置\n#### 接下來才要開始寫 typescript \n\n(待續)\n\n#### 參考\n\n1. [關於 TypeScript 2.0 之後的模組定義檔 ( Declaration Files ) ( *.d.ts )](http://blog.miniasp.com/post/2016/08/22/TypeScript-Future-Declaration-Files.aspx)\n2. [bootsnipp](http://bootsnipp.com/)\n3. [TYPESCRIPT + EXPRESS + NODE.JS](http://com-brianflove.appspot.com/2016/03/29/typescript-express-node-js/)","slug":"todolist_by_typescript_1","published":1,"updated":"2016-12-04T17:22:31.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyd7001eyk558pciamst","content":"<h2 id=\"目標\"><a href=\"#目標\" class=\"headerlink\" title=\"目標\"></a>目標</h2><ol>\n<li>使用 typescript 開發</li>\n<li>顯示/新增/刪除 todolist </li>\n</ol>\n<h2 id=\"功能分析\"><a href=\"#功能分析\" class=\"headerlink\" title=\"功能分析\"></a>功能分析</h2><ol>\n<li>只是練習,故不開發server side的程式</li>\n<li>暫時存在 cookie 上</li>\n<li>用 bootstrap 作簡單的樣式</li>\n</ol>\n<h2 id=\"實作記錄\"><a href=\"#實作記錄\" class=\"headerlink\" title=\"實作記錄\"></a>實作記錄</h2><h3 id=\"UI-使用-Bootstrap-沒有必要重新打造輪子-能用的就拿來用\"><a href=\"#UI-使用-Bootstrap-沒有必要重新打造輪子-能用的就拿來用\" class=\"headerlink\" title=\"UI : 使用 Bootstrap 沒有必要重新打造輪子,能用的就拿來用\"></a>UI : 使用 Bootstrap <em>沒有必要重新打造輪子,能用的就拿來用</em></h3><ul>\n<li>找到一個TODOLIST的<a href=\"http://bootsnipp.com/index.php/snippets/featured/todo-example\" target=\"_blank\" rel=\"external\">樣版</a>,內含 HTML 、 CSS 與 JS ,功能完整.</li>\n<li>取用<a href=\"http://bootsnipp.com/index.php/snippets/featured/todo-example\" target=\"_blank\" rel=\"external\">樣版</a>的HTML .     </li>\n<li>引用 bootstrap 3.3.5 CDN上的 css .</li>\n<li>建立一個 todo.css 直接引用<a href=\"http://bootsnipp.com/index.php/snippets/featured/todo-example\" target=\"_blank\" rel=\"external\">樣版</a>的 css 並加入頁面參考.</li>\n</ul>\n<h3 id=\"開發環境\"><a href=\"#開發環境\" class=\"headerlink\" title=\"開發環境\"></a>開發環境</h3><ol>\n<li>安裝 typescript<br><code>npm install typescript --save</code></li>\n<li>安裝 gulp<br><code>npm install gulp</code><br><code>npm install --global gulp</code> </li>\n<li>安裝 gulp-typescript<br><code>npm install gulp-typescript</code></li>\n<li>建立gulpfile.js </li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> tsc = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-typescript'</span>);</div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;     </div><div class=\"line\">        <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'public/javascripts/**/*.ts'</span>)</div><div class=\"line\">        .pipe(tsc())</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'public/javascripts/'</span>));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"Typescript\"><a href=\"#Typescript\" class=\"headerlink\" title=\"Typescript\"></a>Typescript</h3><ol>\n<li><p>關於 typescript 的定義檔, 以前有 tsd 與 typings兩種管理工具,現在可以更簡便的合併到 npm 作管理 .</p>\n</li>\n<li><p>透過 <a href=\"http://microsoft.github.io/TypeSearch/\" target=\"_blank\" rel=\"external\">TypeSearch</a> 可以找到 <a href=\"https://www.npmjs.com/package/@types/bootstrap\" target=\"_blank\" rel=\"external\">bootstrap</a> 的 typescript 定義檔.</p>\n</li>\n<li><p>執行 <code>npm install --save @types/bootstrap</code> 安裝 bootstrap (目前的版本是 Bootstrap 3.3.5) , 因為相依於 jquery 所以也會一併安裝</p>\n</li>\n<li><p>安裝 jquery-ui 的定義檔<br><code>npm install --save @types/jqueryui</code></p>\n</li>\n<li><p>新增檔案 <code>todo.ts</code> ,將 <a href=\"http://bootsnipp.com/index.php/snippets/featured/todo-example\" target=\"_blank\" rel=\"external\">樣版</a> 的 javascript 複製貼上 .<br><em>*註:因為 typescript 是 javascript 的 superset , 完全可以相容原生 javascript, 如果有任何錯誤, TypeScript將會提示你</em></p>\n</li>\n<li><p>todo.ts 引用 jquery 、jquery-ui 與 bootstrap 的 typescript 定義檔.  </p>\n<pre><code>/// &lt;reference path=&quot;../../../node_modules/@types/jquery/index.d.ts&quot;/&gt;  \n/// &lt;reference path=&quot;../../../node_modules/@types/bootstrap/index.d.ts&quot;/&gt;  \n/// &lt;reference path=&quot;../../../node_modules/@types/jqueryui/index.d.ts&quot;/&gt;\n</code></pre></li>\n<li><p>頁面載入對應的js檔,記得放置順序 jquery 要在最前面,並將放在<code>&lt;\\body&gt;</code>之後  </p>\n<pre><code>&lt;script src=&quot;http://code.jquery.com/jquery-2.2.4.min.js&quot;   integrity=&quot;sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=&quot;   crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;http://code.jquery.com/ui/1.12.1/jquery-ui.min.js&quot;   integrity=&quot;sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=&quot;   crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;\n</code></pre></li>\n<li><p>執行 <code>gulp</code> ,會產生todo.js</p>\n</li>\n<li><p>頁面載入js檔,記得要放在相依的js( jquery 、 bootstap 、 jqueryui)之後.</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;/javascripts/kata/todo.js&quot;&gt;&lt;/script&gt;\n</code></pre></li>\n</ol>\n<h4 id=\"截至目前為止-僅僅是在作複製樣版-同時一併處理一些基本-gulp-與-typescript-相關的配置\"><a href=\"#截至目前為止-僅僅是在作複製樣版-同時一併處理一些基本-gulp-與-typescript-相關的配置\" class=\"headerlink\" title=\"截至目前為止,僅僅是在作複製樣版,同時一併處理一些基本 gulp 與 typescript 相關的配置\"></a>截至目前為止,僅僅是在作複製樣版,同時一併處理一些基本 gulp 與 typescript 相關的配置</h4><h4 id=\"接下來才要開始寫-typescript\"><a href=\"#接下來才要開始寫-typescript\" class=\"headerlink\" title=\"接下來才要開始寫 typescript\"></a>接下來才要開始寫 typescript</h4><p>(待續)</p>\n<h4 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h4><ol>\n<li><a href=\"http://blog.miniasp.com/post/2016/08/22/TypeScript-Future-Declaration-Files.aspx\" target=\"_blank\" rel=\"external\">關於 TypeScript 2.0 之後的模組定義檔 ( Declaration Files ) ( *.d.ts )</a></li>\n<li><a href=\"http://bootsnipp.com/\" target=\"_blank\" rel=\"external\">bootsnipp</a></li>\n<li><a href=\"http://com-brianflove.appspot.com/2016/03/29/typescript-express-node-js/\" target=\"_blank\" rel=\"external\">TYPESCRIPT + EXPRESS + NODE.JS</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"目標\"><a href=\"#目標\" class=\"headerlink\" title=\"目標\"></a>目標</h2><ol>\n<li>使用 typescript 開發</li>\n<li>顯示/新增/刪除 todolist </li>\n</ol>\n<h2 id=\"功能分析\"><a href=\"#功能分析\" class=\"headerlink\" title=\"功能分析\"></a>功能分析</h2><ol>\n<li>只是練習,故不開發server side的程式</li>\n<li>暫時存在 cookie 上</li>\n<li>用 bootstrap 作簡單的樣式</li>\n</ol>\n<h2 id=\"實作記錄\"><a href=\"#實作記錄\" class=\"headerlink\" title=\"實作記錄\"></a>實作記錄</h2><h3 id=\"UI-使用-Bootstrap-沒有必要重新打造輪子-能用的就拿來用\"><a href=\"#UI-使用-Bootstrap-沒有必要重新打造輪子-能用的就拿來用\" class=\"headerlink\" title=\"UI : 使用 Bootstrap 沒有必要重新打造輪子,能用的就拿來用\"></a>UI : 使用 Bootstrap <em>沒有必要重新打造輪子,能用的就拿來用</em></h3><ul>\n<li>找到一個TODOLIST的<a href=\"http://bootsnipp.com/index.php/snippets/featured/todo-example\" target=\"_blank\" rel=\"external\">樣版</a>,內含 HTML 、 CSS 與 JS ,功能完整.</li>\n<li>取用<a href=\"http://bootsnipp.com/index.php/snippets/featured/todo-example\" target=\"_blank\" rel=\"external\">樣版</a>的HTML .     </li>\n<li>引用 bootstrap 3.3.5 CDN上的 css .</li>\n<li>建立一個 todo.css 直接引用<a href=\"http://bootsnipp.com/index.php/snippets/featured/todo-example\" target=\"_blank\" rel=\"external\">樣版</a>的 css 並加入頁面參考.</li>\n</ul>\n<h3 id=\"開發環境\"><a href=\"#開發環境\" class=\"headerlink\" title=\"開發環境\"></a>開發環境</h3><ol>\n<li>安裝 typescript<br><code>npm install typescript --save</code></li>\n<li>安裝 gulp<br><code>npm install gulp</code><br><code>npm install --global gulp</code> </li>\n<li>安裝 gulp-typescript<br><code>npm install gulp-typescript</code></li>\n<li>建立gulpfile.js </li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> tsc = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-typescript'</span>);</div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;     </div><div class=\"line\">        <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'public/javascripts/**/*.ts'</span>)</div><div class=\"line\">        .pipe(tsc())</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'public/javascripts/'</span>));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"Typescript\"><a href=\"#Typescript\" class=\"headerlink\" title=\"Typescript\"></a>Typescript</h3><ol>\n<li><p>關於 typescript 的定義檔, 以前有 tsd 與 typings兩種管理工具,現在可以更簡便的合併到 npm 作管理 .</p>\n</li>\n<li><p>透過 <a href=\"http://microsoft.github.io/TypeSearch/\" target=\"_blank\" rel=\"external\">TypeSearch</a> 可以找到 <a href=\"https://www.npmjs.com/package/@types/bootstrap\" target=\"_blank\" rel=\"external\">bootstrap</a> 的 typescript 定義檔.</p>\n</li>\n<li><p>執行 <code>npm install --save @types/bootstrap</code> 安裝 bootstrap (目前的版本是 Bootstrap 3.3.5) , 因為相依於 jquery 所以也會一併安裝</p>\n</li>\n<li><p>安裝 jquery-ui 的定義檔<br><code>npm install --save @types/jqueryui</code></p>\n</li>\n<li><p>新增檔案 <code>todo.ts</code> ,將 <a href=\"http://bootsnipp.com/index.php/snippets/featured/todo-example\" target=\"_blank\" rel=\"external\">樣版</a> 的 javascript 複製貼上 .<br><em>*註:因為 typescript 是 javascript 的 superset , 完全可以相容原生 javascript, 如果有任何錯誤, TypeScript將會提示你</em></p>\n</li>\n<li><p>todo.ts 引用 jquery 、jquery-ui 與 bootstrap 的 typescript 定義檔.  </p>\n<pre><code>/// &lt;reference path=&quot;../../../node_modules/@types/jquery/index.d.ts&quot;/&gt;  \n/// &lt;reference path=&quot;../../../node_modules/@types/bootstrap/index.d.ts&quot;/&gt;  \n/// &lt;reference path=&quot;../../../node_modules/@types/jqueryui/index.d.ts&quot;/&gt;\n</code></pre></li>\n<li><p>頁面載入對應的js檔,記得放置順序 jquery 要在最前面,並將放在<code>&lt;\\body&gt;</code>之後  </p>\n<pre><code>&lt;script src=&quot;http://code.jquery.com/jquery-2.2.4.min.js&quot;   integrity=&quot;sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=&quot;   crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;http://code.jquery.com/ui/1.12.1/jquery-ui.min.js&quot;   integrity=&quot;sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=&quot;   crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;\n</code></pre></li>\n<li><p>執行 <code>gulp</code> ,會產生todo.js</p>\n</li>\n<li><p>頁面載入js檔,記得要放在相依的js( jquery 、 bootstap 、 jqueryui)之後.</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;/javascripts/kata/todo.js&quot;&gt;&lt;/script&gt;\n</code></pre></li>\n</ol>\n<h4 id=\"截至目前為止-僅僅是在作複製樣版-同時一併處理一些基本-gulp-與-typescript-相關的配置\"><a href=\"#截至目前為止-僅僅是在作複製樣版-同時一併處理一些基本-gulp-與-typescript-相關的配置\" class=\"headerlink\" title=\"截至目前為止,僅僅是在作複製樣版,同時一併處理一些基本 gulp 與 typescript 相關的配置\"></a>截至目前為止,僅僅是在作複製樣版,同時一併處理一些基本 gulp 與 typescript 相關的配置</h4><h4 id=\"接下來才要開始寫-typescript\"><a href=\"#接下來才要開始寫-typescript\" class=\"headerlink\" title=\"接下來才要開始寫 typescript\"></a>接下來才要開始寫 typescript</h4><p>(待續)</p>\n<h4 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h4><ol>\n<li><a href=\"http://blog.miniasp.com/post/2016/08/22/TypeScript-Future-Declaration-Files.aspx\" target=\"_blank\" rel=\"external\">關於 TypeScript 2.0 之後的模組定義檔 ( Declaration Files ) ( *.d.ts )</a></li>\n<li><a href=\"http://bootsnipp.com/\" target=\"_blank\" rel=\"external\">bootsnipp</a></li>\n<li><a href=\"http://com-brianflove.appspot.com/2016/03/29/typescript-express-node-js/\" target=\"_blank\" rel=\"external\">TYPESCRIPT + EXPRESS + NODE.JS</a></li>\n</ol>\n"},{"title":"[KATA]用typescript作一個簡易的todolist(二) - 用JQuery實作","date":"2016-10-14T02:34:27.000Z","_content":"## 設計理念\n1. 顯示/新增/刪除 todolist \n2. todolist 會是一堆todoItem的集合,所以要定義todoItem的形別\n    - Content : todoItem 的內容\n    - Status : todoItem 的狀態,完成(done)、未完成(undo) ,設計成列舉\n3. 主要的功能\n    -  建立todoItem\n    -  完成todoItem\n    -  繪製todoList到前端的畫面上\n\n## 自我分析\n跟 UI 耦合太高,Render 應該與 TodoService 分離 ,\nDOM 註冊事件相依在 Service 裡面要抽離也不好抽 。\n沒有先寫測試 , 要想一想怎麼與 UI 層作隔離。\n\n\n\n## 程式碼\n\n  \n\n### 建立 BaseService\n\n```typescript\n    class BaseService<T>{\n        constructor(private type: string) {}\n        \n        List:Array<T> ;\n\n        Create(data: T) {\n            this.List.push(data);\n        }\n\n        Delete(data: T){\n            var index = this.List.indexOf(data);\n            this.List.splice(index,1) ;\n        }\n\n        Render(){\n\n        }\n    }\n\n```\n\n### 建立 todoItem interface\n\n```typescript\ninterface todoItem {\n    Content: string;\n    Status: todoStatus;\n}\n\n```\n\n### 建立 todoItem Status 列舉\n\n```typescript\nenum todoStatus{\n    undo,\n    done,    \n}\n\n```\n\n### 建立 TodoService\n\n```typescript\nclass TodoService extends BaseService<todoItem>{\n    constructor(){\n        super(\"todoItem\");        \n    }\n\n    public Render() : void {\n        let doneHtml = '';\n        let undoHtml = '';\n        \n        this.List.forEach((item)=>{\n            if(item.Status == todoStatus.done){\n                doneHtml += `<li>${item.Content}<button class=\"recover-item btn btn-default btn-xs pull-right\"><span class=\"glyphicon glyphicon-share-alt\"></span></button><button class=\"remove-item btn btn-default btn-xs pull-right\"><span class=\"glyphicon glyphicon-remove\"></span></button></li>`;\n            } else if (item.Status == todoStatus.undo){\n                undoHtml += `<li class=\"ui-state-default\"><div class=\"checkbox\"><label><input type=\"checkbox\" value=\"\" />${item.Content}</label></div></li>` ;\n            }\n        });\n        $(\"#done-items\").html(doneHtml);\n        $('#sortable').html(undoHtml);\n        $('.add-todo').val('');\n    }\n\n    Delete(data: todoItem){\n        data.Status = todoStatus.done ;\n    }\n\n\n\n    Init(){\n        //// todoList in localStorage         \n        var list = window.localStorage.getItem(\"todoList\");        \n        if(!list){\n            this.List = new Array<todoItem>();\n        }else{\n            this.List = JSON.parse(list);\n        }\n        window.onbeforeunload = (evt) => {\n            window.localStorage.setItem(\"todoList\",JSON.stringify(this.List));\n        };\n\n        // mark task as done\n        $('.todolist').on('change','#sortable li input[type=\"checkbox\"]',(evt)=>{\n            var self = evt.target;\n            var text = $(self).parent().text();\n            if($(self).prop('checked')){\n                var doneItem = this.List.filter((i)=>{return text == i.Content;})[0];\n                this.Delete(doneItem);\n                this.Render();\n            }\n        });\n\n        $('.add-todo').on('keypress',(evt) => {\n            evt.preventDefault\n            if (evt.which == 13) {\n                if($(evt.target).val() != ''){\n                    var todo = $(evt.target).val();\n                    this.Create(  {\n                        Content : $(evt.target).val() ,\n                        Status : todoStatus.undo \n                    });\n                    this.Render();                 \n                }else{\n                    // some validation\n                }\n            }\n        });\n        \n        $('.todolist').on('click', '#done-items li button.recover-item',(evt)=>{\n            var text = $(evt.target).parent().parent().text();\n            var recoverItem = this.List.filter((i)=>{return text == i.Content;})[0];\n            recoverItem.Status = todoStatus.undo ;\n            this.Render();\n        });\n\n        $('.todolist').on('click','#done-items li button.remove-item' ,(evt)=>{\n            var text = $(evt.target).parent().parent().text();\n            var removeItem = this.List.filter((i)=>{return text == i.Content;})[0];\n            var index = this.List.indexOf(removeItem);\n            this.List.splice(index,1) ;\n            this.Render();\n        });\n\n        $('#checkAll').on('click',(evt)=>{\n            this.List.forEach((item)=>{\n                item.Status = todoStatus.done;\n            });\n            this.Render();\n        });\n\n        //// Render\n        this.Render();\n    }\n}\n\n```\n\n### 使用建立好的 TodoService\n\n```typescript\nvar todoService = new TodoService();\ntodoService.Init();\n \n```\n\n(fin)","source":"_posts/todolist_by_typescript_2.md","raw":"---\ntitle: '[KATA]用typescript作一個簡易的todolist(二) - 用JQuery實作'\ndate: 2016/10/14 10:34:27\ntag: \n- kata\n- typescript\n- bootstrap\n- npm\n- jquery\n- jquery-ui\n---\n## 設計理念\n1. 顯示/新增/刪除 todolist \n2. todolist 會是一堆todoItem的集合,所以要定義todoItem的形別\n    - Content : todoItem 的內容\n    - Status : todoItem 的狀態,完成(done)、未完成(undo) ,設計成列舉\n3. 主要的功能\n    -  建立todoItem\n    -  完成todoItem\n    -  繪製todoList到前端的畫面上\n\n## 自我分析\n跟 UI 耦合太高,Render 應該與 TodoService 分離 ,\nDOM 註冊事件相依在 Service 裡面要抽離也不好抽 。\n沒有先寫測試 , 要想一想怎麼與 UI 層作隔離。\n\n\n\n## 程式碼\n\n  \n\n### 建立 BaseService\n\n```typescript\n    class BaseService<T>{\n        constructor(private type: string) {}\n        \n        List:Array<T> ;\n\n        Create(data: T) {\n            this.List.push(data);\n        }\n\n        Delete(data: T){\n            var index = this.List.indexOf(data);\n            this.List.splice(index,1) ;\n        }\n\n        Render(){\n\n        }\n    }\n\n```\n\n### 建立 todoItem interface\n\n```typescript\ninterface todoItem {\n    Content: string;\n    Status: todoStatus;\n}\n\n```\n\n### 建立 todoItem Status 列舉\n\n```typescript\nenum todoStatus{\n    undo,\n    done,    \n}\n\n```\n\n### 建立 TodoService\n\n```typescript\nclass TodoService extends BaseService<todoItem>{\n    constructor(){\n        super(\"todoItem\");        \n    }\n\n    public Render() : void {\n        let doneHtml = '';\n        let undoHtml = '';\n        \n        this.List.forEach((item)=>{\n            if(item.Status == todoStatus.done){\n                doneHtml += `<li>${item.Content}<button class=\"recover-item btn btn-default btn-xs pull-right\"><span class=\"glyphicon glyphicon-share-alt\"></span></button><button class=\"remove-item btn btn-default btn-xs pull-right\"><span class=\"glyphicon glyphicon-remove\"></span></button></li>`;\n            } else if (item.Status == todoStatus.undo){\n                undoHtml += `<li class=\"ui-state-default\"><div class=\"checkbox\"><label><input type=\"checkbox\" value=\"\" />${item.Content}</label></div></li>` ;\n            }\n        });\n        $(\"#done-items\").html(doneHtml);\n        $('#sortable').html(undoHtml);\n        $('.add-todo').val('');\n    }\n\n    Delete(data: todoItem){\n        data.Status = todoStatus.done ;\n    }\n\n\n\n    Init(){\n        //// todoList in localStorage         \n        var list = window.localStorage.getItem(\"todoList\");        \n        if(!list){\n            this.List = new Array<todoItem>();\n        }else{\n            this.List = JSON.parse(list);\n        }\n        window.onbeforeunload = (evt) => {\n            window.localStorage.setItem(\"todoList\",JSON.stringify(this.List));\n        };\n\n        // mark task as done\n        $('.todolist').on('change','#sortable li input[type=\"checkbox\"]',(evt)=>{\n            var self = evt.target;\n            var text = $(self).parent().text();\n            if($(self).prop('checked')){\n                var doneItem = this.List.filter((i)=>{return text == i.Content;})[0];\n                this.Delete(doneItem);\n                this.Render();\n            }\n        });\n\n        $('.add-todo').on('keypress',(evt) => {\n            evt.preventDefault\n            if (evt.which == 13) {\n                if($(evt.target).val() != ''){\n                    var todo = $(evt.target).val();\n                    this.Create(  {\n                        Content : $(evt.target).val() ,\n                        Status : todoStatus.undo \n                    });\n                    this.Render();                 \n                }else{\n                    // some validation\n                }\n            }\n        });\n        \n        $('.todolist').on('click', '#done-items li button.recover-item',(evt)=>{\n            var text = $(evt.target).parent().parent().text();\n            var recoverItem = this.List.filter((i)=>{return text == i.Content;})[0];\n            recoverItem.Status = todoStatus.undo ;\n            this.Render();\n        });\n\n        $('.todolist').on('click','#done-items li button.remove-item' ,(evt)=>{\n            var text = $(evt.target).parent().parent().text();\n            var removeItem = this.List.filter((i)=>{return text == i.Content;})[0];\n            var index = this.List.indexOf(removeItem);\n            this.List.splice(index,1) ;\n            this.Render();\n        });\n\n        $('#checkAll').on('click',(evt)=>{\n            this.List.forEach((item)=>{\n                item.Status = todoStatus.done;\n            });\n            this.Render();\n        });\n\n        //// Render\n        this.Render();\n    }\n}\n\n```\n\n### 使用建立好的 TodoService\n\n```typescript\nvar todoService = new TodoService();\ntodoService.Init();\n \n```\n\n(fin)","slug":"todolist_by_typescript_2","published":1,"updated":"2016-12-04T17:22:31.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyda001hyk55av0c6a58","content":"<h2 id=\"設計理念\"><a href=\"#設計理念\" class=\"headerlink\" title=\"設計理念\"></a>設計理念</h2><ol>\n<li>顯示/新增/刪除 todolist </li>\n<li>todolist 會是一堆todoItem的集合,所以要定義todoItem的形別<ul>\n<li>Content : todoItem 的內容</li>\n<li>Status : todoItem 的狀態,完成(done)、未完成(undo) ,設計成列舉</li>\n</ul>\n</li>\n<li>主要的功能<ul>\n<li>建立todoItem</li>\n<li>完成todoItem</li>\n<li>繪製todoList到前端的畫面上</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"自我分析\"><a href=\"#自我分析\" class=\"headerlink\" title=\"自我分析\"></a>自我分析</h2><p>跟 UI 耦合太高,Render 應該與 TodoService 分離 ,<br>DOM 註冊事件相依在 Service 裡面要抽離也不好抽 。<br>沒有先寫測試 , 要想一想怎麼與 UI 層作隔離。</p>\n<h2 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h2><h3 id=\"建立-BaseService\"><a href=\"#建立-BaseService\" class=\"headerlink\" title=\"建立 BaseService\"></a>建立 BaseService</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> BaseService&lt;T&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(private type: string) &#123;&#125;</div><div class=\"line\">    </div><div class=\"line\">    List:<span class=\"built_in\">Array</span>&lt;T&gt; ;</div><div class=\"line\"></div><div class=\"line\">    Create(data: T) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.List.push(data);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Delete(data: T)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> index = <span class=\"keyword\">this</span>.List.indexOf(data);</div><div class=\"line\">        <span class=\"keyword\">this</span>.List.splice(index,<span class=\"number\">1</span>) ;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Render()&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"建立-todoItem-interface\"><a href=\"#建立-todoItem-interface\" class=\"headerlink\" title=\"建立 todoItem interface\"></a>建立 todoItem interface</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> todoItem &#123;</div><div class=\"line\">    Content: <span class=\"built_in\">string</span>;</div><div class=\"line\">    Status: todoStatus;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"建立-todoItem-Status-列舉\"><a href=\"#建立-todoItem-Status-列舉\" class=\"headerlink\" title=\"建立 todoItem Status 列舉\"></a>建立 todoItem Status 列舉</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">enum</span> todoStatus&#123;</div><div class=\"line\">    undo,</div><div class=\"line\">    done,    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"建立-TodoService\"><a href=\"#建立-TodoService\" class=\"headerlink\" title=\"建立 TodoService\"></a>建立 TodoService</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> TodoService extends BaseService&lt;todoItem&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">\"todoItem\"</span>);        </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Render() : <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> doneHtml = <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"keyword\">let</span> undoHtml = <span class=\"string\">''</span>;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">this</span>.List.forEach((item)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(item.Status == todoStatus.done)&#123;</div><div class=\"line\">                doneHtml += <span class=\"string\">`&lt;li&gt;<span class=\"subst\">$&#123;item.Content&#125;</span>&lt;button class=\"recover-item btn btn-default btn-xs pull-right\"&gt;&lt;span class=\"glyphicon glyphicon-share-alt\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;button class=\"remove-item btn btn-default btn-xs pull-right\"&gt;&lt;span class=\"glyphicon glyphicon-remove\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt;`</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.Status == todoStatus.undo)&#123;</div><div class=\"line\">                undoHtml += <span class=\"string\">`&lt;li class=\"ui-state-default\"&gt;&lt;div class=\"checkbox\"&gt;&lt;label&gt;&lt;input type=\"checkbox\" value=\"\" /&gt;<span class=\"subst\">$&#123;item.Content&#125;</span>&lt;/label&gt;&lt;/div&gt;&lt;/li&gt;`</span> ;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        $(<span class=\"string\">\"#done-items\"</span>).html(doneHtml);</div><div class=\"line\">        $(<span class=\"string\">'#sortable'</span>).html(undoHtml);</div><div class=\"line\">        $(<span class=\"string\">'.add-todo'</span>).val(<span class=\"string\">''</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Delete(data: todoItem)&#123;</div><div class=\"line\">        data.Status = todoStatus.done ;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    Init()&#123;</div><div class=\"line\">        <span class=\"comment\">//// todoList in localStorage         </span></div><div class=\"line\">        <span class=\"keyword\">var</span> list = <span class=\"built_in\">window</span>.localStorage.getItem(<span class=\"string\">\"todoList\"</span>);        </div><div class=\"line\">        <span class=\"keyword\">if</span>(!list)&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.List = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>&lt;todoItem&gt;();</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.List = <span class=\"built_in\">JSON</span>.parse(list);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">window</span>.onbeforeunload = (evt) =&gt; &#123;</div><div class=\"line\">            <span class=\"built_in\">window</span>.localStorage.setItem(<span class=\"string\">\"todoList\"</span>,<span class=\"built_in\">JSON</span>.stringify(<span class=\"keyword\">this</span>.List));</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// mark task as done</span></div><div class=\"line\">        $(<span class=\"string\">'.todolist'</span>).on(<span class=\"string\">'change'</span>,<span class=\"string\">'#sortable li input[type=\"checkbox\"]'</span>,(evt)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> self = evt.target;</div><div class=\"line\">            <span class=\"keyword\">var</span> text = $(self).parent().text();</div><div class=\"line\">            <span class=\"keyword\">if</span>($(self).prop(<span class=\"string\">'checked'</span>))&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> doneItem = <span class=\"keyword\">this</span>.List.filter((i)=&gt;&#123;<span class=\"keyword\">return</span> text == i.Content;&#125;)[<span class=\"number\">0</span>];</div><div class=\"line\">                <span class=\"keyword\">this</span>.Delete(doneItem);</div><div class=\"line\">                <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        $(<span class=\"string\">'.add-todo'</span>).on(<span class=\"string\">'keypress'</span>,(evt) =&gt; &#123;</div><div class=\"line\">            evt.preventDefault</div><div class=\"line\">            <span class=\"keyword\">if</span> (evt.which == <span class=\"number\">13</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>($(evt.target).val() != <span class=\"string\">''</span>)&#123;</div><div class=\"line\">                    <span class=\"keyword\">var</span> todo = $(evt.target).val();</div><div class=\"line\">                    <span class=\"keyword\">this</span>.Create(  &#123;</div><div class=\"line\">                        Content : $(evt.target).val() ,</div><div class=\"line\">                        Status : todoStatus.undo </div><div class=\"line\">                    &#125;);</div><div class=\"line\">                    <span class=\"keyword\">this</span>.Render();                 </div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    <span class=\"comment\">// some validation</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        $(<span class=\"string\">'.todolist'</span>).on(<span class=\"string\">'click'</span>, <span class=\"string\">'#done-items li button.recover-item'</span>,(evt)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> text = $(evt.target).parent().parent().text();</div><div class=\"line\">            <span class=\"keyword\">var</span> recoverItem = <span class=\"keyword\">this</span>.List.filter((i)=&gt;&#123;<span class=\"keyword\">return</span> text == i.Content;&#125;)[<span class=\"number\">0</span>];</div><div class=\"line\">            recoverItem.Status = todoStatus.undo ;</div><div class=\"line\">            <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        $(<span class=\"string\">'.todolist'</span>).on(<span class=\"string\">'click'</span>,<span class=\"string\">'#done-items li button.remove-item'</span> ,(evt)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> text = $(evt.target).parent().parent().text();</div><div class=\"line\">            <span class=\"keyword\">var</span> removeItem = <span class=\"keyword\">this</span>.List.filter((i)=&gt;&#123;<span class=\"keyword\">return</span> text == i.Content;&#125;)[<span class=\"number\">0</span>];</div><div class=\"line\">            <span class=\"keyword\">var</span> index = <span class=\"keyword\">this</span>.List.indexOf(removeItem);</div><div class=\"line\">            <span class=\"keyword\">this</span>.List.splice(index,<span class=\"number\">1</span>) ;</div><div class=\"line\">            <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        $(<span class=\"string\">'#checkAll'</span>).on(<span class=\"string\">'click'</span>,(evt)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.List.forEach((item)=&gt;&#123;</div><div class=\"line\">                item.Status = todoStatus.done;</div><div class=\"line\">            &#125;);</div><div class=\"line\">            <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//// Render</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用建立好的-TodoService\"><a href=\"#使用建立好的-TodoService\" class=\"headerlink\" title=\"使用建立好的 TodoService\"></a>使用建立好的 TodoService</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> todoService = <span class=\"keyword\">new</span> TodoService();</div><div class=\"line\">todoService.Init();</div></pre></td></tr></table></figure>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"設計理念\"><a href=\"#設計理念\" class=\"headerlink\" title=\"設計理念\"></a>設計理念</h2><ol>\n<li>顯示/新增/刪除 todolist </li>\n<li>todolist 會是一堆todoItem的集合,所以要定義todoItem的形別<ul>\n<li>Content : todoItem 的內容</li>\n<li>Status : todoItem 的狀態,完成(done)、未完成(undo) ,設計成列舉</li>\n</ul>\n</li>\n<li>主要的功能<ul>\n<li>建立todoItem</li>\n<li>完成todoItem</li>\n<li>繪製todoList到前端的畫面上</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"自我分析\"><a href=\"#自我分析\" class=\"headerlink\" title=\"自我分析\"></a>自我分析</h2><p>跟 UI 耦合太高,Render 應該與 TodoService 分離 ,<br>DOM 註冊事件相依在 Service 裡面要抽離也不好抽 。<br>沒有先寫測試 , 要想一想怎麼與 UI 層作隔離。</p>\n<h2 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h2><h3 id=\"建立-BaseService\"><a href=\"#建立-BaseService\" class=\"headerlink\" title=\"建立 BaseService\"></a>建立 BaseService</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> BaseService&lt;T&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(private type: string) &#123;&#125;</div><div class=\"line\">    </div><div class=\"line\">    List:<span class=\"built_in\">Array</span>&lt;T&gt; ;</div><div class=\"line\"></div><div class=\"line\">    Create(data: T) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.List.push(data);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Delete(data: T)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> index = <span class=\"keyword\">this</span>.List.indexOf(data);</div><div class=\"line\">        <span class=\"keyword\">this</span>.List.splice(index,<span class=\"number\">1</span>) ;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Render()&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"建立-todoItem-interface\"><a href=\"#建立-todoItem-interface\" class=\"headerlink\" title=\"建立 todoItem interface\"></a>建立 todoItem interface</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> todoItem &#123;</div><div class=\"line\">    Content: <span class=\"built_in\">string</span>;</div><div class=\"line\">    Status: todoStatus;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"建立-todoItem-Status-列舉\"><a href=\"#建立-todoItem-Status-列舉\" class=\"headerlink\" title=\"建立 todoItem Status 列舉\"></a>建立 todoItem Status 列舉</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">enum</span> todoStatus&#123;</div><div class=\"line\">    undo,</div><div class=\"line\">    done,    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"建立-TodoService\"><a href=\"#建立-TodoService\" class=\"headerlink\" title=\"建立 TodoService\"></a>建立 TodoService</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> TodoService extends BaseService&lt;todoItem&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">\"todoItem\"</span>);        </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Render() : <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> doneHtml = <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"keyword\">let</span> undoHtml = <span class=\"string\">''</span>;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">this</span>.List.forEach((item)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(item.Status == todoStatus.done)&#123;</div><div class=\"line\">                doneHtml += <span class=\"string\">`&lt;li&gt;<span class=\"subst\">$&#123;item.Content&#125;</span>&lt;button class=\"recover-item btn btn-default btn-xs pull-right\"&gt;&lt;span class=\"glyphicon glyphicon-share-alt\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;button class=\"remove-item btn btn-default btn-xs pull-right\"&gt;&lt;span class=\"glyphicon glyphicon-remove\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt;`</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.Status == todoStatus.undo)&#123;</div><div class=\"line\">                undoHtml += <span class=\"string\">`&lt;li class=\"ui-state-default\"&gt;&lt;div class=\"checkbox\"&gt;&lt;label&gt;&lt;input type=\"checkbox\" value=\"\" /&gt;<span class=\"subst\">$&#123;item.Content&#125;</span>&lt;/label&gt;&lt;/div&gt;&lt;/li&gt;`</span> ;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        $(<span class=\"string\">\"#done-items\"</span>).html(doneHtml);</div><div class=\"line\">        $(<span class=\"string\">'#sortable'</span>).html(undoHtml);</div><div class=\"line\">        $(<span class=\"string\">'.add-todo'</span>).val(<span class=\"string\">''</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Delete(data: todoItem)&#123;</div><div class=\"line\">        data.Status = todoStatus.done ;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    Init()&#123;</div><div class=\"line\">        <span class=\"comment\">//// todoList in localStorage         </span></div><div class=\"line\">        <span class=\"keyword\">var</span> list = <span class=\"built_in\">window</span>.localStorage.getItem(<span class=\"string\">\"todoList\"</span>);        </div><div class=\"line\">        <span class=\"keyword\">if</span>(!list)&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.List = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>&lt;todoItem&gt;();</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.List = <span class=\"built_in\">JSON</span>.parse(list);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">window</span>.onbeforeunload = (evt) =&gt; &#123;</div><div class=\"line\">            <span class=\"built_in\">window</span>.localStorage.setItem(<span class=\"string\">\"todoList\"</span>,<span class=\"built_in\">JSON</span>.stringify(<span class=\"keyword\">this</span>.List));</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// mark task as done</span></div><div class=\"line\">        $(<span class=\"string\">'.todolist'</span>).on(<span class=\"string\">'change'</span>,<span class=\"string\">'#sortable li input[type=\"checkbox\"]'</span>,(evt)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> self = evt.target;</div><div class=\"line\">            <span class=\"keyword\">var</span> text = $(self).parent().text();</div><div class=\"line\">            <span class=\"keyword\">if</span>($(self).prop(<span class=\"string\">'checked'</span>))&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> doneItem = <span class=\"keyword\">this</span>.List.filter((i)=&gt;&#123;<span class=\"keyword\">return</span> text == i.Content;&#125;)[<span class=\"number\">0</span>];</div><div class=\"line\">                <span class=\"keyword\">this</span>.Delete(doneItem);</div><div class=\"line\">                <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        $(<span class=\"string\">'.add-todo'</span>).on(<span class=\"string\">'keypress'</span>,(evt) =&gt; &#123;</div><div class=\"line\">            evt.preventDefault</div><div class=\"line\">            <span class=\"keyword\">if</span> (evt.which == <span class=\"number\">13</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>($(evt.target).val() != <span class=\"string\">''</span>)&#123;</div><div class=\"line\">                    <span class=\"keyword\">var</span> todo = $(evt.target).val();</div><div class=\"line\">                    <span class=\"keyword\">this</span>.Create(  &#123;</div><div class=\"line\">                        Content : $(evt.target).val() ,</div><div class=\"line\">                        Status : todoStatus.undo </div><div class=\"line\">                    &#125;);</div><div class=\"line\">                    <span class=\"keyword\">this</span>.Render();                 </div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    <span class=\"comment\">// some validation</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        $(<span class=\"string\">'.todolist'</span>).on(<span class=\"string\">'click'</span>, <span class=\"string\">'#done-items li button.recover-item'</span>,(evt)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> text = $(evt.target).parent().parent().text();</div><div class=\"line\">            <span class=\"keyword\">var</span> recoverItem = <span class=\"keyword\">this</span>.List.filter((i)=&gt;&#123;<span class=\"keyword\">return</span> text == i.Content;&#125;)[<span class=\"number\">0</span>];</div><div class=\"line\">            recoverItem.Status = todoStatus.undo ;</div><div class=\"line\">            <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        $(<span class=\"string\">'.todolist'</span>).on(<span class=\"string\">'click'</span>,<span class=\"string\">'#done-items li button.remove-item'</span> ,(evt)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> text = $(evt.target).parent().parent().text();</div><div class=\"line\">            <span class=\"keyword\">var</span> removeItem = <span class=\"keyword\">this</span>.List.filter((i)=&gt;&#123;<span class=\"keyword\">return</span> text == i.Content;&#125;)[<span class=\"number\">0</span>];</div><div class=\"line\">            <span class=\"keyword\">var</span> index = <span class=\"keyword\">this</span>.List.indexOf(removeItem);</div><div class=\"line\">            <span class=\"keyword\">this</span>.List.splice(index,<span class=\"number\">1</span>) ;</div><div class=\"line\">            <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        $(<span class=\"string\">'#checkAll'</span>).on(<span class=\"string\">'click'</span>,(evt)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.List.forEach((item)=&gt;&#123;</div><div class=\"line\">                item.Status = todoStatus.done;</div><div class=\"line\">            &#125;);</div><div class=\"line\">            <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//// Render</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用建立好的-TodoService\"><a href=\"#使用建立好的-TodoService\" class=\"headerlink\" title=\"使用建立好的 TodoService\"></a>使用建立好的 TodoService</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> todoService = <span class=\"keyword\">new</span> TodoService();</div><div class=\"line\">todoService.Init();</div></pre></td></tr></table></figure>\n<p>(fin)</p>\n"},{"title":"FileStream正確的使用FileAccess與FileShare參數","_content":"## 前情提要\n使用FileStream存取檔案是基本功,但是沒有了解底層細節,\n在多執行緒同時存取與編輯檔案時,將會引爆咬檔地雷。\n\n\n\n## 加碼 HttpContent 與 Stream\n\n\n## 測試工具 `LinqPad`\n\n## 參考\n- https://stackoverflow.com/questions/25097773/system-io-filestream-fileaccess-vs-fileshare\n- https://referencesource.microsoft.com/#q=FileStream","source":"_drafts/dotNet_filestream.md","raw":"---\ntitle: FileStream正確的使用FileAccess與FileShare參數\ntag:\n  - .Net Framework\n  - IO\n  - 記錄\n---\n## 前情提要\n使用FileStream存取檔案是基本功,但是沒有了解底層細節,\n在多執行緒同時存取與編輯檔案時,將會引爆咬檔地雷。\n\n\n\n## 加碼 HttpContent 與 Stream\n\n\n## 測試工具 `LinqPad`\n\n## 參考\n- https://stackoverflow.com/questions/25097773/system-io-filestream-fileaccess-vs-fileshare\n- https://referencesource.microsoft.com/#q=FileStream","slug":"dotNet_filestream","published":0,"date":"2016-12-04T16:43:46.989Z","updated":"2018-04-04T09:40:37.057Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyfk004zyk55fbbdyi83","content":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><p>使用FileStream存取檔案是基本功,但是沒有了解底層細節,<br>在多執行緒同時存取與編輯檔案時,將會引爆咬檔地雷。</p>\n<h2 id=\"加碼-HttpContent-與-Stream\"><a href=\"#加碼-HttpContent-與-Stream\" class=\"headerlink\" title=\"加碼 HttpContent 與 Stream\"></a>加碼 HttpContent 與 Stream</h2><h2 id=\"測試工具-LinqPad\"><a href=\"#測試工具-LinqPad\" class=\"headerlink\" title=\"測試工具 LinqPad\"></a>測試工具 <code>LinqPad</code></h2><h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://stackoverflow.com/questions/25097773/system-io-filestream-fileaccess-vs-fileshare\" target=\"_blank\" rel=\"external\">https://stackoverflow.com/questions/25097773/system-io-filestream-fileaccess-vs-fileshare</a></li>\n<li><a href=\"https://referencesource.microsoft.com/#q=FileStream\" target=\"_blank\" rel=\"external\">https://referencesource.microsoft.com/#q=FileStream</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><p>使用FileStream存取檔案是基本功,但是沒有了解底層細節,<br>在多執行緒同時存取與編輯檔案時,將會引爆咬檔地雷。</p>\n<h2 id=\"加碼-HttpContent-與-Stream\"><a href=\"#加碼-HttpContent-與-Stream\" class=\"headerlink\" title=\"加碼 HttpContent 與 Stream\"></a>加碼 HttpContent 與 Stream</h2><h2 id=\"測試工具-LinqPad\"><a href=\"#測試工具-LinqPad\" class=\"headerlink\" title=\"測試工具 LinqPad\"></a>測試工具 <code>LinqPad</code></h2><h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://stackoverflow.com/questions/25097773/system-io-filestream-fileaccess-vs-fileshare\" target=\"_blank\" rel=\"external\">https://stackoverflow.com/questions/25097773/system-io-filestream-fileaccess-vs-fileshare</a></li>\n<li><a href=\"https://referencesource.microsoft.com/#q=FileStream\" target=\"_blank\" rel=\"external\">https://referencesource.microsoft.com/#q=FileStream</a></li>\n</ul>\n"},{"title":"ASP.Net 執行緒 概觀","date":"2016-11-04T03:49:17.000Z","_content":"## 學習筆記\n\n1. 非同步與多執行緒應用的場景並不同,不該混淆\n2. 在單核的情況下,windows會分配片段的時間\n\n\n\n## 參考\n- [Threading](https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx)\n- https://stackoverflow.com/questions/4844637/what-is-the-difference-between-concurrency-parallelism-and-asynchronous-methods","source":"_drafts/workerthread_and_iothread_2.md","raw":"---\ntitle: ASP.Net 執行緒 概觀\ndate: 2016/11/04 11:49:17\ntag:\n  - .Net Framework\n  - Thread Pool\n  - ASP.Net\n---\n## 學習筆記\n\n1. 非同步與多執行緒應用的場景並不同,不該混淆\n2. 在單核的情況下,windows會分配片段的時間\n\n\n\n## 參考\n- [Threading](https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx)\n- https://stackoverflow.com/questions/4844637/what-is-the-difference-between-concurrency-parallelism-and-asynchronous-methods","slug":"workerthread_and_iothread_2","published":0,"updated":"2018-04-04T09:44:39.160Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyfm0050yk55dyr0axnm","content":"<h2 id=\"學習筆記\"><a href=\"#學習筆記\" class=\"headerlink\" title=\"學習筆記\"></a>學習筆記</h2><ol>\n<li>非同步與多執行緒應用的場景並不同,不該混淆</li>\n<li>在單核的情況下,windows會分配片段的時間</li>\n</ol>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx\" target=\"_blank\" rel=\"external\">Threading</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4844637/what-is-the-difference-between-concurrency-parallelism-and-asynchronous-methods\" target=\"_blank\" rel=\"external\">https://stackoverflow.com/questions/4844637/what-is-the-difference-between-concurrency-parallelism-and-asynchronous-methods</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"學習筆記\"><a href=\"#學習筆記\" class=\"headerlink\" title=\"學習筆記\"></a>學習筆記</h2><ol>\n<li>非同步與多執行緒應用的場景並不同,不該混淆</li>\n<li>在單核的情況下,windows會分配片段的時間</li>\n</ol>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx\" target=\"_blank\" rel=\"external\">Threading</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4844637/what-is-the-difference-between-concurrency-parallelism-and-asynchronous-methods\" target=\"_blank\" rel=\"external\">https://stackoverflow.com/questions/4844637/what-is-the-difference-between-concurrency-parallelism-and-asynchronous-methods</a></li>\n</ul>\n"},{"title":"實戰 .Net 大量請求與多執行緒(一) 錯誤與原因","date":"2016-11-04T03:49:17.000Z","_content":"## 前情提要\n1. 實務上的專案遭受 DDos 攻擊  \n2. DB TimeOut  \n3. Redis TimeOut  \n4. 主程式沒有死,但是Elmah出現大量Exception  \n\n## 錯誤資訊\n![瞬發的流量](/images/workerthread_and_iothread/110416_102437_AM.jpg)\n\n### Redis的錯誤記錄\n錯誤1.\n```\n    Timeout performing SETEX Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8, \n    inst: 1, mgr: ExecuteSelect, err: never, queue: 2, qu: 2, qs: 0, qc: 0, wr: 0, wq: 0, in: 0, ar: 0, \n    IOCP: (Busy=0,Free=1000,Min=4,Max=1000), WORKER: (Busy=165,Free=32602,Min=4,Max=32767), \n    clientName: TYO-HOST\n```\n錯誤2.\n```\n    StackExchange.Redis.RedisConnectionException\n    SocketFailure on GET\n```\n錯誤3.\n```\n    No connection is available to service this operation: \n    GET Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8\n```\n錯誤4.\n```\n    UnableToResolvePhysicalConnection on GET\n```\n\n### SQL Server 錯誤記錄\n\n```\n    A transport-level error has occurred when receiving results from the server. \n    (provider: Session Provider, error: 19 - Physical connection is not usable)\n```\n\n\n\n## 錯誤原因\n1. CLR 建立執行緒需要時間 , 一秒鐘最多只能建立兩條 Thread [註一](#comment1)\n2. 瞬間的 Request 量超過 ThreadPool 中的 Thread 數量 \n3. ThreadPool 建立 Thread 中 , 仍持續有 Request 進來引發錯誤 \n4. 因為我的[測試環境](#testEnvironment)有四核心,依文件所說\n\n## 實驗流程\n1. 建立監視器\n    參考 [How To: Monitor the ASP.NET Thread Pool Using Custom Counters](https://msdn.microsoft.com/zh-tw/library/ff650682.aspx)\n\n    1. 建立一個 console 專案, [MyAspNetThreadCounters](#MyAspNetThreadCounters)\n    2. 編譯並執行 console 專案\n    3. 開啟`Regedit.exe` 檢查 `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services` 應包含以下值\n\n        ```\n            Available Worker Threads\n            Available IO Threads\n            Max Worker Threads\n            Max IO Threads\n            Min Worker Threads\n            Min IO Threads\n        ```\n\n2. 建立ASP.NET專案\n    1. 建立[Global.asax](#global)\n    2. 建立[StartWebApp.aspx](#startWebApp)\n    3. 建立[Sleep.aspx](#sleep)\n3. 開啟 `perfmon.exe` 新增計數器 , 選取我們自定義的 `MyAspNetThreadCounters`\n4. 連結網頁 `localhost\\StartWebApp.aspx` 以啟動網站,可以得到以下數據\n    ```\n    MaxWorkerThreads:32767.\n    MaxIOThreads:1000.\n    MinWorkerThreads:4.\n    MinIOThreads:4.\n    AvailableWorker:32766.\n    AvailableIO:1000.\n    ```\n5. 執行大量 redis 連線,觀察結果 AvailableWorker Threads 會往下掉,  \n故推斷 redis connection 是透過 Worker Threads 建立.\n\n6. 重現錯誤, 執行大量的 sleep 頁面,透過這種方式搶佔IIS的執行緒.\n![](/images/workerthread_and_iothread/110416_170101_PM.jpg)\n\n7. 再執行大量 redis 連線, 用以重現錯誤\n![](/images/workerthread_and_iothread/110416_170001_PM.jpg)\n\n## 程式碼 \n\n### <span id=\"MyAspNetThreadCounters\">MyAspNetThreadCounters</span>\n```csharp\n  using System;\n  using System.Diagnostics;\n\n  class MyAspNetThreadCounters\n  {\n      [STAThread]\n      static void Main(string[] args)\n      {\n          CreateCounters();\n          Console.WriteLine(\"MyAspNetThreadCounters performance counter category \" +\n                            \"is created. [Press Enter]\");\n          Console.ReadLine();\n      }\n\n      public static void CreateCounters()\n      {\n          CounterCreationDataCollection col =\n            new CounterCreationDataCollection();\n\n          // Create custom counter objects\n          CounterCreationData counter1 = new CounterCreationData();\n          counter1.CounterName = \"Available Worker Threads\";\n          counter1.CounterHelp = \"The difference between the maximum number \" +\n                                \"of thread pool worker threads and the \" +\n                                \"number currently active.\";\n          counter1.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter2 = new CounterCreationData();\n          counter2.CounterName = \"Available IO Threads\";\n          counter2.CounterHelp = \"The difference between the maximum number of \" +\n                                \"thread pool IO threads and the number \" +\n                                \"currently active.\";\n          counter2.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter3 = new CounterCreationData();\n          counter3.CounterName = \"Max Worker Threads\";\n          counter3.CounterHelp = \"The number of requests to the thread pool \" +\n                                \"that can be active concurrently. All \" +\n                                \"requests above that number remain queued until \" +\n                                \"thread pool worker threads become available.\";\n          counter3.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter4 = new CounterCreationData();\n          counter4.CounterName = \"Max IO Threads\";\n          counter4.CounterHelp = \"The number of requests to the thread pool \" +\n                                \"that can be active concurrently. All \" +\n                                \"requests above that number remain queued until \" +\n                                \"thread pool IO threads become available.\";\n          counter4.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter5 = new CounterCreationData();\n          counter5.CounterName = \"Min Worker Threads\";\n          counter5.CounterHelp = \"The number of requests to the thread pool \" +\n                                \"that can be active concurrently. All \" +\n                                \"requests above that number remain queued until \" +\n                                \"thread pool worker threads become available.\";\n          counter5.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter6 = new CounterCreationData();\n          counter6.CounterName = \"Min IO Threads\";\n          counter6.CounterHelp = \"The number of requests to the thread pool \" +\n                                \"that can be active concurrently. All \" +\n                                \"requests above that number remain queued until \" +\n                                \"thread pool IO threads become available.\";\n          counter6.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          // Add custom counter objects to CounterCreationDataCollection.\n          col.Add(counter1);\n          col.Add(counter2);\n          col.Add(counter3);\n          col.Add(counter4);\n          col.Add(counter5);\n          col.Add(counter6);\n\n          // delete the category if it already exists\n          if (PerformanceCounterCategory.Exists(\"MyAspNetThreadCounters\"))\n          {\n              PerformanceCounterCategory.Delete(\"MyAspNetThreadCounters\");\n          }\n          // bind the counters to the PerformanceCounterCategory\n          PerformanceCounterCategory category =\n                  PerformanceCounterCategory.Create(\"MyAspNetThreadCounters\",\"\", col);\n      }\n  }\n```\n\n### <span id=\"global\">Global.asax</span>\n```csharp\n  public class Global : System.Web\n  {\n      //BusyThreads =  TP.GetMaxThreads() –TP.GetAVailable();\n      //If BusyThreads >= TP.GetMinThreads(), then threadpool growth throttling is possible.\n\n      int maxIoThreads, maxWorkerThreads;\n      ThreadPool.GetMaxThreads(out maxWorkerThreads, out maxIoThreads);\n\n      int freeIoThreads, freeWorkerThreads;\n      ThreadPool.GetAvailableThreads(out freeWorkerThreads, out freeIoThreads);\n\n      int minIoThreads, minWorkerThreads;\n      ThreadPool.GetMinThreads(out minWorkerThreads, out minIoThreads);\n\n      int busyIoThreads = maxIoThreads - freeIoThreads;\n      int busyWorkerThreads = maxWorkerThreads - freeWorkerThreads;\n\n      iocp = $\"(Busy={busyIoThreads},Free={freeIoThreads},Min={minIoThreads},Max={maxIoThreads})\";\n      worker = $\"(Busy={busyWorkerThreads},Free={freeWorkerThreads},Min={minWorkerThreads},Max={maxWorkerThreads})\";\n      return busyWorkerThreads;\n  }\n```\n```csharp\n  using System;\n\n  public class Global : System.Web.HttpApplication\n  {\n      public bool MonitorThreadPoolEnabled = true;\n      protected void Application_Start(object sender, EventArgs e)\n      {\n          Thread t = new Thread(new ThreadStart(RefreshCounters));\n          t.Start();\n      }\n  \n      protected void Session_Start(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Application_BeginRequest(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Application_AuthenticateRequest(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Application_Error(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Session_End(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Application_End(object sender, EventArgs e)\n      {\n          MonitorThreadPoolEnabled = false;\n      }\n  \n      public void RefreshCounters()\n      {\n          while (MonitorThreadPoolEnabled)\n          {\n              ASPNETThreadInfo t = GetThreadInfo();\n              ShowPerfCounters(t);\n              System.Threading.Thread.Sleep(500);\n          }\n      }\n  \n      public struct ASPNETThreadInfo\n      {\n          public int MaxWorkerThreads;\n          public int MaxIOThreads;\n          public int MinFreeThreads;\n          public int MinLocalRequestFreeThreads;\n          public int AvailableWorkerThreads;\n          public int AvailableIOThreads;\n  \n          public bool Equals(ASPNETThreadInfo other)\n          {\n              return (\n              MaxWorkerThreads == other.MaxWorkerThreads &&\n              MaxIOThreads == other.MaxIOThreads &&\n              MinFreeThreads == other.MinFreeThreads &&\n              MinLocalRequestFreeThreads == other.MinLocalRequestFreeThreads &&\n              AvailableWorkerThreads == other.AvailableWorkerThreads &&\n              AvailableIOThreads == other.AvailableIOThreads\n              );\n          }\n      }\n  \n      public ASPNETThreadInfo GetThreadInfo()\n      {\n          // use ThreadPool to get the current status\n          int availableWorker, availableIO;\n          int maxWorker, maxIO;\n                      \n          ThreadPool.GetAvailableThreads(out availableWorker, out availableIO);\n          ThreadPool.GetMaxThreads(out maxWorker, out maxIO);            \n          ASPNETThreadInfo threadInfo;\n          threadInfo.AvailableWorkerThreads = (Int16)availableWorker;\n          threadInfo.AvailableIOThreads = (Int16)availableIO;\n          threadInfo.MaxWorkerThreads = (Int16)maxWorker;\n          threadInfo.MaxIOThreads = (Int16)maxIO;            \n          // hard code for now; could get this from  machine.config\n          threadInfo.MinFreeThreads = 8;\n          threadInfo.MinLocalRequestFreeThreads = 4;\n          return threadInfo;\n      }\n  \n      public void ShowPerfCounters(ASPNETThreadInfo t)\n      {\n  \n          // get an instance of our Available Worker Threads counter\n          PerformanceCounter counter1 = new PerformanceCounter();\n          counter1.CategoryName = \"MyAspNetThreadCounters\";\n          counter1.CounterName = \"Available Worker Threads\";\n          counter1.ReadOnly = false;\n  \n          // set the value of the counter\n          counter1.RawValue = t.AvailableWorkerThreads;\n          counter1.Close();\n  \n          // repeat for other counters\n  \n          PerformanceCounter counter2 = new PerformanceCounter();\n          counter2.CategoryName = \"MyAspNetThreadCounters\";\n          counter2.CounterName = \"Available IO Threads\";\n          counter2.ReadOnly = false;\n          counter2.RawValue = t.AvailableIOThreads;\n          counter2.Close();\n  \n          PerformanceCounter counter3 = new PerformanceCounter();\n          counter3.CategoryName = \"MyAspNetThreadCounters\";\n          counter3.CounterName = \"Max Worker Threads\";\n          counter3.ReadOnly = false;\n          counter3.RawValue = t.MaxWorkerThreads;\n          counter3.Close();\n  \n          PerformanceCounter counter4 = new PerformanceCounter();\n          counter4.CategoryName = \"MyAspNetThreadCounters\";\n          counter4.CounterName = \"Max IO Threads\";\n          counter4.ReadOnly = false;\n          counter4.RawValue = t.MaxIOThreads;\n          counter4.Close();\n  \n          int minWorker, minIO;\n          ThreadPool.GetMinThreads(out minWorker, out minIO);\n  \n          PerformanceCounter counter5 = new PerformanceCounter();\n          counter5.CategoryName = \"MyAspNetThreadCounters\";\n          counter5.CounterName = \"Min Worker Threads\";\n          counter5.ReadOnly = false;\n          counter5.RawValue = minWorker;\n          counter5.Close();\n  \n          PerformanceCounter counter6 = new PerformanceCounter();\n          counter6.CategoryName = \"MyAspNetThreadCounters\";\n          counter6.CounterName = \"Min IO Threads\";\n          counter6.ReadOnly = false;\n          counter6.RawValue = minIO;\n          counter6.Close();\n      }\n  }\n```\n\n### <span id=\"startWebApp\">StartWebApp.aspx</span>\n```csharp\n  protected void Page_Load(object sender, EventArgs e)\n  {\n      int availableWorker, availableIO;\n      int maxWorker, maxIO;\n      int minWorker, minIO;\n    \n      ThreadPool.GetAvailableThreads(out availableWorker, out availableIO);\n      ThreadPool.GetMaxThreads(out maxWorker, out maxIO);\n      ThreadPool.GetMinThreads(out minWorker, out minIO);\n\n      Response.Write(\"This ASP.NET application has started.<br>\");\n      Response.Write(string.Format(\"MaxWorkerThreads:{0}.<br>\", maxWorker));\n      Response.Write(string.Format(\"MaxIOThreads:{0}.<br>\", maxIO));\n      Response.Write(string.Format(\"MinWorkerThreads:{0}.<br>\", minWorker));\n      Response.Write(string.Format(\"MinIOThreads:{0}.<br>\", minIO));\n      Response.Write(string.Format(\"AvailableWorker:{0}.<br>\", availableWorker));\n      Response.Write(string.Format(\"AvailableIO:{0}.<br>\", availableIO));\n      Response.Write(\"You can now close this page.\");\n  }\n```\n\n###  <span id=\"sleep\">Sleep.aspx</span>\n```csharp\n  void Page_Load(Object sender, EventArgs e)\n  {\n        int times = 0 ;\n        var max = int.Parse(Request.QueryString.Get(\"max\"));\n        var server = ConnectionMultiplexer.Connect(\"redisserver:6379,ssl=false,password=,allowAdmin=false,connectTimeout=200\");\n        var list = Enumerable.Range(1, max).ToList();\n        Parallel.ForEach(list, (i) =>\n        {\n\n            var database = server.GetDatabase();\n            database.StringGet(\"Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8\");\n            times++;\n        });\n\n        int availableWorker, availableIO;\n        int maxWorker, maxIO;\n        ThreadPool.SetMaxThreads(1, 1);\n        ThreadPool.GetAvailableThreads(out availableWorker, out availableIO);\n        ThreadPool.GetMaxThreads(out maxWorker, out maxIO);\n        Response.Write(String.Format(\"Connect Redis Busy:{0}<br /> {1}\",maxWorker - availableWorker, times));\n  }\n```\n\n### StackExchange.Redis 源碼\n```csharp\n  private static int GetThreadPoolStats(out string iocp, out string worker)\n  {\n      //BusyThreads =  TP.GetMaxThreads() –TP.GetAVailable();\n      //If BusyThreads >= TP.GetMinThreads(), then threadpool growth throttling is possible.\n\n      int maxIoThreads, maxWorkerThreads;\n      ThreadPool.GetMaxThreads(out maxWorkerThreads, out maxIoThreads);\n\n      int freeIoThreads, freeWorkerThreads;\n      ThreadPool.GetAvailableThreads(out freeWorkerThreads, out freeIoThreads);\n\n      int minIoThreads, minWorkerThreads;\n      ThreadPool.GetMinThreads(out minWorkerThreads, out minIoThreads);\n\n      int busyIoThreads = maxIoThreads - freeIoThreads;\n      int busyWorkerThreads = maxWorkerThreads - freeWorkerThreads;\n\n      iocp = $\"(Busy={busyIoThreads},Free={freeIoThreads},Min={minIoThreads},Max={maxIoThreads})\";\n      worker = $\"(Busy={busyWorkerThreads},Free={freeWorkerThreads},Min={minWorkerThreads},Max={maxWorkerThreads})\";\n      return busyWorkerThreads;\n  }\n```\n\n\n## <span id=\"testEnvironment\">環境與工具</span> \n- Visual Studio 2015 Professional UPDATE 3\n- Windows 10 \n- .NET Framework 4.5\n- StackExchange.Redis 1.0.481\n- CPU `Intel® Core™ i7-5500U` 四核心\n\n## 官方說明\n- [爭用、 效能不佳、 和死結 （deadlock） 當您從 ASP.NET 應用程式呼叫 Web 服務](https://support.microsoft.com/zh-tw/kb/821268)\n- machine.config\n\n```xml\n<system.web>\n    <processModel autoConfig=\"false\" maxWorkerThreads=\"xxx\" maxIoThreads=\"xxx\" minWorkerThreads=\"xxx\" minIoThreads=\"xxx\" requestQueueLimit=\"5000\" responseDeadlockInterval=\"00:03:00\"/>\n    <httpRuntime minFreeThreads=\"xxx\" minLocalRequestFreeThreads=\"xxx\"/>\n</system.web>\n```\n\n### 建議的設定值 \n```xml\n<system.web>\n    <processModel autoConfig=\"false\" minWorkerThreads=\"1\" />\n</system.web>    \n```\n\n.NET 官方文件的預設值與建議值\n\n|名稱|預設值|建議配置|\n|---|---|---|\n|maxWorkerThreads|20|32767 / #Cores |\n|maxIoThreads|20|32767 / #Cores|\n|minWorkerThreads|1|maxWorkerThreads/2|\n|minIoThreads|1|maxIoThreads / 2|\n|minFreeThreads| 8  |  88*#CPUs  |\n|minLocalRequestFreeThreads| 4 | 76*#CPUs  |\n|maxconnection| 2 | 12*CPUs |\n|executionTimeout| 90s  | 未建議 |\n\n* maxWorkerThreads,minWorkerThreads,maxIoThreads,minIoThreads 設定的數值需要乘上CPU的數量,  \n例: 4 核心設定 minWorkerThreads 值 20 ,實際上的值為 80   \n\n## <span id=\"comment1\">註釋<span>\n1. ThreadPool 中會有一個 queue , 其中隱含一個半秒機制 , 當 queue 靜止超過半秒 , 就會在 ThreadPool 建立一個新的 Thread  \n\n## 記錄\n- ADO.NET 需要使用 Worker Thread\n- Redis 需要使用 Worker Thread\n- \n\n\n## 參考\n- [Threading](https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx)\n- [Improving ASP.NET Performance](https://msdn.microsoft.com/en-us/library/ms998549.aspx)\n- [Programming the Thread Pool in the .NET Framework](https://msdn.microsoft.com/en-us/library/ms973903.aspx)\n- [StackExchange.Redis 源碼](https://github.com/StackExchange/StackExchange.Redis)\n- [雲計算之路-阿里雲上：從ASP.NET線程角度對「黑色30秒」問題的全新分析](https://read01.com/MenEP.html)\n- [How To: Monitor the ASP.NET Thread Pool Using Custom Counters](https://msdn.microsoft.com/zh-tw/library/ff650682.aspx)\n- http://www.thejoyofcode.com/tuning_the_threadpool.aspx\n- https://gist.github.com/JonCole/e65411214030f0d823cb\n- https://blogs.msdn.microsoft.com/carloc/2009/02/19/minworkerthreads-and-autoconfig/\n","source":"_drafts/workerthread_and_iothread_1.md","raw":"---\ntitle: 實戰 .Net 大量請求與多執行緒(一) 錯誤與原因\ndate: 2016/11/04 11:49:17\ntag:\n  - .Net Framework\n  - IO\n  - Thread\n  - ASP.Net\n---\n## 前情提要\n1. 實務上的專案遭受 DDos 攻擊  \n2. DB TimeOut  \n3. Redis TimeOut  \n4. 主程式沒有死,但是Elmah出現大量Exception  \n\n## 錯誤資訊\n![瞬發的流量](/images/workerthread_and_iothread/110416_102437_AM.jpg)\n\n### Redis的錯誤記錄\n錯誤1.\n```\n    Timeout performing SETEX Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8, \n    inst: 1, mgr: ExecuteSelect, err: never, queue: 2, qu: 2, qs: 0, qc: 0, wr: 0, wq: 0, in: 0, ar: 0, \n    IOCP: (Busy=0,Free=1000,Min=4,Max=1000), WORKER: (Busy=165,Free=32602,Min=4,Max=32767), \n    clientName: TYO-HOST\n```\n錯誤2.\n```\n    StackExchange.Redis.RedisConnectionException\n    SocketFailure on GET\n```\n錯誤3.\n```\n    No connection is available to service this operation: \n    GET Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8\n```\n錯誤4.\n```\n    UnableToResolvePhysicalConnection on GET\n```\n\n### SQL Server 錯誤記錄\n\n```\n    A transport-level error has occurred when receiving results from the server. \n    (provider: Session Provider, error: 19 - Physical connection is not usable)\n```\n\n\n\n## 錯誤原因\n1. CLR 建立執行緒需要時間 , 一秒鐘最多只能建立兩條 Thread [註一](#comment1)\n2. 瞬間的 Request 量超過 ThreadPool 中的 Thread 數量 \n3. ThreadPool 建立 Thread 中 , 仍持續有 Request 進來引發錯誤 \n4. 因為我的[測試環境](#testEnvironment)有四核心,依文件所說\n\n## 實驗流程\n1. 建立監視器\n    參考 [How To: Monitor the ASP.NET Thread Pool Using Custom Counters](https://msdn.microsoft.com/zh-tw/library/ff650682.aspx)\n\n    1. 建立一個 console 專案, [MyAspNetThreadCounters](#MyAspNetThreadCounters)\n    2. 編譯並執行 console 專案\n    3. 開啟`Regedit.exe` 檢查 `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services` 應包含以下值\n\n        ```\n            Available Worker Threads\n            Available IO Threads\n            Max Worker Threads\n            Max IO Threads\n            Min Worker Threads\n            Min IO Threads\n        ```\n\n2. 建立ASP.NET專案\n    1. 建立[Global.asax](#global)\n    2. 建立[StartWebApp.aspx](#startWebApp)\n    3. 建立[Sleep.aspx](#sleep)\n3. 開啟 `perfmon.exe` 新增計數器 , 選取我們自定義的 `MyAspNetThreadCounters`\n4. 連結網頁 `localhost\\StartWebApp.aspx` 以啟動網站,可以得到以下數據\n    ```\n    MaxWorkerThreads:32767.\n    MaxIOThreads:1000.\n    MinWorkerThreads:4.\n    MinIOThreads:4.\n    AvailableWorker:32766.\n    AvailableIO:1000.\n    ```\n5. 執行大量 redis 連線,觀察結果 AvailableWorker Threads 會往下掉,  \n故推斷 redis connection 是透過 Worker Threads 建立.\n\n6. 重現錯誤, 執行大量的 sleep 頁面,透過這種方式搶佔IIS的執行緒.\n![](/images/workerthread_and_iothread/110416_170101_PM.jpg)\n\n7. 再執行大量 redis 連線, 用以重現錯誤\n![](/images/workerthread_and_iothread/110416_170001_PM.jpg)\n\n## 程式碼 \n\n### <span id=\"MyAspNetThreadCounters\">MyAspNetThreadCounters</span>\n```csharp\n  using System;\n  using System.Diagnostics;\n\n  class MyAspNetThreadCounters\n  {\n      [STAThread]\n      static void Main(string[] args)\n      {\n          CreateCounters();\n          Console.WriteLine(\"MyAspNetThreadCounters performance counter category \" +\n                            \"is created. [Press Enter]\");\n          Console.ReadLine();\n      }\n\n      public static void CreateCounters()\n      {\n          CounterCreationDataCollection col =\n            new CounterCreationDataCollection();\n\n          // Create custom counter objects\n          CounterCreationData counter1 = new CounterCreationData();\n          counter1.CounterName = \"Available Worker Threads\";\n          counter1.CounterHelp = \"The difference between the maximum number \" +\n                                \"of thread pool worker threads and the \" +\n                                \"number currently active.\";\n          counter1.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter2 = new CounterCreationData();\n          counter2.CounterName = \"Available IO Threads\";\n          counter2.CounterHelp = \"The difference between the maximum number of \" +\n                                \"thread pool IO threads and the number \" +\n                                \"currently active.\";\n          counter2.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter3 = new CounterCreationData();\n          counter3.CounterName = \"Max Worker Threads\";\n          counter3.CounterHelp = \"The number of requests to the thread pool \" +\n                                \"that can be active concurrently. All \" +\n                                \"requests above that number remain queued until \" +\n                                \"thread pool worker threads become available.\";\n          counter3.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter4 = new CounterCreationData();\n          counter4.CounterName = \"Max IO Threads\";\n          counter4.CounterHelp = \"The number of requests to the thread pool \" +\n                                \"that can be active concurrently. All \" +\n                                \"requests above that number remain queued until \" +\n                                \"thread pool IO threads become available.\";\n          counter4.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter5 = new CounterCreationData();\n          counter5.CounterName = \"Min Worker Threads\";\n          counter5.CounterHelp = \"The number of requests to the thread pool \" +\n                                \"that can be active concurrently. All \" +\n                                \"requests above that number remain queued until \" +\n                                \"thread pool worker threads become available.\";\n          counter5.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter6 = new CounterCreationData();\n          counter6.CounterName = \"Min IO Threads\";\n          counter6.CounterHelp = \"The number of requests to the thread pool \" +\n                                \"that can be active concurrently. All \" +\n                                \"requests above that number remain queued until \" +\n                                \"thread pool IO threads become available.\";\n          counter6.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          // Add custom counter objects to CounterCreationDataCollection.\n          col.Add(counter1);\n          col.Add(counter2);\n          col.Add(counter3);\n          col.Add(counter4);\n          col.Add(counter5);\n          col.Add(counter6);\n\n          // delete the category if it already exists\n          if (PerformanceCounterCategory.Exists(\"MyAspNetThreadCounters\"))\n          {\n              PerformanceCounterCategory.Delete(\"MyAspNetThreadCounters\");\n          }\n          // bind the counters to the PerformanceCounterCategory\n          PerformanceCounterCategory category =\n                  PerformanceCounterCategory.Create(\"MyAspNetThreadCounters\",\"\", col);\n      }\n  }\n```\n\n### <span id=\"global\">Global.asax</span>\n```csharp\n  public class Global : System.Web\n  {\n      //BusyThreads =  TP.GetMaxThreads() –TP.GetAVailable();\n      //If BusyThreads >= TP.GetMinThreads(), then threadpool growth throttling is possible.\n\n      int maxIoThreads, maxWorkerThreads;\n      ThreadPool.GetMaxThreads(out maxWorkerThreads, out maxIoThreads);\n\n      int freeIoThreads, freeWorkerThreads;\n      ThreadPool.GetAvailableThreads(out freeWorkerThreads, out freeIoThreads);\n\n      int minIoThreads, minWorkerThreads;\n      ThreadPool.GetMinThreads(out minWorkerThreads, out minIoThreads);\n\n      int busyIoThreads = maxIoThreads - freeIoThreads;\n      int busyWorkerThreads = maxWorkerThreads - freeWorkerThreads;\n\n      iocp = $\"(Busy={busyIoThreads},Free={freeIoThreads},Min={minIoThreads},Max={maxIoThreads})\";\n      worker = $\"(Busy={busyWorkerThreads},Free={freeWorkerThreads},Min={minWorkerThreads},Max={maxWorkerThreads})\";\n      return busyWorkerThreads;\n  }\n```\n```csharp\n  using System;\n\n  public class Global : System.Web.HttpApplication\n  {\n      public bool MonitorThreadPoolEnabled = true;\n      protected void Application_Start(object sender, EventArgs e)\n      {\n          Thread t = new Thread(new ThreadStart(RefreshCounters));\n          t.Start();\n      }\n  \n      protected void Session_Start(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Application_BeginRequest(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Application_AuthenticateRequest(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Application_Error(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Session_End(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Application_End(object sender, EventArgs e)\n      {\n          MonitorThreadPoolEnabled = false;\n      }\n  \n      public void RefreshCounters()\n      {\n          while (MonitorThreadPoolEnabled)\n          {\n              ASPNETThreadInfo t = GetThreadInfo();\n              ShowPerfCounters(t);\n              System.Threading.Thread.Sleep(500);\n          }\n      }\n  \n      public struct ASPNETThreadInfo\n      {\n          public int MaxWorkerThreads;\n          public int MaxIOThreads;\n          public int MinFreeThreads;\n          public int MinLocalRequestFreeThreads;\n          public int AvailableWorkerThreads;\n          public int AvailableIOThreads;\n  \n          public bool Equals(ASPNETThreadInfo other)\n          {\n              return (\n              MaxWorkerThreads == other.MaxWorkerThreads &&\n              MaxIOThreads == other.MaxIOThreads &&\n              MinFreeThreads == other.MinFreeThreads &&\n              MinLocalRequestFreeThreads == other.MinLocalRequestFreeThreads &&\n              AvailableWorkerThreads == other.AvailableWorkerThreads &&\n              AvailableIOThreads == other.AvailableIOThreads\n              );\n          }\n      }\n  \n      public ASPNETThreadInfo GetThreadInfo()\n      {\n          // use ThreadPool to get the current status\n          int availableWorker, availableIO;\n          int maxWorker, maxIO;\n                      \n          ThreadPool.GetAvailableThreads(out availableWorker, out availableIO);\n          ThreadPool.GetMaxThreads(out maxWorker, out maxIO);            \n          ASPNETThreadInfo threadInfo;\n          threadInfo.AvailableWorkerThreads = (Int16)availableWorker;\n          threadInfo.AvailableIOThreads = (Int16)availableIO;\n          threadInfo.MaxWorkerThreads = (Int16)maxWorker;\n          threadInfo.MaxIOThreads = (Int16)maxIO;            \n          // hard code for now; could get this from  machine.config\n          threadInfo.MinFreeThreads = 8;\n          threadInfo.MinLocalRequestFreeThreads = 4;\n          return threadInfo;\n      }\n  \n      public void ShowPerfCounters(ASPNETThreadInfo t)\n      {\n  \n          // get an instance of our Available Worker Threads counter\n          PerformanceCounter counter1 = new PerformanceCounter();\n          counter1.CategoryName = \"MyAspNetThreadCounters\";\n          counter1.CounterName = \"Available Worker Threads\";\n          counter1.ReadOnly = false;\n  \n          // set the value of the counter\n          counter1.RawValue = t.AvailableWorkerThreads;\n          counter1.Close();\n  \n          // repeat for other counters\n  \n          PerformanceCounter counter2 = new PerformanceCounter();\n          counter2.CategoryName = \"MyAspNetThreadCounters\";\n          counter2.CounterName = \"Available IO Threads\";\n          counter2.ReadOnly = false;\n          counter2.RawValue = t.AvailableIOThreads;\n          counter2.Close();\n  \n          PerformanceCounter counter3 = new PerformanceCounter();\n          counter3.CategoryName = \"MyAspNetThreadCounters\";\n          counter3.CounterName = \"Max Worker Threads\";\n          counter3.ReadOnly = false;\n          counter3.RawValue = t.MaxWorkerThreads;\n          counter3.Close();\n  \n          PerformanceCounter counter4 = new PerformanceCounter();\n          counter4.CategoryName = \"MyAspNetThreadCounters\";\n          counter4.CounterName = \"Max IO Threads\";\n          counter4.ReadOnly = false;\n          counter4.RawValue = t.MaxIOThreads;\n          counter4.Close();\n  \n          int minWorker, minIO;\n          ThreadPool.GetMinThreads(out minWorker, out minIO);\n  \n          PerformanceCounter counter5 = new PerformanceCounter();\n          counter5.CategoryName = \"MyAspNetThreadCounters\";\n          counter5.CounterName = \"Min Worker Threads\";\n          counter5.ReadOnly = false;\n          counter5.RawValue = minWorker;\n          counter5.Close();\n  \n          PerformanceCounter counter6 = new PerformanceCounter();\n          counter6.CategoryName = \"MyAspNetThreadCounters\";\n          counter6.CounterName = \"Min IO Threads\";\n          counter6.ReadOnly = false;\n          counter6.RawValue = minIO;\n          counter6.Close();\n      }\n  }\n```\n\n### <span id=\"startWebApp\">StartWebApp.aspx</span>\n```csharp\n  protected void Page_Load(object sender, EventArgs e)\n  {\n      int availableWorker, availableIO;\n      int maxWorker, maxIO;\n      int minWorker, minIO;\n    \n      ThreadPool.GetAvailableThreads(out availableWorker, out availableIO);\n      ThreadPool.GetMaxThreads(out maxWorker, out maxIO);\n      ThreadPool.GetMinThreads(out minWorker, out minIO);\n\n      Response.Write(\"This ASP.NET application has started.<br>\");\n      Response.Write(string.Format(\"MaxWorkerThreads:{0}.<br>\", maxWorker));\n      Response.Write(string.Format(\"MaxIOThreads:{0}.<br>\", maxIO));\n      Response.Write(string.Format(\"MinWorkerThreads:{0}.<br>\", minWorker));\n      Response.Write(string.Format(\"MinIOThreads:{0}.<br>\", minIO));\n      Response.Write(string.Format(\"AvailableWorker:{0}.<br>\", availableWorker));\n      Response.Write(string.Format(\"AvailableIO:{0}.<br>\", availableIO));\n      Response.Write(\"You can now close this page.\");\n  }\n```\n\n###  <span id=\"sleep\">Sleep.aspx</span>\n```csharp\n  void Page_Load(Object sender, EventArgs e)\n  {\n        int times = 0 ;\n        var max = int.Parse(Request.QueryString.Get(\"max\"));\n        var server = ConnectionMultiplexer.Connect(\"redisserver:6379,ssl=false,password=,allowAdmin=false,connectTimeout=200\");\n        var list = Enumerable.Range(1, max).ToList();\n        Parallel.ForEach(list, (i) =>\n        {\n\n            var database = server.GetDatabase();\n            database.StringGet(\"Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8\");\n            times++;\n        });\n\n        int availableWorker, availableIO;\n        int maxWorker, maxIO;\n        ThreadPool.SetMaxThreads(1, 1);\n        ThreadPool.GetAvailableThreads(out availableWorker, out availableIO);\n        ThreadPool.GetMaxThreads(out maxWorker, out maxIO);\n        Response.Write(String.Format(\"Connect Redis Busy:{0}<br /> {1}\",maxWorker - availableWorker, times));\n  }\n```\n\n### StackExchange.Redis 源碼\n```csharp\n  private static int GetThreadPoolStats(out string iocp, out string worker)\n  {\n      //BusyThreads =  TP.GetMaxThreads() –TP.GetAVailable();\n      //If BusyThreads >= TP.GetMinThreads(), then threadpool growth throttling is possible.\n\n      int maxIoThreads, maxWorkerThreads;\n      ThreadPool.GetMaxThreads(out maxWorkerThreads, out maxIoThreads);\n\n      int freeIoThreads, freeWorkerThreads;\n      ThreadPool.GetAvailableThreads(out freeWorkerThreads, out freeIoThreads);\n\n      int minIoThreads, minWorkerThreads;\n      ThreadPool.GetMinThreads(out minWorkerThreads, out minIoThreads);\n\n      int busyIoThreads = maxIoThreads - freeIoThreads;\n      int busyWorkerThreads = maxWorkerThreads - freeWorkerThreads;\n\n      iocp = $\"(Busy={busyIoThreads},Free={freeIoThreads},Min={minIoThreads},Max={maxIoThreads})\";\n      worker = $\"(Busy={busyWorkerThreads},Free={freeWorkerThreads},Min={minWorkerThreads},Max={maxWorkerThreads})\";\n      return busyWorkerThreads;\n  }\n```\n\n\n## <span id=\"testEnvironment\">環境與工具</span> \n- Visual Studio 2015 Professional UPDATE 3\n- Windows 10 \n- .NET Framework 4.5\n- StackExchange.Redis 1.0.481\n- CPU `Intel® Core™ i7-5500U` 四核心\n\n## 官方說明\n- [爭用、 效能不佳、 和死結 （deadlock） 當您從 ASP.NET 應用程式呼叫 Web 服務](https://support.microsoft.com/zh-tw/kb/821268)\n- machine.config\n\n```xml\n<system.web>\n    <processModel autoConfig=\"false\" maxWorkerThreads=\"xxx\" maxIoThreads=\"xxx\" minWorkerThreads=\"xxx\" minIoThreads=\"xxx\" requestQueueLimit=\"5000\" responseDeadlockInterval=\"00:03:00\"/>\n    <httpRuntime minFreeThreads=\"xxx\" minLocalRequestFreeThreads=\"xxx\"/>\n</system.web>\n```\n\n### 建議的設定值 \n```xml\n<system.web>\n    <processModel autoConfig=\"false\" minWorkerThreads=\"1\" />\n</system.web>    \n```\n\n.NET 官方文件的預設值與建議值\n\n|名稱|預設值|建議配置|\n|---|---|---|\n|maxWorkerThreads|20|32767 / #Cores |\n|maxIoThreads|20|32767 / #Cores|\n|minWorkerThreads|1|maxWorkerThreads/2|\n|minIoThreads|1|maxIoThreads / 2|\n|minFreeThreads| 8  |  88*#CPUs  |\n|minLocalRequestFreeThreads| 4 | 76*#CPUs  |\n|maxconnection| 2 | 12*CPUs |\n|executionTimeout| 90s  | 未建議 |\n\n* maxWorkerThreads,minWorkerThreads,maxIoThreads,minIoThreads 設定的數值需要乘上CPU的數量,  \n例: 4 核心設定 minWorkerThreads 值 20 ,實際上的值為 80   \n\n## <span id=\"comment1\">註釋<span>\n1. ThreadPool 中會有一個 queue , 其中隱含一個半秒機制 , 當 queue 靜止超過半秒 , 就會在 ThreadPool 建立一個新的 Thread  \n\n## 記錄\n- ADO.NET 需要使用 Worker Thread\n- Redis 需要使用 Worker Thread\n- \n\n\n## 參考\n- [Threading](https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx)\n- [Improving ASP.NET Performance](https://msdn.microsoft.com/en-us/library/ms998549.aspx)\n- [Programming the Thread Pool in the .NET Framework](https://msdn.microsoft.com/en-us/library/ms973903.aspx)\n- [StackExchange.Redis 源碼](https://github.com/StackExchange/StackExchange.Redis)\n- [雲計算之路-阿里雲上：從ASP.NET線程角度對「黑色30秒」問題的全新分析](https://read01.com/MenEP.html)\n- [How To: Monitor the ASP.NET Thread Pool Using Custom Counters](https://msdn.microsoft.com/zh-tw/library/ff650682.aspx)\n- http://www.thejoyofcode.com/tuning_the_threadpool.aspx\n- https://gist.github.com/JonCole/e65411214030f0d823cb\n- https://blogs.msdn.microsoft.com/carloc/2009/02/19/minworkerthreads-and-autoconfig/\n","slug":"workerthread_and_iothread_1","published":0,"updated":"2016-12-04T16:43:46.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyfr0052yk554f2t4ar7","content":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><ol>\n<li>實務上的專案遭受 DDos 攻擊  </li>\n<li>DB TimeOut  </li>\n<li>Redis TimeOut  </li>\n<li>主程式沒有死,但是Elmah出現大量Exception  </li>\n</ol>\n<h2 id=\"錯誤資訊\"><a href=\"#錯誤資訊\" class=\"headerlink\" title=\"錯誤資訊\"></a>錯誤資訊</h2><p><img src=\"/images/workerthread_and_iothread/110416_102437_AM.jpg\" alt=\"瞬發的流量\"></p>\n<h3 id=\"Redis的錯誤記錄\"><a href=\"#Redis的錯誤記錄\" class=\"headerlink\" title=\"Redis的錯誤記錄\"></a>Redis的錯誤記錄</h3><p>錯誤1.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Timeout performing SETEX Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8, </div><div class=\"line\">inst: 1, mgr: ExecuteSelect, err: never, queue: 2, qu: 2, qs: 0, qc: 0, wr: 0, wq: 0, in: 0, ar: 0, </div><div class=\"line\">IOCP: (Busy=0,Free=1000,Min=4,Max=1000), WORKER: (Busy=165,Free=32602,Min=4,Max=32767), </div><div class=\"line\">clientName: TYO-HOST</div></pre></td></tr></table></figure></p>\n<p>錯誤2.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">StackExchange.Redis.RedisConnectionException</div><div class=\"line\">SocketFailure on GET</div></pre></td></tr></table></figure></p>\n<p>錯誤3.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">No connection is available to service this operation: </div><div class=\"line\">GET Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8</div></pre></td></tr></table></figure></p>\n<p>錯誤4.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">UnableToResolvePhysicalConnection on GET</div></pre></td></tr></table></figure></p>\n<h3 id=\"SQL-Server-錯誤記錄\"><a href=\"#SQL-Server-錯誤記錄\" class=\"headerlink\" title=\"SQL Server 錯誤記錄\"></a>SQL Server 錯誤記錄</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">A transport-level error has occurred when receiving results from the server. </div><div class=\"line\">(provider: Session Provider, error: 19 - Physical connection is not usable)</div></pre></td></tr></table></figure>\n<h2 id=\"錯誤原因\"><a href=\"#錯誤原因\" class=\"headerlink\" title=\"錯誤原因\"></a>錯誤原因</h2><ol>\n<li>CLR 建立執行緒需要時間 , 一秒鐘最多只能建立兩條 Thread <a href=\"#comment1\">註一</a></li>\n<li>瞬間的 Request 量超過 ThreadPool 中的 Thread 數量 </li>\n<li>ThreadPool 建立 Thread 中 , 仍持續有 Request 進來引發錯誤 </li>\n<li>因為我的<a href=\"#testEnvironment\">測試環境</a>有四核心,依文件所說</li>\n</ol>\n<h2 id=\"實驗流程\"><a href=\"#實驗流程\" class=\"headerlink\" title=\"實驗流程\"></a>實驗流程</h2><ol>\n<li><p>建立監視器<br> 參考 <a href=\"https://msdn.microsoft.com/zh-tw/library/ff650682.aspx\" target=\"_blank\" rel=\"external\">How To: Monitor the ASP.NET Thread Pool Using Custom Counters</a></p>\n<ol>\n<li>建立一個 console 專案, <a href=\"#MyAspNetThreadCounters\">MyAspNetThreadCounters</a></li>\n<li>編譯並執行 console 專案</li>\n<li><p>開啟<code>Regedit.exe</code> 檢查 <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services</code> 應包含以下值</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Available Worker Threads</div><div class=\"line\">Available IO Threads</div><div class=\"line\">Max Worker Threads</div><div class=\"line\">Max IO Threads</div><div class=\"line\">Min Worker Threads</div><div class=\"line\">Min IO Threads</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>建立ASP.NET專案</p>\n<ol>\n<li>建立<a href=\"#global\">Global.asax</a></li>\n<li>建立<a href=\"#startWebApp\">StartWebApp.aspx</a></li>\n<li>建立<a href=\"#sleep\">Sleep.aspx</a></li>\n</ol>\n</li>\n<li>開啟 <code>perfmon.exe</code> 新增計數器 , 選取我們自定義的 <code>MyAspNetThreadCounters</code></li>\n<li><p>連結網頁 <code>localhost\\StartWebApp.aspx</code> 以啟動網站,可以得到以下數據</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">MaxWorkerThreads:32767.</div><div class=\"line\">MaxIOThreads:1000.</div><div class=\"line\">MinWorkerThreads:4.</div><div class=\"line\">MinIOThreads:4.</div><div class=\"line\">AvailableWorker:32766.</div><div class=\"line\">AvailableIO:1000.</div></pre></td></tr></table></figure>\n</li>\n<li><p>執行大量 redis 連線,觀察結果 AvailableWorker Threads 會往下掉,<br>故推斷 redis connection 是透過 Worker Threads 建立.</p>\n</li>\n<li><p>重現錯誤, 執行大量的 sleep 頁面,透過這種方式搶佔IIS的執行緒.<br><img src=\"/images/workerthread_and_iothread/110416_170101_PM.jpg\" alt=\"\"></p>\n</li>\n<li><p>再執行大量 redis 連線, 用以重現錯誤<br><img src=\"/images/workerthread_and_iothread/110416_170001_PM.jpg\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h2><h3 id=\"MyAspNetThreadCounters\"><a href=\"#MyAspNetThreadCounters\" class=\"headerlink\" title=\"MyAspNetThreadCounters\"></a><span id=\"MyAspNetThreadCounters\">MyAspNetThreadCounters</span></h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> System;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Diagnostics;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">MyAspNetThreadCounters</span></div><div class=\"line\">&#123;</div><div class=\"line\">    [STAThread]</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        CreateCounters();</div><div class=\"line\">        Console.WriteLine(<span class=\"string\">\"MyAspNetThreadCounters performance counter category \"</span> +</div><div class=\"line\">                          <span class=\"string\">\"is created. [Press Enter]\"</span>);</div><div class=\"line\">        Console.ReadLine();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateCounters</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        CounterCreationDataCollection col =</div><div class=\"line\">          <span class=\"keyword\">new</span> CounterCreationDataCollection();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Create custom counter objects</span></div><div class=\"line\">        CounterCreationData counter1 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter1.CounterName = <span class=\"string\">\"Available Worker Threads\"</span>;</div><div class=\"line\">        counter1.CounterHelp = <span class=\"string\">\"The difference between the maximum number \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"of thread pool worker threads and the \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"number currently active.\"</span>;</div><div class=\"line\">        counter1.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter2 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter2.CounterName = <span class=\"string\">\"Available IO Threads\"</span>;</div><div class=\"line\">        counter2.CounterHelp = <span class=\"string\">\"The difference between the maximum number of \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool IO threads and the number \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"currently active.\"</span>;</div><div class=\"line\">        counter2.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter3 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter3.CounterName = <span class=\"string\">\"Max Worker Threads\"</span>;</div><div class=\"line\">        counter3.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"that can be active concurrently. All \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool worker threads become available.\"</span>;</div><div class=\"line\">        counter3.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter4 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter4.CounterName = <span class=\"string\">\"Max IO Threads\"</span>;</div><div class=\"line\">        counter4.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"that can be active concurrently. All \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool IO threads become available.\"</span>;</div><div class=\"line\">        counter4.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter5 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter5.CounterName = <span class=\"string\">\"Min Worker Threads\"</span>;</div><div class=\"line\">        counter5.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"that can be active concurrently. All \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool worker threads become available.\"</span>;</div><div class=\"line\">        counter5.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter6 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter6.CounterName = <span class=\"string\">\"Min IO Threads\"</span>;</div><div class=\"line\">        counter6.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"that can be active concurrently. All \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool IO threads become available.\"</span>;</div><div class=\"line\">        counter6.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Add custom counter objects to CounterCreationDataCollection.</span></div><div class=\"line\">        col.Add(counter1);</div><div class=\"line\">        col.Add(counter2);</div><div class=\"line\">        col.Add(counter3);</div><div class=\"line\">        col.Add(counter4);</div><div class=\"line\">        col.Add(counter5);</div><div class=\"line\">        col.Add(counter6);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// delete the category if it already exists</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (PerformanceCounterCategory.Exists(<span class=\"string\">\"MyAspNetThreadCounters\"</span>))</div><div class=\"line\">        &#123;</div><div class=\"line\">            PerformanceCounterCategory.Delete(<span class=\"string\">\"MyAspNetThreadCounters\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// bind the counters to the PerformanceCounterCategory</span></div><div class=\"line\">        PerformanceCounterCategory category =</div><div class=\"line\">                PerformanceCounterCategory.Create(<span class=\"string\">\"MyAspNetThreadCounters\"</span>,<span class=\"string\">\"\"</span>, col);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Global-asax\"><a href=\"#Global-asax\" class=\"headerlink\" title=\"Global.asax\"></a><span id=\"global\">Global.asax</span></h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Global : System.Web</div><div class=\"line\">&#123;</div><div class=\"line\">    //BusyThreads =  TP.GetMaxThreads() –TP.GetAVailable();</div><div class=\"line\">    //If BusyThreads &gt;= TP.GetMinThreads(), then threadpool growth throttling is possible.</div><div class=\"line\"></div><div class=\"line\">    int maxIoThreads, maxWorkerThreads;</div><div class=\"line\">    ThreadPool.GetMaxThreads(out maxWorkerThreads, out maxIoThreads);</div><div class=\"line\"></div><div class=\"line\">    int freeIoThreads, freeWorkerThreads;</div><div class=\"line\">    ThreadPool.GetAvailableThreads(out freeWorkerThreads, out freeIoThreads);</div><div class=\"line\"></div><div class=\"line\">    int minIoThreads, minWorkerThreads;</div><div class=\"line\">    ThreadPool.GetMinThreads(out minWorkerThreads, out minIoThreads);</div><div class=\"line\"></div><div class=\"line\">    int busyIoThreads = maxIoThreads - freeIoThreads;</div><div class=\"line\">    int busyWorkerThreads = maxWorkerThreads - freeWorkerThreads;</div><div class=\"line\"></div><div class=\"line\">    iocp = $\"(Busy=&#123;busyIoThreads&#125;,Free=&#123;freeIoThreads&#125;,Min=&#123;minIoThreads&#125;,Max=&#123;maxIoThreads&#125;)\";</div><div class=\"line\">    worker = $\"(Busy=&#123;busyWorkerThreads&#125;,Free=&#123;freeWorkerThreads&#125;,Min=&#123;minWorkerThreads&#125;,Max=&#123;maxWorkerThreads&#125;)\";</div><div class=\"line\">    return busyWorkerThreads;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System;</div><div class=\"line\"></div><div class=\"line\">public class Global : System.Web.HttpApplication</div><div class=\"line\">&#123;</div><div class=\"line\">    public bool MonitorThreadPoolEnabled = true;</div><div class=\"line\">    protected void Application_Start(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\">        Thread t = new Thread(new ThreadStart(RefreshCounters));</div><div class=\"line\">        t.Start();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Session_Start(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Application_BeginRequest(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Application_AuthenticateRequest(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Application_Error(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Session_End(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Application_End(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\">        MonitorThreadPoolEnabled = false;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void RefreshCounters()</div><div class=\"line\">    &#123;</div><div class=\"line\">        while (MonitorThreadPoolEnabled)</div><div class=\"line\">        &#123;</div><div class=\"line\">            ASPNETThreadInfo t = GetThreadInfo();</div><div class=\"line\">            ShowPerfCounters(t);</div><div class=\"line\">            System.Threading.Thread.Sleep(500);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public struct ASPNETThreadInfo</div><div class=\"line\">    &#123;</div><div class=\"line\">        public int MaxWorkerThreads;</div><div class=\"line\">        public int MaxIOThreads;</div><div class=\"line\">        public int MinFreeThreads;</div><div class=\"line\">        public int MinLocalRequestFreeThreads;</div><div class=\"line\">        public int AvailableWorkerThreads;</div><div class=\"line\">        public int AvailableIOThreads;</div><div class=\"line\"></div><div class=\"line\">        public bool Equals(ASPNETThreadInfo other)</div><div class=\"line\">        &#123;</div><div class=\"line\">            return (</div><div class=\"line\">            MaxWorkerThreads == other.MaxWorkerThreads &amp;&amp;</div><div class=\"line\">            MaxIOThreads == other.MaxIOThreads &amp;&amp;</div><div class=\"line\">            MinFreeThreads == other.MinFreeThreads &amp;&amp;</div><div class=\"line\">            MinLocalRequestFreeThreads == other.MinLocalRequestFreeThreads &amp;&amp;</div><div class=\"line\">            AvailableWorkerThreads == other.AvailableWorkerThreads &amp;&amp;</div><div class=\"line\">            AvailableIOThreads == other.AvailableIOThreads</div><div class=\"line\">            );</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public ASPNETThreadInfo GetThreadInfo()</div><div class=\"line\">    &#123;</div><div class=\"line\">        // use ThreadPool to get the current status</div><div class=\"line\">        int availableWorker, availableIO;</div><div class=\"line\">        int maxWorker, maxIO;</div><div class=\"line\">                    </div><div class=\"line\">        ThreadPool.GetAvailableThreads(out availableWorker, out availableIO);</div><div class=\"line\">        ThreadPool.GetMaxThreads(out maxWorker, out maxIO);            </div><div class=\"line\">        ASPNETThreadInfo threadInfo;</div><div class=\"line\">        threadInfo.AvailableWorkerThreads = (Int16)availableWorker;</div><div class=\"line\">        threadInfo.AvailableIOThreads = (Int16)availableIO;</div><div class=\"line\">        threadInfo.MaxWorkerThreads = (Int16)maxWorker;</div><div class=\"line\">        threadInfo.MaxIOThreads = (Int16)maxIO;            </div><div class=\"line\">        // hard code for now; could get this from  machine.config</div><div class=\"line\">        threadInfo.MinFreeThreads = 8;</div><div class=\"line\">        threadInfo.MinLocalRequestFreeThreads = 4;</div><div class=\"line\">        return threadInfo;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void ShowPerfCounters(ASPNETThreadInfo t)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        // get an instance of our Available Worker Threads counter</div><div class=\"line\">        PerformanceCounter counter1 = new PerformanceCounter();</div><div class=\"line\">        counter1.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter1.CounterName = \"Available Worker Threads\";</div><div class=\"line\">        counter1.ReadOnly = false;</div><div class=\"line\"></div><div class=\"line\">        // set the value of the counter</div><div class=\"line\">        counter1.RawValue = t.AvailableWorkerThreads;</div><div class=\"line\">        counter1.Close();</div><div class=\"line\"></div><div class=\"line\">        // repeat for other counters</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter2 = new PerformanceCounter();</div><div class=\"line\">        counter2.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter2.CounterName = \"Available IO Threads\";</div><div class=\"line\">        counter2.ReadOnly = false;</div><div class=\"line\">        counter2.RawValue = t.AvailableIOThreads;</div><div class=\"line\">        counter2.Close();</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter3 = new PerformanceCounter();</div><div class=\"line\">        counter3.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter3.CounterName = \"Max Worker Threads\";</div><div class=\"line\">        counter3.ReadOnly = false;</div><div class=\"line\">        counter3.RawValue = t.MaxWorkerThreads;</div><div class=\"line\">        counter3.Close();</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter4 = new PerformanceCounter();</div><div class=\"line\">        counter4.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter4.CounterName = \"Max IO Threads\";</div><div class=\"line\">        counter4.ReadOnly = false;</div><div class=\"line\">        counter4.RawValue = t.MaxIOThreads;</div><div class=\"line\">        counter4.Close();</div><div class=\"line\"></div><div class=\"line\">        int minWorker, minIO;</div><div class=\"line\">        ThreadPool.GetMinThreads(out minWorker, out minIO);</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter5 = new PerformanceCounter();</div><div class=\"line\">        counter5.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter5.CounterName = \"Min Worker Threads\";</div><div class=\"line\">        counter5.ReadOnly = false;</div><div class=\"line\">        counter5.RawValue = minWorker;</div><div class=\"line\">        counter5.Close();</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter6 = new PerformanceCounter();</div><div class=\"line\">        counter6.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter6.CounterName = \"Min IO Threads\";</div><div class=\"line\">        counter6.ReadOnly = false;</div><div class=\"line\">        counter6.RawValue = minIO;</div><div class=\"line\">        counter6.Close();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"StartWebApp-aspx\"><a href=\"#StartWebApp-aspx\" class=\"headerlink\" title=\"StartWebApp.aspx\"></a><span id=\"startWebApp\">StartWebApp.aspx</span></h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Page_Load</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, EventArgs e</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> availableWorker, availableIO;</div><div class=\"line\">    <span class=\"keyword\">int</span> maxWorker, maxIO;</div><div class=\"line\">    <span class=\"keyword\">int</span> minWorker, minIO;</div><div class=\"line\">  </div><div class=\"line\">    ThreadPool.GetAvailableThreads(<span class=\"keyword\">out</span> availableWorker, <span class=\"keyword\">out</span> availableIO);</div><div class=\"line\">    ThreadPool.GetMaxThreads(<span class=\"keyword\">out</span> maxWorker, <span class=\"keyword\">out</span> maxIO);</div><div class=\"line\">    ThreadPool.GetMinThreads(<span class=\"keyword\">out</span> minWorker, <span class=\"keyword\">out</span> minIO);</div><div class=\"line\"></div><div class=\"line\">    Response.Write(<span class=\"string\">\"This ASP.NET application has started.&lt;br&gt;\"</span>);</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"MaxWorkerThreads:&#123;0&#125;.&lt;br&gt;\"</span>, maxWorker));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"MaxIOThreads:&#123;0&#125;.&lt;br&gt;\"</span>, maxIO));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"MinWorkerThreads:&#123;0&#125;.&lt;br&gt;\"</span>, minWorker));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"MinIOThreads:&#123;0&#125;.&lt;br&gt;\"</span>, minIO));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"AvailableWorker:&#123;0&#125;.&lt;br&gt;\"</span>, availableWorker));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"AvailableIO:&#123;0&#125;.&lt;br&gt;\"</span>, availableIO));</div><div class=\"line\">    Response.Write(<span class=\"string\">\"You can now close this page.\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Sleep-aspx\"><a href=\"#Sleep-aspx\" class=\"headerlink\" title=\"Sleep.aspx\"></a><span id=\"sleep\">Sleep.aspx</span></h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Page_Load</span>(<span class=\"params\">Object sender, EventArgs e</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">      <span class=\"keyword\">int</span> times = <span class=\"number\">0</span> ;</div><div class=\"line\">      <span class=\"keyword\">var</span> max = <span class=\"keyword\">int</span>.Parse(Request.QueryString.Get(<span class=\"string\">\"max\"</span>));</div><div class=\"line\">      <span class=\"keyword\">var</span> server = ConnectionMultiplexer.Connect(<span class=\"string\">\"redisserver:6379,ssl=false,password=,allowAdmin=false,connectTimeout=200\"</span>);</div><div class=\"line\">      <span class=\"keyword\">var</span> list = Enumerable.Range(<span class=\"number\">1</span>, max).ToList();</div><div class=\"line\">      Parallel.ForEach(list, (i) =&gt;</div><div class=\"line\">      &#123;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">var</span> database = server.GetDatabase();</div><div class=\"line\">          database.StringGet(<span class=\"string\">\"Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8\"</span>);</div><div class=\"line\">          times++;</div><div class=\"line\">      &#125;);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> availableWorker, availableIO;</div><div class=\"line\">      <span class=\"keyword\">int</span> maxWorker, maxIO;</div><div class=\"line\">      ThreadPool.SetMaxThreads(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</div><div class=\"line\">      ThreadPool.GetAvailableThreads(<span class=\"keyword\">out</span> availableWorker, <span class=\"keyword\">out</span> availableIO);</div><div class=\"line\">      ThreadPool.GetMaxThreads(<span class=\"keyword\">out</span> maxWorker, <span class=\"keyword\">out</span> maxIO);</div><div class=\"line\">      Response.Write(String.Format(<span class=\"string\">\"Connect Redis Busy:&#123;0&#125;&lt;br /&gt; &#123;1&#125;\"</span>,maxWorker - availableWorker, times));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"StackExchange-Redis-源碼\"><a href=\"#StackExchange-Redis-源碼\" class=\"headerlink\" title=\"StackExchange.Redis 源碼\"></a>StackExchange.Redis 源碼</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">GetThreadPoolStats</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"keyword\">string</span> iocp, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> worker</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//BusyThreads =  TP.GetMaxThreads() –TP.GetAVailable();</span></div><div class=\"line\">    <span class=\"comment\">//If BusyThreads &gt;= TP.GetMinThreads(), then threadpool growth throttling is possible.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> maxIoThreads, maxWorkerThreads;</div><div class=\"line\">    ThreadPool.GetMaxThreads(<span class=\"keyword\">out</span> maxWorkerThreads, <span class=\"keyword\">out</span> maxIoThreads);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> freeIoThreads, freeWorkerThreads;</div><div class=\"line\">    ThreadPool.GetAvailableThreads(<span class=\"keyword\">out</span> freeWorkerThreads, <span class=\"keyword\">out</span> freeIoThreads);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> minIoThreads, minWorkerThreads;</div><div class=\"line\">    ThreadPool.GetMinThreads(<span class=\"keyword\">out</span> minWorkerThreads, <span class=\"keyword\">out</span> minIoThreads);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> busyIoThreads = maxIoThreads - freeIoThreads;</div><div class=\"line\">    <span class=\"keyword\">int</span> busyWorkerThreads = maxWorkerThreads - freeWorkerThreads;</div><div class=\"line\"></div><div class=\"line\">    iocp = <span class=\"string\">$\"(Busy=<span class=\"subst\">&#123;busyIoThreads&#125;</span>,Free=<span class=\"subst\">&#123;freeIoThreads&#125;</span>,Min=<span class=\"subst\">&#123;minIoThreads&#125;</span>,Max=<span class=\"subst\">&#123;maxIoThreads&#125;</span>)\"</span>;</div><div class=\"line\">    worker = <span class=\"string\">$\"(Busy=<span class=\"subst\">&#123;busyWorkerThreads&#125;</span>,Free=<span class=\"subst\">&#123;freeWorkerThreads&#125;</span>,Min=<span class=\"subst\">&#123;minWorkerThreads&#125;</span>,Max=<span class=\"subst\">&#123;maxWorkerThreads&#125;</span>)\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> busyWorkerThreads;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"環境與工具\"><a href=\"#環境與工具\" class=\"headerlink\" title=\"環境與工具\"></a><span id=\"testEnvironment\">環境與工具</span></h2><ul>\n<li>Visual Studio 2015 Professional UPDATE 3</li>\n<li>Windows 10 </li>\n<li>.NET Framework 4.5</li>\n<li>StackExchange.Redis 1.0.481</li>\n<li>CPU <code>Intel® Core™ i7-5500U</code> 四核心</li>\n</ul>\n<h2 id=\"官方說明\"><a href=\"#官方說明\" class=\"headerlink\" title=\"官方說明\"></a>官方說明</h2><ul>\n<li><a href=\"https://support.microsoft.com/zh-tw/kb/821268\" target=\"_blank\" rel=\"external\">爭用、 效能不佳、 和死結 （deadlock） 當您從 ASP.NET 應用程式呼叫 Web 服務</a></li>\n<li>machine.config</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">system.web</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">processModel</span> <span class=\"attr\">autoConfig</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">maxWorkerThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">maxIoThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">minWorkerThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">minIoThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">requestQueueLimit</span>=<span class=\"string\">\"5000\"</span> <span class=\"attr\">responseDeadlockInterval</span>=<span class=\"string\">\"00:03:00\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">httpRuntime</span> <span class=\"attr\">minFreeThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">minLocalRequestFreeThreads</span>=<span class=\"string\">\"xxx\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">system.web</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"建議的設定值\"><a href=\"#建議的設定值\" class=\"headerlink\" title=\"建議的設定值\"></a>建議的設定值</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">system.web</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">processModel</span> <span class=\"attr\">autoConfig</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">minWorkerThreads</span>=<span class=\"string\">\"1\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">system.web</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>.NET 官方文件的預設值與建議值</p>\n<table>\n<thead>\n<tr>\n<th>名稱</th>\n<th>預設值</th>\n<th>建議配置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>maxWorkerThreads</td>\n<td>20</td>\n<td>32767 / #Cores</td>\n</tr>\n<tr>\n<td>maxIoThreads</td>\n<td>20</td>\n<td>32767 / #Cores</td>\n</tr>\n<tr>\n<td>minWorkerThreads</td>\n<td>1</td>\n<td>maxWorkerThreads/2</td>\n</tr>\n<tr>\n<td>minIoThreads</td>\n<td>1</td>\n<td>maxIoThreads / 2</td>\n</tr>\n<tr>\n<td>minFreeThreads</td>\n<td>8</td>\n<td>88*#CPUs</td>\n</tr>\n<tr>\n<td>minLocalRequestFreeThreads</td>\n<td>4</td>\n<td>76*#CPUs</td>\n</tr>\n<tr>\n<td>maxconnection</td>\n<td>2</td>\n<td>12*CPUs</td>\n</tr>\n<tr>\n<td>executionTimeout</td>\n<td>90s</td>\n<td>未建議</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>maxWorkerThreads,minWorkerThreads,maxIoThreads,minIoThreads 設定的數值需要乘上CPU的數量,<br>例: 4 核心設定 minWorkerThreads 值 20 ,實際上的值為 80   </li>\n</ul>\n<h2 id=\"註釋\"><a href=\"#註釋\" class=\"headerlink\" title=\"註釋\"></a><span id=\"comment1\">註釋<span></span></span></h2><ol>\n<li>ThreadPool 中會有一個 queue , 其中隱含一個半秒機制 , 當 queue 靜止超過半秒 , 就會在 ThreadPool 建立一個新的 Thread  </li>\n</ol>\n<h2 id=\"記錄\"><a href=\"#記錄\" class=\"headerlink\" title=\"記錄\"></a>記錄</h2><ul>\n<li>ADO.NET 需要使用 Worker Thread</li>\n<li>Redis 需要使用 Worker Thread</li>\n<li></li>\n</ul>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx\" target=\"_blank\" rel=\"external\">Threading</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms998549.aspx\" target=\"_blank\" rel=\"external\">Improving ASP.NET Performance</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms973903.aspx\" target=\"_blank\" rel=\"external\">Programming the Thread Pool in the .NET Framework</a></li>\n<li><a href=\"https://github.com/StackExchange/StackExchange.Redis\" target=\"_blank\" rel=\"external\">StackExchange.Redis 源碼</a></li>\n<li><a href=\"https://read01.com/MenEP.html\" target=\"_blank\" rel=\"external\">雲計算之路-阿里雲上：從ASP.NET線程角度對「黑色30秒」問題的全新分析</a></li>\n<li><a href=\"https://msdn.microsoft.com/zh-tw/library/ff650682.aspx\" target=\"_blank\" rel=\"external\">How To: Monitor the ASP.NET Thread Pool Using Custom Counters</a></li>\n<li><a href=\"http://www.thejoyofcode.com/tuning_the_threadpool.aspx\" target=\"_blank\" rel=\"external\">http://www.thejoyofcode.com/tuning_the_threadpool.aspx</a></li>\n<li><a href=\"https://gist.github.com/JonCole/e65411214030f0d823cb\" target=\"_blank\" rel=\"external\">https://gist.github.com/JonCole/e65411214030f0d823cb</a></li>\n<li><a href=\"https://blogs.msdn.microsoft.com/carloc/2009/02/19/minworkerthreads-and-autoconfig/\" target=\"_blank\" rel=\"external\">https://blogs.msdn.microsoft.com/carloc/2009/02/19/minworkerthreads-and-autoconfig/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><ol>\n<li>實務上的專案遭受 DDos 攻擊  </li>\n<li>DB TimeOut  </li>\n<li>Redis TimeOut  </li>\n<li>主程式沒有死,但是Elmah出現大量Exception  </li>\n</ol>\n<h2 id=\"錯誤資訊\"><a href=\"#錯誤資訊\" class=\"headerlink\" title=\"錯誤資訊\"></a>錯誤資訊</h2><p><img src=\"/images/workerthread_and_iothread/110416_102437_AM.jpg\" alt=\"瞬發的流量\"></p>\n<h3 id=\"Redis的錯誤記錄\"><a href=\"#Redis的錯誤記錄\" class=\"headerlink\" title=\"Redis的錯誤記錄\"></a>Redis的錯誤記錄</h3><p>錯誤1.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Timeout performing SETEX Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8, </div><div class=\"line\">inst: 1, mgr: ExecuteSelect, err: never, queue: 2, qu: 2, qs: 0, qc: 0, wr: 0, wq: 0, in: 0, ar: 0, </div><div class=\"line\">IOCP: (Busy=0,Free=1000,Min=4,Max=1000), WORKER: (Busy=165,Free=32602,Min=4,Max=32767), </div><div class=\"line\">clientName: TYO-HOST</div></pre></td></tr></table></figure></p>\n<p>錯誤2.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">StackExchange.Redis.RedisConnectionException</div><div class=\"line\">SocketFailure on GET</div></pre></td></tr></table></figure></p>\n<p>錯誤3.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">No connection is available to service this operation: </div><div class=\"line\">GET Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8</div></pre></td></tr></table></figure></p>\n<p>錯誤4.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">UnableToResolvePhysicalConnection on GET</div></pre></td></tr></table></figure></p>\n<h3 id=\"SQL-Server-錯誤記錄\"><a href=\"#SQL-Server-錯誤記錄\" class=\"headerlink\" title=\"SQL Server 錯誤記錄\"></a>SQL Server 錯誤記錄</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">A transport-level error has occurred when receiving results from the server. </div><div class=\"line\">(provider: Session Provider, error: 19 - Physical connection is not usable)</div></pre></td></tr></table></figure>\n<h2 id=\"錯誤原因\"><a href=\"#錯誤原因\" class=\"headerlink\" title=\"錯誤原因\"></a>錯誤原因</h2><ol>\n<li>CLR 建立執行緒需要時間 , 一秒鐘最多只能建立兩條 Thread <a href=\"#comment1\">註一</a></li>\n<li>瞬間的 Request 量超過 ThreadPool 中的 Thread 數量 </li>\n<li>ThreadPool 建立 Thread 中 , 仍持續有 Request 進來引發錯誤 </li>\n<li>因為我的<a href=\"#testEnvironment\">測試環境</a>有四核心,依文件所說</li>\n</ol>\n<h2 id=\"實驗流程\"><a href=\"#實驗流程\" class=\"headerlink\" title=\"實驗流程\"></a>實驗流程</h2><ol>\n<li><p>建立監視器<br> 參考 <a href=\"https://msdn.microsoft.com/zh-tw/library/ff650682.aspx\" target=\"_blank\" rel=\"external\">How To: Monitor the ASP.NET Thread Pool Using Custom Counters</a></p>\n<ol>\n<li>建立一個 console 專案, <a href=\"#MyAspNetThreadCounters\">MyAspNetThreadCounters</a></li>\n<li>編譯並執行 console 專案</li>\n<li><p>開啟<code>Regedit.exe</code> 檢查 <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services</code> 應包含以下值</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Available Worker Threads</div><div class=\"line\">Available IO Threads</div><div class=\"line\">Max Worker Threads</div><div class=\"line\">Max IO Threads</div><div class=\"line\">Min Worker Threads</div><div class=\"line\">Min IO Threads</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>建立ASP.NET專案</p>\n<ol>\n<li>建立<a href=\"#global\">Global.asax</a></li>\n<li>建立<a href=\"#startWebApp\">StartWebApp.aspx</a></li>\n<li>建立<a href=\"#sleep\">Sleep.aspx</a></li>\n</ol>\n</li>\n<li>開啟 <code>perfmon.exe</code> 新增計數器 , 選取我們自定義的 <code>MyAspNetThreadCounters</code></li>\n<li><p>連結網頁 <code>localhost\\StartWebApp.aspx</code> 以啟動網站,可以得到以下數據</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">MaxWorkerThreads:32767.</div><div class=\"line\">MaxIOThreads:1000.</div><div class=\"line\">MinWorkerThreads:4.</div><div class=\"line\">MinIOThreads:4.</div><div class=\"line\">AvailableWorker:32766.</div><div class=\"line\">AvailableIO:1000.</div></pre></td></tr></table></figure>\n</li>\n<li><p>執行大量 redis 連線,觀察結果 AvailableWorker Threads 會往下掉,<br>故推斷 redis connection 是透過 Worker Threads 建立.</p>\n</li>\n<li><p>重現錯誤, 執行大量的 sleep 頁面,透過這種方式搶佔IIS的執行緒.<br><img src=\"/images/workerthread_and_iothread/110416_170101_PM.jpg\" alt=\"\"></p>\n</li>\n<li><p>再執行大量 redis 連線, 用以重現錯誤<br><img src=\"/images/workerthread_and_iothread/110416_170001_PM.jpg\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h2><h3 id=\"MyAspNetThreadCounters\"><a href=\"#MyAspNetThreadCounters\" class=\"headerlink\" title=\"MyAspNetThreadCounters\"></a><span id=\"MyAspNetThreadCounters\">MyAspNetThreadCounters</span></h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> System;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Diagnostics;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">MyAspNetThreadCounters</span></div><div class=\"line\">&#123;</div><div class=\"line\">    [STAThread]</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        CreateCounters();</div><div class=\"line\">        Console.WriteLine(<span class=\"string\">\"MyAspNetThreadCounters performance counter category \"</span> +</div><div class=\"line\">                          <span class=\"string\">\"is created. [Press Enter]\"</span>);</div><div class=\"line\">        Console.ReadLine();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateCounters</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        CounterCreationDataCollection col =</div><div class=\"line\">          <span class=\"keyword\">new</span> CounterCreationDataCollection();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Create custom counter objects</span></div><div class=\"line\">        CounterCreationData counter1 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter1.CounterName = <span class=\"string\">\"Available Worker Threads\"</span>;</div><div class=\"line\">        counter1.CounterHelp = <span class=\"string\">\"The difference between the maximum number \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"of thread pool worker threads and the \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"number currently active.\"</span>;</div><div class=\"line\">        counter1.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter2 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter2.CounterName = <span class=\"string\">\"Available IO Threads\"</span>;</div><div class=\"line\">        counter2.CounterHelp = <span class=\"string\">\"The difference between the maximum number of \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool IO threads and the number \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"currently active.\"</span>;</div><div class=\"line\">        counter2.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter3 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter3.CounterName = <span class=\"string\">\"Max Worker Threads\"</span>;</div><div class=\"line\">        counter3.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"that can be active concurrently. All \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool worker threads become available.\"</span>;</div><div class=\"line\">        counter3.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter4 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter4.CounterName = <span class=\"string\">\"Max IO Threads\"</span>;</div><div class=\"line\">        counter4.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"that can be active concurrently. All \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool IO threads become available.\"</span>;</div><div class=\"line\">        counter4.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter5 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter5.CounterName = <span class=\"string\">\"Min Worker Threads\"</span>;</div><div class=\"line\">        counter5.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"that can be active concurrently. All \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool worker threads become available.\"</span>;</div><div class=\"line\">        counter5.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter6 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter6.CounterName = <span class=\"string\">\"Min IO Threads\"</span>;</div><div class=\"line\">        counter6.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"that can be active concurrently. All \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool IO threads become available.\"</span>;</div><div class=\"line\">        counter6.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Add custom counter objects to CounterCreationDataCollection.</span></div><div class=\"line\">        col.Add(counter1);</div><div class=\"line\">        col.Add(counter2);</div><div class=\"line\">        col.Add(counter3);</div><div class=\"line\">        col.Add(counter4);</div><div class=\"line\">        col.Add(counter5);</div><div class=\"line\">        col.Add(counter6);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// delete the category if it already exists</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (PerformanceCounterCategory.Exists(<span class=\"string\">\"MyAspNetThreadCounters\"</span>))</div><div class=\"line\">        &#123;</div><div class=\"line\">            PerformanceCounterCategory.Delete(<span class=\"string\">\"MyAspNetThreadCounters\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// bind the counters to the PerformanceCounterCategory</span></div><div class=\"line\">        PerformanceCounterCategory category =</div><div class=\"line\">                PerformanceCounterCategory.Create(<span class=\"string\">\"MyAspNetThreadCounters\"</span>,<span class=\"string\">\"\"</span>, col);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Global-asax\"><a href=\"#Global-asax\" class=\"headerlink\" title=\"Global.asax\"></a><span id=\"global\">Global.asax</span></h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Global : System.Web</div><div class=\"line\">&#123;</div><div class=\"line\">    //BusyThreads =  TP.GetMaxThreads() –TP.GetAVailable();</div><div class=\"line\">    //If BusyThreads &gt;= TP.GetMinThreads(), then threadpool growth throttling is possible.</div><div class=\"line\"></div><div class=\"line\">    int maxIoThreads, maxWorkerThreads;</div><div class=\"line\">    ThreadPool.GetMaxThreads(out maxWorkerThreads, out maxIoThreads);</div><div class=\"line\"></div><div class=\"line\">    int freeIoThreads, freeWorkerThreads;</div><div class=\"line\">    ThreadPool.GetAvailableThreads(out freeWorkerThreads, out freeIoThreads);</div><div class=\"line\"></div><div class=\"line\">    int minIoThreads, minWorkerThreads;</div><div class=\"line\">    ThreadPool.GetMinThreads(out minWorkerThreads, out minIoThreads);</div><div class=\"line\"></div><div class=\"line\">    int busyIoThreads = maxIoThreads - freeIoThreads;</div><div class=\"line\">    int busyWorkerThreads = maxWorkerThreads - freeWorkerThreads;</div><div class=\"line\"></div><div class=\"line\">    iocp = $\"(Busy=&#123;busyIoThreads&#125;,Free=&#123;freeIoThreads&#125;,Min=&#123;minIoThreads&#125;,Max=&#123;maxIoThreads&#125;)\";</div><div class=\"line\">    worker = $\"(Busy=&#123;busyWorkerThreads&#125;,Free=&#123;freeWorkerThreads&#125;,Min=&#123;minWorkerThreads&#125;,Max=&#123;maxWorkerThreads&#125;)\";</div><div class=\"line\">    return busyWorkerThreads;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System;</div><div class=\"line\"></div><div class=\"line\">public class Global : System.Web.HttpApplication</div><div class=\"line\">&#123;</div><div class=\"line\">    public bool MonitorThreadPoolEnabled = true;</div><div class=\"line\">    protected void Application_Start(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\">        Thread t = new Thread(new ThreadStart(RefreshCounters));</div><div class=\"line\">        t.Start();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Session_Start(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Application_BeginRequest(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Application_AuthenticateRequest(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Application_Error(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Session_End(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Application_End(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\">        MonitorThreadPoolEnabled = false;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void RefreshCounters()</div><div class=\"line\">    &#123;</div><div class=\"line\">        while (MonitorThreadPoolEnabled)</div><div class=\"line\">        &#123;</div><div class=\"line\">            ASPNETThreadInfo t = GetThreadInfo();</div><div class=\"line\">            ShowPerfCounters(t);</div><div class=\"line\">            System.Threading.Thread.Sleep(500);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public struct ASPNETThreadInfo</div><div class=\"line\">    &#123;</div><div class=\"line\">        public int MaxWorkerThreads;</div><div class=\"line\">        public int MaxIOThreads;</div><div class=\"line\">        public int MinFreeThreads;</div><div class=\"line\">        public int MinLocalRequestFreeThreads;</div><div class=\"line\">        public int AvailableWorkerThreads;</div><div class=\"line\">        public int AvailableIOThreads;</div><div class=\"line\"></div><div class=\"line\">        public bool Equals(ASPNETThreadInfo other)</div><div class=\"line\">        &#123;</div><div class=\"line\">            return (</div><div class=\"line\">            MaxWorkerThreads == other.MaxWorkerThreads &amp;&amp;</div><div class=\"line\">            MaxIOThreads == other.MaxIOThreads &amp;&amp;</div><div class=\"line\">            MinFreeThreads == other.MinFreeThreads &amp;&amp;</div><div class=\"line\">            MinLocalRequestFreeThreads == other.MinLocalRequestFreeThreads &amp;&amp;</div><div class=\"line\">            AvailableWorkerThreads == other.AvailableWorkerThreads &amp;&amp;</div><div class=\"line\">            AvailableIOThreads == other.AvailableIOThreads</div><div class=\"line\">            );</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public ASPNETThreadInfo GetThreadInfo()</div><div class=\"line\">    &#123;</div><div class=\"line\">        // use ThreadPool to get the current status</div><div class=\"line\">        int availableWorker, availableIO;</div><div class=\"line\">        int maxWorker, maxIO;</div><div class=\"line\">                    </div><div class=\"line\">        ThreadPool.GetAvailableThreads(out availableWorker, out availableIO);</div><div class=\"line\">        ThreadPool.GetMaxThreads(out maxWorker, out maxIO);            </div><div class=\"line\">        ASPNETThreadInfo threadInfo;</div><div class=\"line\">        threadInfo.AvailableWorkerThreads = (Int16)availableWorker;</div><div class=\"line\">        threadInfo.AvailableIOThreads = (Int16)availableIO;</div><div class=\"line\">        threadInfo.MaxWorkerThreads = (Int16)maxWorker;</div><div class=\"line\">        threadInfo.MaxIOThreads = (Int16)maxIO;            </div><div class=\"line\">        // hard code for now; could get this from  machine.config</div><div class=\"line\">        threadInfo.MinFreeThreads = 8;</div><div class=\"line\">        threadInfo.MinLocalRequestFreeThreads = 4;</div><div class=\"line\">        return threadInfo;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void ShowPerfCounters(ASPNETThreadInfo t)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        // get an instance of our Available Worker Threads counter</div><div class=\"line\">        PerformanceCounter counter1 = new PerformanceCounter();</div><div class=\"line\">        counter1.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter1.CounterName = \"Available Worker Threads\";</div><div class=\"line\">        counter1.ReadOnly = false;</div><div class=\"line\"></div><div class=\"line\">        // set the value of the counter</div><div class=\"line\">        counter1.RawValue = t.AvailableWorkerThreads;</div><div class=\"line\">        counter1.Close();</div><div class=\"line\"></div><div class=\"line\">        // repeat for other counters</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter2 = new PerformanceCounter();</div><div class=\"line\">        counter2.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter2.CounterName = \"Available IO Threads\";</div><div class=\"line\">        counter2.ReadOnly = false;</div><div class=\"line\">        counter2.RawValue = t.AvailableIOThreads;</div><div class=\"line\">        counter2.Close();</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter3 = new PerformanceCounter();</div><div class=\"line\">        counter3.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter3.CounterName = \"Max Worker Threads\";</div><div class=\"line\">        counter3.ReadOnly = false;</div><div class=\"line\">        counter3.RawValue = t.MaxWorkerThreads;</div><div class=\"line\">        counter3.Close();</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter4 = new PerformanceCounter();</div><div class=\"line\">        counter4.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter4.CounterName = \"Max IO Threads\";</div><div class=\"line\">        counter4.ReadOnly = false;</div><div class=\"line\">        counter4.RawValue = t.MaxIOThreads;</div><div class=\"line\">        counter4.Close();</div><div class=\"line\"></div><div class=\"line\">        int minWorker, minIO;</div><div class=\"line\">        ThreadPool.GetMinThreads(out minWorker, out minIO);</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter5 = new PerformanceCounter();</div><div class=\"line\">        counter5.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter5.CounterName = \"Min Worker Threads\";</div><div class=\"line\">        counter5.ReadOnly = false;</div><div class=\"line\">        counter5.RawValue = minWorker;</div><div class=\"line\">        counter5.Close();</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter6 = new PerformanceCounter();</div><div class=\"line\">        counter6.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter6.CounterName = \"Min IO Threads\";</div><div class=\"line\">        counter6.ReadOnly = false;</div><div class=\"line\">        counter6.RawValue = minIO;</div><div class=\"line\">        counter6.Close();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"StartWebApp-aspx\"><a href=\"#StartWebApp-aspx\" class=\"headerlink\" title=\"StartWebApp.aspx\"></a><span id=\"startWebApp\">StartWebApp.aspx</span></h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Page_Load</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, EventArgs e</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> availableWorker, availableIO;</div><div class=\"line\">    <span class=\"keyword\">int</span> maxWorker, maxIO;</div><div class=\"line\">    <span class=\"keyword\">int</span> minWorker, minIO;</div><div class=\"line\">  </div><div class=\"line\">    ThreadPool.GetAvailableThreads(<span class=\"keyword\">out</span> availableWorker, <span class=\"keyword\">out</span> availableIO);</div><div class=\"line\">    ThreadPool.GetMaxThreads(<span class=\"keyword\">out</span> maxWorker, <span class=\"keyword\">out</span> maxIO);</div><div class=\"line\">    ThreadPool.GetMinThreads(<span class=\"keyword\">out</span> minWorker, <span class=\"keyword\">out</span> minIO);</div><div class=\"line\"></div><div class=\"line\">    Response.Write(<span class=\"string\">\"This ASP.NET application has started.&lt;br&gt;\"</span>);</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"MaxWorkerThreads:&#123;0&#125;.&lt;br&gt;\"</span>, maxWorker));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"MaxIOThreads:&#123;0&#125;.&lt;br&gt;\"</span>, maxIO));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"MinWorkerThreads:&#123;0&#125;.&lt;br&gt;\"</span>, minWorker));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"MinIOThreads:&#123;0&#125;.&lt;br&gt;\"</span>, minIO));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"AvailableWorker:&#123;0&#125;.&lt;br&gt;\"</span>, availableWorker));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"AvailableIO:&#123;0&#125;.&lt;br&gt;\"</span>, availableIO));</div><div class=\"line\">    Response.Write(<span class=\"string\">\"You can now close this page.\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Sleep-aspx\"><a href=\"#Sleep-aspx\" class=\"headerlink\" title=\"Sleep.aspx\"></a><span id=\"sleep\">Sleep.aspx</span></h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Page_Load</span>(<span class=\"params\">Object sender, EventArgs e</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">      <span class=\"keyword\">int</span> times = <span class=\"number\">0</span> ;</div><div class=\"line\">      <span class=\"keyword\">var</span> max = <span class=\"keyword\">int</span>.Parse(Request.QueryString.Get(<span class=\"string\">\"max\"</span>));</div><div class=\"line\">      <span class=\"keyword\">var</span> server = ConnectionMultiplexer.Connect(<span class=\"string\">\"redisserver:6379,ssl=false,password=,allowAdmin=false,connectTimeout=200\"</span>);</div><div class=\"line\">      <span class=\"keyword\">var</span> list = Enumerable.Range(<span class=\"number\">1</span>, max).ToList();</div><div class=\"line\">      Parallel.ForEach(list, (i) =&gt;</div><div class=\"line\">      &#123;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">var</span> database = server.GetDatabase();</div><div class=\"line\">          database.StringGet(<span class=\"string\">\"Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8\"</span>);</div><div class=\"line\">          times++;</div><div class=\"line\">      &#125;);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> availableWorker, availableIO;</div><div class=\"line\">      <span class=\"keyword\">int</span> maxWorker, maxIO;</div><div class=\"line\">      ThreadPool.SetMaxThreads(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</div><div class=\"line\">      ThreadPool.GetAvailableThreads(<span class=\"keyword\">out</span> availableWorker, <span class=\"keyword\">out</span> availableIO);</div><div class=\"line\">      ThreadPool.GetMaxThreads(<span class=\"keyword\">out</span> maxWorker, <span class=\"keyword\">out</span> maxIO);</div><div class=\"line\">      Response.Write(String.Format(<span class=\"string\">\"Connect Redis Busy:&#123;0&#125;&lt;br /&gt; &#123;1&#125;\"</span>,maxWorker - availableWorker, times));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"StackExchange-Redis-源碼\"><a href=\"#StackExchange-Redis-源碼\" class=\"headerlink\" title=\"StackExchange.Redis 源碼\"></a>StackExchange.Redis 源碼</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">GetThreadPoolStats</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"keyword\">string</span> iocp, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> worker</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//BusyThreads =  TP.GetMaxThreads() –TP.GetAVailable();</span></div><div class=\"line\">    <span class=\"comment\">//If BusyThreads &gt;= TP.GetMinThreads(), then threadpool growth throttling is possible.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> maxIoThreads, maxWorkerThreads;</div><div class=\"line\">    ThreadPool.GetMaxThreads(<span class=\"keyword\">out</span> maxWorkerThreads, <span class=\"keyword\">out</span> maxIoThreads);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> freeIoThreads, freeWorkerThreads;</div><div class=\"line\">    ThreadPool.GetAvailableThreads(<span class=\"keyword\">out</span> freeWorkerThreads, <span class=\"keyword\">out</span> freeIoThreads);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> minIoThreads, minWorkerThreads;</div><div class=\"line\">    ThreadPool.GetMinThreads(<span class=\"keyword\">out</span> minWorkerThreads, <span class=\"keyword\">out</span> minIoThreads);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> busyIoThreads = maxIoThreads - freeIoThreads;</div><div class=\"line\">    <span class=\"keyword\">int</span> busyWorkerThreads = maxWorkerThreads - freeWorkerThreads;</div><div class=\"line\"></div><div class=\"line\">    iocp = <span class=\"string\">$\"(Busy=<span class=\"subst\">&#123;busyIoThreads&#125;</span>,Free=<span class=\"subst\">&#123;freeIoThreads&#125;</span>,Min=<span class=\"subst\">&#123;minIoThreads&#125;</span>,Max=<span class=\"subst\">&#123;maxIoThreads&#125;</span>)\"</span>;</div><div class=\"line\">    worker = <span class=\"string\">$\"(Busy=<span class=\"subst\">&#123;busyWorkerThreads&#125;</span>,Free=<span class=\"subst\">&#123;freeWorkerThreads&#125;</span>,Min=<span class=\"subst\">&#123;minWorkerThreads&#125;</span>,Max=<span class=\"subst\">&#123;maxWorkerThreads&#125;</span>)\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> busyWorkerThreads;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"環境與工具\"><a href=\"#環境與工具\" class=\"headerlink\" title=\"環境與工具\"></a><span id=\"testEnvironment\">環境與工具</span></h2><ul>\n<li>Visual Studio 2015 Professional UPDATE 3</li>\n<li>Windows 10 </li>\n<li>.NET Framework 4.5</li>\n<li>StackExchange.Redis 1.0.481</li>\n<li>CPU <code>Intel® Core™ i7-5500U</code> 四核心</li>\n</ul>\n<h2 id=\"官方說明\"><a href=\"#官方說明\" class=\"headerlink\" title=\"官方說明\"></a>官方說明</h2><ul>\n<li><a href=\"https://support.microsoft.com/zh-tw/kb/821268\" target=\"_blank\" rel=\"external\">爭用、 效能不佳、 和死結 （deadlock） 當您從 ASP.NET 應用程式呼叫 Web 服務</a></li>\n<li>machine.config</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">system.web</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">processModel</span> <span class=\"attr\">autoConfig</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">maxWorkerThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">maxIoThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">minWorkerThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">minIoThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">requestQueueLimit</span>=<span class=\"string\">\"5000\"</span> <span class=\"attr\">responseDeadlockInterval</span>=<span class=\"string\">\"00:03:00\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">httpRuntime</span> <span class=\"attr\">minFreeThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">minLocalRequestFreeThreads</span>=<span class=\"string\">\"xxx\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">system.web</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"建議的設定值\"><a href=\"#建議的設定值\" class=\"headerlink\" title=\"建議的設定值\"></a>建議的設定值</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">system.web</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">processModel</span> <span class=\"attr\">autoConfig</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">minWorkerThreads</span>=<span class=\"string\">\"1\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">system.web</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>.NET 官方文件的預設值與建議值</p>\n<table>\n<thead>\n<tr>\n<th>名稱</th>\n<th>預設值</th>\n<th>建議配置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>maxWorkerThreads</td>\n<td>20</td>\n<td>32767 / #Cores</td>\n</tr>\n<tr>\n<td>maxIoThreads</td>\n<td>20</td>\n<td>32767 / #Cores</td>\n</tr>\n<tr>\n<td>minWorkerThreads</td>\n<td>1</td>\n<td>maxWorkerThreads/2</td>\n</tr>\n<tr>\n<td>minIoThreads</td>\n<td>1</td>\n<td>maxIoThreads / 2</td>\n</tr>\n<tr>\n<td>minFreeThreads</td>\n<td>8</td>\n<td>88*#CPUs</td>\n</tr>\n<tr>\n<td>minLocalRequestFreeThreads</td>\n<td>4</td>\n<td>76*#CPUs</td>\n</tr>\n<tr>\n<td>maxconnection</td>\n<td>2</td>\n<td>12*CPUs</td>\n</tr>\n<tr>\n<td>executionTimeout</td>\n<td>90s</td>\n<td>未建議</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>maxWorkerThreads,minWorkerThreads,maxIoThreads,minIoThreads 設定的數值需要乘上CPU的數量,<br>例: 4 核心設定 minWorkerThreads 值 20 ,實際上的值為 80   </li>\n</ul>\n<h2 id=\"註釋\"><a href=\"#註釋\" class=\"headerlink\" title=\"註釋\"></a><span id=\"comment1\">註釋<span></span></span></h2><ol>\n<li>ThreadPool 中會有一個 queue , 其中隱含一個半秒機制 , 當 queue 靜止超過半秒 , 就會在 ThreadPool 建立一個新的 Thread  </li>\n</ol>\n<h2 id=\"記錄\"><a href=\"#記錄\" class=\"headerlink\" title=\"記錄\"></a>記錄</h2><ul>\n<li>ADO.NET 需要使用 Worker Thread</li>\n<li>Redis 需要使用 Worker Thread</li>\n<li></li>\n</ul>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx\" target=\"_blank\" rel=\"external\">Threading</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms998549.aspx\" target=\"_blank\" rel=\"external\">Improving ASP.NET Performance</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms973903.aspx\" target=\"_blank\" rel=\"external\">Programming the Thread Pool in the .NET Framework</a></li>\n<li><a href=\"https://github.com/StackExchange/StackExchange.Redis\" target=\"_blank\" rel=\"external\">StackExchange.Redis 源碼</a></li>\n<li><a href=\"https://read01.com/MenEP.html\" target=\"_blank\" rel=\"external\">雲計算之路-阿里雲上：從ASP.NET線程角度對「黑色30秒」問題的全新分析</a></li>\n<li><a href=\"https://msdn.microsoft.com/zh-tw/library/ff650682.aspx\" target=\"_blank\" rel=\"external\">How To: Monitor the ASP.NET Thread Pool Using Custom Counters</a></li>\n<li><a href=\"http://www.thejoyofcode.com/tuning_the_threadpool.aspx\" target=\"_blank\" rel=\"external\">http://www.thejoyofcode.com/tuning_the_threadpool.aspx</a></li>\n<li><a href=\"https://gist.github.com/JonCole/e65411214030f0d823cb\" target=\"_blank\" rel=\"external\">https://gist.github.com/JonCole/e65411214030f0d823cb</a></li>\n<li><a href=\"https://blogs.msdn.microsoft.com/carloc/2009/02/19/minworkerthreads-and-autoconfig/\" target=\"_blank\" rel=\"external\">https://blogs.msdn.microsoft.com/carloc/2009/02/19/minworkerthreads-and-autoconfig/</a></li>\n</ul>\n"},{"title":"2017年的學習回顧與展望","date":"2017-12-31T16:00:51.000Z","_content":"\n## 測試\n\n參加了兩個活動,分別是[單元測試這樣玩就對了](https://blog.marsen.me/2017/04/23/unitestwriting/),與[測試即學習](https://blog.marsen.me/2017/05/19/testingislearning/);  \n\n### [單元測試這樣玩就對了](https://blog.marsen.me/2017/04/23/unitestwriting/)\n\n最大的收獲是突破了寫測試的心魔, 在那之前總覺得 TDD 只是口號, 或是烏托邦的開發理想.  \n雖然之前也有花大錢出外受訓, 或是公司內部的內訓.  \n手上也有一些前輩的測試代碼, 但是就是沒有「感覺」,  \n```\n不過仍然感謝前幾年的自已有將資源花在測試上面,  \n累積了兩年的測試經驗,  \n融會貫通卻只是一瞬間的事\n```\n最主要是講者展現了實務上面的需求與改進,  \n過去寫的加法運算, 或是[吊人遊戲](https://zh.wikipedia.org/wiki/猜單詞遊戲),  \n雖然也是從無到,也是先寫測試,  \n但或許是太過強調 TDD 太過強調從無到有  \n總與實際開發經驗相違背, \n講者在過程中一句 **「不要管先寫測試還是程式」**  \n反而更貼近真實,先寫程式,再想想怎麼測試？  \n為了測試, 再重構, 逐步分解的過程令我大開眼界.  \n\n過去曾與人討論過TDD的議題,  \n總會得到「實務與理論有差別」、「其背景與環境因素不能寫測試」  \n這類似是而非的回答,當下我也無法辯駁  \n現在想起來只能莞爾. \n\n測試趨動開發不等於一定要先測試,  \n特別是習慣於先寫產品程式的人,  \n不仿先寫產品程式, 再寫測試而趨動重構  \n當寫習慣了,知道哪些耦合會帶來重構的代價時,  \n再寫一次就人性就會自動迴避這些不好的Patten .\n\n別管順序,但是記得寫測試.\n\n### [測試即學習](https://blog.marsen.me/2017/05/19/testingislearning/)\n\n梅老師的課也是很毀三觀的,  \n老實說我跟本不知道他在幹嘛,  \n塔羅牌拿出來的時候,  \n我真的以為是[美江](https://zh.wikipedia.org/wiki/郭美江傳道爭議事件#%E5%BD%B1%E7%89%87%E4%BB%A5%E5%A4%96%E4%B9%8B%E5%BD%B1%E9%9F%BF)再現(那個時候[Seafood](https://goo.gl/zD51h3)還沒有業力引爆( ･ω･)( ･ω･)( ･ω･))  \n那堂課的目標族群應該是QA,  \n不過這個時代不應自我設限,  \n複習一下梅老師的分享,  \n\n探索測試\n- 儘可能的發散\n- 摹仿別人看事情的角度\n- 有意識的學習(mindful learning)\n    - 記錄\n    - 總結\n    - 歸納問題的核心\n    - 給它起一個名字(沒有專有名詞的話)\n    - 有意識的逃離第一印象\n    - 小心不經意的盲區(inattentional blindness)\n    - 數量 X 練習 X 思考 X 學習 = 提昇\n\n對我來說,**給它起一個名字**真是超級有用的,  \n新認識的朋友就叫作「王大棰」, 新的技術就叫「起司包」, 新的概念就叫「黑盒子」等...  \n不要過於專研於名詞, 用自已能理解的名字去框那個新事物的範圍,  \n最後再把名字用大家通用的名字取代掉就好了.  \n看了很多的方法論,會發現其實觀念沒什麼改變,  \n只是新的名詞會一直冒出來,  \n唯物主義、馬基維利主義、不擇手段、實用主義  \n改善、KANBAN、敏捷、精實  balabala...\n\n## [“没有时间”- 完美的借口](http://www.danielteng.com/2012/09/25/no-time-to-learn-perfect-excuse/)\n\n2017年影響我最深的一篇Blog,  \n2012年的文章, 篇幅也不長,  \n觀念也很簡單, 作就對了, 作壞了就丟掉再作一次,  \n很多的書都要我們刻意練習,  \n但是我們的時間哪有那麼多呢？  \n長大了之後,才來1萬小時的修練是不是太晚了呢？  \n\n下半年公司開始推行測試,  \n基層的工程師們其實反彈的聲音一直都在,  \n雖然一直有教育訓練與培養種子,  \n不過大多淪為口號的狀態,  \n我也只能用這篇文章作為勉勵.  \n\n其實現在的版本控制系統已經非常便利,  \n要建立一個Sandbox的分支,  \n在裡面嚐試各種可能性是非常容易的,  \n作壞了丟掉分支就好了,  \n身為專業的工程人員,測試是必須的,失敗也是,  \n在沙箱內失敗,其實是摔不疼的,勇敢嚐試吧. \n\n## 生產力\n2016年是時間記錄的一年,  \n那2017年就是把記錄的時間,  \n轉換成生產力的一年.  \n幾本影響比較多的書,不過或許我仍需要二讀至三讀以上\n\n- 最有生產力的一年 → 時間X精力X專注力 = 生產力\n- GTD → 下一步要作什麼？\n- 軟技能 → 自我營銷\n\n新的一年重心會放在習慣上面,  \n因為讓習慣趨動行為,  \n比起刻意遵循某些方法要好得多,  \n「刻意」太浪費精神力了,\n下一步會如何呢？\n希望能翻轉自已\n\n## 其它\n順利的帶媽媽出國了,或許對一些人來說不算什麼成就吧,\n新的一年有些機會,去日本、以色列、俄羅斯、馬來西亞,\n雖然八字還沒有一撇, 但至少會去一個地方吧...\n其他的地方就只能見機行事了.\n\n新年快樂\n(fin)","source":"_posts/2018/2017_learned.md","raw":"---\ntitle: \"2017年的學習回顧與展望\"\ndate: 2018/01/01 00:00:51\n---\n\n## 測試\n\n參加了兩個活動,分別是[單元測試這樣玩就對了](https://blog.marsen.me/2017/04/23/unitestwriting/),與[測試即學習](https://blog.marsen.me/2017/05/19/testingislearning/);  \n\n### [單元測試這樣玩就對了](https://blog.marsen.me/2017/04/23/unitestwriting/)\n\n最大的收獲是突破了寫測試的心魔, 在那之前總覺得 TDD 只是口號, 或是烏托邦的開發理想.  \n雖然之前也有花大錢出外受訓, 或是公司內部的內訓.  \n手上也有一些前輩的測試代碼, 但是就是沒有「感覺」,  \n```\n不過仍然感謝前幾年的自已有將資源花在測試上面,  \n累積了兩年的測試經驗,  \n融會貫通卻只是一瞬間的事\n```\n最主要是講者展現了實務上面的需求與改進,  \n過去寫的加法運算, 或是[吊人遊戲](https://zh.wikipedia.org/wiki/猜單詞遊戲),  \n雖然也是從無到,也是先寫測試,  \n但或許是太過強調 TDD 太過強調從無到有  \n總與實際開發經驗相違背, \n講者在過程中一句 **「不要管先寫測試還是程式」**  \n反而更貼近真實,先寫程式,再想想怎麼測試？  \n為了測試, 再重構, 逐步分解的過程令我大開眼界.  \n\n過去曾與人討論過TDD的議題,  \n總會得到「實務與理論有差別」、「其背景與環境因素不能寫測試」  \n這類似是而非的回答,當下我也無法辯駁  \n現在想起來只能莞爾. \n\n測試趨動開發不等於一定要先測試,  \n特別是習慣於先寫產品程式的人,  \n不仿先寫產品程式, 再寫測試而趨動重構  \n當寫習慣了,知道哪些耦合會帶來重構的代價時,  \n再寫一次就人性就會自動迴避這些不好的Patten .\n\n別管順序,但是記得寫測試.\n\n### [測試即學習](https://blog.marsen.me/2017/05/19/testingislearning/)\n\n梅老師的課也是很毀三觀的,  \n老實說我跟本不知道他在幹嘛,  \n塔羅牌拿出來的時候,  \n我真的以為是[美江](https://zh.wikipedia.org/wiki/郭美江傳道爭議事件#%E5%BD%B1%E7%89%87%E4%BB%A5%E5%A4%96%E4%B9%8B%E5%BD%B1%E9%9F%BF)再現(那個時候[Seafood](https://goo.gl/zD51h3)還沒有業力引爆( ･ω･)( ･ω･)( ･ω･))  \n那堂課的目標族群應該是QA,  \n不過這個時代不應自我設限,  \n複習一下梅老師的分享,  \n\n探索測試\n- 儘可能的發散\n- 摹仿別人看事情的角度\n- 有意識的學習(mindful learning)\n    - 記錄\n    - 總結\n    - 歸納問題的核心\n    - 給它起一個名字(沒有專有名詞的話)\n    - 有意識的逃離第一印象\n    - 小心不經意的盲區(inattentional blindness)\n    - 數量 X 練習 X 思考 X 學習 = 提昇\n\n對我來說,**給它起一個名字**真是超級有用的,  \n新認識的朋友就叫作「王大棰」, 新的技術就叫「起司包」, 新的概念就叫「黑盒子」等...  \n不要過於專研於名詞, 用自已能理解的名字去框那個新事物的範圍,  \n最後再把名字用大家通用的名字取代掉就好了.  \n看了很多的方法論,會發現其實觀念沒什麼改變,  \n只是新的名詞會一直冒出來,  \n唯物主義、馬基維利主義、不擇手段、實用主義  \n改善、KANBAN、敏捷、精實  balabala...\n\n## [“没有时间”- 完美的借口](http://www.danielteng.com/2012/09/25/no-time-to-learn-perfect-excuse/)\n\n2017年影響我最深的一篇Blog,  \n2012年的文章, 篇幅也不長,  \n觀念也很簡單, 作就對了, 作壞了就丟掉再作一次,  \n很多的書都要我們刻意練習,  \n但是我們的時間哪有那麼多呢？  \n長大了之後,才來1萬小時的修練是不是太晚了呢？  \n\n下半年公司開始推行測試,  \n基層的工程師們其實反彈的聲音一直都在,  \n雖然一直有教育訓練與培養種子,  \n不過大多淪為口號的狀態,  \n我也只能用這篇文章作為勉勵.  \n\n其實現在的版本控制系統已經非常便利,  \n要建立一個Sandbox的分支,  \n在裡面嚐試各種可能性是非常容易的,  \n作壞了丟掉分支就好了,  \n身為專業的工程人員,測試是必須的,失敗也是,  \n在沙箱內失敗,其實是摔不疼的,勇敢嚐試吧. \n\n## 生產力\n2016年是時間記錄的一年,  \n那2017年就是把記錄的時間,  \n轉換成生產力的一年.  \n幾本影響比較多的書,不過或許我仍需要二讀至三讀以上\n\n- 最有生產力的一年 → 時間X精力X專注力 = 生產力\n- GTD → 下一步要作什麼？\n- 軟技能 → 自我營銷\n\n新的一年重心會放在習慣上面,  \n因為讓習慣趨動行為,  \n比起刻意遵循某些方法要好得多,  \n「刻意」太浪費精神力了,\n下一步會如何呢？\n希望能翻轉自已\n\n## 其它\n順利的帶媽媽出國了,或許對一些人來說不算什麼成就吧,\n新的一年有些機會,去日本、以色列、俄羅斯、馬來西亞,\n雖然八字還沒有一撇, 但至少會去一個地方吧...\n其他的地方就只能見機行事了.\n\n新年快樂\n(fin)","slug":"2018/2017_learned","published":1,"updated":"2018-01-30T16:29:44.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyg8005dyk55vgqf2pcb","content":"<h2 id=\"測試\"><a href=\"#測試\" class=\"headerlink\" title=\"測試\"></a>測試</h2><p>參加了兩個活動,分別是<a href=\"https://blog.marsen.me/2017/04/23/unitestwriting/\">單元測試這樣玩就對了</a>,與<a href=\"https://blog.marsen.me/2017/05/19/testingislearning/\">測試即學習</a>;  </p>\n<h3 id=\"單元測試這樣玩就對了\"><a href=\"#單元測試這樣玩就對了\" class=\"headerlink\" title=\"單元測試這樣玩就對了\"></a><a href=\"https://blog.marsen.me/2017/04/23/unitestwriting/\">單元測試這樣玩就對了</a></h3><p>最大的收獲是突破了寫測試的心魔, 在那之前總覺得 TDD 只是口號, 或是烏托邦的開發理想.<br>雖然之前也有花大錢出外受訓, 或是公司內部的內訓.<br>手上也有一些前輩的測試代碼, 但是就是沒有「感覺」,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">不過仍然感謝前幾年的自已有將資源花在測試上面,  </div><div class=\"line\">累積了兩年的測試經驗,  </div><div class=\"line\">融會貫通卻只是一瞬間的事</div></pre></td></tr></table></figure></p>\n<p>最主要是講者展現了實務上面的需求與改進,<br>過去寫的加法運算, 或是<a href=\"https://zh.wikipedia.org/wiki/猜單詞遊戲\" target=\"_blank\" rel=\"external\">吊人遊戲</a>,<br>雖然也是從無到,也是先寫測試,<br>但或許是太過強調 TDD 太過強調從無到有<br>總與實際開發經驗相違背,<br>講者在過程中一句 <strong>「不要管先寫測試還是程式」</strong><br>反而更貼近真實,先寫程式,再想想怎麼測試？<br>為了測試, 再重構, 逐步分解的過程令我大開眼界.  </p>\n<p>過去曾與人討論過TDD的議題,<br>總會得到「實務與理論有差別」、「其背景與環境因素不能寫測試」<br>這類似是而非的回答,當下我也無法辯駁<br>現在想起來只能莞爾. </p>\n<p>測試趨動開發不等於一定要先測試,<br>特別是習慣於先寫產品程式的人,<br>不仿先寫產品程式, 再寫測試而趨動重構<br>當寫習慣了,知道哪些耦合會帶來重構的代價時,<br>再寫一次就人性就會自動迴避這些不好的Patten .</p>\n<p>別管順序,但是記得寫測試.</p>\n<h3 id=\"測試即學習\"><a href=\"#測試即學習\" class=\"headerlink\" title=\"測試即學習\"></a><a href=\"https://blog.marsen.me/2017/05/19/testingislearning/\">測試即學習</a></h3><p>梅老師的課也是很毀三觀的,<br>老實說我跟本不知道他在幹嘛,<br>塔羅牌拿出來的時候,<br>我真的以為是<a href=\"https://zh.wikipedia.org/wiki/郭美江傳道爭議事件#%E5%BD%B1%E7%89%87%E4%BB%A5%E5%A4%96%E4%B9%8B%E5%BD%B1%E9%9F%BF\" target=\"_blank\" rel=\"external\">美江</a>再現(那個時候<a href=\"https://goo.gl/zD51h3\" target=\"_blank\" rel=\"external\">Seafood</a>還沒有業力引爆( ･ω･)( ･ω･)( ･ω･))<br>那堂課的目標族群應該是QA,<br>不過這個時代不應自我設限,<br>複習一下梅老師的分享,  </p>\n<p>探索測試</p>\n<ul>\n<li>儘可能的發散</li>\n<li>摹仿別人看事情的角度</li>\n<li>有意識的學習(mindful learning)<ul>\n<li>記錄</li>\n<li>總結</li>\n<li>歸納問題的核心</li>\n<li>給它起一個名字(沒有專有名詞的話)</li>\n<li>有意識的逃離第一印象</li>\n<li>小心不經意的盲區(inattentional blindness)</li>\n<li>數量 X 練習 X 思考 X 學習 = 提昇</li>\n</ul>\n</li>\n</ul>\n<p>對我來說,<strong>給它起一個名字</strong>真是超級有用的,<br>新認識的朋友就叫作「王大棰」, 新的技術就叫「起司包」, 新的概念就叫「黑盒子」等…<br>不要過於專研於名詞, 用自已能理解的名字去框那個新事物的範圍,<br>最後再把名字用大家通用的名字取代掉就好了.<br>看了很多的方法論,會發現其實觀念沒什麼改變,<br>只是新的名詞會一直冒出來,<br>唯物主義、馬基維利主義、不擇手段、實用主義<br>改善、KANBAN、敏捷、精實  balabala…</p>\n<h2 id=\"“没有时间”-完美的借口\"><a href=\"#“没有时间”-完美的借口\" class=\"headerlink\" title=\"“没有时间”- 完美的借口\"></a><a href=\"http://www.danielteng.com/2012/09/25/no-time-to-learn-perfect-excuse/\" target=\"_blank\" rel=\"external\">“没有时间”- 完美的借口</a></h2><p>2017年影響我最深的一篇Blog,<br>2012年的文章, 篇幅也不長,<br>觀念也很簡單, 作就對了, 作壞了就丟掉再作一次,<br>很多的書都要我們刻意練習,<br>但是我們的時間哪有那麼多呢？<br>長大了之後,才來1萬小時的修練是不是太晚了呢？  </p>\n<p>下半年公司開始推行測試,<br>基層的工程師們其實反彈的聲音一直都在,<br>雖然一直有教育訓練與培養種子,<br>不過大多淪為口號的狀態,<br>我也只能用這篇文章作為勉勵.  </p>\n<p>其實現在的版本控制系統已經非常便利,<br>要建立一個Sandbox的分支,<br>在裡面嚐試各種可能性是非常容易的,<br>作壞了丟掉分支就好了,<br>身為專業的工程人員,測試是必須的,失敗也是,<br>在沙箱內失敗,其實是摔不疼的,勇敢嚐試吧. </p>\n<h2 id=\"生產力\"><a href=\"#生產力\" class=\"headerlink\" title=\"生產力\"></a>生產力</h2><p>2016年是時間記錄的一年,<br>那2017年就是把記錄的時間,<br>轉換成生產力的一年.<br>幾本影響比較多的書,不過或許我仍需要二讀至三讀以上</p>\n<ul>\n<li>最有生產力的一年 → 時間X精力X專注力 = 生產力</li>\n<li>GTD → 下一步要作什麼？</li>\n<li>軟技能 → 自我營銷</li>\n</ul>\n<p>新的一年重心會放在習慣上面,<br>因為讓習慣趨動行為,<br>比起刻意遵循某些方法要好得多,<br>「刻意」太浪費精神力了,<br>下一步會如何呢？<br>希望能翻轉自已</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>順利的帶媽媽出國了,或許對一些人來說不算什麼成就吧,<br>新的一年有些機會,去日本、以色列、俄羅斯、馬來西亞,<br>雖然八字還沒有一撇, 但至少會去一個地方吧…<br>其他的地方就只能見機行事了.</p>\n<p>新年快樂<br>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"測試\"><a href=\"#測試\" class=\"headerlink\" title=\"測試\"></a>測試</h2><p>參加了兩個活動,分別是<a href=\"https://blog.marsen.me/2017/04/23/unitestwriting/\">單元測試這樣玩就對了</a>,與<a href=\"https://blog.marsen.me/2017/05/19/testingislearning/\">測試即學習</a>;  </p>\n<h3 id=\"單元測試這樣玩就對了\"><a href=\"#單元測試這樣玩就對了\" class=\"headerlink\" title=\"單元測試這樣玩就對了\"></a><a href=\"https://blog.marsen.me/2017/04/23/unitestwriting/\">單元測試這樣玩就對了</a></h3><p>最大的收獲是突破了寫測試的心魔, 在那之前總覺得 TDD 只是口號, 或是烏托邦的開發理想.<br>雖然之前也有花大錢出外受訓, 或是公司內部的內訓.<br>手上也有一些前輩的測試代碼, 但是就是沒有「感覺」,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">不過仍然感謝前幾年的自已有將資源花在測試上面,  </div><div class=\"line\">累積了兩年的測試經驗,  </div><div class=\"line\">融會貫通卻只是一瞬間的事</div></pre></td></tr></table></figure></p>\n<p>最主要是講者展現了實務上面的需求與改進,<br>過去寫的加法運算, 或是<a href=\"https://zh.wikipedia.org/wiki/猜單詞遊戲\" target=\"_blank\" rel=\"external\">吊人遊戲</a>,<br>雖然也是從無到,也是先寫測試,<br>但或許是太過強調 TDD 太過強調從無到有<br>總與實際開發經驗相違背,<br>講者在過程中一句 <strong>「不要管先寫測試還是程式」</strong><br>反而更貼近真實,先寫程式,再想想怎麼測試？<br>為了測試, 再重構, 逐步分解的過程令我大開眼界.  </p>\n<p>過去曾與人討論過TDD的議題,<br>總會得到「實務與理論有差別」、「其背景與環境因素不能寫測試」<br>這類似是而非的回答,當下我也無法辯駁<br>現在想起來只能莞爾. </p>\n<p>測試趨動開發不等於一定要先測試,<br>特別是習慣於先寫產品程式的人,<br>不仿先寫產品程式, 再寫測試而趨動重構<br>當寫習慣了,知道哪些耦合會帶來重構的代價時,<br>再寫一次就人性就會自動迴避這些不好的Patten .</p>\n<p>別管順序,但是記得寫測試.</p>\n<h3 id=\"測試即學習\"><a href=\"#測試即學習\" class=\"headerlink\" title=\"測試即學習\"></a><a href=\"https://blog.marsen.me/2017/05/19/testingislearning/\">測試即學習</a></h3><p>梅老師的課也是很毀三觀的,<br>老實說我跟本不知道他在幹嘛,<br>塔羅牌拿出來的時候,<br>我真的以為是<a href=\"https://zh.wikipedia.org/wiki/郭美江傳道爭議事件#%E5%BD%B1%E7%89%87%E4%BB%A5%E5%A4%96%E4%B9%8B%E5%BD%B1%E9%9F%BF\" target=\"_blank\" rel=\"external\">美江</a>再現(那個時候<a href=\"https://goo.gl/zD51h3\" target=\"_blank\" rel=\"external\">Seafood</a>還沒有業力引爆( ･ω･)( ･ω･)( ･ω･))<br>那堂課的目標族群應該是QA,<br>不過這個時代不應自我設限,<br>複習一下梅老師的分享,  </p>\n<p>探索測試</p>\n<ul>\n<li>儘可能的發散</li>\n<li>摹仿別人看事情的角度</li>\n<li>有意識的學習(mindful learning)<ul>\n<li>記錄</li>\n<li>總結</li>\n<li>歸納問題的核心</li>\n<li>給它起一個名字(沒有專有名詞的話)</li>\n<li>有意識的逃離第一印象</li>\n<li>小心不經意的盲區(inattentional blindness)</li>\n<li>數量 X 練習 X 思考 X 學習 = 提昇</li>\n</ul>\n</li>\n</ul>\n<p>對我來說,<strong>給它起一個名字</strong>真是超級有用的,<br>新認識的朋友就叫作「王大棰」, 新的技術就叫「起司包」, 新的概念就叫「黑盒子」等…<br>不要過於專研於名詞, 用自已能理解的名字去框那個新事物的範圍,<br>最後再把名字用大家通用的名字取代掉就好了.<br>看了很多的方法論,會發現其實觀念沒什麼改變,<br>只是新的名詞會一直冒出來,<br>唯物主義、馬基維利主義、不擇手段、實用主義<br>改善、KANBAN、敏捷、精實  balabala…</p>\n<h2 id=\"“没有时间”-完美的借口\"><a href=\"#“没有时间”-完美的借口\" class=\"headerlink\" title=\"“没有时间”- 完美的借口\"></a><a href=\"http://www.danielteng.com/2012/09/25/no-time-to-learn-perfect-excuse/\" target=\"_blank\" rel=\"external\">“没有时间”- 完美的借口</a></h2><p>2017年影響我最深的一篇Blog,<br>2012年的文章, 篇幅也不長,<br>觀念也很簡單, 作就對了, 作壞了就丟掉再作一次,<br>很多的書都要我們刻意練習,<br>但是我們的時間哪有那麼多呢？<br>長大了之後,才來1萬小時的修練是不是太晚了呢？  </p>\n<p>下半年公司開始推行測試,<br>基層的工程師們其實反彈的聲音一直都在,<br>雖然一直有教育訓練與培養種子,<br>不過大多淪為口號的狀態,<br>我也只能用這篇文章作為勉勵.  </p>\n<p>其實現在的版本控制系統已經非常便利,<br>要建立一個Sandbox的分支,<br>在裡面嚐試各種可能性是非常容易的,<br>作壞了丟掉分支就好了,<br>身為專業的工程人員,測試是必須的,失敗也是,<br>在沙箱內失敗,其實是摔不疼的,勇敢嚐試吧. </p>\n<h2 id=\"生產力\"><a href=\"#生產力\" class=\"headerlink\" title=\"生產力\"></a>生產力</h2><p>2016年是時間記錄的一年,<br>那2017年就是把記錄的時間,<br>轉換成生產力的一年.<br>幾本影響比較多的書,不過或許我仍需要二讀至三讀以上</p>\n<ul>\n<li>最有生產力的一年 → 時間X精力X專注力 = 生產力</li>\n<li>GTD → 下一步要作什麼？</li>\n<li>軟技能 → 自我營銷</li>\n</ul>\n<p>新的一年重心會放在習慣上面,<br>因為讓習慣趨動行為,<br>比起刻意遵循某些方法要好得多,<br>「刻意」太浪費精神力了,<br>下一步會如何呢？<br>希望能翻轉自已</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>順利的帶媽媽出國了,或許對一些人來說不算什麼成就吧,<br>新的一年有些機會,去日本、以色列、俄羅斯、馬來西亞,<br>雖然八字還沒有一撇, 但至少會去一個地方吧…<br>其他的地方就只能見機行事了.</p>\n<p>新年快樂<br>(fin)</p>\n"},{"title":"代碼審查與交付的戰爭ー標準、風格與原則","date":"2018-01-03T16:51:27.000Z","_content":"###### Coding Standard / Code Review / Pull Request & Delivery\n![](https://i.imgur.com/tssraf0.jpg)\n## 故事背景\n1. 團隊的部署流程是 Github Flow 與 Git Flow 混用 , 給它起個名字叫 GG Flow 好了.\n2. GG Flow 的過程需要開發人員需要透過 **Pull Request** 將修改推送給產品 \n3. 擁有權限 Merge Pull Request 的成員被叫作 Reviewer\n4. Reviewer 通常由較資深人員或部門主管擔任,所以通常有比較多的~~無用~~會議要開\n5. Reviewer 在 Merge 之前需要作 **Code Review**\n6. Reviewer 需要遵循 **Coding Standard** 作 Code Review\n\n## 實務面臨的問題與副作用\n#### Coding Standard 並不能考慮到所有狀況 \n\n1. 所以 Reviewers 會定期針對不同的狀況開會討論 Coding Standard\n    - Coding Standard 會**不定期改變** , 但是透過Reviewer佈達的方式,讓第一線的RD其實難以知道其全貌.\n    - Coding Standard 改變後不會全面的翻改程式,實務上是作到哪裡改到哪裡\n    - 以上兩點導致 Source Code 裡面有很多符合不同時期的 Coding Standard 的 Code\n    - 任一個時間點, 誰都無法保証完全符合最新的 Coding Standard \n2. 人性,開發者會~~COPY/PASTE 方法開發~~參考Legacy Code開發\n    - Legacy Code 不符合新的 Coding Standard\n    - Reviewer 也是人, 所以 Code Review 時也會疏漏,而 Merge 進去不符合新的 Coding Standard 的 Code\n    - 所以 Source Code 裡面還是有很多不同時期的 Coding Standard 的 Code\n3. 回歸一開始的問題 Coding Standard 並不能考慮到所有狀況 \n    - 還沒有開會前, 不同的 Reviewer 會有不同的想法\n    - 開會後,在執行Code Review時, 不同的 Reviewer 會有不同的作法\n    - 當一個 PR 有多人 Reviewer 時, 會有不同的意見 PR 因此被延遲 Merge\n    - 結果,**交付會變慢**.\n\n## 反思,標準還是風格？ \n\n思考一下,開發程式碼的目標與價值是什麼 ?\n寫出 Clearn Code ? \n還是交付產品 ?\n這樣子的 Source Code 真的是 Clearn Code 嗎？\n\n## 自問自答\n\n#### Q1. 我們該有標準嗎？\nA1. 當然要有標準,不過標準之所以為標準,應該有以下幾個特點. \n- 它應該要很簡單, 像是Class與欄位的命名規則\n- 它應放諸四海皆準, 不應該輕易被修改\n- 它應該可以被自動化的檢測\n假設能作到這3點, 這件事應該可以被自動化工具處理掉 . \n\n#### Q2. 實務上就是很複雜, 所以才需要討論制訂標準啊\nA2. \n在實務上遇到很複雜的情況, 大多需要依賴約定成俗方式規範.\n這是一種**風格**或**原則** ; \n簡單的分類方法, \n如果無法透過自動化工具作檢測, \n就不應該歸類為**標準**.\n\n*註:有機會再介紹自動化的檢測工具*\n\n#### Q3. **風格**或**原則**跟**標準**有何不同？\nA3. 如上所說,標準應該能被自動化,\n風格應該是團隊的文化自然形成的產物, \n具體的實作可以透過讓開發者**彼此之間作代碼審核**\n或是**結對編程**培養出屬於團隊的風格,\n風格要基於標準之上,但是不能違反原則;\n\n以下的原則可以作為參考\n- 可以建置並通過測試\n- 可讀性\n\t- self documenting\n\t- 有用的註解 \n- 公開方法要可以被測試\n\t- 小心使用靜態類別\n\t- 注意new Instance的時機\n\t- 重複的代碼應重構\n- 保持 SOLID \n\n初期的可能會發生在「{」要不要換行之類的問題上揪結之類的蠢事,  \n如果可以自動化,就把它作成標準吧…  \n如果不行的話, 就別揪結了.  \n\n實務上可能遇到各種狀況,  \n把Reviewer的權限下放到各個開發者身上,  \n或是使用結對編程,  \n就讓團隊成員去討論與決定風格.  \n\n以標準為根基,原則為天,  \n踩穩腳步,不要超出天空,  \n就讓團隊自由發揮吧. \n\n**最後,持續交付會比每兩周花一個小時開會決定Style的細節好多了. 不是嗎？**\n\n## 其它團隊分享的具體作法\n\n1. 超過一定時間就讓成員擁Merge權限\n2. Release權限仍集中控管\n3. 錯了再改就好(保持敏捷)\n4. 給pair作code review與merge (避免一人思維陷井)\n5. 兩個人無法解決時找第三方\n6. release 功能 優先於 一致的 coding standard\n7. 品質由測試管控而非 reviewer\n8. 先有測試才有重構\n9. 可讀性 優於 枝微末節的coding standard實踐\n10. 善用自動化工具( sonarqube / stylecop )\n\n(fin)\n\n##### 補充 [社群觀點](https://www.facebook.com/groups/616369245163622/permalink/1225873964213144/)\n\n- coding style一般不管的。\n- class name／variable name，一定要叫有意義的名字。\n- local scope variable，換多少行，indentation，這些是小事\n- 一個成熟的developer，隨時會被上司命令這些遠古火星文明（legacy system）去做考古工作\n- coding style這些事，就像emacs和vim之戰一樣，戰到skynet出來了也不會戰完的\n- 如果要開會去討論coding style，最終很可能讓團隊口服心不服地去跟隨我的Coding Style。\n- 在Coding Style這種低層次的小事上用光了團隊成員之間互相容忍的能量，而在更重要的大事上無法好好合作。\n- 有很多事是比Coding Style重要的。\n\t- Object Modeling是否跟business logic一致？\n\t- 還是Object有這個attribute但是根本沒在用？\n\t- Code Change是否有做好測試？\n\t- 系統架構是否合理\n\t- 有做好High-Avalibility嗎？\n\t- 有沒有Race Condition？\n- 是其是，非其非。真正有道理的，你說了對方便自然會聽下去。\n- 「Senior」是代表自己在專業上懂得比別人多，而不是比別人身份高級。","source":"_posts/2018/coding_standard_and_coding_style_and_principle.md","raw":"---\ntitle: \"代碼審查與交付的戰爭ー標準、風格與原則\"\ndate: 2018/01/04 00:51:27\ntag:\n  - Coding Standard\n---\n###### Coding Standard / Code Review / Pull Request & Delivery\n![](https://i.imgur.com/tssraf0.jpg)\n## 故事背景\n1. 團隊的部署流程是 Github Flow 與 Git Flow 混用 , 給它起個名字叫 GG Flow 好了.\n2. GG Flow 的過程需要開發人員需要透過 **Pull Request** 將修改推送給產品 \n3. 擁有權限 Merge Pull Request 的成員被叫作 Reviewer\n4. Reviewer 通常由較資深人員或部門主管擔任,所以通常有比較多的~~無用~~會議要開\n5. Reviewer 在 Merge 之前需要作 **Code Review**\n6. Reviewer 需要遵循 **Coding Standard** 作 Code Review\n\n## 實務面臨的問題與副作用\n#### Coding Standard 並不能考慮到所有狀況 \n\n1. 所以 Reviewers 會定期針對不同的狀況開會討論 Coding Standard\n    - Coding Standard 會**不定期改變** , 但是透過Reviewer佈達的方式,讓第一線的RD其實難以知道其全貌.\n    - Coding Standard 改變後不會全面的翻改程式,實務上是作到哪裡改到哪裡\n    - 以上兩點導致 Source Code 裡面有很多符合不同時期的 Coding Standard 的 Code\n    - 任一個時間點, 誰都無法保証完全符合最新的 Coding Standard \n2. 人性,開發者會~~COPY/PASTE 方法開發~~參考Legacy Code開發\n    - Legacy Code 不符合新的 Coding Standard\n    - Reviewer 也是人, 所以 Code Review 時也會疏漏,而 Merge 進去不符合新的 Coding Standard 的 Code\n    - 所以 Source Code 裡面還是有很多不同時期的 Coding Standard 的 Code\n3. 回歸一開始的問題 Coding Standard 並不能考慮到所有狀況 \n    - 還沒有開會前, 不同的 Reviewer 會有不同的想法\n    - 開會後,在執行Code Review時, 不同的 Reviewer 會有不同的作法\n    - 當一個 PR 有多人 Reviewer 時, 會有不同的意見 PR 因此被延遲 Merge\n    - 結果,**交付會變慢**.\n\n## 反思,標準還是風格？ \n\n思考一下,開發程式碼的目標與價值是什麼 ?\n寫出 Clearn Code ? \n還是交付產品 ?\n這樣子的 Source Code 真的是 Clearn Code 嗎？\n\n## 自問自答\n\n#### Q1. 我們該有標準嗎？\nA1. 當然要有標準,不過標準之所以為標準,應該有以下幾個特點. \n- 它應該要很簡單, 像是Class與欄位的命名規則\n- 它應放諸四海皆準, 不應該輕易被修改\n- 它應該可以被自動化的檢測\n假設能作到這3點, 這件事應該可以被自動化工具處理掉 . \n\n#### Q2. 實務上就是很複雜, 所以才需要討論制訂標準啊\nA2. \n在實務上遇到很複雜的情況, 大多需要依賴約定成俗方式規範.\n這是一種**風格**或**原則** ; \n簡單的分類方法, \n如果無法透過自動化工具作檢測, \n就不應該歸類為**標準**.\n\n*註:有機會再介紹自動化的檢測工具*\n\n#### Q3. **風格**或**原則**跟**標準**有何不同？\nA3. 如上所說,標準應該能被自動化,\n風格應該是團隊的文化自然形成的產物, \n具體的實作可以透過讓開發者**彼此之間作代碼審核**\n或是**結對編程**培養出屬於團隊的風格,\n風格要基於標準之上,但是不能違反原則;\n\n以下的原則可以作為參考\n- 可以建置並通過測試\n- 可讀性\n\t- self documenting\n\t- 有用的註解 \n- 公開方法要可以被測試\n\t- 小心使用靜態類別\n\t- 注意new Instance的時機\n\t- 重複的代碼應重構\n- 保持 SOLID \n\n初期的可能會發生在「{」要不要換行之類的問題上揪結之類的蠢事,  \n如果可以自動化,就把它作成標準吧…  \n如果不行的話, 就別揪結了.  \n\n實務上可能遇到各種狀況,  \n把Reviewer的權限下放到各個開發者身上,  \n或是使用結對編程,  \n就讓團隊成員去討論與決定風格.  \n\n以標準為根基,原則為天,  \n踩穩腳步,不要超出天空,  \n就讓團隊自由發揮吧. \n\n**最後,持續交付會比每兩周花一個小時開會決定Style的細節好多了. 不是嗎？**\n\n## 其它團隊分享的具體作法\n\n1. 超過一定時間就讓成員擁Merge權限\n2. Release權限仍集中控管\n3. 錯了再改就好(保持敏捷)\n4. 給pair作code review與merge (避免一人思維陷井)\n5. 兩個人無法解決時找第三方\n6. release 功能 優先於 一致的 coding standard\n7. 品質由測試管控而非 reviewer\n8. 先有測試才有重構\n9. 可讀性 優於 枝微末節的coding standard實踐\n10. 善用自動化工具( sonarqube / stylecop )\n\n(fin)\n\n##### 補充 [社群觀點](https://www.facebook.com/groups/616369245163622/permalink/1225873964213144/)\n\n- coding style一般不管的。\n- class name／variable name，一定要叫有意義的名字。\n- local scope variable，換多少行，indentation，這些是小事\n- 一個成熟的developer，隨時會被上司命令這些遠古火星文明（legacy system）去做考古工作\n- coding style這些事，就像emacs和vim之戰一樣，戰到skynet出來了也不會戰完的\n- 如果要開會去討論coding style，最終很可能讓團隊口服心不服地去跟隨我的Coding Style。\n- 在Coding Style這種低層次的小事上用光了團隊成員之間互相容忍的能量，而在更重要的大事上無法好好合作。\n- 有很多事是比Coding Style重要的。\n\t- Object Modeling是否跟business logic一致？\n\t- 還是Object有這個attribute但是根本沒在用？\n\t- Code Change是否有做好測試？\n\t- 系統架構是否合理\n\t- 有做好High-Avalibility嗎？\n\t- 有沒有Race Condition？\n- 是其是，非其非。真正有道理的，你說了對方便自然會聽下去。\n- 「Senior」是代表自己在專業上懂得比別人多，而不是比別人身份高級。","slug":"2018/coding_standard_and_coding_style_and_principle","published":1,"updated":"2018-01-30T16:29:44.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyg9005eyk55tu9j6mpk","content":"<h6 id=\"Coding-Standard-Code-Review-Pull-Request-amp-Delivery\"><a href=\"#Coding-Standard-Code-Review-Pull-Request-amp-Delivery\" class=\"headerlink\" title=\"Coding Standard / Code Review / Pull Request &amp; Delivery\"></a>Coding Standard / Code Review / Pull Request &amp; Delivery</h6><p><img src=\"https://i.imgur.com/tssraf0.jpg\" alt=\"\"></p>\n<h2 id=\"故事背景\"><a href=\"#故事背景\" class=\"headerlink\" title=\"故事背景\"></a>故事背景</h2><ol>\n<li>團隊的部署流程是 Github Flow 與 Git Flow 混用 , 給它起個名字叫 GG Flow 好了.</li>\n<li>GG Flow 的過程需要開發人員需要透過 <strong>Pull Request</strong> 將修改推送給產品 </li>\n<li>擁有權限 Merge Pull Request 的成員被叫作 Reviewer</li>\n<li>Reviewer 通常由較資深人員或部門主管擔任,所以通常有比較多的<del>無用</del>會議要開</li>\n<li>Reviewer 在 Merge 之前需要作 <strong>Code Review</strong></li>\n<li>Reviewer 需要遵循 <strong>Coding Standard</strong> 作 Code Review</li>\n</ol>\n<h2 id=\"實務面臨的問題與副作用\"><a href=\"#實務面臨的問題與副作用\" class=\"headerlink\" title=\"實務面臨的問題與副作用\"></a>實務面臨的問題與副作用</h2><h4 id=\"Coding-Standard-並不能考慮到所有狀況\"><a href=\"#Coding-Standard-並不能考慮到所有狀況\" class=\"headerlink\" title=\"Coding Standard 並不能考慮到所有狀況\"></a>Coding Standard 並不能考慮到所有狀況</h4><ol>\n<li>所以 Reviewers 會定期針對不同的狀況開會討論 Coding Standard<ul>\n<li>Coding Standard 會<strong>不定期改變</strong> , 但是透過Reviewer佈達的方式,讓第一線的RD其實難以知道其全貌.</li>\n<li>Coding Standard 改變後不會全面的翻改程式,實務上是作到哪裡改到哪裡</li>\n<li>以上兩點導致 Source Code 裡面有很多符合不同時期的 Coding Standard 的 Code</li>\n<li>任一個時間點, 誰都無法保証完全符合最新的 Coding Standard </li>\n</ul>\n</li>\n<li>人性,開發者會<del>COPY/PASTE 方法開發</del>參考Legacy Code開發<ul>\n<li>Legacy Code 不符合新的 Coding Standard</li>\n<li>Reviewer 也是人, 所以 Code Review 時也會疏漏,而 Merge 進去不符合新的 Coding Standard 的 Code</li>\n<li>所以 Source Code 裡面還是有很多不同時期的 Coding Standard 的 Code</li>\n</ul>\n</li>\n<li>回歸一開始的問題 Coding Standard 並不能考慮到所有狀況 <ul>\n<li>還沒有開會前, 不同的 Reviewer 會有不同的想法</li>\n<li>開會後,在執行Code Review時, 不同的 Reviewer 會有不同的作法</li>\n<li>當一個 PR 有多人 Reviewer 時, 會有不同的意見 PR 因此被延遲 Merge</li>\n<li>結果,<strong>交付會變慢</strong>.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"反思-標準還是風格？\"><a href=\"#反思-標準還是風格？\" class=\"headerlink\" title=\"反思,標準還是風格？\"></a>反思,標準還是風格？</h2><p>思考一下,開發程式碼的目標與價值是什麼 ?<br>寫出 Clearn Code ?<br>還是交付產品 ?<br>這樣子的 Source Code 真的是 Clearn Code 嗎？</p>\n<h2 id=\"自問自答\"><a href=\"#自問自答\" class=\"headerlink\" title=\"自問自答\"></a>自問自答</h2><h4 id=\"Q1-我們該有標準嗎？\"><a href=\"#Q1-我們該有標準嗎？\" class=\"headerlink\" title=\"Q1. 我們該有標準嗎？\"></a>Q1. 我們該有標準嗎？</h4><p>A1. 當然要有標準,不過標準之所以為標準,應該有以下幾個特點. </p>\n<ul>\n<li>它應該要很簡單, 像是Class與欄位的命名規則</li>\n<li>它應放諸四海皆準, 不應該輕易被修改</li>\n<li>它應該可以被自動化的檢測<br>假設能作到這3點, 這件事應該可以被自動化工具處理掉 . </li>\n</ul>\n<h4 id=\"Q2-實務上就是很複雜-所以才需要討論制訂標準啊\"><a href=\"#Q2-實務上就是很複雜-所以才需要討論制訂標準啊\" class=\"headerlink\" title=\"Q2. 實務上就是很複雜, 所以才需要討論制訂標準啊\"></a>Q2. 實務上就是很複雜, 所以才需要討論制訂標準啊</h4><p>A2.<br>在實務上遇到很複雜的情況, 大多需要依賴約定成俗方式規範.<br>這是一種<strong>風格</strong>或<strong>原則</strong> ;<br>簡單的分類方法,<br>如果無法透過自動化工具作檢測,<br>就不應該歸類為<strong>標準</strong>.</p>\n<p><em>註:有機會再介紹自動化的檢測工具</em></p>\n<h4 id=\"Q3-風格或原則跟標準有何不同？\"><a href=\"#Q3-風格或原則跟標準有何不同？\" class=\"headerlink\" title=\"Q3. 風格或原則跟標準有何不同？\"></a>Q3. <strong>風格</strong>或<strong>原則</strong>跟<strong>標準</strong>有何不同？</h4><p>A3. 如上所說,標準應該能被自動化,<br>風格應該是團隊的文化自然形成的產物,<br>具體的實作可以透過讓開發者<strong>彼此之間作代碼審核</strong><br>或是<strong>結對編程</strong>培養出屬於團隊的風格,<br>風格要基於標準之上,但是不能違反原則;</p>\n<p>以下的原則可以作為參考</p>\n<ul>\n<li>可以建置並通過測試</li>\n<li>可讀性<ul>\n<li>self documenting</li>\n<li>有用的註解 </li>\n</ul>\n</li>\n<li>公開方法要可以被測試<ul>\n<li>小心使用靜態類別</li>\n<li>注意new Instance的時機</li>\n<li>重複的代碼應重構</li>\n</ul>\n</li>\n<li>保持 SOLID </li>\n</ul>\n<p>初期的可能會發生在「{」要不要換行之類的問題上揪結之類的蠢事,<br>如果可以自動化,就把它作成標準吧…<br>如果不行的話, 就別揪結了.  </p>\n<p>實務上可能遇到各種狀況,<br>把Reviewer的權限下放到各個開發者身上,<br>或是使用結對編程,<br>就讓團隊成員去討論與決定風格.  </p>\n<p>以標準為根基,原則為天,<br>踩穩腳步,不要超出天空,<br>就讓團隊自由發揮吧. </p>\n<p><strong>最後,持續交付會比每兩周花一個小時開會決定Style的細節好多了. 不是嗎？</strong></p>\n<h2 id=\"其它團隊分享的具體作法\"><a href=\"#其它團隊分享的具體作法\" class=\"headerlink\" title=\"其它團隊分享的具體作法\"></a>其它團隊分享的具體作法</h2><ol>\n<li>超過一定時間就讓成員擁Merge權限</li>\n<li>Release權限仍集中控管</li>\n<li>錯了再改就好(保持敏捷)</li>\n<li>給pair作code review與merge (避免一人思維陷井)</li>\n<li>兩個人無法解決時找第三方</li>\n<li>release 功能 優先於 一致的 coding standard</li>\n<li>品質由測試管控而非 reviewer</li>\n<li>先有測試才有重構</li>\n<li>可讀性 優於 枝微末節的coding standard實踐</li>\n<li>善用自動化工具( sonarqube / stylecop )</li>\n</ol>\n<p>(fin)</p>\n<h5 id=\"補充-社群觀點\"><a href=\"#補充-社群觀點\" class=\"headerlink\" title=\"補充 社群觀點\"></a>補充 <a href=\"https://www.facebook.com/groups/616369245163622/permalink/1225873964213144/\" target=\"_blank\" rel=\"external\">社群觀點</a></h5><ul>\n<li>coding style一般不管的。</li>\n<li>class name／variable name，一定要叫有意義的名字。</li>\n<li>local scope variable，換多少行，indentation，這些是小事</li>\n<li>一個成熟的developer，隨時會被上司命令這些遠古火星文明（legacy system）去做考古工作</li>\n<li>coding style這些事，就像emacs和vim之戰一樣，戰到skynet出來了也不會戰完的</li>\n<li>如果要開會去討論coding style，最終很可能讓團隊口服心不服地去跟隨我的Coding Style。</li>\n<li>在Coding Style這種低層次的小事上用光了團隊成員之間互相容忍的能量，而在更重要的大事上無法好好合作。</li>\n<li>有很多事是比Coding Style重要的。<ul>\n<li>Object Modeling是否跟business logic一致？</li>\n<li>還是Object有這個attribute但是根本沒在用？</li>\n<li>Code Change是否有做好測試？</li>\n<li>系統架構是否合理</li>\n<li>有做好High-Avalibility嗎？</li>\n<li>有沒有Race Condition？</li>\n</ul>\n</li>\n<li>是其是，非其非。真正有道理的，你說了對方便自然會聽下去。</li>\n<li>「Senior」是代表自己在專業上懂得比別人多，而不是比別人身份高級。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h6 id=\"Coding-Standard-Code-Review-Pull-Request-amp-Delivery\"><a href=\"#Coding-Standard-Code-Review-Pull-Request-amp-Delivery\" class=\"headerlink\" title=\"Coding Standard / Code Review / Pull Request &amp; Delivery\"></a>Coding Standard / Code Review / Pull Request &amp; Delivery</h6><p><img src=\"https://i.imgur.com/tssraf0.jpg\" alt=\"\"></p>\n<h2 id=\"故事背景\"><a href=\"#故事背景\" class=\"headerlink\" title=\"故事背景\"></a>故事背景</h2><ol>\n<li>團隊的部署流程是 Github Flow 與 Git Flow 混用 , 給它起個名字叫 GG Flow 好了.</li>\n<li>GG Flow 的過程需要開發人員需要透過 <strong>Pull Request</strong> 將修改推送給產品 </li>\n<li>擁有權限 Merge Pull Request 的成員被叫作 Reviewer</li>\n<li>Reviewer 通常由較資深人員或部門主管擔任,所以通常有比較多的<del>無用</del>會議要開</li>\n<li>Reviewer 在 Merge 之前需要作 <strong>Code Review</strong></li>\n<li>Reviewer 需要遵循 <strong>Coding Standard</strong> 作 Code Review</li>\n</ol>\n<h2 id=\"實務面臨的問題與副作用\"><a href=\"#實務面臨的問題與副作用\" class=\"headerlink\" title=\"實務面臨的問題與副作用\"></a>實務面臨的問題與副作用</h2><h4 id=\"Coding-Standard-並不能考慮到所有狀況\"><a href=\"#Coding-Standard-並不能考慮到所有狀況\" class=\"headerlink\" title=\"Coding Standard 並不能考慮到所有狀況\"></a>Coding Standard 並不能考慮到所有狀況</h4><ol>\n<li>所以 Reviewers 會定期針對不同的狀況開會討論 Coding Standard<ul>\n<li>Coding Standard 會<strong>不定期改變</strong> , 但是透過Reviewer佈達的方式,讓第一線的RD其實難以知道其全貌.</li>\n<li>Coding Standard 改變後不會全面的翻改程式,實務上是作到哪裡改到哪裡</li>\n<li>以上兩點導致 Source Code 裡面有很多符合不同時期的 Coding Standard 的 Code</li>\n<li>任一個時間點, 誰都無法保証完全符合最新的 Coding Standard </li>\n</ul>\n</li>\n<li>人性,開發者會<del>COPY/PASTE 方法開發</del>參考Legacy Code開發<ul>\n<li>Legacy Code 不符合新的 Coding Standard</li>\n<li>Reviewer 也是人, 所以 Code Review 時也會疏漏,而 Merge 進去不符合新的 Coding Standard 的 Code</li>\n<li>所以 Source Code 裡面還是有很多不同時期的 Coding Standard 的 Code</li>\n</ul>\n</li>\n<li>回歸一開始的問題 Coding Standard 並不能考慮到所有狀況 <ul>\n<li>還沒有開會前, 不同的 Reviewer 會有不同的想法</li>\n<li>開會後,在執行Code Review時, 不同的 Reviewer 會有不同的作法</li>\n<li>當一個 PR 有多人 Reviewer 時, 會有不同的意見 PR 因此被延遲 Merge</li>\n<li>結果,<strong>交付會變慢</strong>.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"反思-標準還是風格？\"><a href=\"#反思-標準還是風格？\" class=\"headerlink\" title=\"反思,標準還是風格？\"></a>反思,標準還是風格？</h2><p>思考一下,開發程式碼的目標與價值是什麼 ?<br>寫出 Clearn Code ?<br>還是交付產品 ?<br>這樣子的 Source Code 真的是 Clearn Code 嗎？</p>\n<h2 id=\"自問自答\"><a href=\"#自問自答\" class=\"headerlink\" title=\"自問自答\"></a>自問自答</h2><h4 id=\"Q1-我們該有標準嗎？\"><a href=\"#Q1-我們該有標準嗎？\" class=\"headerlink\" title=\"Q1. 我們該有標準嗎？\"></a>Q1. 我們該有標準嗎？</h4><p>A1. 當然要有標準,不過標準之所以為標準,應該有以下幾個特點. </p>\n<ul>\n<li>它應該要很簡單, 像是Class與欄位的命名規則</li>\n<li>它應放諸四海皆準, 不應該輕易被修改</li>\n<li>它應該可以被自動化的檢測<br>假設能作到這3點, 這件事應該可以被自動化工具處理掉 . </li>\n</ul>\n<h4 id=\"Q2-實務上就是很複雜-所以才需要討論制訂標準啊\"><a href=\"#Q2-實務上就是很複雜-所以才需要討論制訂標準啊\" class=\"headerlink\" title=\"Q2. 實務上就是很複雜, 所以才需要討論制訂標準啊\"></a>Q2. 實務上就是很複雜, 所以才需要討論制訂標準啊</h4><p>A2.<br>在實務上遇到很複雜的情況, 大多需要依賴約定成俗方式規範.<br>這是一種<strong>風格</strong>或<strong>原則</strong> ;<br>簡單的分類方法,<br>如果無法透過自動化工具作檢測,<br>就不應該歸類為<strong>標準</strong>.</p>\n<p><em>註:有機會再介紹自動化的檢測工具</em></p>\n<h4 id=\"Q3-風格或原則跟標準有何不同？\"><a href=\"#Q3-風格或原則跟標準有何不同？\" class=\"headerlink\" title=\"Q3. 風格或原則跟標準有何不同？\"></a>Q3. <strong>風格</strong>或<strong>原則</strong>跟<strong>標準</strong>有何不同？</h4><p>A3. 如上所說,標準應該能被自動化,<br>風格應該是團隊的文化自然形成的產物,<br>具體的實作可以透過讓開發者<strong>彼此之間作代碼審核</strong><br>或是<strong>結對編程</strong>培養出屬於團隊的風格,<br>風格要基於標準之上,但是不能違反原則;</p>\n<p>以下的原則可以作為參考</p>\n<ul>\n<li>可以建置並通過測試</li>\n<li>可讀性<ul>\n<li>self documenting</li>\n<li>有用的註解 </li>\n</ul>\n</li>\n<li>公開方法要可以被測試<ul>\n<li>小心使用靜態類別</li>\n<li>注意new Instance的時機</li>\n<li>重複的代碼應重構</li>\n</ul>\n</li>\n<li>保持 SOLID </li>\n</ul>\n<p>初期的可能會發生在「{」要不要換行之類的問題上揪結之類的蠢事,<br>如果可以自動化,就把它作成標準吧…<br>如果不行的話, 就別揪結了.  </p>\n<p>實務上可能遇到各種狀況,<br>把Reviewer的權限下放到各個開發者身上,<br>或是使用結對編程,<br>就讓團隊成員去討論與決定風格.  </p>\n<p>以標準為根基,原則為天,<br>踩穩腳步,不要超出天空,<br>就讓團隊自由發揮吧. </p>\n<p><strong>最後,持續交付會比每兩周花一個小時開會決定Style的細節好多了. 不是嗎？</strong></p>\n<h2 id=\"其它團隊分享的具體作法\"><a href=\"#其它團隊分享的具體作法\" class=\"headerlink\" title=\"其它團隊分享的具體作法\"></a>其它團隊分享的具體作法</h2><ol>\n<li>超過一定時間就讓成員擁Merge權限</li>\n<li>Release權限仍集中控管</li>\n<li>錯了再改就好(保持敏捷)</li>\n<li>給pair作code review與merge (避免一人思維陷井)</li>\n<li>兩個人無法解決時找第三方</li>\n<li>release 功能 優先於 一致的 coding standard</li>\n<li>品質由測試管控而非 reviewer</li>\n<li>先有測試才有重構</li>\n<li>可讀性 優於 枝微末節的coding standard實踐</li>\n<li>善用自動化工具( sonarqube / stylecop )</li>\n</ol>\n<p>(fin)</p>\n<h5 id=\"補充-社群觀點\"><a href=\"#補充-社群觀點\" class=\"headerlink\" title=\"補充 社群觀點\"></a>補充 <a href=\"https://www.facebook.com/groups/616369245163622/permalink/1225873964213144/\" target=\"_blank\" rel=\"external\">社群觀點</a></h5><ul>\n<li>coding style一般不管的。</li>\n<li>class name／variable name，一定要叫有意義的名字。</li>\n<li>local scope variable，換多少行，indentation，這些是小事</li>\n<li>一個成熟的developer，隨時會被上司命令這些遠古火星文明（legacy system）去做考古工作</li>\n<li>coding style這些事，就像emacs和vim之戰一樣，戰到skynet出來了也不會戰完的</li>\n<li>如果要開會去討論coding style，最終很可能讓團隊口服心不服地去跟隨我的Coding Style。</li>\n<li>在Coding Style這種低層次的小事上用光了團隊成員之間互相容忍的能量，而在更重要的大事上無法好好合作。</li>\n<li>有很多事是比Coding Style重要的。<ul>\n<li>Object Modeling是否跟business logic一致？</li>\n<li>還是Object有這個attribute但是根本沒在用？</li>\n<li>Code Change是否有做好測試？</li>\n<li>系統架構是否合理</li>\n<li>有做好High-Avalibility嗎？</li>\n<li>有沒有Race Condition？</li>\n</ul>\n</li>\n<li>是其是，非其非。真正有道理的，你說了對方便自然會聽下去。</li>\n<li>「Senior」是代表自己在專業上懂得比別人多，而不是比別人身份高級。</li>\n</ul>\n"},{"title":"[翻譯]C# 的常見錯誤","date":"2018-02-11T18:12:47.000Z","_content":"## 出處\nhttp://www.dotnetcurry.com/csharp/1417/csharp-common-mistakes\n\n## 線上工具\nhttps://dotnetfiddle.net\n\n## 引言\n\nC#是個好棒棒的言語,但是它仍會有超乎你想像的行為,  \n而且就算你是有經驗的開發者,你也要看一看這篇文章.  \n這篇文章不講幹話,還會給你代碼喔  \n\n![C# Quiz](https://i.imgur.com/wXjvug6.jpg)\n\n\n### Null Value\n\nNull 很危險啦, 你別在 Null 身上調用方法  \n(譯注:在公司的維運人員應該還蠻常見這個錯誤的 一ω一)  \n\n> We are all aware that null values can be dangerous, if not handled properly.  \n> Dereferencing a null-valued variable (i.e. calling a method on it or accessing one of its properties)  \n> will result in a NullReferenceException, as demonstrated with the following sample code:  \n\n\n```csharp\nobject nullValue = null;\nbool areNullValuesEqual = nullValue.Equals(null);\n```\n\n就安全的角度,好像我們要不停的檢查 reference type 是不是 null ,  \n雖然這件事常常發生,好像也很難說成是非預期的行為了...  \n(譯注:又有種中槍的感覺)  \n\n> To be on the safer side, we should always make sure that reference type values are not null before dereferencing them.  \n> Failing to do so could result in an unhandled exception in a specific edge case.  \n> Although such a mistake occasionally happens to everyone, we could hardly call it unexpected behavior.  \n\n看看這個代碼, null 值在 runtime 的時候不會有 type 的  \n\n```csharp\nstring nullString = (string)null;\nbool isStringType = nullString is string;\n```\n\n**No**, null 值在 runtime 的時候不會有 type 的  \n**No**, null 值在 runtime 的時候不會有 type 的  \n**No**, null 值在 runtime 的時候不會有 type 的  \n很重要所以說三次,  \n當然你也別想呼叫 `GetType()` 方法  \n\n> The correct answer is **No**.  \n> \n> A null value has no type at runtime.  \n> \n> In a way, this also affects reflection.  \n> Of course, you can’t call GetType() on a null value because a NullReferenceException would get thrown:  \n\n```csharp\nobject nullValue = null;\nType nullType = nullValue.GetType();\n```\n\n純量呢？\n\n```csharp\nint intValue = 5;\nNullable<int> nullableIntValue = 5;\nbool areTypesEqual = intValue.GetType() == nullableIntValue.GetType();\n```\n\n那我們可不可能用反射(reflection)區分 nullable 跟 non-nullable 的值？  \n答案是不可能, 看看後面的代碼  \n\n> Is it possible to distinguish between a nullable and a non-nullable value type using reflection?  \n>\n> The answer is **No**.  \n>\n> The same type will be returned for both variables in the above code: System.Int32.  \n> This does not mean that reflection has no representation for Nullable<T>, though.  \n\n```csharp\nType intType = typeof(int);\nType nullableIntType = typeof(Nullable<int>);\nbool areTypesEqual = intType == nullableIntType;\n```\n\n上面兩段程式在runtime拿到的type很不一樣喔,  \n一個是`System.Int32`一個是 `System.Nullable'1\\[System.Int32\\]`  \n\n\n### 當 null 遇上多載方法 (Handling Null values in Overloaded methods)\n\n```csharp\nprivate string OverloadedMethod(object arg)\n{\n    return \"object parameter\";\n}\n \nprivate string OverloadedMethod(string arg)\n{\n    return \"string parameter\";\n}\n```\n\n上面有兩個`OverloadedMethod`  \n猜猜看,傳入 null 時會呼叫哪一個方法？  \n\n```csharp\nvar result = OverloadedMethod(null);\n```\n\n有人會猜編譯失敗嗎？\nMAGIC ! 竟然可以編譯成功, 而回傳的值是 **\"string parameter\"** ,  \n一般來說,在編譯時期會作型別檢查,相同簽章的方法參數可以被轉型成另一個型別時,是可以編譯成功的喔.  \n而有明確型別的方法將被優先調用(譯注:求這段.Net Framework的原碼來看一下,知道的人請告訴我)  \n\n如果要指定 null 參數呼叫的多載方法就要對 null 轉型唷,可以參考下面的方法.  \n\n```csharp\nvar result = OverloadedMethod((object)null);\n```\n\n### 算術運算 (Arithmetic Operations)\n\n好像很少用位移運算吼？  \n回憶一下 左移移 右移移  \n\n```csharp\nvar shifted = 0b1 << 1; // = 0b10\n```\n\n```csharp\nvar shifted = 0b1 >> 1; // = 0b0\n```\n\nbits 跑到底並不會重頭開始喔,一直移位到爆掉就變 0 了.  \n(這裡會用32是因為 int 是32bit的數值,你可以試試放超過32的數值到for loop裡會發生什麼事)  \n\n> The bits don’t wrap around when they reach the end.  \n> That’s why the result of the second expression is 0.  \n> The same would happen if we shifted the bit far enough to the left (32 bits because integer is a 32-bit number):  \n\n```csharp\nvar shifted = 0b1;\nfor (int i = 0; i < 32; i++)\n{\nshifted = shifted << 1;\n}\n```\n\n> The result would again be 0.  \n\n那我們是不是可以一次移32bit,讓它一次變成0呢？  \n靠北啊 竟然不行捏, 你只會拿到 1,  \n這跟運算子(operator)基本運算有關,在作位元運算的時候,  \n會拿第一個運算數除以第二個運算數後取餘數,  \n這導致我們只會拿 32 % 32 的結果 , 也就是 1 啦  \n(譯注:這段其實我不是很確定,如果錯誤請糾正)  \n\n> However, the bit shifting operators have a second operand.  \n> Instead of shifting to the left by 1 bit 32 times, we can shift left by 32 bits and get the same result.  \n\n```csharp\nvar shifted = 0b1 << 32;\n```\n\n> Right? **Wrong.**  \n>\n> The result of this expression will be 1. Why?  \n>\n> Because that’s how the operator is defined. Before applying the operation,  \n> the second operand will be normalized to the bit length of the first operand with the modulo operation,  \n> i.e. by calculating the remainder of dividing the second operand by the bit length of the first operand.  \n> \n> The first operand in the example we just saw was a 32-bit number, hence: 32 % 32 = 0.  \n> Our number will be shifted left by 0 bits. That’s not the same as shifting it left by 1 bit 32 times.  \n\n好棒棒 你竟然可以看到這裡,  \n那我們繼續討論 & (and) 跟 | (or) 運算子吧,  \n這兩個運算子跟一般的運算子有點不一樣  \n- 通常只要看運算子的第一個運算數就能得知結果  \n- 在有掛 [Flag] atturibute的列舉它們好好用(看一下範例)  \n\n```csharp\n[Flags]\nprivate enum Colors\n{\n    None = 0b0,\n    Red = 0b1,\n    Green = 0b10,\n    Blue = 0b100\n}\n```\n\n```csharp\nColors color = Colors.Red | Colors.Green;\nbool isRed = (color & Colors.Red) == Colors.Red;\n```\n\n上面這個刮號可不能省略喔, 因為(&)運算符的優先順序低於(==)運算符,  \n不過這段程式沒有刮號的話連編譯都不會過,真是好加在  \n另外在 .NET framework 4.0 之後的版本提供更棒的方法去檢查flags  \n\n\n```csharp\nbool isRed = color.HasFlag(Colors.Red);\n```\n\n### Math.Round()\n\n猜一下這個值會是多少？  \n\n```csharp\nvar rounded = Math.Round(1.5);\n```\n\n猜2的就答對了, 下一題  \n猜一下這個值會是多少？  \n\n```csharp\nvar rounded = Math.Round(2.5);\n```\n\n還是2 ,\n因為預設會取最接近的偶數\n\n> **No.** The result will be 2 again. By default,  \n> the midpoint value will be rounded to the nearest even value.  \n> You could provide the second argument to the method to request such behavior explicitly:  \n\n```csharp\nvar rounded = Math.Round(2.5, MidpointRounding.ToEven);\n```\n\n這個行為可以透過`MidpointRounding`參數改變  \n\n```csharp\nvar rounded = Math.Round(2.5, MidpointRounding.AwayFromZero);\n```\n\n另外要小心浮點數的精度問題,  \n以下的例子結果會是1,( 因為float的0.1實際上小於0.1 一ω一 )  \n這提醒我們在處理精確數值時,應轉換成整數處理.  \n(譯注:使用 [dotnetfiddle](https://dotnetfiddle.net) 時並不會有這個問題, 在windows 環境下測試的確會有問題)  \n \n```csharp\nvar value = 1.4f;\n\nvar rounded = Math.Round(value + 0.1f);\n```\n### 類別初始化\n\n最佳實踐建我我們應該避免在建構子初始化類別,\n特別是靜態建構子. \n在初始化一個類別的順序如下\n1. 靜態欄位\n2. 靜態建構子\n3. 實體欄位\n4. 實體建構子\n\n看看這個例子\n```csharp\npublic static class Config\n{\n    public static bool ThrowException { get; set; } = true;\n}\n \npublic class FailingClass\n{\n    static FailingClass()\n    {\n        if (Config.ThrowException)\n        {\n            throw new InvalidOperationException();\n        }\n    }\n}\n```\n當我們嚐試實例化FailingClass時,你會得到Exception;  \n值得注意的事,你拿到的會是`TypeInitializationException`  \n而並不是`InvalidOperationException`,  \n\n那麼我們是不是可以試著透過try catch補捉錯誤,  \n並修改靜態屬性,重新實體化class呢？\n**答案是不行**\n\n一個靜態建構值,如果它拋出一個異常,  \n那麼無論何時你想創建一個實例或以任何其他方式訪問這個類,  \n這個異常都會被重新拋出.  \n\n```csharp\ntry\n{\n    var failedInstance = new FailingClass();\n}\ncatch (TypeInitializationException) { }\nConfig.ThrowException = false;\nvar instance = new FailingClass();\n```\n這個類別在程序重啟前是不能再被使用了(會拋出錯誤),  \n這在 C# 是個非常糟糕的實踐,  \n千萬別這樣設計你的類別.  \n\n> The static constructor for a class is only called once. \n> If it throws an exception, then this exception will be rethrown  \n> whenever you want to create an instance or access the class in any other way.  \n> \n> The class becomes effectively unusable until the process (or the application domain) is restarted.  \n> Yes, having even a minuscule chance that the  \n> static constructor will throw an exception, is a very bad idea.  \n\n#### 繼承與類別初始化\n\n繼承的類別初始化執行順序更加複雜,看看下面的例子\n\n```csharp\npublic class BaseClass\n{\n    public BaseClass()\n    {\n        VirtualMethod(1);\n    }\n \n    public virtual int VirtualMethod(int dividend)\n    {\n        return dividend / 1;\n    }\n}\n \npublic class DerivedClass : BaseClass\n{\n    int divisor;\n    public DerivedClass()\n    {\n        divisor = 1;\n    }\n \n    public override int VirtualMethod(int dividend)\n    {\n        return base.VirtualMethod(dividend / divisor);\n    }\n}\n```\n\n當我們初始化 DerivedClass\n\n```csharp\nvar instance = new DerivedClass();\n```\n\n你會得到一個除0的錯誤 `DivideByZeroException`  \n這與執行順序有關\n1. 呼叫 BaseClass 建構子\n2. 執行 DerivedClass VirtualMethod (overrid BaseClass)\n3. divisor 未賦值拋出 `DivideByZeroException`\n\n## 多形 Polymorphism\n\n這個例子只是要說明多形的概念與應用,  \n你可以透過轉形呼叫基底類別的方法.  \n\n```csharp\nvar instance = new DerivedClass();\nvar result = instance.Method(); // -> Method in DerivedClass\nresult = ((BaseClass)instance).Method(); // -> Method in BaseClass\n// The correct answer is: by using the new modifier.\n\npublic class BaseClass\n{\n    public virtual string Method()\n    {\n        return \"Method in BaseClass \";\n    }\n}\n \npublic class DerivedClass : BaseClass \n{\n    public new string Method()\n    {\n        return \"Method in DerivedClass\";\n    }\n}\n```\n\n> It’s typically used to hide the interface methods from the consumers of the class implementing it, \n> unless they cast the instance to that interface.\n> But it works just as well if we want to have two different implementations of a method inside a single class.\n> It’s difficult to think of a good reason for doing it, though.\n\n另外一個例子是明確實作介面方法,  \n如果你的類別已經有同名的方法的話.  \n雖然沒有什麼好理由建議你這樣作.\n(譯注:實務上我有在遇到歷史共業這樣作過...)  \n\n```csharp\nvar instance = new DerivedClass();\nvar result = instance.Method(); // -> Method in DerivedClass\nresult = ((IInterface)instance).Method(); // -> Method belonging to IInterface\nIt’s explicit interface implementation.\n\npublic interface IInterface\n{\n    string Method();\n}\n \npublic class DerivedClass : IInterface\n{\n    public string Method()\n    {\n        return \"Method in DerivedClass\";\n    }\n \n    string IInterface.Method()\n    {\n        return \"Method belonging to IInterface\";\n    }\n}\nIt’s\n```\n## 迭代器 Iterators\n\n小心 Iterators 的陷阱\n看看以下[代碼](https://dotnetfiddle.net/BxfF0d):\n\n\n```csharp\nprivate IEnumerable<int> GetEnumerable(StringBuilder log)\n{\n    using (var context = new Context(log))\n    {\n        return Enumerable.Range(1, 5);\n    }\n}\n\n```\n\n```csharp\npublic class Context : IDisposable\n{\n    private readonly StringBuilder log;\n \n    public Context(StringBuilder log)\n    {\n        this.log = log;\n        this.log.AppendLine(\"Context created\");\n    }\n \n    public void Dispose()\n    {\n        this.log.AppendLine(\"Context disposed\");\n    }\n}\n```\n\n假設我們 foreach 呼叫 GetEnumerable 方法,  \n你預期 Context 類別會有什麼樣的行為？  \n我們會印出以下的output嗎？\n\n> Context created\n> 1\n> 2\n> 3\n> 4\n> 5\n> Context disposed\n\n```csharp\nvar log = new StringBuilder();\nforeach (var number in GetEnumerable(log))\n{\n    log.AppendLine($\"{number}\");\n}\n```\n\n不是的,  \n實際上印出的是\n\n> Context created\n> Context disposed\n> 1\n> 2\n> 3\n> 4\n> 5\n\n這點很重要,  \n因為實務上你很有可能 using dbconnetion 之類的物件,  \n那麼你在取得真正的資料之前,  \n你的連線就已經中斷了 \n\n> This means that in our real world database example, the code would fail –  \n> the connection would be closed before the values could be read from the database.\n\n看看以下的[修正](https://dotnetfiddle.net/IgJaak)\n\n```csharp\nprivate IEnumerable<int> GetEnumerable(StringBuilder log)\n{\n    using (var context = new Context(log))\n    {\n        foreach (var i in Enumerable.Range(1, 5))\n        {\n            yield return i;\n        }\n    }\n}\n```\n譯注:看到這裡對 `yield return` 的使用情境才比較有感啊...\n\n如果你不太熟`yield return`,其實它只是個語法糖,允許增量執行,  \n參考以下範例,或許能更容易理解\n\n```csharp\nprivate IEnumerable<int> GetCustomEnumerable(StringBuilder log)\n{\n    log.AppendLine(\"before 1\");\n    yield return 1;\n    log.AppendLine(\"before 2\");\n    yield return 2;\n    log.AppendLine(\"before 3\");\n    yield return 3;\n    log.AppendLine(\"before 4\");\n    yield return 4;\n    log.AppendLine(\"before 5\");\n    yield return 5;\n    log.AppendLine(\"before end\");\n}\n```\n\n```csharp\nvar log = new StringBuilder();\nlog.AppendLine(\"before enumeration\");\nforeach (var number in GetCustomEnumerable(log))\n{\n    log.AppendLine($\"{number}\");\n}\nlog.AppendLine(\"after enumeration\");\n```\n\n> before enumeration\n> before 1\n> 1\n> before 2\n> 2\n> before 3\n> 3\n> before 4\n> 4\n> before 5\n> 5\n> before end\n> after enumeration\n\n值得注意的事, 如果你在loop當中重複執行以上的代碼,  \n那麼 Iterators 也會重複執行\n\n```csharp\nvar log = new StringBuilder();\nvar enumerable = GetCustomEnumerable(log);\nfor (int i = 1; i <= 2; i++)\n{\n    log.AppendLine($\"enumeration #{i}\");\n    foreach (var number in enumerable)\n    {\n        log.AppendLine($\"{number}\");\n    }\n}\n```\n輸出如下,可以明顯看到 `GetCustomEnumerable` 方法,  \n實際上被隱含的執行了兩次,  \n這在 Code Review 的階段也是難以被察覺的.\n\n> enumeration #1\n> before 1\n> 1\n> before 2\n> 2\n> before 3\n> 3\n> before 4\n> 4\n> before 5\n> 5\n> before end\n> enumeration #2\n> before 1\n> 1\n> before 2\n> 2\n> before 3\n> 3\n> before 4\n> 4\n> before 5\n> 5\n> before end\n\n比較好的作法是將 `IEnumerable` ToList(),\n如果你真的需要對 `IEnumerable` 的結果作 loop 的操作\n\n```csharp\nvar log = new StringBuilder();\nvar enumerable = GetCustomEnumerable(log).ToList();\nfor (int i = 1; i <= 2; i++)\n{\n    log.AppendLine($\"enumeration #{i}\");\n    foreach (var number in enumerable)\n    {\n        log.AppendLine($\"{number}\");\n    }\n}\n```\n輸出結果\n\n> before 1\n> before 2\n> before 3\n> before 4\n> before 5\n> before end\n> enumeration #1\n> 1\n> 2\n> 3\n> 4\n> 5\n> enumeration #2\n> 1\n> 2\n> 3\n> 4\n> 5\n\n## 譯者小結\n\n如果真的能夠預期所有的行為的開發人員,  \n真的是好棒棒,  \n對我來說 static class constructor 的行為是超乎預期的,  \n然後對 `yield return` 的使用場景更有感覺了.  \n本來預計農曆年就可以完成的翻譯,  \n竟然也拖了這麼久,看來我英文還是不行啊. \n\n希望對大家有幫助,也請多多看原文 :)\n\n(fin)","source":"_posts/2018/csharp_common_mistakes_1.md","raw":"---\ntitle: \"[翻譯]C# 的常見錯誤\"\ndate: 2018/02/12 02:12:47\ntag:\n  - C#\n---\n## 出處\nhttp://www.dotnetcurry.com/csharp/1417/csharp-common-mistakes\n\n## 線上工具\nhttps://dotnetfiddle.net\n\n## 引言\n\nC#是個好棒棒的言語,但是它仍會有超乎你想像的行為,  \n而且就算你是有經驗的開發者,你也要看一看這篇文章.  \n這篇文章不講幹話,還會給你代碼喔  \n\n![C# Quiz](https://i.imgur.com/wXjvug6.jpg)\n\n\n### Null Value\n\nNull 很危險啦, 你別在 Null 身上調用方法  \n(譯注:在公司的維運人員應該還蠻常見這個錯誤的 一ω一)  \n\n> We are all aware that null values can be dangerous, if not handled properly.  \n> Dereferencing a null-valued variable (i.e. calling a method on it or accessing one of its properties)  \n> will result in a NullReferenceException, as demonstrated with the following sample code:  \n\n\n```csharp\nobject nullValue = null;\nbool areNullValuesEqual = nullValue.Equals(null);\n```\n\n就安全的角度,好像我們要不停的檢查 reference type 是不是 null ,  \n雖然這件事常常發生,好像也很難說成是非預期的行為了...  \n(譯注:又有種中槍的感覺)  \n\n> To be on the safer side, we should always make sure that reference type values are not null before dereferencing them.  \n> Failing to do so could result in an unhandled exception in a specific edge case.  \n> Although such a mistake occasionally happens to everyone, we could hardly call it unexpected behavior.  \n\n看看這個代碼, null 值在 runtime 的時候不會有 type 的  \n\n```csharp\nstring nullString = (string)null;\nbool isStringType = nullString is string;\n```\n\n**No**, null 值在 runtime 的時候不會有 type 的  \n**No**, null 值在 runtime 的時候不會有 type 的  \n**No**, null 值在 runtime 的時候不會有 type 的  \n很重要所以說三次,  \n當然你也別想呼叫 `GetType()` 方法  \n\n> The correct answer is **No**.  \n> \n> A null value has no type at runtime.  \n> \n> In a way, this also affects reflection.  \n> Of course, you can’t call GetType() on a null value because a NullReferenceException would get thrown:  \n\n```csharp\nobject nullValue = null;\nType nullType = nullValue.GetType();\n```\n\n純量呢？\n\n```csharp\nint intValue = 5;\nNullable<int> nullableIntValue = 5;\nbool areTypesEqual = intValue.GetType() == nullableIntValue.GetType();\n```\n\n那我們可不可能用反射(reflection)區分 nullable 跟 non-nullable 的值？  \n答案是不可能, 看看後面的代碼  \n\n> Is it possible to distinguish between a nullable and a non-nullable value type using reflection?  \n>\n> The answer is **No**.  \n>\n> The same type will be returned for both variables in the above code: System.Int32.  \n> This does not mean that reflection has no representation for Nullable<T>, though.  \n\n```csharp\nType intType = typeof(int);\nType nullableIntType = typeof(Nullable<int>);\nbool areTypesEqual = intType == nullableIntType;\n```\n\n上面兩段程式在runtime拿到的type很不一樣喔,  \n一個是`System.Int32`一個是 `System.Nullable'1\\[System.Int32\\]`  \n\n\n### 當 null 遇上多載方法 (Handling Null values in Overloaded methods)\n\n```csharp\nprivate string OverloadedMethod(object arg)\n{\n    return \"object parameter\";\n}\n \nprivate string OverloadedMethod(string arg)\n{\n    return \"string parameter\";\n}\n```\n\n上面有兩個`OverloadedMethod`  \n猜猜看,傳入 null 時會呼叫哪一個方法？  \n\n```csharp\nvar result = OverloadedMethod(null);\n```\n\n有人會猜編譯失敗嗎？\nMAGIC ! 竟然可以編譯成功, 而回傳的值是 **\"string parameter\"** ,  \n一般來說,在編譯時期會作型別檢查,相同簽章的方法參數可以被轉型成另一個型別時,是可以編譯成功的喔.  \n而有明確型別的方法將被優先調用(譯注:求這段.Net Framework的原碼來看一下,知道的人請告訴我)  \n\n如果要指定 null 參數呼叫的多載方法就要對 null 轉型唷,可以參考下面的方法.  \n\n```csharp\nvar result = OverloadedMethod((object)null);\n```\n\n### 算術運算 (Arithmetic Operations)\n\n好像很少用位移運算吼？  \n回憶一下 左移移 右移移  \n\n```csharp\nvar shifted = 0b1 << 1; // = 0b10\n```\n\n```csharp\nvar shifted = 0b1 >> 1; // = 0b0\n```\n\nbits 跑到底並不會重頭開始喔,一直移位到爆掉就變 0 了.  \n(這裡會用32是因為 int 是32bit的數值,你可以試試放超過32的數值到for loop裡會發生什麼事)  \n\n> The bits don’t wrap around when they reach the end.  \n> That’s why the result of the second expression is 0.  \n> The same would happen if we shifted the bit far enough to the left (32 bits because integer is a 32-bit number):  \n\n```csharp\nvar shifted = 0b1;\nfor (int i = 0; i < 32; i++)\n{\nshifted = shifted << 1;\n}\n```\n\n> The result would again be 0.  \n\n那我們是不是可以一次移32bit,讓它一次變成0呢？  \n靠北啊 竟然不行捏, 你只會拿到 1,  \n這跟運算子(operator)基本運算有關,在作位元運算的時候,  \n會拿第一個運算數除以第二個運算數後取餘數,  \n這導致我們只會拿 32 % 32 的結果 , 也就是 1 啦  \n(譯注:這段其實我不是很確定,如果錯誤請糾正)  \n\n> However, the bit shifting operators have a second operand.  \n> Instead of shifting to the left by 1 bit 32 times, we can shift left by 32 bits and get the same result.  \n\n```csharp\nvar shifted = 0b1 << 32;\n```\n\n> Right? **Wrong.**  \n>\n> The result of this expression will be 1. Why?  \n>\n> Because that’s how the operator is defined. Before applying the operation,  \n> the second operand will be normalized to the bit length of the first operand with the modulo operation,  \n> i.e. by calculating the remainder of dividing the second operand by the bit length of the first operand.  \n> \n> The first operand in the example we just saw was a 32-bit number, hence: 32 % 32 = 0.  \n> Our number will be shifted left by 0 bits. That’s not the same as shifting it left by 1 bit 32 times.  \n\n好棒棒 你竟然可以看到這裡,  \n那我們繼續討論 & (and) 跟 | (or) 運算子吧,  \n這兩個運算子跟一般的運算子有點不一樣  \n- 通常只要看運算子的第一個運算數就能得知結果  \n- 在有掛 [Flag] atturibute的列舉它們好好用(看一下範例)  \n\n```csharp\n[Flags]\nprivate enum Colors\n{\n    None = 0b0,\n    Red = 0b1,\n    Green = 0b10,\n    Blue = 0b100\n}\n```\n\n```csharp\nColors color = Colors.Red | Colors.Green;\nbool isRed = (color & Colors.Red) == Colors.Red;\n```\n\n上面這個刮號可不能省略喔, 因為(&)運算符的優先順序低於(==)運算符,  \n不過這段程式沒有刮號的話連編譯都不會過,真是好加在  \n另外在 .NET framework 4.0 之後的版本提供更棒的方法去檢查flags  \n\n\n```csharp\nbool isRed = color.HasFlag(Colors.Red);\n```\n\n### Math.Round()\n\n猜一下這個值會是多少？  \n\n```csharp\nvar rounded = Math.Round(1.5);\n```\n\n猜2的就答對了, 下一題  \n猜一下這個值會是多少？  \n\n```csharp\nvar rounded = Math.Round(2.5);\n```\n\n還是2 ,\n因為預設會取最接近的偶數\n\n> **No.** The result will be 2 again. By default,  \n> the midpoint value will be rounded to the nearest even value.  \n> You could provide the second argument to the method to request such behavior explicitly:  \n\n```csharp\nvar rounded = Math.Round(2.5, MidpointRounding.ToEven);\n```\n\n這個行為可以透過`MidpointRounding`參數改變  \n\n```csharp\nvar rounded = Math.Round(2.5, MidpointRounding.AwayFromZero);\n```\n\n另外要小心浮點數的精度問題,  \n以下的例子結果會是1,( 因為float的0.1實際上小於0.1 一ω一 )  \n這提醒我們在處理精確數值時,應轉換成整數處理.  \n(譯注:使用 [dotnetfiddle](https://dotnetfiddle.net) 時並不會有這個問題, 在windows 環境下測試的確會有問題)  \n \n```csharp\nvar value = 1.4f;\n\nvar rounded = Math.Round(value + 0.1f);\n```\n### 類別初始化\n\n最佳實踐建我我們應該避免在建構子初始化類別,\n特別是靜態建構子. \n在初始化一個類別的順序如下\n1. 靜態欄位\n2. 靜態建構子\n3. 實體欄位\n4. 實體建構子\n\n看看這個例子\n```csharp\npublic static class Config\n{\n    public static bool ThrowException { get; set; } = true;\n}\n \npublic class FailingClass\n{\n    static FailingClass()\n    {\n        if (Config.ThrowException)\n        {\n            throw new InvalidOperationException();\n        }\n    }\n}\n```\n當我們嚐試實例化FailingClass時,你會得到Exception;  \n值得注意的事,你拿到的會是`TypeInitializationException`  \n而並不是`InvalidOperationException`,  \n\n那麼我們是不是可以試著透過try catch補捉錯誤,  \n並修改靜態屬性,重新實體化class呢？\n**答案是不行**\n\n一個靜態建構值,如果它拋出一個異常,  \n那麼無論何時你想創建一個實例或以任何其他方式訪問這個類,  \n這個異常都會被重新拋出.  \n\n```csharp\ntry\n{\n    var failedInstance = new FailingClass();\n}\ncatch (TypeInitializationException) { }\nConfig.ThrowException = false;\nvar instance = new FailingClass();\n```\n這個類別在程序重啟前是不能再被使用了(會拋出錯誤),  \n這在 C# 是個非常糟糕的實踐,  \n千萬別這樣設計你的類別.  \n\n> The static constructor for a class is only called once. \n> If it throws an exception, then this exception will be rethrown  \n> whenever you want to create an instance or access the class in any other way.  \n> \n> The class becomes effectively unusable until the process (or the application domain) is restarted.  \n> Yes, having even a minuscule chance that the  \n> static constructor will throw an exception, is a very bad idea.  \n\n#### 繼承與類別初始化\n\n繼承的類別初始化執行順序更加複雜,看看下面的例子\n\n```csharp\npublic class BaseClass\n{\n    public BaseClass()\n    {\n        VirtualMethod(1);\n    }\n \n    public virtual int VirtualMethod(int dividend)\n    {\n        return dividend / 1;\n    }\n}\n \npublic class DerivedClass : BaseClass\n{\n    int divisor;\n    public DerivedClass()\n    {\n        divisor = 1;\n    }\n \n    public override int VirtualMethod(int dividend)\n    {\n        return base.VirtualMethod(dividend / divisor);\n    }\n}\n```\n\n當我們初始化 DerivedClass\n\n```csharp\nvar instance = new DerivedClass();\n```\n\n你會得到一個除0的錯誤 `DivideByZeroException`  \n這與執行順序有關\n1. 呼叫 BaseClass 建構子\n2. 執行 DerivedClass VirtualMethod (overrid BaseClass)\n3. divisor 未賦值拋出 `DivideByZeroException`\n\n## 多形 Polymorphism\n\n這個例子只是要說明多形的概念與應用,  \n你可以透過轉形呼叫基底類別的方法.  \n\n```csharp\nvar instance = new DerivedClass();\nvar result = instance.Method(); // -> Method in DerivedClass\nresult = ((BaseClass)instance).Method(); // -> Method in BaseClass\n// The correct answer is: by using the new modifier.\n\npublic class BaseClass\n{\n    public virtual string Method()\n    {\n        return \"Method in BaseClass \";\n    }\n}\n \npublic class DerivedClass : BaseClass \n{\n    public new string Method()\n    {\n        return \"Method in DerivedClass\";\n    }\n}\n```\n\n> It’s typically used to hide the interface methods from the consumers of the class implementing it, \n> unless they cast the instance to that interface.\n> But it works just as well if we want to have two different implementations of a method inside a single class.\n> It’s difficult to think of a good reason for doing it, though.\n\n另外一個例子是明確實作介面方法,  \n如果你的類別已經有同名的方法的話.  \n雖然沒有什麼好理由建議你這樣作.\n(譯注:實務上我有在遇到歷史共業這樣作過...)  \n\n```csharp\nvar instance = new DerivedClass();\nvar result = instance.Method(); // -> Method in DerivedClass\nresult = ((IInterface)instance).Method(); // -> Method belonging to IInterface\nIt’s explicit interface implementation.\n\npublic interface IInterface\n{\n    string Method();\n}\n \npublic class DerivedClass : IInterface\n{\n    public string Method()\n    {\n        return \"Method in DerivedClass\";\n    }\n \n    string IInterface.Method()\n    {\n        return \"Method belonging to IInterface\";\n    }\n}\nIt’s\n```\n## 迭代器 Iterators\n\n小心 Iterators 的陷阱\n看看以下[代碼](https://dotnetfiddle.net/BxfF0d):\n\n\n```csharp\nprivate IEnumerable<int> GetEnumerable(StringBuilder log)\n{\n    using (var context = new Context(log))\n    {\n        return Enumerable.Range(1, 5);\n    }\n}\n\n```\n\n```csharp\npublic class Context : IDisposable\n{\n    private readonly StringBuilder log;\n \n    public Context(StringBuilder log)\n    {\n        this.log = log;\n        this.log.AppendLine(\"Context created\");\n    }\n \n    public void Dispose()\n    {\n        this.log.AppendLine(\"Context disposed\");\n    }\n}\n```\n\n假設我們 foreach 呼叫 GetEnumerable 方法,  \n你預期 Context 類別會有什麼樣的行為？  \n我們會印出以下的output嗎？\n\n> Context created\n> 1\n> 2\n> 3\n> 4\n> 5\n> Context disposed\n\n```csharp\nvar log = new StringBuilder();\nforeach (var number in GetEnumerable(log))\n{\n    log.AppendLine($\"{number}\");\n}\n```\n\n不是的,  \n實際上印出的是\n\n> Context created\n> Context disposed\n> 1\n> 2\n> 3\n> 4\n> 5\n\n這點很重要,  \n因為實務上你很有可能 using dbconnetion 之類的物件,  \n那麼你在取得真正的資料之前,  \n你的連線就已經中斷了 \n\n> This means that in our real world database example, the code would fail –  \n> the connection would be closed before the values could be read from the database.\n\n看看以下的[修正](https://dotnetfiddle.net/IgJaak)\n\n```csharp\nprivate IEnumerable<int> GetEnumerable(StringBuilder log)\n{\n    using (var context = new Context(log))\n    {\n        foreach (var i in Enumerable.Range(1, 5))\n        {\n            yield return i;\n        }\n    }\n}\n```\n譯注:看到這裡對 `yield return` 的使用情境才比較有感啊...\n\n如果你不太熟`yield return`,其實它只是個語法糖,允許增量執行,  \n參考以下範例,或許能更容易理解\n\n```csharp\nprivate IEnumerable<int> GetCustomEnumerable(StringBuilder log)\n{\n    log.AppendLine(\"before 1\");\n    yield return 1;\n    log.AppendLine(\"before 2\");\n    yield return 2;\n    log.AppendLine(\"before 3\");\n    yield return 3;\n    log.AppendLine(\"before 4\");\n    yield return 4;\n    log.AppendLine(\"before 5\");\n    yield return 5;\n    log.AppendLine(\"before end\");\n}\n```\n\n```csharp\nvar log = new StringBuilder();\nlog.AppendLine(\"before enumeration\");\nforeach (var number in GetCustomEnumerable(log))\n{\n    log.AppendLine($\"{number}\");\n}\nlog.AppendLine(\"after enumeration\");\n```\n\n> before enumeration\n> before 1\n> 1\n> before 2\n> 2\n> before 3\n> 3\n> before 4\n> 4\n> before 5\n> 5\n> before end\n> after enumeration\n\n值得注意的事, 如果你在loop當中重複執行以上的代碼,  \n那麼 Iterators 也會重複執行\n\n```csharp\nvar log = new StringBuilder();\nvar enumerable = GetCustomEnumerable(log);\nfor (int i = 1; i <= 2; i++)\n{\n    log.AppendLine($\"enumeration #{i}\");\n    foreach (var number in enumerable)\n    {\n        log.AppendLine($\"{number}\");\n    }\n}\n```\n輸出如下,可以明顯看到 `GetCustomEnumerable` 方法,  \n實際上被隱含的執行了兩次,  \n這在 Code Review 的階段也是難以被察覺的.\n\n> enumeration #1\n> before 1\n> 1\n> before 2\n> 2\n> before 3\n> 3\n> before 4\n> 4\n> before 5\n> 5\n> before end\n> enumeration #2\n> before 1\n> 1\n> before 2\n> 2\n> before 3\n> 3\n> before 4\n> 4\n> before 5\n> 5\n> before end\n\n比較好的作法是將 `IEnumerable` ToList(),\n如果你真的需要對 `IEnumerable` 的結果作 loop 的操作\n\n```csharp\nvar log = new StringBuilder();\nvar enumerable = GetCustomEnumerable(log).ToList();\nfor (int i = 1; i <= 2; i++)\n{\n    log.AppendLine($\"enumeration #{i}\");\n    foreach (var number in enumerable)\n    {\n        log.AppendLine($\"{number}\");\n    }\n}\n```\n輸出結果\n\n> before 1\n> before 2\n> before 3\n> before 4\n> before 5\n> before end\n> enumeration #1\n> 1\n> 2\n> 3\n> 4\n> 5\n> enumeration #2\n> 1\n> 2\n> 3\n> 4\n> 5\n\n## 譯者小結\n\n如果真的能夠預期所有的行為的開發人員,  \n真的是好棒棒,  \n對我來說 static class constructor 的行為是超乎預期的,  \n然後對 `yield return` 的使用場景更有感覺了.  \n本來預計農曆年就可以完成的翻譯,  \n竟然也拖了這麼久,看來我英文還是不行啊. \n\n希望對大家有幫助,也請多多看原文 :)\n\n(fin)","slug":"2018/csharp_common_mistakes_1","published":1,"updated":"2018-04-04T09:48:35.662Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivygo005fyk5520qjxkrd","content":"<h2 id=\"出處\"><a href=\"#出處\" class=\"headerlink\" title=\"出處\"></a>出處</h2><p><a href=\"http://www.dotnetcurry.com/csharp/1417/csharp-common-mistakes\" target=\"_blank\" rel=\"external\">http://www.dotnetcurry.com/csharp/1417/csharp-common-mistakes</a></p>\n<h2 id=\"線上工具\"><a href=\"#線上工具\" class=\"headerlink\" title=\"線上工具\"></a>線上工具</h2><p><a href=\"https://dotnetfiddle.net\" target=\"_blank\" rel=\"external\">https://dotnetfiddle.net</a></p>\n<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>C#是個好棒棒的言語,但是它仍會有超乎你想像的行為,<br>而且就算你是有經驗的開發者,你也要看一看這篇文章.<br>這篇文章不講幹話,還會給你代碼喔  </p>\n<p><img src=\"https://i.imgur.com/wXjvug6.jpg\" alt=\"C# Quiz\"></p>\n<h3 id=\"Null-Value\"><a href=\"#Null-Value\" class=\"headerlink\" title=\"Null Value\"></a>Null Value</h3><p>Null 很危險啦, 你別在 Null 身上調用方法<br>(譯注:在公司的維運人員應該還蠻常見這個錯誤的 一ω一)  </p>\n<blockquote>\n<p>We are all aware that null values can be dangerous, if not handled properly.<br>Dereferencing a null-valued variable (i.e. calling a method on it or accessing one of its properties)<br>will result in a NullReferenceException, as demonstrated with the following sample code:  </p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">object</span> nullValue = <span class=\"literal\">null</span>;</div><div class=\"line\"><span class=\"keyword\">bool</span> areNullValuesEqual = nullValue.Equals(<span class=\"literal\">null</span>);</div></pre></td></tr></table></figure>\n<p>就安全的角度,好像我們要不停的檢查 reference type 是不是 null ,<br>雖然這件事常常發生,好像也很難說成是非預期的行為了…<br>(譯注:又有種中槍的感覺)  </p>\n<blockquote>\n<p>To be on the safer side, we should always make sure that reference type values are not null before dereferencing them.<br>Failing to do so could result in an unhandled exception in a specific edge case.<br>Although such a mistake occasionally happens to everyone, we could hardly call it unexpected behavior.  </p>\n</blockquote>\n<p>看看這個代碼, null 值在 runtime 的時候不會有 type 的  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">string</span> nullString = (<span class=\"keyword\">string</span>)<span class=\"literal\">null</span>;</div><div class=\"line\"><span class=\"keyword\">bool</span> isStringType = nullString <span class=\"keyword\">is</span> <span class=\"keyword\">string</span>;</div></pre></td></tr></table></figure>\n<p><strong>No</strong>, null 值在 runtime 的時候不會有 type 的<br><strong>No</strong>, null 值在 runtime 的時候不會有 type 的<br><strong>No</strong>, null 值在 runtime 的時候不會有 type 的<br>很重要所以說三次,<br>當然你也別想呼叫 <code>GetType()</code> 方法  </p>\n<blockquote>\n<p>The correct answer is <strong>No</strong>.  </p>\n<p>A null value has no type at runtime.  </p>\n<p>In a way, this also affects reflection.<br>Of course, you can’t call GetType() on a null value because a NullReferenceException would get thrown:  </p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">object</span> nullValue = <span class=\"literal\">null</span>;</div><div class=\"line\">Type nullType = nullValue.GetType();</div></pre></td></tr></table></figure>\n<p>純量呢？</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> intValue = <span class=\"number\">5</span>;</div><div class=\"line\">Nullable&lt;<span class=\"keyword\">int</span>&gt; nullableIntValue = <span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"keyword\">bool</span> areTypesEqual = intValue.GetType() == nullableIntValue.GetType();</div></pre></td></tr></table></figure>\n<p>那我們可不可能用反射(reflection)區分 nullable 跟 non-nullable 的值？<br>答案是不可能, 看看後面的代碼  </p>\n<blockquote>\n<p>Is it possible to distinguish between a nullable and a non-nullable value type using reflection?  </p>\n<p>The answer is <strong>No</strong>.  </p>\n<p>The same type will be returned for both variables in the above code: System.Int32.<br>This does not mean that reflection has no representation for Nullable<t>, though.  </t></p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Type intType = <span class=\"keyword\">typeof</span>(<span class=\"keyword\">int</span>);</div><div class=\"line\">Type nullableIntType = <span class=\"keyword\">typeof</span>(Nullable&lt;<span class=\"keyword\">int</span>&gt;);</div><div class=\"line\"><span class=\"keyword\">bool</span> areTypesEqual = intType == nullableIntType;</div></pre></td></tr></table></figure>\n<p>上面兩段程式在runtime拿到的type很不一樣喔,<br>一個是<code>System.Int32</code>一個是 <code>System.Nullable&#39;1\\[System.Int32\\]</code>  </p>\n<h3 id=\"當-null-遇上多載方法-Handling-Null-values-in-Overloaded-methods\"><a href=\"#當-null-遇上多載方法-Handling-Null-values-in-Overloaded-methods\" class=\"headerlink\" title=\"當 null 遇上多載方法 (Handling Null values in Overloaded methods)\"></a>當 null 遇上多載方法 (Handling Null values in Overloaded methods)</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">string</span> <span class=\"title\">OverloadedMethod</span>(<span class=\"params\"><span class=\"keyword\">object</span> arg</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"object parameter\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">string</span> <span class=\"title\">OverloadedMethod</span>(<span class=\"params\"><span class=\"keyword\">string</span> arg</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"string parameter\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面有兩個<code>OverloadedMethod</code><br>猜猜看,傳入 null 時會呼叫哪一個方法？  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> result = OverloadedMethod(<span class=\"literal\">null</span>);</div></pre></td></tr></table></figure>\n<p>有人會猜編譯失敗嗎？<br>MAGIC ! 竟然可以編譯成功, 而回傳的值是 <strong>“string parameter”</strong> ,<br>一般來說,在編譯時期會作型別檢查,相同簽章的方法參數可以被轉型成另一個型別時,是可以編譯成功的喔.<br>而有明確型別的方法將被優先調用(譯注:求這段.Net Framework的原碼來看一下,知道的人請告訴我)  </p>\n<p>如果要指定 null 參數呼叫的多載方法就要對 null 轉型唷,可以參考下面的方法.  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> result = OverloadedMethod((<span class=\"keyword\">object</span>)<span class=\"literal\">null</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"算術運算-Arithmetic-Operations\"><a href=\"#算術運算-Arithmetic-Operations\" class=\"headerlink\" title=\"算術運算 (Arithmetic Operations)\"></a>算術運算 (Arithmetic Operations)</h3><p>好像很少用位移運算吼？<br>回憶一下 左移移 右移移  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shifted = <span class=\"number\">0</span>b1 &lt;&lt; <span class=\"number\">1</span>; <span class=\"comment\">// = 0b10</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shifted = <span class=\"number\">0</span>b1 &gt;&gt; <span class=\"number\">1</span>; <span class=\"comment\">// = 0b0</span></div></pre></td></tr></table></figure>\n<p>bits 跑到底並不會重頭開始喔,一直移位到爆掉就變 0 了.<br>(這裡會用32是因為 int 是32bit的數值,你可以試試放超過32的數值到for loop裡會發生什麼事)  </p>\n<blockquote>\n<p>The bits don’t wrap around when they reach the end.<br>That’s why the result of the second expression is 0.<br>The same would happen if we shifted the bit far enough to the left (32 bits because integer is a 32-bit number):  </p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shifted = <span class=\"number\">0</span>b1;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">32</span>; i++)</div><div class=\"line\">&#123;</div><div class=\"line\">shifted = shifted &lt;&lt; <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>The result would again be 0.  </p>\n</blockquote>\n<p>那我們是不是可以一次移32bit,讓它一次變成0呢？<br>靠北啊 竟然不行捏, 你只會拿到 1,<br>這跟運算子(operator)基本運算有關,在作位元運算的時候,<br>會拿第一個運算數除以第二個運算數後取餘數,<br>這導致我們只會拿 32 % 32 的結果 , 也就是 1 啦<br>(譯注:這段其實我不是很確定,如果錯誤請糾正)  </p>\n<blockquote>\n<p>However, the bit shifting operators have a second operand.<br>Instead of shifting to the left by 1 bit 32 times, we can shift left by 32 bits and get the same result.  </p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shifted = <span class=\"number\">0</span>b1 &lt;&lt; <span class=\"number\">32</span>;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Right? <strong>Wrong.</strong>  </p>\n<p>The result of this expression will be 1. Why?  </p>\n<p>Because that’s how the operator is defined. Before applying the operation,<br>the second operand will be normalized to the bit length of the first operand with the modulo operation,<br>i.e. by calculating the remainder of dividing the second operand by the bit length of the first operand.  </p>\n<p>The first operand in the example we just saw was a 32-bit number, hence: 32 % 32 = 0.<br>Our number will be shifted left by 0 bits. That’s not the same as shifting it left by 1 bit 32 times.  </p>\n</blockquote>\n<p>好棒棒 你竟然可以看到這裡,<br>那我們繼續討論 &amp; (and) 跟 | (or) 運算子吧,<br>這兩個運算子跟一般的運算子有點不一樣  </p>\n<ul>\n<li>通常只要看運算子的第一個運算數就能得知結果  </li>\n<li>在有掛 [Flag] atturibute的列舉它們好好用(看一下範例)  </li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Flags]</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">enum</span> Colors</div><div class=\"line\">&#123;</div><div class=\"line\">    None = <span class=\"number\">0</span>b0,</div><div class=\"line\">    Red = <span class=\"number\">0</span>b1,</div><div class=\"line\">    Green = <span class=\"number\">0</span>b10,</div><div class=\"line\">    Blue = <span class=\"number\">0</span>b100</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Colors color = Colors.Red | Colors.Green;</div><div class=\"line\"><span class=\"keyword\">bool</span> isRed = (color &amp; Colors.Red) == Colors.Red;</div></pre></td></tr></table></figure>\n<p>上面這個刮號可不能省略喔, 因為(&amp;)運算符的優先順序低於(==)運算符,<br>不過這段程式沒有刮號的話連編譯都不會過,真是好加在<br>另外在 .NET framework 4.0 之後的版本提供更棒的方法去檢查flags  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">bool</span> isRed = color.HasFlag(Colors.Red);</div></pre></td></tr></table></figure>\n<h3 id=\"Math-Round\"><a href=\"#Math-Round\" class=\"headerlink\" title=\"Math.Round()\"></a>Math.Round()</h3><p>猜一下這個值會是多少？  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> rounded = Math.Round(<span class=\"number\">1.5</span>);</div></pre></td></tr></table></figure>\n<p>猜2的就答對了, 下一題<br>猜一下這個值會是多少？  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> rounded = Math.Round(<span class=\"number\">2.5</span>);</div></pre></td></tr></table></figure>\n<p>還是2 ,<br>因為預設會取最接近的偶數</p>\n<blockquote>\n<p><strong>No.</strong> The result will be 2 again. By default,<br>the midpoint value will be rounded to the nearest even value.<br>You could provide the second argument to the method to request such behavior explicitly:  </p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> rounded = Math.Round(<span class=\"number\">2.5</span>, MidpointRounding.ToEven);</div></pre></td></tr></table></figure>\n<p>這個行為可以透過<code>MidpointRounding</code>參數改變  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> rounded = Math.Round(<span class=\"number\">2.5</span>, MidpointRounding.AwayFromZero);</div></pre></td></tr></table></figure>\n<p>另外要小心浮點數的精度問題,<br>以下的例子結果會是1,( 因為float的0.1實際上小於0.1 一ω一 )<br>這提醒我們在處理精確數值時,應轉換成整數處理.<br>(譯注:使用 <a href=\"https://dotnetfiddle.net\" target=\"_blank\" rel=\"external\">dotnetfiddle</a> 時並不會有這個問題, 在windows 環境下測試的確會有問題)  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">value</span> = <span class=\"number\">1.4</span>f;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> rounded = Math.Round(<span class=\"keyword\">value</span> + <span class=\"number\">0.1</span>f);</div></pre></td></tr></table></figure>\n<h3 id=\"類別初始化\"><a href=\"#類別初始化\" class=\"headerlink\" title=\"類別初始化\"></a>類別初始化</h3><p>最佳實踐建我我們應該避免在建構子初始化類別,<br>特別是靜態建構子.<br>在初始化一個類別的順序如下</p>\n<ol>\n<li>靜態欄位</li>\n<li>靜態建構子</li>\n<li>實體欄位</li>\n<li>實體建構子</li>\n</ol>\n<p>看看這個例子<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">Config</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> ThrowException &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FailingClass</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">FailingClass</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Config.ThrowException)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidOperationException();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>當我們嚐試實例化FailingClass時,你會得到Exception;<br>值得注意的事,你拿到的會是<code>TypeInitializationException</code><br>而並不是<code>InvalidOperationException</code>,  </p>\n<p>那麼我們是不是可以試著透過try catch補捉錯誤,<br>並修改靜態屬性,重新實體化class呢？<br><strong>答案是不行</strong></p>\n<p>一個靜態建構值,如果它拋出一個異常,<br>那麼無論何時你想創建一個實例或以任何其他方式訪問這個類,<br>這個異常都會被重新拋出.  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> failedInstance = <span class=\"keyword\">new</span> FailingClass();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">catch</span> (TypeInitializationException) &#123; &#125;</div><div class=\"line\">Config.ThrowException = <span class=\"literal\">false</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> FailingClass();</div></pre></td></tr></table></figure>\n<p>這個類別在程序重啟前是不能再被使用了(會拋出錯誤),<br>這在 C# 是個非常糟糕的實踐,<br>千萬別這樣設計你的類別.  </p>\n<blockquote>\n<p>The static constructor for a class is only called once.<br>If it throws an exception, then this exception will be rethrown<br>whenever you want to create an instance or access the class in any other way.  </p>\n<p>The class becomes effectively unusable until the process (or the application domain) is restarted.<br>Yes, having even a minuscule chance that the<br>static constructor will throw an exception, is a very bad idea.  </p>\n</blockquote>\n<h4 id=\"繼承與類別初始化\"><a href=\"#繼承與類別初始化\" class=\"headerlink\" title=\"繼承與類別初始化\"></a>繼承與類別初始化</h4><p>繼承的類別初始化執行順序更加複雜,看看下面的例子</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BaseClass</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseClass</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        VirtualMethod(<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">VirtualMethod</span>(<span class=\"params\"><span class=\"keyword\">int</span> dividend</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> dividend / <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DerivedClass</span> : <span class=\"title\">BaseClass</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> divisor;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DerivedClass</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        divisor = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">int</span> <span class=\"title\">VirtualMethod</span>(<span class=\"params\"><span class=\"keyword\">int</span> dividend</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">base</span>.VirtualMethod(dividend / divisor);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>當我們初始化 DerivedClass</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> DerivedClass();</div></pre></td></tr></table></figure>\n<p>你會得到一個除0的錯誤 <code>DivideByZeroException</code><br>這與執行順序有關</p>\n<ol>\n<li>呼叫 BaseClass 建構子</li>\n<li>執行 DerivedClass VirtualMethod (overrid BaseClass)</li>\n<li>divisor 未賦值拋出 <code>DivideByZeroException</code></li>\n</ol>\n<h2 id=\"多形-Polymorphism\"><a href=\"#多形-Polymorphism\" class=\"headerlink\" title=\"多形 Polymorphism\"></a>多形 Polymorphism</h2><p>這個例子只是要說明多形的概念與應用,<br>你可以透過轉形呼叫基底類別的方法.  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> DerivedClass();</div><div class=\"line\"><span class=\"keyword\">var</span> result = instance.Method(); <span class=\"comment\">// -&gt; Method in DerivedClass</span></div><div class=\"line\">result = ((BaseClass)instance).Method(); <span class=\"comment\">// -&gt; Method in BaseClass</span></div><div class=\"line\"><span class=\"comment\">// The correct answer is: by using the new modifier.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BaseClass</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">string</span> <span class=\"title\">Method</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Method in BaseClass \"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DerivedClass</span> : <span class=\"title\">BaseClass</span> </div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> new <span class=\"keyword\">string</span> <span class=\"title\">Method</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Method in DerivedClass\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>It’s typically used to hide the interface methods from the consumers of the class implementing it,<br>unless they cast the instance to that interface.<br>But it works just as well if we want to have two different implementations of a method inside a single class.<br>It’s difficult to think of a good reason for doing it, though.</p>\n</blockquote>\n<p>另外一個例子是明確實作介面方法,<br>如果你的類別已經有同名的方法的話.<br>雖然沒有什麼好理由建議你這樣作.<br>(譯注:實務上我有在遇到歷史共業這樣作過…)  </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">var instance = new DerivedClass();</div><div class=\"line\">var result = instance.Method(); // -&gt; Method in DerivedClass</div><div class=\"line\">result = ((IInterface)instance).Method(); // -&gt; Method belonging to IInterface</div><div class=\"line\">It’s explicit interface implementation.</div><div class=\"line\"></div><div class=\"line\">public interface IInterface</div><div class=\"line\">&#123;</div><div class=\"line\">    string Method();</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">public class DerivedClass : IInterface</div><div class=\"line\">&#123;</div><div class=\"line\">    public string Method()</div><div class=\"line\">    &#123;</div><div class=\"line\">        return \"Method in DerivedClass\";</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    string IInterface.Method()</div><div class=\"line\">    &#123;</div><div class=\"line\">        return \"Method belonging to IInterface\";</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">It’s</div></pre></td></tr></table></figure>\n<h2 id=\"迭代器-Iterators\"><a href=\"#迭代器-Iterators\" class=\"headerlink\" title=\"迭代器 Iterators\"></a>迭代器 Iterators</h2><p>小心 Iterators 的陷阱<br>看看以下<a href=\"https://dotnetfiddle.net/BxfF0d\" target=\"_blank\" rel=\"external\">代碼</a>:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> IEnumerable&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">GetEnumerable</span>(<span class=\"params\">StringBuilder log</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> context = <span class=\"keyword\">new</span> Context(log))</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Enumerable.Range(<span class=\"number\">1</span>, <span class=\"number\">5</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Context</span> : <span class=\"title\">IDisposable</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> StringBuilder log;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Context</span>(<span class=\"params\">StringBuilder log</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.log = log;</div><div class=\"line\">        <span class=\"keyword\">this</span>.log.AppendLine(<span class=\"string\">\"Context created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.log.AppendLine(<span class=\"string\">\"Context disposed\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>假設我們 foreach 呼叫 GetEnumerable 方法,<br>你預期 Context 類別會有什麼樣的行為？<br>我們會印出以下的output嗎？</p>\n<blockquote>\n<p>Context created<br>1<br>2<br>3<br>4<br>5<br>Context disposed</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> log = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"function\"><span class=\"keyword\">var</span> number <span class=\"keyword\">in</span> <span class=\"title\">GetEnumerable</span>(<span class=\"params\">log</span>))</span></div><div class=\"line\">&#123;</div><div class=\"line\">    log.AppendLine(<span class=\"string\">$\"<span class=\"subst\">&#123;number&#125;</span>\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>不是的,<br>實際上印出的是</p>\n<blockquote>\n<p>Context created<br>Context disposed<br>1<br>2<br>3<br>4<br>5</p>\n</blockquote>\n<p>這點很重要,<br>因為實務上你很有可能 using dbconnetion 之類的物件,<br>那麼你在取得真正的資料之前,<br>你的連線就已經中斷了 </p>\n<blockquote>\n<p>This means that in our real world database example, the code would fail –<br>the connection would be closed before the values could be read from the database.</p>\n</blockquote>\n<p>看看以下的<a href=\"https://dotnetfiddle.net/IgJaak\" target=\"_blank\" rel=\"external\">修正</a></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> IEnumerable&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">GetEnumerable</span>(<span class=\"params\">StringBuilder log</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> context = <span class=\"keyword\">new</span> Context(log))</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> Enumerable.Range(<span class=\"number\">1</span>, <span class=\"number\">5</span>))</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> i;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>譯注:看到這裡對 <code>yield return</code> 的使用情境才比較有感啊…</p>\n<p>如果你不太熟<code>yield return</code>,其實它只是個語法糖,允許增量執行,<br>參考以下範例,或許能更容易理解</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> IEnumerable&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">GetCustomEnumerable</span>(<span class=\"params\">StringBuilder log</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    log.AppendLine(<span class=\"string\">\"before 1\"</span>);</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    log.AppendLine(<span class=\"string\">\"before 2\"</span>);</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">    log.AppendLine(<span class=\"string\">\"before 3\"</span>);</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</div><div class=\"line\">    log.AppendLine(<span class=\"string\">\"before 4\"</span>);</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</div><div class=\"line\">    log.AppendLine(<span class=\"string\">\"before 5\"</span>);</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> <span class=\"number\">5</span>;</div><div class=\"line\">    log.AppendLine(<span class=\"string\">\"before end\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> log = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">log.AppendLine(<span class=\"string\">\"before enumeration\"</span>);</div><div class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"function\"><span class=\"keyword\">var</span> number <span class=\"keyword\">in</span> <span class=\"title\">GetCustomEnumerable</span>(<span class=\"params\">log</span>))</span></div><div class=\"line\">&#123;</div><div class=\"line\">    log.AppendLine(<span class=\"string\">$\"<span class=\"subst\">&#123;number&#125;</span>\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">log.AppendLine(<span class=\"string\">\"after enumeration\"</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>before enumeration<br>before 1<br>1<br>before 2<br>2<br>before 3<br>3<br>before 4<br>4<br>before 5<br>5<br>before end<br>after enumeration</p>\n</blockquote>\n<p>值得注意的事, 如果你在loop當中重複執行以上的代碼,<br>那麼 Iterators 也會重複執行</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> log = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\"><span class=\"keyword\">var</span> enumerable = GetCustomEnumerable(log);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">2</span>; i++)</div><div class=\"line\">&#123;</div><div class=\"line\">    log.AppendLine(<span class=\"string\">$\"enumeration #<span class=\"subst\">&#123;i&#125;</span>\"</span>);</div><div class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> number <span class=\"keyword\">in</span> enumerable)</div><div class=\"line\">    &#123;</div><div class=\"line\">        log.AppendLine(<span class=\"string\">$\"<span class=\"subst\">&#123;number&#125;</span>\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>輸出如下,可以明顯看到 <code>GetCustomEnumerable</code> 方法,<br>實際上被隱含的執行了兩次,<br>這在 Code Review 的階段也是難以被察覺的.</p>\n<blockquote>\n<p>enumeration #1<br>before 1<br>1<br>before 2<br>2<br>before 3<br>3<br>before 4<br>4<br>before 5<br>5<br>before end<br>enumeration #2<br>before 1<br>1<br>before 2<br>2<br>before 3<br>3<br>before 4<br>4<br>before 5<br>5<br>before end</p>\n</blockquote>\n<p>比較好的作法是將 <code>IEnumerable</code> ToList(),<br>如果你真的需要對 <code>IEnumerable</code> 的結果作 loop 的操作</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> log = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\"><span class=\"keyword\">var</span> enumerable = GetCustomEnumerable(log).ToList();</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">2</span>; i++)</div><div class=\"line\">&#123;</div><div class=\"line\">    log.AppendLine(<span class=\"string\">$\"enumeration #<span class=\"subst\">&#123;i&#125;</span>\"</span>);</div><div class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> number <span class=\"keyword\">in</span> enumerable)</div><div class=\"line\">    &#123;</div><div class=\"line\">        log.AppendLine(<span class=\"string\">$\"<span class=\"subst\">&#123;number&#125;</span>\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>輸出結果</p>\n<blockquote>\n<p>before 1<br>before 2<br>before 3<br>before 4<br>before 5<br>before end<br>enumeration #1<br>1<br>2<br>3<br>4<br>5<br>enumeration #2<br>1<br>2<br>3<br>4<br>5</p>\n</blockquote>\n<h2 id=\"譯者小結\"><a href=\"#譯者小結\" class=\"headerlink\" title=\"譯者小結\"></a>譯者小結</h2><p>如果真的能夠預期所有的行為的開發人員,<br>真的是好棒棒,<br>對我來說 static class constructor 的行為是超乎預期的,<br>然後對 <code>yield return</code> 的使用場景更有感覺了.<br>本來預計農曆年就可以完成的翻譯,<br>竟然也拖了這麼久,看來我英文還是不行啊. </p>\n<p>希望對大家有幫助,也請多多看原文 :)</p>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"出處\"><a href=\"#出處\" class=\"headerlink\" title=\"出處\"></a>出處</h2><p><a href=\"http://www.dotnetcurry.com/csharp/1417/csharp-common-mistakes\" target=\"_blank\" rel=\"external\">http://www.dotnetcurry.com/csharp/1417/csharp-common-mistakes</a></p>\n<h2 id=\"線上工具\"><a href=\"#線上工具\" class=\"headerlink\" title=\"線上工具\"></a>線上工具</h2><p><a href=\"https://dotnetfiddle.net\" target=\"_blank\" rel=\"external\">https://dotnetfiddle.net</a></p>\n<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>C#是個好棒棒的言語,但是它仍會有超乎你想像的行為,<br>而且就算你是有經驗的開發者,你也要看一看這篇文章.<br>這篇文章不講幹話,還會給你代碼喔  </p>\n<p><img src=\"https://i.imgur.com/wXjvug6.jpg\" alt=\"C# Quiz\"></p>\n<h3 id=\"Null-Value\"><a href=\"#Null-Value\" class=\"headerlink\" title=\"Null Value\"></a>Null Value</h3><p>Null 很危險啦, 你別在 Null 身上調用方法<br>(譯注:在公司的維運人員應該還蠻常見這個錯誤的 一ω一)  </p>\n<blockquote>\n<p>We are all aware that null values can be dangerous, if not handled properly.<br>Dereferencing a null-valued variable (i.e. calling a method on it or accessing one of its properties)<br>will result in a NullReferenceException, as demonstrated with the following sample code:  </p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">object</span> nullValue = <span class=\"literal\">null</span>;</div><div class=\"line\"><span class=\"keyword\">bool</span> areNullValuesEqual = nullValue.Equals(<span class=\"literal\">null</span>);</div></pre></td></tr></table></figure>\n<p>就安全的角度,好像我們要不停的檢查 reference type 是不是 null ,<br>雖然這件事常常發生,好像也很難說成是非預期的行為了…<br>(譯注:又有種中槍的感覺)  </p>\n<blockquote>\n<p>To be on the safer side, we should always make sure that reference type values are not null before dereferencing them.<br>Failing to do so could result in an unhandled exception in a specific edge case.<br>Although such a mistake occasionally happens to everyone, we could hardly call it unexpected behavior.  </p>\n</blockquote>\n<p>看看這個代碼, null 值在 runtime 的時候不會有 type 的  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">string</span> nullString = (<span class=\"keyword\">string</span>)<span class=\"literal\">null</span>;</div><div class=\"line\"><span class=\"keyword\">bool</span> isStringType = nullString <span class=\"keyword\">is</span> <span class=\"keyword\">string</span>;</div></pre></td></tr></table></figure>\n<p><strong>No</strong>, null 值在 runtime 的時候不會有 type 的<br><strong>No</strong>, null 值在 runtime 的時候不會有 type 的<br><strong>No</strong>, null 值在 runtime 的時候不會有 type 的<br>很重要所以說三次,<br>當然你也別想呼叫 <code>GetType()</code> 方法  </p>\n<blockquote>\n<p>The correct answer is <strong>No</strong>.  </p>\n<p>A null value has no type at runtime.  </p>\n<p>In a way, this also affects reflection.<br>Of course, you can’t call GetType() on a null value because a NullReferenceException would get thrown:  </p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">object</span> nullValue = <span class=\"literal\">null</span>;</div><div class=\"line\">Type nullType = nullValue.GetType();</div></pre></td></tr></table></figure>\n<p>純量呢？</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> intValue = <span class=\"number\">5</span>;</div><div class=\"line\">Nullable&lt;<span class=\"keyword\">int</span>&gt; nullableIntValue = <span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"keyword\">bool</span> areTypesEqual = intValue.GetType() == nullableIntValue.GetType();</div></pre></td></tr></table></figure>\n<p>那我們可不可能用反射(reflection)區分 nullable 跟 non-nullable 的值？<br>答案是不可能, 看看後面的代碼  </p>\n<blockquote>\n<p>Is it possible to distinguish between a nullable and a non-nullable value type using reflection?  </p>\n<p>The answer is <strong>No</strong>.  </p>\n<p>The same type will be returned for both variables in the above code: System.Int32.<br>This does not mean that reflection has no representation for Nullable<t>, though.  </t></p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Type intType = <span class=\"keyword\">typeof</span>(<span class=\"keyword\">int</span>);</div><div class=\"line\">Type nullableIntType = <span class=\"keyword\">typeof</span>(Nullable&lt;<span class=\"keyword\">int</span>&gt;);</div><div class=\"line\"><span class=\"keyword\">bool</span> areTypesEqual = intType == nullableIntType;</div></pre></td></tr></table></figure>\n<p>上面兩段程式在runtime拿到的type很不一樣喔,<br>一個是<code>System.Int32</code>一個是 <code>System.Nullable&#39;1\\[System.Int32\\]</code>  </p>\n<h3 id=\"當-null-遇上多載方法-Handling-Null-values-in-Overloaded-methods\"><a href=\"#當-null-遇上多載方法-Handling-Null-values-in-Overloaded-methods\" class=\"headerlink\" title=\"當 null 遇上多載方法 (Handling Null values in Overloaded methods)\"></a>當 null 遇上多載方法 (Handling Null values in Overloaded methods)</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">string</span> <span class=\"title\">OverloadedMethod</span>(<span class=\"params\"><span class=\"keyword\">object</span> arg</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"object parameter\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">string</span> <span class=\"title\">OverloadedMethod</span>(<span class=\"params\"><span class=\"keyword\">string</span> arg</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"string parameter\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面有兩個<code>OverloadedMethod</code><br>猜猜看,傳入 null 時會呼叫哪一個方法？  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> result = OverloadedMethod(<span class=\"literal\">null</span>);</div></pre></td></tr></table></figure>\n<p>有人會猜編譯失敗嗎？<br>MAGIC ! 竟然可以編譯成功, 而回傳的值是 <strong>“string parameter”</strong> ,<br>一般來說,在編譯時期會作型別檢查,相同簽章的方法參數可以被轉型成另一個型別時,是可以編譯成功的喔.<br>而有明確型別的方法將被優先調用(譯注:求這段.Net Framework的原碼來看一下,知道的人請告訴我)  </p>\n<p>如果要指定 null 參數呼叫的多載方法就要對 null 轉型唷,可以參考下面的方法.  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> result = OverloadedMethod((<span class=\"keyword\">object</span>)<span class=\"literal\">null</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"算術運算-Arithmetic-Operations\"><a href=\"#算術運算-Arithmetic-Operations\" class=\"headerlink\" title=\"算術運算 (Arithmetic Operations)\"></a>算術運算 (Arithmetic Operations)</h3><p>好像很少用位移運算吼？<br>回憶一下 左移移 右移移  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shifted = <span class=\"number\">0</span>b1 &lt;&lt; <span class=\"number\">1</span>; <span class=\"comment\">// = 0b10</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shifted = <span class=\"number\">0</span>b1 &gt;&gt; <span class=\"number\">1</span>; <span class=\"comment\">// = 0b0</span></div></pre></td></tr></table></figure>\n<p>bits 跑到底並不會重頭開始喔,一直移位到爆掉就變 0 了.<br>(這裡會用32是因為 int 是32bit的數值,你可以試試放超過32的數值到for loop裡會發生什麼事)  </p>\n<blockquote>\n<p>The bits don’t wrap around when they reach the end.<br>That’s why the result of the second expression is 0.<br>The same would happen if we shifted the bit far enough to the left (32 bits because integer is a 32-bit number):  </p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shifted = <span class=\"number\">0</span>b1;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">32</span>; i++)</div><div class=\"line\">&#123;</div><div class=\"line\">shifted = shifted &lt;&lt; <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>The result would again be 0.  </p>\n</blockquote>\n<p>那我們是不是可以一次移32bit,讓它一次變成0呢？<br>靠北啊 竟然不行捏, 你只會拿到 1,<br>這跟運算子(operator)基本運算有關,在作位元運算的時候,<br>會拿第一個運算數除以第二個運算數後取餘數,<br>這導致我們只會拿 32 % 32 的結果 , 也就是 1 啦<br>(譯注:這段其實我不是很確定,如果錯誤請糾正)  </p>\n<blockquote>\n<p>However, the bit shifting operators have a second operand.<br>Instead of shifting to the left by 1 bit 32 times, we can shift left by 32 bits and get the same result.  </p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shifted = <span class=\"number\">0</span>b1 &lt;&lt; <span class=\"number\">32</span>;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Right? <strong>Wrong.</strong>  </p>\n<p>The result of this expression will be 1. Why?  </p>\n<p>Because that’s how the operator is defined. Before applying the operation,<br>the second operand will be normalized to the bit length of the first operand with the modulo operation,<br>i.e. by calculating the remainder of dividing the second operand by the bit length of the first operand.  </p>\n<p>The first operand in the example we just saw was a 32-bit number, hence: 32 % 32 = 0.<br>Our number will be shifted left by 0 bits. That’s not the same as shifting it left by 1 bit 32 times.  </p>\n</blockquote>\n<p>好棒棒 你竟然可以看到這裡,<br>那我們繼續討論 &amp; (and) 跟 | (or) 運算子吧,<br>這兩個運算子跟一般的運算子有點不一樣  </p>\n<ul>\n<li>通常只要看運算子的第一個運算數就能得知結果  </li>\n<li>在有掛 [Flag] atturibute的列舉它們好好用(看一下範例)  </li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Flags]</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">enum</span> Colors</div><div class=\"line\">&#123;</div><div class=\"line\">    None = <span class=\"number\">0</span>b0,</div><div class=\"line\">    Red = <span class=\"number\">0</span>b1,</div><div class=\"line\">    Green = <span class=\"number\">0</span>b10,</div><div class=\"line\">    Blue = <span class=\"number\">0</span>b100</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Colors color = Colors.Red | Colors.Green;</div><div class=\"line\"><span class=\"keyword\">bool</span> isRed = (color &amp; Colors.Red) == Colors.Red;</div></pre></td></tr></table></figure>\n<p>上面這個刮號可不能省略喔, 因為(&amp;)運算符的優先順序低於(==)運算符,<br>不過這段程式沒有刮號的話連編譯都不會過,真是好加在<br>另外在 .NET framework 4.0 之後的版本提供更棒的方法去檢查flags  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">bool</span> isRed = color.HasFlag(Colors.Red);</div></pre></td></tr></table></figure>\n<h3 id=\"Math-Round\"><a href=\"#Math-Round\" class=\"headerlink\" title=\"Math.Round()\"></a>Math.Round()</h3><p>猜一下這個值會是多少？  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> rounded = Math.Round(<span class=\"number\">1.5</span>);</div></pre></td></tr></table></figure>\n<p>猜2的就答對了, 下一題<br>猜一下這個值會是多少？  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> rounded = Math.Round(<span class=\"number\">2.5</span>);</div></pre></td></tr></table></figure>\n<p>還是2 ,<br>因為預設會取最接近的偶數</p>\n<blockquote>\n<p><strong>No.</strong> The result will be 2 again. By default,<br>the midpoint value will be rounded to the nearest even value.<br>You could provide the second argument to the method to request such behavior explicitly:  </p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> rounded = Math.Round(<span class=\"number\">2.5</span>, MidpointRounding.ToEven);</div></pre></td></tr></table></figure>\n<p>這個行為可以透過<code>MidpointRounding</code>參數改變  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> rounded = Math.Round(<span class=\"number\">2.5</span>, MidpointRounding.AwayFromZero);</div></pre></td></tr></table></figure>\n<p>另外要小心浮點數的精度問題,<br>以下的例子結果會是1,( 因為float的0.1實際上小於0.1 一ω一 )<br>這提醒我們在處理精確數值時,應轉換成整數處理.<br>(譯注:使用 <a href=\"https://dotnetfiddle.net\" target=\"_blank\" rel=\"external\">dotnetfiddle</a> 時並不會有這個問題, 在windows 環境下測試的確會有問題)  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">value</span> = <span class=\"number\">1.4</span>f;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> rounded = Math.Round(<span class=\"keyword\">value</span> + <span class=\"number\">0.1</span>f);</div></pre></td></tr></table></figure>\n<h3 id=\"類別初始化\"><a href=\"#類別初始化\" class=\"headerlink\" title=\"類別初始化\"></a>類別初始化</h3><p>最佳實踐建我我們應該避免在建構子初始化類別,<br>特別是靜態建構子.<br>在初始化一個類別的順序如下</p>\n<ol>\n<li>靜態欄位</li>\n<li>靜態建構子</li>\n<li>實體欄位</li>\n<li>實體建構子</li>\n</ol>\n<p>看看這個例子<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">Config</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> ThrowException &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FailingClass</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">FailingClass</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Config.ThrowException)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidOperationException();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>當我們嚐試實例化FailingClass時,你會得到Exception;<br>值得注意的事,你拿到的會是<code>TypeInitializationException</code><br>而並不是<code>InvalidOperationException</code>,  </p>\n<p>那麼我們是不是可以試著透過try catch補捉錯誤,<br>並修改靜態屬性,重新實體化class呢？<br><strong>答案是不行</strong></p>\n<p>一個靜態建構值,如果它拋出一個異常,<br>那麼無論何時你想創建一個實例或以任何其他方式訪問這個類,<br>這個異常都會被重新拋出.  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> failedInstance = <span class=\"keyword\">new</span> FailingClass();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">catch</span> (TypeInitializationException) &#123; &#125;</div><div class=\"line\">Config.ThrowException = <span class=\"literal\">false</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> FailingClass();</div></pre></td></tr></table></figure>\n<p>這個類別在程序重啟前是不能再被使用了(會拋出錯誤),<br>這在 C# 是個非常糟糕的實踐,<br>千萬別這樣設計你的類別.  </p>\n<blockquote>\n<p>The static constructor for a class is only called once.<br>If it throws an exception, then this exception will be rethrown<br>whenever you want to create an instance or access the class in any other way.  </p>\n<p>The class becomes effectively unusable until the process (or the application domain) is restarted.<br>Yes, having even a minuscule chance that the<br>static constructor will throw an exception, is a very bad idea.  </p>\n</blockquote>\n<h4 id=\"繼承與類別初始化\"><a href=\"#繼承與類別初始化\" class=\"headerlink\" title=\"繼承與類別初始化\"></a>繼承與類別初始化</h4><p>繼承的類別初始化執行順序更加複雜,看看下面的例子</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BaseClass</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseClass</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        VirtualMethod(<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">VirtualMethod</span>(<span class=\"params\"><span class=\"keyword\">int</span> dividend</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> dividend / <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DerivedClass</span> : <span class=\"title\">BaseClass</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> divisor;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DerivedClass</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        divisor = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">int</span> <span class=\"title\">VirtualMethod</span>(<span class=\"params\"><span class=\"keyword\">int</span> dividend</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">base</span>.VirtualMethod(dividend / divisor);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>當我們初始化 DerivedClass</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> DerivedClass();</div></pre></td></tr></table></figure>\n<p>你會得到一個除0的錯誤 <code>DivideByZeroException</code><br>這與執行順序有關</p>\n<ol>\n<li>呼叫 BaseClass 建構子</li>\n<li>執行 DerivedClass VirtualMethod (overrid BaseClass)</li>\n<li>divisor 未賦值拋出 <code>DivideByZeroException</code></li>\n</ol>\n<h2 id=\"多形-Polymorphism\"><a href=\"#多形-Polymorphism\" class=\"headerlink\" title=\"多形 Polymorphism\"></a>多形 Polymorphism</h2><p>這個例子只是要說明多形的概念與應用,<br>你可以透過轉形呼叫基底類別的方法.  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> DerivedClass();</div><div class=\"line\"><span class=\"keyword\">var</span> result = instance.Method(); <span class=\"comment\">// -&gt; Method in DerivedClass</span></div><div class=\"line\">result = ((BaseClass)instance).Method(); <span class=\"comment\">// -&gt; Method in BaseClass</span></div><div class=\"line\"><span class=\"comment\">// The correct answer is: by using the new modifier.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BaseClass</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">string</span> <span class=\"title\">Method</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Method in BaseClass \"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DerivedClass</span> : <span class=\"title\">BaseClass</span> </div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> new <span class=\"keyword\">string</span> <span class=\"title\">Method</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Method in DerivedClass\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>It’s typically used to hide the interface methods from the consumers of the class implementing it,<br>unless they cast the instance to that interface.<br>But it works just as well if we want to have two different implementations of a method inside a single class.<br>It’s difficult to think of a good reason for doing it, though.</p>\n</blockquote>\n<p>另外一個例子是明確實作介面方法,<br>如果你的類別已經有同名的方法的話.<br>雖然沒有什麼好理由建議你這樣作.<br>(譯注:實務上我有在遇到歷史共業這樣作過…)  </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">var instance = new DerivedClass();</div><div class=\"line\">var result = instance.Method(); // -&gt; Method in DerivedClass</div><div class=\"line\">result = ((IInterface)instance).Method(); // -&gt; Method belonging to IInterface</div><div class=\"line\">It’s explicit interface implementation.</div><div class=\"line\"></div><div class=\"line\">public interface IInterface</div><div class=\"line\">&#123;</div><div class=\"line\">    string Method();</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">public class DerivedClass : IInterface</div><div class=\"line\">&#123;</div><div class=\"line\">    public string Method()</div><div class=\"line\">    &#123;</div><div class=\"line\">        return \"Method in DerivedClass\";</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    string IInterface.Method()</div><div class=\"line\">    &#123;</div><div class=\"line\">        return \"Method belonging to IInterface\";</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">It’s</div></pre></td></tr></table></figure>\n<h2 id=\"迭代器-Iterators\"><a href=\"#迭代器-Iterators\" class=\"headerlink\" title=\"迭代器 Iterators\"></a>迭代器 Iterators</h2><p>小心 Iterators 的陷阱<br>看看以下<a href=\"https://dotnetfiddle.net/BxfF0d\" target=\"_blank\" rel=\"external\">代碼</a>:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> IEnumerable&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">GetEnumerable</span>(<span class=\"params\">StringBuilder log</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> context = <span class=\"keyword\">new</span> Context(log))</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Enumerable.Range(<span class=\"number\">1</span>, <span class=\"number\">5</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Context</span> : <span class=\"title\">IDisposable</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> StringBuilder log;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Context</span>(<span class=\"params\">StringBuilder log</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.log = log;</div><div class=\"line\">        <span class=\"keyword\">this</span>.log.AppendLine(<span class=\"string\">\"Context created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.log.AppendLine(<span class=\"string\">\"Context disposed\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>假設我們 foreach 呼叫 GetEnumerable 方法,<br>你預期 Context 類別會有什麼樣的行為？<br>我們會印出以下的output嗎？</p>\n<blockquote>\n<p>Context created<br>1<br>2<br>3<br>4<br>5<br>Context disposed</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> log = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"function\"><span class=\"keyword\">var</span> number <span class=\"keyword\">in</span> <span class=\"title\">GetEnumerable</span>(<span class=\"params\">log</span>))</span></div><div class=\"line\">&#123;</div><div class=\"line\">    log.AppendLine(<span class=\"string\">$\"<span class=\"subst\">&#123;number&#125;</span>\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>不是的,<br>實際上印出的是</p>\n<blockquote>\n<p>Context created<br>Context disposed<br>1<br>2<br>3<br>4<br>5</p>\n</blockquote>\n<p>這點很重要,<br>因為實務上你很有可能 using dbconnetion 之類的物件,<br>那麼你在取得真正的資料之前,<br>你的連線就已經中斷了 </p>\n<blockquote>\n<p>This means that in our real world database example, the code would fail –<br>the connection would be closed before the values could be read from the database.</p>\n</blockquote>\n<p>看看以下的<a href=\"https://dotnetfiddle.net/IgJaak\" target=\"_blank\" rel=\"external\">修正</a></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> IEnumerable&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">GetEnumerable</span>(<span class=\"params\">StringBuilder log</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> context = <span class=\"keyword\">new</span> Context(log))</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> Enumerable.Range(<span class=\"number\">1</span>, <span class=\"number\">5</span>))</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> i;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>譯注:看到這裡對 <code>yield return</code> 的使用情境才比較有感啊…</p>\n<p>如果你不太熟<code>yield return</code>,其實它只是個語法糖,允許增量執行,<br>參考以下範例,或許能更容易理解</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> IEnumerable&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">GetCustomEnumerable</span>(<span class=\"params\">StringBuilder log</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    log.AppendLine(<span class=\"string\">\"before 1\"</span>);</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    log.AppendLine(<span class=\"string\">\"before 2\"</span>);</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">    log.AppendLine(<span class=\"string\">\"before 3\"</span>);</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</div><div class=\"line\">    log.AppendLine(<span class=\"string\">\"before 4\"</span>);</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</div><div class=\"line\">    log.AppendLine(<span class=\"string\">\"before 5\"</span>);</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> <span class=\"number\">5</span>;</div><div class=\"line\">    log.AppendLine(<span class=\"string\">\"before end\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> log = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">log.AppendLine(<span class=\"string\">\"before enumeration\"</span>);</div><div class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"function\"><span class=\"keyword\">var</span> number <span class=\"keyword\">in</span> <span class=\"title\">GetCustomEnumerable</span>(<span class=\"params\">log</span>))</span></div><div class=\"line\">&#123;</div><div class=\"line\">    log.AppendLine(<span class=\"string\">$\"<span class=\"subst\">&#123;number&#125;</span>\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">log.AppendLine(<span class=\"string\">\"after enumeration\"</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>before enumeration<br>before 1<br>1<br>before 2<br>2<br>before 3<br>3<br>before 4<br>4<br>before 5<br>5<br>before end<br>after enumeration</p>\n</blockquote>\n<p>值得注意的事, 如果你在loop當中重複執行以上的代碼,<br>那麼 Iterators 也會重複執行</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> log = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\"><span class=\"keyword\">var</span> enumerable = GetCustomEnumerable(log);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">2</span>; i++)</div><div class=\"line\">&#123;</div><div class=\"line\">    log.AppendLine(<span class=\"string\">$\"enumeration #<span class=\"subst\">&#123;i&#125;</span>\"</span>);</div><div class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> number <span class=\"keyword\">in</span> enumerable)</div><div class=\"line\">    &#123;</div><div class=\"line\">        log.AppendLine(<span class=\"string\">$\"<span class=\"subst\">&#123;number&#125;</span>\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>輸出如下,可以明顯看到 <code>GetCustomEnumerable</code> 方法,<br>實際上被隱含的執行了兩次,<br>這在 Code Review 的階段也是難以被察覺的.</p>\n<blockquote>\n<p>enumeration #1<br>before 1<br>1<br>before 2<br>2<br>before 3<br>3<br>before 4<br>4<br>before 5<br>5<br>before end<br>enumeration #2<br>before 1<br>1<br>before 2<br>2<br>before 3<br>3<br>before 4<br>4<br>before 5<br>5<br>before end</p>\n</blockquote>\n<p>比較好的作法是將 <code>IEnumerable</code> ToList(),<br>如果你真的需要對 <code>IEnumerable</code> 的結果作 loop 的操作</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> log = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\"><span class=\"keyword\">var</span> enumerable = GetCustomEnumerable(log).ToList();</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">2</span>; i++)</div><div class=\"line\">&#123;</div><div class=\"line\">    log.AppendLine(<span class=\"string\">$\"enumeration #<span class=\"subst\">&#123;i&#125;</span>\"</span>);</div><div class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> number <span class=\"keyword\">in</span> enumerable)</div><div class=\"line\">    &#123;</div><div class=\"line\">        log.AppendLine(<span class=\"string\">$\"<span class=\"subst\">&#123;number&#125;</span>\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>輸出結果</p>\n<blockquote>\n<p>before 1<br>before 2<br>before 3<br>before 4<br>before 5<br>before end<br>enumeration #1<br>1<br>2<br>3<br>4<br>5<br>enumeration #2<br>1<br>2<br>3<br>4<br>5</p>\n</blockquote>\n<h2 id=\"譯者小結\"><a href=\"#譯者小結\" class=\"headerlink\" title=\"譯者小結\"></a>譯者小結</h2><p>如果真的能夠預期所有的行為的開發人員,<br>真的是好棒棒,<br>對我來說 static class constructor 的行為是超乎預期的,<br>然後對 <code>yield return</code> 的使用場景更有感覺了.<br>本來預計農曆年就可以完成的翻譯,<br>竟然也拖了這麼久,看來我英文還是不行啊. </p>\n<p>希望對大家有幫助,也請多多看原文 :)</p>\n<p>(fin)</p>\n"},{"title":"[學習筆記] Linux 語法學習筆記 一","date":"2018-03-25T16:23:01.000Z","_content":"\n## 參考\n- [Unix Terminal Online](https://www.tutorialspoint.com/unix_terminal_online.php)\n- [Learn Shell Scripting all Levels](https://www.udemy.com/learn-shell-scripting-all-levels/)\n- [umask 指令](http://linux.vbird.org/linux_basic/0320bash/csh/no3-8-01.html)\n\n## 學習筆記\n\n### `Clear`\n#### 清除目前 terminal 畫面\n\n### `Cal`\n#### 產生當下的月曆\n>$ cal                                                \n\n>March 2018                                           \nSu Mo Tu We Th Fr Sa                                                                        \n             1  2  3\n 4  5  6  7  8  9 10                                       \n11 12 13 14 15 16 17                                       \n18 19 20 21 22 23 24                                      \n25 26 27 28 29 30 31\n\n> $ cal 2 1985\n\n>    February 1985\nSu Mo Tu We Th Fr Sa\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 \n\n### `Date` \n\n#### 顯示日期與時間\n> $ date\n\n> Sat Mar 10 19:01:37 UTC 2018\n\n> $ date  '+ %y-%m-%d %n %H:%M:%S:%N'\n\n> 18-03-10\n> 19:06:24:126172657\n\n### `pwd` \n\n#### 目前所在的檔案路徑\n\n### `Touch` \n\n#### 建立檔案\n\n### `mkdir` \n\n#### 建立資料夾\n\n### `cat` \n\n#### 寫檔案 `cat > filename`\n> ctrl + d 可以離開編輯\n\n#### 讀檔案 `cat < filename`\n\n#### 合併檔案 `cat file1 file2 > merged_file`\n> $ cat > file1\n> this is file1\n> $ cat file1\n> this is file1\n> $ cat > file2\n> this is file2\n> $ cat file2\n> this is file2\n> $ cat file1 file2 > merged_file\n> $ cat merged_file\n> this is file1\n> this is file2\n \n### `mv`\n\n#### 重新命名檔案\n\n> mv origin_name new_name\n\n### `rm`\n\n#### 刪除檔案或資料夾\n> $ rm file_name\n\n> $ rm -r folder_name/\n\n### `rmdir`\n\n#### 刪除資料夾\n\n> $ rmdir folder_name/\n \n### `cp`\n\n#### 複製檔案\n\n> $ cp oldfile other_folder/newfile\n \n### `ln`\n\n#### 聯結檔案(hard link)\n\n> $ touch one                 \n> $ cat < one\n> $ ln one two                \n> $ ls\none  two\n> $ cat > one                 \n> this is one                                            \n> $ cat < one\n> this is one\n> $ cat < two                 \n> this is one                                            \n\n#### `ln -s` soft link\nhard link 會產生實體檔案,soft link只是指標的轉向.\n如果使用soft link,當刪除原始檔案時,link檔案將無法開啟.\n\n\n### 檔案權限概觀\n\n#### 三種權限\n- read / 讀 / 100 => 4\n- write / 寫 / 010 => 2\n- execute / 執行 / 001 => 1\n\n每個權限都有一個代號,\nread 表示可讀權限, 意味著可以開啟檔案與看見內容, \n代號為4,二進位表示為100\nwrite 表示可以複寫其內容,\n代號為2,二進位表示為010,\nexecute 代表可執行,適用可執行檔或shell script,\n代號為1,二進位表示為001.\n三種權限都有的話,權限為(111=>7)\n\n#### 三種身份\n- owner 開啟的帳號\n- owner group 開啟的帳號所屬的群組\n- other group 其它的群組\n\n新增一個檔案的時候,\n預設只有讀寫,沒有執行的權限 (100|010=110=>6) \n\n>指令 umask 的設定值以三個八進位的數字“nnn”代表。\n>第一個設定數字給使用者自己（owner user），\n>第二個則是設定給用使用者所屬的群體（group），\n>第三個給不屬於同群體的其它使用者（other）。\n>每一位數字的設定值都是三項不同權限的數值加總，\n>read 權限數值為 4；write 權限數值為 2；execute 權限數值為 1。\n>結合了前三者的權限數值，單一的數字可設定的範圍是 0 ~ 7；\n>整體的可設定範圍是 000 ~ 777。\n> --- 鳥哥的 Linux 私房菜\n\n\n### `ls`\n\n#### 列出資料夾中的所有檔案\n#### `ls foldername`\n列出指定的資料夾中所有的檔案\n\n#### `ls -l`\n列出資料夾中的所有檔案與其權限資訊\n\n> ls 最常被使用到的功能還是那個 -l 的選項，為此，很多 distribution 在預設的情況中， 已經將 ll (L 的小寫) 設定成為 ls -l 的意思了！其實，那個功能是 [Bash shell](http://linux.vbird.org/linux_basic/0320bash.php) 的 [alias](http://linux.vbird.org/linux_basic/0320bash.php#alias) 功能呢\n> --- 鳥哥的 Linux 私房菜\n\n### `chmod`\n#### 修改檔案權限\n\n> sh-4.4$ ls -l\ntotal 4\n-rw-r--r-- 1 33581 33581 978 Mar 12 17:30 README.txt\n-rw-r--r-- 1 33581 33581   0 Mar 12 17:32 test\nsh-4.4$ chmod 777 test\nsh-4.4$ ls -l\ntotal 4\n-rw-r--r-- 1 33581 33581 978 Mar 12 17:30 README.txt\n-rwxrwxrwx 1 33581 33581   0 Mar 12 17:32 test\nsh-4.4$ chmod 444 test\nsh-4.4$ ls -l\ntotal 4\n-rw-r--r-- 1 33581 33581 978 Mar 12 17:30 README.txt\n-r--r--r-- 1 33581 33581   0 Mar 12 17:32 test\n\n### `uname`\n\n#### 顯示系統相關的資訊\n\n>$ uname -a                                                            \n>Linux e955582759de 3.10.0-514.26.2.el7.x86_64 #1 SMP Tue Jul 4 15:04:05 UTC \n>2017 x86\\_64 x86\\_64 x86_64 GNU/Linux\n\n> 選項與參數：\n-a  ：所有系統相關的資訊，包括底下的資料都會被列出來；\n-s  ：系統核心名稱\n-r  ：核心的版本\n-m  ：本系統的硬體名稱，例如 i686 或 x86_64 等；\n-p  ：CPU 的類型，與 -m 類似，只是顯示的是 CPU 的類型！\n-i  ：硬體的平台 (ix86)\n> --- 鳥哥的 Linux 私房菜\n\n### `file`\n\n#### 查詢檔案基本資料(類型)\n\n> file *\n \n>jazzy:  ASCII text\nmark:   empty\nmarsen: directory\n\n### `wc`\n\n#### 顯示檔案資訊\n行數 字數 字元數 檔名\n> $ wc jazzy\n\n> 3 10 39 jazzy\n \n#### `wc -l filename`\n顯示檔案行數資訊\n\n#### `wc -w filename`\n顯示檔案字數資訊\n\n#### `wc -c filename`\n顯示檔案字元數資訊\n\n### `sort`\n\n#### 印出排序過後的結果(遞增)\n\n>$ sort \n>owls\npigs\ndogs\ncats\n\n>cats\ndogs\nowls\npigs\n\n#### `sort filename`\n印出檔案內排序過後的結果(遞增)\n\n\n### `cut`\n\n#### 切割資料\n\n參數:\n-d 分割字元\n-f index (從1開始)\n\n範例\n> cat > filenames\nName-Sport-Age\nRoger-Tennis-30\nNadal-Tennis-25\nTiger-Golf-37\nMichael-Baseball-49\n\n>$ cut -d\"-\" -f 1,3 filenames\nName-Age\nRoger-30\nNadal-25\nTiger-37\nMichael-49\n\n### `dd`\n\n#### 資料處理、拷貝、備份、轉碼;[更多](https://blog.gtwang.org/linux/dd-command-examples/)\n\n> $ cat > infile\nthis is the input file           \n$ cat infile\nthis is the input file\n\n> $ dd if=infile of=outfile conv=ucase\n0+1 records in                   \n0+1 records out                 \n23 bytes copied, 6.6972e-05 s, 343 kB/s\n$ cat outfile\nTHIS IS THE INPUT FILE \n\n### `man`\n#### 查詢其它指令用法\n> $ man ls\n```\nLS(1)\tUser Commands  LS(1)\nNAME\tls - list directory contents\nSYNOPSIS\tls [OPTION]... [FILE]...\n\nDESCRIPTION\n       List  information  about the FILEs (the current directory by default).  \n\t   Sort entries alphabetically if none of\n       -cftuvSUX nor --sort is specified.\n\n       Mandatory arguments to long options are mandatory for short options too.\n       -a, --all\n              do not ignore entries starting with .\n\n       -A, --almost-all\n              do not list implied . and ..\n\n       --author\n              with -l, print the author of each file\n\n       -b, --escape\n              print C-style escapes for nongraphic characters\n Manual page ls(1) line 1 (press h for help or q to quit)\n```\n按`h`看更多訊息\n> $ man ls \n> h\n\n```\n                   SUMMARY OF LESS COMMANDS\n\n      Commands marked with * may be preceded by a number, N.\n      Notes in parentheses indicate the behavior if N is given.\n\n  h  H                 Display this help.\n  q  :q  Q  :Q  ZZ     Exit.\n ---------------------------------------------------------------------------\n\n                           MOVING\n\n  e  ^E  j  ^N  CR  *  Forward  one line   (or N lines).\n  y  ^Y  k  ^K  ^P  *  Backward one line   (or N lines).\n  f  ^F  ^V  SPACE  *  Forward  one window (or N lines).\n  b  ^B  ESC-v      *  Backward one window (or N lines).\n  z                 *  Forward  one window (and set window to N).\n  w                 *  Backward one window (and set window to N).\n  ESC-SPACE         *  Forward  one window, but don't stop at end-of-file.\n  d  ^D             *  Forward  one half-window (and set half-window to N).\n  u  ^U             *  Backward one half-window (and set half-window to N).\n  ESC-)  RightArrow *  Left  one half screen width (or N positions).\n  ESC-(  LeftArrow  *  Right one half screen width (or N positions).\n  F                    Forward forever; like \"tail -f\".\n  r  ^R  ^L            Repaint screen.\nHELP -- Press RETURN for more, or q when done\n```\n\n按`q`退出查詢畫面\n\n### `banner`\n#### 輸出用#組成的大形文字\n\n實測未出現,上網查了一下banner好像有蠻多不同的類型可以安裝?\n\n### `compress`\n#### 壓縮檔案\n\n### `zcat`\n#### 讀取壓縮檔案\n\n### `uncompress`\n#### 解壓縮檔案\n\n>compress 已經退流行了。為了支援 windows 常見的 zip，其實 Linux 也早就有 zip 指令了！ gzip 是由 [GNU 計畫](http://www.gnu.org/)所開發出來的壓縮指令，該指令已經取代了 compress 。\n> --- 鳥哥的 Linux 私房菜\n\n### 小結\n\n以上是一些基本的 Linux Command ,  \n下一篇,我們會建立.sh檔,將 Linux Command 依照指定的順序執行  \n並使用 `sh` 命令執行  \n用以完成一些更進階的工作. \n\n\n\n\n\n(more..)","source":"_posts/2018/linux_command_1.md","raw":"---\ntitle: \"[學習筆記] Linux 語法學習筆記 一\"\ndate: 2018/03/26 00:23:01\ntag:\n  - Unix\n  - Linux\n  - Shell\n---\n\n## 參考\n- [Unix Terminal Online](https://www.tutorialspoint.com/unix_terminal_online.php)\n- [Learn Shell Scripting all Levels](https://www.udemy.com/learn-shell-scripting-all-levels/)\n- [umask 指令](http://linux.vbird.org/linux_basic/0320bash/csh/no3-8-01.html)\n\n## 學習筆記\n\n### `Clear`\n#### 清除目前 terminal 畫面\n\n### `Cal`\n#### 產生當下的月曆\n>$ cal                                                \n\n>March 2018                                           \nSu Mo Tu We Th Fr Sa                                                                        \n             1  2  3\n 4  5  6  7  8  9 10                                       \n11 12 13 14 15 16 17                                       \n18 19 20 21 22 23 24                                      \n25 26 27 28 29 30 31\n\n> $ cal 2 1985\n\n>    February 1985\nSu Mo Tu We Th Fr Sa\n                1  2\n 3  4  5  6  7  8  9\n10 11 12 13 14 15 16\n17 18 19 20 21 22 23\n24 25 26 27 28 \n\n### `Date` \n\n#### 顯示日期與時間\n> $ date\n\n> Sat Mar 10 19:01:37 UTC 2018\n\n> $ date  '+ %y-%m-%d %n %H:%M:%S:%N'\n\n> 18-03-10\n> 19:06:24:126172657\n\n### `pwd` \n\n#### 目前所在的檔案路徑\n\n### `Touch` \n\n#### 建立檔案\n\n### `mkdir` \n\n#### 建立資料夾\n\n### `cat` \n\n#### 寫檔案 `cat > filename`\n> ctrl + d 可以離開編輯\n\n#### 讀檔案 `cat < filename`\n\n#### 合併檔案 `cat file1 file2 > merged_file`\n> $ cat > file1\n> this is file1\n> $ cat file1\n> this is file1\n> $ cat > file2\n> this is file2\n> $ cat file2\n> this is file2\n> $ cat file1 file2 > merged_file\n> $ cat merged_file\n> this is file1\n> this is file2\n \n### `mv`\n\n#### 重新命名檔案\n\n> mv origin_name new_name\n\n### `rm`\n\n#### 刪除檔案或資料夾\n> $ rm file_name\n\n> $ rm -r folder_name/\n\n### `rmdir`\n\n#### 刪除資料夾\n\n> $ rmdir folder_name/\n \n### `cp`\n\n#### 複製檔案\n\n> $ cp oldfile other_folder/newfile\n \n### `ln`\n\n#### 聯結檔案(hard link)\n\n> $ touch one                 \n> $ cat < one\n> $ ln one two                \n> $ ls\none  two\n> $ cat > one                 \n> this is one                                            \n> $ cat < one\n> this is one\n> $ cat < two                 \n> this is one                                            \n\n#### `ln -s` soft link\nhard link 會產生實體檔案,soft link只是指標的轉向.\n如果使用soft link,當刪除原始檔案時,link檔案將無法開啟.\n\n\n### 檔案權限概觀\n\n#### 三種權限\n- read / 讀 / 100 => 4\n- write / 寫 / 010 => 2\n- execute / 執行 / 001 => 1\n\n每個權限都有一個代號,\nread 表示可讀權限, 意味著可以開啟檔案與看見內容, \n代號為4,二進位表示為100\nwrite 表示可以複寫其內容,\n代號為2,二進位表示為010,\nexecute 代表可執行,適用可執行檔或shell script,\n代號為1,二進位表示為001.\n三種權限都有的話,權限為(111=>7)\n\n#### 三種身份\n- owner 開啟的帳號\n- owner group 開啟的帳號所屬的群組\n- other group 其它的群組\n\n新增一個檔案的時候,\n預設只有讀寫,沒有執行的權限 (100|010=110=>6) \n\n>指令 umask 的設定值以三個八進位的數字“nnn”代表。\n>第一個設定數字給使用者自己（owner user），\n>第二個則是設定給用使用者所屬的群體（group），\n>第三個給不屬於同群體的其它使用者（other）。\n>每一位數字的設定值都是三項不同權限的數值加總，\n>read 權限數值為 4；write 權限數值為 2；execute 權限數值為 1。\n>結合了前三者的權限數值，單一的數字可設定的範圍是 0 ~ 7；\n>整體的可設定範圍是 000 ~ 777。\n> --- 鳥哥的 Linux 私房菜\n\n\n### `ls`\n\n#### 列出資料夾中的所有檔案\n#### `ls foldername`\n列出指定的資料夾中所有的檔案\n\n#### `ls -l`\n列出資料夾中的所有檔案與其權限資訊\n\n> ls 最常被使用到的功能還是那個 -l 的選項，為此，很多 distribution 在預設的情況中， 已經將 ll (L 的小寫) 設定成為 ls -l 的意思了！其實，那個功能是 [Bash shell](http://linux.vbird.org/linux_basic/0320bash.php) 的 [alias](http://linux.vbird.org/linux_basic/0320bash.php#alias) 功能呢\n> --- 鳥哥的 Linux 私房菜\n\n### `chmod`\n#### 修改檔案權限\n\n> sh-4.4$ ls -l\ntotal 4\n-rw-r--r-- 1 33581 33581 978 Mar 12 17:30 README.txt\n-rw-r--r-- 1 33581 33581   0 Mar 12 17:32 test\nsh-4.4$ chmod 777 test\nsh-4.4$ ls -l\ntotal 4\n-rw-r--r-- 1 33581 33581 978 Mar 12 17:30 README.txt\n-rwxrwxrwx 1 33581 33581   0 Mar 12 17:32 test\nsh-4.4$ chmod 444 test\nsh-4.4$ ls -l\ntotal 4\n-rw-r--r-- 1 33581 33581 978 Mar 12 17:30 README.txt\n-r--r--r-- 1 33581 33581   0 Mar 12 17:32 test\n\n### `uname`\n\n#### 顯示系統相關的資訊\n\n>$ uname -a                                                            \n>Linux e955582759de 3.10.0-514.26.2.el7.x86_64 #1 SMP Tue Jul 4 15:04:05 UTC \n>2017 x86\\_64 x86\\_64 x86_64 GNU/Linux\n\n> 選項與參數：\n-a  ：所有系統相關的資訊，包括底下的資料都會被列出來；\n-s  ：系統核心名稱\n-r  ：核心的版本\n-m  ：本系統的硬體名稱，例如 i686 或 x86_64 等；\n-p  ：CPU 的類型，與 -m 類似，只是顯示的是 CPU 的類型！\n-i  ：硬體的平台 (ix86)\n> --- 鳥哥的 Linux 私房菜\n\n### `file`\n\n#### 查詢檔案基本資料(類型)\n\n> file *\n \n>jazzy:  ASCII text\nmark:   empty\nmarsen: directory\n\n### `wc`\n\n#### 顯示檔案資訊\n行數 字數 字元數 檔名\n> $ wc jazzy\n\n> 3 10 39 jazzy\n \n#### `wc -l filename`\n顯示檔案行數資訊\n\n#### `wc -w filename`\n顯示檔案字數資訊\n\n#### `wc -c filename`\n顯示檔案字元數資訊\n\n### `sort`\n\n#### 印出排序過後的結果(遞增)\n\n>$ sort \n>owls\npigs\ndogs\ncats\n\n>cats\ndogs\nowls\npigs\n\n#### `sort filename`\n印出檔案內排序過後的結果(遞增)\n\n\n### `cut`\n\n#### 切割資料\n\n參數:\n-d 分割字元\n-f index (從1開始)\n\n範例\n> cat > filenames\nName-Sport-Age\nRoger-Tennis-30\nNadal-Tennis-25\nTiger-Golf-37\nMichael-Baseball-49\n\n>$ cut -d\"-\" -f 1,3 filenames\nName-Age\nRoger-30\nNadal-25\nTiger-37\nMichael-49\n\n### `dd`\n\n#### 資料處理、拷貝、備份、轉碼;[更多](https://blog.gtwang.org/linux/dd-command-examples/)\n\n> $ cat > infile\nthis is the input file           \n$ cat infile\nthis is the input file\n\n> $ dd if=infile of=outfile conv=ucase\n0+1 records in                   \n0+1 records out                 \n23 bytes copied, 6.6972e-05 s, 343 kB/s\n$ cat outfile\nTHIS IS THE INPUT FILE \n\n### `man`\n#### 查詢其它指令用法\n> $ man ls\n```\nLS(1)\tUser Commands  LS(1)\nNAME\tls - list directory contents\nSYNOPSIS\tls [OPTION]... [FILE]...\n\nDESCRIPTION\n       List  information  about the FILEs (the current directory by default).  \n\t   Sort entries alphabetically if none of\n       -cftuvSUX nor --sort is specified.\n\n       Mandatory arguments to long options are mandatory for short options too.\n       -a, --all\n              do not ignore entries starting with .\n\n       -A, --almost-all\n              do not list implied . and ..\n\n       --author\n              with -l, print the author of each file\n\n       -b, --escape\n              print C-style escapes for nongraphic characters\n Manual page ls(1) line 1 (press h for help or q to quit)\n```\n按`h`看更多訊息\n> $ man ls \n> h\n\n```\n                   SUMMARY OF LESS COMMANDS\n\n      Commands marked with * may be preceded by a number, N.\n      Notes in parentheses indicate the behavior if N is given.\n\n  h  H                 Display this help.\n  q  :q  Q  :Q  ZZ     Exit.\n ---------------------------------------------------------------------------\n\n                           MOVING\n\n  e  ^E  j  ^N  CR  *  Forward  one line   (or N lines).\n  y  ^Y  k  ^K  ^P  *  Backward one line   (or N lines).\n  f  ^F  ^V  SPACE  *  Forward  one window (or N lines).\n  b  ^B  ESC-v      *  Backward one window (or N lines).\n  z                 *  Forward  one window (and set window to N).\n  w                 *  Backward one window (and set window to N).\n  ESC-SPACE         *  Forward  one window, but don't stop at end-of-file.\n  d  ^D             *  Forward  one half-window (and set half-window to N).\n  u  ^U             *  Backward one half-window (and set half-window to N).\n  ESC-)  RightArrow *  Left  one half screen width (or N positions).\n  ESC-(  LeftArrow  *  Right one half screen width (or N positions).\n  F                    Forward forever; like \"tail -f\".\n  r  ^R  ^L            Repaint screen.\nHELP -- Press RETURN for more, or q when done\n```\n\n按`q`退出查詢畫面\n\n### `banner`\n#### 輸出用#組成的大形文字\n\n實測未出現,上網查了一下banner好像有蠻多不同的類型可以安裝?\n\n### `compress`\n#### 壓縮檔案\n\n### `zcat`\n#### 讀取壓縮檔案\n\n### `uncompress`\n#### 解壓縮檔案\n\n>compress 已經退流行了。為了支援 windows 常見的 zip，其實 Linux 也早就有 zip 指令了！ gzip 是由 [GNU 計畫](http://www.gnu.org/)所開發出來的壓縮指令，該指令已經取代了 compress 。\n> --- 鳥哥的 Linux 私房菜\n\n### 小結\n\n以上是一些基本的 Linux Command ,  \n下一篇,我們會建立.sh檔,將 Linux Command 依照指定的順序執行  \n並使用 `sh` 命令執行  \n用以完成一些更進階的工作. \n\n\n\n\n\n(more..)","slug":"2018/linux_command_1","published":1,"updated":"2018-03-25T16:22:07.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivygq005hyk5512s05i54","content":"<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://www.tutorialspoint.com/unix_terminal_online.php\" target=\"_blank\" rel=\"external\">Unix Terminal Online</a></li>\n<li><a href=\"https://www.udemy.com/learn-shell-scripting-all-levels/\" target=\"_blank\" rel=\"external\">Learn Shell Scripting all Levels</a></li>\n<li><a href=\"http://linux.vbird.org/linux_basic/0320bash/csh/no3-8-01.html\" target=\"_blank\" rel=\"external\">umask 指令</a></li>\n</ul>\n<h2 id=\"學習筆記\"><a href=\"#學習筆記\" class=\"headerlink\" title=\"學習筆記\"></a>學習筆記</h2><h3 id=\"Clear\"><a href=\"#Clear\" class=\"headerlink\" title=\"Clear\"></a><code>Clear</code></h3><h4 id=\"清除目前-terminal-畫面\"><a href=\"#清除目前-terminal-畫面\" class=\"headerlink\" title=\"清除目前 terminal 畫面\"></a>清除目前 terminal 畫面</h4><h3 id=\"Cal\"><a href=\"#Cal\" class=\"headerlink\" title=\"Cal\"></a><code>Cal</code></h3><h4 id=\"產生當下的月曆\"><a href=\"#產生當下的月曆\" class=\"headerlink\" title=\"產生當下的月曆\"></a>產生當下的月曆</h4><blockquote>\n<p>$ cal                                                </p>\n<p>March 2018<br>Su Mo Tu We Th Fr Sa<br>             1  2  3<br> 4  5  6  7  8  9 10<br>11 12 13 14 15 16 17<br>18 19 20 21 22 23 24<br>25 26 27 28 29 30 31</p>\n<p>$ cal 2 1985</p>\n<p>   February 1985<br>Su Mo Tu We Th Fr Sa<br>                1  2<br> 3  4  5  6  7  8  9<br>10 11 12 13 14 15 16<br>17 18 19 20 21 22 23<br>24 25 26 27 28 </p>\n</blockquote>\n<h3 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a><code>Date</code></h3><h4 id=\"顯示日期與時間\"><a href=\"#顯示日期與時間\" class=\"headerlink\" title=\"顯示日期與時間\"></a>顯示日期與時間</h4><blockquote>\n<p>$ date</p>\n<p>Sat Mar 10 19:01:37 UTC 2018</p>\n<p>$ date  ‘+ %y-%m-%d %n %H:%M:%S:%N’</p>\n<p>18-03-10<br>19:06:24:126172657</p>\n</blockquote>\n<h3 id=\"pwd\"><a href=\"#pwd\" class=\"headerlink\" title=\"pwd\"></a><code>pwd</code></h3><h4 id=\"目前所在的檔案路徑\"><a href=\"#目前所在的檔案路徑\" class=\"headerlink\" title=\"目前所在的檔案路徑\"></a>目前所在的檔案路徑</h4><h3 id=\"Touch\"><a href=\"#Touch\" class=\"headerlink\" title=\"Touch\"></a><code>Touch</code></h3><h4 id=\"建立檔案\"><a href=\"#建立檔案\" class=\"headerlink\" title=\"建立檔案\"></a>建立檔案</h4><h3 id=\"mkdir\"><a href=\"#mkdir\" class=\"headerlink\" title=\"mkdir\"></a><code>mkdir</code></h3><h4 id=\"建立資料夾\"><a href=\"#建立資料夾\" class=\"headerlink\" title=\"建立資料夾\"></a>建立資料夾</h4><h3 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a><code>cat</code></h3><h4 id=\"寫檔案-cat-gt-filename\"><a href=\"#寫檔案-cat-gt-filename\" class=\"headerlink\" title=\"寫檔案 cat &gt; filename\"></a>寫檔案 <code>cat &gt; filename</code></h4><blockquote>\n<p>ctrl + d 可以離開編輯</p>\n</blockquote>\n<h4 id=\"讀檔案-cat-lt-filename\"><a href=\"#讀檔案-cat-lt-filename\" class=\"headerlink\" title=\"讀檔案 cat &lt; filename\"></a>讀檔案 <code>cat &lt; filename</code></h4><h4 id=\"合併檔案-cat-file1-file2-gt-merged-file\"><a href=\"#合併檔案-cat-file1-file2-gt-merged-file\" class=\"headerlink\" title=\"合併檔案 cat file1 file2 &gt; merged_file\"></a>合併檔案 <code>cat file1 file2 &gt; merged_file</code></h4><blockquote>\n<p>$ cat &gt; file1<br>this is file1<br>$ cat file1<br>this is file1<br>$ cat &gt; file2<br>this is file2<br>$ cat file2<br>this is file2<br>$ cat file1 file2 &gt; merged_file<br>$ cat merged_file<br>this is file1<br>this is file2</p>\n</blockquote>\n<h3 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a><code>mv</code></h3><h4 id=\"重新命名檔案\"><a href=\"#重新命名檔案\" class=\"headerlink\" title=\"重新命名檔案\"></a>重新命名檔案</h4><blockquote>\n<p>mv origin_name new_name</p>\n</blockquote>\n<h3 id=\"rm\"><a href=\"#rm\" class=\"headerlink\" title=\"rm\"></a><code>rm</code></h3><h4 id=\"刪除檔案或資料夾\"><a href=\"#刪除檔案或資料夾\" class=\"headerlink\" title=\"刪除檔案或資料夾\"></a>刪除檔案或資料夾</h4><blockquote>\n<p>$ rm file_name</p>\n<p>$ rm -r folder_name/</p>\n</blockquote>\n<h3 id=\"rmdir\"><a href=\"#rmdir\" class=\"headerlink\" title=\"rmdir\"></a><code>rmdir</code></h3><h4 id=\"刪除資料夾\"><a href=\"#刪除資料夾\" class=\"headerlink\" title=\"刪除資料夾\"></a>刪除資料夾</h4><blockquote>\n<p>$ rmdir folder_name/</p>\n</blockquote>\n<h3 id=\"cp\"><a href=\"#cp\" class=\"headerlink\" title=\"cp\"></a><code>cp</code></h3><h4 id=\"複製檔案\"><a href=\"#複製檔案\" class=\"headerlink\" title=\"複製檔案\"></a>複製檔案</h4><blockquote>\n<p>$ cp oldfile other_folder/newfile</p>\n</blockquote>\n<h3 id=\"ln\"><a href=\"#ln\" class=\"headerlink\" title=\"ln\"></a><code>ln</code></h3><h4 id=\"聯結檔案-hard-link\"><a href=\"#聯結檔案-hard-link\" class=\"headerlink\" title=\"聯結檔案(hard link)\"></a>聯結檔案(hard link)</h4><blockquote>\n<p>$ touch one<br>$ cat &lt; one<br>$ ln one two<br>$ ls<br>one  two<br>$ cat &gt; one<br>this is one<br>$ cat &lt; one<br>this is one<br>$ cat &lt; two<br>this is one                                            </p>\n</blockquote>\n<h4 id=\"ln-s-soft-link\"><a href=\"#ln-s-soft-link\" class=\"headerlink\" title=\"ln -s soft link\"></a><code>ln -s</code> soft link</h4><p>hard link 會產生實體檔案,soft link只是指標的轉向.<br>如果使用soft link,當刪除原始檔案時,link檔案將無法開啟.</p>\n<h3 id=\"檔案權限概觀\"><a href=\"#檔案權限概觀\" class=\"headerlink\" title=\"檔案權限概觀\"></a>檔案權限概觀</h3><h4 id=\"三種權限\"><a href=\"#三種權限\" class=\"headerlink\" title=\"三種權限\"></a>三種權限</h4><ul>\n<li>read / 讀 / 100 =&gt; 4</li>\n<li>write / 寫 / 010 =&gt; 2</li>\n<li>execute / 執行 / 001 =&gt; 1</li>\n</ul>\n<p>每個權限都有一個代號,<br>read 表示可讀權限, 意味著可以開啟檔案與看見內容,<br>代號為4,二進位表示為100<br>write 表示可以複寫其內容,<br>代號為2,二進位表示為010,<br>execute 代表可執行,適用可執行檔或shell script,<br>代號為1,二進位表示為001.<br>三種權限都有的話,權限為(111=&gt;7)</p>\n<h4 id=\"三種身份\"><a href=\"#三種身份\" class=\"headerlink\" title=\"三種身份\"></a>三種身份</h4><ul>\n<li>owner 開啟的帳號</li>\n<li>owner group 開啟的帳號所屬的群組</li>\n<li>other group 其它的群組</li>\n</ul>\n<p>新增一個檔案的時候,<br>預設只有讀寫,沒有執行的權限 (100|010=110=&gt;6) </p>\n<blockquote>\n<p>指令 umask 的設定值以三個八進位的數字“nnn”代表。<br>第一個設定數字給使用者自己（owner user），<br>第二個則是設定給用使用者所屬的群體（group），<br>第三個給不屬於同群體的其它使用者（other）。<br>每一位數字的設定值都是三項不同權限的數值加總，<br>read 權限數值為 4；write 權限數值為 2；execute 權限數值為 1。<br>結合了前三者的權限數值，單一的數字可設定的範圍是 0 ~ 7；<br>整體的可設定範圍是 000 ~ 777。<br>— 鳥哥的 Linux 私房菜</p>\n</blockquote>\n<h3 id=\"ls\"><a href=\"#ls\" class=\"headerlink\" title=\"ls\"></a><code>ls</code></h3><h4 id=\"列出資料夾中的所有檔案\"><a href=\"#列出資料夾中的所有檔案\" class=\"headerlink\" title=\"列出資料夾中的所有檔案\"></a>列出資料夾中的所有檔案</h4><h4 id=\"ls-foldername\"><a href=\"#ls-foldername\" class=\"headerlink\" title=\"ls foldername\"></a><code>ls foldername</code></h4><p>列出指定的資料夾中所有的檔案</p>\n<h4 id=\"ls-l\"><a href=\"#ls-l\" class=\"headerlink\" title=\"ls -l\"></a><code>ls -l</code></h4><p>列出資料夾中的所有檔案與其權限資訊</p>\n<blockquote>\n<p>ls 最常被使用到的功能還是那個 -l 的選項，為此，很多 distribution 在預設的情況中， 已經將 ll (L 的小寫) 設定成為 ls -l 的意思了！其實，那個功能是 <a href=\"http://linux.vbird.org/linux_basic/0320bash.php\" target=\"_blank\" rel=\"external\">Bash shell</a> 的 <a href=\"http://linux.vbird.org/linux_basic/0320bash.php#alias\" target=\"_blank\" rel=\"external\">alias</a> 功能呢<br>— 鳥哥的 Linux 私房菜</p>\n</blockquote>\n<h3 id=\"chmod\"><a href=\"#chmod\" class=\"headerlink\" title=\"chmod\"></a><code>chmod</code></h3><h4 id=\"修改檔案權限\"><a href=\"#修改檔案權限\" class=\"headerlink\" title=\"修改檔案權限\"></a>修改檔案權限</h4><blockquote>\n<p>sh-4.4$ ls -l<br>total 4<br>-rw-r–r– 1 33581 33581 978 Mar 12 17:30 README.txt<br>-rw-r–r– 1 33581 33581   0 Mar 12 17:32 test<br>sh-4.4$ chmod 777 test<br>sh-4.4$ ls -l<br>total 4<br>-rw-r–r– 1 33581 33581 978 Mar 12 17:30 README.txt<br>-rwxrwxrwx 1 33581 33581   0 Mar 12 17:32 test<br>sh-4.4$ chmod 444 test<br>sh-4.4$ ls -l<br>total 4<br>-rw-r–r– 1 33581 33581 978 Mar 12 17:30 README.txt<br>-r–r–r– 1 33581 33581   0 Mar 12 17:32 test</p>\n</blockquote>\n<h3 id=\"uname\"><a href=\"#uname\" class=\"headerlink\" title=\"uname\"></a><code>uname</code></h3><h4 id=\"顯示系統相關的資訊\"><a href=\"#顯示系統相關的資訊\" class=\"headerlink\" title=\"顯示系統相關的資訊\"></a>顯示系統相關的資訊</h4><blockquote>\n<p>$ uname -a<br>Linux e955582759de 3.10.0-514.26.2.el7.x86_64 #1 SMP Tue Jul 4 15:04:05 UTC<br>2017 x86_64 x86_64 x86_64 GNU/Linux</p>\n<p>選項與參數：<br>-a  ：所有系統相關的資訊，包括底下的資料都會被列出來；<br>-s  ：系統核心名稱<br>-r  ：核心的版本<br>-m  ：本系統的硬體名稱，例如 i686 或 x86_64 等；<br>-p  ：CPU 的類型，與 -m 類似，只是顯示的是 CPU 的類型！<br>-i  ：硬體的平台 (ix86)<br>— 鳥哥的 Linux 私房菜</p>\n</blockquote>\n<h3 id=\"file\"><a href=\"#file\" class=\"headerlink\" title=\"file\"></a><code>file</code></h3><h4 id=\"查詢檔案基本資料-類型\"><a href=\"#查詢檔案基本資料-類型\" class=\"headerlink\" title=\"查詢檔案基本資料(類型)\"></a>查詢檔案基本資料(類型)</h4><blockquote>\n<p>file *</p>\n<p>jazzy:  ASCII text<br>mark:   empty<br>marsen: directory</p>\n</blockquote>\n<h3 id=\"wc\"><a href=\"#wc\" class=\"headerlink\" title=\"wc\"></a><code>wc</code></h3><h4 id=\"顯示檔案資訊\"><a href=\"#顯示檔案資訊\" class=\"headerlink\" title=\"顯示檔案資訊\"></a>顯示檔案資訊</h4><p>行數 字數 字元數 檔名</p>\n<blockquote>\n<p>$ wc jazzy</p>\n<p>3 10 39 jazzy</p>\n</blockquote>\n<h4 id=\"wc-l-filename\"><a href=\"#wc-l-filename\" class=\"headerlink\" title=\"wc -l filename\"></a><code>wc -l filename</code></h4><p>顯示檔案行數資訊</p>\n<h4 id=\"wc-w-filename\"><a href=\"#wc-w-filename\" class=\"headerlink\" title=\"wc -w filename\"></a><code>wc -w filename</code></h4><p>顯示檔案字數資訊</p>\n<h4 id=\"wc-c-filename\"><a href=\"#wc-c-filename\" class=\"headerlink\" title=\"wc -c filename\"></a><code>wc -c filename</code></h4><p>顯示檔案字元數資訊</p>\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a><code>sort</code></h3><h4 id=\"印出排序過後的結果-遞增\"><a href=\"#印出排序過後的結果-遞增\" class=\"headerlink\" title=\"印出排序過後的結果(遞增)\"></a>印出排序過後的結果(遞增)</h4><blockquote>\n<p>$ sort<br>owls<br>pigs<br>dogs<br>cats</p>\n<p>cats<br>dogs<br>owls<br>pigs</p>\n</blockquote>\n<h4 id=\"sort-filename\"><a href=\"#sort-filename\" class=\"headerlink\" title=\"sort filename\"></a><code>sort filename</code></h4><p>印出檔案內排序過後的結果(遞增)</p>\n<h3 id=\"cut\"><a href=\"#cut\" class=\"headerlink\" title=\"cut\"></a><code>cut</code></h3><h4 id=\"切割資料\"><a href=\"#切割資料\" class=\"headerlink\" title=\"切割資料\"></a>切割資料</h4><p>參數:<br>-d 分割字元<br>-f index (從1開始)</p>\n<p>範例</p>\n<blockquote>\n<p>cat &gt; filenames<br>Name-Sport-Age<br>Roger-Tennis-30<br>Nadal-Tennis-25<br>Tiger-Golf-37<br>Michael-Baseball-49</p>\n<p>$ cut -d”-“ -f 1,3 filenames<br>Name-Age<br>Roger-30<br>Nadal-25<br>Tiger-37<br>Michael-49</p>\n</blockquote>\n<h3 id=\"dd\"><a href=\"#dd\" class=\"headerlink\" title=\"dd\"></a><code>dd</code></h3><h4 id=\"資料處理、拷貝、備份、轉碼-更多\"><a href=\"#資料處理、拷貝、備份、轉碼-更多\" class=\"headerlink\" title=\"資料處理、拷貝、備份、轉碼;更多\"></a>資料處理、拷貝、備份、轉碼;<a href=\"https://blog.gtwang.org/linux/dd-command-examples/\" target=\"_blank\" rel=\"external\">更多</a></h4><blockquote>\n<p>$ cat &gt; infile<br>this is the input file<br>$ cat infile<br>this is the input file</p>\n<p>$ dd if=infile of=outfile conv=ucase<br>0+1 records in<br>0+1 records out<br>23 bytes copied, 6.6972e-05 s, 343 kB/s<br>$ cat outfile<br>THIS IS THE INPUT FILE </p>\n</blockquote>\n<h3 id=\"man\"><a href=\"#man\" class=\"headerlink\" title=\"man\"></a><code>man</code></h3><h4 id=\"查詢其它指令用法\"><a href=\"#查詢其它指令用法\" class=\"headerlink\" title=\"查詢其它指令用法\"></a>查詢其它指令用法</h4><blockquote>\n<p>$ man ls<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">LS(1)\tUser Commands  LS(1)</div><div class=\"line\">NAME\tls - list directory contents</div><div class=\"line\">SYNOPSIS\tls [OPTION]... [FILE]...</div><div class=\"line\"></div><div class=\"line\">DESCRIPTION</div><div class=\"line\">       List  information  about the FILEs (the current directory by default).  </div><div class=\"line\">\t   Sort entries alphabetically if none of</div><div class=\"line\">       -cftuvSUX nor --sort is specified.</div><div class=\"line\"></div><div class=\"line\">       Mandatory arguments to long options are mandatory for short options too.</div><div class=\"line\">       -a, --all</div><div class=\"line\">              do not ignore entries starting with .</div><div class=\"line\"></div><div class=\"line\">       -A, --almost-all</div><div class=\"line\">              do not list implied . and ..</div><div class=\"line\"></div><div class=\"line\">       --author</div><div class=\"line\">              with -l, print the author of each file</div><div class=\"line\"></div><div class=\"line\">       -b, --escape</div><div class=\"line\">              print C-style escapes for nongraphic characters</div><div class=\"line\"> Manual page ls(1) line 1 (press h for help or q to quit)</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>按<code>h</code>看更多訊息</p>\n<blockquote>\n<p>$ man ls<br>h</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">                   SUMMARY OF LESS COMMANDS</div><div class=\"line\"></div><div class=\"line\">      Commands marked with * may be preceded by a number, N.</div><div class=\"line\">      Notes in parentheses indicate the behavior if N is given.</div><div class=\"line\"></div><div class=\"line\">  h  H                 Display this help.</div><div class=\"line\">  q  :q  Q  :Q  ZZ     Exit.</div><div class=\"line\"> ---------------------------------------------------------------------------</div><div class=\"line\"></div><div class=\"line\">                           MOVING</div><div class=\"line\"></div><div class=\"line\">  e  ^E  j  ^N  CR  *  Forward  one line   (or N lines).</div><div class=\"line\">  y  ^Y  k  ^K  ^P  *  Backward one line   (or N lines).</div><div class=\"line\">  f  ^F  ^V  SPACE  *  Forward  one window (or N lines).</div><div class=\"line\">  b  ^B  ESC-v      *  Backward one window (or N lines).</div><div class=\"line\">  z                 *  Forward  one window (and set window to N).</div><div class=\"line\">  w                 *  Backward one window (and set window to N).</div><div class=\"line\">  ESC-SPACE         *  Forward  one window, but don&apos;t stop at end-of-file.</div><div class=\"line\">  d  ^D             *  Forward  one half-window (and set half-window to N).</div><div class=\"line\">  u  ^U             *  Backward one half-window (and set half-window to N).</div><div class=\"line\">  ESC-)  RightArrow *  Left  one half screen width (or N positions).</div><div class=\"line\">  ESC-(  LeftArrow  *  Right one half screen width (or N positions).</div><div class=\"line\">  F                    Forward forever; like &quot;tail -f&quot;.</div><div class=\"line\">  r  ^R  ^L            Repaint screen.</div><div class=\"line\">HELP -- Press RETURN for more, or q when done</div></pre></td></tr></table></figure>\n<p>按<code>q</code>退出查詢畫面</p>\n<h3 id=\"banner\"><a href=\"#banner\" class=\"headerlink\" title=\"banner\"></a><code>banner</code></h3><h4 id=\"輸出用-組成的大形文字\"><a href=\"#輸出用-組成的大形文字\" class=\"headerlink\" title=\"輸出用#組成的大形文字\"></a>輸出用#組成的大形文字</h4><p>實測未出現,上網查了一下banner好像有蠻多不同的類型可以安裝?</p>\n<h3 id=\"compress\"><a href=\"#compress\" class=\"headerlink\" title=\"compress\"></a><code>compress</code></h3><h4 id=\"壓縮檔案\"><a href=\"#壓縮檔案\" class=\"headerlink\" title=\"壓縮檔案\"></a>壓縮檔案</h4><h3 id=\"zcat\"><a href=\"#zcat\" class=\"headerlink\" title=\"zcat\"></a><code>zcat</code></h3><h4 id=\"讀取壓縮檔案\"><a href=\"#讀取壓縮檔案\" class=\"headerlink\" title=\"讀取壓縮檔案\"></a>讀取壓縮檔案</h4><h3 id=\"uncompress\"><a href=\"#uncompress\" class=\"headerlink\" title=\"uncompress\"></a><code>uncompress</code></h3><h4 id=\"解壓縮檔案\"><a href=\"#解壓縮檔案\" class=\"headerlink\" title=\"解壓縮檔案\"></a>解壓縮檔案</h4><blockquote>\n<p>compress 已經退流行了。為了支援 windows 常見的 zip，其實 Linux 也早就有 zip 指令了！ gzip 是由 <a href=\"http://www.gnu.org/\" target=\"_blank\" rel=\"external\">GNU 計畫</a>所開發出來的壓縮指令，該指令已經取代了 compress 。<br>— 鳥哥的 Linux 私房菜</p>\n</blockquote>\n<h3 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h3><p>以上是一些基本的 Linux Command ,<br>下一篇,我們會建立.sh檔,將 Linux Command 依照指定的順序執行<br>並使用 <code>sh</code> 命令執行<br>用以完成一些更進階的工作. </p>\n<p>(more..)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://www.tutorialspoint.com/unix_terminal_online.php\" target=\"_blank\" rel=\"external\">Unix Terminal Online</a></li>\n<li><a href=\"https://www.udemy.com/learn-shell-scripting-all-levels/\" target=\"_blank\" rel=\"external\">Learn Shell Scripting all Levels</a></li>\n<li><a href=\"http://linux.vbird.org/linux_basic/0320bash/csh/no3-8-01.html\" target=\"_blank\" rel=\"external\">umask 指令</a></li>\n</ul>\n<h2 id=\"學習筆記\"><a href=\"#學習筆記\" class=\"headerlink\" title=\"學習筆記\"></a>學習筆記</h2><h3 id=\"Clear\"><a href=\"#Clear\" class=\"headerlink\" title=\"Clear\"></a><code>Clear</code></h3><h4 id=\"清除目前-terminal-畫面\"><a href=\"#清除目前-terminal-畫面\" class=\"headerlink\" title=\"清除目前 terminal 畫面\"></a>清除目前 terminal 畫面</h4><h3 id=\"Cal\"><a href=\"#Cal\" class=\"headerlink\" title=\"Cal\"></a><code>Cal</code></h3><h4 id=\"產生當下的月曆\"><a href=\"#產生當下的月曆\" class=\"headerlink\" title=\"產生當下的月曆\"></a>產生當下的月曆</h4><blockquote>\n<p>$ cal                                                </p>\n<p>March 2018<br>Su Mo Tu We Th Fr Sa<br>             1  2  3<br> 4  5  6  7  8  9 10<br>11 12 13 14 15 16 17<br>18 19 20 21 22 23 24<br>25 26 27 28 29 30 31</p>\n<p>$ cal 2 1985</p>\n<p>   February 1985<br>Su Mo Tu We Th Fr Sa<br>                1  2<br> 3  4  5  6  7  8  9<br>10 11 12 13 14 15 16<br>17 18 19 20 21 22 23<br>24 25 26 27 28 </p>\n</blockquote>\n<h3 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a><code>Date</code></h3><h4 id=\"顯示日期與時間\"><a href=\"#顯示日期與時間\" class=\"headerlink\" title=\"顯示日期與時間\"></a>顯示日期與時間</h4><blockquote>\n<p>$ date</p>\n<p>Sat Mar 10 19:01:37 UTC 2018</p>\n<p>$ date  ‘+ %y-%m-%d %n %H:%M:%S:%N’</p>\n<p>18-03-10<br>19:06:24:126172657</p>\n</blockquote>\n<h3 id=\"pwd\"><a href=\"#pwd\" class=\"headerlink\" title=\"pwd\"></a><code>pwd</code></h3><h4 id=\"目前所在的檔案路徑\"><a href=\"#目前所在的檔案路徑\" class=\"headerlink\" title=\"目前所在的檔案路徑\"></a>目前所在的檔案路徑</h4><h3 id=\"Touch\"><a href=\"#Touch\" class=\"headerlink\" title=\"Touch\"></a><code>Touch</code></h3><h4 id=\"建立檔案\"><a href=\"#建立檔案\" class=\"headerlink\" title=\"建立檔案\"></a>建立檔案</h4><h3 id=\"mkdir\"><a href=\"#mkdir\" class=\"headerlink\" title=\"mkdir\"></a><code>mkdir</code></h3><h4 id=\"建立資料夾\"><a href=\"#建立資料夾\" class=\"headerlink\" title=\"建立資料夾\"></a>建立資料夾</h4><h3 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a><code>cat</code></h3><h4 id=\"寫檔案-cat-gt-filename\"><a href=\"#寫檔案-cat-gt-filename\" class=\"headerlink\" title=\"寫檔案 cat &gt; filename\"></a>寫檔案 <code>cat &gt; filename</code></h4><blockquote>\n<p>ctrl + d 可以離開編輯</p>\n</blockquote>\n<h4 id=\"讀檔案-cat-lt-filename\"><a href=\"#讀檔案-cat-lt-filename\" class=\"headerlink\" title=\"讀檔案 cat &lt; filename\"></a>讀檔案 <code>cat &lt; filename</code></h4><h4 id=\"合併檔案-cat-file1-file2-gt-merged-file\"><a href=\"#合併檔案-cat-file1-file2-gt-merged-file\" class=\"headerlink\" title=\"合併檔案 cat file1 file2 &gt; merged_file\"></a>合併檔案 <code>cat file1 file2 &gt; merged_file</code></h4><blockquote>\n<p>$ cat &gt; file1<br>this is file1<br>$ cat file1<br>this is file1<br>$ cat &gt; file2<br>this is file2<br>$ cat file2<br>this is file2<br>$ cat file1 file2 &gt; merged_file<br>$ cat merged_file<br>this is file1<br>this is file2</p>\n</blockquote>\n<h3 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a><code>mv</code></h3><h4 id=\"重新命名檔案\"><a href=\"#重新命名檔案\" class=\"headerlink\" title=\"重新命名檔案\"></a>重新命名檔案</h4><blockquote>\n<p>mv origin_name new_name</p>\n</blockquote>\n<h3 id=\"rm\"><a href=\"#rm\" class=\"headerlink\" title=\"rm\"></a><code>rm</code></h3><h4 id=\"刪除檔案或資料夾\"><a href=\"#刪除檔案或資料夾\" class=\"headerlink\" title=\"刪除檔案或資料夾\"></a>刪除檔案或資料夾</h4><blockquote>\n<p>$ rm file_name</p>\n<p>$ rm -r folder_name/</p>\n</blockquote>\n<h3 id=\"rmdir\"><a href=\"#rmdir\" class=\"headerlink\" title=\"rmdir\"></a><code>rmdir</code></h3><h4 id=\"刪除資料夾\"><a href=\"#刪除資料夾\" class=\"headerlink\" title=\"刪除資料夾\"></a>刪除資料夾</h4><blockquote>\n<p>$ rmdir folder_name/</p>\n</blockquote>\n<h3 id=\"cp\"><a href=\"#cp\" class=\"headerlink\" title=\"cp\"></a><code>cp</code></h3><h4 id=\"複製檔案\"><a href=\"#複製檔案\" class=\"headerlink\" title=\"複製檔案\"></a>複製檔案</h4><blockquote>\n<p>$ cp oldfile other_folder/newfile</p>\n</blockquote>\n<h3 id=\"ln\"><a href=\"#ln\" class=\"headerlink\" title=\"ln\"></a><code>ln</code></h3><h4 id=\"聯結檔案-hard-link\"><a href=\"#聯結檔案-hard-link\" class=\"headerlink\" title=\"聯結檔案(hard link)\"></a>聯結檔案(hard link)</h4><blockquote>\n<p>$ touch one<br>$ cat &lt; one<br>$ ln one two<br>$ ls<br>one  two<br>$ cat &gt; one<br>this is one<br>$ cat &lt; one<br>this is one<br>$ cat &lt; two<br>this is one                                            </p>\n</blockquote>\n<h4 id=\"ln-s-soft-link\"><a href=\"#ln-s-soft-link\" class=\"headerlink\" title=\"ln -s soft link\"></a><code>ln -s</code> soft link</h4><p>hard link 會產生實體檔案,soft link只是指標的轉向.<br>如果使用soft link,當刪除原始檔案時,link檔案將無法開啟.</p>\n<h3 id=\"檔案權限概觀\"><a href=\"#檔案權限概觀\" class=\"headerlink\" title=\"檔案權限概觀\"></a>檔案權限概觀</h3><h4 id=\"三種權限\"><a href=\"#三種權限\" class=\"headerlink\" title=\"三種權限\"></a>三種權限</h4><ul>\n<li>read / 讀 / 100 =&gt; 4</li>\n<li>write / 寫 / 010 =&gt; 2</li>\n<li>execute / 執行 / 001 =&gt; 1</li>\n</ul>\n<p>每個權限都有一個代號,<br>read 表示可讀權限, 意味著可以開啟檔案與看見內容,<br>代號為4,二進位表示為100<br>write 表示可以複寫其內容,<br>代號為2,二進位表示為010,<br>execute 代表可執行,適用可執行檔或shell script,<br>代號為1,二進位表示為001.<br>三種權限都有的話,權限為(111=&gt;7)</p>\n<h4 id=\"三種身份\"><a href=\"#三種身份\" class=\"headerlink\" title=\"三種身份\"></a>三種身份</h4><ul>\n<li>owner 開啟的帳號</li>\n<li>owner group 開啟的帳號所屬的群組</li>\n<li>other group 其它的群組</li>\n</ul>\n<p>新增一個檔案的時候,<br>預設只有讀寫,沒有執行的權限 (100|010=110=&gt;6) </p>\n<blockquote>\n<p>指令 umask 的設定值以三個八進位的數字“nnn”代表。<br>第一個設定數字給使用者自己（owner user），<br>第二個則是設定給用使用者所屬的群體（group），<br>第三個給不屬於同群體的其它使用者（other）。<br>每一位數字的設定值都是三項不同權限的數值加總，<br>read 權限數值為 4；write 權限數值為 2；execute 權限數值為 1。<br>結合了前三者的權限數值，單一的數字可設定的範圍是 0 ~ 7；<br>整體的可設定範圍是 000 ~ 777。<br>— 鳥哥的 Linux 私房菜</p>\n</blockquote>\n<h3 id=\"ls\"><a href=\"#ls\" class=\"headerlink\" title=\"ls\"></a><code>ls</code></h3><h4 id=\"列出資料夾中的所有檔案\"><a href=\"#列出資料夾中的所有檔案\" class=\"headerlink\" title=\"列出資料夾中的所有檔案\"></a>列出資料夾中的所有檔案</h4><h4 id=\"ls-foldername\"><a href=\"#ls-foldername\" class=\"headerlink\" title=\"ls foldername\"></a><code>ls foldername</code></h4><p>列出指定的資料夾中所有的檔案</p>\n<h4 id=\"ls-l\"><a href=\"#ls-l\" class=\"headerlink\" title=\"ls -l\"></a><code>ls -l</code></h4><p>列出資料夾中的所有檔案與其權限資訊</p>\n<blockquote>\n<p>ls 最常被使用到的功能還是那個 -l 的選項，為此，很多 distribution 在預設的情況中， 已經將 ll (L 的小寫) 設定成為 ls -l 的意思了！其實，那個功能是 <a href=\"http://linux.vbird.org/linux_basic/0320bash.php\" target=\"_blank\" rel=\"external\">Bash shell</a> 的 <a href=\"http://linux.vbird.org/linux_basic/0320bash.php#alias\" target=\"_blank\" rel=\"external\">alias</a> 功能呢<br>— 鳥哥的 Linux 私房菜</p>\n</blockquote>\n<h3 id=\"chmod\"><a href=\"#chmod\" class=\"headerlink\" title=\"chmod\"></a><code>chmod</code></h3><h4 id=\"修改檔案權限\"><a href=\"#修改檔案權限\" class=\"headerlink\" title=\"修改檔案權限\"></a>修改檔案權限</h4><blockquote>\n<p>sh-4.4$ ls -l<br>total 4<br>-rw-r–r– 1 33581 33581 978 Mar 12 17:30 README.txt<br>-rw-r–r– 1 33581 33581   0 Mar 12 17:32 test<br>sh-4.4$ chmod 777 test<br>sh-4.4$ ls -l<br>total 4<br>-rw-r–r– 1 33581 33581 978 Mar 12 17:30 README.txt<br>-rwxrwxrwx 1 33581 33581   0 Mar 12 17:32 test<br>sh-4.4$ chmod 444 test<br>sh-4.4$ ls -l<br>total 4<br>-rw-r–r– 1 33581 33581 978 Mar 12 17:30 README.txt<br>-r–r–r– 1 33581 33581   0 Mar 12 17:32 test</p>\n</blockquote>\n<h3 id=\"uname\"><a href=\"#uname\" class=\"headerlink\" title=\"uname\"></a><code>uname</code></h3><h4 id=\"顯示系統相關的資訊\"><a href=\"#顯示系統相關的資訊\" class=\"headerlink\" title=\"顯示系統相關的資訊\"></a>顯示系統相關的資訊</h4><blockquote>\n<p>$ uname -a<br>Linux e955582759de 3.10.0-514.26.2.el7.x86_64 #1 SMP Tue Jul 4 15:04:05 UTC<br>2017 x86_64 x86_64 x86_64 GNU/Linux</p>\n<p>選項與參數：<br>-a  ：所有系統相關的資訊，包括底下的資料都會被列出來；<br>-s  ：系統核心名稱<br>-r  ：核心的版本<br>-m  ：本系統的硬體名稱，例如 i686 或 x86_64 等；<br>-p  ：CPU 的類型，與 -m 類似，只是顯示的是 CPU 的類型！<br>-i  ：硬體的平台 (ix86)<br>— 鳥哥的 Linux 私房菜</p>\n</blockquote>\n<h3 id=\"file\"><a href=\"#file\" class=\"headerlink\" title=\"file\"></a><code>file</code></h3><h4 id=\"查詢檔案基本資料-類型\"><a href=\"#查詢檔案基本資料-類型\" class=\"headerlink\" title=\"查詢檔案基本資料(類型)\"></a>查詢檔案基本資料(類型)</h4><blockquote>\n<p>file *</p>\n<p>jazzy:  ASCII text<br>mark:   empty<br>marsen: directory</p>\n</blockquote>\n<h3 id=\"wc\"><a href=\"#wc\" class=\"headerlink\" title=\"wc\"></a><code>wc</code></h3><h4 id=\"顯示檔案資訊\"><a href=\"#顯示檔案資訊\" class=\"headerlink\" title=\"顯示檔案資訊\"></a>顯示檔案資訊</h4><p>行數 字數 字元數 檔名</p>\n<blockquote>\n<p>$ wc jazzy</p>\n<p>3 10 39 jazzy</p>\n</blockquote>\n<h4 id=\"wc-l-filename\"><a href=\"#wc-l-filename\" class=\"headerlink\" title=\"wc -l filename\"></a><code>wc -l filename</code></h4><p>顯示檔案行數資訊</p>\n<h4 id=\"wc-w-filename\"><a href=\"#wc-w-filename\" class=\"headerlink\" title=\"wc -w filename\"></a><code>wc -w filename</code></h4><p>顯示檔案字數資訊</p>\n<h4 id=\"wc-c-filename\"><a href=\"#wc-c-filename\" class=\"headerlink\" title=\"wc -c filename\"></a><code>wc -c filename</code></h4><p>顯示檔案字元數資訊</p>\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a><code>sort</code></h3><h4 id=\"印出排序過後的結果-遞增\"><a href=\"#印出排序過後的結果-遞增\" class=\"headerlink\" title=\"印出排序過後的結果(遞增)\"></a>印出排序過後的結果(遞增)</h4><blockquote>\n<p>$ sort<br>owls<br>pigs<br>dogs<br>cats</p>\n<p>cats<br>dogs<br>owls<br>pigs</p>\n</blockquote>\n<h4 id=\"sort-filename\"><a href=\"#sort-filename\" class=\"headerlink\" title=\"sort filename\"></a><code>sort filename</code></h4><p>印出檔案內排序過後的結果(遞增)</p>\n<h3 id=\"cut\"><a href=\"#cut\" class=\"headerlink\" title=\"cut\"></a><code>cut</code></h3><h4 id=\"切割資料\"><a href=\"#切割資料\" class=\"headerlink\" title=\"切割資料\"></a>切割資料</h4><p>參數:<br>-d 分割字元<br>-f index (從1開始)</p>\n<p>範例</p>\n<blockquote>\n<p>cat &gt; filenames<br>Name-Sport-Age<br>Roger-Tennis-30<br>Nadal-Tennis-25<br>Tiger-Golf-37<br>Michael-Baseball-49</p>\n<p>$ cut -d”-“ -f 1,3 filenames<br>Name-Age<br>Roger-30<br>Nadal-25<br>Tiger-37<br>Michael-49</p>\n</blockquote>\n<h3 id=\"dd\"><a href=\"#dd\" class=\"headerlink\" title=\"dd\"></a><code>dd</code></h3><h4 id=\"資料處理、拷貝、備份、轉碼-更多\"><a href=\"#資料處理、拷貝、備份、轉碼-更多\" class=\"headerlink\" title=\"資料處理、拷貝、備份、轉碼;更多\"></a>資料處理、拷貝、備份、轉碼;<a href=\"https://blog.gtwang.org/linux/dd-command-examples/\" target=\"_blank\" rel=\"external\">更多</a></h4><blockquote>\n<p>$ cat &gt; infile<br>this is the input file<br>$ cat infile<br>this is the input file</p>\n<p>$ dd if=infile of=outfile conv=ucase<br>0+1 records in<br>0+1 records out<br>23 bytes copied, 6.6972e-05 s, 343 kB/s<br>$ cat outfile<br>THIS IS THE INPUT FILE </p>\n</blockquote>\n<h3 id=\"man\"><a href=\"#man\" class=\"headerlink\" title=\"man\"></a><code>man</code></h3><h4 id=\"查詢其它指令用法\"><a href=\"#查詢其它指令用法\" class=\"headerlink\" title=\"查詢其它指令用法\"></a>查詢其它指令用法</h4><blockquote>\n<p>$ man ls<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">LS(1)\tUser Commands  LS(1)</div><div class=\"line\">NAME\tls - list directory contents</div><div class=\"line\">SYNOPSIS\tls [OPTION]... [FILE]...</div><div class=\"line\"></div><div class=\"line\">DESCRIPTION</div><div class=\"line\">       List  information  about the FILEs (the current directory by default).  </div><div class=\"line\">\t   Sort entries alphabetically if none of</div><div class=\"line\">       -cftuvSUX nor --sort is specified.</div><div class=\"line\"></div><div class=\"line\">       Mandatory arguments to long options are mandatory for short options too.</div><div class=\"line\">       -a, --all</div><div class=\"line\">              do not ignore entries starting with .</div><div class=\"line\"></div><div class=\"line\">       -A, --almost-all</div><div class=\"line\">              do not list implied . and ..</div><div class=\"line\"></div><div class=\"line\">       --author</div><div class=\"line\">              with -l, print the author of each file</div><div class=\"line\"></div><div class=\"line\">       -b, --escape</div><div class=\"line\">              print C-style escapes for nongraphic characters</div><div class=\"line\"> Manual page ls(1) line 1 (press h for help or q to quit)</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>按<code>h</code>看更多訊息</p>\n<blockquote>\n<p>$ man ls<br>h</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">                   SUMMARY OF LESS COMMANDS</div><div class=\"line\"></div><div class=\"line\">      Commands marked with * may be preceded by a number, N.</div><div class=\"line\">      Notes in parentheses indicate the behavior if N is given.</div><div class=\"line\"></div><div class=\"line\">  h  H                 Display this help.</div><div class=\"line\">  q  :q  Q  :Q  ZZ     Exit.</div><div class=\"line\"> ---------------------------------------------------------------------------</div><div class=\"line\"></div><div class=\"line\">                           MOVING</div><div class=\"line\"></div><div class=\"line\">  e  ^E  j  ^N  CR  *  Forward  one line   (or N lines).</div><div class=\"line\">  y  ^Y  k  ^K  ^P  *  Backward one line   (or N lines).</div><div class=\"line\">  f  ^F  ^V  SPACE  *  Forward  one window (or N lines).</div><div class=\"line\">  b  ^B  ESC-v      *  Backward one window (or N lines).</div><div class=\"line\">  z                 *  Forward  one window (and set window to N).</div><div class=\"line\">  w                 *  Backward one window (and set window to N).</div><div class=\"line\">  ESC-SPACE         *  Forward  one window, but don&apos;t stop at end-of-file.</div><div class=\"line\">  d  ^D             *  Forward  one half-window (and set half-window to N).</div><div class=\"line\">  u  ^U             *  Backward one half-window (and set half-window to N).</div><div class=\"line\">  ESC-)  RightArrow *  Left  one half screen width (or N positions).</div><div class=\"line\">  ESC-(  LeftArrow  *  Right one half screen width (or N positions).</div><div class=\"line\">  F                    Forward forever; like &quot;tail -f&quot;.</div><div class=\"line\">  r  ^R  ^L            Repaint screen.</div><div class=\"line\">HELP -- Press RETURN for more, or q when done</div></pre></td></tr></table></figure>\n<p>按<code>q</code>退出查詢畫面</p>\n<h3 id=\"banner\"><a href=\"#banner\" class=\"headerlink\" title=\"banner\"></a><code>banner</code></h3><h4 id=\"輸出用-組成的大形文字\"><a href=\"#輸出用-組成的大形文字\" class=\"headerlink\" title=\"輸出用#組成的大形文字\"></a>輸出用#組成的大形文字</h4><p>實測未出現,上網查了一下banner好像有蠻多不同的類型可以安裝?</p>\n<h3 id=\"compress\"><a href=\"#compress\" class=\"headerlink\" title=\"compress\"></a><code>compress</code></h3><h4 id=\"壓縮檔案\"><a href=\"#壓縮檔案\" class=\"headerlink\" title=\"壓縮檔案\"></a>壓縮檔案</h4><h3 id=\"zcat\"><a href=\"#zcat\" class=\"headerlink\" title=\"zcat\"></a><code>zcat</code></h3><h4 id=\"讀取壓縮檔案\"><a href=\"#讀取壓縮檔案\" class=\"headerlink\" title=\"讀取壓縮檔案\"></a>讀取壓縮檔案</h4><h3 id=\"uncompress\"><a href=\"#uncompress\" class=\"headerlink\" title=\"uncompress\"></a><code>uncompress</code></h3><h4 id=\"解壓縮檔案\"><a href=\"#解壓縮檔案\" class=\"headerlink\" title=\"解壓縮檔案\"></a>解壓縮檔案</h4><blockquote>\n<p>compress 已經退流行了。為了支援 windows 常見的 zip，其實 Linux 也早就有 zip 指令了！ gzip 是由 <a href=\"http://www.gnu.org/\" target=\"_blank\" rel=\"external\">GNU 計畫</a>所開發出來的壓縮指令，該指令已經取代了 compress 。<br>— 鳥哥的 Linux 私房菜</p>\n</blockquote>\n<h3 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h3><p>以上是一些基本的 Linux Command ,<br>下一篇,我們會建立.sh檔,將 Linux Command 依照指定的順序執行<br>並使用 <code>sh</code> 命令執行<br>用以完成一些更進階的工作. </p>\n<p>(more..)</p>\n"},{"title":"[實作筆記]重灌開發環境","date":"2018-04-17T03:34:51.000Z","_content":"\n## 1.Typescript 踩雷\n\n#### 問題: \nvisual studio 預設會安裝 typescript 2.6\n專案使用 typescript 2.3 , 因為暫時無法升級到2.6以上的版本\n會導致專案無法編譯成功\n#### 解決步驟\n1. 在專案目錄執行 `npm i` 重新安裝相關module\n2. complie 後發現 `node_modules/@types` 中有檔案無法成功編譯\n3. 移除 `node_modules/@types` 整個資料夾\n4. 重新 complie 後仍會無法成功\n5. 移除 `C:\\Program Files (x86)\\Microsoft SDKs\\TypeScript\\2.6` (非必要,好像要看vs預設載入的版本為何?)\n\n## 2.多語系dll衝突\n1. 清空`bin`資料夾\n2. 清空 `c:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Temporary ASP.NET Files\\`資料夾\n3. 重建前台專案\n\n## 3.Chocolatey\n```shell=\n choco install googlechrome -y\n choco install dropbox -y\n choco install evernote -y\n\n choco install git -y\n choco install nodejs -y\n choco install putty -y\n choco install visualstudiocode -y\n\n choco install winmerge -y\n choco install slack -y\n choco install linqpad -y\n choco install 7zip -y\n  \n choco install gitkraken -y\n #choco install sourcetree -y\n```","source":"_posts/2018/new_pc_install.md","raw":"---\ntitle: \"[實作筆記]重灌開發環境\"\ndate: 2018/04/17 11:34:51\n---\n\n## 1.Typescript 踩雷\n\n#### 問題: \nvisual studio 預設會安裝 typescript 2.6\n專案使用 typescript 2.3 , 因為暫時無法升級到2.6以上的版本\n會導致專案無法編譯成功\n#### 解決步驟\n1. 在專案目錄執行 `npm i` 重新安裝相關module\n2. complie 後發現 `node_modules/@types` 中有檔案無法成功編譯\n3. 移除 `node_modules/@types` 整個資料夾\n4. 重新 complie 後仍會無法成功\n5. 移除 `C:\\Program Files (x86)\\Microsoft SDKs\\TypeScript\\2.6` (非必要,好像要看vs預設載入的版本為何?)\n\n## 2.多語系dll衝突\n1. 清空`bin`資料夾\n2. 清空 `c:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Temporary ASP.NET Files\\`資料夾\n3. 重建前台專案\n\n## 3.Chocolatey\n```shell=\n choco install googlechrome -y\n choco install dropbox -y\n choco install evernote -y\n\n choco install git -y\n choco install nodejs -y\n choco install putty -y\n choco install visualstudiocode -y\n\n choco install winmerge -y\n choco install slack -y\n choco install linqpad -y\n choco install 7zip -y\n  \n choco install gitkraken -y\n #choco install sourcetree -y\n```","slug":"2018/new_pc_install","published":1,"updated":"2018-05-02T06:33:06.797Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivygs005jyk5571p3kwju","content":"<h2 id=\"1-Typescript-踩雷\"><a href=\"#1-Typescript-踩雷\" class=\"headerlink\" title=\"1.Typescript 踩雷\"></a>1.Typescript 踩雷</h2><h4 id=\"問題\"><a href=\"#問題\" class=\"headerlink\" title=\"問題:\"></a>問題:</h4><p>visual studio 預設會安裝 typescript 2.6<br>專案使用 typescript 2.3 , 因為暫時無法升級到2.6以上的版本<br>會導致專案無法編譯成功</p>\n<h4 id=\"解決步驟\"><a href=\"#解決步驟\" class=\"headerlink\" title=\"解決步驟\"></a>解決步驟</h4><ol>\n<li>在專案目錄執行 <code>npm i</code> 重新安裝相關module</li>\n<li>complie 後發現 <code>node_modules/@types</code> 中有檔案無法成功編譯</li>\n<li>移除 <code>node_modules/@types</code> 整個資料夾</li>\n<li>重新 complie 後仍會無法成功</li>\n<li>移除 <code>C:\\Program Files (x86)\\Microsoft SDKs\\TypeScript\\2.6</code> (非必要,好像要看vs預設載入的版本為何?)</li>\n</ol>\n<h2 id=\"2-多語系dll衝突\"><a href=\"#2-多語系dll衝突\" class=\"headerlink\" title=\"2.多語系dll衝突\"></a>2.多語系dll衝突</h2><ol>\n<li>清空<code>bin</code>資料夾</li>\n<li>清空 <code>c:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Temporary ASP.NET Files\\</code>資料夾</li>\n<li>重建前台專案</li>\n</ol>\n<h2 id=\"3-Chocolatey\"><a href=\"#3-Chocolatey\" class=\"headerlink\" title=\"3.Chocolatey\"></a>3.Chocolatey</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">choco install googlechrome -y</div><div class=\"line\">choco install dropbox -y</div><div class=\"line\">choco install evernote -y</div><div class=\"line\"></div><div class=\"line\">choco install git -y</div><div class=\"line\">choco install nodejs -y</div><div class=\"line\">choco install putty -y</div><div class=\"line\">choco install visualstudiocode -y</div><div class=\"line\"></div><div class=\"line\">choco install winmerge -y</div><div class=\"line\">choco install slack -y</div><div class=\"line\">choco install linqpad -y</div><div class=\"line\">choco install 7zip -y</div><div class=\"line\"> </div><div class=\"line\">choco install gitkraken -y</div><div class=\"line\">#choco install sourcetree -y</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Typescript-踩雷\"><a href=\"#1-Typescript-踩雷\" class=\"headerlink\" title=\"1.Typescript 踩雷\"></a>1.Typescript 踩雷</h2><h4 id=\"問題\"><a href=\"#問題\" class=\"headerlink\" title=\"問題:\"></a>問題:</h4><p>visual studio 預設會安裝 typescript 2.6<br>專案使用 typescript 2.3 , 因為暫時無法升級到2.6以上的版本<br>會導致專案無法編譯成功</p>\n<h4 id=\"解決步驟\"><a href=\"#解決步驟\" class=\"headerlink\" title=\"解決步驟\"></a>解決步驟</h4><ol>\n<li>在專案目錄執行 <code>npm i</code> 重新安裝相關module</li>\n<li>complie 後發現 <code>node_modules/@types</code> 中有檔案無法成功編譯</li>\n<li>移除 <code>node_modules/@types</code> 整個資料夾</li>\n<li>重新 complie 後仍會無法成功</li>\n<li>移除 <code>C:\\Program Files (x86)\\Microsoft SDKs\\TypeScript\\2.6</code> (非必要,好像要看vs預設載入的版本為何?)</li>\n</ol>\n<h2 id=\"2-多語系dll衝突\"><a href=\"#2-多語系dll衝突\" class=\"headerlink\" title=\"2.多語系dll衝突\"></a>2.多語系dll衝突</h2><ol>\n<li>清空<code>bin</code>資料夾</li>\n<li>清空 <code>c:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Temporary ASP.NET Files\\</code>資料夾</li>\n<li>重建前台專案</li>\n</ol>\n<h2 id=\"3-Chocolatey\"><a href=\"#3-Chocolatey\" class=\"headerlink\" title=\"3.Chocolatey\"></a>3.Chocolatey</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">choco install googlechrome -y</div><div class=\"line\">choco install dropbox -y</div><div class=\"line\">choco install evernote -y</div><div class=\"line\"></div><div class=\"line\">choco install git -y</div><div class=\"line\">choco install nodejs -y</div><div class=\"line\">choco install putty -y</div><div class=\"line\">choco install visualstudiocode -y</div><div class=\"line\"></div><div class=\"line\">choco install winmerge -y</div><div class=\"line\">choco install slack -y</div><div class=\"line\">choco install linqpad -y</div><div class=\"line\">choco install 7zip -y</div><div class=\"line\"> </div><div class=\"line\">choco install gitkraken -y</div><div class=\"line\">#choco install sourcetree -y</div></pre></td></tr></table></figure>"},{"title":"[學習筆記]Linux 語法學習筆記 二","date":"2018-04-05T07:53:23.000Z","_content":"\n\n[上一篇](https://blog.marsen.me/2018/03/26/2018/linux_command_1/)我們學會一些基本 linux command,  \n接下來我們將介紹更多的命令並組合它們到 shell script.  \n讓 script 幫助我們完成一些事, 就像魔法一般, 開始囉.  \n\n## 補充指令\n\n### `vim`\n#### 開啟 vim 編輯器\n\n### `echo`\n#### 印出文字\n> $ echo \"text\"\ntext\n\n#### 印出變數 `echo $*`\n\n#### 印出PID (Process ID) `echo $$`\n\n\n### `set`\n#### 設定變數\n>$ set good morning marsen\n\n補充:使用 `echo` 印出變數,**從1開始**  \n`$*` 指所有變數\n\n>$ echo $1\n>good\n>$ echo $2\n>morning\n>$ echo $3\n>marsen\n>$ echo $*\n>good morning marsen \n\n#### 進階使用 backticks 執行 `cat` Command\n>$ cat > testfile\nhello world\n^C                               \nsh-4.4$ set `cat testfile`\nsh-4.4$ echo $*\nhello world\n\n\n## 範例\n\n### Hello World\n1. 建立檔案\n> $ cat > helloworld.sh\n2. 編輯檔案\n> $ vim helloworld.sh\n```shell\n#say hello\necho \"hello world\"\n```\n3. 執行檔案\n> $ sh helloworld.sh\n> hello world\n\n### 變數 variable\n1. 大小寫有分\n2. 使用 `read` 讀取 input 到變數中\n3. 使用 `$`+變數名呼叫變數\n\nsample:\n```shell\n# this is a shell sample\necho \"who are you?\"\nread name\necho \"Hi, $name nice to see you.\"\n```\nexecuted:\n\n>$ sh whoareyou.sh\nwho are you?\nMark\nHi, Mark nice to see you.\n\n### 互動式重新命名檔案\n\nsample:\n```shell\n# this is a shell sample\necho \"keyin a filename\"\nread name\nmv $1 $name\necho $name\"\n```\n\n>$ sh rename.sh file1\n>keyin a filename\n>newfile\n>newfile\n\n### 其它\n1. 額外的 vim 問題排解 `E348: No string under cursor` 表示未輸入 i 進入 `Insert` mode\n\t- ESC + : , 輸入 w filename (以filename保存)\n\t- ESC + : , 輸入 wq (存儲並離開vim)\n\t- ESC + : , 輸入 q! (不存儲並離開vim)\n\n2. 「**`**」 Backquote 或 backticks \n\n## 參考\n1. [Unix Terminal Online](https://www.tutorialspoint.com/unix_terminal_online.php)\n2. [離開Vim的~~100種~~方法](https://itsfoss.com/how-to-exit-vim/)\n3. [鳥哥的 Linux 私房菜---認識與學習BASH](http://linux.vbird.org/linux_basic/0320bash.php)\n\n(fin)","source":"_posts/2018/linux_command_2.md","raw":"---\ntitle: \"[學習筆記]Linux 語法學習筆記 二\"\ndate: 2018/04/05 15:53:23\ntag:\n  - Unix\n  - Linux\n  - Shell\n---\n\n\n[上一篇](https://blog.marsen.me/2018/03/26/2018/linux_command_1/)我們學會一些基本 linux command,  \n接下來我們將介紹更多的命令並組合它們到 shell script.  \n讓 script 幫助我們完成一些事, 就像魔法一般, 開始囉.  \n\n## 補充指令\n\n### `vim`\n#### 開啟 vim 編輯器\n\n### `echo`\n#### 印出文字\n> $ echo \"text\"\ntext\n\n#### 印出變數 `echo $*`\n\n#### 印出PID (Process ID) `echo $$`\n\n\n### `set`\n#### 設定變數\n>$ set good morning marsen\n\n補充:使用 `echo` 印出變數,**從1開始**  \n`$*` 指所有變數\n\n>$ echo $1\n>good\n>$ echo $2\n>morning\n>$ echo $3\n>marsen\n>$ echo $*\n>good morning marsen \n\n#### 進階使用 backticks 執行 `cat` Command\n>$ cat > testfile\nhello world\n^C                               \nsh-4.4$ set `cat testfile`\nsh-4.4$ echo $*\nhello world\n\n\n## 範例\n\n### Hello World\n1. 建立檔案\n> $ cat > helloworld.sh\n2. 編輯檔案\n> $ vim helloworld.sh\n```shell\n#say hello\necho \"hello world\"\n```\n3. 執行檔案\n> $ sh helloworld.sh\n> hello world\n\n### 變數 variable\n1. 大小寫有分\n2. 使用 `read` 讀取 input 到變數中\n3. 使用 `$`+變數名呼叫變數\n\nsample:\n```shell\n# this is a shell sample\necho \"who are you?\"\nread name\necho \"Hi, $name nice to see you.\"\n```\nexecuted:\n\n>$ sh whoareyou.sh\nwho are you?\nMark\nHi, Mark nice to see you.\n\n### 互動式重新命名檔案\n\nsample:\n```shell\n# this is a shell sample\necho \"keyin a filename\"\nread name\nmv $1 $name\necho $name\"\n```\n\n>$ sh rename.sh file1\n>keyin a filename\n>newfile\n>newfile\n\n### 其它\n1. 額外的 vim 問題排解 `E348: No string under cursor` 表示未輸入 i 進入 `Insert` mode\n\t- ESC + : , 輸入 w filename (以filename保存)\n\t- ESC + : , 輸入 wq (存儲並離開vim)\n\t- ESC + : , 輸入 q! (不存儲並離開vim)\n\n2. 「**`**」 Backquote 或 backticks \n\n## 參考\n1. [Unix Terminal Online](https://www.tutorialspoint.com/unix_terminal_online.php)\n2. [離開Vim的~~100種~~方法](https://itsfoss.com/how-to-exit-vim/)\n3. [鳥哥的 Linux 私房菜---認識與學習BASH](http://linux.vbird.org/linux_basic/0320bash.php)\n\n(fin)","slug":"2018/linux_command_2","published":1,"updated":"2018-04-05T08:20:20.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivygu005kyk55ybgmkvf8","content":"<p><a href=\"https://blog.marsen.me/2018/03/26/2018/linux_command_1/\">上一篇</a>我們學會一些基本 linux command,<br>接下來我們將介紹更多的命令並組合它們到 shell script.<br>讓 script 幫助我們完成一些事, 就像魔法一般, 開始囉.  </p>\n<h2 id=\"補充指令\"><a href=\"#補充指令\" class=\"headerlink\" title=\"補充指令\"></a>補充指令</h2><h3 id=\"vim\"><a href=\"#vim\" class=\"headerlink\" title=\"vim\"></a><code>vim</code></h3><h4 id=\"開啟-vim-編輯器\"><a href=\"#開啟-vim-編輯器\" class=\"headerlink\" title=\"開啟 vim 編輯器\"></a>開啟 vim 編輯器</h4><h3 id=\"echo\"><a href=\"#echo\" class=\"headerlink\" title=\"echo\"></a><code>echo</code></h3><h4 id=\"印出文字\"><a href=\"#印出文字\" class=\"headerlink\" title=\"印出文字\"></a>印出文字</h4><blockquote>\n<p>$ echo “text”<br>text</p>\n</blockquote>\n<h4 id=\"印出變數-echo\"><a href=\"#印出變數-echo\" class=\"headerlink\" title=\"印出變數 echo $*\"></a>印出變數 <code>echo $*</code></h4><h4 id=\"印出PID-Process-ID-echo\"><a href=\"#印出PID-Process-ID-echo\" class=\"headerlink\" title=\"印出PID (Process ID) echo $$\"></a>印出PID (Process ID) <code>echo $$</code></h4><h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a><code>set</code></h3><h4 id=\"設定變數\"><a href=\"#設定變數\" class=\"headerlink\" title=\"設定變數\"></a>設定變數</h4><blockquote>\n<p>$ set good morning marsen</p>\n</blockquote>\n<p>補充:使用 <code>echo</code> 印出變數,<strong>從1開始</strong><br><code>$*</code> 指所有變數</p>\n<blockquote>\n<p>$ echo $1<br>good<br>$ echo $2<br>morning<br>$ echo $3<br>marsen<br>$ echo $*<br>good morning marsen </p>\n</blockquote>\n<h4 id=\"進階使用-backticks-執行-cat-Command\"><a href=\"#進階使用-backticks-執行-cat-Command\" class=\"headerlink\" title=\"進階使用 backticks 執行 cat Command\"></a>進階使用 backticks 執行 <code>cat</code> Command</h4><blockquote>\n<p>$ cat &gt; testfile<br>hello world<br>^C<br>sh-4.4$ set <code>cat testfile</code><br>sh-4.4$ echo $*<br>hello world</p>\n</blockquote>\n<h2 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h2><h3 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h3><ol>\n<li>建立檔案<blockquote>\n<p>$ cat &gt; helloworld.sh</p>\n</blockquote>\n</li>\n<li><p>編輯檔案</p>\n<blockquote>\n<p>$ vim helloworld.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#say hello</div><div class=\"line\">echo &quot;hello world&quot;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>執行檔案</p>\n<blockquote>\n<p>$ sh helloworld.sh<br>hello world</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"變數-variable\"><a href=\"#變數-variable\" class=\"headerlink\" title=\"變數 variable\"></a>變數 variable</h3><ol>\n<li>大小寫有分</li>\n<li>使用 <code>read</code> 讀取 input 到變數中</li>\n<li>使用 <code>$</code>+變數名呼叫變數</li>\n</ol>\n<p>sample:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># this is a shell sample</div><div class=\"line\">echo &quot;who are you?&quot;</div><div class=\"line\">read name</div><div class=\"line\">echo &quot;Hi, $name nice to see you.&quot;</div></pre></td></tr></table></figure></p>\n<p>executed:</p>\n<blockquote>\n<p>$ sh whoareyou.sh<br>who are you?<br>Mark<br>Hi, Mark nice to see you.</p>\n</blockquote>\n<h3 id=\"互動式重新命名檔案\"><a href=\"#互動式重新命名檔案\" class=\"headerlink\" title=\"互動式重新命名檔案\"></a>互動式重新命名檔案</h3><p>sample:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"># this is a shell sample</div><div class=\"line\">echo &quot;keyin a filename&quot;</div><div class=\"line\">read name</div><div class=\"line\">mv $1 $name</div><div class=\"line\">echo $name&quot;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>$ sh rename.sh file1<br>keyin a filename<br>newfile<br>newfile</p>\n</blockquote>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><ol>\n<li><p>額外的 vim 問題排解 <code>E348: No string under cursor</code> 表示未輸入 i 進入 <code>Insert</code> mode</p>\n<ul>\n<li>ESC + : , 輸入 w filename (以filename保存)</li>\n<li>ESC + : , 輸入 wq (存儲並離開vim)</li>\n<li>ESC + : , 輸入 q! (不存儲並離開vim)</li>\n</ul>\n</li>\n<li><p>「<strong>`</strong>」 Backquote 或 backticks </p>\n</li>\n</ol>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ol>\n<li><a href=\"https://www.tutorialspoint.com/unix_terminal_online.php\" target=\"_blank\" rel=\"external\">Unix Terminal Online</a></li>\n<li><a href=\"https://itsfoss.com/how-to-exit-vim/\" target=\"_blank\" rel=\"external\">離開Vim的<del>100種</del>方法</a></li>\n<li><a href=\"http://linux.vbird.org/linux_basic/0320bash.php\" target=\"_blank\" rel=\"external\">鳥哥的 Linux 私房菜—認識與學習BASH</a></li>\n</ol>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://blog.marsen.me/2018/03/26/2018/linux_command_1/\">上一篇</a>我們學會一些基本 linux command,<br>接下來我們將介紹更多的命令並組合它們到 shell script.<br>讓 script 幫助我們完成一些事, 就像魔法一般, 開始囉.  </p>\n<h2 id=\"補充指令\"><a href=\"#補充指令\" class=\"headerlink\" title=\"補充指令\"></a>補充指令</h2><h3 id=\"vim\"><a href=\"#vim\" class=\"headerlink\" title=\"vim\"></a><code>vim</code></h3><h4 id=\"開啟-vim-編輯器\"><a href=\"#開啟-vim-編輯器\" class=\"headerlink\" title=\"開啟 vim 編輯器\"></a>開啟 vim 編輯器</h4><h3 id=\"echo\"><a href=\"#echo\" class=\"headerlink\" title=\"echo\"></a><code>echo</code></h3><h4 id=\"印出文字\"><a href=\"#印出文字\" class=\"headerlink\" title=\"印出文字\"></a>印出文字</h4><blockquote>\n<p>$ echo “text”<br>text</p>\n</blockquote>\n<h4 id=\"印出變數-echo\"><a href=\"#印出變數-echo\" class=\"headerlink\" title=\"印出變數 echo $*\"></a>印出變數 <code>echo $*</code></h4><h4 id=\"印出PID-Process-ID-echo\"><a href=\"#印出PID-Process-ID-echo\" class=\"headerlink\" title=\"印出PID (Process ID) echo $$\"></a>印出PID (Process ID) <code>echo $$</code></h4><h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a><code>set</code></h3><h4 id=\"設定變數\"><a href=\"#設定變數\" class=\"headerlink\" title=\"設定變數\"></a>設定變數</h4><blockquote>\n<p>$ set good morning marsen</p>\n</blockquote>\n<p>補充:使用 <code>echo</code> 印出變數,<strong>從1開始</strong><br><code>$*</code> 指所有變數</p>\n<blockquote>\n<p>$ echo $1<br>good<br>$ echo $2<br>morning<br>$ echo $3<br>marsen<br>$ echo $*<br>good morning marsen </p>\n</blockquote>\n<h4 id=\"進階使用-backticks-執行-cat-Command\"><a href=\"#進階使用-backticks-執行-cat-Command\" class=\"headerlink\" title=\"進階使用 backticks 執行 cat Command\"></a>進階使用 backticks 執行 <code>cat</code> Command</h4><blockquote>\n<p>$ cat &gt; testfile<br>hello world<br>^C<br>sh-4.4$ set <code>cat testfile</code><br>sh-4.4$ echo $*<br>hello world</p>\n</blockquote>\n<h2 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h2><h3 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h3><ol>\n<li>建立檔案<blockquote>\n<p>$ cat &gt; helloworld.sh</p>\n</blockquote>\n</li>\n<li><p>編輯檔案</p>\n<blockquote>\n<p>$ vim helloworld.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#say hello</div><div class=\"line\">echo &quot;hello world&quot;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>執行檔案</p>\n<blockquote>\n<p>$ sh helloworld.sh<br>hello world</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"變數-variable\"><a href=\"#變數-variable\" class=\"headerlink\" title=\"變數 variable\"></a>變數 variable</h3><ol>\n<li>大小寫有分</li>\n<li>使用 <code>read</code> 讀取 input 到變數中</li>\n<li>使用 <code>$</code>+變數名呼叫變數</li>\n</ol>\n<p>sample:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># this is a shell sample</div><div class=\"line\">echo &quot;who are you?&quot;</div><div class=\"line\">read name</div><div class=\"line\">echo &quot;Hi, $name nice to see you.&quot;</div></pre></td></tr></table></figure></p>\n<p>executed:</p>\n<blockquote>\n<p>$ sh whoareyou.sh<br>who are you?<br>Mark<br>Hi, Mark nice to see you.</p>\n</blockquote>\n<h3 id=\"互動式重新命名檔案\"><a href=\"#互動式重新命名檔案\" class=\"headerlink\" title=\"互動式重新命名檔案\"></a>互動式重新命名檔案</h3><p>sample:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"># this is a shell sample</div><div class=\"line\">echo &quot;keyin a filename&quot;</div><div class=\"line\">read name</div><div class=\"line\">mv $1 $name</div><div class=\"line\">echo $name&quot;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>$ sh rename.sh file1<br>keyin a filename<br>newfile<br>newfile</p>\n</blockquote>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><ol>\n<li><p>額外的 vim 問題排解 <code>E348: No string under cursor</code> 表示未輸入 i 進入 <code>Insert</code> mode</p>\n<ul>\n<li>ESC + : , 輸入 w filename (以filename保存)</li>\n<li>ESC + : , 輸入 wq (存儲並離開vim)</li>\n<li>ESC + : , 輸入 q! (不存儲並離開vim)</li>\n</ul>\n</li>\n<li><p>「<strong>`</strong>」 Backquote 或 backticks </p>\n</li>\n</ol>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ol>\n<li><a href=\"https://www.tutorialspoint.com/unix_terminal_online.php\" target=\"_blank\" rel=\"external\">Unix Terminal Online</a></li>\n<li><a href=\"https://itsfoss.com/how-to-exit-vim/\" target=\"_blank\" rel=\"external\">離開Vim的<del>100種</del>方法</a></li>\n<li><a href=\"http://linux.vbird.org/linux_basic/0320bash.php\" target=\"_blank\" rel=\"external\">鳥哥的 Linux 私房菜—認識與學習BASH</a></li>\n</ol>\n<p>(fin)</p>\n"},{"title":"[活動筆記]變異測試 - 一種改進測試和代碼的 「新」 方法","date":"2018-03-19T17:44:00.000Z","_content":"\n## 應該知道的事\n- 範例使用Java\n- 這場活動使用人肉找尋變異\n- 實務上應使用工具\n- 但是不能完全相信工具\n- [活動聯結](https://www.facebook.com/events/966762773499308/)\n- 講師是 Odd-e 的姚若舟\n- [簡報preview版](http://boolan.com/lecture/1000001089)\n\n## 什麼是變異 ?\n\n### 前言\n想像一下產品(`Prodction`)就是你的身體,  \n我們可以透過健康檢查(`Unit Test`);  \n檢查你的身體有沒有異狀 ?  \n\n但是檢查真的可靠嗎 ?  \n比如說一般的流感的快篩只有50~60%的準確率,  \n我們的測試也無法達到100%準確率(這裡不是指覆蓋率喔).  \n如何抓到測試抓不到的**漏網之魚**就是變異測試的目的.  \n\n我們透過讓 Prodction 產生變異(Mutation)  \n來確認我們的 Unit Test 是否可靠.\n\n>題外話,當大流行的時候會跳過快篩節省醫療資源,  \n因為可能有一半(50%)的患者都是流感,  \n而快篩準確率也只有50%,加上時間及醫材成本,  \n不如直接開克流感能有效抑止疫情\n\n\n\n### 變異測試(Mutation Testing)\n變異後導致測試失敗？\n**yes , good**\n應該要失敗,表示你的測試有覆蓋到這個變異\n\n**no , test not covered**\n這表示你的測試並未\n\n### 測試不一定能補捉變異\n比如說 `邊際值` 或是 `隱含的互動`;  \n測試覆蓋率100%也不一定能補捉變異  \n要麼少了test case,  \n要麼多了無意義的代碼  \n看看以下例子  \nex:\n```csharp\nfoo(x,y)\n{\n    //// logic here\n    sideeffct();\n    return z;\n}\n```\n\n反思一下, 測試過了代碼就沒問題 ?  \n不能捉到變異的測試,  \n有發揮它的功能嗎 ?  \n一般來說如果透過 TDD 進行軟體開發,  \n我們的測試應該是會恰巧符合一項 Test Case  \n而如果是先寫代碼再寫測試,  \n將很難通過變異測試(容易產生多餘的代碼)\n\n### 找到變異的幾個方向\n- 邊界條件(`<` => `<=`)\n- 反向條件(`<` => `>`)\n- 移除條件(永真/永偽)\n- 數學\n- 遞增/遞減\n- 常量\n- 返回值\n- 移除代碼\n\n### 先寫代碼再寫測試有問題是很正常的\n\n## Kata-PokerHands 範例\n\n### [原碼(使用java)](https://github.com/JosephYao/Kata-PokerHands)\n\n### 變異實例\n有問題 ,反向測試案例不足\n\n```java\nprivate\tList<Integer> getPairCardRanks(List<Integer> cardRanks) {\n         List<Integer> result = new ArrayList<>();\n         for (int index = 0; index < CARD_COUNT - 1; index++)\n         \tif (isTwoNeighborCardRanksEquals(index, cardRanks))\n         \t\tresult.add(cardRanks.get(index));\n         return result;\n}\n```\n\n有問題 , -1 但是預期中的行為\n```java\nprotected   Integer   getThreeOfAKindCardRank(List<Integer\\> cardRanks) {\n     for (int index = 0; index < CARD_COUNT - 2; index++)\n     \tif (isThreeNeighborCardRanksEquals(index, cardRanks))\n     \t\treturn   cardRanks.get(index);\n     throw   new   IllegalStateException();\n}\n```\n## 其它\n1. 沒有TDD 沒有單元測試,別跑變異測試\n2. 至少要有行級別的覆蓋率(line coverage)\n3. 分支覆蓋(Branch Coverage)好一點 仍不夠\n4. 在需求不變的情況下，再作變異測試\n5. 以變異測試的角度來說,覆蓋率100%是木有用的(testing coverage is useless)\n6. 發現變異怎麼辦？\n\t- 報告(記錄)\n\t- 重現 \n\t- 評估\n\t- 修改 或 補測試\n7. 依靠工具不要相信工具,上一步的評估\nEx: mock 物件會取代互動實際的行為,導致變異測試失敗\n\n\n\n### Tools\n- http://pitest.org\n- https://en.wikipedia.org/wiki/Mutation_testing\n- 使用 Sonarqube with mulations test(應該不用錢)\n- tudou.com/home/yaoruozhou\n\n## 參與者心得\n1. [變異測試 (Mutation Test) — 一種提高測試和代碼質量的 ”新” 方法速記](https://medium.com/@loverjersey/變異測試-mutation-test-一種提高測試和代碼質量的-新-方法速記-35bde79a5c7a)\n\n2. [Test - 變異(Mutation)測試之你的測試到底是寫爽的，還是有效的?](https://dotblogs.com.tw/im_sqz777/2018/03/15/004634)\n\n## 心得\n1. 佩服當天就能寫出文章的人\n2. 變異測試是好上加好的測試\n3. Odd-e 的講師真的很粉棒, 雖然不致到毀三觀 不過眼界大開\n\n\n## 參考\n1. [Mutation Testing(变异测试)](http://www.cnblogs.com/TongWee/p/4505289.html)\n\n(fin)","source":"_posts/2018/mutation_testing.md","raw":"---\ntitle: \"[活動筆記]變異測試 - 一種改進測試和代碼的 「新」 方法\"\ndate: 2018/03/20 01:44:00\ntag:\n  - testing\n  - TDD\n  - unit test\n  - mutation teseting\n---\n\n## 應該知道的事\n- 範例使用Java\n- 這場活動使用人肉找尋變異\n- 實務上應使用工具\n- 但是不能完全相信工具\n- [活動聯結](https://www.facebook.com/events/966762773499308/)\n- 講師是 Odd-e 的姚若舟\n- [簡報preview版](http://boolan.com/lecture/1000001089)\n\n## 什麼是變異 ?\n\n### 前言\n想像一下產品(`Prodction`)就是你的身體,  \n我們可以透過健康檢查(`Unit Test`);  \n檢查你的身體有沒有異狀 ?  \n\n但是檢查真的可靠嗎 ?  \n比如說一般的流感的快篩只有50~60%的準確率,  \n我們的測試也無法達到100%準確率(這裡不是指覆蓋率喔).  \n如何抓到測試抓不到的**漏網之魚**就是變異測試的目的.  \n\n我們透過讓 Prodction 產生變異(Mutation)  \n來確認我們的 Unit Test 是否可靠.\n\n>題外話,當大流行的時候會跳過快篩節省醫療資源,  \n因為可能有一半(50%)的患者都是流感,  \n而快篩準確率也只有50%,加上時間及醫材成本,  \n不如直接開克流感能有效抑止疫情\n\n\n\n### 變異測試(Mutation Testing)\n變異後導致測試失敗？\n**yes , good**\n應該要失敗,表示你的測試有覆蓋到這個變異\n\n**no , test not covered**\n這表示你的測試並未\n\n### 測試不一定能補捉變異\n比如說 `邊際值` 或是 `隱含的互動`;  \n測試覆蓋率100%也不一定能補捉變異  \n要麼少了test case,  \n要麼多了無意義的代碼  \n看看以下例子  \nex:\n```csharp\nfoo(x,y)\n{\n    //// logic here\n    sideeffct();\n    return z;\n}\n```\n\n反思一下, 測試過了代碼就沒問題 ?  \n不能捉到變異的測試,  \n有發揮它的功能嗎 ?  \n一般來說如果透過 TDD 進行軟體開發,  \n我們的測試應該是會恰巧符合一項 Test Case  \n而如果是先寫代碼再寫測試,  \n將很難通過變異測試(容易產生多餘的代碼)\n\n### 找到變異的幾個方向\n- 邊界條件(`<` => `<=`)\n- 反向條件(`<` => `>`)\n- 移除條件(永真/永偽)\n- 數學\n- 遞增/遞減\n- 常量\n- 返回值\n- 移除代碼\n\n### 先寫代碼再寫測試有問題是很正常的\n\n## Kata-PokerHands 範例\n\n### [原碼(使用java)](https://github.com/JosephYao/Kata-PokerHands)\n\n### 變異實例\n有問題 ,反向測試案例不足\n\n```java\nprivate\tList<Integer> getPairCardRanks(List<Integer> cardRanks) {\n         List<Integer> result = new ArrayList<>();\n         for (int index = 0; index < CARD_COUNT - 1; index++)\n         \tif (isTwoNeighborCardRanksEquals(index, cardRanks))\n         \t\tresult.add(cardRanks.get(index));\n         return result;\n}\n```\n\n有問題 , -1 但是預期中的行為\n```java\nprotected   Integer   getThreeOfAKindCardRank(List<Integer\\> cardRanks) {\n     for (int index = 0; index < CARD_COUNT - 2; index++)\n     \tif (isThreeNeighborCardRanksEquals(index, cardRanks))\n     \t\treturn   cardRanks.get(index);\n     throw   new   IllegalStateException();\n}\n```\n## 其它\n1. 沒有TDD 沒有單元測試,別跑變異測試\n2. 至少要有行級別的覆蓋率(line coverage)\n3. 分支覆蓋(Branch Coverage)好一點 仍不夠\n4. 在需求不變的情況下，再作變異測試\n5. 以變異測試的角度來說,覆蓋率100%是木有用的(testing coverage is useless)\n6. 發現變異怎麼辦？\n\t- 報告(記錄)\n\t- 重現 \n\t- 評估\n\t- 修改 或 補測試\n7. 依靠工具不要相信工具,上一步的評估\nEx: mock 物件會取代互動實際的行為,導致變異測試失敗\n\n\n\n### Tools\n- http://pitest.org\n- https://en.wikipedia.org/wiki/Mutation_testing\n- 使用 Sonarqube with mulations test(應該不用錢)\n- tudou.com/home/yaoruozhou\n\n## 參與者心得\n1. [變異測試 (Mutation Test) — 一種提高測試和代碼質量的 ”新” 方法速記](https://medium.com/@loverjersey/變異測試-mutation-test-一種提高測試和代碼質量的-新-方法速記-35bde79a5c7a)\n\n2. [Test - 變異(Mutation)測試之你的測試到底是寫爽的，還是有效的?](https://dotblogs.com.tw/im_sqz777/2018/03/15/004634)\n\n## 心得\n1. 佩服當天就能寫出文章的人\n2. 變異測試是好上加好的測試\n3. Odd-e 的講師真的很粉棒, 雖然不致到毀三觀 不過眼界大開\n\n\n## 參考\n1. [Mutation Testing(变异测试)](http://www.cnblogs.com/TongWee/p/4505289.html)\n\n(fin)","slug":"2018/mutation_testing","published":1,"updated":"2018-03-21T17:19:32.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivygw005nyk551z10ihes","content":"<h2 id=\"應該知道的事\"><a href=\"#應該知道的事\" class=\"headerlink\" title=\"應該知道的事\"></a>應該知道的事</h2><ul>\n<li>範例使用Java</li>\n<li>這場活動使用人肉找尋變異</li>\n<li>實務上應使用工具</li>\n<li>但是不能完全相信工具</li>\n<li><a href=\"https://www.facebook.com/events/966762773499308/\" target=\"_blank\" rel=\"external\">活動聯結</a></li>\n<li>講師是 Odd-e 的姚若舟</li>\n<li><a href=\"http://boolan.com/lecture/1000001089\" target=\"_blank\" rel=\"external\">簡報preview版</a></li>\n</ul>\n<h2 id=\"什麼是變異\"><a href=\"#什麼是變異\" class=\"headerlink\" title=\"什麼是變異 ?\"></a>什麼是變異 ?</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>想像一下產品(<code>Prodction</code>)就是你的身體,<br>我們可以透過健康檢查(<code>Unit Test</code>);<br>檢查你的身體有沒有異狀 ?  </p>\n<p>但是檢查真的可靠嗎 ?<br>比如說一般的流感的快篩只有50~60%的準確率,<br>我們的測試也無法達到100%準確率(這裡不是指覆蓋率喔).<br>如何抓到測試抓不到的<strong>漏網之魚</strong>就是變異測試的目的.  </p>\n<p>我們透過讓 Prodction 產生變異(Mutation)<br>來確認我們的 Unit Test 是否可靠.</p>\n<blockquote>\n<p>題外話,當大流行的時候會跳過快篩節省醫療資源,<br>因為可能有一半(50%)的患者都是流感,<br>而快篩準確率也只有50%,加上時間及醫材成本,<br>不如直接開克流感能有效抑止疫情</p>\n</blockquote>\n<h3 id=\"變異測試-Mutation-Testing\"><a href=\"#變異測試-Mutation-Testing\" class=\"headerlink\" title=\"變異測試(Mutation Testing)\"></a>變異測試(Mutation Testing)</h3><p>變異後導致測試失敗？<br><strong>yes , good</strong><br>應該要失敗,表示你的測試有覆蓋到這個變異</p>\n<p><strong>no , test not covered</strong><br>這表示你的測試並未</p>\n<h3 id=\"測試不一定能補捉變異\"><a href=\"#測試不一定能補捉變異\" class=\"headerlink\" title=\"測試不一定能補捉變異\"></a>測試不一定能補捉變異</h3><p>比如說 <code>邊際值</code> 或是 <code>隱含的互動</code>;<br>測試覆蓋率100%也不一定能補捉變異<br>要麼少了test case,<br>要麼多了無意義的代碼<br>看看以下例子<br>ex:<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">foo(x,y)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span>/ logic here</span></div><div class=\"line\">    sideeffct();</div><div class=\"line\">    <span class=\"keyword\">return</span> z;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>反思一下, 測試過了代碼就沒問題 ?<br>不能捉到變異的測試,<br>有發揮它的功能嗎 ?<br>一般來說如果透過 TDD 進行軟體開發,<br>我們的測試應該是會恰巧符合一項 Test Case<br>而如果是先寫代碼再寫測試,<br>將很難通過變異測試(容易產生多餘的代碼)</p>\n<h3 id=\"找到變異的幾個方向\"><a href=\"#找到變異的幾個方向\" class=\"headerlink\" title=\"找到變異的幾個方向\"></a>找到變異的幾個方向</h3><ul>\n<li>邊界條件(<code>&lt;</code> =&gt; <code>&lt;=</code>)</li>\n<li>反向條件(<code>&lt;</code> =&gt; <code>&gt;</code>)</li>\n<li>移除條件(永真/永偽)</li>\n<li>數學</li>\n<li>遞增/遞減</li>\n<li>常量</li>\n<li>返回值</li>\n<li>移除代碼</li>\n</ul>\n<h3 id=\"先寫代碼再寫測試有問題是很正常的\"><a href=\"#先寫代碼再寫測試有問題是很正常的\" class=\"headerlink\" title=\"先寫代碼再寫測試有問題是很正常的\"></a>先寫代碼再寫測試有問題是很正常的</h3><h2 id=\"Kata-PokerHands-範例\"><a href=\"#Kata-PokerHands-範例\" class=\"headerlink\" title=\"Kata-PokerHands 範例\"></a>Kata-PokerHands 範例</h2><h3 id=\"原碼-使用java\"><a href=\"#原碼-使用java\" class=\"headerlink\" title=\"原碼(使用java)\"></a><a href=\"https://github.com/JosephYao/Kata-PokerHands\" target=\"_blank\" rel=\"external\">原碼(使用java)</a></h3><h3 id=\"變異實例\"><a href=\"#變異實例\" class=\"headerlink\" title=\"變異實例\"></a>變異實例</h3><p>有問題 ,反向測試案例不足</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span>\tList&lt;Integer&gt; <span class=\"title\">getPairCardRanks</span><span class=\"params\">(List&lt;Integer&gt; cardRanks)</span> </span>&#123;</div><div class=\"line\">         List&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; CARD_COUNT - <span class=\"number\">1</span>; index++)</div><div class=\"line\">         \t<span class=\"keyword\">if</span> (isTwoNeighborCardRanksEquals(index, cardRanks))</div><div class=\"line\">         \t\tresult.add(cardRanks.get(index));</div><div class=\"line\">         <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>有問題 , -1 但是預期中的行為<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span>   Integer   <span class=\"title\">getThreeOfAKindCardRank</span><span class=\"params\">(List&lt;Integer\\&gt; cardRanks)</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; CARD_COUNT - <span class=\"number\">2</span>; index++)</div><div class=\"line\">     \t<span class=\"keyword\">if</span> (isThreeNeighborCardRanksEquals(index, cardRanks))</div><div class=\"line\">     \t\t<span class=\"keyword\">return</span>   cardRanks.get(index);</div><div class=\"line\">     <span class=\"keyword\">throw</span>   <span class=\"keyword\">new</span>   IllegalStateException();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><ol>\n<li>沒有TDD 沒有單元測試,別跑變異測試</li>\n<li>至少要有行級別的覆蓋率(line coverage)</li>\n<li>分支覆蓋(Branch Coverage)好一點 仍不夠</li>\n<li>在需求不變的情況下，再作變異測試</li>\n<li>以變異測試的角度來說,覆蓋率100%是木有用的(testing coverage is useless)</li>\n<li>發現變異怎麼辦？<ul>\n<li>報告(記錄)</li>\n<li>重現 </li>\n<li>評估</li>\n<li>修改 或 補測試</li>\n</ul>\n</li>\n<li>依靠工具不要相信工具,上一步的評估<br>Ex: mock 物件會取代互動實際的行為,導致變異測試失敗</li>\n</ol>\n<h3 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h3><ul>\n<li><a href=\"http://pitest.org\" target=\"_blank\" rel=\"external\">http://pitest.org</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Mutation_testing\" target=\"_blank\" rel=\"external\">https://en.wikipedia.org/wiki/Mutation_testing</a></li>\n<li>使用 Sonarqube with mulations test(應該不用錢)</li>\n<li>tudou.com/home/yaoruozhou</li>\n</ul>\n<h2 id=\"參與者心得\"><a href=\"#參與者心得\" class=\"headerlink\" title=\"參與者心得\"></a>參與者心得</h2><ol>\n<li><p><a href=\"https://medium.com/@loverjersey/變異測試-mutation-test-一種提高測試和代碼質量的-新-方法速記-35bde79a5c7a\" target=\"_blank\" rel=\"external\">變異測試 (Mutation Test) — 一種提高測試和代碼質量的 ”新” 方法速記</a></p>\n</li>\n<li><p><a href=\"https://dotblogs.com.tw/im_sqz777/2018/03/15/004634\" target=\"_blank\" rel=\"external\">Test - 變異(Mutation)測試之你的測試到底是寫爽的，還是有效的?</a></p>\n</li>\n</ol>\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><ol>\n<li>佩服當天就能寫出文章的人</li>\n<li>變異測試是好上加好的測試</li>\n<li>Odd-e 的講師真的很粉棒, 雖然不致到毀三觀 不過眼界大開</li>\n</ol>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ol>\n<li><a href=\"http://www.cnblogs.com/TongWee/p/4505289.html\" target=\"_blank\" rel=\"external\">Mutation Testing(变异测试)</a></li>\n</ol>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"應該知道的事\"><a href=\"#應該知道的事\" class=\"headerlink\" title=\"應該知道的事\"></a>應該知道的事</h2><ul>\n<li>範例使用Java</li>\n<li>這場活動使用人肉找尋變異</li>\n<li>實務上應使用工具</li>\n<li>但是不能完全相信工具</li>\n<li><a href=\"https://www.facebook.com/events/966762773499308/\" target=\"_blank\" rel=\"external\">活動聯結</a></li>\n<li>講師是 Odd-e 的姚若舟</li>\n<li><a href=\"http://boolan.com/lecture/1000001089\" target=\"_blank\" rel=\"external\">簡報preview版</a></li>\n</ul>\n<h2 id=\"什麼是變異\"><a href=\"#什麼是變異\" class=\"headerlink\" title=\"什麼是變異 ?\"></a>什麼是變異 ?</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>想像一下產品(<code>Prodction</code>)就是你的身體,<br>我們可以透過健康檢查(<code>Unit Test</code>);<br>檢查你的身體有沒有異狀 ?  </p>\n<p>但是檢查真的可靠嗎 ?<br>比如說一般的流感的快篩只有50~60%的準確率,<br>我們的測試也無法達到100%準確率(這裡不是指覆蓋率喔).<br>如何抓到測試抓不到的<strong>漏網之魚</strong>就是變異測試的目的.  </p>\n<p>我們透過讓 Prodction 產生變異(Mutation)<br>來確認我們的 Unit Test 是否可靠.</p>\n<blockquote>\n<p>題外話,當大流行的時候會跳過快篩節省醫療資源,<br>因為可能有一半(50%)的患者都是流感,<br>而快篩準確率也只有50%,加上時間及醫材成本,<br>不如直接開克流感能有效抑止疫情</p>\n</blockquote>\n<h3 id=\"變異測試-Mutation-Testing\"><a href=\"#變異測試-Mutation-Testing\" class=\"headerlink\" title=\"變異測試(Mutation Testing)\"></a>變異測試(Mutation Testing)</h3><p>變異後導致測試失敗？<br><strong>yes , good</strong><br>應該要失敗,表示你的測試有覆蓋到這個變異</p>\n<p><strong>no , test not covered</strong><br>這表示你的測試並未</p>\n<h3 id=\"測試不一定能補捉變異\"><a href=\"#測試不一定能補捉變異\" class=\"headerlink\" title=\"測試不一定能補捉變異\"></a>測試不一定能補捉變異</h3><p>比如說 <code>邊際值</code> 或是 <code>隱含的互動</code>;<br>測試覆蓋率100%也不一定能補捉變異<br>要麼少了test case,<br>要麼多了無意義的代碼<br>看看以下例子<br>ex:<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">foo(x,y)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span>/ logic here</span></div><div class=\"line\">    sideeffct();</div><div class=\"line\">    <span class=\"keyword\">return</span> z;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>反思一下, 測試過了代碼就沒問題 ?<br>不能捉到變異的測試,<br>有發揮它的功能嗎 ?<br>一般來說如果透過 TDD 進行軟體開發,<br>我們的測試應該是會恰巧符合一項 Test Case<br>而如果是先寫代碼再寫測試,<br>將很難通過變異測試(容易產生多餘的代碼)</p>\n<h3 id=\"找到變異的幾個方向\"><a href=\"#找到變異的幾個方向\" class=\"headerlink\" title=\"找到變異的幾個方向\"></a>找到變異的幾個方向</h3><ul>\n<li>邊界條件(<code>&lt;</code> =&gt; <code>&lt;=</code>)</li>\n<li>反向條件(<code>&lt;</code> =&gt; <code>&gt;</code>)</li>\n<li>移除條件(永真/永偽)</li>\n<li>數學</li>\n<li>遞增/遞減</li>\n<li>常量</li>\n<li>返回值</li>\n<li>移除代碼</li>\n</ul>\n<h3 id=\"先寫代碼再寫測試有問題是很正常的\"><a href=\"#先寫代碼再寫測試有問題是很正常的\" class=\"headerlink\" title=\"先寫代碼再寫測試有問題是很正常的\"></a>先寫代碼再寫測試有問題是很正常的</h3><h2 id=\"Kata-PokerHands-範例\"><a href=\"#Kata-PokerHands-範例\" class=\"headerlink\" title=\"Kata-PokerHands 範例\"></a>Kata-PokerHands 範例</h2><h3 id=\"原碼-使用java\"><a href=\"#原碼-使用java\" class=\"headerlink\" title=\"原碼(使用java)\"></a><a href=\"https://github.com/JosephYao/Kata-PokerHands\" target=\"_blank\" rel=\"external\">原碼(使用java)</a></h3><h3 id=\"變異實例\"><a href=\"#變異實例\" class=\"headerlink\" title=\"變異實例\"></a>變異實例</h3><p>有問題 ,反向測試案例不足</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span>\tList&lt;Integer&gt; <span class=\"title\">getPairCardRanks</span><span class=\"params\">(List&lt;Integer&gt; cardRanks)</span> </span>&#123;</div><div class=\"line\">         List&lt;Integer&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; CARD_COUNT - <span class=\"number\">1</span>; index++)</div><div class=\"line\">         \t<span class=\"keyword\">if</span> (isTwoNeighborCardRanksEquals(index, cardRanks))</div><div class=\"line\">         \t\tresult.add(cardRanks.get(index));</div><div class=\"line\">         <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>有問題 , -1 但是預期中的行為<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span>   Integer   <span class=\"title\">getThreeOfAKindCardRank</span><span class=\"params\">(List&lt;Integer\\&gt; cardRanks)</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; CARD_COUNT - <span class=\"number\">2</span>; index++)</div><div class=\"line\">     \t<span class=\"keyword\">if</span> (isThreeNeighborCardRanksEquals(index, cardRanks))</div><div class=\"line\">     \t\t<span class=\"keyword\">return</span>   cardRanks.get(index);</div><div class=\"line\">     <span class=\"keyword\">throw</span>   <span class=\"keyword\">new</span>   IllegalStateException();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><ol>\n<li>沒有TDD 沒有單元測試,別跑變異測試</li>\n<li>至少要有行級別的覆蓋率(line coverage)</li>\n<li>分支覆蓋(Branch Coverage)好一點 仍不夠</li>\n<li>在需求不變的情況下，再作變異測試</li>\n<li>以變異測試的角度來說,覆蓋率100%是木有用的(testing coverage is useless)</li>\n<li>發現變異怎麼辦？<ul>\n<li>報告(記錄)</li>\n<li>重現 </li>\n<li>評估</li>\n<li>修改 或 補測試</li>\n</ul>\n</li>\n<li>依靠工具不要相信工具,上一步的評估<br>Ex: mock 物件會取代互動實際的行為,導致變異測試失敗</li>\n</ol>\n<h3 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h3><ul>\n<li><a href=\"http://pitest.org\" target=\"_blank\" rel=\"external\">http://pitest.org</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Mutation_testing\" target=\"_blank\" rel=\"external\">https://en.wikipedia.org/wiki/Mutation_testing</a></li>\n<li>使用 Sonarqube with mulations test(應該不用錢)</li>\n<li>tudou.com/home/yaoruozhou</li>\n</ul>\n<h2 id=\"參與者心得\"><a href=\"#參與者心得\" class=\"headerlink\" title=\"參與者心得\"></a>參與者心得</h2><ol>\n<li><p><a href=\"https://medium.com/@loverjersey/變異測試-mutation-test-一種提高測試和代碼質量的-新-方法速記-35bde79a5c7a\" target=\"_blank\" rel=\"external\">變異測試 (Mutation Test) — 一種提高測試和代碼質量的 ”新” 方法速記</a></p>\n</li>\n<li><p><a href=\"https://dotblogs.com.tw/im_sqz777/2018/03/15/004634\" target=\"_blank\" rel=\"external\">Test - 變異(Mutation)測試之你的測試到底是寫爽的，還是有效的?</a></p>\n</li>\n</ol>\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><ol>\n<li>佩服當天就能寫出文章的人</li>\n<li>變異測試是好上加好的測試</li>\n<li>Odd-e 的講師真的很粉棒, 雖然不致到毀三觀 不過眼界大開</li>\n</ol>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ol>\n<li><a href=\"http://www.cnblogs.com/TongWee/p/4505289.html\" target=\"_blank\" rel=\"external\">Mutation Testing(变异测试)</a></li>\n</ol>\n<p>(fin)</p>\n"},{"title":"[活動筆記]蝦皮購物新加坡研發團隊技術分享會","date":"2018-03-15T09:00:12.000Z","_content":"\n## 應該不用知道的事\n1. 雖然是「技術分享會」實際上在徵才\n2. 不過還是有半場的技術分享\n3. 91app 至少去了10 個人(含前員工) \n4. 這篇文章對你應該沒有幫助\n\n## 有關蝦皮\n- 屬於[Sea 集團](http://www.seagroup.com/home)的一部份\n- 東南亞多國服務(新加坡、泰國、馬來西亞、印度、台灣、越南…)\n- 63e Request / Day\n- 8G IO / Mins\n\n## 選擇\n- Native App / Web / Hybird / RN ?\n- Clound / Self machine ?\n- Php/ Nodejs / RoR / Django ?\n- Apache / Ngnix ?\n- C ++ / Java / GoLang\n- Memcahed / Redis ?\n- SPA / MPA ?\n- Mesos / Kubernate ?\n\n## Qiz & Ans\n\n##### 1\n> 用戶下單的時候, 先收錢還是先扣庫存?\n> 扣掉最後一件庫存後, 收錢失敗怎麼辦？\n> 你已經把「賣完」訊息發給了賣家, 怎麼辦？\n\n##### 2\n> 計算金額用整數還是浮點數？(浮點數不準)\n\n##### 3\n> Android 一共有幾種螢幕的 DPI ?\n> Android WebView 和 Chrome 的 Webkit 有何不同 ?\n\n##### 4\n> Web Service 花最多時間在處理什麼 ? \n> 如何壓搾最高的吞吐量 ?\n> IO, USE async\n\n##### 5\n> 什麼樣的情境適合增加伺服器數量來增進效能?\n> stateless\n> 那有狀態怎麼辦 ? \n\n##### 6\n> load balancer 效能到達瓶頸怎麼辦 ?\n> IP\n\n##### 7\n> 一天 25TB 的 Log 數量,怎麼不會查到天荒地老\n\n##### 8\n> Cache & 超賣問題\n> 什麼時候要清 Cache ?\n\n##### 9\n> Database Master 與 Slave 哪個壓力大 ?(Slave)\n> 增加 index 的代價為何 ?(Space)\n> Table 多大要 shard ?\n> Database 多大要分庫 ?\n> 分庫如何作 transaction ?\n\n## 實踐\n\n1. Prototype 簡單 Production 困難 (邊際效應/熵)\n2. 可靠:言出必行,作不到也要早點說(知難行易)\n3. Redis 的資料超過 64G 就無法用 [bgsave](http://redisdoc.com/server/bgsave.html) 有效存檔\n4. 在 Prodction 千萬別用 Redis 的 [key](https://redis.io/commands/keys) 指令\n5. 衡量的基準(benchmark)為何？\n6. 不要對邏輯下command(不要寫前因後果)\n\t- Dont command How\n\t- Command Why\n7. 道\n    - Collect your dots first\n    - Connecting the dots\n\n\n## 持久發展的研發團隊\n- knowledge\n- 保持開放\n- 尊重事實\n- 信任\n- 可靠\n- 找到根本原因(root cause)\n- 分析 修復 記錄\n- Docs\n\t- connection docs\n\t- collection docs\n\n## 測試\n- 白箱測試\n- 黑箱測試\n\n\n## 其它\n- Hypergraph\n- Tech Stack\n- Roles\n\t- contries PM\n\t- fucntion PM\n- Scurm 是跑給老闆看的(!!?)\n- 馬來西亞不用小豬ICON(各地風俗民情不同)\n\n## 參考\n- https://careers.shopee.com\n\n(fin)","source":"_posts/2018/shopee_tech_sharing.md","raw":"---\ntitle: \"[活動筆記]蝦皮購物新加坡研發團隊技術分享會\"\ndate: 2018/03/15 17:00:12\n---\n\n## 應該不用知道的事\n1. 雖然是「技術分享會」實際上在徵才\n2. 不過還是有半場的技術分享\n3. 91app 至少去了10 個人(含前員工) \n4. 這篇文章對你應該沒有幫助\n\n## 有關蝦皮\n- 屬於[Sea 集團](http://www.seagroup.com/home)的一部份\n- 東南亞多國服務(新加坡、泰國、馬來西亞、印度、台灣、越南…)\n- 63e Request / Day\n- 8G IO / Mins\n\n## 選擇\n- Native App / Web / Hybird / RN ?\n- Clound / Self machine ?\n- Php/ Nodejs / RoR / Django ?\n- Apache / Ngnix ?\n- C ++ / Java / GoLang\n- Memcahed / Redis ?\n- SPA / MPA ?\n- Mesos / Kubernate ?\n\n## Qiz & Ans\n\n##### 1\n> 用戶下單的時候, 先收錢還是先扣庫存?\n> 扣掉最後一件庫存後, 收錢失敗怎麼辦？\n> 你已經把「賣完」訊息發給了賣家, 怎麼辦？\n\n##### 2\n> 計算金額用整數還是浮點數？(浮點數不準)\n\n##### 3\n> Android 一共有幾種螢幕的 DPI ?\n> Android WebView 和 Chrome 的 Webkit 有何不同 ?\n\n##### 4\n> Web Service 花最多時間在處理什麼 ? \n> 如何壓搾最高的吞吐量 ?\n> IO, USE async\n\n##### 5\n> 什麼樣的情境適合增加伺服器數量來增進效能?\n> stateless\n> 那有狀態怎麼辦 ? \n\n##### 6\n> load balancer 效能到達瓶頸怎麼辦 ?\n> IP\n\n##### 7\n> 一天 25TB 的 Log 數量,怎麼不會查到天荒地老\n\n##### 8\n> Cache & 超賣問題\n> 什麼時候要清 Cache ?\n\n##### 9\n> Database Master 與 Slave 哪個壓力大 ?(Slave)\n> 增加 index 的代價為何 ?(Space)\n> Table 多大要 shard ?\n> Database 多大要分庫 ?\n> 分庫如何作 transaction ?\n\n## 實踐\n\n1. Prototype 簡單 Production 困難 (邊際效應/熵)\n2. 可靠:言出必行,作不到也要早點說(知難行易)\n3. Redis 的資料超過 64G 就無法用 [bgsave](http://redisdoc.com/server/bgsave.html) 有效存檔\n4. 在 Prodction 千萬別用 Redis 的 [key](https://redis.io/commands/keys) 指令\n5. 衡量的基準(benchmark)為何？\n6. 不要對邏輯下command(不要寫前因後果)\n\t- Dont command How\n\t- Command Why\n7. 道\n    - Collect your dots first\n    - Connecting the dots\n\n\n## 持久發展的研發團隊\n- knowledge\n- 保持開放\n- 尊重事實\n- 信任\n- 可靠\n- 找到根本原因(root cause)\n- 分析 修復 記錄\n- Docs\n\t- connection docs\n\t- collection docs\n\n## 測試\n- 白箱測試\n- 黑箱測試\n\n\n## 其它\n- Hypergraph\n- Tech Stack\n- Roles\n\t- contries PM\n\t- fucntion PM\n- Scurm 是跑給老闆看的(!!?)\n- 馬來西亞不用小豬ICON(各地風俗民情不同)\n\n## 參考\n- https://careers.shopee.com\n\n(fin)","slug":"2018/shopee_tech_sharing","published":1,"updated":"2018-03-21T17:19:37.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivygy005oyk55sxhkpr1b","content":"<h2 id=\"應該不用知道的事\"><a href=\"#應該不用知道的事\" class=\"headerlink\" title=\"應該不用知道的事\"></a>應該不用知道的事</h2><ol>\n<li>雖然是「技術分享會」實際上在徵才</li>\n<li>不過還是有半場的技術分享</li>\n<li>91app 至少去了10 個人(含前員工) </li>\n<li>這篇文章對你應該沒有幫助</li>\n</ol>\n<h2 id=\"有關蝦皮\"><a href=\"#有關蝦皮\" class=\"headerlink\" title=\"有關蝦皮\"></a>有關蝦皮</h2><ul>\n<li>屬於<a href=\"http://www.seagroup.com/home\" target=\"_blank\" rel=\"external\">Sea 集團</a>的一部份</li>\n<li>東南亞多國服務(新加坡、泰國、馬來西亞、印度、台灣、越南…)</li>\n<li>63e Request / Day</li>\n<li>8G IO / Mins</li>\n</ul>\n<h2 id=\"選擇\"><a href=\"#選擇\" class=\"headerlink\" title=\"選擇\"></a>選擇</h2><ul>\n<li>Native App / Web / Hybird / RN ?</li>\n<li>Clound / Self machine ?</li>\n<li>Php/ Nodejs / RoR / Django ?</li>\n<li>Apache / Ngnix ?</li>\n<li>C ++ / Java / GoLang</li>\n<li>Memcahed / Redis ?</li>\n<li>SPA / MPA ?</li>\n<li>Mesos / Kubernate ?</li>\n</ul>\n<h2 id=\"Qiz-amp-Ans\"><a href=\"#Qiz-amp-Ans\" class=\"headerlink\" title=\"Qiz &amp; Ans\"></a>Qiz &amp; Ans</h2><h5 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h5><blockquote>\n<p>用戶下單的時候, 先收錢還是先扣庫存?<br>扣掉最後一件庫存後, 收錢失敗怎麼辦？<br>你已經把「賣完」訊息發給了賣家, 怎麼辦？</p>\n</blockquote>\n<h5 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h5><blockquote>\n<p>計算金額用整數還是浮點數？(浮點數不準)</p>\n</blockquote>\n<h5 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h5><blockquote>\n<p>Android 一共有幾種螢幕的 DPI ?<br>Android WebView 和 Chrome 的 Webkit 有何不同 ?</p>\n</blockquote>\n<h5 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h5><blockquote>\n<p>Web Service 花最多時間在處理什麼 ?<br>如何壓搾最高的吞吐量 ?<br>IO, USE async</p>\n</blockquote>\n<h5 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5\"></a>5</h5><blockquote>\n<p>什麼樣的情境適合增加伺服器數量來增進效能?<br>stateless<br>那有狀態怎麼辦 ? </p>\n</blockquote>\n<h5 id=\"6\"><a href=\"#6\" class=\"headerlink\" title=\"6\"></a>6</h5><blockquote>\n<p>load balancer 效能到達瓶頸怎麼辦 ?<br>IP</p>\n</blockquote>\n<h5 id=\"7\"><a href=\"#7\" class=\"headerlink\" title=\"7\"></a>7</h5><blockquote>\n<p>一天 25TB 的 Log 數量,怎麼不會查到天荒地老</p>\n</blockquote>\n<h5 id=\"8\"><a href=\"#8\" class=\"headerlink\" title=\"8\"></a>8</h5><blockquote>\n<p>Cache &amp; 超賣問題<br>什麼時候要清 Cache ?</p>\n</blockquote>\n<h5 id=\"9\"><a href=\"#9\" class=\"headerlink\" title=\"9\"></a>9</h5><blockquote>\n<p>Database Master 與 Slave 哪個壓力大 ?(Slave)<br>增加 index 的代價為何 ?(Space)<br>Table 多大要 shard ?<br>Database 多大要分庫 ?<br>分庫如何作 transaction ?</p>\n</blockquote>\n<h2 id=\"實踐\"><a href=\"#實踐\" class=\"headerlink\" title=\"實踐\"></a>實踐</h2><ol>\n<li>Prototype 簡單 Production 困難 (邊際效應/熵)</li>\n<li>可靠:言出必行,作不到也要早點說(知難行易)</li>\n<li>Redis 的資料超過 64G 就無法用 <a href=\"http://redisdoc.com/server/bgsave.html\" target=\"_blank\" rel=\"external\">bgsave</a> 有效存檔</li>\n<li>在 Prodction 千萬別用 Redis 的 <a href=\"https://redis.io/commands/keys\" target=\"_blank\" rel=\"external\">key</a> 指令</li>\n<li>衡量的基準(benchmark)為何？</li>\n<li>不要對邏輯下command(不要寫前因後果)<ul>\n<li>Dont command How</li>\n<li>Command Why</li>\n</ul>\n</li>\n<li>道<ul>\n<li>Collect your dots first</li>\n<li>Connecting the dots</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"持久發展的研發團隊\"><a href=\"#持久發展的研發團隊\" class=\"headerlink\" title=\"持久發展的研發團隊\"></a>持久發展的研發團隊</h2><ul>\n<li>knowledge</li>\n<li>保持開放</li>\n<li>尊重事實</li>\n<li>信任</li>\n<li>可靠</li>\n<li>找到根本原因(root cause)</li>\n<li>分析 修復 記錄</li>\n<li>Docs<ul>\n<li>connection docs</li>\n<li>collection docs</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"測試\"><a href=\"#測試\" class=\"headerlink\" title=\"測試\"></a>測試</h2><ul>\n<li>白箱測試</li>\n<li>黑箱測試</li>\n</ul>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><ul>\n<li>Hypergraph</li>\n<li>Tech Stack</li>\n<li>Roles<ul>\n<li>contries PM</li>\n<li>fucntion PM</li>\n</ul>\n</li>\n<li>Scurm 是跑給老闆看的(!!?)</li>\n<li>馬來西亞不用小豬ICON(各地風俗民情不同)</li>\n</ul>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://careers.shopee.com\" target=\"_blank\" rel=\"external\">https://careers.shopee.com</a></li>\n</ul>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"應該不用知道的事\"><a href=\"#應該不用知道的事\" class=\"headerlink\" title=\"應該不用知道的事\"></a>應該不用知道的事</h2><ol>\n<li>雖然是「技術分享會」實際上在徵才</li>\n<li>不過還是有半場的技術分享</li>\n<li>91app 至少去了10 個人(含前員工) </li>\n<li>這篇文章對你應該沒有幫助</li>\n</ol>\n<h2 id=\"有關蝦皮\"><a href=\"#有關蝦皮\" class=\"headerlink\" title=\"有關蝦皮\"></a>有關蝦皮</h2><ul>\n<li>屬於<a href=\"http://www.seagroup.com/home\" target=\"_blank\" rel=\"external\">Sea 集團</a>的一部份</li>\n<li>東南亞多國服務(新加坡、泰國、馬來西亞、印度、台灣、越南…)</li>\n<li>63e Request / Day</li>\n<li>8G IO / Mins</li>\n</ul>\n<h2 id=\"選擇\"><a href=\"#選擇\" class=\"headerlink\" title=\"選擇\"></a>選擇</h2><ul>\n<li>Native App / Web / Hybird / RN ?</li>\n<li>Clound / Self machine ?</li>\n<li>Php/ Nodejs / RoR / Django ?</li>\n<li>Apache / Ngnix ?</li>\n<li>C ++ / Java / GoLang</li>\n<li>Memcahed / Redis ?</li>\n<li>SPA / MPA ?</li>\n<li>Mesos / Kubernate ?</li>\n</ul>\n<h2 id=\"Qiz-amp-Ans\"><a href=\"#Qiz-amp-Ans\" class=\"headerlink\" title=\"Qiz &amp; Ans\"></a>Qiz &amp; Ans</h2><h5 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h5><blockquote>\n<p>用戶下單的時候, 先收錢還是先扣庫存?<br>扣掉最後一件庫存後, 收錢失敗怎麼辦？<br>你已經把「賣完」訊息發給了賣家, 怎麼辦？</p>\n</blockquote>\n<h5 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h5><blockquote>\n<p>計算金額用整數還是浮點數？(浮點數不準)</p>\n</blockquote>\n<h5 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h5><blockquote>\n<p>Android 一共有幾種螢幕的 DPI ?<br>Android WebView 和 Chrome 的 Webkit 有何不同 ?</p>\n</blockquote>\n<h5 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h5><blockquote>\n<p>Web Service 花最多時間在處理什麼 ?<br>如何壓搾最高的吞吐量 ?<br>IO, USE async</p>\n</blockquote>\n<h5 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5\"></a>5</h5><blockquote>\n<p>什麼樣的情境適合增加伺服器數量來增進效能?<br>stateless<br>那有狀態怎麼辦 ? </p>\n</blockquote>\n<h5 id=\"6\"><a href=\"#6\" class=\"headerlink\" title=\"6\"></a>6</h5><blockquote>\n<p>load balancer 效能到達瓶頸怎麼辦 ?<br>IP</p>\n</blockquote>\n<h5 id=\"7\"><a href=\"#7\" class=\"headerlink\" title=\"7\"></a>7</h5><blockquote>\n<p>一天 25TB 的 Log 數量,怎麼不會查到天荒地老</p>\n</blockquote>\n<h5 id=\"8\"><a href=\"#8\" class=\"headerlink\" title=\"8\"></a>8</h5><blockquote>\n<p>Cache &amp; 超賣問題<br>什麼時候要清 Cache ?</p>\n</blockquote>\n<h5 id=\"9\"><a href=\"#9\" class=\"headerlink\" title=\"9\"></a>9</h5><blockquote>\n<p>Database Master 與 Slave 哪個壓力大 ?(Slave)<br>增加 index 的代價為何 ?(Space)<br>Table 多大要 shard ?<br>Database 多大要分庫 ?<br>分庫如何作 transaction ?</p>\n</blockquote>\n<h2 id=\"實踐\"><a href=\"#實踐\" class=\"headerlink\" title=\"實踐\"></a>實踐</h2><ol>\n<li>Prototype 簡單 Production 困難 (邊際效應/熵)</li>\n<li>可靠:言出必行,作不到也要早點說(知難行易)</li>\n<li>Redis 的資料超過 64G 就無法用 <a href=\"http://redisdoc.com/server/bgsave.html\" target=\"_blank\" rel=\"external\">bgsave</a> 有效存檔</li>\n<li>在 Prodction 千萬別用 Redis 的 <a href=\"https://redis.io/commands/keys\" target=\"_blank\" rel=\"external\">key</a> 指令</li>\n<li>衡量的基準(benchmark)為何？</li>\n<li>不要對邏輯下command(不要寫前因後果)<ul>\n<li>Dont command How</li>\n<li>Command Why</li>\n</ul>\n</li>\n<li>道<ul>\n<li>Collect your dots first</li>\n<li>Connecting the dots</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"持久發展的研發團隊\"><a href=\"#持久發展的研發團隊\" class=\"headerlink\" title=\"持久發展的研發團隊\"></a>持久發展的研發團隊</h2><ul>\n<li>knowledge</li>\n<li>保持開放</li>\n<li>尊重事實</li>\n<li>信任</li>\n<li>可靠</li>\n<li>找到根本原因(root cause)</li>\n<li>分析 修復 記錄</li>\n<li>Docs<ul>\n<li>connection docs</li>\n<li>collection docs</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"測試\"><a href=\"#測試\" class=\"headerlink\" title=\"測試\"></a>測試</h2><ul>\n<li>白箱測試</li>\n<li>黑箱測試</li>\n</ul>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><ul>\n<li>Hypergraph</li>\n<li>Tech Stack</li>\n<li>Roles<ul>\n<li>contries PM</li>\n<li>fucntion PM</li>\n</ul>\n</li>\n<li>Scurm 是跑給老闆看的(!!?)</li>\n<li>馬來西亞不用小豬ICON(各地風俗民情不同)</li>\n</ul>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://careers.shopee.com\" target=\"_blank\" rel=\"external\">https://careers.shopee.com</a></li>\n</ul>\n<p>(fin)</p>\n"},{"title":"[好文分享]應用部署的六種策略","date":"2018-01-07T10:47:51.000Z","_content":"## 引用出處\n- [原文出處](https://thenewstack.io/deployment-strategies/)\n- [中譯出處](https://itw01.com/22ULE7O.html)\n\n## 正文開始\n\n目前有各種各樣的技術來將新應用部署到生產環境，  \n所以權衡對系統和終端使用者的影響降至最少，選擇正確的方式是非常重要的。   \n本文將著重討論如下部署策略：   \n- 重建部署：版本A下線後版本B上線 \n- 滾動部署（滾動更新或者增量釋出）：版本B緩慢更新並替代版本A \n- 藍綠部署：版本B並行與版本A釋出，然後流量切換到版本B \n- 金絲雀部署：版本B向一部分使用者釋出，然後完全放開 \n- A/B部署布：版本B只向特定條件的使用者釋出 \n- 影子部署：版本B接受真實的流量請求，但是不產生響應 \n\n我們來看一下每個策略最適合哪種使用者使用場景。  \n爲了簡化，我們使用 [Kubernetes](https://kubernetes.io) ，並用 [Minikube](https://github.com/ContainerSolutions/k8s-deployment-strategies) 進行例子演示。  \n每個策略的配置例子和詳細步驟都可以在這個 [git倉庫](https://github.com/ContainerSolutions/k8s-deployment-strategies) 上找到。   \n\n\n### 重建部署\n重建策略是一個冗餘的方式，它包含下線版本A，然後部署版本B。  \n這個方式意味著服務的宕機時間依賴於應用下線和啟動耗時。   \n![](/images/2018/six_strategies_for_application_deployment/recreate.gif)\n\n優點： \n- 便於設定 \n- 應用狀態完整更新 \n\n缺點： \n- 對使用者影響很大，預期的宕機時間取決於下線時間和應用啟動耗時 \n\n\n### 滾動部署  \n滾動部署策略是指通過逐個替換應用的所有例項，  \n來緩慢釋出應用的一個新版本。  \n通常過程如下：  \n在負載排程後有個版本A的應用例項池，  \n一個版本B的例項部署成功，可以響應請求時，  \n該例項被加入到池中。  \n然後版本A的一個例項從池中刪除並下線。   \n考慮到滾動部署依賴於系統，  \n可以調整如下引數來增加部署時間： \n- 並行數，最大批量執行數：同時釋出例項的數目 \n- 最大峰值：考慮到當前例項數，例項可以加入的數目 \n- 最大不可用數：在滾動更新過程中不可用的例項數 \n![](/images/2018/six_strategies_for_application_deployment/ramped.gif)\n優點： \n- 便於設定 \n- 版本在例項間緩慢釋出 \n- 對於能夠處理資料重平衡的有狀態應用非常方便 \n缺點： \n- 釋出/回滾耗時 \n- 支援多個API很困難 \n- 無法控制流量 \n\n## 藍綠部署 \n藍綠部署策略與滾動部署不同，  \n版本B（綠）同等數量的被並排部署在版本A（藍）旁邊。  \n當新版本滿足上線條件的測試後，  \n流量在負載均衡層從版本A切換到版本B。  \n![](/images/2018/six_strategies_for_application_deployment/blue-green.gif)\n優點： \n- 實時釋出、回滾 \n- 避免版本衝突問題，整個應用狀態統一一次切換 \n缺點： \n- 比較昂貴因為需要雙倍的資源 \n- 在釋放版本到生產環境之前，整個平臺的主流程測試必須執行 \n- 處理有狀態的應用很棘手 \n\n### 金絲雀部署 \n金絲雀部署是指逐漸將生產環境流量從版本A切換到版本B。  \n通常流量是按比例分配的。  \n例如90%的請求流向版本A，10%的流向版本B。  \n這個技術大多數用於缺少足夠測試，或者缺少可靠測試，  \n或者對新版本的穩定性缺乏信心的情況下。  \n![](/images/2018/six_strategies_for_application_deployment/canary.gif)\n優點： \n- 版本面向一部分使用者釋出 \n- 方便錯誤評估和效能監控 \n- 快速回滾 \n缺點： \n- 釋出緩慢 \n\n### A/B測試 \nA/B測試是指在特定條件下將一部分使用者路由到新功能上。  \n它通常用於根據統計來制定商業決策，而不是部署策略。  \n然而，他們是相關的，可以在金絲雀部署方式上新增額外功能來實現，所以我們這裏簡要介紹一下。  \n這個技術廣泛用於測試特定功能的切換，併發布使用佔大部分的版本。  \n下面是可以用於在版本間分散流量的條件：  \n- 瀏覽器cookie \n- 查詢引數 \n- 地理位置 \n- 技術支援：瀏覽器版本、螢幕尺寸、作業系統等 \n- 語言 \n![](/images/2018/six_strategies_for_application_deployment/a-b.gif)\n優點： \n- 多個版本並行執行 \n- 完全控制流量分佈 \n缺點： \n- 需要智慧負載均衡 \n- 對於給定的會話，很難定位問題，分散式跟蹤是必須的 \n\n### 影子部署 \n影子部署是指在版本A旁邊釋出版本B，  \n將版本A進來的請求同時分發到版本B，  \n同時對生產環境流量無影響。  \n這是測試新特徵在產品負載上表現的很好用的方式。  \n當滿足上線要求後，則觸發釋出新應用。  \n這個技術配置非常複雜，而且需要特殊條件，尤其是分出請求。  \n例如一個購物車平臺，如果你想影子測試支付服務，  \n你可能最終會是使用者為他們的訂單支付兩次。  \n這種情況下，可以通過建立一個模擬的服務來重複響應使用者的請求。  \n![](/images/2018/six_strategies_for_application_deployment/shadow.gif)\n優點： \n- 可以使用生產環境流量進行效能測試 \n- 對使用者無影響 \n- 直到應用的穩定性和效能滿足要求後才釋出 \n缺點： \n- 雙倍資源，成本昂貴 \n- 不是真實使用者測試，可能出現誤導 \n- 配置複雜 \n- 某種情況下需要模擬服務 \n\n### 總結 \n部署應用有很多種方法，實際採用哪種方式取決於需求和預算。  \n當釋出到開發或者模擬環境時，重建或者滾動部署是一個好選擇。  \n當釋出到生產環境時，滾動部署或者藍綠部署通常是一個好選擇，  \n但是新平臺的主流程測試是必須的。   \n藍綠部署和影子部署對預算有更高的要求，因為需要雙倍資源。  \n如果應用缺乏測試或者對軟體的功能和穩定性影響缺乏信心，  \n那麼可以使用金絲雀部署或者AB測試或者影子釋出。  \n如果業務需要根據地理位置、語言、作業系統或者瀏覽器特徵等這樣引數來給一些特定的使用者測試，那麼可以採用AB測試技術。   \n最後但並不是最不重要的，影子釋出很複雜，且需要額外工作來模擬響應分支流量請求，  \n當可變操作（郵件、銀行等）呼叫外部依賴時這是必須的，  \n這個技術在升級新資料庫是非常有用，使用影子流量來監控負載下的系統性能。   \n下表可以幫助你選擇正確的策略： \n![](/images/2018/six_strategies_for_application_deployment/deployment_strategies.png)\n取決於雲服務提供商和平臺，如下文件是理解部署的很好開始：   \n- Amazon Web Services \n- Docker Swarm \n- Google Cloud \n- Kubernetes \n我希望這是有用的，如果有任何問題或者反饋，可以在下面評論   \n(正文結束)\n\n## 補充表格翻譯\n\n|策略   |服務不斷線  |真實環境測試   |目標客戶分群   |預算成本   |退版時間   |使用者影響   |複雜度|\n|---    |---     |---  |---  |--- |---|---|---|---|\n|重建部署   | ✖  | ✖  | ✖  | ★☆☆ |★★★ |★★★ |☆☆☆ |\n|滾動部署   | ✔  | ✖  | ✖  | ★☆☆ |★★★ |★☆☆ |★☆☆ |\n|藍綠部署   | ✔  | ✖  | ✖  | ★★★ |☆☆☆ |★★☆ |★★☆ |\n|金絲雀部署 | ✔  | ✔  | ✖  | ★☆☆ |★☆☆ |★☆☆ |★★☆ |\n|A/B部署   | ✔  | ✔  | ✔  | ★☆☆ |★☆☆ |★☆☆ |★★★ |\n|影子部署   | ✔  |  ✔ | ✖  | ★★★ |☆☆☆ |☆☆☆ |★★★ |\n\n非常實用的文章,可惜中譯的圖片並非gif,原文的超聯結也掉失,\n特別重新修正以上問題,留作記錄\n\n(fin)","source":"_posts/2018/six_strategies_for_application_deployment.md","raw":"---\ntitle: \"[好文分享]應用部署的六種策略\"\ndate: 2018/01/07 18:47:51\ntag:\n  - Kubernetes\n---\n## 引用出處\n- [原文出處](https://thenewstack.io/deployment-strategies/)\n- [中譯出處](https://itw01.com/22ULE7O.html)\n\n## 正文開始\n\n目前有各種各樣的技術來將新應用部署到生產環境，  \n所以權衡對系統和終端使用者的影響降至最少，選擇正確的方式是非常重要的。   \n本文將著重討論如下部署策略：   \n- 重建部署：版本A下線後版本B上線 \n- 滾動部署（滾動更新或者增量釋出）：版本B緩慢更新並替代版本A \n- 藍綠部署：版本B並行與版本A釋出，然後流量切換到版本B \n- 金絲雀部署：版本B向一部分使用者釋出，然後完全放開 \n- A/B部署布：版本B只向特定條件的使用者釋出 \n- 影子部署：版本B接受真實的流量請求，但是不產生響應 \n\n我們來看一下每個策略最適合哪種使用者使用場景。  \n爲了簡化，我們使用 [Kubernetes](https://kubernetes.io) ，並用 [Minikube](https://github.com/ContainerSolutions/k8s-deployment-strategies) 進行例子演示。  \n每個策略的配置例子和詳細步驟都可以在這個 [git倉庫](https://github.com/ContainerSolutions/k8s-deployment-strategies) 上找到。   \n\n\n### 重建部署\n重建策略是一個冗餘的方式，它包含下線版本A，然後部署版本B。  \n這個方式意味著服務的宕機時間依賴於應用下線和啟動耗時。   \n![](/images/2018/six_strategies_for_application_deployment/recreate.gif)\n\n優點： \n- 便於設定 \n- 應用狀態完整更新 \n\n缺點： \n- 對使用者影響很大，預期的宕機時間取決於下線時間和應用啟動耗時 \n\n\n### 滾動部署  \n滾動部署策略是指通過逐個替換應用的所有例項，  \n來緩慢釋出應用的一個新版本。  \n通常過程如下：  \n在負載排程後有個版本A的應用例項池，  \n一個版本B的例項部署成功，可以響應請求時，  \n該例項被加入到池中。  \n然後版本A的一個例項從池中刪除並下線。   \n考慮到滾動部署依賴於系統，  \n可以調整如下引數來增加部署時間： \n- 並行數，最大批量執行數：同時釋出例項的數目 \n- 最大峰值：考慮到當前例項數，例項可以加入的數目 \n- 最大不可用數：在滾動更新過程中不可用的例項數 \n![](/images/2018/six_strategies_for_application_deployment/ramped.gif)\n優點： \n- 便於設定 \n- 版本在例項間緩慢釋出 \n- 對於能夠處理資料重平衡的有狀態應用非常方便 \n缺點： \n- 釋出/回滾耗時 \n- 支援多個API很困難 \n- 無法控制流量 \n\n## 藍綠部署 \n藍綠部署策略與滾動部署不同，  \n版本B（綠）同等數量的被並排部署在版本A（藍）旁邊。  \n當新版本滿足上線條件的測試後，  \n流量在負載均衡層從版本A切換到版本B。  \n![](/images/2018/six_strategies_for_application_deployment/blue-green.gif)\n優點： \n- 實時釋出、回滾 \n- 避免版本衝突問題，整個應用狀態統一一次切換 \n缺點： \n- 比較昂貴因為需要雙倍的資源 \n- 在釋放版本到生產環境之前，整個平臺的主流程測試必須執行 \n- 處理有狀態的應用很棘手 \n\n### 金絲雀部署 \n金絲雀部署是指逐漸將生產環境流量從版本A切換到版本B。  \n通常流量是按比例分配的。  \n例如90%的請求流向版本A，10%的流向版本B。  \n這個技術大多數用於缺少足夠測試，或者缺少可靠測試，  \n或者對新版本的穩定性缺乏信心的情況下。  \n![](/images/2018/six_strategies_for_application_deployment/canary.gif)\n優點： \n- 版本面向一部分使用者釋出 \n- 方便錯誤評估和效能監控 \n- 快速回滾 \n缺點： \n- 釋出緩慢 \n\n### A/B測試 \nA/B測試是指在特定條件下將一部分使用者路由到新功能上。  \n它通常用於根據統計來制定商業決策，而不是部署策略。  \n然而，他們是相關的，可以在金絲雀部署方式上新增額外功能來實現，所以我們這裏簡要介紹一下。  \n這個技術廣泛用於測試特定功能的切換，併發布使用佔大部分的版本。  \n下面是可以用於在版本間分散流量的條件：  \n- 瀏覽器cookie \n- 查詢引數 \n- 地理位置 \n- 技術支援：瀏覽器版本、螢幕尺寸、作業系統等 \n- 語言 \n![](/images/2018/six_strategies_for_application_deployment/a-b.gif)\n優點： \n- 多個版本並行執行 \n- 完全控制流量分佈 \n缺點： \n- 需要智慧負載均衡 \n- 對於給定的會話，很難定位問題，分散式跟蹤是必須的 \n\n### 影子部署 \n影子部署是指在版本A旁邊釋出版本B，  \n將版本A進來的請求同時分發到版本B，  \n同時對生產環境流量無影響。  \n這是測試新特徵在產品負載上表現的很好用的方式。  \n當滿足上線要求後，則觸發釋出新應用。  \n這個技術配置非常複雜，而且需要特殊條件，尤其是分出請求。  \n例如一個購物車平臺，如果你想影子測試支付服務，  \n你可能最終會是使用者為他們的訂單支付兩次。  \n這種情況下，可以通過建立一個模擬的服務來重複響應使用者的請求。  \n![](/images/2018/six_strategies_for_application_deployment/shadow.gif)\n優點： \n- 可以使用生產環境流量進行效能測試 \n- 對使用者無影響 \n- 直到應用的穩定性和效能滿足要求後才釋出 \n缺點： \n- 雙倍資源，成本昂貴 \n- 不是真實使用者測試，可能出現誤導 \n- 配置複雜 \n- 某種情況下需要模擬服務 \n\n### 總結 \n部署應用有很多種方法，實際採用哪種方式取決於需求和預算。  \n當釋出到開發或者模擬環境時，重建或者滾動部署是一個好選擇。  \n當釋出到生產環境時，滾動部署或者藍綠部署通常是一個好選擇，  \n但是新平臺的主流程測試是必須的。   \n藍綠部署和影子部署對預算有更高的要求，因為需要雙倍資源。  \n如果應用缺乏測試或者對軟體的功能和穩定性影響缺乏信心，  \n那麼可以使用金絲雀部署或者AB測試或者影子釋出。  \n如果業務需要根據地理位置、語言、作業系統或者瀏覽器特徵等這樣引數來給一些特定的使用者測試，那麼可以採用AB測試技術。   \n最後但並不是最不重要的，影子釋出很複雜，且需要額外工作來模擬響應分支流量請求，  \n當可變操作（郵件、銀行等）呼叫外部依賴時這是必須的，  \n這個技術在升級新資料庫是非常有用，使用影子流量來監控負載下的系統性能。   \n下表可以幫助你選擇正確的策略： \n![](/images/2018/six_strategies_for_application_deployment/deployment_strategies.png)\n取決於雲服務提供商和平臺，如下文件是理解部署的很好開始：   \n- Amazon Web Services \n- Docker Swarm \n- Google Cloud \n- Kubernetes \n我希望這是有用的，如果有任何問題或者反饋，可以在下面評論   \n(正文結束)\n\n## 補充表格翻譯\n\n|策略   |服務不斷線  |真實環境測試   |目標客戶分群   |預算成本   |退版時間   |使用者影響   |複雜度|\n|---    |---     |---  |---  |--- |---|---|---|---|\n|重建部署   | ✖  | ✖  | ✖  | ★☆☆ |★★★ |★★★ |☆☆☆ |\n|滾動部署   | ✔  | ✖  | ✖  | ★☆☆ |★★★ |★☆☆ |★☆☆ |\n|藍綠部署   | ✔  | ✖  | ✖  | ★★★ |☆☆☆ |★★☆ |★★☆ |\n|金絲雀部署 | ✔  | ✔  | ✖  | ★☆☆ |★☆☆ |★☆☆ |★★☆ |\n|A/B部署   | ✔  | ✔  | ✔  | ★☆☆ |★☆☆ |★☆☆ |★★★ |\n|影子部署   | ✔  |  ✔ | ✖  | ★★★ |☆☆☆ |☆☆☆ |★★★ |\n\n非常實用的文章,可惜中譯的圖片並非gif,原文的超聯結也掉失,\n特別重新修正以上問題,留作記錄\n\n(fin)","slug":"2018/six_strategies_for_application_deployment","published":1,"updated":"2018-01-30T16:29:44.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivygz005qyk55gl7bno7v","content":"<h2 id=\"引用出處\"><a href=\"#引用出處\" class=\"headerlink\" title=\"引用出處\"></a>引用出處</h2><ul>\n<li><a href=\"https://thenewstack.io/deployment-strategies/\" target=\"_blank\" rel=\"external\">原文出處</a></li>\n<li><a href=\"https://itw01.com/22ULE7O.html\" target=\"_blank\" rel=\"external\">中譯出處</a></li>\n</ul>\n<h2 id=\"正文開始\"><a href=\"#正文開始\" class=\"headerlink\" title=\"正文開始\"></a>正文開始</h2><p>目前有各種各樣的技術來將新應用部署到生產環境，<br>所以權衡對系統和終端使用者的影響降至最少，選擇正確的方式是非常重要的。<br>本文將著重討論如下部署策略：   </p>\n<ul>\n<li>重建部署：版本A下線後版本B上線 </li>\n<li>滾動部署（滾動更新或者增量釋出）：版本B緩慢更新並替代版本A </li>\n<li>藍綠部署：版本B並行與版本A釋出，然後流量切換到版本B </li>\n<li>金絲雀部署：版本B向一部分使用者釋出，然後完全放開 </li>\n<li>A/B部署布：版本B只向特定條件的使用者釋出 </li>\n<li>影子部署：版本B接受真實的流量請求，但是不產生響應 </li>\n</ul>\n<p>我們來看一下每個策略最適合哪種使用者使用場景。<br>爲了簡化，我們使用 <a href=\"https://kubernetes.io\" target=\"_blank\" rel=\"external\">Kubernetes</a> ，並用 <a href=\"https://github.com/ContainerSolutions/k8s-deployment-strategies\" target=\"_blank\" rel=\"external\">Minikube</a> 進行例子演示。<br>每個策略的配置例子和詳細步驟都可以在這個 <a href=\"https://github.com/ContainerSolutions/k8s-deployment-strategies\" target=\"_blank\" rel=\"external\">git倉庫</a> 上找到。   </p>\n<h3 id=\"重建部署\"><a href=\"#重建部署\" class=\"headerlink\" title=\"重建部署\"></a>重建部署</h3><p>重建策略是一個冗餘的方式，它包含下線版本A，然後部署版本B。<br>這個方式意味著服務的宕機時間依賴於應用下線和啟動耗時。<br><img src=\"/images/2018/six_strategies_for_application_deployment/recreate.gif\" alt=\"\"></p>\n<p>優點： </p>\n<ul>\n<li>便於設定 </li>\n<li>應用狀態完整更新 </li>\n</ul>\n<p>缺點： </p>\n<ul>\n<li>對使用者影響很大，預期的宕機時間取決於下線時間和應用啟動耗時 </li>\n</ul>\n<h3 id=\"滾動部署\"><a href=\"#滾動部署\" class=\"headerlink\" title=\"滾動部署\"></a>滾動部署</h3><p>滾動部署策略是指通過逐個替換應用的所有例項，<br>來緩慢釋出應用的一個新版本。<br>通常過程如下：<br>在負載排程後有個版本A的應用例項池，<br>一個版本B的例項部署成功，可以響應請求時，<br>該例項被加入到池中。<br>然後版本A的一個例項從池中刪除並下線。<br>考慮到滾動部署依賴於系統，<br>可以調整如下引數來增加部署時間： </p>\n<ul>\n<li>並行數，最大批量執行數：同時釋出例項的數目 </li>\n<li>最大峰值：考慮到當前例項數，例項可以加入的數目 </li>\n<li>最大不可用數：在滾動更新過程中不可用的例項數<br><img src=\"/images/2018/six_strategies_for_application_deployment/ramped.gif\" alt=\"\"><br>優點： </li>\n<li>便於設定 </li>\n<li>版本在例項間緩慢釋出 </li>\n<li>對於能夠處理資料重平衡的有狀態應用非常方便<br>缺點： </li>\n<li>釋出/回滾耗時 </li>\n<li>支援多個API很困難 </li>\n<li>無法控制流量 </li>\n</ul>\n<h2 id=\"藍綠部署\"><a href=\"#藍綠部署\" class=\"headerlink\" title=\"藍綠部署\"></a>藍綠部署</h2><p>藍綠部署策略與滾動部署不同，<br>版本B（綠）同等數量的被並排部署在版本A（藍）旁邊。<br>當新版本滿足上線條件的測試後，<br>流量在負載均衡層從版本A切換到版本B。<br><img src=\"/images/2018/six_strategies_for_application_deployment/blue-green.gif\" alt=\"\"><br>優點： </p>\n<ul>\n<li>實時釋出、回滾 </li>\n<li>避免版本衝突問題，整個應用狀態統一一次切換<br>缺點： </li>\n<li>比較昂貴因為需要雙倍的資源 </li>\n<li>在釋放版本到生產環境之前，整個平臺的主流程測試必須執行 </li>\n<li>處理有狀態的應用很棘手 </li>\n</ul>\n<h3 id=\"金絲雀部署\"><a href=\"#金絲雀部署\" class=\"headerlink\" title=\"金絲雀部署\"></a>金絲雀部署</h3><p>金絲雀部署是指逐漸將生產環境流量從版本A切換到版本B。<br>通常流量是按比例分配的。<br>例如90%的請求流向版本A，10%的流向版本B。<br>這個技術大多數用於缺少足夠測試，或者缺少可靠測試，<br>或者對新版本的穩定性缺乏信心的情況下。<br><img src=\"/images/2018/six_strategies_for_application_deployment/canary.gif\" alt=\"\"><br>優點： </p>\n<ul>\n<li>版本面向一部分使用者釋出 </li>\n<li>方便錯誤評估和效能監控 </li>\n<li>快速回滾<br>缺點： </li>\n<li>釋出緩慢 </li>\n</ul>\n<h3 id=\"A-B測試\"><a href=\"#A-B測試\" class=\"headerlink\" title=\"A/B測試\"></a>A/B測試</h3><p>A/B測試是指在特定條件下將一部分使用者路由到新功能上。<br>它通常用於根據統計來制定商業決策，而不是部署策略。<br>然而，他們是相關的，可以在金絲雀部署方式上新增額外功能來實現，所以我們這裏簡要介紹一下。<br>這個技術廣泛用於測試特定功能的切換，併發布使用佔大部分的版本。<br>下面是可以用於在版本間分散流量的條件：  </p>\n<ul>\n<li>瀏覽器cookie </li>\n<li>查詢引數 </li>\n<li>地理位置 </li>\n<li>技術支援：瀏覽器版本、螢幕尺寸、作業系統等 </li>\n<li>語言<br><img src=\"/images/2018/six_strategies_for_application_deployment/a-b.gif\" alt=\"\"><br>優點： </li>\n<li>多個版本並行執行 </li>\n<li>完全控制流量分佈<br>缺點： </li>\n<li>需要智慧負載均衡 </li>\n<li>對於給定的會話，很難定位問題，分散式跟蹤是必須的 </li>\n</ul>\n<h3 id=\"影子部署\"><a href=\"#影子部署\" class=\"headerlink\" title=\"影子部署\"></a>影子部署</h3><p>影子部署是指在版本A旁邊釋出版本B，<br>將版本A進來的請求同時分發到版本B，<br>同時對生產環境流量無影響。<br>這是測試新特徵在產品負載上表現的很好用的方式。<br>當滿足上線要求後，則觸發釋出新應用。<br>這個技術配置非常複雜，而且需要特殊條件，尤其是分出請求。<br>例如一個購物車平臺，如果你想影子測試支付服務，<br>你可能最終會是使用者為他們的訂單支付兩次。<br>這種情況下，可以通過建立一個模擬的服務來重複響應使用者的請求。<br><img src=\"/images/2018/six_strategies_for_application_deployment/shadow.gif\" alt=\"\"><br>優點： </p>\n<ul>\n<li>可以使用生產環境流量進行效能測試 </li>\n<li>對使用者無影響 </li>\n<li>直到應用的穩定性和效能滿足要求後才釋出<br>缺點： </li>\n<li>雙倍資源，成本昂貴 </li>\n<li>不是真實使用者測試，可能出現誤導 </li>\n<li>配置複雜 </li>\n<li>某種情況下需要模擬服務 </li>\n</ul>\n<h3 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h3><p>部署應用有很多種方法，實際採用哪種方式取決於需求和預算。<br>當釋出到開發或者模擬環境時，重建或者滾動部署是一個好選擇。<br>當釋出到生產環境時，滾動部署或者藍綠部署通常是一個好選擇，<br>但是新平臺的主流程測試是必須的。<br>藍綠部署和影子部署對預算有更高的要求，因為需要雙倍資源。<br>如果應用缺乏測試或者對軟體的功能和穩定性影響缺乏信心，<br>那麼可以使用金絲雀部署或者AB測試或者影子釋出。<br>如果業務需要根據地理位置、語言、作業系統或者瀏覽器特徵等這樣引數來給一些特定的使用者測試，那麼可以採用AB測試技術。<br>最後但並不是最不重要的，影子釋出很複雜，且需要額外工作來模擬響應分支流量請求，<br>當可變操作（郵件、銀行等）呼叫外部依賴時這是必須的，<br>這個技術在升級新資料庫是非常有用，使用影子流量來監控負載下的系統性能。<br>下表可以幫助你選擇正確的策略：<br><img src=\"/images/2018/six_strategies_for_application_deployment/deployment_strategies.png\" alt=\"\"><br>取決於雲服務提供商和平臺，如下文件是理解部署的很好開始：   </p>\n<ul>\n<li>Amazon Web Services </li>\n<li>Docker Swarm </li>\n<li>Google Cloud </li>\n<li>Kubernetes<br>我希望這是有用的，如果有任何問題或者反饋，可以在下面評論<br>(正文結束)</li>\n</ul>\n<h2 id=\"補充表格翻譯\"><a href=\"#補充表格翻譯\" class=\"headerlink\" title=\"補充表格翻譯\"></a>補充表格翻譯</h2><table>\n<thead>\n<tr>\n<th>策略</th>\n<th>服務不斷線</th>\n<th>真實環境測試</th>\n<th>目標客戶分群</th>\n<th>預算成本</th>\n<th>退版時間</th>\n<th>使用者影響</th>\n<th>複雜度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>重建部署</td>\n<td>✖</td>\n<td>✖</td>\n<td>✖</td>\n<td>★☆☆</td>\n<td>★★★</td>\n<td>★★★</td>\n<td>☆☆☆</td>\n</tr>\n<tr>\n<td>滾動部署</td>\n<td>✔</td>\n<td>✖</td>\n<td>✖</td>\n<td>★☆☆</td>\n<td>★★★</td>\n<td>★☆☆</td>\n<td>★☆☆</td>\n</tr>\n<tr>\n<td>藍綠部署</td>\n<td>✔</td>\n<td>✖</td>\n<td>✖</td>\n<td>★★★</td>\n<td>☆☆☆</td>\n<td>★★☆</td>\n<td>★★☆</td>\n</tr>\n<tr>\n<td>金絲雀部署</td>\n<td>✔</td>\n<td>✔</td>\n<td>✖</td>\n<td>★☆☆</td>\n<td>★☆☆</td>\n<td>★☆☆</td>\n<td>★★☆</td>\n</tr>\n<tr>\n<td>A/B部署</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>★☆☆</td>\n<td>★☆☆</td>\n<td>★☆☆</td>\n<td>★★★</td>\n</tr>\n<tr>\n<td>影子部署</td>\n<td>✔</td>\n<td>✔</td>\n<td>✖</td>\n<td>★★★</td>\n<td>☆☆☆</td>\n<td>☆☆☆</td>\n<td>★★★</td>\n</tr>\n</tbody>\n</table>\n<p>非常實用的文章,可惜中譯的圖片並非gif,原文的超聯結也掉失,<br>特別重新修正以上問題,留作記錄</p>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"引用出處\"><a href=\"#引用出處\" class=\"headerlink\" title=\"引用出處\"></a>引用出處</h2><ul>\n<li><a href=\"https://thenewstack.io/deployment-strategies/\" target=\"_blank\" rel=\"external\">原文出處</a></li>\n<li><a href=\"https://itw01.com/22ULE7O.html\" target=\"_blank\" rel=\"external\">中譯出處</a></li>\n</ul>\n<h2 id=\"正文開始\"><a href=\"#正文開始\" class=\"headerlink\" title=\"正文開始\"></a>正文開始</h2><p>目前有各種各樣的技術來將新應用部署到生產環境，<br>所以權衡對系統和終端使用者的影響降至最少，選擇正確的方式是非常重要的。<br>本文將著重討論如下部署策略：   </p>\n<ul>\n<li>重建部署：版本A下線後版本B上線 </li>\n<li>滾動部署（滾動更新或者增量釋出）：版本B緩慢更新並替代版本A </li>\n<li>藍綠部署：版本B並行與版本A釋出，然後流量切換到版本B </li>\n<li>金絲雀部署：版本B向一部分使用者釋出，然後完全放開 </li>\n<li>A/B部署布：版本B只向特定條件的使用者釋出 </li>\n<li>影子部署：版本B接受真實的流量請求，但是不產生響應 </li>\n</ul>\n<p>我們來看一下每個策略最適合哪種使用者使用場景。<br>爲了簡化，我們使用 <a href=\"https://kubernetes.io\" target=\"_blank\" rel=\"external\">Kubernetes</a> ，並用 <a href=\"https://github.com/ContainerSolutions/k8s-deployment-strategies\" target=\"_blank\" rel=\"external\">Minikube</a> 進行例子演示。<br>每個策略的配置例子和詳細步驟都可以在這個 <a href=\"https://github.com/ContainerSolutions/k8s-deployment-strategies\" target=\"_blank\" rel=\"external\">git倉庫</a> 上找到。   </p>\n<h3 id=\"重建部署\"><a href=\"#重建部署\" class=\"headerlink\" title=\"重建部署\"></a>重建部署</h3><p>重建策略是一個冗餘的方式，它包含下線版本A，然後部署版本B。<br>這個方式意味著服務的宕機時間依賴於應用下線和啟動耗時。<br><img src=\"/images/2018/six_strategies_for_application_deployment/recreate.gif\" alt=\"\"></p>\n<p>優點： </p>\n<ul>\n<li>便於設定 </li>\n<li>應用狀態完整更新 </li>\n</ul>\n<p>缺點： </p>\n<ul>\n<li>對使用者影響很大，預期的宕機時間取決於下線時間和應用啟動耗時 </li>\n</ul>\n<h3 id=\"滾動部署\"><a href=\"#滾動部署\" class=\"headerlink\" title=\"滾動部署\"></a>滾動部署</h3><p>滾動部署策略是指通過逐個替換應用的所有例項，<br>來緩慢釋出應用的一個新版本。<br>通常過程如下：<br>在負載排程後有個版本A的應用例項池，<br>一個版本B的例項部署成功，可以響應請求時，<br>該例項被加入到池中。<br>然後版本A的一個例項從池中刪除並下線。<br>考慮到滾動部署依賴於系統，<br>可以調整如下引數來增加部署時間： </p>\n<ul>\n<li>並行數，最大批量執行數：同時釋出例項的數目 </li>\n<li>最大峰值：考慮到當前例項數，例項可以加入的數目 </li>\n<li>最大不可用數：在滾動更新過程中不可用的例項數<br><img src=\"/images/2018/six_strategies_for_application_deployment/ramped.gif\" alt=\"\"><br>優點： </li>\n<li>便於設定 </li>\n<li>版本在例項間緩慢釋出 </li>\n<li>對於能夠處理資料重平衡的有狀態應用非常方便<br>缺點： </li>\n<li>釋出/回滾耗時 </li>\n<li>支援多個API很困難 </li>\n<li>無法控制流量 </li>\n</ul>\n<h2 id=\"藍綠部署\"><a href=\"#藍綠部署\" class=\"headerlink\" title=\"藍綠部署\"></a>藍綠部署</h2><p>藍綠部署策略與滾動部署不同，<br>版本B（綠）同等數量的被並排部署在版本A（藍）旁邊。<br>當新版本滿足上線條件的測試後，<br>流量在負載均衡層從版本A切換到版本B。<br><img src=\"/images/2018/six_strategies_for_application_deployment/blue-green.gif\" alt=\"\"><br>優點： </p>\n<ul>\n<li>實時釋出、回滾 </li>\n<li>避免版本衝突問題，整個應用狀態統一一次切換<br>缺點： </li>\n<li>比較昂貴因為需要雙倍的資源 </li>\n<li>在釋放版本到生產環境之前，整個平臺的主流程測試必須執行 </li>\n<li>處理有狀態的應用很棘手 </li>\n</ul>\n<h3 id=\"金絲雀部署\"><a href=\"#金絲雀部署\" class=\"headerlink\" title=\"金絲雀部署\"></a>金絲雀部署</h3><p>金絲雀部署是指逐漸將生產環境流量從版本A切換到版本B。<br>通常流量是按比例分配的。<br>例如90%的請求流向版本A，10%的流向版本B。<br>這個技術大多數用於缺少足夠測試，或者缺少可靠測試，<br>或者對新版本的穩定性缺乏信心的情況下。<br><img src=\"/images/2018/six_strategies_for_application_deployment/canary.gif\" alt=\"\"><br>優點： </p>\n<ul>\n<li>版本面向一部分使用者釋出 </li>\n<li>方便錯誤評估和效能監控 </li>\n<li>快速回滾<br>缺點： </li>\n<li>釋出緩慢 </li>\n</ul>\n<h3 id=\"A-B測試\"><a href=\"#A-B測試\" class=\"headerlink\" title=\"A/B測試\"></a>A/B測試</h3><p>A/B測試是指在特定條件下將一部分使用者路由到新功能上。<br>它通常用於根據統計來制定商業決策，而不是部署策略。<br>然而，他們是相關的，可以在金絲雀部署方式上新增額外功能來實現，所以我們這裏簡要介紹一下。<br>這個技術廣泛用於測試特定功能的切換，併發布使用佔大部分的版本。<br>下面是可以用於在版本間分散流量的條件：  </p>\n<ul>\n<li>瀏覽器cookie </li>\n<li>查詢引數 </li>\n<li>地理位置 </li>\n<li>技術支援：瀏覽器版本、螢幕尺寸、作業系統等 </li>\n<li>語言<br><img src=\"/images/2018/six_strategies_for_application_deployment/a-b.gif\" alt=\"\"><br>優點： </li>\n<li>多個版本並行執行 </li>\n<li>完全控制流量分佈<br>缺點： </li>\n<li>需要智慧負載均衡 </li>\n<li>對於給定的會話，很難定位問題，分散式跟蹤是必須的 </li>\n</ul>\n<h3 id=\"影子部署\"><a href=\"#影子部署\" class=\"headerlink\" title=\"影子部署\"></a>影子部署</h3><p>影子部署是指在版本A旁邊釋出版本B，<br>將版本A進來的請求同時分發到版本B，<br>同時對生產環境流量無影響。<br>這是測試新特徵在產品負載上表現的很好用的方式。<br>當滿足上線要求後，則觸發釋出新應用。<br>這個技術配置非常複雜，而且需要特殊條件，尤其是分出請求。<br>例如一個購物車平臺，如果你想影子測試支付服務，<br>你可能最終會是使用者為他們的訂單支付兩次。<br>這種情況下，可以通過建立一個模擬的服務來重複響應使用者的請求。<br><img src=\"/images/2018/six_strategies_for_application_deployment/shadow.gif\" alt=\"\"><br>優點： </p>\n<ul>\n<li>可以使用生產環境流量進行效能測試 </li>\n<li>對使用者無影響 </li>\n<li>直到應用的穩定性和效能滿足要求後才釋出<br>缺點： </li>\n<li>雙倍資源，成本昂貴 </li>\n<li>不是真實使用者測試，可能出現誤導 </li>\n<li>配置複雜 </li>\n<li>某種情況下需要模擬服務 </li>\n</ul>\n<h3 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h3><p>部署應用有很多種方法，實際採用哪種方式取決於需求和預算。<br>當釋出到開發或者模擬環境時，重建或者滾動部署是一個好選擇。<br>當釋出到生產環境時，滾動部署或者藍綠部署通常是一個好選擇，<br>但是新平臺的主流程測試是必須的。<br>藍綠部署和影子部署對預算有更高的要求，因為需要雙倍資源。<br>如果應用缺乏測試或者對軟體的功能和穩定性影響缺乏信心，<br>那麼可以使用金絲雀部署或者AB測試或者影子釋出。<br>如果業務需要根據地理位置、語言、作業系統或者瀏覽器特徵等這樣引數來給一些特定的使用者測試，那麼可以採用AB測試技術。<br>最後但並不是最不重要的，影子釋出很複雜，且需要額外工作來模擬響應分支流量請求，<br>當可變操作（郵件、銀行等）呼叫外部依賴時這是必須的，<br>這個技術在升級新資料庫是非常有用，使用影子流量來監控負載下的系統性能。<br>下表可以幫助你選擇正確的策略：<br><img src=\"/images/2018/six_strategies_for_application_deployment/deployment_strategies.png\" alt=\"\"><br>取決於雲服務提供商和平臺，如下文件是理解部署的很好開始：   </p>\n<ul>\n<li>Amazon Web Services </li>\n<li>Docker Swarm </li>\n<li>Google Cloud </li>\n<li>Kubernetes<br>我希望這是有用的，如果有任何問題或者反饋，可以在下面評論<br>(正文結束)</li>\n</ul>\n<h2 id=\"補充表格翻譯\"><a href=\"#補充表格翻譯\" class=\"headerlink\" title=\"補充表格翻譯\"></a>補充表格翻譯</h2><table>\n<thead>\n<tr>\n<th>策略</th>\n<th>服務不斷線</th>\n<th>真實環境測試</th>\n<th>目標客戶分群</th>\n<th>預算成本</th>\n<th>退版時間</th>\n<th>使用者影響</th>\n<th>複雜度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>重建部署</td>\n<td>✖</td>\n<td>✖</td>\n<td>✖</td>\n<td>★☆☆</td>\n<td>★★★</td>\n<td>★★★</td>\n<td>☆☆☆</td>\n</tr>\n<tr>\n<td>滾動部署</td>\n<td>✔</td>\n<td>✖</td>\n<td>✖</td>\n<td>★☆☆</td>\n<td>★★★</td>\n<td>★☆☆</td>\n<td>★☆☆</td>\n</tr>\n<tr>\n<td>藍綠部署</td>\n<td>✔</td>\n<td>✖</td>\n<td>✖</td>\n<td>★★★</td>\n<td>☆☆☆</td>\n<td>★★☆</td>\n<td>★★☆</td>\n</tr>\n<tr>\n<td>金絲雀部署</td>\n<td>✔</td>\n<td>✔</td>\n<td>✖</td>\n<td>★☆☆</td>\n<td>★☆☆</td>\n<td>★☆☆</td>\n<td>★★☆</td>\n</tr>\n<tr>\n<td>A/B部署</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n<td>★☆☆</td>\n<td>★☆☆</td>\n<td>★☆☆</td>\n<td>★★★</td>\n</tr>\n<tr>\n<td>影子部署</td>\n<td>✔</td>\n<td>✔</td>\n<td>✖</td>\n<td>★★★</td>\n<td>☆☆☆</td>\n<td>☆☆☆</td>\n<td>★★★</td>\n</tr>\n</tbody>\n</table>\n<p>非常實用的文章,可惜中譯的圖片並非gif,原文的超聯結也掉失,<br>特別重新修正以上問題,留作記錄</p>\n<p>(fin)</p>\n"},{"title":"[實作筆記]在 Windows 環境編輯 SCSS","date":"2018-04-26T06:16:34.000Z","_content":"\n1. 安裝 Windows 套件管理工具 Chocolatey \n    - https://chocolatey.org\n2. 安裝 Node.js® \n    - https://chocolatey.org/packages/nodejs\n    ```\n    choco install nodejs -y\n    ```\n\n3. 註冊公司內部 NPM Server\n    - http://company.npm.server\n    ```\n    npm set registry http://company.npm.server\n    ```\n\n4. 安裝 RUBY\n    - https://chocolatey.org/packages/ruby/2.5.1.1\n    ```\n    choco install ruby -y\n    ```\n5. 下載 RubyGems\n    - https://rubygems.org/pages/download#formats\n    - Download from above\n    - Unpack into a directory and cd there\n    - Install with: ruby setup.rb (you may need admin/root privilege)\n6. 安裝 compass\n    - https://rubygems.org/gems/compass/versions/1.0.3\n    ```\n    gem install compass\n    ```\n7. 檢查 PATH\n8. 重啟 CMD 與 Visual Studio 2017\n9. 執行 compass\n    - 使用 Command Line\n        ```\n        gulp compass\n        ```\n    - 使用工作執行器總管\n\n        ![](https://i.imgur.com/2sEzAx5.jpg)\n\n","source":"_posts/2018/windows_with_sass.md","raw":"---\ntitle: \"[實作筆記]在 Windows 環境編輯 SCSS\"\ndate: 2018/04/26 14:16:34\ntag:\n  - Windows\n  - SCSS\n  - Ruby\n  - Node.js\n---\n\n1. 安裝 Windows 套件管理工具 Chocolatey \n    - https://chocolatey.org\n2. 安裝 Node.js® \n    - https://chocolatey.org/packages/nodejs\n    ```\n    choco install nodejs -y\n    ```\n\n3. 註冊公司內部 NPM Server\n    - http://company.npm.server\n    ```\n    npm set registry http://company.npm.server\n    ```\n\n4. 安裝 RUBY\n    - https://chocolatey.org/packages/ruby/2.5.1.1\n    ```\n    choco install ruby -y\n    ```\n5. 下載 RubyGems\n    - https://rubygems.org/pages/download#formats\n    - Download from above\n    - Unpack into a directory and cd there\n    - Install with: ruby setup.rb (you may need admin/root privilege)\n6. 安裝 compass\n    - https://rubygems.org/gems/compass/versions/1.0.3\n    ```\n    gem install compass\n    ```\n7. 檢查 PATH\n8. 重啟 CMD 與 Visual Studio 2017\n9. 執行 compass\n    - 使用 Command Line\n        ```\n        gulp compass\n        ```\n    - 使用工作執行器總管\n\n        ![](https://i.imgur.com/2sEzAx5.jpg)\n\n","slug":"2018/windows_with_sass","published":1,"updated":"2018-05-02T06:33:06.805Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyh2005ryk55pnneoksl","content":"<ol>\n<li>安裝 Windows 套件管理工具 Chocolatey <ul>\n<li><a href=\"https://chocolatey.org\" target=\"_blank\" rel=\"external\">https://chocolatey.org</a></li>\n</ul>\n</li>\n<li><p>安裝 Node.js® </p>\n<ul>\n<li><a href=\"https://chocolatey.org/packages/nodejs\" target=\"_blank\" rel=\"external\">https://chocolatey.org/packages/nodejs</a><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">choco install nodejs -y</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>註冊公司內部 NPM Server</p>\n<ul>\n<li><a href=\"http://company.npm.server\" target=\"_blank\" rel=\"external\">http://company.npm.server</a><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm set registry http://company.npm.server</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>安裝 RUBY</p>\n<ul>\n<li><a href=\"https://chocolatey.org/packages/ruby/2.5.1.1\" target=\"_blank\" rel=\"external\">https://chocolatey.org/packages/ruby/2.5.1.1</a><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">choco install ruby -y</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>下載 RubyGems</p>\n<ul>\n<li><a href=\"https://rubygems.org/pages/download#formats\" target=\"_blank\" rel=\"external\">https://rubygems.org/pages/download#formats</a></li>\n<li>Download from above</li>\n<li>Unpack into a directory and cd there</li>\n<li>Install with: ruby setup.rb (you may need admin/root privilege)</li>\n</ul>\n</li>\n<li><p>安裝 compass</p>\n<ul>\n<li><a href=\"https://rubygems.org/gems/compass/versions/1.0.3\" target=\"_blank\" rel=\"external\">https://rubygems.org/gems/compass/versions/1.0.3</a><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem install compass</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>檢查 PATH</p>\n</li>\n<li>重啟 CMD 與 Visual Studio 2017</li>\n<li><p>執行 compass</p>\n<ul>\n<li><p>使用 Command Line</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp compass</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用工作執行器總管</p>\n<p>  <img src=\"https://i.imgur.com/2sEzAx5.jpg\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>安裝 Windows 套件管理工具 Chocolatey <ul>\n<li><a href=\"https://chocolatey.org\" target=\"_blank\" rel=\"external\">https://chocolatey.org</a></li>\n</ul>\n</li>\n<li><p>安裝 Node.js® </p>\n<ul>\n<li><a href=\"https://chocolatey.org/packages/nodejs\" target=\"_blank\" rel=\"external\">https://chocolatey.org/packages/nodejs</a><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">choco install nodejs -y</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>註冊公司內部 NPM Server</p>\n<ul>\n<li><a href=\"http://company.npm.server\" target=\"_blank\" rel=\"external\">http://company.npm.server</a><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm set registry http://company.npm.server</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>安裝 RUBY</p>\n<ul>\n<li><a href=\"https://chocolatey.org/packages/ruby/2.5.1.1\" target=\"_blank\" rel=\"external\">https://chocolatey.org/packages/ruby/2.5.1.1</a><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">choco install ruby -y</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>下載 RubyGems</p>\n<ul>\n<li><a href=\"https://rubygems.org/pages/download#formats\" target=\"_blank\" rel=\"external\">https://rubygems.org/pages/download#formats</a></li>\n<li>Download from above</li>\n<li>Unpack into a directory and cd there</li>\n<li>Install with: ruby setup.rb (you may need admin/root privilege)</li>\n</ul>\n</li>\n<li><p>安裝 compass</p>\n<ul>\n<li><a href=\"https://rubygems.org/gems/compass/versions/1.0.3\" target=\"_blank\" rel=\"external\">https://rubygems.org/gems/compass/versions/1.0.3</a><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem install compass</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>檢查 PATH</p>\n</li>\n<li>重啟 CMD 與 Visual Studio 2017</li>\n<li><p>執行 compass</p>\n<ul>\n<li><p>使用 Command Line</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp compass</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用工作執行器總管</p>\n<p>  <img src=\"https://i.imgur.com/2sEzAx5.jpg\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n</ol>\n"},{"title":"[讀書會]單元測試的藝術 - 導讀、序與第一章","date":"2018-03-21T17:20:12.000Z","_content":"\n## 要知道的事\n1. 這是[單元測試的藝術](http://www.books.com.tw/products/0010765689)的閱讀筆記\n2. 筆記的意思就是不一定會有心得\n3. 這篇主要是導讀\n\n## 譯者序\n- TDD , Test First to Think First\n- 什麼是好的單元測試？\n- 單元測試三支柱:可信任 可讀性 可維護\n- 綠色安全區域\n- 實務上導入的指引\n\n### 入門建議\n- 了解如何隔離相依(Part II)\n- Stub 與 Mock 的差異,熟練隔離框架(NSubstitute)\n- 如何撰寫優秀的單元測試(Part III)\n\n### 進階建議\n- 如何撰寫優秀的單元測試(Part III)\n- 如何在組織中導入單元測試(Part IV)\n- 針對遺留代碼的重構與測試,以及可測試性設計(Part IV)\n\n### 避免\n1. 測試不穩定\n2. 過度指定\n3. 一次不只測一件事\n4. 測試程式重複過多\n5. 可讀性差\n\n## 關於本書\n\n### 前言\n有寫測試, 也不保証專案成功,  \n一個失敗的單元測試案例,  \n作者歸納原因如下,  \n- 脆弱的測試(Prod改一點,測試就錯一大片)\n- 不易維護\n- 測試間相護依賴\n- 可讀性差\n\n### 作者推薦的框架\n- [NSubstitute](http://nsubstitute.github.io)\n- [FakeItEasy](https://github.com/FakeItEasy/FakeItEasy)\n\n### 學習路線圖\n- Part I 基礎知識\n- Part II 測試框架\n- Part III 最佳實踐\n- Part IV 組識導入/遺留代碼/設計\n\n## 目錄\n1. 入門\n\t- 什麼是優秀的單元測試\n\t- 單元測試與整合測試的分別\n\t- 第一個單元測試\n2. 核心技術\n\t- Stub\n\t- IoC(DI)\n\t- 值、狀態與互動\n\t- 測試框架\n\t- 事件\n\t- 深入了解測試框架\n3. 測試程式碼\n\t- 自動化\n\t- 綠色安全區域\n\t- 可信任/可維護/可讀性\n4. 設計與流程\n\t- 組織導入\n\t- 遺留代碼\n\t- 設計與可測試性\n\n## 第一章\n### 定義單元測試\n\n### 什麼是優秀的單元測試\n1. 自動化, 可重複執行\n2. 容易實現*\n3. 到第二天還有存在的意義(非臨時性的,ex:hotfix)\n4. 任何都可以一鍵執行\n5. 執行速度快\n6. 結果一致\n7. 可以完全控制(不與外部相依)\n8. 獨立於其他測試\n9. 失敗時,錯誤應該是明確的\n\n### 整合測試\n1. 整合測試相依於真實物件\n2. 整合測試的結果不穩定\n3. 整合測試與單元測試應該被分開(見ch7.2.2)\n4. 整合測試執行時間長\n5. 依據現實狀況無法完全控制\n6. 缺點: 一次測試的東西太多\n\n### 第一個單元測試\n### 理解測試趨動開發\n1. TDD 不保證產品會成功\n2. 步驟\n\t1. 寫一個失敗的測試\n\t2. 寫一個符合測試預期的產品程式碼,以通過測試\n\t3. 重構\n\n### TDD的核心技能    \n1. 可維護、可讀、可靠(這本書的目的)\n2. 寫出可維護、可讀、可靠的測試不等於TDD,至於如何寫優秀的TDD,作者推薦閱讀[〈Test-Driven Development:by Example〉](https://www.tenlong.com.tw/products/9780321146533)\n3. 就算執行TDD,也不保証能設計一個完善的系統,作者推薦閱讀[Growing Object-Oriented Software, Guided by Tests](http://tl.big5.zxhsd.com/kgsm/ts/big5/2010/07/30/1801246.shtml)與[無瑕的程式碼](https://www.tenlong.com.tw/products/9789862017050)\n\n簡單說就是,\n- 寫好測試\n- 測試先行(TDD)\n- 設計\n\n作者認為這是三種技能, 同時學習三種技能門檻會相當的高, 最後導致放棄.\n\n### 小結\n- 優秀的測試就是\n    - 自動化\n    - 容易撰寫\n    - 執行快速\n    - 任何人都可以執行,並得到相同結果\n\n## 揪錯\n![](https://i.imgur.com/olnQxQ2.jpg)\n\n## 本書資源\n1. [Samples](https://github.com/royosherove/aout2)\n2. [The Art Of Unit Testing](http://artofunittesting.com/)\n3. [Videos](http://osherove.com/videos/)\n\n(fin)","source":"_posts/2018/the_art_of_unit_testing_2nd_0.md","raw":"---\ntitle: \"[讀書會]單元測試的藝術 - 導讀、序與第一章\"\ndate: 2018/03/22 01:20:12\ntag:\n  - testing\n  - TDD\n  - unit test\n  - integration testing\n---\n\n## 要知道的事\n1. 這是[單元測試的藝術](http://www.books.com.tw/products/0010765689)的閱讀筆記\n2. 筆記的意思就是不一定會有心得\n3. 這篇主要是導讀\n\n## 譯者序\n- TDD , Test First to Think First\n- 什麼是好的單元測試？\n- 單元測試三支柱:可信任 可讀性 可維護\n- 綠色安全區域\n- 實務上導入的指引\n\n### 入門建議\n- 了解如何隔離相依(Part II)\n- Stub 與 Mock 的差異,熟練隔離框架(NSubstitute)\n- 如何撰寫優秀的單元測試(Part III)\n\n### 進階建議\n- 如何撰寫優秀的單元測試(Part III)\n- 如何在組織中導入單元測試(Part IV)\n- 針對遺留代碼的重構與測試,以及可測試性設計(Part IV)\n\n### 避免\n1. 測試不穩定\n2. 過度指定\n3. 一次不只測一件事\n4. 測試程式重複過多\n5. 可讀性差\n\n## 關於本書\n\n### 前言\n有寫測試, 也不保証專案成功,  \n一個失敗的單元測試案例,  \n作者歸納原因如下,  \n- 脆弱的測試(Prod改一點,測試就錯一大片)\n- 不易維護\n- 測試間相護依賴\n- 可讀性差\n\n### 作者推薦的框架\n- [NSubstitute](http://nsubstitute.github.io)\n- [FakeItEasy](https://github.com/FakeItEasy/FakeItEasy)\n\n### 學習路線圖\n- Part I 基礎知識\n- Part II 測試框架\n- Part III 最佳實踐\n- Part IV 組識導入/遺留代碼/設計\n\n## 目錄\n1. 入門\n\t- 什麼是優秀的單元測試\n\t- 單元測試與整合測試的分別\n\t- 第一個單元測試\n2. 核心技術\n\t- Stub\n\t- IoC(DI)\n\t- 值、狀態與互動\n\t- 測試框架\n\t- 事件\n\t- 深入了解測試框架\n3. 測試程式碼\n\t- 自動化\n\t- 綠色安全區域\n\t- 可信任/可維護/可讀性\n4. 設計與流程\n\t- 組織導入\n\t- 遺留代碼\n\t- 設計與可測試性\n\n## 第一章\n### 定義單元測試\n\n### 什麼是優秀的單元測試\n1. 自動化, 可重複執行\n2. 容易實現*\n3. 到第二天還有存在的意義(非臨時性的,ex:hotfix)\n4. 任何都可以一鍵執行\n5. 執行速度快\n6. 結果一致\n7. 可以完全控制(不與外部相依)\n8. 獨立於其他測試\n9. 失敗時,錯誤應該是明確的\n\n### 整合測試\n1. 整合測試相依於真實物件\n2. 整合測試的結果不穩定\n3. 整合測試與單元測試應該被分開(見ch7.2.2)\n4. 整合測試執行時間長\n5. 依據現實狀況無法完全控制\n6. 缺點: 一次測試的東西太多\n\n### 第一個單元測試\n### 理解測試趨動開發\n1. TDD 不保證產品會成功\n2. 步驟\n\t1. 寫一個失敗的測試\n\t2. 寫一個符合測試預期的產品程式碼,以通過測試\n\t3. 重構\n\n### TDD的核心技能    \n1. 可維護、可讀、可靠(這本書的目的)\n2. 寫出可維護、可讀、可靠的測試不等於TDD,至於如何寫優秀的TDD,作者推薦閱讀[〈Test-Driven Development:by Example〉](https://www.tenlong.com.tw/products/9780321146533)\n3. 就算執行TDD,也不保証能設計一個完善的系統,作者推薦閱讀[Growing Object-Oriented Software, Guided by Tests](http://tl.big5.zxhsd.com/kgsm/ts/big5/2010/07/30/1801246.shtml)與[無瑕的程式碼](https://www.tenlong.com.tw/products/9789862017050)\n\n簡單說就是,\n- 寫好測試\n- 測試先行(TDD)\n- 設計\n\n作者認為這是三種技能, 同時學習三種技能門檻會相當的高, 最後導致放棄.\n\n### 小結\n- 優秀的測試就是\n    - 自動化\n    - 容易撰寫\n    - 執行快速\n    - 任何人都可以執行,並得到相同結果\n\n## 揪錯\n![](https://i.imgur.com/olnQxQ2.jpg)\n\n## 本書資源\n1. [Samples](https://github.com/royosherove/aout2)\n2. [The Art Of Unit Testing](http://artofunittesting.com/)\n3. [Videos](http://osherove.com/videos/)\n\n(fin)","slug":"2018/the_art_of_unit_testing_2nd_0","published":1,"updated":"2018-03-21T18:21:14.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyh4005tyk55y2wb5u31","content":"<h2 id=\"要知道的事\"><a href=\"#要知道的事\" class=\"headerlink\" title=\"要知道的事\"></a>要知道的事</h2><ol>\n<li>這是<a href=\"http://www.books.com.tw/products/0010765689\" target=\"_blank\" rel=\"external\">單元測試的藝術</a>的閱讀筆記</li>\n<li>筆記的意思就是不一定會有心得</li>\n<li>這篇主要是導讀</li>\n</ol>\n<h2 id=\"譯者序\"><a href=\"#譯者序\" class=\"headerlink\" title=\"譯者序\"></a>譯者序</h2><ul>\n<li>TDD , Test First to Think First</li>\n<li>什麼是好的單元測試？</li>\n<li>單元測試三支柱:可信任 可讀性 可維護</li>\n<li>綠色安全區域</li>\n<li>實務上導入的指引</li>\n</ul>\n<h3 id=\"入門建議\"><a href=\"#入門建議\" class=\"headerlink\" title=\"入門建議\"></a>入門建議</h3><ul>\n<li>了解如何隔離相依(Part II)</li>\n<li>Stub 與 Mock 的差異,熟練隔離框架(NSubstitute)</li>\n<li>如何撰寫優秀的單元測試(Part III)</li>\n</ul>\n<h3 id=\"進階建議\"><a href=\"#進階建議\" class=\"headerlink\" title=\"進階建議\"></a>進階建議</h3><ul>\n<li>如何撰寫優秀的單元測試(Part III)</li>\n<li>如何在組織中導入單元測試(Part IV)</li>\n<li>針對遺留代碼的重構與測試,以及可測試性設計(Part IV)</li>\n</ul>\n<h3 id=\"避免\"><a href=\"#避免\" class=\"headerlink\" title=\"避免\"></a>避免</h3><ol>\n<li>測試不穩定</li>\n<li>過度指定</li>\n<li>一次不只測一件事</li>\n<li>測試程式重複過多</li>\n<li>可讀性差</li>\n</ol>\n<h2 id=\"關於本書\"><a href=\"#關於本書\" class=\"headerlink\" title=\"關於本書\"></a>關於本書</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>有寫測試, 也不保証專案成功,<br>一個失敗的單元測試案例,<br>作者歸納原因如下,  </p>\n<ul>\n<li>脆弱的測試(Prod改一點,測試就錯一大片)</li>\n<li>不易維護</li>\n<li>測試間相護依賴</li>\n<li>可讀性差</li>\n</ul>\n<h3 id=\"作者推薦的框架\"><a href=\"#作者推薦的框架\" class=\"headerlink\" title=\"作者推薦的框架\"></a>作者推薦的框架</h3><ul>\n<li><a href=\"http://nsubstitute.github.io\" target=\"_blank\" rel=\"external\">NSubstitute</a></li>\n<li><a href=\"https://github.com/FakeItEasy/FakeItEasy\" target=\"_blank\" rel=\"external\">FakeItEasy</a></li>\n</ul>\n<h3 id=\"學習路線圖\"><a href=\"#學習路線圖\" class=\"headerlink\" title=\"學習路線圖\"></a>學習路線圖</h3><ul>\n<li>Part I 基礎知識</li>\n<li>Part II 測試框架</li>\n<li>Part III 最佳實踐</li>\n<li>Part IV 組識導入/遺留代碼/設計</li>\n</ul>\n<h2 id=\"目錄\"><a href=\"#目錄\" class=\"headerlink\" title=\"目錄\"></a>目錄</h2><ol>\n<li>入門<ul>\n<li>什麼是優秀的單元測試</li>\n<li>單元測試與整合測試的分別</li>\n<li>第一個單元測試</li>\n</ul>\n</li>\n<li>核心技術<ul>\n<li>Stub</li>\n<li>IoC(DI)</li>\n<li>值、狀態與互動</li>\n<li>測試框架</li>\n<li>事件</li>\n<li>深入了解測試框架</li>\n</ul>\n</li>\n<li>測試程式碼<ul>\n<li>自動化</li>\n<li>綠色安全區域</li>\n<li>可信任/可維護/可讀性</li>\n</ul>\n</li>\n<li>設計與流程<ul>\n<li>組織導入</li>\n<li>遺留代碼</li>\n<li>設計與可測試性</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"第一章\"><a href=\"#第一章\" class=\"headerlink\" title=\"第一章\"></a>第一章</h2><h3 id=\"定義單元測試\"><a href=\"#定義單元測試\" class=\"headerlink\" title=\"定義單元測試\"></a>定義單元測試</h3><h3 id=\"什麼是優秀的單元測試\"><a href=\"#什麼是優秀的單元測試\" class=\"headerlink\" title=\"什麼是優秀的單元測試\"></a>什麼是優秀的單元測試</h3><ol>\n<li>自動化, 可重複執行</li>\n<li>容易實現*</li>\n<li>到第二天還有存在的意義(非臨時性的,ex:hotfix)</li>\n<li>任何都可以一鍵執行</li>\n<li>執行速度快</li>\n<li>結果一致</li>\n<li>可以完全控制(不與外部相依)</li>\n<li>獨立於其他測試</li>\n<li>失敗時,錯誤應該是明確的</li>\n</ol>\n<h3 id=\"整合測試\"><a href=\"#整合測試\" class=\"headerlink\" title=\"整合測試\"></a>整合測試</h3><ol>\n<li>整合測試相依於真實物件</li>\n<li>整合測試的結果不穩定</li>\n<li>整合測試與單元測試應該被分開(見ch7.2.2)</li>\n<li>整合測試執行時間長</li>\n<li>依據現實狀況無法完全控制</li>\n<li>缺點: 一次測試的東西太多</li>\n</ol>\n<h3 id=\"第一個單元測試\"><a href=\"#第一個單元測試\" class=\"headerlink\" title=\"第一個單元測試\"></a>第一個單元測試</h3><h3 id=\"理解測試趨動開發\"><a href=\"#理解測試趨動開發\" class=\"headerlink\" title=\"理解測試趨動開發\"></a>理解測試趨動開發</h3><ol>\n<li>TDD 不保證產品會成功</li>\n<li>步驟<ol>\n<li>寫一個失敗的測試</li>\n<li>寫一個符合測試預期的產品程式碼,以通過測試</li>\n<li>重構</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"TDD的核心技能\"><a href=\"#TDD的核心技能\" class=\"headerlink\" title=\"TDD的核心技能\"></a>TDD的核心技能</h3><ol>\n<li>可維護、可讀、可靠(這本書的目的)</li>\n<li>寫出可維護、可讀、可靠的測試不等於TDD,至於如何寫優秀的TDD,作者推薦閱讀<a href=\"https://www.tenlong.com.tw/products/9780321146533\" target=\"_blank\" rel=\"external\">〈Test-Driven Development:by Example〉</a></li>\n<li>就算執行TDD,也不保証能設計一個完善的系統,作者推薦閱讀<a href=\"http://tl.big5.zxhsd.com/kgsm/ts/big5/2010/07/30/1801246.shtml\" target=\"_blank\" rel=\"external\">Growing Object-Oriented Software, Guided by Tests</a>與<a href=\"https://www.tenlong.com.tw/products/9789862017050\" target=\"_blank\" rel=\"external\">無瑕的程式碼</a></li>\n</ol>\n<p>簡單說就是,</p>\n<ul>\n<li>寫好測試</li>\n<li>測試先行(TDD)</li>\n<li>設計</li>\n</ul>\n<p>作者認為這是三種技能, 同時學習三種技能門檻會相當的高, 最後導致放棄.</p>\n<h3 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h3><ul>\n<li>優秀的測試就是<ul>\n<li>自動化</li>\n<li>容易撰寫</li>\n<li>執行快速</li>\n<li>任何人都可以執行,並得到相同結果</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"揪錯\"><a href=\"#揪錯\" class=\"headerlink\" title=\"揪錯\"></a>揪錯</h2><p><img src=\"https://i.imgur.com/olnQxQ2.jpg\" alt=\"\"></p>\n<h2 id=\"本書資源\"><a href=\"#本書資源\" class=\"headerlink\" title=\"本書資源\"></a>本書資源</h2><ol>\n<li><a href=\"https://github.com/royosherove/aout2\" target=\"_blank\" rel=\"external\">Samples</a></li>\n<li><a href=\"http://artofunittesting.com/\" target=\"_blank\" rel=\"external\">The Art Of Unit Testing</a></li>\n<li><a href=\"http://osherove.com/videos/\" target=\"_blank\" rel=\"external\">Videos</a></li>\n</ol>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"要知道的事\"><a href=\"#要知道的事\" class=\"headerlink\" title=\"要知道的事\"></a>要知道的事</h2><ol>\n<li>這是<a href=\"http://www.books.com.tw/products/0010765689\" target=\"_blank\" rel=\"external\">單元測試的藝術</a>的閱讀筆記</li>\n<li>筆記的意思就是不一定會有心得</li>\n<li>這篇主要是導讀</li>\n</ol>\n<h2 id=\"譯者序\"><a href=\"#譯者序\" class=\"headerlink\" title=\"譯者序\"></a>譯者序</h2><ul>\n<li>TDD , Test First to Think First</li>\n<li>什麼是好的單元測試？</li>\n<li>單元測試三支柱:可信任 可讀性 可維護</li>\n<li>綠色安全區域</li>\n<li>實務上導入的指引</li>\n</ul>\n<h3 id=\"入門建議\"><a href=\"#入門建議\" class=\"headerlink\" title=\"入門建議\"></a>入門建議</h3><ul>\n<li>了解如何隔離相依(Part II)</li>\n<li>Stub 與 Mock 的差異,熟練隔離框架(NSubstitute)</li>\n<li>如何撰寫優秀的單元測試(Part III)</li>\n</ul>\n<h3 id=\"進階建議\"><a href=\"#進階建議\" class=\"headerlink\" title=\"進階建議\"></a>進階建議</h3><ul>\n<li>如何撰寫優秀的單元測試(Part III)</li>\n<li>如何在組織中導入單元測試(Part IV)</li>\n<li>針對遺留代碼的重構與測試,以及可測試性設計(Part IV)</li>\n</ul>\n<h3 id=\"避免\"><a href=\"#避免\" class=\"headerlink\" title=\"避免\"></a>避免</h3><ol>\n<li>測試不穩定</li>\n<li>過度指定</li>\n<li>一次不只測一件事</li>\n<li>測試程式重複過多</li>\n<li>可讀性差</li>\n</ol>\n<h2 id=\"關於本書\"><a href=\"#關於本書\" class=\"headerlink\" title=\"關於本書\"></a>關於本書</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>有寫測試, 也不保証專案成功,<br>一個失敗的單元測試案例,<br>作者歸納原因如下,  </p>\n<ul>\n<li>脆弱的測試(Prod改一點,測試就錯一大片)</li>\n<li>不易維護</li>\n<li>測試間相護依賴</li>\n<li>可讀性差</li>\n</ul>\n<h3 id=\"作者推薦的框架\"><a href=\"#作者推薦的框架\" class=\"headerlink\" title=\"作者推薦的框架\"></a>作者推薦的框架</h3><ul>\n<li><a href=\"http://nsubstitute.github.io\" target=\"_blank\" rel=\"external\">NSubstitute</a></li>\n<li><a href=\"https://github.com/FakeItEasy/FakeItEasy\" target=\"_blank\" rel=\"external\">FakeItEasy</a></li>\n</ul>\n<h3 id=\"學習路線圖\"><a href=\"#學習路線圖\" class=\"headerlink\" title=\"學習路線圖\"></a>學習路線圖</h3><ul>\n<li>Part I 基礎知識</li>\n<li>Part II 測試框架</li>\n<li>Part III 最佳實踐</li>\n<li>Part IV 組識導入/遺留代碼/設計</li>\n</ul>\n<h2 id=\"目錄\"><a href=\"#目錄\" class=\"headerlink\" title=\"目錄\"></a>目錄</h2><ol>\n<li>入門<ul>\n<li>什麼是優秀的單元測試</li>\n<li>單元測試與整合測試的分別</li>\n<li>第一個單元測試</li>\n</ul>\n</li>\n<li>核心技術<ul>\n<li>Stub</li>\n<li>IoC(DI)</li>\n<li>值、狀態與互動</li>\n<li>測試框架</li>\n<li>事件</li>\n<li>深入了解測試框架</li>\n</ul>\n</li>\n<li>測試程式碼<ul>\n<li>自動化</li>\n<li>綠色安全區域</li>\n<li>可信任/可維護/可讀性</li>\n</ul>\n</li>\n<li>設計與流程<ul>\n<li>組織導入</li>\n<li>遺留代碼</li>\n<li>設計與可測試性</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"第一章\"><a href=\"#第一章\" class=\"headerlink\" title=\"第一章\"></a>第一章</h2><h3 id=\"定義單元測試\"><a href=\"#定義單元測試\" class=\"headerlink\" title=\"定義單元測試\"></a>定義單元測試</h3><h3 id=\"什麼是優秀的單元測試\"><a href=\"#什麼是優秀的單元測試\" class=\"headerlink\" title=\"什麼是優秀的單元測試\"></a>什麼是優秀的單元測試</h3><ol>\n<li>自動化, 可重複執行</li>\n<li>容易實現*</li>\n<li>到第二天還有存在的意義(非臨時性的,ex:hotfix)</li>\n<li>任何都可以一鍵執行</li>\n<li>執行速度快</li>\n<li>結果一致</li>\n<li>可以完全控制(不與外部相依)</li>\n<li>獨立於其他測試</li>\n<li>失敗時,錯誤應該是明確的</li>\n</ol>\n<h3 id=\"整合測試\"><a href=\"#整合測試\" class=\"headerlink\" title=\"整合測試\"></a>整合測試</h3><ol>\n<li>整合測試相依於真實物件</li>\n<li>整合測試的結果不穩定</li>\n<li>整合測試與單元測試應該被分開(見ch7.2.2)</li>\n<li>整合測試執行時間長</li>\n<li>依據現實狀況無法完全控制</li>\n<li>缺點: 一次測試的東西太多</li>\n</ol>\n<h3 id=\"第一個單元測試\"><a href=\"#第一個單元測試\" class=\"headerlink\" title=\"第一個單元測試\"></a>第一個單元測試</h3><h3 id=\"理解測試趨動開發\"><a href=\"#理解測試趨動開發\" class=\"headerlink\" title=\"理解測試趨動開發\"></a>理解測試趨動開發</h3><ol>\n<li>TDD 不保證產品會成功</li>\n<li>步驟<ol>\n<li>寫一個失敗的測試</li>\n<li>寫一個符合測試預期的產品程式碼,以通過測試</li>\n<li>重構</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"TDD的核心技能\"><a href=\"#TDD的核心技能\" class=\"headerlink\" title=\"TDD的核心技能\"></a>TDD的核心技能</h3><ol>\n<li>可維護、可讀、可靠(這本書的目的)</li>\n<li>寫出可維護、可讀、可靠的測試不等於TDD,至於如何寫優秀的TDD,作者推薦閱讀<a href=\"https://www.tenlong.com.tw/products/9780321146533\" target=\"_blank\" rel=\"external\">〈Test-Driven Development:by Example〉</a></li>\n<li>就算執行TDD,也不保証能設計一個完善的系統,作者推薦閱讀<a href=\"http://tl.big5.zxhsd.com/kgsm/ts/big5/2010/07/30/1801246.shtml\" target=\"_blank\" rel=\"external\">Growing Object-Oriented Software, Guided by Tests</a>與<a href=\"https://www.tenlong.com.tw/products/9789862017050\" target=\"_blank\" rel=\"external\">無瑕的程式碼</a></li>\n</ol>\n<p>簡單說就是,</p>\n<ul>\n<li>寫好測試</li>\n<li>測試先行(TDD)</li>\n<li>設計</li>\n</ul>\n<p>作者認為這是三種技能, 同時學習三種技能門檻會相當的高, 最後導致放棄.</p>\n<h3 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h3><ul>\n<li>優秀的測試就是<ul>\n<li>自動化</li>\n<li>容易撰寫</li>\n<li>執行快速</li>\n<li>任何人都可以執行,並得到相同結果</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"揪錯\"><a href=\"#揪錯\" class=\"headerlink\" title=\"揪錯\"></a>揪錯</h2><p><img src=\"https://i.imgur.com/olnQxQ2.jpg\" alt=\"\"></p>\n<h2 id=\"本書資源\"><a href=\"#本書資源\" class=\"headerlink\" title=\"本書資源\"></a>本書資源</h2><ol>\n<li><a href=\"https://github.com/royosherove/aout2\" target=\"_blank\" rel=\"external\">Samples</a></li>\n<li><a href=\"http://artofunittesting.com/\" target=\"_blank\" rel=\"external\">The Art Of Unit Testing</a></li>\n<li><a href=\"http://osherove.com/videos/\" target=\"_blank\" rel=\"external\">Videos</a></li>\n</ol>\n<p>(fin)</p>\n"},{"title":"[閱讀筆記]穀倉效應 -- 第七章 取下鏡片: 醫生如何避免經濟專家的錯誤","date":"2018-05-28T17:23:10.000Z","_content":"\n## 第七章 取下鏡片: 醫生如何避免經濟專家的錯誤\n\n\n\n<div style=\"max-width:854px\"><div style=\"position:relative;height:0;padding-bottom:56.25%\"><iframe src=\"https://embed.ted.com/talks/lang/zh-tw/ursus_wehrli_tidies_up_art\" width=\"854\" height=\"480\" style=\"position:absolute;left:0;top:0;width:100%;height:100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen></iframe></div></div>\n\n### 克里夫蘭臨床醫學中心的歷史\n\n*1880 AD*\n草創時期隨克里夫蘭城市發展落成。\n\n一次大戰後,參考自軍醫的「小組合作模式」, \n改變醫院的運作模式。\n*---不同的背景人才組成的醫療小組---*\n固定薪資,分享紅利\n\n二次大戰後,克里夫蘭城市開始走下坡,  \n但靠著創意和明星醫師成功擴張醫院。\n\n二十世紀末,員工成長至4萬人,穀倉與官僚問題漸增,\n\n透過**空橋/電子系統/地道系統/機器人**等設施...,\n致力追求無縫連接。\n\n**隱憂: 技術與組織變得愈來愈複雜,反而是一種穀倉**\n\n### 醫生的故事\n\n寇斯巴洛夫有閱讀障礙,所以成績不好;\n\n用圖像式記憶法才完成學業;\n\n但是在實務層面卻大放異彩;\n當上了克里夫蘭臨床醫學中心執行長。\n\n越戰後的反思,為什麼醫界不是採取團隊工作?\n\n所以加入了克里夫蘭臨床醫學中心。\n\n結合縫紉發展改良了心臟手術。\n**創新就是要挑戰既有界線**\n\n### 改革\n\n1. 拿掉醫師與護士的界線\n`(Front-Backend?DevOps?Sales/BD/PD/RD?)`\n\n以患者與疾病為核心;\n不以醫界既有科別區分,成立新部門\n\n比如說,脊椎病症: \n神經內科/心理科/生醫影像科/整型外科 more ...\n~~`→ 大馬: rd1/rd2/.../Rd5/app/f2e/ait/PD`~~\n\n特殊規劃小組,制定改革時間表\n~~`One Team ? SRG ?`~~\n\n2. 外部體系(保險公司/醫療協會)仍是專門分科, \n所以又成立影子部門\n\n4. 改善空間,不只是功能性,鼓勵逗留與聊天\n\n結果\n\n1. 醫療浪費減少,成本更低,「把照顧病患而非官僚體制放第一」\n2. 每位醫生診斷時會想到不一只種界定分類方式\n3. 改善空間帶來的互動不亞於會議\n4. 急救中心轉診速度提昇\n\n### 原本的優勢\n\n- 固定薪資制,醫生不會為了績效多作治療\n- 原本就有的團隊合作文化\n\n### 小結與反思 \n1. 反思現有的分類,甚至加以顛覆\n2. 專業分工是組織變得複雜的龐大後的必然結果\n3. 創新就是要挑戰既有界線\n4. 以患者與疾病為核心 ? \n`→ 我們以○○為核心?股東、客戶、產品、品質、速度、員工`\n5. 我們作的不對,我們必須改變\n6. 改革會一直遇到問題,我們有解決問題的機制嗎 ?\n7. 克里夫蘭臨床醫學中心是從上到下的改革,我們的組織是嗎 ?\n\n(fin)","source":"_posts/books/the_silo_effect_7.md","raw":"---\ntitle: \"[閱讀筆記]穀倉效應 -- 第七章 取下鏡片: 醫生如何避免經濟專家的錯誤\"\ndate: 2018/05/29 01:23:10\ntag:\n  - 閱讀筆記\n---\n\n## 第七章 取下鏡片: 醫生如何避免經濟專家的錯誤\n\n\n\n<div style=\"max-width:854px\"><div style=\"position:relative;height:0;padding-bottom:56.25%\"><iframe src=\"https://embed.ted.com/talks/lang/zh-tw/ursus_wehrli_tidies_up_art\" width=\"854\" height=\"480\" style=\"position:absolute;left:0;top:0;width:100%;height:100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen></iframe></div></div>\n\n### 克里夫蘭臨床醫學中心的歷史\n\n*1880 AD*\n草創時期隨克里夫蘭城市發展落成。\n\n一次大戰後,參考自軍醫的「小組合作模式」, \n改變醫院的運作模式。\n*---不同的背景人才組成的醫療小組---*\n固定薪資,分享紅利\n\n二次大戰後,克里夫蘭城市開始走下坡,  \n但靠著創意和明星醫師成功擴張醫院。\n\n二十世紀末,員工成長至4萬人,穀倉與官僚問題漸增,\n\n透過**空橋/電子系統/地道系統/機器人**等設施...,\n致力追求無縫連接。\n\n**隱憂: 技術與組織變得愈來愈複雜,反而是一種穀倉**\n\n### 醫生的故事\n\n寇斯巴洛夫有閱讀障礙,所以成績不好;\n\n用圖像式記憶法才完成學業;\n\n但是在實務層面卻大放異彩;\n當上了克里夫蘭臨床醫學中心執行長。\n\n越戰後的反思,為什麼醫界不是採取團隊工作?\n\n所以加入了克里夫蘭臨床醫學中心。\n\n結合縫紉發展改良了心臟手術。\n**創新就是要挑戰既有界線**\n\n### 改革\n\n1. 拿掉醫師與護士的界線\n`(Front-Backend?DevOps?Sales/BD/PD/RD?)`\n\n以患者與疾病為核心;\n不以醫界既有科別區分,成立新部門\n\n比如說,脊椎病症: \n神經內科/心理科/生醫影像科/整型外科 more ...\n~~`→ 大馬: rd1/rd2/.../Rd5/app/f2e/ait/PD`~~\n\n特殊規劃小組,制定改革時間表\n~~`One Team ? SRG ?`~~\n\n2. 外部體系(保險公司/醫療協會)仍是專門分科, \n所以又成立影子部門\n\n4. 改善空間,不只是功能性,鼓勵逗留與聊天\n\n結果\n\n1. 醫療浪費減少,成本更低,「把照顧病患而非官僚體制放第一」\n2. 每位醫生診斷時會想到不一只種界定分類方式\n3. 改善空間帶來的互動不亞於會議\n4. 急救中心轉診速度提昇\n\n### 原本的優勢\n\n- 固定薪資制,醫生不會為了績效多作治療\n- 原本就有的團隊合作文化\n\n### 小結與反思 \n1. 反思現有的分類,甚至加以顛覆\n2. 專業分工是組織變得複雜的龐大後的必然結果\n3. 創新就是要挑戰既有界線\n4. 以患者與疾病為核心 ? \n`→ 我們以○○為核心?股東、客戶、產品、品質、速度、員工`\n5. 我們作的不對,我們必須改變\n6. 改革會一直遇到問題,我們有解決問題的機制嗎 ?\n7. 克里夫蘭臨床醫學中心是從上到下的改革,我們的組織是嗎 ?\n\n(fin)","slug":"books/the_silo_effect_7","published":1,"updated":"2018-05-28T17:31:48.007Z","_id":"cjhqivyh6005uyk557xn4dll2","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"第七章-取下鏡片-醫生如何避免經濟專家的錯誤\"><a href=\"#第七章-取下鏡片-醫生如何避免經濟專家的錯誤\" class=\"headerlink\" title=\"第七章 取下鏡片: 醫生如何避免經濟專家的錯誤\"></a>第七章 取下鏡片: 醫生如何避免經濟專家的錯誤</h2><div style=\"max-width:854px\"><div style=\"position:relative;height:0;padding-bottom:56.25%\"><iframe src=\"https://embed.ted.com/talks/lang/zh-tw/ursus_wehrli_tidies_up_art\" width=\"854\" height=\"480\" style=\"position:absolute;left:0;top:0;width:100%;height:100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen></iframe></div></div>\n\n<h3 id=\"克里夫蘭臨床醫學中心的歷史\"><a href=\"#克里夫蘭臨床醫學中心的歷史\" class=\"headerlink\" title=\"克里夫蘭臨床醫學中心的歷史\"></a>克里夫蘭臨床醫學中心的歷史</h3><p><em>1880 AD</em><br>草創時期隨克里夫蘭城市發展落成。</p>\n<p>一次大戰後,參考自軍醫的「小組合作模式」,<br>改變醫院的運作模式。<br><em>—不同的背景人才組成的醫療小組—</em><br>固定薪資,分享紅利</p>\n<p>二次大戰後,克里夫蘭城市開始走下坡,<br>但靠著創意和明星醫師成功擴張醫院。</p>\n<p>二十世紀末,員工成長至4萬人,穀倉與官僚問題漸增,</p>\n<p>透過<strong>空橋/電子系統/地道系統/機器人</strong>等設施…,<br>致力追求無縫連接。</p>\n<p><strong>隱憂: 技術與組織變得愈來愈複雜,反而是一種穀倉</strong></p>\n<h3 id=\"醫生的故事\"><a href=\"#醫生的故事\" class=\"headerlink\" title=\"醫生的故事\"></a>醫生的故事</h3><p>寇斯巴洛夫有閱讀障礙,所以成績不好;</p>\n<p>用圖像式記憶法才完成學業;</p>\n<p>但是在實務層面卻大放異彩;<br>當上了克里夫蘭臨床醫學中心執行長。</p>\n<p>越戰後的反思,為什麼醫界不是採取團隊工作?</p>\n<p>所以加入了克里夫蘭臨床醫學中心。</p>\n<p>結合縫紉發展改良了心臟手術。<br><strong>創新就是要挑戰既有界線</strong></p>\n<h3 id=\"改革\"><a href=\"#改革\" class=\"headerlink\" title=\"改革\"></a>改革</h3><ol>\n<li>拿掉醫師與護士的界線<br><code>(Front-Backend?DevOps?Sales/BD/PD/RD?)</code></li>\n</ol>\n<p>以患者與疾病為核心;<br>不以醫界既有科別區分,成立新部門</p>\n<p>比如說,脊椎病症:<br>神經內科/心理科/生醫影像科/整型外科 more …<br><del><code>→ 大馬: rd1/rd2/.../Rd5/app/f2e/ait/PD</code></del></p>\n<p>特殊規劃小組,制定改革時間表<br><del><code>One Team ? SRG ?</code></del></p>\n<ol>\n<li><p>外部體系(保險公司/醫療協會)仍是專門分科,<br>所以又成立影子部門</p>\n</li>\n<li><p>改善空間,不只是功能性,鼓勵逗留與聊天</p>\n</li>\n</ol>\n<p>結果</p>\n<ol>\n<li>醫療浪費減少,成本更低,「把照顧病患而非官僚體制放第一」</li>\n<li>每位醫生診斷時會想到不一只種界定分類方式</li>\n<li>改善空間帶來的互動不亞於會議</li>\n<li>急救中心轉診速度提昇</li>\n</ol>\n<h3 id=\"原本的優勢\"><a href=\"#原本的優勢\" class=\"headerlink\" title=\"原本的優勢\"></a>原本的優勢</h3><ul>\n<li>固定薪資制,醫生不會為了績效多作治療</li>\n<li>原本就有的團隊合作文化</li>\n</ul>\n<h3 id=\"小結與反思\"><a href=\"#小結與反思\" class=\"headerlink\" title=\"小結與反思\"></a>小結與反思</h3><ol>\n<li>反思現有的分類,甚至加以顛覆</li>\n<li>專業分工是組織變得複雜的龐大後的必然結果</li>\n<li>創新就是要挑戰既有界線</li>\n<li>以患者與疾病為核心 ?<br><code>→ 我們以○○為核心?股東、客戶、產品、品質、速度、員工</code></li>\n<li>我們作的不對,我們必須改變</li>\n<li>改革會一直遇到問題,我們有解決問題的機制嗎 ?</li>\n<li>克里夫蘭臨床醫學中心是從上到下的改革,我們的組織是嗎 ?</li>\n</ol>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"第七章-取下鏡片-醫生如何避免經濟專家的錯誤\"><a href=\"#第七章-取下鏡片-醫生如何避免經濟專家的錯誤\" class=\"headerlink\" title=\"第七章 取下鏡片: 醫生如何避免經濟專家的錯誤\"></a>第七章 取下鏡片: 醫生如何避免經濟專家的錯誤</h2><div style=\"max-width:854px\"><div style=\"position:relative;height:0;padding-bottom:56.25%\"><iframe src=\"https://embed.ted.com/talks/lang/zh-tw/ursus_wehrli_tidies_up_art\" width=\"854\" height=\"480\" style=\"position:absolute;left:0;top:0;width:100%;height:100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen></iframe></div></div>\n\n<h3 id=\"克里夫蘭臨床醫學中心的歷史\"><a href=\"#克里夫蘭臨床醫學中心的歷史\" class=\"headerlink\" title=\"克里夫蘭臨床醫學中心的歷史\"></a>克里夫蘭臨床醫學中心的歷史</h3><p><em>1880 AD</em><br>草創時期隨克里夫蘭城市發展落成。</p>\n<p>一次大戰後,參考自軍醫的「小組合作模式」,<br>改變醫院的運作模式。<br><em>—不同的背景人才組成的醫療小組—</em><br>固定薪資,分享紅利</p>\n<p>二次大戰後,克里夫蘭城市開始走下坡,<br>但靠著創意和明星醫師成功擴張醫院。</p>\n<p>二十世紀末,員工成長至4萬人,穀倉與官僚問題漸增,</p>\n<p>透過<strong>空橋/電子系統/地道系統/機器人</strong>等設施…,<br>致力追求無縫連接。</p>\n<p><strong>隱憂: 技術與組織變得愈來愈複雜,反而是一種穀倉</strong></p>\n<h3 id=\"醫生的故事\"><a href=\"#醫生的故事\" class=\"headerlink\" title=\"醫生的故事\"></a>醫生的故事</h3><p>寇斯巴洛夫有閱讀障礙,所以成績不好;</p>\n<p>用圖像式記憶法才完成學業;</p>\n<p>但是在實務層面卻大放異彩;<br>當上了克里夫蘭臨床醫學中心執行長。</p>\n<p>越戰後的反思,為什麼醫界不是採取團隊工作?</p>\n<p>所以加入了克里夫蘭臨床醫學中心。</p>\n<p>結合縫紉發展改良了心臟手術。<br><strong>創新就是要挑戰既有界線</strong></p>\n<h3 id=\"改革\"><a href=\"#改革\" class=\"headerlink\" title=\"改革\"></a>改革</h3><ol>\n<li>拿掉醫師與護士的界線<br><code>(Front-Backend?DevOps?Sales/BD/PD/RD?)</code></li>\n</ol>\n<p>以患者與疾病為核心;<br>不以醫界既有科別區分,成立新部門</p>\n<p>比如說,脊椎病症:<br>神經內科/心理科/生醫影像科/整型外科 more …<br><del><code>→ 大馬: rd1/rd2/.../Rd5/app/f2e/ait/PD</code></del></p>\n<p>特殊規劃小組,制定改革時間表<br><del><code>One Team ? SRG ?</code></del></p>\n<ol>\n<li><p>外部體系(保險公司/醫療協會)仍是專門分科,<br>所以又成立影子部門</p>\n</li>\n<li><p>改善空間,不只是功能性,鼓勵逗留與聊天</p>\n</li>\n</ol>\n<p>結果</p>\n<ol>\n<li>醫療浪費減少,成本更低,「把照顧病患而非官僚體制放第一」</li>\n<li>每位醫生診斷時會想到不一只種界定分類方式</li>\n<li>改善空間帶來的互動不亞於會議</li>\n<li>急救中心轉診速度提昇</li>\n</ol>\n<h3 id=\"原本的優勢\"><a href=\"#原本的優勢\" class=\"headerlink\" title=\"原本的優勢\"></a>原本的優勢</h3><ul>\n<li>固定薪資制,醫生不會為了績效多作治療</li>\n<li>原本就有的團隊合作文化</li>\n</ul>\n<h3 id=\"小結與反思\"><a href=\"#小結與反思\" class=\"headerlink\" title=\"小結與反思\"></a>小結與反思</h3><ol>\n<li>反思現有的分類,甚至加以顛覆</li>\n<li>專業分工是組織變得複雜的龐大後的必然結果</li>\n<li>創新就是要挑戰既有界線</li>\n<li>以患者與疾病為核心 ?<br><code>→ 我們以○○為核心?股東、客戶、產品、品質、速度、員工</code></li>\n<li>我們作的不對,我們必須改變</li>\n<li>改革會一直遇到問題,我們有解決問題的機制嗎 ?</li>\n<li>克里夫蘭臨床醫學中心是從上到下的改革,我們的組織是嗎 ?</li>\n</ol>\n<p>(fin)</p>\n"},{"title":"[閱讀筆記]異數","date":"2017-10-22T09:10:46.000Z","_content":"\n# 心得小結(2017.一讀)\n作者認為成功的主要原因是優勢的累績與努力，\n我們常說時間花在哪裡，成就就在哪裡，\n但是許多傑出的例子(莫札特與比爾。蓋茲)， \n除了努力外，還有幸運的(?)際遇，\n在很小的時候就開始邁向傑出，\n這讓我想到福原愛;從小就接觸桌球又有母親(導師)親自調校，\n但作者最終歸向時代與文化，兩個不可控的因素。\n努力只能讓你成為比一般人好的人，\n而加上際遇(時代與文化)，才能成為傑出(ex:世界前100之類)，\n相比「我比別人更認真-刻意練習．讓自己發光」，\n**我**書比較強調導師與信念(熱情)的重要性，\n而**異數**比較偏向命定論。\n\n並沒有很推薦，但是書中的馬太效應，\n以及透過學習別的語言來改變文化帶來的**業**，\n值得反思 .\n\n\n# 筆記\n## ch1 好上加好的馬太效應 \n1. 成功是優勢的累積\n2. 我們把成功與個人特質畫上等號，其他人因而失去出頭的機會。  \n我們制定出來的規則反而壓抑成就，我們太早宣布某些人是失敗者。  \n\n## ch2 一萬個小時的努力\n1. 他們的成功不完全是自已打造出來的，也是他們生長的時代造就的。\n\n## ch3 天才的迷思\n## ch4 天才的迷思．II\n- 才智和成就沒有絕對關係\n- 抽象智能與實用智能\n\t- 實用智能:社交常識與處事能力(後天習得，家庭)，知道在什麼時候用什麼方式以及說什麼，以達到最大效果\n- 階級的文化優勢\n\t- 勞動階級和貧窮人家的孩子，保守不信任別人，厭惡權威，拙於交際\n\n*feedback:* \n1. 千里馬常有，伯樂不常有。\n2. 我是勞動階級和貧窮人家的孩子\n3. 人脈的重要性。\n4. 如何與權威人士交際？\n\n## ch5 猶太律師的啟示\n1. 什麼都作，有生意上門就好了\n2. 機會其實是隱藏在逆境當中\n3. 你的父母是做什麼的，和你日後的成就大有關係\n4. 只要夠聰明就夠了\n\n\n*feedback*\n1. [七年級最慘的是哪一年次？](https://www.evernote.com/shard/s36/sh/79c0d125-1dc3-4a7e-aa46-5264b223d29d/d8bcb5338bbbf4fe)\n2. 生逢其時 vs 生不逢時\n\n\n## ch 6 以血還血\n## ch 7 空中危機\n1. 文化的影響\n2. 以大韓航空空難為例-文化的包袱\n3. 用語言改變文化的包袱(ex:英文)\n\n## ch 8 稻米文化與數學能力\n## ch 9 知識力學校\n## 後記 從牙買加到加拿大\n1. 亞洲數字發音較有規則且合乎邏輯\n2. 成功者的共通點就是努力\n\n## 書單\n1. 意外的百萬富翁(Jobs 傳記)\n\n## 其它\n1. 廖月娟的翻譯很不錯，感覺不出來是在讀外國人寫的書。\n2. [台灣財富排名690萬人是月光族230萬人有超3千萬資產](https://www.mobile01.com/topicdetail.php?f=291&t=5107472)\n\n(fin)","source":"_posts/books/book_outliers_the_story_of_success.md","raw":"---\ntitle: \"[閱讀筆記]異數\"\ndate: 2017/10/22 17:10:46\ntag:\n  - 閱讀筆記\n---\n\n# 心得小結(2017.一讀)\n作者認為成功的主要原因是優勢的累績與努力，\n我們常說時間花在哪裡，成就就在哪裡，\n但是許多傑出的例子(莫札特與比爾。蓋茲)， \n除了努力外，還有幸運的(?)際遇，\n在很小的時候就開始邁向傑出，\n這讓我想到福原愛;從小就接觸桌球又有母親(導師)親自調校，\n但作者最終歸向時代與文化，兩個不可控的因素。\n努力只能讓你成為比一般人好的人，\n而加上際遇(時代與文化)，才能成為傑出(ex:世界前100之類)，\n相比「我比別人更認真-刻意練習．讓自己發光」，\n**我**書比較強調導師與信念(熱情)的重要性，\n而**異數**比較偏向命定論。\n\n並沒有很推薦，但是書中的馬太效應，\n以及透過學習別的語言來改變文化帶來的**業**，\n值得反思 .\n\n\n# 筆記\n## ch1 好上加好的馬太效應 \n1. 成功是優勢的累積\n2. 我們把成功與個人特質畫上等號，其他人因而失去出頭的機會。  \n我們制定出來的規則反而壓抑成就，我們太早宣布某些人是失敗者。  \n\n## ch2 一萬個小時的努力\n1. 他們的成功不完全是自已打造出來的，也是他們生長的時代造就的。\n\n## ch3 天才的迷思\n## ch4 天才的迷思．II\n- 才智和成就沒有絕對關係\n- 抽象智能與實用智能\n\t- 實用智能:社交常識與處事能力(後天習得，家庭)，知道在什麼時候用什麼方式以及說什麼，以達到最大效果\n- 階級的文化優勢\n\t- 勞動階級和貧窮人家的孩子，保守不信任別人，厭惡權威，拙於交際\n\n*feedback:* \n1. 千里馬常有，伯樂不常有。\n2. 我是勞動階級和貧窮人家的孩子\n3. 人脈的重要性。\n4. 如何與權威人士交際？\n\n## ch5 猶太律師的啟示\n1. 什麼都作，有生意上門就好了\n2. 機會其實是隱藏在逆境當中\n3. 你的父母是做什麼的，和你日後的成就大有關係\n4. 只要夠聰明就夠了\n\n\n*feedback*\n1. [七年級最慘的是哪一年次？](https://www.evernote.com/shard/s36/sh/79c0d125-1dc3-4a7e-aa46-5264b223d29d/d8bcb5338bbbf4fe)\n2. 生逢其時 vs 生不逢時\n\n\n## ch 6 以血還血\n## ch 7 空中危機\n1. 文化的影響\n2. 以大韓航空空難為例-文化的包袱\n3. 用語言改變文化的包袱(ex:英文)\n\n## ch 8 稻米文化與數學能力\n## ch 9 知識力學校\n## 後記 從牙買加到加拿大\n1. 亞洲數字發音較有規則且合乎邏輯\n2. 成功者的共通點就是努力\n\n## 書單\n1. 意外的百萬富翁(Jobs 傳記)\n\n## 其它\n1. 廖月娟的翻譯很不錯，感覺不出來是在讀外國人寫的書。\n2. [台灣財富排名690萬人是月光族230萬人有超3千萬資產](https://www.mobile01.com/topicdetail.php?f=291&t=5107472)\n\n(fin)","slug":"books/book_outliers_the_story_of_success","published":1,"updated":"2018-01-30T16:29:44.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyh8005wyk55tbe4chzq","content":"<h1 id=\"心得小結-2017-一讀\"><a href=\"#心得小結-2017-一讀\" class=\"headerlink\" title=\"心得小結(2017.一讀)\"></a>心得小結(2017.一讀)</h1><p>作者認為成功的主要原因是優勢的累績與努力，<br>我們常說時間花在哪裡，成就就在哪裡，<br>但是許多傑出的例子(莫札特與比爾。蓋茲)，<br>除了努力外，還有幸運的(?)際遇，<br>在很小的時候就開始邁向傑出，<br>這讓我想到福原愛;從小就接觸桌球又有母親(導師)親自調校，<br>但作者最終歸向時代與文化，兩個不可控的因素。<br>努力只能讓你成為比一般人好的人，<br>而加上際遇(時代與文化)，才能成為傑出(ex:世界前100之類)，<br>相比「我比別人更認真-刻意練習．讓自己發光」，<br><strong>我</strong>書比較強調導師與信念(熱情)的重要性，<br>而<strong>異數</strong>比較偏向命定論。</p>\n<p>並沒有很推薦，但是書中的馬太效應，<br>以及透過學習別的語言來改變文化帶來的<strong>業</strong>，<br>值得反思 .</p>\n<h1 id=\"筆記\"><a href=\"#筆記\" class=\"headerlink\" title=\"筆記\"></a>筆記</h1><h2 id=\"ch1-好上加好的馬太效應\"><a href=\"#ch1-好上加好的馬太效應\" class=\"headerlink\" title=\"ch1 好上加好的馬太效應\"></a>ch1 好上加好的馬太效應</h2><ol>\n<li>成功是優勢的累積</li>\n<li>我們把成功與個人特質畫上等號，其他人因而失去出頭的機會。<br>我們制定出來的規則反而壓抑成就，我們太早宣布某些人是失敗者。  </li>\n</ol>\n<h2 id=\"ch2-一萬個小時的努力\"><a href=\"#ch2-一萬個小時的努力\" class=\"headerlink\" title=\"ch2 一萬個小時的努力\"></a>ch2 一萬個小時的努力</h2><ol>\n<li>他們的成功不完全是自已打造出來的，也是他們生長的時代造就的。</li>\n</ol>\n<h2 id=\"ch3-天才的迷思\"><a href=\"#ch3-天才的迷思\" class=\"headerlink\" title=\"ch3 天才的迷思\"></a>ch3 天才的迷思</h2><h2 id=\"ch4-天才的迷思．II\"><a href=\"#ch4-天才的迷思．II\" class=\"headerlink\" title=\"ch4 天才的迷思．II\"></a>ch4 天才的迷思．II</h2><ul>\n<li>才智和成就沒有絕對關係</li>\n<li>抽象智能與實用智能<ul>\n<li>實用智能:社交常識與處事能力(後天習得，家庭)，知道在什麼時候用什麼方式以及說什麼，以達到最大效果</li>\n</ul>\n</li>\n<li>階級的文化優勢<ul>\n<li>勞動階級和貧窮人家的孩子，保守不信任別人，厭惡權威，拙於交際</li>\n</ul>\n</li>\n</ul>\n<p><em>feedback:</em> </p>\n<ol>\n<li>千里馬常有，伯樂不常有。</li>\n<li>我是勞動階級和貧窮人家的孩子</li>\n<li>人脈的重要性。</li>\n<li>如何與權威人士交際？</li>\n</ol>\n<h2 id=\"ch5-猶太律師的啟示\"><a href=\"#ch5-猶太律師的啟示\" class=\"headerlink\" title=\"ch5 猶太律師的啟示\"></a>ch5 猶太律師的啟示</h2><ol>\n<li>什麼都作，有生意上門就好了</li>\n<li>機會其實是隱藏在逆境當中</li>\n<li>你的父母是做什麼的，和你日後的成就大有關係</li>\n<li>只要夠聰明就夠了</li>\n</ol>\n<p><em>feedback</em></p>\n<ol>\n<li><a href=\"https://www.evernote.com/shard/s36/sh/79c0d125-1dc3-4a7e-aa46-5264b223d29d/d8bcb5338bbbf4fe\" target=\"_blank\" rel=\"external\">七年級最慘的是哪一年次？</a></li>\n<li>生逢其時 vs 生不逢時</li>\n</ol>\n<h2 id=\"ch-6-以血還血\"><a href=\"#ch-6-以血還血\" class=\"headerlink\" title=\"ch 6 以血還血\"></a>ch 6 以血還血</h2><h2 id=\"ch-7-空中危機\"><a href=\"#ch-7-空中危機\" class=\"headerlink\" title=\"ch 7 空中危機\"></a>ch 7 空中危機</h2><ol>\n<li>文化的影響</li>\n<li>以大韓航空空難為例-文化的包袱</li>\n<li>用語言改變文化的包袱(ex:英文)</li>\n</ol>\n<h2 id=\"ch-8-稻米文化與數學能力\"><a href=\"#ch-8-稻米文化與數學能力\" class=\"headerlink\" title=\"ch 8 稻米文化與數學能力\"></a>ch 8 稻米文化與數學能力</h2><h2 id=\"ch-9-知識力學校\"><a href=\"#ch-9-知識力學校\" class=\"headerlink\" title=\"ch 9 知識力學校\"></a>ch 9 知識力學校</h2><h2 id=\"後記-從牙買加到加拿大\"><a href=\"#後記-從牙買加到加拿大\" class=\"headerlink\" title=\"後記 從牙買加到加拿大\"></a>後記 從牙買加到加拿大</h2><ol>\n<li>亞洲數字發音較有規則且合乎邏輯</li>\n<li>成功者的共通點就是努力</li>\n</ol>\n<h2 id=\"書單\"><a href=\"#書單\" class=\"headerlink\" title=\"書單\"></a>書單</h2><ol>\n<li>意外的百萬富翁(Jobs 傳記)</li>\n</ol>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><ol>\n<li>廖月娟的翻譯很不錯，感覺不出來是在讀外國人寫的書。</li>\n<li><a href=\"https://www.mobile01.com/topicdetail.php?f=291&amp;t=5107472\" target=\"_blank\" rel=\"external\">台灣財富排名690萬人是月光族230萬人有超3千萬資產</a></li>\n</ol>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"心得小結-2017-一讀\"><a href=\"#心得小結-2017-一讀\" class=\"headerlink\" title=\"心得小結(2017.一讀)\"></a>心得小結(2017.一讀)</h1><p>作者認為成功的主要原因是優勢的累績與努力，<br>我們常說時間花在哪裡，成就就在哪裡，<br>但是許多傑出的例子(莫札特與比爾。蓋茲)，<br>除了努力外，還有幸運的(?)際遇，<br>在很小的時候就開始邁向傑出，<br>這讓我想到福原愛;從小就接觸桌球又有母親(導師)親自調校，<br>但作者最終歸向時代與文化，兩個不可控的因素。<br>努力只能讓你成為比一般人好的人，<br>而加上際遇(時代與文化)，才能成為傑出(ex:世界前100之類)，<br>相比「我比別人更認真-刻意練習．讓自己發光」，<br><strong>我</strong>書比較強調導師與信念(熱情)的重要性，<br>而<strong>異數</strong>比較偏向命定論。</p>\n<p>並沒有很推薦，但是書中的馬太效應，<br>以及透過學習別的語言來改變文化帶來的<strong>業</strong>，<br>值得反思 .</p>\n<h1 id=\"筆記\"><a href=\"#筆記\" class=\"headerlink\" title=\"筆記\"></a>筆記</h1><h2 id=\"ch1-好上加好的馬太效應\"><a href=\"#ch1-好上加好的馬太效應\" class=\"headerlink\" title=\"ch1 好上加好的馬太效應\"></a>ch1 好上加好的馬太效應</h2><ol>\n<li>成功是優勢的累積</li>\n<li>我們把成功與個人特質畫上等號，其他人因而失去出頭的機會。<br>我們制定出來的規則反而壓抑成就，我們太早宣布某些人是失敗者。  </li>\n</ol>\n<h2 id=\"ch2-一萬個小時的努力\"><a href=\"#ch2-一萬個小時的努力\" class=\"headerlink\" title=\"ch2 一萬個小時的努力\"></a>ch2 一萬個小時的努力</h2><ol>\n<li>他們的成功不完全是自已打造出來的，也是他們生長的時代造就的。</li>\n</ol>\n<h2 id=\"ch3-天才的迷思\"><a href=\"#ch3-天才的迷思\" class=\"headerlink\" title=\"ch3 天才的迷思\"></a>ch3 天才的迷思</h2><h2 id=\"ch4-天才的迷思．II\"><a href=\"#ch4-天才的迷思．II\" class=\"headerlink\" title=\"ch4 天才的迷思．II\"></a>ch4 天才的迷思．II</h2><ul>\n<li>才智和成就沒有絕對關係</li>\n<li>抽象智能與實用智能<ul>\n<li>實用智能:社交常識與處事能力(後天習得，家庭)，知道在什麼時候用什麼方式以及說什麼，以達到最大效果</li>\n</ul>\n</li>\n<li>階級的文化優勢<ul>\n<li>勞動階級和貧窮人家的孩子，保守不信任別人，厭惡權威，拙於交際</li>\n</ul>\n</li>\n</ul>\n<p><em>feedback:</em> </p>\n<ol>\n<li>千里馬常有，伯樂不常有。</li>\n<li>我是勞動階級和貧窮人家的孩子</li>\n<li>人脈的重要性。</li>\n<li>如何與權威人士交際？</li>\n</ol>\n<h2 id=\"ch5-猶太律師的啟示\"><a href=\"#ch5-猶太律師的啟示\" class=\"headerlink\" title=\"ch5 猶太律師的啟示\"></a>ch5 猶太律師的啟示</h2><ol>\n<li>什麼都作，有生意上門就好了</li>\n<li>機會其實是隱藏在逆境當中</li>\n<li>你的父母是做什麼的，和你日後的成就大有關係</li>\n<li>只要夠聰明就夠了</li>\n</ol>\n<p><em>feedback</em></p>\n<ol>\n<li><a href=\"https://www.evernote.com/shard/s36/sh/79c0d125-1dc3-4a7e-aa46-5264b223d29d/d8bcb5338bbbf4fe\" target=\"_blank\" rel=\"external\">七年級最慘的是哪一年次？</a></li>\n<li>生逢其時 vs 生不逢時</li>\n</ol>\n<h2 id=\"ch-6-以血還血\"><a href=\"#ch-6-以血還血\" class=\"headerlink\" title=\"ch 6 以血還血\"></a>ch 6 以血還血</h2><h2 id=\"ch-7-空中危機\"><a href=\"#ch-7-空中危機\" class=\"headerlink\" title=\"ch 7 空中危機\"></a>ch 7 空中危機</h2><ol>\n<li>文化的影響</li>\n<li>以大韓航空空難為例-文化的包袱</li>\n<li>用語言改變文化的包袱(ex:英文)</li>\n</ol>\n<h2 id=\"ch-8-稻米文化與數學能力\"><a href=\"#ch-8-稻米文化與數學能力\" class=\"headerlink\" title=\"ch 8 稻米文化與數學能力\"></a>ch 8 稻米文化與數學能力</h2><h2 id=\"ch-9-知識力學校\"><a href=\"#ch-9-知識力學校\" class=\"headerlink\" title=\"ch 9 知識力學校\"></a>ch 9 知識力學校</h2><h2 id=\"後記-從牙買加到加拿大\"><a href=\"#後記-從牙買加到加拿大\" class=\"headerlink\" title=\"後記 從牙買加到加拿大\"></a>後記 從牙買加到加拿大</h2><ol>\n<li>亞洲數字發音較有規則且合乎邏輯</li>\n<li>成功者的共通點就是努力</li>\n</ol>\n<h2 id=\"書單\"><a href=\"#書單\" class=\"headerlink\" title=\"書單\"></a>書單</h2><ol>\n<li>意外的百萬富翁(Jobs 傳記)</li>\n</ol>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><ol>\n<li>廖月娟的翻譯很不錯，感覺不出來是在讀外國人寫的書。</li>\n<li><a href=\"https://www.mobile01.com/topicdetail.php?f=291&amp;t=5107472\" target=\"_blank\" rel=\"external\">台灣財富排名690萬人是月光族230萬人有超3千萬資產</a></li>\n</ol>\n<p>(fin)</p>\n"},{"title":"[翻譯]為什麼IBM/Google/Microsoft都要在今年增加對台投資?","date":"2018-04-08T15:22:20.000Z","_content":"## [原文](https://www.forbes.com/sites/ralphjennings/2018/04/04/why-google-ibm-and-microsoft-all-decided-to-expand-in-taiwan-this-year/#4fda82d5c721)\n\n## 重點節錄\n1. [Google 宣布要在台灣顧用300名員工並訓練5000名學生在人工智能領域](https://www.blog.google/topics/google-asia/intelligent-taiwan/)\n2. [微軟也表明未來要在台灣發展AI業務,5年內投資3400萬鎂並招聘200人](https://news.microsoft.com/apac/2018/01/12/microsoft-launches-artificial-intelligence-research-hub-taiwan/)\n3. [IBM也表示將在台灣擴展AI/區塊鏈/雲計算等相關的研發中心,並增聘100人以上](https://meet.bnext.com.tw/intl/articles/view/42553)\n\n\n## 美國的投資與台灣的人材\n### 台灣的優點\n1. 人材容易訓練適應AI等新產業的工作\n\t- 通常大學畢業生都有基礎工程知識\n\t- 台灣的擁有製造業供應鏈(跨軟韌硬體)的人材\n\t- 便宜(Orz)\n2. 地理優勢(東北亞\\東南亞\\中國)\n3. 台灣目前政策\n\t- IoT(物聯網)與智能機器\n\t- 正在進行產業轉型(硬轉軟)\n4. 其它\n\t- 穩定且便宜的電力與其它基礎建設\n\t- 合理的成本結構\n\n### 中國的競爭\n1. 人材更便宜\n2. 美中貿易戰的擔心\n\t- 資訊安全\n\t- 智慧財產\n\n### 其它\n- [Google 在台職缺](https://careers.google.com/jobs#t=sq&q=j&li=20&l=false&jl=25.0329636%3A121.56542680000007%3ATaipei+City%2C+Taiwan%3ATW%3A%3A13.76366184019967%3AADMIN_1&jld=10&&jcoid=7c8c6665-81cf-4e11-8fc9-ec1d6a69120c&jcoid=e43afd0d-d215-45db-a154-5386c9036525&)\n- **[Google 的 Machine Learning 教程](https://developers.google.com/machine-learning/crash-course/)**\n- [IBM 職缺](https://krb-sjobs.brassring.com/TGnewUI/Search/Home/Home?partnerid=26059&siteid=5016&cm_mc_uid=66190819784615216541845&cm_mc_sid_50200000=93350001523199145451#keyWordSearch=&locationSearch=Taiwan&City%20%2F%20Township%20%2F%20Village=TAIPEI&Country%2FRegion=Taiwan)\n\n(fin)","source":"_posts/2018/why-google-ibm-and-microsoft-all-decided-to-expand-in-taiwan-this-year.md","raw":"---\ntitle: \"[翻譯]為什麼IBM/Google/Microsoft都要在今年增加對台投資?\"\ndate: 2018/04/08 23:22:20\ntag:\n  - IBM\n  - Google\n  - Microsoft\n  - Taiwan\n  - IoT\n  - AI\n  - Machine Learning\n---\n## [原文](https://www.forbes.com/sites/ralphjennings/2018/04/04/why-google-ibm-and-microsoft-all-decided-to-expand-in-taiwan-this-year/#4fda82d5c721)\n\n## 重點節錄\n1. [Google 宣布要在台灣顧用300名員工並訓練5000名學生在人工智能領域](https://www.blog.google/topics/google-asia/intelligent-taiwan/)\n2. [微軟也表明未來要在台灣發展AI業務,5年內投資3400萬鎂並招聘200人](https://news.microsoft.com/apac/2018/01/12/microsoft-launches-artificial-intelligence-research-hub-taiwan/)\n3. [IBM也表示將在台灣擴展AI/區塊鏈/雲計算等相關的研發中心,並增聘100人以上](https://meet.bnext.com.tw/intl/articles/view/42553)\n\n\n## 美國的投資與台灣的人材\n### 台灣的優點\n1. 人材容易訓練適應AI等新產業的工作\n\t- 通常大學畢業生都有基礎工程知識\n\t- 台灣的擁有製造業供應鏈(跨軟韌硬體)的人材\n\t- 便宜(Orz)\n2. 地理優勢(東北亞\\東南亞\\中國)\n3. 台灣目前政策\n\t- IoT(物聯網)與智能機器\n\t- 正在進行產業轉型(硬轉軟)\n4. 其它\n\t- 穩定且便宜的電力與其它基礎建設\n\t- 合理的成本結構\n\n### 中國的競爭\n1. 人材更便宜\n2. 美中貿易戰的擔心\n\t- 資訊安全\n\t- 智慧財產\n\n### 其它\n- [Google 在台職缺](https://careers.google.com/jobs#t=sq&q=j&li=20&l=false&jl=25.0329636%3A121.56542680000007%3ATaipei+City%2C+Taiwan%3ATW%3A%3A13.76366184019967%3AADMIN_1&jld=10&&jcoid=7c8c6665-81cf-4e11-8fc9-ec1d6a69120c&jcoid=e43afd0d-d215-45db-a154-5386c9036525&)\n- **[Google 的 Machine Learning 教程](https://developers.google.com/machine-learning/crash-course/)**\n- [IBM 職缺](https://krb-sjobs.brassring.com/TGnewUI/Search/Home/Home?partnerid=26059&siteid=5016&cm_mc_uid=66190819784615216541845&cm_mc_sid_50200000=93350001523199145451#keyWordSearch=&locationSearch=Taiwan&City%20%2F%20Township%20%2F%20Village=TAIPEI&Country%2FRegion=Taiwan)\n\n(fin)","slug":"2018/why-google-ibm-and-microsoft-all-decided-to-expand-in-taiwan-this-year","published":1,"updated":"2018-04-08T15:49:49.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyhb005yyk55p1zm7q9u","content":"<h2 id=\"原文\"><a href=\"#原文\" class=\"headerlink\" title=\"原文\"></a><a href=\"https://www.forbes.com/sites/ralphjennings/2018/04/04/why-google-ibm-and-microsoft-all-decided-to-expand-in-taiwan-this-year/#4fda82d5c721\" target=\"_blank\" rel=\"external\">原文</a></h2><h2 id=\"重點節錄\"><a href=\"#重點節錄\" class=\"headerlink\" title=\"重點節錄\"></a>重點節錄</h2><ol>\n<li><a href=\"https://www.blog.google/topics/google-asia/intelligent-taiwan/\" target=\"_blank\" rel=\"external\">Google 宣布要在台灣顧用300名員工並訓練5000名學生在人工智能領域</a></li>\n<li><a href=\"https://news.microsoft.com/apac/2018/01/12/microsoft-launches-artificial-intelligence-research-hub-taiwan/\" target=\"_blank\" rel=\"external\">微軟也表明未來要在台灣發展AI業務,5年內投資3400萬鎂並招聘200人</a></li>\n<li><a href=\"https://meet.bnext.com.tw/intl/articles/view/42553\" target=\"_blank\" rel=\"external\">IBM也表示將在台灣擴展AI/區塊鏈/雲計算等相關的研發中心,並增聘100人以上</a></li>\n</ol>\n<h2 id=\"美國的投資與台灣的人材\"><a href=\"#美國的投資與台灣的人材\" class=\"headerlink\" title=\"美國的投資與台灣的人材\"></a>美國的投資與台灣的人材</h2><h3 id=\"台灣的優點\"><a href=\"#台灣的優點\" class=\"headerlink\" title=\"台灣的優點\"></a>台灣的優點</h3><ol>\n<li>人材容易訓練適應AI等新產業的工作<ul>\n<li>通常大學畢業生都有基礎工程知識</li>\n<li>台灣的擁有製造業供應鏈(跨軟韌硬體)的人材</li>\n<li>便宜(Orz)</li>\n</ul>\n</li>\n<li>地理優勢(東北亞\\東南亞\\中國)</li>\n<li>台灣目前政策<ul>\n<li>IoT(物聯網)與智能機器</li>\n<li>正在進行產業轉型(硬轉軟)</li>\n</ul>\n</li>\n<li>其它<ul>\n<li>穩定且便宜的電力與其它基礎建設</li>\n<li>合理的成本結構</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"中國的競爭\"><a href=\"#中國的競爭\" class=\"headerlink\" title=\"中國的競爭\"></a>中國的競爭</h3><ol>\n<li>人材更便宜</li>\n<li>美中貿易戰的擔心<ul>\n<li>資訊安全</li>\n<li>智慧財產</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><ul>\n<li><a href=\"https://careers.google.com/jobs#t=sq&amp;q=j&amp;li=20&amp;l=false&amp;jl=25.0329636%3A121.56542680000007%3ATaipei+City%2C+Taiwan%3ATW%3A%3A13.76366184019967%3AADMIN_1&amp;jld=10&amp;&amp;jcoid=7c8c6665-81cf-4e11-8fc9-ec1d6a69120c&amp;jcoid=e43afd0d-d215-45db-a154-5386c9036525&amp;\" target=\"_blank\" rel=\"external\">Google 在台職缺</a></li>\n<li><strong><a href=\"https://developers.google.com/machine-learning/crash-course/\" target=\"_blank\" rel=\"external\">Google 的 Machine Learning 教程</a></strong></li>\n<li><a href=\"https://krb-sjobs.brassring.com/TGnewUI/Search/Home/Home?partnerid=26059&amp;siteid=5016&amp;cm_mc_uid=66190819784615216541845&amp;cm_mc_sid_50200000=93350001523199145451#keyWordSearch=&amp;locationSearch=Taiwan&amp;City%20%2F%20Township%20%2F%20Village=TAIPEI&amp;Country%2FRegion=Taiwan\" target=\"_blank\" rel=\"external\">IBM 職缺</a></li>\n</ul>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"原文\"><a href=\"#原文\" class=\"headerlink\" title=\"原文\"></a><a href=\"https://www.forbes.com/sites/ralphjennings/2018/04/04/why-google-ibm-and-microsoft-all-decided-to-expand-in-taiwan-this-year/#4fda82d5c721\" target=\"_blank\" rel=\"external\">原文</a></h2><h2 id=\"重點節錄\"><a href=\"#重點節錄\" class=\"headerlink\" title=\"重點節錄\"></a>重點節錄</h2><ol>\n<li><a href=\"https://www.blog.google/topics/google-asia/intelligent-taiwan/\" target=\"_blank\" rel=\"external\">Google 宣布要在台灣顧用300名員工並訓練5000名學生在人工智能領域</a></li>\n<li><a href=\"https://news.microsoft.com/apac/2018/01/12/microsoft-launches-artificial-intelligence-research-hub-taiwan/\" target=\"_blank\" rel=\"external\">微軟也表明未來要在台灣發展AI業務,5年內投資3400萬鎂並招聘200人</a></li>\n<li><a href=\"https://meet.bnext.com.tw/intl/articles/view/42553\" target=\"_blank\" rel=\"external\">IBM也表示將在台灣擴展AI/區塊鏈/雲計算等相關的研發中心,並增聘100人以上</a></li>\n</ol>\n<h2 id=\"美國的投資與台灣的人材\"><a href=\"#美國的投資與台灣的人材\" class=\"headerlink\" title=\"美國的投資與台灣的人材\"></a>美國的投資與台灣的人材</h2><h3 id=\"台灣的優點\"><a href=\"#台灣的優點\" class=\"headerlink\" title=\"台灣的優點\"></a>台灣的優點</h3><ol>\n<li>人材容易訓練適應AI等新產業的工作<ul>\n<li>通常大學畢業生都有基礎工程知識</li>\n<li>台灣的擁有製造業供應鏈(跨軟韌硬體)的人材</li>\n<li>便宜(Orz)</li>\n</ul>\n</li>\n<li>地理優勢(東北亞\\東南亞\\中國)</li>\n<li>台灣目前政策<ul>\n<li>IoT(物聯網)與智能機器</li>\n<li>正在進行產業轉型(硬轉軟)</li>\n</ul>\n</li>\n<li>其它<ul>\n<li>穩定且便宜的電力與其它基礎建設</li>\n<li>合理的成本結構</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"中國的競爭\"><a href=\"#中國的競爭\" class=\"headerlink\" title=\"中國的競爭\"></a>中國的競爭</h3><ol>\n<li>人材更便宜</li>\n<li>美中貿易戰的擔心<ul>\n<li>資訊安全</li>\n<li>智慧財產</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><ul>\n<li><a href=\"https://careers.google.com/jobs#t=sq&amp;q=j&amp;li=20&amp;l=false&amp;jl=25.0329636%3A121.56542680000007%3ATaipei+City%2C+Taiwan%3ATW%3A%3A13.76366184019967%3AADMIN_1&amp;jld=10&amp;&amp;jcoid=7c8c6665-81cf-4e11-8fc9-ec1d6a69120c&amp;jcoid=e43afd0d-d215-45db-a154-5386c9036525&amp;\" target=\"_blank\" rel=\"external\">Google 在台職缺</a></li>\n<li><strong><a href=\"https://developers.google.com/machine-learning/crash-course/\" target=\"_blank\" rel=\"external\">Google 的 Machine Learning 教程</a></strong></li>\n<li><a href=\"https://krb-sjobs.brassring.com/TGnewUI/Search/Home/Home?partnerid=26059&amp;siteid=5016&amp;cm_mc_uid=66190819784615216541845&amp;cm_mc_sid_50200000=93350001523199145451#keyWordSearch=&amp;locationSearch=Taiwan&amp;City%20%2F%20Township%20%2F%20Village=TAIPEI&amp;Country%2FRegion=Taiwan\" target=\"_blank\" rel=\"external\">IBM 職缺</a></li>\n</ul>\n<p>(fin)</p>\n"},{"title":"[閱讀筆記]其實，你不是沒有時間","date":"2017-03-25T16:08:46.000Z","_content":"\n## 六個工具與餐盤\n- 原則:**工具簡單至上**\n- 面對突發狀況\n\n1. 月計劃表 (`google calendar`)\n\t- 與自已約會(保留給自已的時間)^註1^\n\t- 工作與私人不要分開\n\t- 日期與期限 \n2. Todo List (`inbox`)\n\t- 提醒與集中管理\n\t- 每天都要檢查一遍^註2^ \n3. 日計劃表 (`google calendar`)\n\t- 當日約會 & 活動清單\n\t- 活動清單是你當天的籌碼 也是出現突發 \n4. 隨手記 (`筆記本&Evernote`)\n\t- 接受任務，再轉到其他工具之中^註3^\t \n5. 隨身資料庫 (`google drive`)\n\t- 將整理過的資料封存在隨手可得的地方 \n \tex: 上課或分享的簡報、 專案記錄等…有大量圖片、文件等\n6. 溝通工具 (`line & slack`)\n\t- 一天檢查電子郵件3~6次就夠了\n\n## 把時間變空間(視覺化)\n- 個人、家庭、工作取得平衡\n- 安排30分鐘規劃一天的活動\n\t- 創造性活動安排在精力最佳的時段\n\t- 安排獨處的時間\n\t- 安排恢復精力的時間\n\t- 預留時間給可能發生的突發事件\n- 將所有的事情分為紅綠黃(灰)^註4^，綠色應該越多越好，灰色越少越好。\n<table>\n<tr><td>6 am</td><td>7 am</td><td>8 am</td><td>9 am</td><td>10 am</td><td>11 am</td><td>12 am</td><td>1 pm</td></tr>\n<tr><td>5 am</td><td colspan=\"3\" rowspan=\"4\" valign=\"top\">本日活動</td><td colspan=\"3\" rowspan=\"4\" valign=\"top\">隨手記</td><td>2 pm</td></tr>\n<tr><td>4 am</td><td>3 pm</td></tr>\n<tr><td>3 am</td><td>4 pm</td></tr>\n<tr><td>2 am</td><td>5 pm</td></tr>\n<tr><td>1 am</td><td>12 am</td><td>11 pm</td><td>10 pm</td><td>9 pm</td><td>8 pm</td><td>7 pm</td><td>6 pm</td></tr>\n</table>\n\n## 應變執行，計劃趕不上變化\n- 調整事情的順序\n- 養成習慣\n- 臨機應變\n- 小心多工\n- 保留風格\n\n## 註\n1. 分別為聖的時間，請參考`與時間作朋友`\n2. 利用分別為聖的時間檢查\n3. 餐盤中間的區塊可以用來作當日的活動清單 & 隨手記\n4. 可以參考四象限 重要-緊急(紅)、不重要-緊急(黃)、重要-不緊急(綠)、不重要-不緊急(灰)\n\n(fin)\n","source":"_posts/books/book_attack_your_day.md","raw":"---\ntitle: \"[閱讀筆記]其實，你不是沒有時間\"\ndate: 2017/03/26 00:08:46\ntag:\n  - 時間管理\n  - 閱讀筆記\n---\n\n## 六個工具與餐盤\n- 原則:**工具簡單至上**\n- 面對突發狀況\n\n1. 月計劃表 (`google calendar`)\n\t- 與自已約會(保留給自已的時間)^註1^\n\t- 工作與私人不要分開\n\t- 日期與期限 \n2. Todo List (`inbox`)\n\t- 提醒與集中管理\n\t- 每天都要檢查一遍^註2^ \n3. 日計劃表 (`google calendar`)\n\t- 當日約會 & 活動清單\n\t- 活動清單是你當天的籌碼 也是出現突發 \n4. 隨手記 (`筆記本&Evernote`)\n\t- 接受任務，再轉到其他工具之中^註3^\t \n5. 隨身資料庫 (`google drive`)\n\t- 將整理過的資料封存在隨手可得的地方 \n \tex: 上課或分享的簡報、 專案記錄等…有大量圖片、文件等\n6. 溝通工具 (`line & slack`)\n\t- 一天檢查電子郵件3~6次就夠了\n\n## 把時間變空間(視覺化)\n- 個人、家庭、工作取得平衡\n- 安排30分鐘規劃一天的活動\n\t- 創造性活動安排在精力最佳的時段\n\t- 安排獨處的時間\n\t- 安排恢復精力的時間\n\t- 預留時間給可能發生的突發事件\n- 將所有的事情分為紅綠黃(灰)^註4^，綠色應該越多越好，灰色越少越好。\n<table>\n<tr><td>6 am</td><td>7 am</td><td>8 am</td><td>9 am</td><td>10 am</td><td>11 am</td><td>12 am</td><td>1 pm</td></tr>\n<tr><td>5 am</td><td colspan=\"3\" rowspan=\"4\" valign=\"top\">本日活動</td><td colspan=\"3\" rowspan=\"4\" valign=\"top\">隨手記</td><td>2 pm</td></tr>\n<tr><td>4 am</td><td>3 pm</td></tr>\n<tr><td>3 am</td><td>4 pm</td></tr>\n<tr><td>2 am</td><td>5 pm</td></tr>\n<tr><td>1 am</td><td>12 am</td><td>11 pm</td><td>10 pm</td><td>9 pm</td><td>8 pm</td><td>7 pm</td><td>6 pm</td></tr>\n</table>\n\n## 應變執行，計劃趕不上變化\n- 調整事情的順序\n- 養成習慣\n- 臨機應變\n- 小心多工\n- 保留風格\n\n## 註\n1. 分別為聖的時間，請參考`與時間作朋友`\n2. 利用分別為聖的時間檢查\n3. 餐盤中間的區塊可以用來作當日的活動清單 & 隨手記\n4. 可以參考四象限 重要-緊急(紅)、不重要-緊急(黃)、重要-不緊急(綠)、不重要-不緊急(灰)\n\n(fin)\n","slug":"books/book_attack_your_day","published":1,"updated":"2018-01-30T16:29:44.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyhf0061yk556cpcp7fw","content":"<h2 id=\"六個工具與餐盤\"><a href=\"#六個工具與餐盤\" class=\"headerlink\" title=\"六個工具與餐盤\"></a>六個工具與餐盤</h2><ul>\n<li>原則:<strong>工具簡單至上</strong></li>\n<li>面對突發狀況</li>\n</ul>\n<ol>\n<li>月計劃表 (<code>google calendar</code>)<ul>\n<li>與自已約會(保留給自已的時間)^註1^</li>\n<li>工作與私人不要分開</li>\n<li>日期與期限 </li>\n</ul>\n</li>\n<li>Todo List (<code>inbox</code>)<ul>\n<li>提醒與集中管理</li>\n<li>每天都要檢查一遍^註2^ </li>\n</ul>\n</li>\n<li>日計劃表 (<code>google calendar</code>)<ul>\n<li>當日約會 &amp; 活動清單</li>\n<li>活動清單是你當天的籌碼 也是出現突發 </li>\n</ul>\n</li>\n<li>隨手記 (<code>筆記本&amp;Evernote</code>)<ul>\n<li>接受任務，再轉到其他工具之中^註3^     </li>\n</ul>\n</li>\n<li>隨身資料庫 (<code>google drive</code>)<ul>\n<li>將整理過的資料封存在隨手可得的地方<br>ex: 上課或分享的簡報、 專案記錄等…有大量圖片、文件等</li>\n</ul>\n</li>\n<li>溝通工具 (<code>line &amp; slack</code>)<ul>\n<li>一天檢查電子郵件3~6次就夠了</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"把時間變空間-視覺化\"><a href=\"#把時間變空間-視覺化\" class=\"headerlink\" title=\"把時間變空間(視覺化)\"></a>把時間變空間(視覺化)</h2><ul>\n<li>個人、家庭、工作取得平衡</li>\n<li>安排30分鐘規劃一天的活動<ul>\n<li>創造性活動安排在精力最佳的時段</li>\n<li>安排獨處的時間</li>\n<li>安排恢復精力的時間</li>\n<li>預留時間給可能發生的突發事件</li>\n</ul>\n</li>\n<li>將所有的事情分為紅綠黃(灰)^註4^，綠色應該越多越好，灰色越少越好。<table><br><tr><td>6 am</td><td>7 am</td><td>8 am</td><td>9 am</td><td>10 am</td><td>11 am</td><td>12 am</td><td>1 pm</td></tr><br><tr><td>5 am</td><td colspan=\"3\" rowspan=\"4\" valign=\"top\">本日活動</td><td colspan=\"3\" rowspan=\"4\" valign=\"top\">隨手記</td><td>2 pm</td></tr><br><tr><td>4 am</td><td>3 pm</td></tr><br><tr><td>3 am</td><td>4 pm</td></tr><br><tr><td>2 am</td><td>5 pm</td></tr><br><tr><td>1 am</td><td>12 am</td><td>11 pm</td><td>10 pm</td><td>9 pm</td><td>8 pm</td><td>7 pm</td><td>6 pm</td></tr><br></table>\n\n</li>\n</ul>\n<h2 id=\"應變執行，計劃趕不上變化\"><a href=\"#應變執行，計劃趕不上變化\" class=\"headerlink\" title=\"應變執行，計劃趕不上變化\"></a>應變執行，計劃趕不上變化</h2><ul>\n<li>調整事情的順序</li>\n<li>養成習慣</li>\n<li>臨機應變</li>\n<li>小心多工</li>\n<li>保留風格</li>\n</ul>\n<h2 id=\"註\"><a href=\"#註\" class=\"headerlink\" title=\"註\"></a>註</h2><ol>\n<li>分別為聖的時間，請參考<code>與時間作朋友</code></li>\n<li>利用分別為聖的時間檢查</li>\n<li>餐盤中間的區塊可以用來作當日的活動清單 &amp; 隨手記</li>\n<li>可以參考四象限 重要-緊急(紅)、不重要-緊急(黃)、重要-不緊急(綠)、不重要-不緊急(灰)</li>\n</ol>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"六個工具與餐盤\"><a href=\"#六個工具與餐盤\" class=\"headerlink\" title=\"六個工具與餐盤\"></a>六個工具與餐盤</h2><ul>\n<li>原則:<strong>工具簡單至上</strong></li>\n<li>面對突發狀況</li>\n</ul>\n<ol>\n<li>月計劃表 (<code>google calendar</code>)<ul>\n<li>與自已約會(保留給自已的時間)^註1^</li>\n<li>工作與私人不要分開</li>\n<li>日期與期限 </li>\n</ul>\n</li>\n<li>Todo List (<code>inbox</code>)<ul>\n<li>提醒與集中管理</li>\n<li>每天都要檢查一遍^註2^ </li>\n</ul>\n</li>\n<li>日計劃表 (<code>google calendar</code>)<ul>\n<li>當日約會 &amp; 活動清單</li>\n<li>活動清單是你當天的籌碼 也是出現突發 </li>\n</ul>\n</li>\n<li>隨手記 (<code>筆記本&amp;Evernote</code>)<ul>\n<li>接受任務，再轉到其他工具之中^註3^     </li>\n</ul>\n</li>\n<li>隨身資料庫 (<code>google drive</code>)<ul>\n<li>將整理過的資料封存在隨手可得的地方<br>ex: 上課或分享的簡報、 專案記錄等…有大量圖片、文件等</li>\n</ul>\n</li>\n<li>溝通工具 (<code>line &amp; slack</code>)<ul>\n<li>一天檢查電子郵件3~6次就夠了</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"把時間變空間-視覺化\"><a href=\"#把時間變空間-視覺化\" class=\"headerlink\" title=\"把時間變空間(視覺化)\"></a>把時間變空間(視覺化)</h2><ul>\n<li>個人、家庭、工作取得平衡</li>\n<li>安排30分鐘規劃一天的活動<ul>\n<li>創造性活動安排在精力最佳的時段</li>\n<li>安排獨處的時間</li>\n<li>安排恢復精力的時間</li>\n<li>預留時間給可能發生的突發事件</li>\n</ul>\n</li>\n<li>將所有的事情分為紅綠黃(灰)^註4^，綠色應該越多越好，灰色越少越好。<table><br><tr><td>6 am</td><td>7 am</td><td>8 am</td><td>9 am</td><td>10 am</td><td>11 am</td><td>12 am</td><td>1 pm</td></tr><br><tr><td>5 am</td><td colspan=\"3\" rowspan=\"4\" valign=\"top\">本日活動</td><td colspan=\"3\" rowspan=\"4\" valign=\"top\">隨手記</td><td>2 pm</td></tr><br><tr><td>4 am</td><td>3 pm</td></tr><br><tr><td>3 am</td><td>4 pm</td></tr><br><tr><td>2 am</td><td>5 pm</td></tr><br><tr><td>1 am</td><td>12 am</td><td>11 pm</td><td>10 pm</td><td>9 pm</td><td>8 pm</td><td>7 pm</td><td>6 pm</td></tr><br></table>\n\n</li>\n</ul>\n<h2 id=\"應變執行，計劃趕不上變化\"><a href=\"#應變執行，計劃趕不上變化\" class=\"headerlink\" title=\"應變執行，計劃趕不上變化\"></a>應變執行，計劃趕不上變化</h2><ul>\n<li>調整事情的順序</li>\n<li>養成習慣</li>\n<li>臨機應變</li>\n<li>小心多工</li>\n<li>保留風格</li>\n</ul>\n<h2 id=\"註\"><a href=\"#註\" class=\"headerlink\" title=\"註\"></a>註</h2><ol>\n<li>分別為聖的時間，請參考<code>與時間作朋友</code></li>\n<li>利用分別為聖的時間檢查</li>\n<li>餐盤中間的區塊可以用來作當日的活動清單 &amp; 隨手記</li>\n<li>可以參考四象限 重要-緊急(紅)、不重要-緊急(黃)、重要-不緊急(綠)、不重要-不緊急(灰)</li>\n</ol>\n<p>(fin)</p>\n"},{"title":"[學習筆記]允許 IAM User 存取 AWS Billing Console","date":"2018-04-04T09:08:44.000Z","_content":"\n## 前情提要\n設定了 IAM User Account 也給予了 Administrator 的權限,  \n不過仍然看不到 Billing 的頁面資訊 .  \n\n![](https://i.imgur.com/1Ge6pGi.jpg)\n\n這帶來了很大的不方便, 因為如果要看 Billing 的資訊就要切換到 Root Account  \n而建立 Administrator IAM Account 的用意本來就是要儘可能不使用 Root Account 作登入.  \n檢查了權限,明明就有設定 Read Billing 但是仍然看不到.  \n\n## 解決方法\n實際上要進入 Billing Console 其實要有兩個步驟  \n1. 權限要設定,更多細節可以參考這篇[文章](https://aws.amazon.com/blogs/security/enhanced-iam-capabilities-for-the-aws-billing-console/)(2014)\n2. 要透過 Root Account 在 [Account Settings](https://console.aws.amazon.com/billing/home#/account) 頁面設定, 允許 IAM user 存取 Billing Console  \n\n![](https://i.imgur.com/yBXaLPJ.jpg)\n\n\n\n## 參考\n- [Don’t Forget to Enable Access to the Billing Console!](https://aws.amazon.com/blogs/security/dont-forget-to-enable-access-to-the-billing-console/)\n\n(fin)","source":"_posts/cloud_learn/aws_access_billing_console.md","raw":"---\ntitle: \"[學習筆記]允許 IAM User 存取 AWS Billing Console\"\ndate: 2018/04/04 17:08:44\ntag:\n  - AWS\n---\n\n## 前情提要\n設定了 IAM User Account 也給予了 Administrator 的權限,  \n不過仍然看不到 Billing 的頁面資訊 .  \n\n![](https://i.imgur.com/1Ge6pGi.jpg)\n\n這帶來了很大的不方便, 因為如果要看 Billing 的資訊就要切換到 Root Account  \n而建立 Administrator IAM Account 的用意本來就是要儘可能不使用 Root Account 作登入.  \n檢查了權限,明明就有設定 Read Billing 但是仍然看不到.  \n\n## 解決方法\n實際上要進入 Billing Console 其實要有兩個步驟  \n1. 權限要設定,更多細節可以參考這篇[文章](https://aws.amazon.com/blogs/security/enhanced-iam-capabilities-for-the-aws-billing-console/)(2014)\n2. 要透過 Root Account 在 [Account Settings](https://console.aws.amazon.com/billing/home#/account) 頁面設定, 允許 IAM user 存取 Billing Console  \n\n![](https://i.imgur.com/yBXaLPJ.jpg)\n\n\n\n## 參考\n- [Don’t Forget to Enable Access to the Billing Console!](https://aws.amazon.com/blogs/security/dont-forget-to-enable-access-to-the-billing-console/)\n\n(fin)","slug":"cloud_learn/aws_access_billing_console","published":1,"updated":"2018-04-04T09:09:36.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyhi0063yk55zuy8pwpu","content":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><p>設定了 IAM User Account 也給予了 Administrator 的權限,<br>不過仍然看不到 Billing 的頁面資訊 .  </p>\n<p><img src=\"https://i.imgur.com/1Ge6pGi.jpg\" alt=\"\"></p>\n<p>這帶來了很大的不方便, 因為如果要看 Billing 的資訊就要切換到 Root Account<br>而建立 Administrator IAM Account 的用意本來就是要儘可能不使用 Root Account 作登入.<br>檢查了權限,明明就有設定 Read Billing 但是仍然看不到.  </p>\n<h2 id=\"解決方法\"><a href=\"#解決方法\" class=\"headerlink\" title=\"解決方法\"></a>解決方法</h2><p>實際上要進入 Billing Console 其實要有兩個步驟  </p>\n<ol>\n<li>權限要設定,更多細節可以參考這篇<a href=\"https://aws.amazon.com/blogs/security/enhanced-iam-capabilities-for-the-aws-billing-console/\" target=\"_blank\" rel=\"external\">文章</a>(2014)</li>\n<li>要透過 Root Account 在 <a href=\"https://console.aws.amazon.com/billing/home#/account\" target=\"_blank\" rel=\"external\">Account Settings</a> 頁面設定, 允許 IAM user 存取 Billing Console  </li>\n</ol>\n<p><img src=\"https://i.imgur.com/yBXaLPJ.jpg\" alt=\"\"></p>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://aws.amazon.com/blogs/security/dont-forget-to-enable-access-to-the-billing-console/\" target=\"_blank\" rel=\"external\">Don’t Forget to Enable Access to the Billing Console!</a></li>\n</ul>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><p>設定了 IAM User Account 也給予了 Administrator 的權限,<br>不過仍然看不到 Billing 的頁面資訊 .  </p>\n<p><img src=\"https://i.imgur.com/1Ge6pGi.jpg\" alt=\"\"></p>\n<p>這帶來了很大的不方便, 因為如果要看 Billing 的資訊就要切換到 Root Account<br>而建立 Administrator IAM Account 的用意本來就是要儘可能不使用 Root Account 作登入.<br>檢查了權限,明明就有設定 Read Billing 但是仍然看不到.  </p>\n<h2 id=\"解決方法\"><a href=\"#解決方法\" class=\"headerlink\" title=\"解決方法\"></a>解決方法</h2><p>實際上要進入 Billing Console 其實要有兩個步驟  </p>\n<ol>\n<li>權限要設定,更多細節可以參考這篇<a href=\"https://aws.amazon.com/blogs/security/enhanced-iam-capabilities-for-the-aws-billing-console/\" target=\"_blank\" rel=\"external\">文章</a>(2014)</li>\n<li>要透過 Root Account 在 <a href=\"https://console.aws.amazon.com/billing/home#/account\" target=\"_blank\" rel=\"external\">Account Settings</a> 頁面設定, 允許 IAM user 存取 Billing Console  </li>\n</ol>\n<p><img src=\"https://i.imgur.com/yBXaLPJ.jpg\" alt=\"\"></p>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://aws.amazon.com/blogs/security/dont-forget-to-enable-access-to-the-billing-console/\" target=\"_blank\" rel=\"external\">Don’t Forget to Enable Access to the Billing Console!</a></li>\n</ul>\n<p>(fin)</p>\n"},{"title":"[學習筆記]AWS EC2 學習筆記 AWS CLI 與 Login","date":"2018-03-25T15:01:24.000Z","_content":"\n## [安裝 AWS CLI](https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/installing.html)\n\n## [配置 AWS CLI](https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-chap-getting-started.html#cli-quick-configuration)\n\n## EC2 開機\n\n![](https://i.imgur.com/dNGygaT.jpg)\n- 直接開機跳過網路設定(也還沒有辦法設)\n- 第5步驟設定 TAG ,對找尋 ec2 的 instance 很有幫助\n\n\n## 設定 [Putty](https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/putty.html?icmpid=docs_ec2_console) \n\n\n## 連線機器\n![](https://i.imgur.com/xIQsEac.jpg)\n\nex:  \n> ssh -i /path/my-key-pair.pem ec2-user@ec2-198-51-100-1.compute-1.amazonaws.com\n\n### 預設連線帳戶\n> For Amazon Linux, the user name is `ec2-user`.\n> For Centos, the user name is `centos`. \n> For Debian, the user name is `admin` or `root`. \n> For Fedora, the user name is `ec2-user`. \n> For RHEL, the user name is `ec2-user` or `root`. \n> For SUSE, the user name is `ec2-user` or `root`. \n> For Ubuntu, the user name is `ubuntu` or `root`. \n> Otherwise, if `ec2-user` and `root` don't work, check with your AMI provider.\n\nwindows 好像是 Administrator ? 求補充\n\n\n## docker \n\n### 安裝 docker\n```\nsudo yum install docker\n```\n\n### 啟動 Docker 服務，並讓它隨系統啟動自動載入\n\n```\n$ sudo service docker start\n$ sudo chkconfig docker on\n```\n\n\n\n### 雷包\n- 重啟機器的話 public dns 會改變.(意味連線的命令參數會變)\n- 注意使用的AIM, 不同的 Linux OS 會有不同的套件執行命令\n\t- ubuntu `apt-get`\n\t- CentOS `yum`\n### 參考\n\n- [Docker —— 從入門到實踐](https://philipzheng.gitbooks.io/docker_practice)\n- [全面易懂的Docker指令大全](https://www.gitbook.com/book/joshhu/dockercommands/details)\n\n(fin)","source":"_posts/cloud_learn/aws_cli_login.md","raw":"---\ntitle: \"[學習筆記]AWS EC2 學習筆記 AWS CLI 與 Login\"\ndate: 2018/03/25 23:01:24\ntag:\n  - AWS\n  - docker\n  - Root User\n---\n\n## [安裝 AWS CLI](https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/installing.html)\n\n## [配置 AWS CLI](https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-chap-getting-started.html#cli-quick-configuration)\n\n## EC2 開機\n\n![](https://i.imgur.com/dNGygaT.jpg)\n- 直接開機跳過網路設定(也還沒有辦法設)\n- 第5步驟設定 TAG ,對找尋 ec2 的 instance 很有幫助\n\n\n## 設定 [Putty](https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/putty.html?icmpid=docs_ec2_console) \n\n\n## 連線機器\n![](https://i.imgur.com/xIQsEac.jpg)\n\nex:  \n> ssh -i /path/my-key-pair.pem ec2-user@ec2-198-51-100-1.compute-1.amazonaws.com\n\n### 預設連線帳戶\n> For Amazon Linux, the user name is `ec2-user`.\n> For Centos, the user name is `centos`. \n> For Debian, the user name is `admin` or `root`. \n> For Fedora, the user name is `ec2-user`. \n> For RHEL, the user name is `ec2-user` or `root`. \n> For SUSE, the user name is `ec2-user` or `root`. \n> For Ubuntu, the user name is `ubuntu` or `root`. \n> Otherwise, if `ec2-user` and `root` don't work, check with your AMI provider.\n\nwindows 好像是 Administrator ? 求補充\n\n\n## docker \n\n### 安裝 docker\n```\nsudo yum install docker\n```\n\n### 啟動 Docker 服務，並讓它隨系統啟動自動載入\n\n```\n$ sudo service docker start\n$ sudo chkconfig docker on\n```\n\n\n\n### 雷包\n- 重啟機器的話 public dns 會改變.(意味連線的命令參數會變)\n- 注意使用的AIM, 不同的 Linux OS 會有不同的套件執行命令\n\t- ubuntu `apt-get`\n\t- CentOS `yum`\n### 參考\n\n- [Docker —— 從入門到實踐](https://philipzheng.gitbooks.io/docker_practice)\n- [全面易懂的Docker指令大全](https://www.gitbook.com/book/joshhu/dockercommands/details)\n\n(fin)","slug":"cloud_learn/aws_cli_login","published":1,"updated":"2018-04-04T09:08:08.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyhk0066yk55czr61lv2","content":"<h2 id=\"安裝-AWS-CLI\"><a href=\"#安裝-AWS-CLI\" class=\"headerlink\" title=\"安裝 AWS CLI\"></a><a href=\"https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/installing.html\" target=\"_blank\" rel=\"external\">安裝 AWS CLI</a></h2><h2 id=\"配置-AWS-CLI\"><a href=\"#配置-AWS-CLI\" class=\"headerlink\" title=\"配置 AWS CLI\"></a><a href=\"https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-chap-getting-started.html#cli-quick-configuration\" target=\"_blank\" rel=\"external\">配置 AWS CLI</a></h2><h2 id=\"EC2-開機\"><a href=\"#EC2-開機\" class=\"headerlink\" title=\"EC2 開機\"></a>EC2 開機</h2><p><img src=\"https://i.imgur.com/dNGygaT.jpg\" alt=\"\"></p>\n<ul>\n<li>直接開機跳過網路設定(也還沒有辦法設)</li>\n<li>第5步驟設定 TAG ,對找尋 ec2 的 instance 很有幫助</li>\n</ul>\n<h2 id=\"設定-Putty\"><a href=\"#設定-Putty\" class=\"headerlink\" title=\"設定 Putty\"></a>設定 <a href=\"https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/putty.html?icmpid=docs_ec2_console\" target=\"_blank\" rel=\"external\">Putty</a></h2><h2 id=\"連線機器\"><a href=\"#連線機器\" class=\"headerlink\" title=\"連線機器\"></a>連線機器</h2><p><img src=\"https://i.imgur.com/xIQsEac.jpg\" alt=\"\"></p>\n<p>ex:  </p>\n<blockquote>\n<p>ssh -i /path/my-key-pair.pem ec2-user@ec2-198-51-100-1.compute-1.amazonaws.com</p>\n</blockquote>\n<h3 id=\"預設連線帳戶\"><a href=\"#預設連線帳戶\" class=\"headerlink\" title=\"預設連線帳戶\"></a>預設連線帳戶</h3><blockquote>\n<p>For Amazon Linux, the user name is <code>ec2-user</code>.<br>For Centos, the user name is <code>centos</code>.<br>For Debian, the user name is <code>admin</code> or <code>root</code>.<br>For Fedora, the user name is <code>ec2-user</code>.<br>For RHEL, the user name is <code>ec2-user</code> or <code>root</code>.<br>For SUSE, the user name is <code>ec2-user</code> or <code>root</code>.<br>For Ubuntu, the user name is <code>ubuntu</code> or <code>root</code>.<br>Otherwise, if <code>ec2-user</code> and <code>root</code> don’t work, check with your AMI provider.</p>\n</blockquote>\n<p>windows 好像是 Administrator ? 求補充</p>\n<h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h2><h3 id=\"安裝-docker\"><a href=\"#安裝-docker\" class=\"headerlink\" title=\"安裝 docker\"></a>安裝 docker</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum install docker</div></pre></td></tr></table></figure>\n<h3 id=\"啟動-Docker-服務，並讓它隨系統啟動自動載入\"><a href=\"#啟動-Docker-服務，並讓它隨系統啟動自動載入\" class=\"headerlink\" title=\"啟動 Docker 服務，並讓它隨系統啟動自動載入\"></a>啟動 Docker 服務，並讓它隨系統啟動自動載入</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo service docker start</div><div class=\"line\">$ sudo chkconfig docker on</div></pre></td></tr></table></figure>\n<h3 id=\"雷包\"><a href=\"#雷包\" class=\"headerlink\" title=\"雷包\"></a>雷包</h3><ul>\n<li>重啟機器的話 public dns 會改變.(意味連線的命令參數會變)</li>\n<li><p>注意使用的AIM, 不同的 Linux OS 會有不同的套件執行命令</p>\n<ul>\n<li>ubuntu <code>apt-get</code></li>\n<li>CentOS <code>yum</code><h3 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h3></li>\n</ul>\n</li>\n<li><p><a href=\"https://philipzheng.gitbooks.io/docker_practice\" target=\"_blank\" rel=\"external\">Docker —— 從入門到實踐</a></p>\n</li>\n<li><a href=\"https://www.gitbook.com/book/joshhu/dockercommands/details\" target=\"_blank\" rel=\"external\">全面易懂的Docker指令大全</a></li>\n</ul>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安裝-AWS-CLI\"><a href=\"#安裝-AWS-CLI\" class=\"headerlink\" title=\"安裝 AWS CLI\"></a><a href=\"https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/installing.html\" target=\"_blank\" rel=\"external\">安裝 AWS CLI</a></h2><h2 id=\"配置-AWS-CLI\"><a href=\"#配置-AWS-CLI\" class=\"headerlink\" title=\"配置 AWS CLI\"></a><a href=\"https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-chap-getting-started.html#cli-quick-configuration\" target=\"_blank\" rel=\"external\">配置 AWS CLI</a></h2><h2 id=\"EC2-開機\"><a href=\"#EC2-開機\" class=\"headerlink\" title=\"EC2 開機\"></a>EC2 開機</h2><p><img src=\"https://i.imgur.com/dNGygaT.jpg\" alt=\"\"></p>\n<ul>\n<li>直接開機跳過網路設定(也還沒有辦法設)</li>\n<li>第5步驟設定 TAG ,對找尋 ec2 的 instance 很有幫助</li>\n</ul>\n<h2 id=\"設定-Putty\"><a href=\"#設定-Putty\" class=\"headerlink\" title=\"設定 Putty\"></a>設定 <a href=\"https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/putty.html?icmpid=docs_ec2_console\" target=\"_blank\" rel=\"external\">Putty</a></h2><h2 id=\"連線機器\"><a href=\"#連線機器\" class=\"headerlink\" title=\"連線機器\"></a>連線機器</h2><p><img src=\"https://i.imgur.com/xIQsEac.jpg\" alt=\"\"></p>\n<p>ex:  </p>\n<blockquote>\n<p>ssh -i /path/my-key-pair.pem ec2-user@ec2-198-51-100-1.compute-1.amazonaws.com</p>\n</blockquote>\n<h3 id=\"預設連線帳戶\"><a href=\"#預設連線帳戶\" class=\"headerlink\" title=\"預設連線帳戶\"></a>預設連線帳戶</h3><blockquote>\n<p>For Amazon Linux, the user name is <code>ec2-user</code>.<br>For Centos, the user name is <code>centos</code>.<br>For Debian, the user name is <code>admin</code> or <code>root</code>.<br>For Fedora, the user name is <code>ec2-user</code>.<br>For RHEL, the user name is <code>ec2-user</code> or <code>root</code>.<br>For SUSE, the user name is <code>ec2-user</code> or <code>root</code>.<br>For Ubuntu, the user name is <code>ubuntu</code> or <code>root</code>.<br>Otherwise, if <code>ec2-user</code> and <code>root</code> don’t work, check with your AMI provider.</p>\n</blockquote>\n<p>windows 好像是 Administrator ? 求補充</p>\n<h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h2><h3 id=\"安裝-docker\"><a href=\"#安裝-docker\" class=\"headerlink\" title=\"安裝 docker\"></a>安裝 docker</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum install docker</div></pre></td></tr></table></figure>\n<h3 id=\"啟動-Docker-服務，並讓它隨系統啟動自動載入\"><a href=\"#啟動-Docker-服務，並讓它隨系統啟動自動載入\" class=\"headerlink\" title=\"啟動 Docker 服務，並讓它隨系統啟動自動載入\"></a>啟動 Docker 服務，並讓它隨系統啟動自動載入</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo service docker start</div><div class=\"line\">$ sudo chkconfig docker on</div></pre></td></tr></table></figure>\n<h3 id=\"雷包\"><a href=\"#雷包\" class=\"headerlink\" title=\"雷包\"></a>雷包</h3><ul>\n<li>重啟機器的話 public dns 會改變.(意味連線的命令參數會變)</li>\n<li><p>注意使用的AIM, 不同的 Linux OS 會有不同的套件執行命令</p>\n<ul>\n<li>ubuntu <code>apt-get</code></li>\n<li>CentOS <code>yum</code><h3 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h3></li>\n</ul>\n</li>\n<li><p><a href=\"https://philipzheng.gitbooks.io/docker_practice\" target=\"_blank\" rel=\"external\">Docker —— 從入門到實踐</a></p>\n</li>\n<li><a href=\"https://www.gitbook.com/book/joshhu/dockercommands/details\" target=\"_blank\" rel=\"external\">全面易懂的Docker指令大全</a></li>\n</ul>\n<p>(fin)</p>\n"},{"title":"[學習筆記]AWS EC2開機筆記","date":"2017-12-08T08:42:42.000Z","_content":"## 應該知道的事\n- 這個是教育訓練的筆記\n- 使用web console 建立ec2\n- 使用cli 建立ec2\n- 2017的筆記可能會隨時間變得沒有參考價值\n- 關鍵參數都打馬賽克,沒有牽扯到EBS/S3/VPC\n- 對你可能沒有幫助\n\n## Web Console\n\n1. login AWS\n\n2. 進入EC2\n![](https://i.imgur.com/hRFwjzr.jpg)\n\n3. Launch Instance\n![](https://i.imgur.com/g9vlacA.jpg)\n\n4. 選擇AMI(Amazon Machine Image )\n![](https://i.imgur.com/dVKPsAp.jpg)\n\n5. 選擇Instance Type(有錢隨便選,沒錢選t2.nano)\n![](https://i.imgur.com/61gG2pd.jpg)\n\n6. 設定 Instance Details\n![](https://i.imgur.com/NkbKrzL.jpg)\n\n7. 如果想在開機的時候自動安裝一些程式,可以在`Advanced Details` 加語法\nwindows AMI請用 `Powershell`\n![](https://i.imgur.com/bJxWlgd.jpg)\n\n8. 加硬碟\n![](https://i.imgur.com/MP9igLc.jpg)\n\n9. 加tag\n![](https://i.imgur.com/xDTx2nv.jpg)\n\n10. 設定Configure Security Group\n![](https://i.imgur.com/wximWw1.jpg)\n\n11. 預覽與啟動\n![](https://i.imgur.com/6Y4fcOI.jpg)\n\n12. 最後一步,選擇key-pair \n![](https://i.imgur.com/fRhUafI.jpg)\n\n\n\n\n## CLI command\n\n```\naws ec2 run-instances --image-id ami-da9e2cbc --count 1 --instance-type t2.nano --subnet-id subnet-cxxxxxxx --user-data file://userdata.sh --tag-specifications \"ResourceType=instance,Tags=[{Key=Environment,Value=AWS-Training},{Key=Name,Value=AWS-Training_MarkLin}]\" --security-group-ids sg-XXXXXX --key-name marktest.japan.training\n```\n\n## 參考文章\n- [run-instances](http://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html)\n\n(fin)\n","source":"_posts/cloud_learn/aws_creat_ec2_instance.md","raw":"---\ntitle: \"[學習筆記]AWS EC2開機筆記\"\ndate: 2017/12/08 16:42:42\ntag:\n  - AWS\n  - EC2\n---\n## 應該知道的事\n- 這個是教育訓練的筆記\n- 使用web console 建立ec2\n- 使用cli 建立ec2\n- 2017的筆記可能會隨時間變得沒有參考價值\n- 關鍵參數都打馬賽克,沒有牽扯到EBS/S3/VPC\n- 對你可能沒有幫助\n\n## Web Console\n\n1. login AWS\n\n2. 進入EC2\n![](https://i.imgur.com/hRFwjzr.jpg)\n\n3. Launch Instance\n![](https://i.imgur.com/g9vlacA.jpg)\n\n4. 選擇AMI(Amazon Machine Image )\n![](https://i.imgur.com/dVKPsAp.jpg)\n\n5. 選擇Instance Type(有錢隨便選,沒錢選t2.nano)\n![](https://i.imgur.com/61gG2pd.jpg)\n\n6. 設定 Instance Details\n![](https://i.imgur.com/NkbKrzL.jpg)\n\n7. 如果想在開機的時候自動安裝一些程式,可以在`Advanced Details` 加語法\nwindows AMI請用 `Powershell`\n![](https://i.imgur.com/bJxWlgd.jpg)\n\n8. 加硬碟\n![](https://i.imgur.com/MP9igLc.jpg)\n\n9. 加tag\n![](https://i.imgur.com/xDTx2nv.jpg)\n\n10. 設定Configure Security Group\n![](https://i.imgur.com/wximWw1.jpg)\n\n11. 預覽與啟動\n![](https://i.imgur.com/6Y4fcOI.jpg)\n\n12. 最後一步,選擇key-pair \n![](https://i.imgur.com/fRhUafI.jpg)\n\n\n\n\n## CLI command\n\n```\naws ec2 run-instances --image-id ami-da9e2cbc --count 1 --instance-type t2.nano --subnet-id subnet-cxxxxxxx --user-data file://userdata.sh --tag-specifications \"ResourceType=instance,Tags=[{Key=Environment,Value=AWS-Training},{Key=Name,Value=AWS-Training_MarkLin}]\" --security-group-ids sg-XXXXXX --key-name marktest.japan.training\n```\n\n## 參考文章\n- [run-instances](http://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html)\n\n(fin)\n","slug":"cloud_learn/aws_creat_ec2_instance","published":1,"updated":"2018-04-04T09:08:12.393Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyhn0068yk552iq9gsc1","content":"<h2 id=\"應該知道的事\"><a href=\"#應該知道的事\" class=\"headerlink\" title=\"應該知道的事\"></a>應該知道的事</h2><ul>\n<li>這個是教育訓練的筆記</li>\n<li>使用web console 建立ec2</li>\n<li>使用cli 建立ec2</li>\n<li>2017的筆記可能會隨時間變得沒有參考價值</li>\n<li>關鍵參數都打馬賽克,沒有牽扯到EBS/S3/VPC</li>\n<li>對你可能沒有幫助</li>\n</ul>\n<h2 id=\"Web-Console\"><a href=\"#Web-Console\" class=\"headerlink\" title=\"Web Console\"></a>Web Console</h2><ol>\n<li><p>login AWS</p>\n</li>\n<li><p>進入EC2<br><img src=\"https://i.imgur.com/hRFwjzr.jpg\" alt=\"\"></p>\n</li>\n<li><p>Launch Instance<br><img src=\"https://i.imgur.com/g9vlacA.jpg\" alt=\"\"></p>\n</li>\n<li><p>選擇AMI(Amazon Machine Image )<br><img src=\"https://i.imgur.com/dVKPsAp.jpg\" alt=\"\"></p>\n</li>\n<li><p>選擇Instance Type(有錢隨便選,沒錢選t2.nano)<br><img src=\"https://i.imgur.com/61gG2pd.jpg\" alt=\"\"></p>\n</li>\n<li><p>設定 Instance Details<br><img src=\"https://i.imgur.com/NkbKrzL.jpg\" alt=\"\"></p>\n</li>\n<li><p>如果想在開機的時候自動安裝一些程式,可以在<code>Advanced Details</code> 加語法<br>windows AMI請用 <code>Powershell</code><br><img src=\"https://i.imgur.com/bJxWlgd.jpg\" alt=\"\"></p>\n</li>\n<li><p>加硬碟<br><img src=\"https://i.imgur.com/MP9igLc.jpg\" alt=\"\"></p>\n</li>\n<li><p>加tag<br><img src=\"https://i.imgur.com/xDTx2nv.jpg\" alt=\"\"></p>\n</li>\n<li><p>設定Configure Security Group<br><img src=\"https://i.imgur.com/wximWw1.jpg\" alt=\"\"></p>\n</li>\n<li><p>預覽與啟動<br><img src=\"https://i.imgur.com/6Y4fcOI.jpg\" alt=\"\"></p>\n</li>\n<li><p>最後一步,選擇key-pair<br><img src=\"https://i.imgur.com/fRhUafI.jpg\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"CLI-command\"><a href=\"#CLI-command\" class=\"headerlink\" title=\"CLI command\"></a>CLI command</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">aws ec2 run-instances --image-id ami-da9e2cbc --count 1 --instance-type t2.nano --subnet-id subnet-cxxxxxxx --user-data file://userdata.sh --tag-specifications &quot;ResourceType=instance,Tags=[&#123;Key=Environment,Value=AWS-Training&#125;,&#123;Key=Name,Value=AWS-Training_MarkLin&#125;]&quot; --security-group-ids sg-XXXXXX --key-name marktest.japan.training</div></pre></td></tr></table></figure>\n<h2 id=\"參考文章\"><a href=\"#參考文章\" class=\"headerlink\" title=\"參考文章\"></a>參考文章</h2><ul>\n<li><a href=\"http://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html\" target=\"_blank\" rel=\"external\">run-instances</a></li>\n</ul>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"應該知道的事\"><a href=\"#應該知道的事\" class=\"headerlink\" title=\"應該知道的事\"></a>應該知道的事</h2><ul>\n<li>這個是教育訓練的筆記</li>\n<li>使用web console 建立ec2</li>\n<li>使用cli 建立ec2</li>\n<li>2017的筆記可能會隨時間變得沒有參考價值</li>\n<li>關鍵參數都打馬賽克,沒有牽扯到EBS/S3/VPC</li>\n<li>對你可能沒有幫助</li>\n</ul>\n<h2 id=\"Web-Console\"><a href=\"#Web-Console\" class=\"headerlink\" title=\"Web Console\"></a>Web Console</h2><ol>\n<li><p>login AWS</p>\n</li>\n<li><p>進入EC2<br><img src=\"https://i.imgur.com/hRFwjzr.jpg\" alt=\"\"></p>\n</li>\n<li><p>Launch Instance<br><img src=\"https://i.imgur.com/g9vlacA.jpg\" alt=\"\"></p>\n</li>\n<li><p>選擇AMI(Amazon Machine Image )<br><img src=\"https://i.imgur.com/dVKPsAp.jpg\" alt=\"\"></p>\n</li>\n<li><p>選擇Instance Type(有錢隨便選,沒錢選t2.nano)<br><img src=\"https://i.imgur.com/61gG2pd.jpg\" alt=\"\"></p>\n</li>\n<li><p>設定 Instance Details<br><img src=\"https://i.imgur.com/NkbKrzL.jpg\" alt=\"\"></p>\n</li>\n<li><p>如果想在開機的時候自動安裝一些程式,可以在<code>Advanced Details</code> 加語法<br>windows AMI請用 <code>Powershell</code><br><img src=\"https://i.imgur.com/bJxWlgd.jpg\" alt=\"\"></p>\n</li>\n<li><p>加硬碟<br><img src=\"https://i.imgur.com/MP9igLc.jpg\" alt=\"\"></p>\n</li>\n<li><p>加tag<br><img src=\"https://i.imgur.com/xDTx2nv.jpg\" alt=\"\"></p>\n</li>\n<li><p>設定Configure Security Group<br><img src=\"https://i.imgur.com/wximWw1.jpg\" alt=\"\"></p>\n</li>\n<li><p>預覽與啟動<br><img src=\"https://i.imgur.com/6Y4fcOI.jpg\" alt=\"\"></p>\n</li>\n<li><p>最後一步,選擇key-pair<br><img src=\"https://i.imgur.com/fRhUafI.jpg\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"CLI-command\"><a href=\"#CLI-command\" class=\"headerlink\" title=\"CLI command\"></a>CLI command</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">aws ec2 run-instances --image-id ami-da9e2cbc --count 1 --instance-type t2.nano --subnet-id subnet-cxxxxxxx --user-data file://userdata.sh --tag-specifications &quot;ResourceType=instance,Tags=[&#123;Key=Environment,Value=AWS-Training&#125;,&#123;Key=Name,Value=AWS-Training_MarkLin&#125;]&quot; --security-group-ids sg-XXXXXX --key-name marktest.japan.training</div></pre></td></tr></table></figure>\n<h2 id=\"參考文章\"><a href=\"#參考文章\" class=\"headerlink\" title=\"參考文章\"></a>參考文章</h2><ul>\n<li><a href=\"http://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html\" target=\"_blank\" rel=\"external\">run-instances</a></li>\n</ul>\n<p>(fin)</p>\n"},{"title":"Visual Studio 2017 MSTest Framework 異常修正","date":"2017-12-11T03:17:08.000Z","_content":"## 應該要知道的事\n- 這是踩雷筆記\n- 2017的筆記可能會隨時間變得沒有參考價值\n- Visual Studio 2017的問題,並不一定適用其他版本\n\n## 情境\n![載入測試時發生例外狀況](https://i.imgur.com/FDDtc9V.jpg)\n原本使用 Visual Studio 2015 建立的測試專案,\n升級到 Visual Studio 2017 後, 發生以下錯誤\n```\n[2017/12/11 上午 02:09:59 Error] 測試探索程式 'SpecRunTestDiscoverer' \n載入測試時發生例外狀況。例外狀況: 無法載入檔案或組件 \n'Microsoft.VisualStudio.QualityTools.UnitTestFramework,\nVersion=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\n或其相依性的其中之一。 系統找不到指定的檔案。\n```\n\n## 導致結果\n\n![原本的測試數量為1942,變成459,遺失了7成5的測試案例.](https://i.imgur.com/2REPRzG.jpg)\n1. 測試專案會找不到測試,或是測試數量不正確.\n2. 可以使用 Visual Studio 2015 重新執行探測索測試,即可排除問題.\n\n## VS2015 已移除或未安裝該怎麼辦？\n\n透過MsTest直接加入 \n`Microsoft.VisualStudio.QualityTools.UnitTestFramework` \n的參考已經是舊的方法了, \n#### 在 vs2017 建議的解決方案如下:\n* 移除方案中所有對 `Microsoft.VisualStudio.QualityTools.UnitTestFramework` 的參考\n* 透過 Nuget 安裝 MSTest.TestAdapter \n* 透過 Nuget 安裝 MSTest.TestFramework\n* 關閉 vs2017\n* 移除 `%temp%\\VisualStudioTestExplorerExtensions`內所有檔案\n* 重啟 vs2017 並建置以觸發探索測試\n![透過 Nuget 安裝 MSTest.TestAdapter/MSTest.TestFramework](https://i.imgur.com/RPI77KN.jpg)\n![重啟 vs2017 並建置以觸發探索測試](https://i.imgur.com/JQ7zf2S.jpg)\n\n## 參考\n- [Unit test fail - cannot load Microsoft.VisualStudio.TestPlatform.TestFramework.Extensions](https://developercommunity.visualstudio.com/content/problem/14673/unit-test-fail-cannot-load-microsoftvisualstudiote.html)\n\n(fin)","source":"_posts/test_learn/vs2017_mstest_with_nuget.md","raw":"---\ntitle: \"Visual Studio 2017 MSTest Framework 異常修正\"\ndate: 2017/12/11 11:17:08\ntag:\n  - MsTest\n  - Visual Studio\n---\n## 應該要知道的事\n- 這是踩雷筆記\n- 2017的筆記可能會隨時間變得沒有參考價值\n- Visual Studio 2017的問題,並不一定適用其他版本\n\n## 情境\n![載入測試時發生例外狀況](https://i.imgur.com/FDDtc9V.jpg)\n原本使用 Visual Studio 2015 建立的測試專案,\n升級到 Visual Studio 2017 後, 發生以下錯誤\n```\n[2017/12/11 上午 02:09:59 Error] 測試探索程式 'SpecRunTestDiscoverer' \n載入測試時發生例外狀況。例外狀況: 無法載入檔案或組件 \n'Microsoft.VisualStudio.QualityTools.UnitTestFramework,\nVersion=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\n或其相依性的其中之一。 系統找不到指定的檔案。\n```\n\n## 導致結果\n\n![原本的測試數量為1942,變成459,遺失了7成5的測試案例.](https://i.imgur.com/2REPRzG.jpg)\n1. 測試專案會找不到測試,或是測試數量不正確.\n2. 可以使用 Visual Studio 2015 重新執行探測索測試,即可排除問題.\n\n## VS2015 已移除或未安裝該怎麼辦？\n\n透過MsTest直接加入 \n`Microsoft.VisualStudio.QualityTools.UnitTestFramework` \n的參考已經是舊的方法了, \n#### 在 vs2017 建議的解決方案如下:\n* 移除方案中所有對 `Microsoft.VisualStudio.QualityTools.UnitTestFramework` 的參考\n* 透過 Nuget 安裝 MSTest.TestAdapter \n* 透過 Nuget 安裝 MSTest.TestFramework\n* 關閉 vs2017\n* 移除 `%temp%\\VisualStudioTestExplorerExtensions`內所有檔案\n* 重啟 vs2017 並建置以觸發探索測試\n![透過 Nuget 安裝 MSTest.TestAdapter/MSTest.TestFramework](https://i.imgur.com/RPI77KN.jpg)\n![重啟 vs2017 並建置以觸發探索測試](https://i.imgur.com/JQ7zf2S.jpg)\n\n## 參考\n- [Unit test fail - cannot load Microsoft.VisualStudio.TestPlatform.TestFramework.Extensions](https://developercommunity.visualstudio.com/content/problem/14673/unit-test-fail-cannot-load-microsoftvisualstudiote.html)\n\n(fin)","slug":"test_learn/vs2017_mstest_with_nuget","published":1,"updated":"2018-01-30T16:29:44.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyho006ayk55q55575ak","content":"<h2 id=\"應該要知道的事\"><a href=\"#應該要知道的事\" class=\"headerlink\" title=\"應該要知道的事\"></a>應該要知道的事</h2><ul>\n<li>這是踩雷筆記</li>\n<li>2017的筆記可能會隨時間變得沒有參考價值</li>\n<li>Visual Studio 2017的問題,並不一定適用其他版本</li>\n</ul>\n<h2 id=\"情境\"><a href=\"#情境\" class=\"headerlink\" title=\"情境\"></a>情境</h2><p><img src=\"https://i.imgur.com/FDDtc9V.jpg\" alt=\"載入測試時發生例外狀況\"><br>原本使用 Visual Studio 2015 建立的測試專案,<br>升級到 Visual Studio 2017 後, 發生以下錯誤<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[2017/12/11 上午 02:09:59 Error] 測試探索程式 &apos;SpecRunTestDiscoverer&apos; </div><div class=\"line\">載入測試時發生例外狀況。例外狀況: 無法載入檔案或組件 </div><div class=\"line\">&apos;Microsoft.VisualStudio.QualityTools.UnitTestFramework,</div><div class=\"line\">Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&apos;</div><div class=\"line\">或其相依性的其中之一。 系統找不到指定的檔案。</div></pre></td></tr></table></figure></p>\n<h2 id=\"導致結果\"><a href=\"#導致結果\" class=\"headerlink\" title=\"導致結果\"></a>導致結果</h2><p><img src=\"https://i.imgur.com/2REPRzG.jpg\" alt=\"原本的測試數量為1942,變成459,遺失了7成5的測試案例.\"></p>\n<ol>\n<li>測試專案會找不到測試,或是測試數量不正確.</li>\n<li>可以使用 Visual Studio 2015 重新執行探測索測試,即可排除問題.</li>\n</ol>\n<h2 id=\"VS2015-已移除或未安裝該怎麼辦？\"><a href=\"#VS2015-已移除或未安裝該怎麼辦？\" class=\"headerlink\" title=\"VS2015 已移除或未安裝該怎麼辦？\"></a>VS2015 已移除或未安裝該怎麼辦？</h2><p>透過MsTest直接加入<br><code>Microsoft.VisualStudio.QualityTools.UnitTestFramework</code><br>的參考已經是舊的方法了, </p>\n<h4 id=\"在-vs2017-建議的解決方案如下\"><a href=\"#在-vs2017-建議的解決方案如下\" class=\"headerlink\" title=\"在 vs2017 建議的解決方案如下:\"></a>在 vs2017 建議的解決方案如下:</h4><ul>\n<li>移除方案中所有對 <code>Microsoft.VisualStudio.QualityTools.UnitTestFramework</code> 的參考</li>\n<li>透過 Nuget 安裝 MSTest.TestAdapter </li>\n<li>透過 Nuget 安裝 MSTest.TestFramework</li>\n<li>關閉 vs2017</li>\n<li>移除 <code>%temp%\\VisualStudioTestExplorerExtensions</code>內所有檔案</li>\n<li>重啟 vs2017 並建置以觸發探索測試<br><img src=\"https://i.imgur.com/RPI77KN.jpg\" alt=\"透過 Nuget 安裝 MSTest.TestAdapter/MSTest.TestFramework\"><br><img src=\"https://i.imgur.com/JQ7zf2S.jpg\" alt=\"重啟 vs2017 並建置以觸發探索測試\"></li>\n</ul>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://developercommunity.visualstudio.com/content/problem/14673/unit-test-fail-cannot-load-microsoftvisualstudiote.html\" target=\"_blank\" rel=\"external\">Unit test fail - cannot load Microsoft.VisualStudio.TestPlatform.TestFramework.Extensions</a></li>\n</ul>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"應該要知道的事\"><a href=\"#應該要知道的事\" class=\"headerlink\" title=\"應該要知道的事\"></a>應該要知道的事</h2><ul>\n<li>這是踩雷筆記</li>\n<li>2017的筆記可能會隨時間變得沒有參考價值</li>\n<li>Visual Studio 2017的問題,並不一定適用其他版本</li>\n</ul>\n<h2 id=\"情境\"><a href=\"#情境\" class=\"headerlink\" title=\"情境\"></a>情境</h2><p><img src=\"https://i.imgur.com/FDDtc9V.jpg\" alt=\"載入測試時發生例外狀況\"><br>原本使用 Visual Studio 2015 建立的測試專案,<br>升級到 Visual Studio 2017 後, 發生以下錯誤<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[2017/12/11 上午 02:09:59 Error] 測試探索程式 &apos;SpecRunTestDiscoverer&apos; </div><div class=\"line\">載入測試時發生例外狀況。例外狀況: 無法載入檔案或組件 </div><div class=\"line\">&apos;Microsoft.VisualStudio.QualityTools.UnitTestFramework,</div><div class=\"line\">Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&apos;</div><div class=\"line\">或其相依性的其中之一。 系統找不到指定的檔案。</div></pre></td></tr></table></figure></p>\n<h2 id=\"導致結果\"><a href=\"#導致結果\" class=\"headerlink\" title=\"導致結果\"></a>導致結果</h2><p><img src=\"https://i.imgur.com/2REPRzG.jpg\" alt=\"原本的測試數量為1942,變成459,遺失了7成5的測試案例.\"></p>\n<ol>\n<li>測試專案會找不到測試,或是測試數量不正確.</li>\n<li>可以使用 Visual Studio 2015 重新執行探測索測試,即可排除問題.</li>\n</ol>\n<h2 id=\"VS2015-已移除或未安裝該怎麼辦？\"><a href=\"#VS2015-已移除或未安裝該怎麼辦？\" class=\"headerlink\" title=\"VS2015 已移除或未安裝該怎麼辦？\"></a>VS2015 已移除或未安裝該怎麼辦？</h2><p>透過MsTest直接加入<br><code>Microsoft.VisualStudio.QualityTools.UnitTestFramework</code><br>的參考已經是舊的方法了, </p>\n<h4 id=\"在-vs2017-建議的解決方案如下\"><a href=\"#在-vs2017-建議的解決方案如下\" class=\"headerlink\" title=\"在 vs2017 建議的解決方案如下:\"></a>在 vs2017 建議的解決方案如下:</h4><ul>\n<li>移除方案中所有對 <code>Microsoft.VisualStudio.QualityTools.UnitTestFramework</code> 的參考</li>\n<li>透過 Nuget 安裝 MSTest.TestAdapter </li>\n<li>透過 Nuget 安裝 MSTest.TestFramework</li>\n<li>關閉 vs2017</li>\n<li>移除 <code>%temp%\\VisualStudioTestExplorerExtensions</code>內所有檔案</li>\n<li>重啟 vs2017 並建置以觸發探索測試<br><img src=\"https://i.imgur.com/RPI77KN.jpg\" alt=\"透過 Nuget 安裝 MSTest.TestAdapter/MSTest.TestFramework\"><br><img src=\"https://i.imgur.com/JQ7zf2S.jpg\" alt=\"重啟 vs2017 並建置以觸發探索測試\"></li>\n</ul>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://developercommunity.visualstudio.com/content/problem/14673/unit-test-fail-cannot-load-microsoftvisualstudiote.html\" target=\"_blank\" rel=\"external\">Unit test fail - cannot load Microsoft.VisualStudio.TestPlatform.TestFramework.Extensions</a></li>\n</ul>\n<p>(fin)</p>\n"},{"title":"一年後的我想要什麼？","date":"2017-12-31T18:12:47.000Z","_content":"\n## 你的目標是什麼?\n\n**自由**\n\n什麼是自由？\n\n1. 情感上的自由\n2. 時間上的自由\n3. 經濟上的自由\n\n## 經濟上的自由是一切的基礎\n\n1. 更多的收入 \n    1. 被動的收入\n    2. 更高的薪資\n2. 更有成就感的工作\n    1. 被同事尊重\n    2. 被上司認可\n    3. 受人歡迎\n3. 更多的選擇\n    1. 技術提昇\n    2. 領域擴展\n    3. 人脈\n4. 健康的身體\n5. 更多享受生活\n\n## 一年後的我想要什麼?\n\n一年後的我想要什麼?\n\n1. 更高的薪資\n\t1. 維持現狀 K (x)\n\t2. 跳糟 K * 1.3 (x)\n\t3. 爭取加薪 K * 1.1\n\t4. 獎金與分紅 \n2. 更有成就感的工作(什麼是成就感)？\t\n\t1. 擁有可以引以為豪的產品\n\t\t1. 拆解單體為服務導向\n\t\t2. 架構升級\t\t\n\t2. 分享與教學\n\t\t\t1. Blog\n\t\t\t2. 內/外部sharing\n\t\t\t3. 單元測試導入\t\t\n3. 更多的選擇\n\t1. 技術轉移\n\t\t1. Web 技術 轉移 為 Service導向技術\n\t\t2. container 技術\n\t\t3. cloud 技術\t\t\n\t2. 技術提昇\n\t\t1. .Net \n        2. Infra\n        3. Domain know how\n \n### 爭取加薪 K * 1.1\n\n## 而這些目標需要什麼才能爭取到?\n分為三個面向,技術提昇、技術擴展與自我實現,  \n### 技術提昇\n首先目前我擁有的技術能力有\n1. .Net solution的 Web Developer能力\n2. 同時兼顧有 DB 與 F2E 基礎進階能力 \n\n這與我過去的選擇有關, 一直以來都在 Web 深入研究  \n未來的一年仍要朝這個方向發展.  \n但是會改由 Web 導向轉變成服務導向,  \n而 Web 開發只是我本身所能提供給公司的一個服務而已,  \n跟著 .Net 的腳步我想把前台(包含大馬但不限於)昇級上一個版本,  \n包含目前使用的舊版 libary 與 Framework,  \n如此一來可以使用到新版 .Net 的語法,  \n同時也可以解開一些導入測試與微服務時遇到的困境.  \n\n### 現有能力列表\n1. C# & .Net Framework Solution (inculde Linq & Entity Framework )\n2. javascript (jQuery & Angular etc..)\n3. Database with Sql (MsSQL solution)\n4. Source Controle (Git)\n5. \n\n### 略懂\n1. nodejs (with expressjs) & php(codeigniter) & ruby (RoR)\n2. Jenkins\n3. \n\n### 技術的擴展  \n\n我認為公司的單體架構已經面臨到不得不拆的狀況,  \n公司也有意朝這個方向走那是最好不過的了,\n但對現存的.NET 開發者而言,我認為人人都要有危機意識\n我看到的現象\n1. 頁面會被CMS取代\n2. 大部份的API可以被Lambda取代\n3. 主流程的部份在跨國的目標下會逐步變成微服務\n\n基於以上幾點, 除了.Net 的 solution 外,  \n更多情況是要使用別的 solution 或是混用,  \n對此我的視野必須有所提昇,  \n1. Linux Bash\n2. Container 技術\n3. Cloud (AWS/Azure/GCP)\n4. Node.js\n在未來的一年開發流程或是維運流程會有很大很快的變化  \n要多聽多看多想多問,公司有很多人才要儘可能的跟他們學習.  \n\n### 自我營銷\n\n最後是自我實現的部份,  \n自我營銷是我很弱的一部份,  \n不善交際,不喜歡人群  \n這點我從去年就開始調整,  \n多參與公司內部的分享,不要害怕說錯  \n假裝自已是對的,再虛心接受別人的指點  \n不需要導師,因為人人都是我的導師  \n開始寫Blog並且貼到社群網站給人鞭  \n這是我目前的 https://blog.marsen.me\n\n今年會繼續朝這個方向衝刺.  \n多分享 多犯錯 然後接受反饋學習.  \n兩個部份是我可以練習分享的機會  \n一個是測試的導入,  \n我們的遺留代碼,有很多可以分享的部份,  \n二是讀書會,  \n借由讀書會可以練習分享,  \n同時學習別人怎麼分享,  \n並且看完一本書,一舉數得.  \n\n## 具體主管可以幫助我的部份\n1. 加薪(沒有比這個更務實的了)\n2. 明確指出我的錯誤或是作的好的部份\n\nDo more do faster \n\n(fin)","source":"_posts/2018/next_year.md","raw":"---\ntitle: \"一年後的我想要什麼？\"\ndate: 2018/01/01 02:12:47\n---\n\n## 你的目標是什麼?\n\n**自由**\n\n什麼是自由？\n\n1. 情感上的自由\n2. 時間上的自由\n3. 經濟上的自由\n\n## 經濟上的自由是一切的基礎\n\n1. 更多的收入 \n    1. 被動的收入\n    2. 更高的薪資\n2. 更有成就感的工作\n    1. 被同事尊重\n    2. 被上司認可\n    3. 受人歡迎\n3. 更多的選擇\n    1. 技術提昇\n    2. 領域擴展\n    3. 人脈\n4. 健康的身體\n5. 更多享受生活\n\n## 一年後的我想要什麼?\n\n一年後的我想要什麼?\n\n1. 更高的薪資\n\t1. 維持現狀 K (x)\n\t2. 跳糟 K * 1.3 (x)\n\t3. 爭取加薪 K * 1.1\n\t4. 獎金與分紅 \n2. 更有成就感的工作(什麼是成就感)？\t\n\t1. 擁有可以引以為豪的產品\n\t\t1. 拆解單體為服務導向\n\t\t2. 架構升級\t\t\n\t2. 分享與教學\n\t\t\t1. Blog\n\t\t\t2. 內/外部sharing\n\t\t\t3. 單元測試導入\t\t\n3. 更多的選擇\n\t1. 技術轉移\n\t\t1. Web 技術 轉移 為 Service導向技術\n\t\t2. container 技術\n\t\t3. cloud 技術\t\t\n\t2. 技術提昇\n\t\t1. .Net \n        2. Infra\n        3. Domain know how\n \n### 爭取加薪 K * 1.1\n\n## 而這些目標需要什麼才能爭取到?\n分為三個面向,技術提昇、技術擴展與自我實現,  \n### 技術提昇\n首先目前我擁有的技術能力有\n1. .Net solution的 Web Developer能力\n2. 同時兼顧有 DB 與 F2E 基礎進階能力 \n\n這與我過去的選擇有關, 一直以來都在 Web 深入研究  \n未來的一年仍要朝這個方向發展.  \n但是會改由 Web 導向轉變成服務導向,  \n而 Web 開發只是我本身所能提供給公司的一個服務而已,  \n跟著 .Net 的腳步我想把前台(包含大馬但不限於)昇級上一個版本,  \n包含目前使用的舊版 libary 與 Framework,  \n如此一來可以使用到新版 .Net 的語法,  \n同時也可以解開一些導入測試與微服務時遇到的困境.  \n\n### 現有能力列表\n1. C# & .Net Framework Solution (inculde Linq & Entity Framework )\n2. javascript (jQuery & Angular etc..)\n3. Database with Sql (MsSQL solution)\n4. Source Controle (Git)\n5. \n\n### 略懂\n1. nodejs (with expressjs) & php(codeigniter) & ruby (RoR)\n2. Jenkins\n3. \n\n### 技術的擴展  \n\n我認為公司的單體架構已經面臨到不得不拆的狀況,  \n公司也有意朝這個方向走那是最好不過的了,\n但對現存的.NET 開發者而言,我認為人人都要有危機意識\n我看到的現象\n1. 頁面會被CMS取代\n2. 大部份的API可以被Lambda取代\n3. 主流程的部份在跨國的目標下會逐步變成微服務\n\n基於以上幾點, 除了.Net 的 solution 外,  \n更多情況是要使用別的 solution 或是混用,  \n對此我的視野必須有所提昇,  \n1. Linux Bash\n2. Container 技術\n3. Cloud (AWS/Azure/GCP)\n4. Node.js\n在未來的一年開發流程或是維運流程會有很大很快的變化  \n要多聽多看多想多問,公司有很多人才要儘可能的跟他們學習.  \n\n### 自我營銷\n\n最後是自我實現的部份,  \n自我營銷是我很弱的一部份,  \n不善交際,不喜歡人群  \n這點我從去年就開始調整,  \n多參與公司內部的分享,不要害怕說錯  \n假裝自已是對的,再虛心接受別人的指點  \n不需要導師,因為人人都是我的導師  \n開始寫Blog並且貼到社群網站給人鞭  \n這是我目前的 https://blog.marsen.me\n\n今年會繼續朝這個方向衝刺.  \n多分享 多犯錯 然後接受反饋學習.  \n兩個部份是我可以練習分享的機會  \n一個是測試的導入,  \n我們的遺留代碼,有很多可以分享的部份,  \n二是讀書會,  \n借由讀書會可以練習分享,  \n同時學習別人怎麼分享,  \n並且看完一本書,一舉數得.  \n\n## 具體主管可以幫助我的部份\n1. 加薪(沒有比這個更務實的了)\n2. 明確指出我的錯誤或是作的好的部份\n\nDo more do faster \n\n(fin)","slug":"2018/next_year","published":1,"updated":"2018-03-12T17:43:27.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyhp006cyk5545y8xosg","content":"<h2 id=\"你的目標是什麼\"><a href=\"#你的目標是什麼\" class=\"headerlink\" title=\"你的目標是什麼?\"></a>你的目標是什麼?</h2><p><strong>自由</strong></p>\n<p>什麼是自由？</p>\n<ol>\n<li>情感上的自由</li>\n<li>時間上的自由</li>\n<li>經濟上的自由</li>\n</ol>\n<h2 id=\"經濟上的自由是一切的基礎\"><a href=\"#經濟上的自由是一切的基礎\" class=\"headerlink\" title=\"經濟上的自由是一切的基礎\"></a>經濟上的自由是一切的基礎</h2><ol>\n<li>更多的收入 <ol>\n<li>被動的收入</li>\n<li>更高的薪資</li>\n</ol>\n</li>\n<li>更有成就感的工作<ol>\n<li>被同事尊重</li>\n<li>被上司認可</li>\n<li>受人歡迎</li>\n</ol>\n</li>\n<li>更多的選擇<ol>\n<li>技術提昇</li>\n<li>領域擴展</li>\n<li>人脈</li>\n</ol>\n</li>\n<li>健康的身體</li>\n<li>更多享受生活</li>\n</ol>\n<h2 id=\"一年後的我想要什麼\"><a href=\"#一年後的我想要什麼\" class=\"headerlink\" title=\"一年後的我想要什麼?\"></a>一年後的我想要什麼?</h2><p>一年後的我想要什麼?</p>\n<ol>\n<li>更高的薪資<ol>\n<li>維持現狀 K (x)</li>\n<li>跳糟 K * 1.3 (x)</li>\n<li>爭取加薪 K * 1.1</li>\n<li>獎金與分紅 </li>\n</ol>\n</li>\n<li>更有成就感的工作(什麼是成就感)？    <ol>\n<li>擁有可以引以為豪的產品<ol>\n<li>拆解單體為服務導向</li>\n<li>架構升級        </li>\n</ol>\n</li>\n<li>分享與教學<pre><code>1. Blog\n2. 內/外部sharing\n3. 單元測試導入        \n</code></pre></li>\n</ol>\n</li>\n<li>更多的選擇<ol>\n<li>技術轉移<ol>\n<li>Web 技術 轉移 為 Service導向技術</li>\n<li>container 技術</li>\n<li>cloud 技術        </li>\n</ol>\n</li>\n<li>技術提昇<ol>\n<li>.Net </li>\n<li>Infra</li>\n<li>Domain know how</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"爭取加薪-K-1-1\"><a href=\"#爭取加薪-K-1-1\" class=\"headerlink\" title=\"爭取加薪 K * 1.1\"></a>爭取加薪 K * 1.1</h3><h2 id=\"而這些目標需要什麼才能爭取到\"><a href=\"#而這些目標需要什麼才能爭取到\" class=\"headerlink\" title=\"而這些目標需要什麼才能爭取到?\"></a>而這些目標需要什麼才能爭取到?</h2><p>分為三個面向,技術提昇、技術擴展與自我實現,  </p>\n<h3 id=\"技術提昇\"><a href=\"#技術提昇\" class=\"headerlink\" title=\"技術提昇\"></a>技術提昇</h3><p>首先目前我擁有的技術能力有</p>\n<ol>\n<li>.Net solution的 Web Developer能力</li>\n<li>同時兼顧有 DB 與 F2E 基礎進階能力 </li>\n</ol>\n<p>這與我過去的選擇有關, 一直以來都在 Web 深入研究<br>未來的一年仍要朝這個方向發展.<br>但是會改由 Web 導向轉變成服務導向,<br>而 Web 開發只是我本身所能提供給公司的一個服務而已,<br>跟著 .Net 的腳步我想把前台(包含大馬但不限於)昇級上一個版本,<br>包含目前使用的舊版 libary 與 Framework,<br>如此一來可以使用到新版 .Net 的語法,<br>同時也可以解開一些導入測試與微服務時遇到的困境.  </p>\n<h3 id=\"現有能力列表\"><a href=\"#現有能力列表\" class=\"headerlink\" title=\"現有能力列表\"></a>現有能力列表</h3><ol>\n<li>C# &amp; .Net Framework Solution (inculde Linq &amp; Entity Framework )</li>\n<li>javascript (jQuery &amp; Angular etc..)</li>\n<li>Database with Sql (MsSQL solution)</li>\n<li>Source Controle (Git)</li>\n<li></li>\n</ol>\n<h3 id=\"略懂\"><a href=\"#略懂\" class=\"headerlink\" title=\"略懂\"></a>略懂</h3><ol>\n<li>nodejs (with expressjs) &amp; php(codeigniter) &amp; ruby (RoR)</li>\n<li>Jenkins</li>\n<li></li>\n</ol>\n<h3 id=\"技術的擴展\"><a href=\"#技術的擴展\" class=\"headerlink\" title=\"技術的擴展\"></a>技術的擴展</h3><p>我認為公司的單體架構已經面臨到不得不拆的狀況,<br>公司也有意朝這個方向走那是最好不過的了,<br>但對現存的.NET 開發者而言,我認為人人都要有危機意識<br>我看到的現象</p>\n<ol>\n<li>頁面會被CMS取代</li>\n<li>大部份的API可以被Lambda取代</li>\n<li>主流程的部份在跨國的目標下會逐步變成微服務</li>\n</ol>\n<p>基於以上幾點, 除了.Net 的 solution 外,<br>更多情況是要使用別的 solution 或是混用,<br>對此我的視野必須有所提昇,  </p>\n<ol>\n<li>Linux Bash</li>\n<li>Container 技術</li>\n<li>Cloud (AWS/Azure/GCP)</li>\n<li>Node.js<br>在未來的一年開發流程或是維運流程會有很大很快的變化<br>要多聽多看多想多問,公司有很多人才要儘可能的跟他們學習.  </li>\n</ol>\n<h3 id=\"自我營銷\"><a href=\"#自我營銷\" class=\"headerlink\" title=\"自我營銷\"></a>自我營銷</h3><p>最後是自我實現的部份,<br>自我營銷是我很弱的一部份,<br>不善交際,不喜歡人群<br>這點我從去年就開始調整,<br>多參與公司內部的分享,不要害怕說錯<br>假裝自已是對的,再虛心接受別人的指點<br>不需要導師,因為人人都是我的導師<br>開始寫Blog並且貼到社群網站給人鞭<br>這是我目前的 <a href=\"https://blog.marsen.me\">https://blog.marsen.me</a></p>\n<p>今年會繼續朝這個方向衝刺.<br>多分享 多犯錯 然後接受反饋學習.<br>兩個部份是我可以練習分享的機會<br>一個是測試的導入,<br>我們的遺留代碼,有很多可以分享的部份,<br>二是讀書會,<br>借由讀書會可以練習分享,<br>同時學習別人怎麼分享,<br>並且看完一本書,一舉數得.  </p>\n<h2 id=\"具體主管可以幫助我的部份\"><a href=\"#具體主管可以幫助我的部份\" class=\"headerlink\" title=\"具體主管可以幫助我的部份\"></a>具體主管可以幫助我的部份</h2><ol>\n<li>加薪(沒有比這個更務實的了)</li>\n<li>明確指出我的錯誤或是作的好的部份</li>\n</ol>\n<p>Do more do faster </p>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"你的目標是什麼\"><a href=\"#你的目標是什麼\" class=\"headerlink\" title=\"你的目標是什麼?\"></a>你的目標是什麼?</h2><p><strong>自由</strong></p>\n<p>什麼是自由？</p>\n<ol>\n<li>情感上的自由</li>\n<li>時間上的自由</li>\n<li>經濟上的自由</li>\n</ol>\n<h2 id=\"經濟上的自由是一切的基礎\"><a href=\"#經濟上的自由是一切的基礎\" class=\"headerlink\" title=\"經濟上的自由是一切的基礎\"></a>經濟上的自由是一切的基礎</h2><ol>\n<li>更多的收入 <ol>\n<li>被動的收入</li>\n<li>更高的薪資</li>\n</ol>\n</li>\n<li>更有成就感的工作<ol>\n<li>被同事尊重</li>\n<li>被上司認可</li>\n<li>受人歡迎</li>\n</ol>\n</li>\n<li>更多的選擇<ol>\n<li>技術提昇</li>\n<li>領域擴展</li>\n<li>人脈</li>\n</ol>\n</li>\n<li>健康的身體</li>\n<li>更多享受生活</li>\n</ol>\n<h2 id=\"一年後的我想要什麼\"><a href=\"#一年後的我想要什麼\" class=\"headerlink\" title=\"一年後的我想要什麼?\"></a>一年後的我想要什麼?</h2><p>一年後的我想要什麼?</p>\n<ol>\n<li>更高的薪資<ol>\n<li>維持現狀 K (x)</li>\n<li>跳糟 K * 1.3 (x)</li>\n<li>爭取加薪 K * 1.1</li>\n<li>獎金與分紅 </li>\n</ol>\n</li>\n<li>更有成就感的工作(什麼是成就感)？    <ol>\n<li>擁有可以引以為豪的產品<ol>\n<li>拆解單體為服務導向</li>\n<li>架構升級        </li>\n</ol>\n</li>\n<li>分享與教學<pre><code>1. Blog\n2. 內/外部sharing\n3. 單元測試導入        \n</code></pre></li>\n</ol>\n</li>\n<li>更多的選擇<ol>\n<li>技術轉移<ol>\n<li>Web 技術 轉移 為 Service導向技術</li>\n<li>container 技術</li>\n<li>cloud 技術        </li>\n</ol>\n</li>\n<li>技術提昇<ol>\n<li>.Net </li>\n<li>Infra</li>\n<li>Domain know how</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"爭取加薪-K-1-1\"><a href=\"#爭取加薪-K-1-1\" class=\"headerlink\" title=\"爭取加薪 K * 1.1\"></a>爭取加薪 K * 1.1</h3><h2 id=\"而這些目標需要什麼才能爭取到\"><a href=\"#而這些目標需要什麼才能爭取到\" class=\"headerlink\" title=\"而這些目標需要什麼才能爭取到?\"></a>而這些目標需要什麼才能爭取到?</h2><p>分為三個面向,技術提昇、技術擴展與自我實現,  </p>\n<h3 id=\"技術提昇\"><a href=\"#技術提昇\" class=\"headerlink\" title=\"技術提昇\"></a>技術提昇</h3><p>首先目前我擁有的技術能力有</p>\n<ol>\n<li>.Net solution的 Web Developer能力</li>\n<li>同時兼顧有 DB 與 F2E 基礎進階能力 </li>\n</ol>\n<p>這與我過去的選擇有關, 一直以來都在 Web 深入研究<br>未來的一年仍要朝這個方向發展.<br>但是會改由 Web 導向轉變成服務導向,<br>而 Web 開發只是我本身所能提供給公司的一個服務而已,<br>跟著 .Net 的腳步我想把前台(包含大馬但不限於)昇級上一個版本,<br>包含目前使用的舊版 libary 與 Framework,<br>如此一來可以使用到新版 .Net 的語法,<br>同時也可以解開一些導入測試與微服務時遇到的困境.  </p>\n<h3 id=\"現有能力列表\"><a href=\"#現有能力列表\" class=\"headerlink\" title=\"現有能力列表\"></a>現有能力列表</h3><ol>\n<li>C# &amp; .Net Framework Solution (inculde Linq &amp; Entity Framework )</li>\n<li>javascript (jQuery &amp; Angular etc..)</li>\n<li>Database with Sql (MsSQL solution)</li>\n<li>Source Controle (Git)</li>\n<li></li>\n</ol>\n<h3 id=\"略懂\"><a href=\"#略懂\" class=\"headerlink\" title=\"略懂\"></a>略懂</h3><ol>\n<li>nodejs (with expressjs) &amp; php(codeigniter) &amp; ruby (RoR)</li>\n<li>Jenkins</li>\n<li></li>\n</ol>\n<h3 id=\"技術的擴展\"><a href=\"#技術的擴展\" class=\"headerlink\" title=\"技術的擴展\"></a>技術的擴展</h3><p>我認為公司的單體架構已經面臨到不得不拆的狀況,<br>公司也有意朝這個方向走那是最好不過的了,<br>但對現存的.NET 開發者而言,我認為人人都要有危機意識<br>我看到的現象</p>\n<ol>\n<li>頁面會被CMS取代</li>\n<li>大部份的API可以被Lambda取代</li>\n<li>主流程的部份在跨國的目標下會逐步變成微服務</li>\n</ol>\n<p>基於以上幾點, 除了.Net 的 solution 外,<br>更多情況是要使用別的 solution 或是混用,<br>對此我的視野必須有所提昇,  </p>\n<ol>\n<li>Linux Bash</li>\n<li>Container 技術</li>\n<li>Cloud (AWS/Azure/GCP)</li>\n<li>Node.js<br>在未來的一年開發流程或是維運流程會有很大很快的變化<br>要多聽多看多想多問,公司有很多人才要儘可能的跟他們學習.  </li>\n</ol>\n<h3 id=\"自我營銷\"><a href=\"#自我營銷\" class=\"headerlink\" title=\"自我營銷\"></a>自我營銷</h3><p>最後是自我實現的部份,<br>自我營銷是我很弱的一部份,<br>不善交際,不喜歡人群<br>這點我從去年就開始調整,<br>多參與公司內部的分享,不要害怕說錯<br>假裝自已是對的,再虛心接受別人的指點<br>不需要導師,因為人人都是我的導師<br>開始寫Blog並且貼到社群網站給人鞭<br>這是我目前的 <a href=\"https://blog.marsen.me\">https://blog.marsen.me</a></p>\n<p>今年會繼續朝這個方向衝刺.<br>多分享 多犯錯 然後接受反饋學習.<br>兩個部份是我可以練習分享的機會<br>一個是測試的導入,<br>我們的遺留代碼,有很多可以分享的部份,<br>二是讀書會,<br>借由讀書會可以練習分享,<br>同時學習別人怎麼分享,<br>並且看完一本書,一舉數得.  </p>\n<h2 id=\"具體主管可以幫助我的部份\"><a href=\"#具體主管可以幫助我的部份\" class=\"headerlink\" title=\"具體主管可以幫助我的部份\"></a>具體主管可以幫助我的部份</h2><ol>\n<li>加薪(沒有比這個更務實的了)</li>\n<li>明確指出我的錯誤或是作的好的部份</li>\n</ol>\n<p>Do more do faster </p>\n<p>(fin)</p>\n"},{"title":"單元測試與重構記錄(二) 發問篇","date":"2017-12-08T11:04:42.000Z","_content":"## Q1 Controller 要測試嗎？\n### Logics in controller \n```csharp\n[Route(\"Member/Get/{Id}\")]\npublic JsonResult GetMemeberList(long Id, string cc = \"f\")\n{\n    var cleanCache = false;\n    //// logics here\n    if (this.IsFromCompany() && cc == \"t\")\n    {\n        //// do something ...\n    }\n\n    try\n    {\n        var memeberList = this.memeberService.GetmemeberList(Id, cleanCache);            \n        //// logics here\n        if (memeberList.Any())\n        {\n            //// do something ...\n        }\n        else\n        {\n            //// do something ...\n        }\n\n        return this.Json(result, JsonRequestBehavior.AllowGet);\n    }\n    catch (Exception ex)\n    {\n        //// logics here\n        //// do something ...                \n    }\n}\n```\n#### 自問自答\n我認為要，\n但是對於WebAPI回傳的`JsonResult`或是`ActionResult` \n需要轉形才能作驗証  \n可以考慮整合測試勝於單元測試,\nController的通常是面對 Client Side 的呼叫.\n\n## Q2 當 Controller 只有取資料的邏輯\n### No Logics in Controller \n```csharp\npublic ActionResult Index()\n{    \n    return this.Service.GetIndex();\n}\n```\n\n## Q3 當 Service 只有取資料的邏輯\n### No Logics in Service \n```csharp\npublic Member Get(long id)\n{    \n    return this.DataAccessor.GetMember(id);\n}\n```\n#### 自問自答\n我認為不要,\n要測試商業邏輯,不要在意覆蓋率\n\n## Q4. 當Service只有取Catch資料的邏輯\n### No Logics in Service , just call another service\n```csharp\npublic Member Get(long id)\n{   \n    var enableCache = true;\n    var result = this.CacheService.GetCacheData(\n        cacheKey,\n        () => {\n            return this.DataAccessor.GetMember(id);\n        },\n        enableCache\n    );    \n}\n```\n#### 自問自答\n同上,仍然不需要,\n要測試商業邏輯,不要在意覆蓋率, \n要注意的或許是`CacheService.GetCacheData`是不是有包測試 ?\n一般來說,Cache的功能很泛用,測試的報酬率很高\n\n## Q5. 承上,當邏輯存在Func參數之中？\n### Logics in Func \n```csharp\npublic Member Get(long id)\n{   \n    var enableCache = true;\n    var result = this.CacheService.GetCacheData(\n        cacheKey,\n        () => {\n            //// logics here\n            if(id > 9487)\n            {\n                return this.MemberAccessor.GetMember(id);\n            }else\n            {\n                return this.MemberV2Accessor.GetMember(id);\n            }\n            \n        },\n        enableCache\n    );    \n}\n```\n#### 自問自答\n暫時無解,\n或許是這樣Pattern不適合測試,需要調整架構嗎？\n為了測試多包成一個公開方法,反而失去匿名函數的彈性優點,\n不在匿名函數內寫邏輯更不合理,待求解答\n\n## Q6.當邏輯在DA層或ORM的Query中要如何測試？\n### Logics in ORM\n```csharp\n上略...\nusing (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))\n{\n    using (Entities context = Entities.CreateNew(isReadOnly: true))\n    {\n        //// logics here\n        var query = from a in context.Activies.Valids()\n                    where a.Activies_StartDateTime <= startTime &&\n                    a.Activies_EndDateTime >= now &&\n                    a.Activies_ShopId == shopId &&\n                    a.ActiviesCondition.Any(i => i.Activies_ValidFlag\n                    && TypeList.Contains(i.Activies_TypeDef))                    \n                    select a;\n    }\n}\n```\n#### 自問自答\n不適用單元測試,應該整合測試作包覆\n\n## Q7. 當邏輯在MappingProfile該如何測試?\n### Logics in MappingProfile\n```csharp\nprotected override void Configure()\n{\nMapper.CreateMap<PageEntity, UserPageEntity>()\n\t  .ForMember(i => i.Id, s => s.MapFrom(i => i.User_Id))\n\t  .ForMember(i => i.Title, s => s.MapFrom(i => i.User_Name))\n\t  .ForMember(i => i.PageName, s => s.MapFrom(i => i.User_Name + i.User_LastName))\n\t  .ForMember(i => i.LightBox, s => s.MapFrom(i => i.User_Sex == \"male\" ? true : false));\n}\n```\n#### 自問自答\n要作測試,檢查欄位Mapping是否正確,\n但實務上若重用性不高,寫MappingProfile不如直接在代碼內轉換.\n可以少寫MappingProfile的測試.\n\n待解答...\n(fin)","source":"_posts/test_learn/integrated_testing_partice2_question.md","raw":"---\ntitle: \"單元測試與重構記錄(二) 發問篇\"\ndate: 2017/12/08 19:04:42\ntag:\n  - Unit Testing\n  - Integrated Testing\n---\n## Q1 Controller 要測試嗎？\n### Logics in controller \n```csharp\n[Route(\"Member/Get/{Id}\")]\npublic JsonResult GetMemeberList(long Id, string cc = \"f\")\n{\n    var cleanCache = false;\n    //// logics here\n    if (this.IsFromCompany() && cc == \"t\")\n    {\n        //// do something ...\n    }\n\n    try\n    {\n        var memeberList = this.memeberService.GetmemeberList(Id, cleanCache);            \n        //// logics here\n        if (memeberList.Any())\n        {\n            //// do something ...\n        }\n        else\n        {\n            //// do something ...\n        }\n\n        return this.Json(result, JsonRequestBehavior.AllowGet);\n    }\n    catch (Exception ex)\n    {\n        //// logics here\n        //// do something ...                \n    }\n}\n```\n#### 自問自答\n我認為要，\n但是對於WebAPI回傳的`JsonResult`或是`ActionResult` \n需要轉形才能作驗証  \n可以考慮整合測試勝於單元測試,\nController的通常是面對 Client Side 的呼叫.\n\n## Q2 當 Controller 只有取資料的邏輯\n### No Logics in Controller \n```csharp\npublic ActionResult Index()\n{    \n    return this.Service.GetIndex();\n}\n```\n\n## Q3 當 Service 只有取資料的邏輯\n### No Logics in Service \n```csharp\npublic Member Get(long id)\n{    \n    return this.DataAccessor.GetMember(id);\n}\n```\n#### 自問自答\n我認為不要,\n要測試商業邏輯,不要在意覆蓋率\n\n## Q4. 當Service只有取Catch資料的邏輯\n### No Logics in Service , just call another service\n```csharp\npublic Member Get(long id)\n{   \n    var enableCache = true;\n    var result = this.CacheService.GetCacheData(\n        cacheKey,\n        () => {\n            return this.DataAccessor.GetMember(id);\n        },\n        enableCache\n    );    \n}\n```\n#### 自問自答\n同上,仍然不需要,\n要測試商業邏輯,不要在意覆蓋率, \n要注意的或許是`CacheService.GetCacheData`是不是有包測試 ?\n一般來說,Cache的功能很泛用,測試的報酬率很高\n\n## Q5. 承上,當邏輯存在Func參數之中？\n### Logics in Func \n```csharp\npublic Member Get(long id)\n{   \n    var enableCache = true;\n    var result = this.CacheService.GetCacheData(\n        cacheKey,\n        () => {\n            //// logics here\n            if(id > 9487)\n            {\n                return this.MemberAccessor.GetMember(id);\n            }else\n            {\n                return this.MemberV2Accessor.GetMember(id);\n            }\n            \n        },\n        enableCache\n    );    \n}\n```\n#### 自問自答\n暫時無解,\n或許是這樣Pattern不適合測試,需要調整架構嗎？\n為了測試多包成一個公開方法,反而失去匿名函數的彈性優點,\n不在匿名函數內寫邏輯更不合理,待求解答\n\n## Q6.當邏輯在DA層或ORM的Query中要如何測試？\n### Logics in ORM\n```csharp\n上略...\nusing (var transactionScope = new TransactionScope(TransactionScopeOption.Required, transactionOptions))\n{\n    using (Entities context = Entities.CreateNew(isReadOnly: true))\n    {\n        //// logics here\n        var query = from a in context.Activies.Valids()\n                    where a.Activies_StartDateTime <= startTime &&\n                    a.Activies_EndDateTime >= now &&\n                    a.Activies_ShopId == shopId &&\n                    a.ActiviesCondition.Any(i => i.Activies_ValidFlag\n                    && TypeList.Contains(i.Activies_TypeDef))                    \n                    select a;\n    }\n}\n```\n#### 自問自答\n不適用單元測試,應該整合測試作包覆\n\n## Q7. 當邏輯在MappingProfile該如何測試?\n### Logics in MappingProfile\n```csharp\nprotected override void Configure()\n{\nMapper.CreateMap<PageEntity, UserPageEntity>()\n\t  .ForMember(i => i.Id, s => s.MapFrom(i => i.User_Id))\n\t  .ForMember(i => i.Title, s => s.MapFrom(i => i.User_Name))\n\t  .ForMember(i => i.PageName, s => s.MapFrom(i => i.User_Name + i.User_LastName))\n\t  .ForMember(i => i.LightBox, s => s.MapFrom(i => i.User_Sex == \"male\" ? true : false));\n}\n```\n#### 自問自答\n要作測試,檢查欄位Mapping是否正確,\n但實務上若重用性不高,寫MappingProfile不如直接在代碼內轉換.\n可以少寫MappingProfile的測試.\n\n待解答...\n(fin)","slug":"test_learn/integrated_testing_partice2_question","published":1,"updated":"2018-01-30T16:29:44.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyhr006eyk55esnzb8dg","content":"<h2 id=\"Q1-Controller-要測試嗎？\"><a href=\"#Q1-Controller-要測試嗎？\" class=\"headerlink\" title=\"Q1 Controller 要測試嗎？\"></a>Q1 Controller 要測試嗎？</h2><h3 id=\"Logics-in-controller\"><a href=\"#Logics-in-controller\" class=\"headerlink\" title=\"Logics in controller\"></a>Logics in controller</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Route(<span class=\"string\">\"Member/Get/&#123;Id&#125;\"</span>)]</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> JsonResult <span class=\"title\">GetMemeberList</span>(<span class=\"params\"><span class=\"keyword\">long</span> Id, <span class=\"keyword\">string</span> cc = <span class=\"string\">\"f\"</span></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> cleanCache = <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span>/ logics here</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.IsFromCompany() &amp;&amp; cc == <span class=\"string\">\"t\"</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>/ do something ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> memeberList = <span class=\"keyword\">this</span>.memeberService.GetmemeberList(Id, cleanCache);            </div><div class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>/ logics here</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (memeberList.Any())</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"comment\"><span class=\"doctag\">///</span>/ do something ...</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"comment\"><span class=\"doctag\">///</span>/ do something ...</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.Json(result, JsonRequestBehavior.AllowGet);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>/ logics here</span></div><div class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>/ do something ...                </span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"自問自答\"><a href=\"#自問自答\" class=\"headerlink\" title=\"自問自答\"></a>自問自答</h4><p>我認為要，<br>但是對於WebAPI回傳的<code>JsonResult</code>或是<code>ActionResult</code><br>需要轉形才能作驗証<br>可以考慮整合測試勝於單元測試,<br>Controller的通常是面對 Client Side 的呼叫.</p>\n<h2 id=\"Q2-當-Controller-只有取資料的邏輯\"><a href=\"#Q2-當-Controller-只有取資料的邏輯\" class=\"headerlink\" title=\"Q2 當 Controller 只有取資料的邏輯\"></a>Q2 當 Controller 只有取資料的邏輯</h2><h3 id=\"No-Logics-in-Controller\"><a href=\"#No-Logics-in-Controller\" class=\"headerlink\" title=\"No Logics in Controller\"></a>No Logics in Controller</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.Service.GetIndex();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Q3-當-Service-只有取資料的邏輯\"><a href=\"#Q3-當-Service-只有取資料的邏輯\" class=\"headerlink\" title=\"Q3 當 Service 只有取資料的邏輯\"></a>Q3 當 Service 只有取資料的邏輯</h2><h3 id=\"No-Logics-in-Service\"><a href=\"#No-Logics-in-Service\" class=\"headerlink\" title=\"No Logics in Service\"></a>No Logics in Service</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Member <span class=\"title\">Get</span>(<span class=\"params\"><span class=\"keyword\">long</span> id</span>)</span></div><div class=\"line\">&#123;    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.DataAccessor.GetMember(id);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"自問自答-1\"><a href=\"#自問自答-1\" class=\"headerlink\" title=\"自問自答\"></a>自問自答</h4><p>我認為不要,<br>要測試商業邏輯,不要在意覆蓋率</p>\n<h2 id=\"Q4-當Service只有取Catch資料的邏輯\"><a href=\"#Q4-當Service只有取Catch資料的邏輯\" class=\"headerlink\" title=\"Q4. 當Service只有取Catch資料的邏輯\"></a>Q4. 當Service只有取Catch資料的邏輯</h2><h3 id=\"No-Logics-in-Service-just-call-another-service\"><a href=\"#No-Logics-in-Service-just-call-another-service\" class=\"headerlink\" title=\"No Logics in Service , just call another service\"></a>No Logics in Service , just call another service</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Member <span class=\"title\">Get</span>(<span class=\"params\"><span class=\"keyword\">long</span> id</span>)</span></div><div class=\"line\">&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> enableCache = <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"keyword\">this</span>.CacheService.GetCacheData(</div><div class=\"line\">        cacheKey,</div><div class=\"line\">        () =&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.DataAccessor.GetMember(id);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        enableCache</div><div class=\"line\">    );    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"自問自答-2\"><a href=\"#自問自答-2\" class=\"headerlink\" title=\"自問自答\"></a>自問自答</h4><p>同上,仍然不需要,<br>要測試商業邏輯,不要在意覆蓋率,<br>要注意的或許是<code>CacheService.GetCacheData</code>是不是有包測試 ?<br>一般來說,Cache的功能很泛用,測試的報酬率很高</p>\n<h2 id=\"Q5-承上-當邏輯存在Func參數之中？\"><a href=\"#Q5-承上-當邏輯存在Func參數之中？\" class=\"headerlink\" title=\"Q5. 承上,當邏輯存在Func參數之中？\"></a>Q5. 承上,當邏輯存在Func參數之中？</h2><h3 id=\"Logics-in-Func\"><a href=\"#Logics-in-Func\" class=\"headerlink\" title=\"Logics in Func\"></a>Logics in Func</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Member <span class=\"title\">Get</span>(<span class=\"params\"><span class=\"keyword\">long</span> id</span>)</span></div><div class=\"line\">&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> enableCache = <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"keyword\">this</span>.CacheService.GetCacheData(</div><div class=\"line\">        cacheKey,</div><div class=\"line\">        () =&gt; &#123;</div><div class=\"line\">            <span class=\"comment\"><span class=\"doctag\">///</span>/ logics here</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(id &gt; <span class=\"number\">9487</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.MemberAccessor.GetMember(id);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.MemberV2Accessor.GetMember(id);</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">        &#125;,</div><div class=\"line\">        enableCache</div><div class=\"line\">    );    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"自問自答-3\"><a href=\"#自問自答-3\" class=\"headerlink\" title=\"自問自答\"></a>自問自答</h4><p>暫時無解,<br>或許是這樣Pattern不適合測試,需要調整架構嗎？<br>為了測試多包成一個公開方法,反而失去匿名函數的彈性優點,<br>不在匿名函數內寫邏輯更不合理,待求解答</p>\n<h2 id=\"Q6-當邏輯在DA層或ORM的Query中要如何測試？\"><a href=\"#Q6-當邏輯在DA層或ORM的Query中要如何測試？\" class=\"headerlink\" title=\"Q6.當邏輯在DA層或ORM的Query中要如何測試？\"></a>Q6.當邏輯在DA層或ORM的Query中要如何測試？</h2><h3 id=\"Logics-in-ORM\"><a href=\"#Logics-in-ORM\" class=\"headerlink\" title=\"Logics in ORM\"></a>Logics in ORM</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">上略...</div><div class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> transactionScope = <span class=\"keyword\">new</span> TransactionScope(TransactionScopeOption.Required, transactionOptions))</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">using</span> (Entities context = Entities.CreateNew(isReadOnly: <span class=\"literal\">true</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>/ logics here</span></div><div class=\"line\">        <span class=\"keyword\">var</span> query = <span class=\"keyword\">from</span> a <span class=\"keyword\">in</span> context.Activies.Valids()</div><div class=\"line\">                    <span class=\"keyword\">where</span> a.Activies_StartDateTime &lt;= startTime &amp;&amp;</div><div class=\"line\">                    a.Activies_EndDateTime &gt;= now &amp;&amp;</div><div class=\"line\">                    a.Activies_ShopId == shopId &amp;&amp;</div><div class=\"line\">                    a.ActiviesCondition.Any(i =&gt; i.Activies_ValidFlag</div><div class=\"line\">                    &amp;&amp; TypeList.Contains(i.Activies_TypeDef))                    </div><div class=\"line\">                    <span class=\"keyword\">select</span> a;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"自問自答-4\"><a href=\"#自問自答-4\" class=\"headerlink\" title=\"自問自答\"></a>自問自答</h4><p>不適用單元測試,應該整合測試作包覆</p>\n<h2 id=\"Q7-當邏輯在MappingProfile該如何測試\"><a href=\"#Q7-當邏輯在MappingProfile該如何測試\" class=\"headerlink\" title=\"Q7. 當邏輯在MappingProfile該如何測試?\"></a>Q7. 當邏輯在MappingProfile該如何測試?</h2><h3 id=\"Logics-in-MappingProfile\"><a href=\"#Logics-in-MappingProfile\" class=\"headerlink\" title=\"Logics in MappingProfile\"></a>Logics in MappingProfile</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">Mapper.CreateMap&lt;PageEntity, UserPageEntity&gt;()</div><div class=\"line\">\t  .ForMember(i =&gt; i.Id, s =&gt; s.MapFrom(i =&gt; i.User_Id))</div><div class=\"line\">\t  .ForMember(i =&gt; i.Title, s =&gt; s.MapFrom(i =&gt; i.User_Name))</div><div class=\"line\">\t  .ForMember(i =&gt; i.PageName, s =&gt; s.MapFrom(i =&gt; i.User_Name + i.User_LastName))</div><div class=\"line\">\t  .ForMember(i =&gt; i.LightBox, s =&gt; s.MapFrom(i =&gt; i.User_Sex == <span class=\"string\">\"male\"</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"自問自答-5\"><a href=\"#自問自答-5\" class=\"headerlink\" title=\"自問自答\"></a>自問自答</h4><p>要作測試,檢查欄位Mapping是否正確,<br>但實務上若重用性不高,寫MappingProfile不如直接在代碼內轉換.<br>可以少寫MappingProfile的測試.</p>\n<p>待解答…<br>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Q1-Controller-要測試嗎？\"><a href=\"#Q1-Controller-要測試嗎？\" class=\"headerlink\" title=\"Q1 Controller 要測試嗎？\"></a>Q1 Controller 要測試嗎？</h2><h3 id=\"Logics-in-controller\"><a href=\"#Logics-in-controller\" class=\"headerlink\" title=\"Logics in controller\"></a>Logics in controller</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Route(<span class=\"string\">\"Member/Get/&#123;Id&#125;\"</span>)]</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> JsonResult <span class=\"title\">GetMemeberList</span>(<span class=\"params\"><span class=\"keyword\">long</span> Id, <span class=\"keyword\">string</span> cc = <span class=\"string\">\"f\"</span></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> cleanCache = <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span>/ logics here</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.IsFromCompany() &amp;&amp; cc == <span class=\"string\">\"t\"</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>/ do something ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> memeberList = <span class=\"keyword\">this</span>.memeberService.GetmemeberList(Id, cleanCache);            </div><div class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>/ logics here</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (memeberList.Any())</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"comment\"><span class=\"doctag\">///</span>/ do something ...</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"comment\"><span class=\"doctag\">///</span>/ do something ...</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.Json(result, JsonRequestBehavior.AllowGet);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>/ logics here</span></div><div class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>/ do something ...                </span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"自問自答\"><a href=\"#自問自答\" class=\"headerlink\" title=\"自問自答\"></a>自問自答</h4><p>我認為要，<br>但是對於WebAPI回傳的<code>JsonResult</code>或是<code>ActionResult</code><br>需要轉形才能作驗証<br>可以考慮整合測試勝於單元測試,<br>Controller的通常是面對 Client Side 的呼叫.</p>\n<h2 id=\"Q2-當-Controller-只有取資料的邏輯\"><a href=\"#Q2-當-Controller-只有取資料的邏輯\" class=\"headerlink\" title=\"Q2 當 Controller 只有取資料的邏輯\"></a>Q2 當 Controller 只有取資料的邏輯</h2><h3 id=\"No-Logics-in-Controller\"><a href=\"#No-Logics-in-Controller\" class=\"headerlink\" title=\"No Logics in Controller\"></a>No Logics in Controller</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">Index</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.Service.GetIndex();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Q3-當-Service-只有取資料的邏輯\"><a href=\"#Q3-當-Service-只有取資料的邏輯\" class=\"headerlink\" title=\"Q3 當 Service 只有取資料的邏輯\"></a>Q3 當 Service 只有取資料的邏輯</h2><h3 id=\"No-Logics-in-Service\"><a href=\"#No-Logics-in-Service\" class=\"headerlink\" title=\"No Logics in Service\"></a>No Logics in Service</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Member <span class=\"title\">Get</span>(<span class=\"params\"><span class=\"keyword\">long</span> id</span>)</span></div><div class=\"line\">&#123;    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.DataAccessor.GetMember(id);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"自問自答-1\"><a href=\"#自問自答-1\" class=\"headerlink\" title=\"自問自答\"></a>自問自答</h4><p>我認為不要,<br>要測試商業邏輯,不要在意覆蓋率</p>\n<h2 id=\"Q4-當Service只有取Catch資料的邏輯\"><a href=\"#Q4-當Service只有取Catch資料的邏輯\" class=\"headerlink\" title=\"Q4. 當Service只有取Catch資料的邏輯\"></a>Q4. 當Service只有取Catch資料的邏輯</h2><h3 id=\"No-Logics-in-Service-just-call-another-service\"><a href=\"#No-Logics-in-Service-just-call-another-service\" class=\"headerlink\" title=\"No Logics in Service , just call another service\"></a>No Logics in Service , just call another service</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Member <span class=\"title\">Get</span>(<span class=\"params\"><span class=\"keyword\">long</span> id</span>)</span></div><div class=\"line\">&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> enableCache = <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"keyword\">this</span>.CacheService.GetCacheData(</div><div class=\"line\">        cacheKey,</div><div class=\"line\">        () =&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.DataAccessor.GetMember(id);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        enableCache</div><div class=\"line\">    );    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"自問自答-2\"><a href=\"#自問自答-2\" class=\"headerlink\" title=\"自問自答\"></a>自問自答</h4><p>同上,仍然不需要,<br>要測試商業邏輯,不要在意覆蓋率,<br>要注意的或許是<code>CacheService.GetCacheData</code>是不是有包測試 ?<br>一般來說,Cache的功能很泛用,測試的報酬率很高</p>\n<h2 id=\"Q5-承上-當邏輯存在Func參數之中？\"><a href=\"#Q5-承上-當邏輯存在Func參數之中？\" class=\"headerlink\" title=\"Q5. 承上,當邏輯存在Func參數之中？\"></a>Q5. 承上,當邏輯存在Func參數之中？</h2><h3 id=\"Logics-in-Func\"><a href=\"#Logics-in-Func\" class=\"headerlink\" title=\"Logics in Func\"></a>Logics in Func</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Member <span class=\"title\">Get</span>(<span class=\"params\"><span class=\"keyword\">long</span> id</span>)</span></div><div class=\"line\">&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> enableCache = <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"keyword\">this</span>.CacheService.GetCacheData(</div><div class=\"line\">        cacheKey,</div><div class=\"line\">        () =&gt; &#123;</div><div class=\"line\">            <span class=\"comment\"><span class=\"doctag\">///</span>/ logics here</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(id &gt; <span class=\"number\">9487</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.MemberAccessor.GetMember(id);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.MemberV2Accessor.GetMember(id);</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">        &#125;,</div><div class=\"line\">        enableCache</div><div class=\"line\">    );    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"自問自答-3\"><a href=\"#自問自答-3\" class=\"headerlink\" title=\"自問自答\"></a>自問自答</h4><p>暫時無解,<br>或許是這樣Pattern不適合測試,需要調整架構嗎？<br>為了測試多包成一個公開方法,反而失去匿名函數的彈性優點,<br>不在匿名函數內寫邏輯更不合理,待求解答</p>\n<h2 id=\"Q6-當邏輯在DA層或ORM的Query中要如何測試？\"><a href=\"#Q6-當邏輯在DA層或ORM的Query中要如何測試？\" class=\"headerlink\" title=\"Q6.當邏輯在DA層或ORM的Query中要如何測試？\"></a>Q6.當邏輯在DA層或ORM的Query中要如何測試？</h2><h3 id=\"Logics-in-ORM\"><a href=\"#Logics-in-ORM\" class=\"headerlink\" title=\"Logics in ORM\"></a>Logics in ORM</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">上略...</div><div class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> transactionScope = <span class=\"keyword\">new</span> TransactionScope(TransactionScopeOption.Required, transactionOptions))</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">using</span> (Entities context = Entities.CreateNew(isReadOnly: <span class=\"literal\">true</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span>/ logics here</span></div><div class=\"line\">        <span class=\"keyword\">var</span> query = <span class=\"keyword\">from</span> a <span class=\"keyword\">in</span> context.Activies.Valids()</div><div class=\"line\">                    <span class=\"keyword\">where</span> a.Activies_StartDateTime &lt;= startTime &amp;&amp;</div><div class=\"line\">                    a.Activies_EndDateTime &gt;= now &amp;&amp;</div><div class=\"line\">                    a.Activies_ShopId == shopId &amp;&amp;</div><div class=\"line\">                    a.ActiviesCondition.Any(i =&gt; i.Activies_ValidFlag</div><div class=\"line\">                    &amp;&amp; TypeList.Contains(i.Activies_TypeDef))                    </div><div class=\"line\">                    <span class=\"keyword\">select</span> a;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"自問自答-4\"><a href=\"#自問自答-4\" class=\"headerlink\" title=\"自問自答\"></a>自問自答</h4><p>不適用單元測試,應該整合測試作包覆</p>\n<h2 id=\"Q7-當邏輯在MappingProfile該如何測試\"><a href=\"#Q7-當邏輯在MappingProfile該如何測試\" class=\"headerlink\" title=\"Q7. 當邏輯在MappingProfile該如何測試?\"></a>Q7. 當邏輯在MappingProfile該如何測試?</h2><h3 id=\"Logics-in-MappingProfile\"><a href=\"#Logics-in-MappingProfile\" class=\"headerlink\" title=\"Logics in MappingProfile\"></a>Logics in MappingProfile</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">Mapper.CreateMap&lt;PageEntity, UserPageEntity&gt;()</div><div class=\"line\">\t  .ForMember(i =&gt; i.Id, s =&gt; s.MapFrom(i =&gt; i.User_Id))</div><div class=\"line\">\t  .ForMember(i =&gt; i.Title, s =&gt; s.MapFrom(i =&gt; i.User_Name))</div><div class=\"line\">\t  .ForMember(i =&gt; i.PageName, s =&gt; s.MapFrom(i =&gt; i.User_Name + i.User_LastName))</div><div class=\"line\">\t  .ForMember(i =&gt; i.LightBox, s =&gt; s.MapFrom(i =&gt; i.User_Sex == <span class=\"string\">\"male\"</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"自問自答-5\"><a href=\"#自問自答-5\" class=\"headerlink\" title=\"自問自答\"></a>自問自答</h4><p>要作測試,檢查欄位Mapping是否正確,<br>但實務上若重用性不高,寫MappingProfile不如直接在代碼內轉換.<br>可以少寫MappingProfile的測試.</p>\n<p>待解答…<br>(fin)</p>\n"},{"title":"20171023本周要聞/心得/學習擷錄","date":"2017-10-23T03:47:27.000Z","_content":"\n1. [Docker 宣布拥抱 Kubernetes](https://mp.weixin.qq.com/s/n_Gnn5sJ0PkwhQhWUc0UeQ)\n\n    ```\n    Docker Swarm与整个Docker平台紧密集成，然而并非所有人都愿意选择Swarm。 \n    Hykes表示，默认的Swarm已经限制了Docker用户的完整体验，\n    为此，Docker公司计划提供一个无缝平台，同时支持包含Swarm和Kubernetes集群的异构部署。\n    Docker企业版（EE）将很快为Kuberenetes和Swarm提供全套Docker管理服务\n    ```\n\n2. 免費字哪裡找？使用[google font](https://fonts.google.com)\n\n3. 使用TypeScript開發nodejs發生以下錯誤(使用gulp編譯成js)\n    ```\n    error TS2693: 'Promise' only refers to a type, but is being used as a value here.\n    ```\n    安裝 `@types/es6-promise` 以解決問題\n    ```\n    npm i --save-dev  @types/es6-promise\n    ```\n4. 使用 `netstat -ano` 指令在 windows 上查詢佔用的 port 與 PID\n5. 執行 `npm ls moduleName` 可以列出目前專案所以相依該模組的模組\n6. 執行 `npm update` 更新目前專案的模組\n7. `package.json`裡面的的節點`dependencies`放的是與專案相關的模組， \n\t而`devDependencies`放的是與開發相關的模組。ex:`gulp`, \n \t請考慮你使用的模組，是為了開發？還是產品真的會用到。\n8. 想法\n\t- 懶人包應是協助跨越門檻與看見全貌的工具，\n      雖然難以避免代入個人的價值觀，但是刻意為之是不好的。\n\t- 自我批判是一種建立反饋的最好方式，比起以公司\\社群\\世界最好的人要求自已，\n      以最好的自已去要求自已理應該最恰當的，錄影、看鏡子之類的方式... 。\n\n9. [叫人意想不到的激勵科學 (TED 中英文字幕)] (https://www.youtube.com/watch?v=rFVhkIrVDzM)\n    1. 自主性\n    2. 掌握度\n    3. 使命感\n\n(fin)\t","source":"_posts/weekly_learn/20171023.md","raw":"---\ntitle: \"20171023本周要聞/心得/學習擷錄\"\ndate: 2017/10/23 11:47:27\ntag:\n  - Kubernetes\n  - Docker\n  - TypeScript\n  - Nodejs\n  - 記錄\n---\n\n1. [Docker 宣布拥抱 Kubernetes](https://mp.weixin.qq.com/s/n_Gnn5sJ0PkwhQhWUc0UeQ)\n\n    ```\n    Docker Swarm与整个Docker平台紧密集成，然而并非所有人都愿意选择Swarm。 \n    Hykes表示，默认的Swarm已经限制了Docker用户的完整体验，\n    为此，Docker公司计划提供一个无缝平台，同时支持包含Swarm和Kubernetes集群的异构部署。\n    Docker企业版（EE）将很快为Kuberenetes和Swarm提供全套Docker管理服务\n    ```\n\n2. 免費字哪裡找？使用[google font](https://fonts.google.com)\n\n3. 使用TypeScript開發nodejs發生以下錯誤(使用gulp編譯成js)\n    ```\n    error TS2693: 'Promise' only refers to a type, but is being used as a value here.\n    ```\n    安裝 `@types/es6-promise` 以解決問題\n    ```\n    npm i --save-dev  @types/es6-promise\n    ```\n4. 使用 `netstat -ano` 指令在 windows 上查詢佔用的 port 與 PID\n5. 執行 `npm ls moduleName` 可以列出目前專案所以相依該模組的模組\n6. 執行 `npm update` 更新目前專案的模組\n7. `package.json`裡面的的節點`dependencies`放的是與專案相關的模組， \n\t而`devDependencies`放的是與開發相關的模組。ex:`gulp`, \n \t請考慮你使用的模組，是為了開發？還是產品真的會用到。\n8. 想法\n\t- 懶人包應是協助跨越門檻與看見全貌的工具，\n      雖然難以避免代入個人的價值觀，但是刻意為之是不好的。\n\t- 自我批判是一種建立反饋的最好方式，比起以公司\\社群\\世界最好的人要求自已，\n      以最好的自已去要求自已理應該最恰當的，錄影、看鏡子之類的方式... 。\n\n9. [叫人意想不到的激勵科學 (TED 中英文字幕)] (https://www.youtube.com/watch?v=rFVhkIrVDzM)\n    1. 自主性\n    2. 掌握度\n    3. 使命感\n\n(fin)\t","slug":"weekly_learn/20171023","published":1,"updated":"2018-01-30T16:29:44.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyir0084yk55nhu62py4","content":"<ol>\n<li><p><a href=\"https://mp.weixin.qq.com/s/n_Gnn5sJ0PkwhQhWUc0UeQ\" target=\"_blank\" rel=\"external\">Docker 宣布拥抱 Kubernetes</a></p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Docker Swarm与整个Docker平台紧密集成，然而并非所有人都愿意选择Swarm。 </div><div class=\"line\">Hykes表示，默认的Swarm已经限制了Docker用户的完整体验，</div><div class=\"line\">为此，Docker公司计划提供一个无缝平台，同时支持包含Swarm和Kubernetes集群的异构部署。</div><div class=\"line\">Docker企业版（EE）将很快为Kuberenetes和Swarm提供全套Docker管理服务</div></pre></td></tr></table></figure>\n</li>\n<li><p>免費字哪裡找？使用<a href=\"https://fonts.google.com\" target=\"_blank\" rel=\"external\">google font</a></p>\n</li>\n<li><p>使用TypeScript開發nodejs發生以下錯誤(使用gulp編譯成js)</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">error TS2693: &apos;Promise&apos; only refers to a type, but is being used as a value here.</div></pre></td></tr></table></figure>\n<p> 安裝 <code>@types/es6-promise</code> 以解決問題</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i --save-dev  @types/es6-promise</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>netstat -ano</code> 指令在 windows 上查詢佔用的 port 與 PID</p>\n</li>\n<li>執行 <code>npm ls moduleName</code> 可以列出目前專案所以相依該模組的模組</li>\n<li>執行 <code>npm update</code> 更新目前專案的模組</li>\n<li><code>package.json</code>裡面的的節點<code>dependencies</code>放的是與專案相關的模組，<br> 而<code>devDependencies</code>放的是與開發相關的模組。ex:<code>gulp</code>,<br>  請考慮你使用的模組，是為了開發？還是產品真的會用到。</li>\n<li><p>想法</p>\n<ul>\n<li>懶人包應是協助跨越門檻與看見全貌的工具，<br>雖然難以避免代入個人的價值觀，但是刻意為之是不好的。</li>\n<li>自我批判是一種建立反饋的最好方式，比起以公司\\社群\\世界最好的人要求自已，<br>以最好的自已去要求自已理應該最恰當的，錄影、看鏡子之類的方式… 。</li>\n</ul>\n</li>\n<li><p>[叫人意想不到的激勵科學 (TED 中英文字幕)] (<a href=\"https://www.youtube.com/watch?v=rFVhkIrVDzM\" target=\"_blank\" rel=\"external\">https://www.youtube.com/watch?v=rFVhkIrVDzM</a>)</p>\n<ol>\n<li>自主性</li>\n<li>掌握度</li>\n<li>使命感</li>\n</ol>\n</li>\n</ol>\n<p>(fin)    </p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p><a href=\"https://mp.weixin.qq.com/s/n_Gnn5sJ0PkwhQhWUc0UeQ\" target=\"_blank\" rel=\"external\">Docker 宣布拥抱 Kubernetes</a></p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Docker Swarm与整个Docker平台紧密集成，然而并非所有人都愿意选择Swarm。 </div><div class=\"line\">Hykes表示，默认的Swarm已经限制了Docker用户的完整体验，</div><div class=\"line\">为此，Docker公司计划提供一个无缝平台，同时支持包含Swarm和Kubernetes集群的异构部署。</div><div class=\"line\">Docker企业版（EE）将很快为Kuberenetes和Swarm提供全套Docker管理服务</div></pre></td></tr></table></figure>\n</li>\n<li><p>免費字哪裡找？使用<a href=\"https://fonts.google.com\" target=\"_blank\" rel=\"external\">google font</a></p>\n</li>\n<li><p>使用TypeScript開發nodejs發生以下錯誤(使用gulp編譯成js)</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">error TS2693: &apos;Promise&apos; only refers to a type, but is being used as a value here.</div></pre></td></tr></table></figure>\n<p> 安裝 <code>@types/es6-promise</code> 以解決問題</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i --save-dev  @types/es6-promise</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>netstat -ano</code> 指令在 windows 上查詢佔用的 port 與 PID</p>\n</li>\n<li>執行 <code>npm ls moduleName</code> 可以列出目前專案所以相依該模組的模組</li>\n<li>執行 <code>npm update</code> 更新目前專案的模組</li>\n<li><code>package.json</code>裡面的的節點<code>dependencies</code>放的是與專案相關的模組，<br> 而<code>devDependencies</code>放的是與開發相關的模組。ex:<code>gulp</code>,<br>  請考慮你使用的模組，是為了開發？還是產品真的會用到。</li>\n<li><p>想法</p>\n<ul>\n<li>懶人包應是協助跨越門檻與看見全貌的工具，<br>雖然難以避免代入個人的價值觀，但是刻意為之是不好的。</li>\n<li>自我批判是一種建立反饋的最好方式，比起以公司\\社群\\世界最好的人要求自已，<br>以最好的自已去要求自已理應該最恰當的，錄影、看鏡子之類的方式… 。</li>\n</ul>\n</li>\n<li><p>[叫人意想不到的激勵科學 (TED 中英文字幕)] (<a href=\"https://www.youtube.com/watch?v=rFVhkIrVDzM\" target=\"_blank\" rel=\"external\">https://www.youtube.com/watch?v=rFVhkIrVDzM</a>)</p>\n<ol>\n<li>自主性</li>\n<li>掌握度</li>\n<li>使命感</li>\n</ol>\n</li>\n</ol>\n<p>(fin)    </p>\n"},{"title":"[學習筆記]AWS 註冊到建立安全性帳戶","date":"2018-01-26T06:24:16.000Z","_content":"## 該知道的事\n\n1. 僅作為學習 AWS 的過程記錄用\n2. 可能對你有幫助\n3. 可能對你沒幫助\n4. 有沒有幫助都歡迎你提出問題與討論 \n\n## 創建帳號\n\n這段蠻簡單的,不贅敘 \n特別一提的事`可以使用有VISA的金融卡作金額控管`\n比起信用卡動輒數萬到數十萬的額度,\n金融卡可以更彈性,而且精準的控制預算.\n\n另外說一下,現在AWS有一年的免費額度(已經有好一陣子了),  \n~~在註冊流程跳過付款方式的設定,~~  \n~~實際上也是可以操作的AWS的(目前只有設定IAM).~~\n(2018/01/31更新)\n確定`可以使用有VISA的金融卡`開戶,\n另外當要實際使用 AWS 的服務時 EX: EC2, Lambda etc... \n需要綁定信用卡(VISA金融卡也可以)才能繼續使用.\n\n綁定的過程會需要輸入電話,  \nAWS 會撥一通電話給你,  \n螢幕上會出現4個數字,  \n照畫面輸入即可完成信用卡(VISA金融卡)的驗証.\n\n## 權限控管\n\n### Root User\n![](https://i.imgur.com/kRBApSO.jpg)\n完成註冊後,一開始只能使用email登入,這個帳號可以存取AWS所有服務.\nAWS**不建議使用Root User作為日常的管理帳戶, Root User 應該只被用來建立第一個IAM**\n\n#### 重點項目\n1. Root User 啟用 [MFA](https://aws.amazon.com/iam/details/mfa/)\n![](https://i.imgur.com/X3T5poV.jpg)\n首先要下載驗証程式(Google Authenticator),\n然後下一步到以下畫面時, 用Authenticator掃瞄QR Code,\n**連續輸入兩次授權碼(輸入完第一組後,等待新的授權碼出現再輸入)**\n![](https://i.imgur.com/viNBe2p.jpg)\n可以在 [IAM Console](https://console.aws.amazon.com/iam/home) 檢查成功了沒\n![](https://i.imgur.com/JcC9NVz.jpg)\n\n2. 建立 IAM User 與指定 Group 權限\nAWS IAM 的權限觀念是透過 User 與 Group 來組合的,\n權限是授與 Group , 而 User 隸屬於 Group 便擁有其權限,\n同時 AWS 提供多組(347組)預設的 Policies, 讓人選擇\n當然也可以建立自已的 Policy. \n**不確定有沒有反向的 Policy ,*\n*如果有當不同的 Group Policy 有衝突時該如何處理.*\n\n![](https://i.imgur.com/Ry9M2sj.jpg)\n建立使用者時, 使用AutoGenerated Password時\n要記得取得 password\n在最後一步會按下show就會顯示\n![](https://i.imgur.com/8DOmpsg.jpg)\n\n3. 設定 AWS Account ID 與 Alias\n![](https://i.imgur.com/ETV1LMR.jpg)\n\n\n## Q & A\n1. 如何禁用 Root user 登入 ? 可以停用而不刪除一個 user account 嗎？\n```\nroot account 無法停用\nIAM User 可以透過 disable passwd 方式停用\nroot account 基本的 practice\n1. 啟用 MFA\n2. 移除 Access Creditenail\n概念就跟 Winodws Administrator or Linux root 一樣\n需要時再用\n```\n\n## 參考\n- [Root User Account](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html)\n- [建立第一個IAM USER](https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#create-iam-users)\n\n(fin)","source":"_posts/cloud_learn/aws_startup_with_iam.md","raw":"---\ntitle: \"[學習筆記]AWS 註冊到建立安全性帳戶\"\ndate: 2018/01/26 14:24:16\ntag:\n  - AWS\n  - IAM\n  - Root User\n---\n## 該知道的事\n\n1. 僅作為學習 AWS 的過程記錄用\n2. 可能對你有幫助\n3. 可能對你沒幫助\n4. 有沒有幫助都歡迎你提出問題與討論 \n\n## 創建帳號\n\n這段蠻簡單的,不贅敘 \n特別一提的事`可以使用有VISA的金融卡作金額控管`\n比起信用卡動輒數萬到數十萬的額度,\n金融卡可以更彈性,而且精準的控制預算.\n\n另外說一下,現在AWS有一年的免費額度(已經有好一陣子了),  \n~~在註冊流程跳過付款方式的設定,~~  \n~~實際上也是可以操作的AWS的(目前只有設定IAM).~~\n(2018/01/31更新)\n確定`可以使用有VISA的金融卡`開戶,\n另外當要實際使用 AWS 的服務時 EX: EC2, Lambda etc... \n需要綁定信用卡(VISA金融卡也可以)才能繼續使用.\n\n綁定的過程會需要輸入電話,  \nAWS 會撥一通電話給你,  \n螢幕上會出現4個數字,  \n照畫面輸入即可完成信用卡(VISA金融卡)的驗証.\n\n## 權限控管\n\n### Root User\n![](https://i.imgur.com/kRBApSO.jpg)\n完成註冊後,一開始只能使用email登入,這個帳號可以存取AWS所有服務.\nAWS**不建議使用Root User作為日常的管理帳戶, Root User 應該只被用來建立第一個IAM**\n\n#### 重點項目\n1. Root User 啟用 [MFA](https://aws.amazon.com/iam/details/mfa/)\n![](https://i.imgur.com/X3T5poV.jpg)\n首先要下載驗証程式(Google Authenticator),\n然後下一步到以下畫面時, 用Authenticator掃瞄QR Code,\n**連續輸入兩次授權碼(輸入完第一組後,等待新的授權碼出現再輸入)**\n![](https://i.imgur.com/viNBe2p.jpg)\n可以在 [IAM Console](https://console.aws.amazon.com/iam/home) 檢查成功了沒\n![](https://i.imgur.com/JcC9NVz.jpg)\n\n2. 建立 IAM User 與指定 Group 權限\nAWS IAM 的權限觀念是透過 User 與 Group 來組合的,\n權限是授與 Group , 而 User 隸屬於 Group 便擁有其權限,\n同時 AWS 提供多組(347組)預設的 Policies, 讓人選擇\n當然也可以建立自已的 Policy. \n**不確定有沒有反向的 Policy ,*\n*如果有當不同的 Group Policy 有衝突時該如何處理.*\n\n![](https://i.imgur.com/Ry9M2sj.jpg)\n建立使用者時, 使用AutoGenerated Password時\n要記得取得 password\n在最後一步會按下show就會顯示\n![](https://i.imgur.com/8DOmpsg.jpg)\n\n3. 設定 AWS Account ID 與 Alias\n![](https://i.imgur.com/ETV1LMR.jpg)\n\n\n## Q & A\n1. 如何禁用 Root user 登入 ? 可以停用而不刪除一個 user account 嗎？\n```\nroot account 無法停用\nIAM User 可以透過 disable passwd 方式停用\nroot account 基本的 practice\n1. 啟用 MFA\n2. 移除 Access Creditenail\n概念就跟 Winodws Administrator or Linux root 一樣\n需要時再用\n```\n\n## 參考\n- [Root User Account](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html)\n- [建立第一個IAM USER](https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#create-iam-users)\n\n(fin)","slug":"cloud_learn/aws_startup_with_iam","published":1,"updated":"2018-04-04T09:08:15.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyis0085yk55olhpwjyf","content":"<h2 id=\"該知道的事\"><a href=\"#該知道的事\" class=\"headerlink\" title=\"該知道的事\"></a>該知道的事</h2><ol>\n<li>僅作為學習 AWS 的過程記錄用</li>\n<li>可能對你有幫助</li>\n<li>可能對你沒幫助</li>\n<li>有沒有幫助都歡迎你提出問題與討論 </li>\n</ol>\n<h2 id=\"創建帳號\"><a href=\"#創建帳號\" class=\"headerlink\" title=\"創建帳號\"></a>創建帳號</h2><p>這段蠻簡單的,不贅敘<br>特別一提的事<code>可以使用有VISA的金融卡作金額控管</code><br>比起信用卡動輒數萬到數十萬的額度,<br>金融卡可以更彈性,而且精準的控制預算.</p>\n<p>另外說一下,現在AWS有一年的免費額度(已經有好一陣子了),<br><del>在註冊流程跳過付款方式的設定,</del><br><del>實際上也是可以操作的AWS的(目前只有設定IAM).</del><br>(2018/01/31更新)<br>確定<code>可以使用有VISA的金融卡</code>開戶,<br>另外當要實際使用 AWS 的服務時 EX: EC2, Lambda etc…<br>需要綁定信用卡(VISA金融卡也可以)才能繼續使用.</p>\n<p>綁定的過程會需要輸入電話,<br>AWS 會撥一通電話給你,<br>螢幕上會出現4個數字,<br>照畫面輸入即可完成信用卡(VISA金融卡)的驗証.</p>\n<h2 id=\"權限控管\"><a href=\"#權限控管\" class=\"headerlink\" title=\"權限控管\"></a>權限控管</h2><h3 id=\"Root-User\"><a href=\"#Root-User\" class=\"headerlink\" title=\"Root User\"></a>Root User</h3><p><img src=\"https://i.imgur.com/kRBApSO.jpg\" alt=\"\"><br>完成註冊後,一開始只能使用email登入,這個帳號可以存取AWS所有服務.<br>AWS<strong>不建議使用Root User作為日常的管理帳戶, Root User 應該只被用來建立第一個IAM</strong></p>\n<h4 id=\"重點項目\"><a href=\"#重點項目\" class=\"headerlink\" title=\"重點項目\"></a>重點項目</h4><ol>\n<li><p>Root User 啟用 <a href=\"https://aws.amazon.com/iam/details/mfa/\" target=\"_blank\" rel=\"external\">MFA</a><br><img src=\"https://i.imgur.com/X3T5poV.jpg\" alt=\"\"><br>首先要下載驗証程式(Google Authenticator),<br>然後下一步到以下畫面時, 用Authenticator掃瞄QR Code,<br><strong>連續輸入兩次授權碼(輸入完第一組後,等待新的授權碼出現再輸入)</strong><br><img src=\"https://i.imgur.com/viNBe2p.jpg\" alt=\"\"><br>可以在 <a href=\"https://console.aws.amazon.com/iam/home\" target=\"_blank\" rel=\"external\">IAM Console</a> 檢查成功了沒<br><img src=\"https://i.imgur.com/JcC9NVz.jpg\" alt=\"\"></p>\n</li>\n<li><p>建立 IAM User 與指定 Group 權限<br>AWS IAM 的權限觀念是透過 User 與 Group 來組合的,<br>權限是授與 Group , 而 User 隸屬於 Group 便擁有其權限,<br>同時 AWS 提供多組(347組)預設的 Policies, 讓人選擇<br>當然也可以建立自已的 Policy.<br><em>*不確定有沒有反向的 Policy ,</em><br><em>如果有當不同的 Group Policy 有衝突時該如何處理.</em></p>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/Ry9M2sj.jpg\" alt=\"\"><br>建立使用者時, 使用AutoGenerated Password時<br>要記得取得 password<br>在最後一步會按下show就會顯示<br><img src=\"https://i.imgur.com/8DOmpsg.jpg\" alt=\"\"></p>\n<ol>\n<li>設定 AWS Account ID 與 Alias<br><img src=\"https://i.imgur.com/ETV1LMR.jpg\" alt=\"\"></li>\n</ol>\n<h2 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q &amp; A\"></a>Q &amp; A</h2><ol>\n<li>如何禁用 Root user 登入 ? 可以停用而不刪除一個 user account 嗎？<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">root account 無法停用</div><div class=\"line\">IAM User 可以透過 disable passwd 方式停用</div><div class=\"line\">root account 基本的 practice</div><div class=\"line\">1. 啟用 MFA</div><div class=\"line\">2. 移除 Access Creditenail</div><div class=\"line\">概念就跟 Winodws Administrator or Linux root 一樣</div><div class=\"line\">需要時再用</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html\" target=\"_blank\" rel=\"external\">Root User Account</a></li>\n<li><a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#create-iam-users\" target=\"_blank\" rel=\"external\">建立第一個IAM USER</a></li>\n</ul>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"該知道的事\"><a href=\"#該知道的事\" class=\"headerlink\" title=\"該知道的事\"></a>該知道的事</h2><ol>\n<li>僅作為學習 AWS 的過程記錄用</li>\n<li>可能對你有幫助</li>\n<li>可能對你沒幫助</li>\n<li>有沒有幫助都歡迎你提出問題與討論 </li>\n</ol>\n<h2 id=\"創建帳號\"><a href=\"#創建帳號\" class=\"headerlink\" title=\"創建帳號\"></a>創建帳號</h2><p>這段蠻簡單的,不贅敘<br>特別一提的事<code>可以使用有VISA的金融卡作金額控管</code><br>比起信用卡動輒數萬到數十萬的額度,<br>金融卡可以更彈性,而且精準的控制預算.</p>\n<p>另外說一下,現在AWS有一年的免費額度(已經有好一陣子了),<br><del>在註冊流程跳過付款方式的設定,</del><br><del>實際上也是可以操作的AWS的(目前只有設定IAM).</del><br>(2018/01/31更新)<br>確定<code>可以使用有VISA的金融卡</code>開戶,<br>另外當要實際使用 AWS 的服務時 EX: EC2, Lambda etc…<br>需要綁定信用卡(VISA金融卡也可以)才能繼續使用.</p>\n<p>綁定的過程會需要輸入電話,<br>AWS 會撥一通電話給你,<br>螢幕上會出現4個數字,<br>照畫面輸入即可完成信用卡(VISA金融卡)的驗証.</p>\n<h2 id=\"權限控管\"><a href=\"#權限控管\" class=\"headerlink\" title=\"權限控管\"></a>權限控管</h2><h3 id=\"Root-User\"><a href=\"#Root-User\" class=\"headerlink\" title=\"Root User\"></a>Root User</h3><p><img src=\"https://i.imgur.com/kRBApSO.jpg\" alt=\"\"><br>完成註冊後,一開始只能使用email登入,這個帳號可以存取AWS所有服務.<br>AWS<strong>不建議使用Root User作為日常的管理帳戶, Root User 應該只被用來建立第一個IAM</strong></p>\n<h4 id=\"重點項目\"><a href=\"#重點項目\" class=\"headerlink\" title=\"重點項目\"></a>重點項目</h4><ol>\n<li><p>Root User 啟用 <a href=\"https://aws.amazon.com/iam/details/mfa/\" target=\"_blank\" rel=\"external\">MFA</a><br><img src=\"https://i.imgur.com/X3T5poV.jpg\" alt=\"\"><br>首先要下載驗証程式(Google Authenticator),<br>然後下一步到以下畫面時, 用Authenticator掃瞄QR Code,<br><strong>連續輸入兩次授權碼(輸入完第一組後,等待新的授權碼出現再輸入)</strong><br><img src=\"https://i.imgur.com/viNBe2p.jpg\" alt=\"\"><br>可以在 <a href=\"https://console.aws.amazon.com/iam/home\" target=\"_blank\" rel=\"external\">IAM Console</a> 檢查成功了沒<br><img src=\"https://i.imgur.com/JcC9NVz.jpg\" alt=\"\"></p>\n</li>\n<li><p>建立 IAM User 與指定 Group 權限<br>AWS IAM 的權限觀念是透過 User 與 Group 來組合的,<br>權限是授與 Group , 而 User 隸屬於 Group 便擁有其權限,<br>同時 AWS 提供多組(347組)預設的 Policies, 讓人選擇<br>當然也可以建立自已的 Policy.<br><em>*不確定有沒有反向的 Policy ,</em><br><em>如果有當不同的 Group Policy 有衝突時該如何處理.</em></p>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/Ry9M2sj.jpg\" alt=\"\"><br>建立使用者時, 使用AutoGenerated Password時<br>要記得取得 password<br>在最後一步會按下show就會顯示<br><img src=\"https://i.imgur.com/8DOmpsg.jpg\" alt=\"\"></p>\n<ol>\n<li>設定 AWS Account ID 與 Alias<br><img src=\"https://i.imgur.com/ETV1LMR.jpg\" alt=\"\"></li>\n</ol>\n<h2 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q &amp; A\"></a>Q &amp; A</h2><ol>\n<li>如何禁用 Root user 登入 ? 可以停用而不刪除一個 user account 嗎？<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">root account 無法停用</div><div class=\"line\">IAM User 可以透過 disable passwd 方式停用</div><div class=\"line\">root account 基本的 practice</div><div class=\"line\">1. 啟用 MFA</div><div class=\"line\">2. 移除 Access Creditenail</div><div class=\"line\">概念就跟 Winodws Administrator or Linux root 一樣</div><div class=\"line\">需要時再用</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html\" target=\"_blank\" rel=\"external\">Root User Account</a></li>\n<li><a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#create-iam-users\" target=\"_blank\" rel=\"external\">建立第一個IAM USER</a></li>\n</ul>\n<p>(fin)</p>\n"},{"title":"2017 年度回顧","date":"2017-11-28T17:30:08.000Z","_content":"\n## Q1\n今年年初的計劃很簡單 , 2016年沒有機會作到專案 ,  \n所以第一季的目標是希望把維運作好,  \n不論是ISSUE或BUG的掌握能力 , 或是看板與站立的導入 .  \n這部份給自已正面的評價 ,  \n與需求單位有作好溝通並完成交付 .  \n\n過完農曆年後,開始處理 Reverse Proxy  \n大約佔了Q1的大部份時間,期間看板有一再的改版,  \n以維運看板而言我覺得太過花俏與複雜,  \n開始有了發酵的味道, 過多的指示與標記,\n當每件事都變得重要,就沒有事情重要\n\n在RD與需求單位之間,中間的多了一個梳理需求的角色\n但是源頭的需求不斷的重新排序與插件,\n或許才是整體工作膠著的原因\n\n##Q2\nReverse Proxy 告一段落後,被告知要接手貨到付款專案\n同時這段時間,我也在計劃著出國與表弟結婚的事\n雖然與公司的專案上卡在一起 不過算是有驚無險的完成了\n\n最困擾的","source":"_drafts/2017/retrospect.md","raw":"---\ntitle: \"2017 年度回顧\"\ndate: 2017/11/29 01:30:08\n---\n\n## Q1\n今年年初的計劃很簡單 , 2016年沒有機會作到專案 ,  \n所以第一季的目標是希望把維運作好,  \n不論是ISSUE或BUG的掌握能力 , 或是看板與站立的導入 .  \n這部份給自已正面的評價 ,  \n與需求單位有作好溝通並完成交付 .  \n\n過完農曆年後,開始處理 Reverse Proxy  \n大約佔了Q1的大部份時間,期間看板有一再的改版,  \n以維運看板而言我覺得太過花俏與複雜,  \n開始有了發酵的味道, 過多的指示與標記,\n當每件事都變得重要,就沒有事情重要\n\n在RD與需求單位之間,中間的多了一個梳理需求的角色\n但是源頭的需求不斷的重新排序與插件,\n或許才是整體工作膠著的原因\n\n##Q2\nReverse Proxy 告一段落後,被告知要接手貨到付款專案\n同時這段時間,我也在計劃著出國與表弟結婚的事\n雖然與公司的專案上卡在一起 不過算是有驚無險的完成了\n\n最困擾的","slug":"2017/retrospect","published":0,"updated":"2018-01-30T16:29:44.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhqivyiv0087yk55mx9903zd","content":"<h2 id=\"Q1\"><a href=\"#Q1\" class=\"headerlink\" title=\"Q1\"></a>Q1</h2><p>今年年初的計劃很簡單 , 2016年沒有機會作到專案 ,<br>所以第一季的目標是希望把維運作好,<br>不論是ISSUE或BUG的掌握能力 , 或是看板與站立的導入 .<br>這部份給自已正面的評價 ,<br>與需求單位有作好溝通並完成交付 .  </p>\n<p>過完農曆年後,開始處理 Reverse Proxy<br>大約佔了Q1的大部份時間,期間看板有一再的改版,<br>以維運看板而言我覺得太過花俏與複雜,<br>開始有了發酵的味道, 過多的指示與標記,<br>當每件事都變得重要,就沒有事情重要</p>\n<p>在RD與需求單位之間,中間的多了一個梳理需求的角色<br>但是源頭的需求不斷的重新排序與插件,<br>或許才是整體工作膠著的原因</p>\n<p>##Q2<br>Reverse Proxy 告一段落後,被告知要接手貨到付款專案<br>同時這段時間,我也在計劃著出國與表弟結婚的事<br>雖然與公司的專案上卡在一起 不過算是有驚無險的完成了</p>\n<p>最困擾的</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Q1\"><a href=\"#Q1\" class=\"headerlink\" title=\"Q1\"></a>Q1</h2><p>今年年初的計劃很簡單 , 2016年沒有機會作到專案 ,<br>所以第一季的目標是希望把維運作好,<br>不論是ISSUE或BUG的掌握能力 , 或是看板與站立的導入 .<br>這部份給自已正面的評價 ,<br>與需求單位有作好溝通並完成交付 .  </p>\n<p>過完農曆年後,開始處理 Reverse Proxy<br>大約佔了Q1的大部份時間,期間看板有一再的改版,<br>以維運看板而言我覺得太過花俏與複雜,<br>開始有了發酵的味道, 過多的指示與標記,<br>當每件事都變得重要,就沒有事情重要</p>\n<p>在RD與需求單位之間,中間的多了一個梳理需求的角色<br>但是源頭的需求不斷的重新排序與插件,<br>或許才是整體工作膠著的原因</p>\n<p>##Q2<br>Reverse Proxy 告一段落後,被告知要接手貨到付款專案<br>同時這段時間,我也在計劃著出國與表弟結婚的事<br>雖然與公司的專案上卡在一起 不過算是有驚無險的完成了</p>\n<p>最困擾的</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjhqivyaz0000yk55j6vxat6t","tag_id":"cjhqivyba0002yk55xe06tsa6","_id":"cjhqivyca000kyk559q6gigxr"},{"post_id":"cjhqivyaz0000yk55j6vxat6t","tag_id":"cjhqivybm0006yk55dlnydybs","_id":"cjhqivycd000myk552q2zipog"},{"post_id":"cjhqivyaz0000yk55j6vxat6t","tag_id":"cjhqivybw0009yk55c6jy014r","_id":"cjhqivyci000pyk55dpjgkqxg"},{"post_id":"cjhqivyaz0000yk55j6vxat6t","tag_id":"cjhqivyby000cyk55ypwkzvb5","_id":"cjhqivycl000ryk55iq2n1ye0"},{"post_id":"cjhqivyaz0000yk55j6vxat6t","tag_id":"cjhqivyc2000fyk55xpf7rd3p","_id":"cjhqivycp000uyk5587wtslg6"},{"post_id":"cjhqivyb60001yk55liajldk3","tag_id":"cjhqivyc9000jyk55bhyq8ofy","_id":"cjhqivycx0012yk55suprolug"},{"post_id":"cjhqivyb60001yk55liajldk3","tag_id":"cjhqivycf000oyk558jea8urq","_id":"cjhqivyd00014yk558xdykss5"},{"post_id":"cjhqivyb60001yk55liajldk3","tag_id":"cjhqivyco000tyk553brfk99n","_id":"cjhqivyd20017yk55n0mzcx8i"},{"post_id":"cjhqivyb60001yk55liajldk3","tag_id":"cjhqivyct000xyk55fqayrqbd","_id":"cjhqivyd30019yk55k0kh3its"},{"post_id":"cjhqivybd0003yk55lcwirkkr","tag_id":"cjhqivycx0011yk55brc947m8","_id":"cjhqivyd7001dyk55acry1zim"},{"post_id":"cjhqivybd0003yk55lcwirkkr","tag_id":"cjhqivyd20016yk55v4jiyddc","_id":"cjhqivyd8001fyk55085zfhwh"},{"post_id":"cjhqivybf0004yk55iz25vbd6","tag_id":"cjhqivyd5001byk55uh0y86es","_id":"cjhqivydg001myk55z5mpfsaf"},{"post_id":"cjhqivybf0004yk55iz25vbd6","tag_id":"cjhqivyda001gyk55h6z00liz","_id":"cjhqivydh001nyk55pfb2anb2"},{"post_id":"cjhqivybf0004yk55iz25vbd6","tag_id":"cjhqivydc001iyk55knfnay76","_id":"cjhqivydh001pyk55l2en7sbj"},{"post_id":"cjhqivybf0004yk55iz25vbd6","tag_id":"cjhqivydc001jyk55w5n8gz4n","_id":"cjhqivydi001qyk55d1l5gpub"},{"post_id":"cjhqivybf0004yk55iz25vbd6","tag_id":"cjhqivydd001kyk555f4ik6g4","_id":"cjhqivydi001syk55r5zkjtpl"},{"post_id":"cjhqivybi0005yk55zgo1o10x","tag_id":"cjhqivyd5001byk55uh0y86es","_id":"cjhqivydk001uyk55zy7wh912"},{"post_id":"cjhqivybi0005yk55zgo1o10x","tag_id":"cjhqivydc001iyk55knfnay76","_id":"cjhqivydk001vyk5589x7e0y7"},{"post_id":"cjhqivybi0005yk55zgo1o10x","tag_id":"cjhqivydc001jyk55w5n8gz4n","_id":"cjhqivydl001xyk5576ur5fy8"},{"post_id":"cjhqivybn0007yk55qingrdv8","tag_id":"cjhqivydj001tyk55hnhiw0by","_id":"cjhqivydl001yyk55c7ve7dj6"},{"post_id":"cjhqivybr0008yk55p4jle409","tag_id":"cjhqivydk001wyk55jj2fejyv","_id":"cjhqivydm0020yk553mdu5wkn"},{"post_id":"cjhqivybw000ayk55gdw6jfeg","tag_id":"cjhqivydl001zyk555dxpotyz","_id":"cjhqivydo0023yk55k4bjahkj"},{"post_id":"cjhqivybw000ayk55gdw6jfeg","tag_id":"cjhqivydm0021yk55rzdk2oir","_id":"cjhqivydo0024yk55d80qsh9h"},{"post_id":"cjhqivybx000byk5558wv5m66","tag_id":"cjhqivydn0022yk552urame1q","_id":"cjhqivydq0027yk55lddfzlyh"},{"post_id":"cjhqivybx000byk5558wv5m66","tag_id":"cjhqivydo0025yk552j54kgki","_id":"cjhqivydq0028yk55aa8g0kxv"},{"post_id":"cjhqivybz000dyk55llinnph1","tag_id":"cjhqivydn0022yk552urame1q","_id":"cjhqivydt002cyk557s5x68zq"},{"post_id":"cjhqivybz000dyk55llinnph1","tag_id":"cjhqivydo0025yk552j54kgki","_id":"cjhqivydt002dyk55pfimlgyn"},{"post_id":"cjhqivybz000dyk55llinnph1","tag_id":"cjhqivyds002ayk5562t5jibf","_id":"cjhqivydu002fyk556c103cbm"},{"post_id":"cjhqivyc0000eyk55bdfpa3g6","tag_id":"cjhqivydn0022yk552urame1q","_id":"cjhqivydy002hyk55zoiz345p"},{"post_id":"cjhqivyc0000eyk55bdfpa3g6","tag_id":"cjhqivydo0025yk552j54kgki","_id":"cjhqivydy002iyk552md5ut3c"},{"post_id":"cjhqivyc3000gyk55yrfhntkp","tag_id":"cjhqivydn0022yk552urame1q","_id":"cjhqivye1002myk558xrbusmh"},{"post_id":"cjhqivyc3000gyk55yrfhntkp","tag_id":"cjhqivydo0025yk552j54kgki","_id":"cjhqivye1002nyk55otk1mlwh"},{"post_id":"cjhqivyc3000gyk55yrfhntkp","tag_id":"cjhqivyds002ayk5562t5jibf","_id":"cjhqivye1002pyk5538feoisw"},{"post_id":"cjhqivyc5000hyk555riwrfic","tag_id":"cjhqivye0002lyk55q18uid7u","_id":"cjhqivye3002tyk55tynfm0s7"},{"post_id":"cjhqivyc5000hyk555riwrfic","tag_id":"cjhqivye1002oyk553t1i7997","_id":"cjhqivye3002uyk55d4n8b8yx"},{"post_id":"cjhqivyc5000hyk555riwrfic","tag_id":"cjhqivye2002qyk55ti3tod7w","_id":"cjhqivye4002wyk550tmoh5mu"},{"post_id":"cjhqivyc5000hyk555riwrfic","tag_id":"cjhqivye2002ryk55wohfoza8","_id":"cjhqivye4002xyk55b4u74754"},{"post_id":"cjhqivyc7000iyk55x9elr7gd","tag_id":"cjhqivye2002syk55m7kxfiiy","_id":"cjhqivye4002zyk55sh0riz9x"},{"post_id":"cjhqivyc7000iyk55x9elr7gd","tag_id":"cjhqivye3002vyk55n0x0tuxq","_id":"cjhqivye50030yk55igsv28i6"},{"post_id":"cjhqivyc7000iyk55x9elr7gd","tag_id":"cjhqivyc2000fyk55xpf7rd3p","_id":"cjhqivye60032yk55ish91uz6"},{"post_id":"cjhqivycb000lyk55bh9jazz9","tag_id":"cjhqivye4002yyk554z7iqj4i","_id":"cjhqivyef0034yk55hmqn79zq"},{"post_id":"cjhqivycb000lyk55bh9jazz9","tag_id":"cjhqivye50031yk55i32w8yne","_id":"cjhqivyeg0035yk55cu1v4htm"},{"post_id":"cjhqivyce000nyk55ypqqco5s","tag_id":"cjhqivyd5001byk55uh0y86es","_id":"cjhqivyeh0037yk55w5917s5y"},{"post_id":"cjhqivycj000qyk55r5blx13s","tag_id":"cjhqivye4002yyk554z7iqj4i","_id":"cjhqivyei003ayk55o6yzz8ks"},{"post_id":"cjhqivycj000qyk55r5blx13s","tag_id":"cjhqivyeh0038yk55g7piy2hq","_id":"cjhqivyei003byk55o97i9xc7"},{"post_id":"cjhqivycp000vyk550q2abm1l","tag_id":"cjhqivyei0039yk55jsknaxm8","_id":"cjhqivyej003dyk5512mhkbkb"},{"post_id":"cjhqivycp000vyk550q2abm1l","tag_id":"cjhqivyc2000fyk55xpf7rd3p","_id":"cjhqivyek003eyk55xku90gmd"},{"post_id":"cjhqivycr000wyk55tstdpnl0","tag_id":"cjhqivyej003cyk55ob3ndu9x","_id":"cjhqivyem003iyk557hao74zs"},{"post_id":"cjhqivycr000wyk55tstdpnl0","tag_id":"cjhqivyek003fyk55uuow61fv","_id":"cjhqivyem003jyk553d6xbqb0"},{"post_id":"cjhqivycr000wyk55tstdpnl0","tag_id":"cjhqivyek003gyk55epdool7d","_id":"cjhqivyem003lyk5571slnf05"},{"post_id":"cjhqivyct000yyk55zb7kmj02","tag_id":"cjhqivyel003hyk550kthjgxe","_id":"cjhqivyen003myk55lepzalwg"},{"post_id":"cjhqivyct000yyk55zb7kmj02","tag_id":"cjhqivyc2000fyk55xpf7rd3p","_id":"cjhqivyep003oyk55lx75xhgq"},{"post_id":"cjhqivycv000zyk55malr7mlr","tag_id":"cjhqivyem003kyk55xl7d43af","_id":"cjhqivyeq003qyk55368nzn4j"},{"post_id":"cjhqivycv000zyk55malr7mlr","tag_id":"cjhqivyeo003nyk554ls9re33","_id":"cjhqivyeq003ryk55c555gzli"},{"post_id":"cjhqivycy0013yk55yoiblhib","tag_id":"cjhqivyep003pyk55adwa7noi","_id":"cjhqivyes003vyk5566i12j9y"},{"post_id":"cjhqivycy0013yk55yoiblhib","tag_id":"cjhqivyeq003syk552tef2fr9","_id":"cjhqivyes003wyk558965mtl3"},{"post_id":"cjhqivycy0013yk55yoiblhib","tag_id":"cjhqivyc2000fyk55xpf7rd3p","_id":"cjhqivyeu003yyk55x0aby865"},{"post_id":"cjhqivycy0013yk55yoiblhib","tag_id":"cjhqivyeq003tyk55vf4upvo2","_id":"cjhqivyev003zyk55b3sh5mgs"},{"post_id":"cjhqivyd00015yk55nxsbvc7g","tag_id":"cjhqivyer003uyk55bubseyom","_id":"cjhqivyew0041yk55f87799j6"},{"post_id":"cjhqivyd00015yk55nxsbvc7g","tag_id":"cjhqivybm0006yk55dlnydybs","_id":"cjhqivyew0042yk55cp5lkpob"},{"post_id":"cjhqivyd00015yk55nxsbvc7g","tag_id":"cjhqivybw0009yk55c6jy014r","_id":"cjhqivyex0044yk552799iber"},{"post_id":"cjhqivyd00015yk55nxsbvc7g","tag_id":"cjhqivyc2000fyk55xpf7rd3p","_id":"cjhqivyex0045yk55k5slch6k"},{"post_id":"cjhqivyd20018yk55z3hyx567","tag_id":"cjhqivyes003xyk5519ce1lbw","_id":"cjhqivyey0047yk555m0bpzus"},{"post_id":"cjhqivyd4001ayk55tgowr788","tag_id":"cjhqivyer003uyk55bubseyom","_id":"cjhqivyey0048yk55erdklrwg"},{"post_id":"cjhqivyd4001ayk55tgowr788","tag_id":"cjhqivybm0006yk55dlnydybs","_id":"cjhqivyey0049yk55f4q1ldko"},{"post_id":"cjhqivyd4001ayk55tgowr788","tag_id":"cjhqivybw0009yk55c6jy014r","_id":"cjhqivyez004byk55hy1c1cgl"},{"post_id":"cjhqivyd6001cyk55q8qic85e","tag_id":"cjhqivyex0043yk55c56xud01","_id":"cjhqivyez004cyk55z06wfrm4"},{"post_id":"cjhqivyd7001eyk558pciamst","tag_id":"cjhqivyex0046yk5593ky13i1","_id":"cjhqivyf1004iyk55g957ja6u"},{"post_id":"cjhqivyd7001eyk558pciamst","tag_id":"cjhqivye1002oyk553t1i7997","_id":"cjhqivyf1004jyk55kkwwoqa9"},{"post_id":"cjhqivyd7001eyk558pciamst","tag_id":"cjhqivyez004dyk55rt0230x7","_id":"cjhqivyf2004lyk552cgho0a2"},{"post_id":"cjhqivyd7001eyk558pciamst","tag_id":"cjhqivyf0004eyk55id1xwejb","_id":"cjhqivyf2004myk55u8tyltax"},{"post_id":"cjhqivyd7001eyk558pciamst","tag_id":"cjhqivyf0004fyk5527lnld27","_id":"cjhqivyf3004oyk55oen36waa"},{"post_id":"cjhqivyd7001eyk558pciamst","tag_id":"cjhqivyf0004gyk5524d7gmqy","_id":"cjhqivyf3004pyk558rs21ypw"},{"post_id":"cjhqivyda001hyk55av0c6a58","tag_id":"cjhqivyex0046yk5593ky13i1","_id":"cjhqivyf6004tyk5505jhwr08"},{"post_id":"cjhqivyda001hyk55av0c6a58","tag_id":"cjhqivye1002oyk553t1i7997","_id":"cjhqivyf6004uyk55w2cg1i69"},{"post_id":"cjhqivyda001hyk55av0c6a58","tag_id":"cjhqivyez004dyk55rt0230x7","_id":"cjhqivyf6004vyk554m3xp7j4"},{"post_id":"cjhqivyda001hyk55av0c6a58","tag_id":"cjhqivyf0004eyk55id1xwejb","_id":"cjhqivyf6004wyk554bmiszjs"},{"post_id":"cjhqivyda001hyk55av0c6a58","tag_id":"cjhqivyf0004fyk5527lnld27","_id":"cjhqivyf7004xyk556uwga2as"},{"post_id":"cjhqivyda001hyk55av0c6a58","tag_id":"cjhqivyf0004gyk5524d7gmqy","_id":"cjhqivyf7004yyk55zxd33g40"},{"post_id":"cjhqivyfk004zyk55fbbdyi83","tag_id":"cjhqivyd5001byk55uh0y86es","_id":"cjhqivyfr0051yk55f9f6tpnf"},{"post_id":"cjhqivyfk004zyk55fbbdyi83","tag_id":"cjhqivyda001gyk55h6z00liz","_id":"cjhqivyft0054yk55iahbbndb"},{"post_id":"cjhqivyfk004zyk55fbbdyi83","tag_id":"cjhqivyc2000fyk55xpf7rd3p","_id":"cjhqivyfu0055yk55d1m75xi1"},{"post_id":"cjhqivyfr0052yk554f2t4ar7","tag_id":"cjhqivyd5001byk55uh0y86es","_id":"cjhqivyfv0056yk55epti7z7n"},{"post_id":"cjhqivyfr0052yk554f2t4ar7","tag_id":"cjhqivyda001gyk55h6z00liz","_id":"cjhqivyfv0057yk550gg1k4gt"},{"post_id":"cjhqivyfr0052yk554f2t4ar7","tag_id":"cjhqivydc001iyk55knfnay76","_id":"cjhqivyfw0058yk55eav7b7o9"},{"post_id":"cjhqivyfr0052yk554f2t4ar7","tag_id":"cjhqivydc001jyk55w5n8gz4n","_id":"cjhqivyfw0059yk55qetxj3sw"},{"post_id":"cjhqivyfm0050yk55dyr0axnm","tag_id":"cjhqivyd5001byk55uh0y86es","_id":"cjhqivyfx005ayk55gxuxphy9"},{"post_id":"cjhqivyfm0050yk55dyr0axnm","tag_id":"cjhqivyfs0053yk552drh4ejl","_id":"cjhqivyfx005byk55e2m1g2iy"},{"post_id":"cjhqivyfm0050yk55dyr0axnm","tag_id":"cjhqivydc001jyk55w5n8gz4n","_id":"cjhqivyfy005cyk55ydyy7s47"},{"post_id":"cjhqivygo005fyk5520qjxkrd","tag_id":"cjhqivydl001zyk555dxpotyz","_id":"cjhqivygr005iyk55i2we3oxd"},{"post_id":"cjhqivyg9005eyk55tu9j6mpk","tag_id":"cjhqivygp005gyk55b79qux7q","_id":"cjhqivygw005myk5595759x19"},{"post_id":"cjhqivygq005hyk5512s05i54","tag_id":"cjhqivygv005lyk55cr52o8fq","_id":"cjhqivyha005xyk55q446w4yp"},{"post_id":"cjhqivygq005hyk5512s05i54","tag_id":"cjhqivygz005pyk55n4bspdfq","_id":"cjhqivyhe005zyk55qabti253"},{"post_id":"cjhqivygq005hyk5512s05i54","tag_id":"cjhqivyh3005syk55ghgkihay","_id":"cjhqivyhh0062yk55bd5mxa11"},{"post_id":"cjhqivyh6005uyk557xn4dll2","tag_id":"cjhqivydk001wyk55jj2fejyv","_id":"cjhqivyhj0064yk552bhln6wa"},{"post_id":"cjhqivyh8005wyk55tbe4chzq","tag_id":"cjhqivydk001wyk55jj2fejyv","_id":"cjhqivyhm0067yk55gkujrmxv"},{"post_id":"cjhqivygu005kyk55ybgmkvf8","tag_id":"cjhqivygv005lyk55cr52o8fq","_id":"cjhqivyhp006byk558xfp2oyh"},{"post_id":"cjhqivygu005kyk55ybgmkvf8","tag_id":"cjhqivygz005pyk55n4bspdfq","_id":"cjhqivyhr006dyk55nk0t4ifz"},{"post_id":"cjhqivygu005kyk55ybgmkvf8","tag_id":"cjhqivyh3005syk55ghgkihay","_id":"cjhqivyht006gyk55n9k4x423"},{"post_id":"cjhqivyhr006eyk55esnzb8dg","tag_id":"cjhqivyem003kyk55xl7d43af","_id":"cjhqivyht006hyk55ou8c6gp7"},{"post_id":"cjhqivyhr006eyk55esnzb8dg","tag_id":"cjhqivyeo003nyk554ls9re33","_id":"cjhqivyhv006jyk55oqlmlqgm"},{"post_id":"cjhqivygw005nyk551z10ihes","tag_id":"cjhqivyho0069yk55vqrn2ldf","_id":"cjhqivyhw006myk55zwu44yao"},{"post_id":"cjhqivygw005nyk551z10ihes","tag_id":"cjhqivyhs006fyk55cp337goh","_id":"cjhqivyhx006nyk556b26wfz5"},{"post_id":"cjhqivygw005nyk551z10ihes","tag_id":"cjhqivyht006iyk55iahwbwx3","_id":"cjhqivyhx006pyk55r31q85do"},{"post_id":"cjhqivygw005nyk551z10ihes","tag_id":"cjhqivyhv006kyk55jjmghum0","_id":"cjhqivyhx006qyk55j21nr3iw"},{"post_id":"cjhqivygz005qyk55gl7bno7v","tag_id":"cjhqivyhv006lyk55ny9i3suf","_id":"cjhqivyhy006syk55dgbmwl5n"},{"post_id":"cjhqivyh2005ryk55pnneoksl","tag_id":"cjhqivyhx006oyk55getra7ty","_id":"cjhqivyi0006wyk55fd469amb"},{"post_id":"cjhqivyh2005ryk55pnneoksl","tag_id":"cjhqivyhx006ryk5592lvx0mr","_id":"cjhqivyi0006xyk555ivol36z"},{"post_id":"cjhqivyh2005ryk55pnneoksl","tag_id":"cjhqivyhy006tyk55x5miq6s6","_id":"cjhqivyi1006zyk55p75seb0h"},{"post_id":"cjhqivyh2005ryk55pnneoksl","tag_id":"cjhqivyhy006uyk554y496j5n","_id":"cjhqivyi10070yk55rjrdrult"},{"post_id":"cjhqivyh4005tyk55y2wb5u31","tag_id":"cjhqivyho0069yk55vqrn2ldf","_id":"cjhqivyi30074yk55auliodpu"},{"post_id":"cjhqivyh4005tyk55y2wb5u31","tag_id":"cjhqivyhs006fyk55cp337goh","_id":"cjhqivyi30075yk55sgun9x3w"},{"post_id":"cjhqivyh4005tyk55y2wb5u31","tag_id":"cjhqivyht006iyk55iahwbwx3","_id":"cjhqivyi40077yk558gmdmhja"},{"post_id":"cjhqivyh4005tyk55y2wb5u31","tag_id":"cjhqivyi20072yk55vbz8gv6o","_id":"cjhqivyi40078yk55ic28u8g9"},{"post_id":"cjhqivyhb005yyk55p1zm7q9u","tag_id":"cjhqivyi20073yk55g5rfy040","_id":"cjhqivyi7007fyk55149mvjze"},{"post_id":"cjhqivyhb005yyk55p1zm7q9u","tag_id":"cjhqivyi30076yk55qau7d6nt","_id":"cjhqivyi8007gyk55xl27iq2s"},{"post_id":"cjhqivyhb005yyk55p1zm7q9u","tag_id":"cjhqivyi40079yk55r2tmoud4","_id":"cjhqivyi8007iyk55esko2dlh"},{"post_id":"cjhqivyhb005yyk55p1zm7q9u","tag_id":"cjhqivyi5007ayk55qv8ei1ye","_id":"cjhqivyi9007jyk55p9auzro4"},{"post_id":"cjhqivyhb005yyk55p1zm7q9u","tag_id":"cjhqivyi5007byk55gjekggx9","_id":"cjhqivyi9007lyk55mxsqtdev"},{"post_id":"cjhqivyhb005yyk55p1zm7q9u","tag_id":"cjhqivyi6007cyk55sdhamlfu","_id":"cjhqivyia007myk55tma9u171"},{"post_id":"cjhqivyhb005yyk55p1zm7q9u","tag_id":"cjhqivyi6007dyk55ojga6abd","_id":"cjhqivyia007oyk551eat72vc"},{"post_id":"cjhqivyhf0061yk556cpcp7fw","tag_id":"cjhqivyi6007eyk55uvr77vk4","_id":"cjhqivyia007pyk55roamznzo"},{"post_id":"cjhqivyhf0061yk556cpcp7fw","tag_id":"cjhqivydk001wyk55jj2fejyv","_id":"cjhqivyib007ryk556qhqx6ut"},{"post_id":"cjhqivyhi0063yk55zuy8pwpu","tag_id":"cjhqivyi8007hyk55py4rcp7l","_id":"cjhqivyib007syk55jqr1x7ag"},{"post_id":"cjhqivyhk0066yk55czr61lv2","tag_id":"cjhqivyi8007hyk55py4rcp7l","_id":"cjhqivyic007uyk55n8k2te37"},{"post_id":"cjhqivyhk0066yk55czr61lv2","tag_id":"cjhqivyia007nyk55juypk9e6","_id":"cjhqivyid007vyk551q3umq3c"},{"post_id":"cjhqivyhk0066yk55czr61lv2","tag_id":"cjhqivyib007qyk55be8v1dqj","_id":"cjhqivyid007xyk552t4igdlg"},{"post_id":"cjhqivyhn0068yk552iq9gsc1","tag_id":"cjhqivyi8007hyk55py4rcp7l","_id":"cjhqivyie007zyk55jl0pyu0t"},{"post_id":"cjhqivyhn0068yk552iq9gsc1","tag_id":"cjhqivyid007wyk555rqyo444","_id":"cjhqivyie0080yk550jlt92oh"},{"post_id":"cjhqivyho006ayk55q55575ak","tag_id":"cjhqivyie007yyk55l5ztcdpi","_id":"cjhqivyif0082yk55k2filwbu"},{"post_id":"cjhqivyho006ayk55q55575ak","tag_id":"cjhqivyif0081yk551gg4p1xx","_id":"cjhqivyif0083yk554bjum6vg"},{"post_id":"cjhqivyir0084yk55nhu62py4","tag_id":"cjhqivyhv006lyk55ny9i3suf","_id":"cjhqivyiz008byk55msdxvsdi"},{"post_id":"cjhqivyir0084yk55nhu62py4","tag_id":"cjhqivyiu0086yk55duspexhd","_id":"cjhqivyiz008cyk55xgxn7i64"},{"post_id":"cjhqivyir0084yk55nhu62py4","tag_id":"cjhqivyix0088yk55laz2r3w8","_id":"cjhqivyj0008dyk55st2fl6n3"},{"post_id":"cjhqivyir0084yk55nhu62py4","tag_id":"cjhqivyix0089yk5551wgnh6p","_id":"cjhqivyj0008eyk55x6cij1qv"},{"post_id":"cjhqivyir0084yk55nhu62py4","tag_id":"cjhqivyc2000fyk55xpf7rd3p","_id":"cjhqivyj0008fyk55koya7y77"},{"post_id":"cjhqivyis0085yk55olhpwjyf","tag_id":"cjhqivyi8007hyk55py4rcp7l","_id":"cjhqivyj0008gyk55i813ombe"},{"post_id":"cjhqivyis0085yk55olhpwjyf","tag_id":"cjhqivyiy008ayk55egfu7wlq","_id":"cjhqivyj1008hyk55bmgokx4r"},{"post_id":"cjhqivyis0085yk55olhpwjyf","tag_id":"cjhqivyib007qyk55be8v1dqj","_id":"cjhqivyj1008iyk55u2tw5rgr"}],"Tag":[{"name":"powershell","_id":"cjhqivyba0002yk55xe06tsa6"},{"name":"Database","_id":"cjhqivybm0006yk55dlnydybs"},{"name":"MsSQL","_id":"cjhqivybw0009yk55c6jy014r"},{"name":"BulkInsert","_id":"cjhqivyby000cyk55ypwkzvb5"},{"name":"記錄","_id":"cjhqivyc2000fyk55xpf7rd3p"},{"name":"post","_id":"cjhqivyc9000jyk55bhyq8ofy"},{"name":"http","_id":"cjhqivycf000oyk558jea8urq"},{"name":"html","_id":"cjhqivyco000tyk553brfk99n"},{"name":"Content-Type","_id":"cjhqivyct000xyk55fqayrqbd"},{"name":"blog","_id":"cjhqivycx0011yk55brc947m8"},{"name":"google analytics","_id":"cjhqivyd20016yk55v4jiyddc"},{"name":".Net Framework","_id":"cjhqivyd5001byk55uh0y86es"},{"name":"IO","_id":"cjhqivyda001gyk55h6z00liz"},{"name":"Thread","_id":"cjhqivydc001iyk55knfnay76"},{"name":"ASP.Net","_id":"cjhqivydc001jyk55w5n8gz4n"},{"name":"Redis","_id":"cjhqivydd001kyk555f4ik6g4"},{"name":"Trello","_id":"cjhqivydj001tyk55hnhiw0by"},{"name":"閱讀筆記","_id":"cjhqivydk001wyk55jj2fejyv"},{"name":"C#","_id":"cjhqivydl001zyk555dxpotyz"},{"name":"StyleCop","_id":"cjhqivydm0021yk55rzdk2oir"},{"name":"CI","_id":"cjhqivydn0022yk552urame1q"},{"name":"Jenkins","_id":"cjhqivydo0025yk552j54kgki"},{"name":"Openshift","_id":"cjhqivyds002ayk5562t5jibf"},{"name":"expressjs","_id":"cjhqivye0002lyk55q18uid7u"},{"name":"typescript","_id":"cjhqivye1002oyk553t1i7997"},{"name":"gulp","_id":"cjhqivye2002qyk55ti3tod7w"},{"name":"nodejs","_id":"cjhqivye2002ryk55wohfoza8"},{"name":"DBA","_id":"cjhqivye2002syk55m7kxfiiy"},{"name":"SQL Server","_id":"cjhqivye3002vyk55n0x0tuxq"},{"name":"Google API","_id":"cjhqivye4002yyk554z7iqj4i"},{"name":"最有生產力的一年","_id":"cjhqivye50031yk55i32w8yne"},{"name":"OAuth","_id":"cjhqivyeh0038yk55g7piy2hq"},{"name":"github","_id":"cjhqivyei0039yk55jsknaxm8"},{"name":"HTTP/1.1","_id":"cjhqivyej003cyk55ob3ndu9x"},{"name":"HTTP/2","_id":"cjhqivyek003fyk55uuow61fv"},{"name":"TCP","_id":"cjhqivyek003gyk55epdool7d"},{"name":"IIS","_id":"cjhqivyel003hyk550kthjgxe"},{"name":"Unit Testing","_id":"cjhqivyem003kyk55xl7d43af"},{"name":"Integrated Testing","_id":"cjhqivyeo003nyk554ls9re33"},{"name":"website","_id":"cjhqivyep003pyk55adwa7noi"},{"name":"domain","_id":"cjhqivyeq003syk552tef2fr9"},{"name":"DNS","_id":"cjhqivyeq003tyk55vf4upvo2"},{"name":"Entity Framework","_id":"cjhqivyer003uyk55bubseyom"},{"name":"Testing","_id":"cjhqivyes003xyk5519ce1lbw"},{"name":"Unit Test","_id":"cjhqivyex0043yk55c56xud01"},{"name":"kata","_id":"cjhqivyex0046yk5593ky13i1"},{"name":"bootstrap","_id":"cjhqivyez004dyk55rt0230x7"},{"name":"npm","_id":"cjhqivyf0004eyk55id1xwejb"},{"name":"jquery","_id":"cjhqivyf0004fyk5527lnld27"},{"name":"jquery-ui","_id":"cjhqivyf0004gyk5524d7gmqy"},{"name":"Thread Pool","_id":"cjhqivyfs0053yk552drh4ejl"},{"name":"Coding Standard","_id":"cjhqivygp005gyk55b79qux7q"},{"name":"Unix","_id":"cjhqivygv005lyk55cr52o8fq"},{"name":"Linux","_id":"cjhqivygz005pyk55n4bspdfq"},{"name":"Shell","_id":"cjhqivyh3005syk55ghgkihay"},{"name":"testing","_id":"cjhqivyho0069yk55vqrn2ldf"},{"name":"TDD","_id":"cjhqivyhs006fyk55cp337goh"},{"name":"unit test","_id":"cjhqivyht006iyk55iahwbwx3"},{"name":"mutation teseting","_id":"cjhqivyhv006kyk55jjmghum0"},{"name":"Kubernetes","_id":"cjhqivyhv006lyk55ny9i3suf"},{"name":"Windows","_id":"cjhqivyhx006oyk55getra7ty"},{"name":"SCSS","_id":"cjhqivyhx006ryk5592lvx0mr"},{"name":"Ruby","_id":"cjhqivyhy006tyk55x5miq6s6"},{"name":"Node.js","_id":"cjhqivyhy006uyk554y496j5n"},{"name":"integration testing","_id":"cjhqivyi20072yk55vbz8gv6o"},{"name":"IBM","_id":"cjhqivyi20073yk55g5rfy040"},{"name":"Google","_id":"cjhqivyi30076yk55qau7d6nt"},{"name":"Microsoft","_id":"cjhqivyi40079yk55r2tmoud4"},{"name":"Taiwan","_id":"cjhqivyi5007ayk55qv8ei1ye"},{"name":"IoT","_id":"cjhqivyi5007byk55gjekggx9"},{"name":"AI","_id":"cjhqivyi6007cyk55sdhamlfu"},{"name":"Machine Learning","_id":"cjhqivyi6007dyk55ojga6abd"},{"name":"時間管理","_id":"cjhqivyi6007eyk55uvr77vk4"},{"name":"AWS","_id":"cjhqivyi8007hyk55py4rcp7l"},{"name":"docker","_id":"cjhqivyia007nyk55juypk9e6"},{"name":"Root User","_id":"cjhqivyib007qyk55be8v1dqj"},{"name":"EC2","_id":"cjhqivyid007wyk555rqyo444"},{"name":"MsTest","_id":"cjhqivyie007yyk55l5ztcdpi"},{"name":"Visual Studio","_id":"cjhqivyif0081yk551gg4p1xx"},{"name":"Docker","_id":"cjhqivyiu0086yk55duspexhd"},{"name":"TypeScript","_id":"cjhqivyix0088yk55laz2r3w8"},{"name":"Nodejs","_id":"cjhqivyix0089yk5551wgnh6p"},{"name":"IAM","_id":"cjhqivyiy008ayk55egfu7wlq"}]}}