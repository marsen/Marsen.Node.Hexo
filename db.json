{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":1,"renderable":0},{"_id":"source/images/090516_023554_AM.jpg","path":"images/090516_023554_AM.jpg","modified":1,"renderable":0},{"_id":"source/images/102216_095355_PM.jpg","path":"images/102216_095355_PM.jpg","modified":1,"renderable":0},{"_id":"source/images/090516_023252_AM.jpg","path":"images/090516_023252_AM.jpg","modified":1,"renderable":0},{"_id":"source/images/090516_021242_AM.jpg","path":"images/090516_021242_AM.jpg","modified":1,"renderable":0},{"_id":"themes/landscape/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"source/amp-dist/sample/sample-avator.png","path":"amp-dist/sample/sample-avator.png","modified":1,"renderable":0},{"_id":"source/amp-dist/sample/sample-logo.png","path":"amp-dist/sample/sample-logo.png","modified":1,"renderable":0},{"_id":"source/amp-dist/sample/sample-substituteTitleImage.png","path":"amp-dist/sample/sample-substituteTitleImage.png","modified":1,"renderable":0},{"_id":"source/images/workerthread_and_iothread/110416_102435_AM.jpg","path":"images/workerthread_and_iothread/110416_102435_AM.jpg","modified":1,"renderable":0},{"_id":"source/images/workerthread_and_iothread/110416_103521_AM.jpg","path":"images/workerthread_and_iothread/110416_103521_AM.jpg","modified":1,"renderable":0},{"_id":"source/images/workerthread_and_iothread/110416_112435_AM.jpg","path":"images/workerthread_and_iothread/110416_112435_AM.jpg","modified":1,"renderable":0},{"_id":"source/images/workerthread_and_iothread/278553_300x300.jpg","path":"images/workerthread_and_iothread/278553_300x300.jpg","modified":1,"renderable":0},{"_id":"source/images/090516_024550_AM.jpg","path":"images/090516_024550_AM.jpg","modified":1,"renderable":0},{"_id":"source/images/workerthread_and_iothread/110416_102436_AM.png","path":"images/workerthread_and_iothread/110416_102436_AM.png","modified":1,"renderable":0},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"source/images/workerthread_and_iothread/110416_102437_AM.jpg","path":"images/workerthread_and_iothread/110416_102437_AM.jpg","modified":1,"renderable":0},{"_id":"source/images/workerthread_and_iothread/110416_170101_PM.jpg","path":"images/workerthread_and_iothread/110416_170101_PM.jpg","modified":1,"renderable":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"source/images/workerthread_and_iothread/110416_170001_PM.jpg","path":"images/workerthread_and_iothread/110416_170001_PM.jpg","modified":1,"renderable":0},{"_id":"source/images/workerthread_and_iothread/螢幕擷取畫面_110716_110245_AM.jpg","path":"images/workerthread_and_iothread/螢幕擷取畫面_110716_110245_AM.jpg","modified":1,"renderable":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.bak.jpg","path":"css/images/banner.bak.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"1c1ded058047f1d22275a8561240d1074b7a5cca","modified":1471198967912},{"_id":"source/README.md","hash":"7e15d0a159a4a8be81924f6f4392266dcd4b407c","modified":1471198943299},{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1471068436192},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1471068436193},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1471068436194},{"_id":"themes/landscape/_config.yml","hash":"4b6e776c25f668578364ab6b90c7d00853979be8","modified":1486577510413},{"_id":"themes/landscape/README.md","hash":"e7cc82dc79596f36ba05a8139e7d6b2dfc4ae5f9","modified":1471068436196},{"_id":"themes/landscape/package.json","hash":"d07f326588fef82f1d23ae3101c9ddfff34c132f","modified":1471068436220},{"_id":"source/_drafts/dotNet_filestream.md","hash":"a0247c2db4f16f29e72f2ddfd40ad392c2577ba9","modified":1476983398812},{"_id":"source/_drafts/workerthread_and_iothread_1.md","hash":"d2342e4a5305f3454cd75b4ff28240c9139adbcc","modified":1479269668960},{"_id":"source/_drafts/workerthread_and_iothread_2.md","hash":"5fa7b3c6f3c010c4280b4c9c5ffaf2f223450d0c","modified":1478749399279},{"_id":"source/_posts/about_content_type.md","hash":"7a9cb9f6ece5a05490491c1b17aec42ad338dd9f","modified":1478749411111},{"_id":"source/_posts/aspdotnet_threadpool_and_redis.md","hash":"6204e983255895cc7592dea87f8d40963b9a6a37","modified":1485610173416},{"_id":"source/_posts/1st_time_with_powershell.md","hash":"23b7e9ff77dea30b73b1d69efc1de2c9e08c9acd","modified":1479720148683},{"_id":"source/_posts/aspdotnet_threadpool_monitor.md","hash":"58d623aab527976cc0174d804ec9d8fa5db23013","modified":1486568750127},{"_id":"source/_posts/add_google_analytics_to_hexo_blog_1.md","hash":"26abe9643e7b65647f2aa0ccd422605120e16bb4","modified":1472117015055},{"_id":"source/_posts/attack_your_day.md","hash":"a6b85a5d22eeece650606393e6e4483d01a3d5f7","modified":1490459613307},{"_id":"source/_posts/ci_use_jenkins_on_openshfit.md","hash":"0e4e5929b2464ce02386f03e6a3cd762bee48513","modified":1484496724053},{"_id":"source/_posts/auto_add_trello_card.md","hash":"5dfa9e5b9963df287db35d2be703b3c1305f0b0d","modified":1486571074800},{"_id":"source/_posts/be_friend_with_time.md","hash":"b0d062ed9880010a911629962256d1ef8f092602","modified":1484117706490},{"_id":"source/_posts/ci_use_jenkins_on_windows.md","hash":"9c6280b7d104fcef6fd1c102ee596787eb0cb44f","modified":1484496724055},{"_id":"source/_posts/c_sharp_6_interpolation_string_stylecop_sa0102.md","hash":"3bee08fe04c5866438fbcb3b91bafeafaa86d0c8","modified":1484117560682},{"_id":"source/_posts/file_rowdata_import_mssql.md","hash":"1ff864c198c597b632fe7cd84ab0aacbed81e3a0","modified":1490459135580},{"_id":"source/_posts/ci_use_jenkins.md","hash":"144115ca0ed22574597b445ae902b320c7469ad8","modified":1484496724052},{"_id":"source/_posts/how_to_use_github_page.md","hash":"293fed508dd1050f6223b75f964d3f3ef762f468","modified":1480871012179},{"_id":"source/_posts/ci_use_jenkins_on_two_windows.md","hash":"69458756350ac9f671cc873b132bd75d055ff106","modified":1495953024763},{"_id":"source/_posts/hello-world.md","hash":"129f80cf22aa52d007029bf2d22b90d86898ff67","modified":1480870925522},{"_id":"source/_posts/dotnet_pdb_file.md","hash":"4cce1b7f684431a5d31dc42977a505b2cbe5c74b","modified":1480870848445},{"_id":"source/_posts/setting_DNS_with_google.md","hash":"1c65a5b037511f7c2a0d637a8acaeda35730cc3a","modified":1480871264522},{"_id":"source/_posts/http2 by cloudflare.md","hash":"42d51d2508a498baf0df391aeaa4f683c777a21a","modified":1480871132865},{"_id":"source/_posts/testingislearning.md","hash":"9698766b0584d22c159b87c876fe825ef1a13095","modified":1495173843652},{"_id":"source/_posts/iis_tracing_log_setting.md","hash":"0bd12e211406517b86b566448ae3852f70323a55","modified":1485240707731},{"_id":"source/_posts/todolist_by_typescript_2.md","hash":"21426c2d4756d8839eca0bd3e86edd999de2de03","modified":1480871370000},{"_id":"source/_posts/sites_todo_list.md","hash":"ea36c902ab0951804f5acaf0a2b0fcd620d160a0","modified":1475950066353},{"_id":"source/_posts/todolist_by_typescript_1.md","hash":"3462cababdc21d3017ac8baf9d1aaf514f22cff5","modified":1480871330252},{"_id":"source/images/090516_023554_AM.jpg","hash":"a9cec76e1e7b039f9c870fdf0f938cf4edfd7ce8","modified":1473014154777},{"_id":"source/images/102216_095355_PM.jpg","hash":"721e0caf732a8c6cd6b1b83a31fec062af16a744","modified":1477144450000},{"_id":"source/_posts/unitestwriting.md","hash":"1b80445f7b1753a817edcd3d6a219d3ed60d6812","modified":1492944036046},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1471068436215},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1471068436217},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1471068436218},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1471068436216},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1471068436216},{"_id":"themes/landscape/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1471068436199},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1471068436218},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1471068436219},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1471068436200},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1471068436198},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1471068436202},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1471068436200},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1471068436201},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1471068436202},{"_id":"source/images/090516_023252_AM.jpg","hash":"509eef571252eebe3417bb7c89c589d3485a01af","modified":1473013972393},{"_id":"source/images/090516_021242_AM.jpg","hash":"015f6fff88214f8744c37b8d02a331ffadda5943","modified":1473014065463},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1471068436221},{"_id":"themes/landscape/source/favicon.ico","hash":"998df8105a3500811219e4a176d14b1d88ab8b94","modified":1486577510415},{"_id":"source/amp-dist/sample/sample-avator.png","hash":"0c9e74f8207353ace09090a7d17def59ab9b98c8","modified":1486577069392},{"_id":"source/amp-dist/sample/sample-logo.png","hash":"9dad0e8cc4d48c6e550820e91377e2028a344176","modified":1486577069392},{"_id":"source/amp-dist/sample/sample-substituteTitleImage.png","hash":"f7d5b269516ed2ef4c855466b5d78d4ca136445c","modified":1486577069391},{"_id":"source/images/workerthread_and_iothread/110416_102435_AM.jpg","hash":"a876fb25212a93ae47f0447a83d64d2f5028d03a","modified":1478573979608},{"_id":"source/images/workerthread_and_iothread/110416_103521_AM.jpg","hash":"839e4d25969fc11027a13413c74a3456524d8f3e","modified":1478226926332},{"_id":"source/images/workerthread_and_iothread/110416_112435_AM.jpg","hash":"3bc3703723f421303a5119d6563e8d32614f4ac2","modified":1478574463093},{"_id":"source/images/workerthread_and_iothread/278553_300x300.jpg","hash":"4cba555dc1ba4aef9e7aee3b4adb1d06a3937968","modified":1478764841931},{"_id":"source/images/090516_024550_AM.jpg","hash":"16b8658ff25fec9ecc6c84a5354c8a6f015ddb30","modified":1473014750891},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"a7faab4f3601b28107af5b1095b3966c2f88fec8","modified":1471068436204},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1471068436204},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"a512a14bce954fadb0d9346d9d9ed4effbc90be2","modified":1492831489911},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1471068436205},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1471068436206},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1471068436207},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"89998e6b2929c4ff5093bbf6b86d611d7420be52","modified":1486577737365},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"148bdf714dd1a7bf55e571f13808ceae079200cc","modified":1471068436208},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1471068436208},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1471068436212},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1471068436213},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1471068436213},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1471068436214},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1471068436214},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1471068436215},{"_id":"source/images/workerthread_and_iothread/110416_102436_AM.png","hash":"b567d9a58721b13f82b351ba494c260ee86c77cb","modified":1478226566420},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1471068436246},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1471068436247},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1471068436247},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1471068436248},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1471068436249},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1471068436255},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1471068436256},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1471068436223},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1471068436258},{"_id":"themes/landscape/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1471068436232},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1471068436245},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1471068436257},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1471068436246},{"_id":"source/images/workerthread_and_iothread/110416_102437_AM.jpg","hash":"a4b6382cea823bea0be5757fe0800639ae0166ce","modified":1478492781816},{"_id":"source/images/workerthread_and_iothread/110416_170101_PM.jpg","hash":"e941d0267614d431c0e422ef753c38de7b75087d","modified":1478429765087},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1471068436209},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1471068436210},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1471068436209},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1471068436210},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1471068436211},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1471068436211},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1471068436251},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1471068436253},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1471068436250},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1471068436252},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1471068436224},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"ae3a7b5349a51e8c3835cea9b8e521fa837ff6ef","modified":1484117706494},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1471068436252},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1471068436226},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1471068436254},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1471068436225},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1471068436226},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1471068436227},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1471068436228},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1471068436228},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1471068436229},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1471068436229},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1471068436230},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1471068436231},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1471068436233},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1471068436234},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1471068436240},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1471068436239},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"dd61b5b07fedf2fa657aa76c9058d19c1e30d294","modified":1471811233962},{"_id":"source/images/workerthread_and_iothread/110416_170001_PM.jpg","hash":"bd9fa06701bd800e059df8fd499af13d1b8ad277","modified":1478429858161},{"_id":"source/images/workerthread_and_iothread/螢幕擷取畫面_110716_110245_AM.jpg","hash":"556cffba3e1c86d4c33775c3cabfef8fd6fcebc9","modified":1478487765493},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1471068436237},{"_id":"themes/landscape/source/css/images/banner.bak.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1471068436244}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"FileStream正確的使用FileAccess與FileShare參數","_content":"## 前情提要\n使用FileStream存取檔案是基本功,但是沒有了解底層細節,\n在多執行緒同時存取與編輯檔案時,將會引爆咬檔地雷。\n\n\n\n## 加碼 HttpContent 與 Stream\n\n\n## 測試工具 `LinqPad`\n\n## 參考\n- http://stackoverflow.com/questions/25097773/system-io-filestream-fileaccess-vs-fileshare\n- https://referencesource.microsoft.com/#q=FileStream","source":"_drafts/dotNet_filestream.md","raw":"---\ntitle: FileStream正確的使用FileAccess與FileShare參數\ntag:\n  - .Net Framework\n  - IO\n  - 記錄\n---\n## 前情提要\n使用FileStream存取檔案是基本功,但是沒有了解底層細節,\n在多執行緒同時存取與編輯檔案時,將會引爆咬檔地雷。\n\n\n\n## 加碼 HttpContent 與 Stream\n\n\n## 測試工具 `LinqPad`\n\n## 參考\n- http://stackoverflow.com/questions/25097773/system-io-filestream-fileaccess-vs-fileshare\n- https://referencesource.microsoft.com/#q=FileStream","slug":"dotNet_filestream","published":0,"date":"2016-10-20T16:20:19.833Z","updated":"2016-10-20T17:09:58.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3o460000lgop2xps7bqb","content":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><p>使用FileStream存取檔案是基本功,但是沒有了解底層細節,<br>在多執行緒同時存取與編輯檔案時,將會引爆咬檔地雷。</p>\n<h2 id=\"加碼-HttpContent-與-Stream\"><a href=\"#加碼-HttpContent-與-Stream\" class=\"headerlink\" title=\"加碼 HttpContent 與 Stream\"></a>加碼 HttpContent 與 Stream</h2><h2 id=\"測試工具-LinqPad\"><a href=\"#測試工具-LinqPad\" class=\"headerlink\" title=\"測試工具 LinqPad\"></a>測試工具 <code>LinqPad</code></h2><h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"http://stackoverflow.com/questions/25097773/system-io-filestream-fileaccess-vs-fileshare\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/25097773/system-io-filestream-fileaccess-vs-fileshare</a></li>\n<li><a href=\"https://referencesource.microsoft.com/#q=FileStream\" target=\"_blank\" rel=\"external\">https://referencesource.microsoft.com/#q=FileStream</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><p>使用FileStream存取檔案是基本功,但是沒有了解底層細節,<br>在多執行緒同時存取與編輯檔案時,將會引爆咬檔地雷。</p>\n<h2 id=\"加碼-HttpContent-與-Stream\"><a href=\"#加碼-HttpContent-與-Stream\" class=\"headerlink\" title=\"加碼 HttpContent 與 Stream\"></a>加碼 HttpContent 與 Stream</h2><h2 id=\"測試工具-LinqPad\"><a href=\"#測試工具-LinqPad\" class=\"headerlink\" title=\"測試工具 LinqPad\"></a>測試工具 <code>LinqPad</code></h2><h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"http://stackoverflow.com/questions/25097773/system-io-filestream-fileaccess-vs-fileshare\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/25097773/system-io-filestream-fileaccess-vs-fileshare</a></li>\n<li><a href=\"https://referencesource.microsoft.com/#q=FileStream\" target=\"_blank\" rel=\"external\">https://referencesource.microsoft.com/#q=FileStream</a></li>\n</ul>\n"},{"title":"實戰 .Net 大量請求與多執行緒(一) 錯誤與原因","date":"2016-11-04T03:49:17.000Z","_content":"## 前情提要\n1. 實務上的專案遭受 DDos 攻擊  \n2. DB TimeOut  \n3. Redis TimeOut  \n4. 主程式沒有死,但是Elmah出現大量Exception  \n\n## 錯誤資訊\n![瞬發的流量](/images/workerthread_and_iothread/110416_102437_AM.jpg)\n\n### Redis的錯誤記錄\n錯誤1.\n```\n    Timeout performing SETEX Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8, \n    inst: 1, mgr: ExecuteSelect, err: never, queue: 2, qu: 2, qs: 0, qc: 0, wr: 0, wq: 0, in: 0, ar: 0, \n    IOCP: (Busy=0,Free=1000,Min=4,Max=1000), WORKER: (Busy=165,Free=32602,Min=4,Max=32767), \n    clientName: TYO-HOST\n```\n錯誤2.\n```\n    StackExchange.Redis.RedisConnectionException\n    SocketFailure on GET\n```\n錯誤3.\n```\n    No connection is available to service this operation: \n    GET Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8\n```\n錯誤4.\n```\n    UnableToResolvePhysicalConnection on GET\n```\n\n### SQL Server 錯誤記錄\n\n```\n    A transport-level error has occurred when receiving results from the server. \n    (provider: Session Provider, error: 19 - Physical connection is not usable)\n```\n\n\n\n## 錯誤原因\n1. CLR 建立執行緒需要時間 , 一秒鐘最多只能建立兩條 Thread [註一](#comment1)\n2. 瞬間的 Request 量超過 ThreadPool 中的 Thread 數量 \n3. ThreadPool 建立 Thread 中 , 仍持續有 Request 進來引發錯誤 \n4. 因為我的[測試環境](#testEnvironment)有四核心,依文件所說\n\n## 實驗流程\n1. 建立監視器\n    參考 [How To: Monitor the ASP.NET Thread Pool Using Custom Counters](https://msdn.microsoft.com/zh-tw/library/ff650682.aspx)\n\n    1. 建立一個 console 專案, [MyAspNetThreadCounters](#MyAspNetThreadCounters)\n    2. 編譯並執行 console 專案\n    3. 開啟`Regedit.exe` 檢查 `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services` 應包含以下值\n\n        ```\n            Available Worker Threads\n            Available IO Threads\n            Max Worker Threads\n            Max IO Threads\n            Min Worker Threads\n            Min IO Threads\n        ```\n\n2. 建立ASP.NET專案\n    1. 建立[Global.asax](#global)\n    2. 建立[StartWebApp.aspx](#startWebApp)\n    3. 建立[Sleep.aspx](#sleep)\n3. 開啟 `perfmon.exe` 新增計數器 , 選取我們自定義的 `MyAspNetThreadCounters`\n4. 連結網頁 `localhost\\StartWebApp.aspx` 以啟動網站,可以得到以下數據\n    ```\n    MaxWorkerThreads:32767.\n    MaxIOThreads:1000.\n    MinWorkerThreads:4.\n    MinIOThreads:4.\n    AvailableWorker:32766.\n    AvailableIO:1000.\n    ```\n5. 執行大量 redis 連線,觀察結果 AvailableWorker Threads 會往下掉,  \n故推斷 redis connection 是透過 Worker Threads 建立.\n\n6. 重現錯誤, 執行大量的 sleep 頁面,透過這種方式搶佔IIS的執行緒.\n![](/images/workerthread_and_iothread/110416_170101_PM.jpg)\n\n7. 再執行大量 redis 連線, 用以重現錯誤\n![](/images/workerthread_and_iothread/110416_170001_PM.jpg)\n\n## 程式碼 \n\n### <span id=\"MyAspNetThreadCounters\">MyAspNetThreadCounters</span>\n```csharp\n  using System;\n  using System.Diagnostics;\n\n  class MyAspNetThreadCounters\n  {\n      [STAThread]\n      static void Main(string[] args)\n      {\n          CreateCounters();\n          Console.WriteLine(\"MyAspNetThreadCounters performance counter category \" +\n                            \"is created. [Press Enter]\");\n          Console.ReadLine();\n      }\n\n      public static void CreateCounters()\n      {\n          CounterCreationDataCollection col =\n            new CounterCreationDataCollection();\n\n          // Create custom counter objects\n          CounterCreationData counter1 = new CounterCreationData();\n          counter1.CounterName = \"Available Worker Threads\";\n          counter1.CounterHelp = \"The difference between the maximum number \" +\n                                \"of thread pool worker threads and the \" +\n                                \"number currently active.\";\n          counter1.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter2 = new CounterCreationData();\n          counter2.CounterName = \"Available IO Threads\";\n          counter2.CounterHelp = \"The difference between the maximum number of \" +\n                                \"thread pool IO threads and the number \" +\n                                \"currently active.\";\n          counter2.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter3 = new CounterCreationData();\n          counter3.CounterName = \"Max Worker Threads\";\n          counter3.CounterHelp = \"The number of requests to the thread pool \" +\n                                \"that can be active concurrently. All \" +\n                                \"requests above that number remain queued until \" +\n                                \"thread pool worker threads become available.\";\n          counter3.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter4 = new CounterCreationData();\n          counter4.CounterName = \"Max IO Threads\";\n          counter4.CounterHelp = \"The number of requests to the thread pool \" +\n                                \"that can be active concurrently. All \" +\n                                \"requests above that number remain queued until \" +\n                                \"thread pool IO threads become available.\";\n          counter4.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter5 = new CounterCreationData();\n          counter5.CounterName = \"Min Worker Threads\";\n          counter5.CounterHelp = \"The number of requests to the thread pool \" +\n                                \"that can be active concurrently. All \" +\n                                \"requests above that number remain queued until \" +\n                                \"thread pool worker threads become available.\";\n          counter5.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter6 = new CounterCreationData();\n          counter6.CounterName = \"Min IO Threads\";\n          counter6.CounterHelp = \"The number of requests to the thread pool \" +\n                                \"that can be active concurrently. All \" +\n                                \"requests above that number remain queued until \" +\n                                \"thread pool IO threads become available.\";\n          counter6.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          // Add custom counter objects to CounterCreationDataCollection.\n          col.Add(counter1);\n          col.Add(counter2);\n          col.Add(counter3);\n          col.Add(counter4);\n          col.Add(counter5);\n          col.Add(counter6);\n\n          // delete the category if it already exists\n          if (PerformanceCounterCategory.Exists(\"MyAspNetThreadCounters\"))\n          {\n              PerformanceCounterCategory.Delete(\"MyAspNetThreadCounters\");\n          }\n          // bind the counters to the PerformanceCounterCategory\n          PerformanceCounterCategory category =\n                  PerformanceCounterCategory.Create(\"MyAspNetThreadCounters\",\"\", col);\n      }\n  }\n```\n\n### <span id=\"global\">Global.asax</span>\n```csharp\n  public class Global : System.Web\n  {\n      //BusyThreads =  TP.GetMaxThreads() –TP.GetAVailable();\n      //If BusyThreads >= TP.GetMinThreads(), then threadpool growth throttling is possible.\n\n      int maxIoThreads, maxWorkerThreads;\n      ThreadPool.GetMaxThreads(out maxWorkerThreads, out maxIoThreads);\n\n      int freeIoThreads, freeWorkerThreads;\n      ThreadPool.GetAvailableThreads(out freeWorkerThreads, out freeIoThreads);\n\n      int minIoThreads, minWorkerThreads;\n      ThreadPool.GetMinThreads(out minWorkerThreads, out minIoThreads);\n\n      int busyIoThreads = maxIoThreads - freeIoThreads;\n      int busyWorkerThreads = maxWorkerThreads - freeWorkerThreads;\n\n      iocp = $\"(Busy={busyIoThreads},Free={freeIoThreads},Min={minIoThreads},Max={maxIoThreads})\";\n      worker = $\"(Busy={busyWorkerThreads},Free={freeWorkerThreads},Min={minWorkerThreads},Max={maxWorkerThreads})\";\n      return busyWorkerThreads;\n  }\n```\n```csharp\n  using System;\n\n  public class Global : System.Web.HttpApplication\n  {\n      public bool MonitorThreadPoolEnabled = true;\n      protected void Application_Start(object sender, EventArgs e)\n      {\n          Thread t = new Thread(new ThreadStart(RefreshCounters));\n          t.Start();\n      }\n  \n      protected void Session_Start(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Application_BeginRequest(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Application_AuthenticateRequest(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Application_Error(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Session_End(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Application_End(object sender, EventArgs e)\n      {\n          MonitorThreadPoolEnabled = false;\n      }\n  \n      public void RefreshCounters()\n      {\n          while (MonitorThreadPoolEnabled)\n          {\n              ASPNETThreadInfo t = GetThreadInfo();\n              ShowPerfCounters(t);\n              System.Threading.Thread.Sleep(500);\n          }\n      }\n  \n      public struct ASPNETThreadInfo\n      {\n          public int MaxWorkerThreads;\n          public int MaxIOThreads;\n          public int MinFreeThreads;\n          public int MinLocalRequestFreeThreads;\n          public int AvailableWorkerThreads;\n          public int AvailableIOThreads;\n  \n          public bool Equals(ASPNETThreadInfo other)\n          {\n              return (\n              MaxWorkerThreads == other.MaxWorkerThreads &&\n              MaxIOThreads == other.MaxIOThreads &&\n              MinFreeThreads == other.MinFreeThreads &&\n              MinLocalRequestFreeThreads == other.MinLocalRequestFreeThreads &&\n              AvailableWorkerThreads == other.AvailableWorkerThreads &&\n              AvailableIOThreads == other.AvailableIOThreads\n              );\n          }\n      }\n  \n      public ASPNETThreadInfo GetThreadInfo()\n      {\n          // use ThreadPool to get the current status\n          int availableWorker, availableIO;\n          int maxWorker, maxIO;\n                      \n          ThreadPool.GetAvailableThreads(out availableWorker, out availableIO);\n          ThreadPool.GetMaxThreads(out maxWorker, out maxIO);            \n          ASPNETThreadInfo threadInfo;\n          threadInfo.AvailableWorkerThreads = (Int16)availableWorker;\n          threadInfo.AvailableIOThreads = (Int16)availableIO;\n          threadInfo.MaxWorkerThreads = (Int16)maxWorker;\n          threadInfo.MaxIOThreads = (Int16)maxIO;            \n          // hard code for now; could get this from  machine.config\n          threadInfo.MinFreeThreads = 8;\n          threadInfo.MinLocalRequestFreeThreads = 4;\n          return threadInfo;\n      }\n  \n      public void ShowPerfCounters(ASPNETThreadInfo t)\n      {\n  \n          // get an instance of our Available Worker Threads counter\n          PerformanceCounter counter1 = new PerformanceCounter();\n          counter1.CategoryName = \"MyAspNetThreadCounters\";\n          counter1.CounterName = \"Available Worker Threads\";\n          counter1.ReadOnly = false;\n  \n          // set the value of the counter\n          counter1.RawValue = t.AvailableWorkerThreads;\n          counter1.Close();\n  \n          // repeat for other counters\n  \n          PerformanceCounter counter2 = new PerformanceCounter();\n          counter2.CategoryName = \"MyAspNetThreadCounters\";\n          counter2.CounterName = \"Available IO Threads\";\n          counter2.ReadOnly = false;\n          counter2.RawValue = t.AvailableIOThreads;\n          counter2.Close();\n  \n          PerformanceCounter counter3 = new PerformanceCounter();\n          counter3.CategoryName = \"MyAspNetThreadCounters\";\n          counter3.CounterName = \"Max Worker Threads\";\n          counter3.ReadOnly = false;\n          counter3.RawValue = t.MaxWorkerThreads;\n          counter3.Close();\n  \n          PerformanceCounter counter4 = new PerformanceCounter();\n          counter4.CategoryName = \"MyAspNetThreadCounters\";\n          counter4.CounterName = \"Max IO Threads\";\n          counter4.ReadOnly = false;\n          counter4.RawValue = t.MaxIOThreads;\n          counter4.Close();\n  \n          int minWorker, minIO;\n          ThreadPool.GetMinThreads(out minWorker, out minIO);\n  \n          PerformanceCounter counter5 = new PerformanceCounter();\n          counter5.CategoryName = \"MyAspNetThreadCounters\";\n          counter5.CounterName = \"Min Worker Threads\";\n          counter5.ReadOnly = false;\n          counter5.RawValue = minWorker;\n          counter5.Close();\n  \n          PerformanceCounter counter6 = new PerformanceCounter();\n          counter6.CategoryName = \"MyAspNetThreadCounters\";\n          counter6.CounterName = \"Min IO Threads\";\n          counter6.ReadOnly = false;\n          counter6.RawValue = minIO;\n          counter6.Close();\n      }\n  }\n```\n\n### <span id=\"startWebApp\">StartWebApp.aspx</span>\n```csharp\n  protected void Page_Load(object sender, EventArgs e)\n  {\n      int availableWorker, availableIO;\n      int maxWorker, maxIO;\n      int minWorker, minIO;\n    \n      ThreadPool.GetAvailableThreads(out availableWorker, out availableIO);\n      ThreadPool.GetMaxThreads(out maxWorker, out maxIO);\n      ThreadPool.GetMinThreads(out minWorker, out minIO);\n\n      Response.Write(\"This ASP.NET application has started.<br>\");\n      Response.Write(string.Format(\"MaxWorkerThreads:{0}.<br>\", maxWorker));\n      Response.Write(string.Format(\"MaxIOThreads:{0}.<br>\", maxIO));\n      Response.Write(string.Format(\"MinWorkerThreads:{0}.<br>\", minWorker));\n      Response.Write(string.Format(\"MinIOThreads:{0}.<br>\", minIO));\n      Response.Write(string.Format(\"AvailableWorker:{0}.<br>\", availableWorker));\n      Response.Write(string.Format(\"AvailableIO:{0}.<br>\", availableIO));\n      Response.Write(\"You can now close this page.\");\n  }\n```\n\n###  <span id=\"sleep\">Sleep.aspx</span>\n```csharp\n  void Page_Load(Object sender, EventArgs e)\n  {\n        int times = 0 ;\n        var max = int.Parse(Request.QueryString.Get(\"max\"));\n        var server = ConnectionMultiplexer.Connect(\"redisserver:6379,ssl=false,password=,allowAdmin=false,connectTimeout=200\");\n        var list = Enumerable.Range(1, max).ToList();\n        Parallel.ForEach(list, (i) =>\n        {\n\n            var database = server.GetDatabase();\n            database.StringGet(\"Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8\");\n            times++;\n        });\n\n        int availableWorker, availableIO;\n        int maxWorker, maxIO;\n        ThreadPool.SetMaxThreads(1, 1);\n        ThreadPool.GetAvailableThreads(out availableWorker, out availableIO);\n        ThreadPool.GetMaxThreads(out maxWorker, out maxIO);\n        Response.Write(String.Format(\"Connect Redis Busy:{0}<br /> {1}\",maxWorker - availableWorker, times));\n  }\n```\n\n### StackExchange.Redis 源碼\n```csharp\n  private static int GetThreadPoolStats(out string iocp, out string worker)\n  {\n      //BusyThreads =  TP.GetMaxThreads() –TP.GetAVailable();\n      //If BusyThreads >= TP.GetMinThreads(), then threadpool growth throttling is possible.\n\n      int maxIoThreads, maxWorkerThreads;\n      ThreadPool.GetMaxThreads(out maxWorkerThreads, out maxIoThreads);\n\n      int freeIoThreads, freeWorkerThreads;\n      ThreadPool.GetAvailableThreads(out freeWorkerThreads, out freeIoThreads);\n\n      int minIoThreads, minWorkerThreads;\n      ThreadPool.GetMinThreads(out minWorkerThreads, out minIoThreads);\n\n      int busyIoThreads = maxIoThreads - freeIoThreads;\n      int busyWorkerThreads = maxWorkerThreads - freeWorkerThreads;\n\n      iocp = $\"(Busy={busyIoThreads},Free={freeIoThreads},Min={minIoThreads},Max={maxIoThreads})\";\n      worker = $\"(Busy={busyWorkerThreads},Free={freeWorkerThreads},Min={minWorkerThreads},Max={maxWorkerThreads})\";\n      return busyWorkerThreads;\n  }\n```\n\n\n## <span id=\"testEnvironment\">環境與工具</span> \n- Visual Studio 2015 Professional UPDATE 3\n- Windows 10 \n- .NET Framework 4.5\n- StackExchange.Redis 1.0.481\n- CPU `Intel® Core™ i7-5500U` 四核心\n\n## 官方說明\n- [爭用、 效能不佳、 和死結 （deadlock） 當您從 ASP.NET 應用程式呼叫 Web 服務](https://support.microsoft.com/zh-tw/kb/821268)\n- machine.config\n\n```xml\n<system.web>\n    <processModel autoConfig=\"false\" maxWorkerThreads=\"xxx\" maxIoThreads=\"xxx\" minWorkerThreads=\"xxx\" minIoThreads=\"xxx\" requestQueueLimit=\"5000\" responseDeadlockInterval=\"00:03:00\"/>\n    <httpRuntime minFreeThreads=\"xxx\" minLocalRequestFreeThreads=\"xxx\"/>\n</system.web>\n```\n\n### 建議的設定值 \n```xml\n<system.web>\n    <processModel autoConfig=\"false\" minWorkerThreads=\"1\" />\n</system.web>    \n```\n\n.NET 官方文件的預設值與建議值\n\n|名稱|預設值|建議配置|\n|---|---|---|\n|maxWorkerThreads|20|32767 / #Cores |\n|maxIoThreads|20|32767 / #Cores|\n|minWorkerThreads|1|maxWorkerThreads/2|\n|minIoThreads|1|maxIoThreads / 2|\n|minFreeThreads| 8  |  88*#CPUs  |\n|minLocalRequestFreeThreads| 4 | 76*#CPUs  |\n|maxconnection| 2 | 12*CPUs |\n|executionTimeout| 90s  | 未建議 |\n\n* maxWorkerThreads,minWorkerThreads,maxIoThreads,minIoThreads 設定的數值需要乘上CPU的數量,  \n例: 4 核心設定 minWorkerThreads 值 20 ,實際上的值為 80   \n\n## <span id=\"comment1\">註釋<span>\n1. ThreadPool 中會有一個 queue , 其中隱含一個半秒機制 , 當 queue 靜止超過半秒 , 就會在 ThreadPool 建立一個新的 Thread  \n\n## 記錄\n- ADO.NET 需要使用 Worker Thread\n- Redis 需要使用 Worker Thread\n- \n\n\n## 參考\n- [Threading](https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx)\n- [Improving ASP.NET Performance](https://msdn.microsoft.com/en-us/library/ms998549.aspx)\n- [Programming the Thread Pool in the .NET Framework](https://msdn.microsoft.com/en-us/library/ms973903.aspx)\n- [StackExchange.Redis 源碼](https://github.com/StackExchange/StackExchange.Redis)\n- [雲計算之路-阿里雲上：從ASP.NET線程角度對「黑色30秒」問題的全新分析](https://read01.com/MenEP.html)\n- [How To: Monitor the ASP.NET Thread Pool Using Custom Counters](https://msdn.microsoft.com/zh-tw/library/ff650682.aspx)\n- http://www.thejoyofcode.com/tuning_the_threadpool.aspx\n- https://gist.github.com/JonCole/e65411214030f0d823cb\n- https://blogs.msdn.microsoft.com/carloc/2009/02/19/minworkerthreads-and-autoconfig/\n","source":"_drafts/workerthread_and_iothread_1.md","raw":"---\ntitle: 實戰 .Net 大量請求與多執行緒(一) 錯誤與原因\ndate: 2016/11/04 11:49:17\ntag:\n  - .Net Framework\n  - IO\n  - Thread\n  - ASP.Net\n---\n## 前情提要\n1. 實務上的專案遭受 DDos 攻擊  \n2. DB TimeOut  \n3. Redis TimeOut  \n4. 主程式沒有死,但是Elmah出現大量Exception  \n\n## 錯誤資訊\n![瞬發的流量](/images/workerthread_and_iothread/110416_102437_AM.jpg)\n\n### Redis的錯誤記錄\n錯誤1.\n```\n    Timeout performing SETEX Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8, \n    inst: 1, mgr: ExecuteSelect, err: never, queue: 2, qu: 2, qs: 0, qc: 0, wr: 0, wq: 0, in: 0, ar: 0, \n    IOCP: (Busy=0,Free=1000,Min=4,Max=1000), WORKER: (Busy=165,Free=32602,Min=4,Max=32767), \n    clientName: TYO-HOST\n```\n錯誤2.\n```\n    StackExchange.Redis.RedisConnectionException\n    SocketFailure on GET\n```\n錯誤3.\n```\n    No connection is available to service this operation: \n    GET Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8\n```\n錯誤4.\n```\n    UnableToResolvePhysicalConnection on GET\n```\n\n### SQL Server 錯誤記錄\n\n```\n    A transport-level error has occurred when receiving results from the server. \n    (provider: Session Provider, error: 19 - Physical connection is not usable)\n```\n\n\n\n## 錯誤原因\n1. CLR 建立執行緒需要時間 , 一秒鐘最多只能建立兩條 Thread [註一](#comment1)\n2. 瞬間的 Request 量超過 ThreadPool 中的 Thread 數量 \n3. ThreadPool 建立 Thread 中 , 仍持續有 Request 進來引發錯誤 \n4. 因為我的[測試環境](#testEnvironment)有四核心,依文件所說\n\n## 實驗流程\n1. 建立監視器\n    參考 [How To: Monitor the ASP.NET Thread Pool Using Custom Counters](https://msdn.microsoft.com/zh-tw/library/ff650682.aspx)\n\n    1. 建立一個 console 專案, [MyAspNetThreadCounters](#MyAspNetThreadCounters)\n    2. 編譯並執行 console 專案\n    3. 開啟`Regedit.exe` 檢查 `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services` 應包含以下值\n\n        ```\n            Available Worker Threads\n            Available IO Threads\n            Max Worker Threads\n            Max IO Threads\n            Min Worker Threads\n            Min IO Threads\n        ```\n\n2. 建立ASP.NET專案\n    1. 建立[Global.asax](#global)\n    2. 建立[StartWebApp.aspx](#startWebApp)\n    3. 建立[Sleep.aspx](#sleep)\n3. 開啟 `perfmon.exe` 新增計數器 , 選取我們自定義的 `MyAspNetThreadCounters`\n4. 連結網頁 `localhost\\StartWebApp.aspx` 以啟動網站,可以得到以下數據\n    ```\n    MaxWorkerThreads:32767.\n    MaxIOThreads:1000.\n    MinWorkerThreads:4.\n    MinIOThreads:4.\n    AvailableWorker:32766.\n    AvailableIO:1000.\n    ```\n5. 執行大量 redis 連線,觀察結果 AvailableWorker Threads 會往下掉,  \n故推斷 redis connection 是透過 Worker Threads 建立.\n\n6. 重現錯誤, 執行大量的 sleep 頁面,透過這種方式搶佔IIS的執行緒.\n![](/images/workerthread_and_iothread/110416_170101_PM.jpg)\n\n7. 再執行大量 redis 連線, 用以重現錯誤\n![](/images/workerthread_and_iothread/110416_170001_PM.jpg)\n\n## 程式碼 \n\n### <span id=\"MyAspNetThreadCounters\">MyAspNetThreadCounters</span>\n```csharp\n  using System;\n  using System.Diagnostics;\n\n  class MyAspNetThreadCounters\n  {\n      [STAThread]\n      static void Main(string[] args)\n      {\n          CreateCounters();\n          Console.WriteLine(\"MyAspNetThreadCounters performance counter category \" +\n                            \"is created. [Press Enter]\");\n          Console.ReadLine();\n      }\n\n      public static void CreateCounters()\n      {\n          CounterCreationDataCollection col =\n            new CounterCreationDataCollection();\n\n          // Create custom counter objects\n          CounterCreationData counter1 = new CounterCreationData();\n          counter1.CounterName = \"Available Worker Threads\";\n          counter1.CounterHelp = \"The difference between the maximum number \" +\n                                \"of thread pool worker threads and the \" +\n                                \"number currently active.\";\n          counter1.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter2 = new CounterCreationData();\n          counter2.CounterName = \"Available IO Threads\";\n          counter2.CounterHelp = \"The difference between the maximum number of \" +\n                                \"thread pool IO threads and the number \" +\n                                \"currently active.\";\n          counter2.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter3 = new CounterCreationData();\n          counter3.CounterName = \"Max Worker Threads\";\n          counter3.CounterHelp = \"The number of requests to the thread pool \" +\n                                \"that can be active concurrently. All \" +\n                                \"requests above that number remain queued until \" +\n                                \"thread pool worker threads become available.\";\n          counter3.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter4 = new CounterCreationData();\n          counter4.CounterName = \"Max IO Threads\";\n          counter4.CounterHelp = \"The number of requests to the thread pool \" +\n                                \"that can be active concurrently. All \" +\n                                \"requests above that number remain queued until \" +\n                                \"thread pool IO threads become available.\";\n          counter4.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter5 = new CounterCreationData();\n          counter5.CounterName = \"Min Worker Threads\";\n          counter5.CounterHelp = \"The number of requests to the thread pool \" +\n                                \"that can be active concurrently. All \" +\n                                \"requests above that number remain queued until \" +\n                                \"thread pool worker threads become available.\";\n          counter5.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          CounterCreationData counter6 = new CounterCreationData();\n          counter6.CounterName = \"Min IO Threads\";\n          counter6.CounterHelp = \"The number of requests to the thread pool \" +\n                                \"that can be active concurrently. All \" +\n                                \"requests above that number remain queued until \" +\n                                \"thread pool IO threads become available.\";\n          counter6.CounterType = PerformanceCounterType.NumberOfItems32;\n\n          // Add custom counter objects to CounterCreationDataCollection.\n          col.Add(counter1);\n          col.Add(counter2);\n          col.Add(counter3);\n          col.Add(counter4);\n          col.Add(counter5);\n          col.Add(counter6);\n\n          // delete the category if it already exists\n          if (PerformanceCounterCategory.Exists(\"MyAspNetThreadCounters\"))\n          {\n              PerformanceCounterCategory.Delete(\"MyAspNetThreadCounters\");\n          }\n          // bind the counters to the PerformanceCounterCategory\n          PerformanceCounterCategory category =\n                  PerformanceCounterCategory.Create(\"MyAspNetThreadCounters\",\"\", col);\n      }\n  }\n```\n\n### <span id=\"global\">Global.asax</span>\n```csharp\n  public class Global : System.Web\n  {\n      //BusyThreads =  TP.GetMaxThreads() –TP.GetAVailable();\n      //If BusyThreads >= TP.GetMinThreads(), then threadpool growth throttling is possible.\n\n      int maxIoThreads, maxWorkerThreads;\n      ThreadPool.GetMaxThreads(out maxWorkerThreads, out maxIoThreads);\n\n      int freeIoThreads, freeWorkerThreads;\n      ThreadPool.GetAvailableThreads(out freeWorkerThreads, out freeIoThreads);\n\n      int minIoThreads, minWorkerThreads;\n      ThreadPool.GetMinThreads(out minWorkerThreads, out minIoThreads);\n\n      int busyIoThreads = maxIoThreads - freeIoThreads;\n      int busyWorkerThreads = maxWorkerThreads - freeWorkerThreads;\n\n      iocp = $\"(Busy={busyIoThreads},Free={freeIoThreads},Min={minIoThreads},Max={maxIoThreads})\";\n      worker = $\"(Busy={busyWorkerThreads},Free={freeWorkerThreads},Min={minWorkerThreads},Max={maxWorkerThreads})\";\n      return busyWorkerThreads;\n  }\n```\n```csharp\n  using System;\n\n  public class Global : System.Web.HttpApplication\n  {\n      public bool MonitorThreadPoolEnabled = true;\n      protected void Application_Start(object sender, EventArgs e)\n      {\n          Thread t = new Thread(new ThreadStart(RefreshCounters));\n          t.Start();\n      }\n  \n      protected void Session_Start(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Application_BeginRequest(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Application_AuthenticateRequest(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Application_Error(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Session_End(object sender, EventArgs e)\n      {\n  \n      }\n  \n      protected void Application_End(object sender, EventArgs e)\n      {\n          MonitorThreadPoolEnabled = false;\n      }\n  \n      public void RefreshCounters()\n      {\n          while (MonitorThreadPoolEnabled)\n          {\n              ASPNETThreadInfo t = GetThreadInfo();\n              ShowPerfCounters(t);\n              System.Threading.Thread.Sleep(500);\n          }\n      }\n  \n      public struct ASPNETThreadInfo\n      {\n          public int MaxWorkerThreads;\n          public int MaxIOThreads;\n          public int MinFreeThreads;\n          public int MinLocalRequestFreeThreads;\n          public int AvailableWorkerThreads;\n          public int AvailableIOThreads;\n  \n          public bool Equals(ASPNETThreadInfo other)\n          {\n              return (\n              MaxWorkerThreads == other.MaxWorkerThreads &&\n              MaxIOThreads == other.MaxIOThreads &&\n              MinFreeThreads == other.MinFreeThreads &&\n              MinLocalRequestFreeThreads == other.MinLocalRequestFreeThreads &&\n              AvailableWorkerThreads == other.AvailableWorkerThreads &&\n              AvailableIOThreads == other.AvailableIOThreads\n              );\n          }\n      }\n  \n      public ASPNETThreadInfo GetThreadInfo()\n      {\n          // use ThreadPool to get the current status\n          int availableWorker, availableIO;\n          int maxWorker, maxIO;\n                      \n          ThreadPool.GetAvailableThreads(out availableWorker, out availableIO);\n          ThreadPool.GetMaxThreads(out maxWorker, out maxIO);            \n          ASPNETThreadInfo threadInfo;\n          threadInfo.AvailableWorkerThreads = (Int16)availableWorker;\n          threadInfo.AvailableIOThreads = (Int16)availableIO;\n          threadInfo.MaxWorkerThreads = (Int16)maxWorker;\n          threadInfo.MaxIOThreads = (Int16)maxIO;            \n          // hard code for now; could get this from  machine.config\n          threadInfo.MinFreeThreads = 8;\n          threadInfo.MinLocalRequestFreeThreads = 4;\n          return threadInfo;\n      }\n  \n      public void ShowPerfCounters(ASPNETThreadInfo t)\n      {\n  \n          // get an instance of our Available Worker Threads counter\n          PerformanceCounter counter1 = new PerformanceCounter();\n          counter1.CategoryName = \"MyAspNetThreadCounters\";\n          counter1.CounterName = \"Available Worker Threads\";\n          counter1.ReadOnly = false;\n  \n          // set the value of the counter\n          counter1.RawValue = t.AvailableWorkerThreads;\n          counter1.Close();\n  \n          // repeat for other counters\n  \n          PerformanceCounter counter2 = new PerformanceCounter();\n          counter2.CategoryName = \"MyAspNetThreadCounters\";\n          counter2.CounterName = \"Available IO Threads\";\n          counter2.ReadOnly = false;\n          counter2.RawValue = t.AvailableIOThreads;\n          counter2.Close();\n  \n          PerformanceCounter counter3 = new PerformanceCounter();\n          counter3.CategoryName = \"MyAspNetThreadCounters\";\n          counter3.CounterName = \"Max Worker Threads\";\n          counter3.ReadOnly = false;\n          counter3.RawValue = t.MaxWorkerThreads;\n          counter3.Close();\n  \n          PerformanceCounter counter4 = new PerformanceCounter();\n          counter4.CategoryName = \"MyAspNetThreadCounters\";\n          counter4.CounterName = \"Max IO Threads\";\n          counter4.ReadOnly = false;\n          counter4.RawValue = t.MaxIOThreads;\n          counter4.Close();\n  \n          int minWorker, minIO;\n          ThreadPool.GetMinThreads(out minWorker, out minIO);\n  \n          PerformanceCounter counter5 = new PerformanceCounter();\n          counter5.CategoryName = \"MyAspNetThreadCounters\";\n          counter5.CounterName = \"Min Worker Threads\";\n          counter5.ReadOnly = false;\n          counter5.RawValue = minWorker;\n          counter5.Close();\n  \n          PerformanceCounter counter6 = new PerformanceCounter();\n          counter6.CategoryName = \"MyAspNetThreadCounters\";\n          counter6.CounterName = \"Min IO Threads\";\n          counter6.ReadOnly = false;\n          counter6.RawValue = minIO;\n          counter6.Close();\n      }\n  }\n```\n\n### <span id=\"startWebApp\">StartWebApp.aspx</span>\n```csharp\n  protected void Page_Load(object sender, EventArgs e)\n  {\n      int availableWorker, availableIO;\n      int maxWorker, maxIO;\n      int minWorker, minIO;\n    \n      ThreadPool.GetAvailableThreads(out availableWorker, out availableIO);\n      ThreadPool.GetMaxThreads(out maxWorker, out maxIO);\n      ThreadPool.GetMinThreads(out minWorker, out minIO);\n\n      Response.Write(\"This ASP.NET application has started.<br>\");\n      Response.Write(string.Format(\"MaxWorkerThreads:{0}.<br>\", maxWorker));\n      Response.Write(string.Format(\"MaxIOThreads:{0}.<br>\", maxIO));\n      Response.Write(string.Format(\"MinWorkerThreads:{0}.<br>\", minWorker));\n      Response.Write(string.Format(\"MinIOThreads:{0}.<br>\", minIO));\n      Response.Write(string.Format(\"AvailableWorker:{0}.<br>\", availableWorker));\n      Response.Write(string.Format(\"AvailableIO:{0}.<br>\", availableIO));\n      Response.Write(\"You can now close this page.\");\n  }\n```\n\n###  <span id=\"sleep\">Sleep.aspx</span>\n```csharp\n  void Page_Load(Object sender, EventArgs e)\n  {\n        int times = 0 ;\n        var max = int.Parse(Request.QueryString.Get(\"max\"));\n        var server = ConnectionMultiplexer.Connect(\"redisserver:6379,ssl=false,password=,allowAdmin=false,connectTimeout=200\");\n        var list = Enumerable.Range(1, max).ToList();\n        Parallel.ForEach(list, (i) =>\n        {\n\n            var database = server.GetDatabase();\n            database.StringGet(\"Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8\");\n            times++;\n        });\n\n        int availableWorker, availableIO;\n        int maxWorker, maxIO;\n        ThreadPool.SetMaxThreads(1, 1);\n        ThreadPool.GetAvailableThreads(out availableWorker, out availableIO);\n        ThreadPool.GetMaxThreads(out maxWorker, out maxIO);\n        Response.Write(String.Format(\"Connect Redis Busy:{0}<br /> {1}\",maxWorker - availableWorker, times));\n  }\n```\n\n### StackExchange.Redis 源碼\n```csharp\n  private static int GetThreadPoolStats(out string iocp, out string worker)\n  {\n      //BusyThreads =  TP.GetMaxThreads() –TP.GetAVailable();\n      //If BusyThreads >= TP.GetMinThreads(), then threadpool growth throttling is possible.\n\n      int maxIoThreads, maxWorkerThreads;\n      ThreadPool.GetMaxThreads(out maxWorkerThreads, out maxIoThreads);\n\n      int freeIoThreads, freeWorkerThreads;\n      ThreadPool.GetAvailableThreads(out freeWorkerThreads, out freeIoThreads);\n\n      int minIoThreads, minWorkerThreads;\n      ThreadPool.GetMinThreads(out minWorkerThreads, out minIoThreads);\n\n      int busyIoThreads = maxIoThreads - freeIoThreads;\n      int busyWorkerThreads = maxWorkerThreads - freeWorkerThreads;\n\n      iocp = $\"(Busy={busyIoThreads},Free={freeIoThreads},Min={minIoThreads},Max={maxIoThreads})\";\n      worker = $\"(Busy={busyWorkerThreads},Free={freeWorkerThreads},Min={minWorkerThreads},Max={maxWorkerThreads})\";\n      return busyWorkerThreads;\n  }\n```\n\n\n## <span id=\"testEnvironment\">環境與工具</span> \n- Visual Studio 2015 Professional UPDATE 3\n- Windows 10 \n- .NET Framework 4.5\n- StackExchange.Redis 1.0.481\n- CPU `Intel® Core™ i7-5500U` 四核心\n\n## 官方說明\n- [爭用、 效能不佳、 和死結 （deadlock） 當您從 ASP.NET 應用程式呼叫 Web 服務](https://support.microsoft.com/zh-tw/kb/821268)\n- machine.config\n\n```xml\n<system.web>\n    <processModel autoConfig=\"false\" maxWorkerThreads=\"xxx\" maxIoThreads=\"xxx\" minWorkerThreads=\"xxx\" minIoThreads=\"xxx\" requestQueueLimit=\"5000\" responseDeadlockInterval=\"00:03:00\"/>\n    <httpRuntime minFreeThreads=\"xxx\" minLocalRequestFreeThreads=\"xxx\"/>\n</system.web>\n```\n\n### 建議的設定值 \n```xml\n<system.web>\n    <processModel autoConfig=\"false\" minWorkerThreads=\"1\" />\n</system.web>    \n```\n\n.NET 官方文件的預設值與建議值\n\n|名稱|預設值|建議配置|\n|---|---|---|\n|maxWorkerThreads|20|32767 / #Cores |\n|maxIoThreads|20|32767 / #Cores|\n|minWorkerThreads|1|maxWorkerThreads/2|\n|minIoThreads|1|maxIoThreads / 2|\n|minFreeThreads| 8  |  88*#CPUs  |\n|minLocalRequestFreeThreads| 4 | 76*#CPUs  |\n|maxconnection| 2 | 12*CPUs |\n|executionTimeout| 90s  | 未建議 |\n\n* maxWorkerThreads,minWorkerThreads,maxIoThreads,minIoThreads 設定的數值需要乘上CPU的數量,  \n例: 4 核心設定 minWorkerThreads 值 20 ,實際上的值為 80   \n\n## <span id=\"comment1\">註釋<span>\n1. ThreadPool 中會有一個 queue , 其中隱含一個半秒機制 , 當 queue 靜止超過半秒 , 就會在 ThreadPool 建立一個新的 Thread  \n\n## 記錄\n- ADO.NET 需要使用 Worker Thread\n- Redis 需要使用 Worker Thread\n- \n\n\n## 參考\n- [Threading](https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx)\n- [Improving ASP.NET Performance](https://msdn.microsoft.com/en-us/library/ms998549.aspx)\n- [Programming the Thread Pool in the .NET Framework](https://msdn.microsoft.com/en-us/library/ms973903.aspx)\n- [StackExchange.Redis 源碼](https://github.com/StackExchange/StackExchange.Redis)\n- [雲計算之路-阿里雲上：從ASP.NET線程角度對「黑色30秒」問題的全新分析](https://read01.com/MenEP.html)\n- [How To: Monitor the ASP.NET Thread Pool Using Custom Counters](https://msdn.microsoft.com/zh-tw/library/ff650682.aspx)\n- http://www.thejoyofcode.com/tuning_the_threadpool.aspx\n- https://gist.github.com/JonCole/e65411214030f0d823cb\n- https://blogs.msdn.microsoft.com/carloc/2009/02/19/minworkerthreads-and-autoconfig/\n","slug":"workerthread_and_iothread_1","published":0,"updated":"2016-11-16T04:14:28.960Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3o4m0001lgopdpm4h7s0","content":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><ol>\n<li>實務上的專案遭受 DDos 攻擊  </li>\n<li>DB TimeOut  </li>\n<li>Redis TimeOut  </li>\n<li>主程式沒有死,但是Elmah出現大量Exception  </li>\n</ol>\n<h2 id=\"錯誤資訊\"><a href=\"#錯誤資訊\" class=\"headerlink\" title=\"錯誤資訊\"></a>錯誤資訊</h2><p><img src=\"/images/workerthread_and_iothread/110416_102437_AM.jpg\" alt=\"瞬發的流量\"></p>\n<h3 id=\"Redis的錯誤記錄\"><a href=\"#Redis的錯誤記錄\" class=\"headerlink\" title=\"Redis的錯誤記錄\"></a>Redis的錯誤記錄</h3><p>錯誤1.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Timeout performing SETEX Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8, </div><div class=\"line\">inst: 1, mgr: ExecuteSelect, err: never, queue: 2, qu: 2, qs: 0, qc: 0, wr: 0, wq: 0, in: 0, ar: 0, </div><div class=\"line\">IOCP: (Busy=0,Free=1000,Min=4,Max=1000), WORKER: (Busy=165,Free=32602,Min=4,Max=32767), </div><div class=\"line\">clientName: TYO-HOST</div></pre></td></tr></table></figure></p>\n<p>錯誤2.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">StackExchange.Redis.RedisConnectionException</div><div class=\"line\">SocketFailure on GET</div></pre></td></tr></table></figure></p>\n<p>錯誤3.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">No connection is available to service this operation: </div><div class=\"line\">GET Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8</div></pre></td></tr></table></figure></p>\n<p>錯誤4.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">UnableToResolvePhysicalConnection on GET</div></pre></td></tr></table></figure></p>\n<h3 id=\"SQL-Server-錯誤記錄\"><a href=\"#SQL-Server-錯誤記錄\" class=\"headerlink\" title=\"SQL Server 錯誤記錄\"></a>SQL Server 錯誤記錄</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">A transport-level error has occurred when receiving results from the server. </div><div class=\"line\">(provider: Session Provider, error: 19 - Physical connection is not usable)</div></pre></td></tr></table></figure>\n<h2 id=\"錯誤原因\"><a href=\"#錯誤原因\" class=\"headerlink\" title=\"錯誤原因\"></a>錯誤原因</h2><ol>\n<li>CLR 建立執行緒需要時間 , 一秒鐘最多只能建立兩條 Thread <a href=\"#comment1\">註一</a></li>\n<li>瞬間的 Request 量超過 ThreadPool 中的 Thread 數量 </li>\n<li>ThreadPool 建立 Thread 中 , 仍持續有 Request 進來引發錯誤 </li>\n<li>因為我的<a href=\"#testEnvironment\">測試環境</a>有四核心,依文件所說</li>\n</ol>\n<h2 id=\"實驗流程\"><a href=\"#實驗流程\" class=\"headerlink\" title=\"實驗流程\"></a>實驗流程</h2><ol>\n<li><p>建立監視器<br> 參考 <a href=\"https://msdn.microsoft.com/zh-tw/library/ff650682.aspx\" target=\"_blank\" rel=\"external\">How To: Monitor the ASP.NET Thread Pool Using Custom Counters</a></p>\n<ol>\n<li>建立一個 console 專案, <a href=\"#MyAspNetThreadCounters\">MyAspNetThreadCounters</a></li>\n<li>編譯並執行 console 專案</li>\n<li><p>開啟<code>Regedit.exe</code> 檢查 <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services</code> 應包含以下值</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Available Worker Threads</div><div class=\"line\">Available IO Threads</div><div class=\"line\">Max Worker Threads</div><div class=\"line\">Max IO Threads</div><div class=\"line\">Min Worker Threads</div><div class=\"line\">Min IO Threads</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>建立ASP.NET專案</p>\n<ol>\n<li>建立<a href=\"#global\">Global.asax</a></li>\n<li>建立<a href=\"#startWebApp\">StartWebApp.aspx</a></li>\n<li>建立<a href=\"#sleep\">Sleep.aspx</a></li>\n</ol>\n</li>\n<li>開啟 <code>perfmon.exe</code> 新增計數器 , 選取我們自定義的 <code>MyAspNetThreadCounters</code></li>\n<li><p>連結網頁 <code>localhost\\StartWebApp.aspx</code> 以啟動網站,可以得到以下數據</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">MaxWorkerThreads:32767.</div><div class=\"line\">MaxIOThreads:1000.</div><div class=\"line\">MinWorkerThreads:4.</div><div class=\"line\">MinIOThreads:4.</div><div class=\"line\">AvailableWorker:32766.</div><div class=\"line\">AvailableIO:1000.</div></pre></td></tr></table></figure>\n</li>\n<li><p>執行大量 redis 連線,觀察結果 AvailableWorker Threads 會往下掉,<br>故推斷 redis connection 是透過 Worker Threads 建立.</p>\n</li>\n<li><p>重現錯誤, 執行大量的 sleep 頁面,透過這種方式搶佔IIS的執行緒.<br><img src=\"/images/workerthread_and_iothread/110416_170101_PM.jpg\" alt=\"\"></p>\n</li>\n<li><p>再執行大量 redis 連線, 用以重現錯誤<br><img src=\"/images/workerthread_and_iothread/110416_170001_PM.jpg\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h2><h3 id=\"MyAspNetThreadCounters\"><a href=\"#MyAspNetThreadCounters\" class=\"headerlink\" title=\"MyAspNetThreadCounters\"></a><span id=\"MyAspNetThreadCounters\">MyAspNetThreadCounters</span></h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> System;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Diagnostics;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">MyAspNetThreadCounters</span></div><div class=\"line\">&#123;</div><div class=\"line\">    [STAThread]</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        CreateCounters();</div><div class=\"line\">        Console.WriteLine(<span class=\"string\">\"MyAspNetThreadCounters performance counter category \"</span> +</div><div class=\"line\">                          <span class=\"string\">\"is created. [Press Enter]\"</span>);</div><div class=\"line\">        Console.ReadLine();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateCounters</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        CounterCreationDataCollection col =</div><div class=\"line\">          <span class=\"keyword\">new</span> CounterCreationDataCollection();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Create custom counter objects</span></div><div class=\"line\">        CounterCreationData counter1 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter1.CounterName = <span class=\"string\">\"Available Worker Threads\"</span>;</div><div class=\"line\">        counter1.CounterHelp = <span class=\"string\">\"The difference between the maximum number \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"of thread pool worker threads and the \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"number currently active.\"</span>;</div><div class=\"line\">        counter1.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter2 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter2.CounterName = <span class=\"string\">\"Available IO Threads\"</span>;</div><div class=\"line\">        counter2.CounterHelp = <span class=\"string\">\"The difference between the maximum number of \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool IO threads and the number \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"currently active.\"</span>;</div><div class=\"line\">        counter2.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter3 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter3.CounterName = <span class=\"string\">\"Max Worker Threads\"</span>;</div><div class=\"line\">        counter3.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"that can be active concurrently. All \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool worker threads become available.\"</span>;</div><div class=\"line\">        counter3.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter4 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter4.CounterName = <span class=\"string\">\"Max IO Threads\"</span>;</div><div class=\"line\">        counter4.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"that can be active concurrently. All \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool IO threads become available.\"</span>;</div><div class=\"line\">        counter4.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter5 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter5.CounterName = <span class=\"string\">\"Min Worker Threads\"</span>;</div><div class=\"line\">        counter5.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"that can be active concurrently. All \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool worker threads become available.\"</span>;</div><div class=\"line\">        counter5.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter6 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter6.CounterName = <span class=\"string\">\"Min IO Threads\"</span>;</div><div class=\"line\">        counter6.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"that can be active concurrently. All \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool IO threads become available.\"</span>;</div><div class=\"line\">        counter6.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Add custom counter objects to CounterCreationDataCollection.</span></div><div class=\"line\">        col.Add(counter1);</div><div class=\"line\">        col.Add(counter2);</div><div class=\"line\">        col.Add(counter3);</div><div class=\"line\">        col.Add(counter4);</div><div class=\"line\">        col.Add(counter5);</div><div class=\"line\">        col.Add(counter6);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// delete the category if it already exists</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (PerformanceCounterCategory.Exists(<span class=\"string\">\"MyAspNetThreadCounters\"</span>))</div><div class=\"line\">        &#123;</div><div class=\"line\">            PerformanceCounterCategory.Delete(<span class=\"string\">\"MyAspNetThreadCounters\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// bind the counters to the PerformanceCounterCategory</span></div><div class=\"line\">        PerformanceCounterCategory category =</div><div class=\"line\">                PerformanceCounterCategory.Create(<span class=\"string\">\"MyAspNetThreadCounters\"</span>,<span class=\"string\">\"\"</span>, col);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Global-asax\"><a href=\"#Global-asax\" class=\"headerlink\" title=\"Global.asax\"></a><span id=\"global\">Global.asax</span></h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Global : System.Web</div><div class=\"line\">&#123;</div><div class=\"line\">    //BusyThreads =  TP.GetMaxThreads() –TP.GetAVailable();</div><div class=\"line\">    //If BusyThreads &gt;= TP.GetMinThreads(), then threadpool growth throttling is possible.</div><div class=\"line\"></div><div class=\"line\">    int maxIoThreads, maxWorkerThreads;</div><div class=\"line\">    ThreadPool.GetMaxThreads(out maxWorkerThreads, out maxIoThreads);</div><div class=\"line\"></div><div class=\"line\">    int freeIoThreads, freeWorkerThreads;</div><div class=\"line\">    ThreadPool.GetAvailableThreads(out freeWorkerThreads, out freeIoThreads);</div><div class=\"line\"></div><div class=\"line\">    int minIoThreads, minWorkerThreads;</div><div class=\"line\">    ThreadPool.GetMinThreads(out minWorkerThreads, out minIoThreads);</div><div class=\"line\"></div><div class=\"line\">    int busyIoThreads = maxIoThreads - freeIoThreads;</div><div class=\"line\">    int busyWorkerThreads = maxWorkerThreads - freeWorkerThreads;</div><div class=\"line\"></div><div class=\"line\">    iocp = $\"(Busy=&#123;busyIoThreads&#125;,Free=&#123;freeIoThreads&#125;,Min=&#123;minIoThreads&#125;,Max=&#123;maxIoThreads&#125;)\";</div><div class=\"line\">    worker = $\"(Busy=&#123;busyWorkerThreads&#125;,Free=&#123;freeWorkerThreads&#125;,Min=&#123;minWorkerThreads&#125;,Max=&#123;maxWorkerThreads&#125;)\";</div><div class=\"line\">    return busyWorkerThreads;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System;</div><div class=\"line\"></div><div class=\"line\">public class Global : System.Web.HttpApplication</div><div class=\"line\">&#123;</div><div class=\"line\">    public bool MonitorThreadPoolEnabled = true;</div><div class=\"line\">    protected void Application_Start(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\">        Thread t = new Thread(new ThreadStart(RefreshCounters));</div><div class=\"line\">        t.Start();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Session_Start(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Application_BeginRequest(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Application_AuthenticateRequest(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Application_Error(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Session_End(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Application_End(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\">        MonitorThreadPoolEnabled = false;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void RefreshCounters()</div><div class=\"line\">    &#123;</div><div class=\"line\">        while (MonitorThreadPoolEnabled)</div><div class=\"line\">        &#123;</div><div class=\"line\">            ASPNETThreadInfo t = GetThreadInfo();</div><div class=\"line\">            ShowPerfCounters(t);</div><div class=\"line\">            System.Threading.Thread.Sleep(500);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public struct ASPNETThreadInfo</div><div class=\"line\">    &#123;</div><div class=\"line\">        public int MaxWorkerThreads;</div><div class=\"line\">        public int MaxIOThreads;</div><div class=\"line\">        public int MinFreeThreads;</div><div class=\"line\">        public int MinLocalRequestFreeThreads;</div><div class=\"line\">        public int AvailableWorkerThreads;</div><div class=\"line\">        public int AvailableIOThreads;</div><div class=\"line\"></div><div class=\"line\">        public bool Equals(ASPNETThreadInfo other)</div><div class=\"line\">        &#123;</div><div class=\"line\">            return (</div><div class=\"line\">            MaxWorkerThreads == other.MaxWorkerThreads &amp;&amp;</div><div class=\"line\">            MaxIOThreads == other.MaxIOThreads &amp;&amp;</div><div class=\"line\">            MinFreeThreads == other.MinFreeThreads &amp;&amp;</div><div class=\"line\">            MinLocalRequestFreeThreads == other.MinLocalRequestFreeThreads &amp;&amp;</div><div class=\"line\">            AvailableWorkerThreads == other.AvailableWorkerThreads &amp;&amp;</div><div class=\"line\">            AvailableIOThreads == other.AvailableIOThreads</div><div class=\"line\">            );</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public ASPNETThreadInfo GetThreadInfo()</div><div class=\"line\">    &#123;</div><div class=\"line\">        // use ThreadPool to get the current status</div><div class=\"line\">        int availableWorker, availableIO;</div><div class=\"line\">        int maxWorker, maxIO;</div><div class=\"line\">                    </div><div class=\"line\">        ThreadPool.GetAvailableThreads(out availableWorker, out availableIO);</div><div class=\"line\">        ThreadPool.GetMaxThreads(out maxWorker, out maxIO);            </div><div class=\"line\">        ASPNETThreadInfo threadInfo;</div><div class=\"line\">        threadInfo.AvailableWorkerThreads = (Int16)availableWorker;</div><div class=\"line\">        threadInfo.AvailableIOThreads = (Int16)availableIO;</div><div class=\"line\">        threadInfo.MaxWorkerThreads = (Int16)maxWorker;</div><div class=\"line\">        threadInfo.MaxIOThreads = (Int16)maxIO;            </div><div class=\"line\">        // hard code for now; could get this from  machine.config</div><div class=\"line\">        threadInfo.MinFreeThreads = 8;</div><div class=\"line\">        threadInfo.MinLocalRequestFreeThreads = 4;</div><div class=\"line\">        return threadInfo;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void ShowPerfCounters(ASPNETThreadInfo t)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        // get an instance of our Available Worker Threads counter</div><div class=\"line\">        PerformanceCounter counter1 = new PerformanceCounter();</div><div class=\"line\">        counter1.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter1.CounterName = \"Available Worker Threads\";</div><div class=\"line\">        counter1.ReadOnly = false;</div><div class=\"line\"></div><div class=\"line\">        // set the value of the counter</div><div class=\"line\">        counter1.RawValue = t.AvailableWorkerThreads;</div><div class=\"line\">        counter1.Close();</div><div class=\"line\"></div><div class=\"line\">        // repeat for other counters</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter2 = new PerformanceCounter();</div><div class=\"line\">        counter2.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter2.CounterName = \"Available IO Threads\";</div><div class=\"line\">        counter2.ReadOnly = false;</div><div class=\"line\">        counter2.RawValue = t.AvailableIOThreads;</div><div class=\"line\">        counter2.Close();</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter3 = new PerformanceCounter();</div><div class=\"line\">        counter3.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter3.CounterName = \"Max Worker Threads\";</div><div class=\"line\">        counter3.ReadOnly = false;</div><div class=\"line\">        counter3.RawValue = t.MaxWorkerThreads;</div><div class=\"line\">        counter3.Close();</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter4 = new PerformanceCounter();</div><div class=\"line\">        counter4.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter4.CounterName = \"Max IO Threads\";</div><div class=\"line\">        counter4.ReadOnly = false;</div><div class=\"line\">        counter4.RawValue = t.MaxIOThreads;</div><div class=\"line\">        counter4.Close();</div><div class=\"line\"></div><div class=\"line\">        int minWorker, minIO;</div><div class=\"line\">        ThreadPool.GetMinThreads(out minWorker, out minIO);</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter5 = new PerformanceCounter();</div><div class=\"line\">        counter5.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter5.CounterName = \"Min Worker Threads\";</div><div class=\"line\">        counter5.ReadOnly = false;</div><div class=\"line\">        counter5.RawValue = minWorker;</div><div class=\"line\">        counter5.Close();</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter6 = new PerformanceCounter();</div><div class=\"line\">        counter6.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter6.CounterName = \"Min IO Threads\";</div><div class=\"line\">        counter6.ReadOnly = false;</div><div class=\"line\">        counter6.RawValue = minIO;</div><div class=\"line\">        counter6.Close();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"StartWebApp-aspx\"><a href=\"#StartWebApp-aspx\" class=\"headerlink\" title=\"StartWebApp.aspx\"></a><span id=\"startWebApp\">StartWebApp.aspx</span></h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Page_Load</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, EventArgs e</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> availableWorker, availableIO;</div><div class=\"line\">    <span class=\"keyword\">int</span> maxWorker, maxIO;</div><div class=\"line\">    <span class=\"keyword\">int</span> minWorker, minIO;</div><div class=\"line\">  </div><div class=\"line\">    ThreadPool.GetAvailableThreads(<span class=\"keyword\">out</span> availableWorker, <span class=\"keyword\">out</span> availableIO);</div><div class=\"line\">    ThreadPool.GetMaxThreads(<span class=\"keyword\">out</span> maxWorker, <span class=\"keyword\">out</span> maxIO);</div><div class=\"line\">    ThreadPool.GetMinThreads(<span class=\"keyword\">out</span> minWorker, <span class=\"keyword\">out</span> minIO);</div><div class=\"line\"></div><div class=\"line\">    Response.Write(<span class=\"string\">\"This ASP.NET application has started.&lt;br&gt;\"</span>);</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"MaxWorkerThreads:&#123;0&#125;.&lt;br&gt;\"</span>, maxWorker));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"MaxIOThreads:&#123;0&#125;.&lt;br&gt;\"</span>, maxIO));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"MinWorkerThreads:&#123;0&#125;.&lt;br&gt;\"</span>, minWorker));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"MinIOThreads:&#123;0&#125;.&lt;br&gt;\"</span>, minIO));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"AvailableWorker:&#123;0&#125;.&lt;br&gt;\"</span>, availableWorker));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"AvailableIO:&#123;0&#125;.&lt;br&gt;\"</span>, availableIO));</div><div class=\"line\">    Response.Write(<span class=\"string\">\"You can now close this page.\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Sleep-aspx\"><a href=\"#Sleep-aspx\" class=\"headerlink\" title=\"Sleep.aspx\"></a><span id=\"sleep\">Sleep.aspx</span></h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Page_Load</span>(<span class=\"params\">Object sender, EventArgs e</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">      <span class=\"keyword\">int</span> times = <span class=\"number\">0</span> ;</div><div class=\"line\">      <span class=\"keyword\">var</span> max = <span class=\"keyword\">int</span>.Parse(Request.QueryString.Get(<span class=\"string\">\"max\"</span>));</div><div class=\"line\">      <span class=\"keyword\">var</span> server = ConnectionMultiplexer.Connect(<span class=\"string\">\"redisserver:6379,ssl=false,password=,allowAdmin=false,connectTimeout=200\"</span>);</div><div class=\"line\">      <span class=\"keyword\">var</span> list = Enumerable.Range(<span class=\"number\">1</span>, max).ToList();</div><div class=\"line\">      Parallel.ForEach(list, (i) =&gt;</div><div class=\"line\">      &#123;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">var</span> database = server.GetDatabase();</div><div class=\"line\">          database.StringGet(<span class=\"string\">\"Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8\"</span>);</div><div class=\"line\">          times++;</div><div class=\"line\">      &#125;);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> availableWorker, availableIO;</div><div class=\"line\">      <span class=\"keyword\">int</span> maxWorker, maxIO;</div><div class=\"line\">      ThreadPool.SetMaxThreads(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</div><div class=\"line\">      ThreadPool.GetAvailableThreads(<span class=\"keyword\">out</span> availableWorker, <span class=\"keyword\">out</span> availableIO);</div><div class=\"line\">      ThreadPool.GetMaxThreads(<span class=\"keyword\">out</span> maxWorker, <span class=\"keyword\">out</span> maxIO);</div><div class=\"line\">      Response.Write(String.Format(<span class=\"string\">\"Connect Redis Busy:&#123;0&#125;&lt;br /&gt; &#123;1&#125;\"</span>,maxWorker - availableWorker, times));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"StackExchange-Redis-源碼\"><a href=\"#StackExchange-Redis-源碼\" class=\"headerlink\" title=\"StackExchange.Redis 源碼\"></a>StackExchange.Redis 源碼</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">GetThreadPoolStats</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"keyword\">string</span> iocp, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> worker</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//BusyThreads =  TP.GetMaxThreads() –TP.GetAVailable();</span></div><div class=\"line\">    <span class=\"comment\">//If BusyThreads &gt;= TP.GetMinThreads(), then threadpool growth throttling is possible.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> maxIoThreads, maxWorkerThreads;</div><div class=\"line\">    ThreadPool.GetMaxThreads(<span class=\"keyword\">out</span> maxWorkerThreads, <span class=\"keyword\">out</span> maxIoThreads);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> freeIoThreads, freeWorkerThreads;</div><div class=\"line\">    ThreadPool.GetAvailableThreads(<span class=\"keyword\">out</span> freeWorkerThreads, <span class=\"keyword\">out</span> freeIoThreads);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> minIoThreads, minWorkerThreads;</div><div class=\"line\">    ThreadPool.GetMinThreads(<span class=\"keyword\">out</span> minWorkerThreads, <span class=\"keyword\">out</span> minIoThreads);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> busyIoThreads = maxIoThreads - freeIoThreads;</div><div class=\"line\">    <span class=\"keyword\">int</span> busyWorkerThreads = maxWorkerThreads - freeWorkerThreads;</div><div class=\"line\"></div><div class=\"line\">    iocp = <span class=\"string\">$\"(Busy=<span class=\"subst\">&#123;busyIoThreads&#125;</span>,Free=<span class=\"subst\">&#123;freeIoThreads&#125;</span>,Min=<span class=\"subst\">&#123;minIoThreads&#125;</span>,Max=<span class=\"subst\">&#123;maxIoThreads&#125;</span>)\"</span>;</div><div class=\"line\">    worker = <span class=\"string\">$\"(Busy=<span class=\"subst\">&#123;busyWorkerThreads&#125;</span>,Free=<span class=\"subst\">&#123;freeWorkerThreads&#125;</span>,Min=<span class=\"subst\">&#123;minWorkerThreads&#125;</span>,Max=<span class=\"subst\">&#123;maxWorkerThreads&#125;</span>)\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> busyWorkerThreads;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"環境與工具\"><a href=\"#環境與工具\" class=\"headerlink\" title=\"環境與工具\"></a><span id=\"testEnvironment\">環境與工具</span></h2><ul>\n<li>Visual Studio 2015 Professional UPDATE 3</li>\n<li>Windows 10 </li>\n<li>.NET Framework 4.5</li>\n<li>StackExchange.Redis 1.0.481</li>\n<li>CPU <code>Intel® Core™ i7-5500U</code> 四核心</li>\n</ul>\n<h2 id=\"官方說明\"><a href=\"#官方說明\" class=\"headerlink\" title=\"官方說明\"></a>官方說明</h2><ul>\n<li><a href=\"https://support.microsoft.com/zh-tw/kb/821268\" target=\"_blank\" rel=\"external\">爭用、 效能不佳、 和死結 （deadlock） 當您從 ASP.NET 應用程式呼叫 Web 服務</a></li>\n<li>machine.config</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">system.web</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">processModel</span> <span class=\"attr\">autoConfig</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">maxWorkerThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">maxIoThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">minWorkerThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">minIoThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">requestQueueLimit</span>=<span class=\"string\">\"5000\"</span> <span class=\"attr\">responseDeadlockInterval</span>=<span class=\"string\">\"00:03:00\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">httpRuntime</span> <span class=\"attr\">minFreeThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">minLocalRequestFreeThreads</span>=<span class=\"string\">\"xxx\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">system.web</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"建議的設定值\"><a href=\"#建議的設定值\" class=\"headerlink\" title=\"建議的設定值\"></a>建議的設定值</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">system.web</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">processModel</span> <span class=\"attr\">autoConfig</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">minWorkerThreads</span>=<span class=\"string\">\"1\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">system.web</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>.NET 官方文件的預設值與建議值</p>\n<table>\n<thead>\n<tr>\n<th>名稱</th>\n<th>預設值</th>\n<th>建議配置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>maxWorkerThreads</td>\n<td>20</td>\n<td>32767 / #Cores</td>\n</tr>\n<tr>\n<td>maxIoThreads</td>\n<td>20</td>\n<td>32767 / #Cores</td>\n</tr>\n<tr>\n<td>minWorkerThreads</td>\n<td>1</td>\n<td>maxWorkerThreads/2</td>\n</tr>\n<tr>\n<td>minIoThreads</td>\n<td>1</td>\n<td>maxIoThreads / 2</td>\n</tr>\n<tr>\n<td>minFreeThreads</td>\n<td>8</td>\n<td>88*#CPUs</td>\n</tr>\n<tr>\n<td>minLocalRequestFreeThreads</td>\n<td>4</td>\n<td>76*#CPUs</td>\n</tr>\n<tr>\n<td>maxconnection</td>\n<td>2</td>\n<td>12*CPUs</td>\n</tr>\n<tr>\n<td>executionTimeout</td>\n<td>90s</td>\n<td>未建議</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>maxWorkerThreads,minWorkerThreads,maxIoThreads,minIoThreads 設定的數值需要乘上CPU的數量,<br>例: 4 核心設定 minWorkerThreads 值 20 ,實際上的值為 80   </li>\n</ul>\n<h2 id=\"註釋\"><a href=\"#註釋\" class=\"headerlink\" title=\"註釋\"></a><span id=\"comment1\">註釋<span></span></span></h2><ol>\n<li>ThreadPool 中會有一個 queue , 其中隱含一個半秒機制 , 當 queue 靜止超過半秒 , 就會在 ThreadPool 建立一個新的 Thread  </li>\n</ol>\n<h2 id=\"記錄\"><a href=\"#記錄\" class=\"headerlink\" title=\"記錄\"></a>記錄</h2><ul>\n<li>ADO.NET 需要使用 Worker Thread</li>\n<li>Redis 需要使用 Worker Thread</li>\n<li></li>\n</ul>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx\" target=\"_blank\" rel=\"external\">Threading</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms998549.aspx\" target=\"_blank\" rel=\"external\">Improving ASP.NET Performance</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms973903.aspx\" target=\"_blank\" rel=\"external\">Programming the Thread Pool in the .NET Framework</a></li>\n<li><a href=\"https://github.com/StackExchange/StackExchange.Redis\" target=\"_blank\" rel=\"external\">StackExchange.Redis 源碼</a></li>\n<li><a href=\"https://read01.com/MenEP.html\" target=\"_blank\" rel=\"external\">雲計算之路-阿里雲上：從ASP.NET線程角度對「黑色30秒」問題的全新分析</a></li>\n<li><a href=\"https://msdn.microsoft.com/zh-tw/library/ff650682.aspx\" target=\"_blank\" rel=\"external\">How To: Monitor the ASP.NET Thread Pool Using Custom Counters</a></li>\n<li><a href=\"http://www.thejoyofcode.com/tuning_the_threadpool.aspx\" target=\"_blank\" rel=\"external\">http://www.thejoyofcode.com/tuning_the_threadpool.aspx</a></li>\n<li><a href=\"https://gist.github.com/JonCole/e65411214030f0d823cb\" target=\"_blank\" rel=\"external\">https://gist.github.com/JonCole/e65411214030f0d823cb</a></li>\n<li><a href=\"https://blogs.msdn.microsoft.com/carloc/2009/02/19/minworkerthreads-and-autoconfig/\" target=\"_blank\" rel=\"external\">https://blogs.msdn.microsoft.com/carloc/2009/02/19/minworkerthreads-and-autoconfig/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><ol>\n<li>實務上的專案遭受 DDos 攻擊  </li>\n<li>DB TimeOut  </li>\n<li>Redis TimeOut  </li>\n<li>主程式沒有死,但是Elmah出現大量Exception  </li>\n</ol>\n<h2 id=\"錯誤資訊\"><a href=\"#錯誤資訊\" class=\"headerlink\" title=\"錯誤資訊\"></a>錯誤資訊</h2><p><img src=\"/images/workerthread_and_iothread/110416_102437_AM.jpg\" alt=\"瞬發的流量\"></p>\n<h3 id=\"Redis的錯誤記錄\"><a href=\"#Redis的錯誤記錄\" class=\"headerlink\" title=\"Redis的錯誤記錄\"></a>Redis的錯誤記錄</h3><p>錯誤1.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Timeout performing SETEX Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8, </div><div class=\"line\">inst: 1, mgr: ExecuteSelect, err: never, queue: 2, qu: 2, qs: 0, qc: 0, wr: 0, wq: 0, in: 0, ar: 0, </div><div class=\"line\">IOCP: (Busy=0,Free=1000,Min=4,Max=1000), WORKER: (Busy=165,Free=32602,Min=4,Max=32767), </div><div class=\"line\">clientName: TYO-HOST</div></pre></td></tr></table></figure></p>\n<p>錯誤2.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">StackExchange.Redis.RedisConnectionException</div><div class=\"line\">SocketFailure on GET</div></pre></td></tr></table></figure></p>\n<p>錯誤3.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">No connection is available to service this operation: </div><div class=\"line\">GET Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8</div></pre></td></tr></table></figure></p>\n<p>錯誤4.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">UnableToResolvePhysicalConnection on GET</div></pre></td></tr></table></figure></p>\n<h3 id=\"SQL-Server-錯誤記錄\"><a href=\"#SQL-Server-錯誤記錄\" class=\"headerlink\" title=\"SQL Server 錯誤記錄\"></a>SQL Server 錯誤記錄</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">A transport-level error has occurred when receiving results from the server. </div><div class=\"line\">(provider: Session Provider, error: 19 - Physical connection is not usable)</div></pre></td></tr></table></figure>\n<h2 id=\"錯誤原因\"><a href=\"#錯誤原因\" class=\"headerlink\" title=\"錯誤原因\"></a>錯誤原因</h2><ol>\n<li>CLR 建立執行緒需要時間 , 一秒鐘最多只能建立兩條 Thread <a href=\"#comment1\">註一</a></li>\n<li>瞬間的 Request 量超過 ThreadPool 中的 Thread 數量 </li>\n<li>ThreadPool 建立 Thread 中 , 仍持續有 Request 進來引發錯誤 </li>\n<li>因為我的<a href=\"#testEnvironment\">測試環境</a>有四核心,依文件所說</li>\n</ol>\n<h2 id=\"實驗流程\"><a href=\"#實驗流程\" class=\"headerlink\" title=\"實驗流程\"></a>實驗流程</h2><ol>\n<li><p>建立監視器<br> 參考 <a href=\"https://msdn.microsoft.com/zh-tw/library/ff650682.aspx\" target=\"_blank\" rel=\"external\">How To: Monitor the ASP.NET Thread Pool Using Custom Counters</a></p>\n<ol>\n<li>建立一個 console 專案, <a href=\"#MyAspNetThreadCounters\">MyAspNetThreadCounters</a></li>\n<li>編譯並執行 console 專案</li>\n<li><p>開啟<code>Regedit.exe</code> 檢查 <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services</code> 應包含以下值</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Available Worker Threads</div><div class=\"line\">Available IO Threads</div><div class=\"line\">Max Worker Threads</div><div class=\"line\">Max IO Threads</div><div class=\"line\">Min Worker Threads</div><div class=\"line\">Min IO Threads</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>建立ASP.NET專案</p>\n<ol>\n<li>建立<a href=\"#global\">Global.asax</a></li>\n<li>建立<a href=\"#startWebApp\">StartWebApp.aspx</a></li>\n<li>建立<a href=\"#sleep\">Sleep.aspx</a></li>\n</ol>\n</li>\n<li>開啟 <code>perfmon.exe</code> 新增計數器 , 選取我們自定義的 <code>MyAspNetThreadCounters</code></li>\n<li><p>連結網頁 <code>localhost\\StartWebApp.aspx</code> 以啟動網站,可以得到以下數據</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">MaxWorkerThreads:32767.</div><div class=\"line\">MaxIOThreads:1000.</div><div class=\"line\">MinWorkerThreads:4.</div><div class=\"line\">MinIOThreads:4.</div><div class=\"line\">AvailableWorker:32766.</div><div class=\"line\">AvailableIO:1000.</div></pre></td></tr></table></figure>\n</li>\n<li><p>執行大量 redis 連線,觀察結果 AvailableWorker Threads 會往下掉,<br>故推斷 redis connection 是透過 Worker Threads 建立.</p>\n</li>\n<li><p>重現錯誤, 執行大量的 sleep 頁面,透過這種方式搶佔IIS的執行緒.<br><img src=\"/images/workerthread_and_iothread/110416_170101_PM.jpg\" alt=\"\"></p>\n</li>\n<li><p>再執行大量 redis 連線, 用以重現錯誤<br><img src=\"/images/workerthread_and_iothread/110416_170001_PM.jpg\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h2><h3 id=\"MyAspNetThreadCounters\"><a href=\"#MyAspNetThreadCounters\" class=\"headerlink\" title=\"MyAspNetThreadCounters\"></a><span id=\"MyAspNetThreadCounters\">MyAspNetThreadCounters</span></h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> System;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Diagnostics;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">MyAspNetThreadCounters</span></div><div class=\"line\">&#123;</div><div class=\"line\">    [STAThread]</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        CreateCounters();</div><div class=\"line\">        Console.WriteLine(<span class=\"string\">\"MyAspNetThreadCounters performance counter category \"</span> +</div><div class=\"line\">                          <span class=\"string\">\"is created. [Press Enter]\"</span>);</div><div class=\"line\">        Console.ReadLine();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateCounters</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        CounterCreationDataCollection col =</div><div class=\"line\">          <span class=\"keyword\">new</span> CounterCreationDataCollection();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Create custom counter objects</span></div><div class=\"line\">        CounterCreationData counter1 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter1.CounterName = <span class=\"string\">\"Available Worker Threads\"</span>;</div><div class=\"line\">        counter1.CounterHelp = <span class=\"string\">\"The difference between the maximum number \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"of thread pool worker threads and the \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"number currently active.\"</span>;</div><div class=\"line\">        counter1.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter2 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter2.CounterName = <span class=\"string\">\"Available IO Threads\"</span>;</div><div class=\"line\">        counter2.CounterHelp = <span class=\"string\">\"The difference between the maximum number of \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool IO threads and the number \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"currently active.\"</span>;</div><div class=\"line\">        counter2.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter3 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter3.CounterName = <span class=\"string\">\"Max Worker Threads\"</span>;</div><div class=\"line\">        counter3.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"that can be active concurrently. All \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool worker threads become available.\"</span>;</div><div class=\"line\">        counter3.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter4 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter4.CounterName = <span class=\"string\">\"Max IO Threads\"</span>;</div><div class=\"line\">        counter4.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"that can be active concurrently. All \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool IO threads become available.\"</span>;</div><div class=\"line\">        counter4.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter5 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter5.CounterName = <span class=\"string\">\"Min Worker Threads\"</span>;</div><div class=\"line\">        counter5.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"that can be active concurrently. All \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool worker threads become available.\"</span>;</div><div class=\"line\">        counter5.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        CounterCreationData counter6 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">        counter6.CounterName = <span class=\"string\">\"Min IO Threads\"</span>;</div><div class=\"line\">        counter6.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"that can be active concurrently. All \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                              <span class=\"string\">\"thread pool IO threads become available.\"</span>;</div><div class=\"line\">        counter6.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Add custom counter objects to CounterCreationDataCollection.</span></div><div class=\"line\">        col.Add(counter1);</div><div class=\"line\">        col.Add(counter2);</div><div class=\"line\">        col.Add(counter3);</div><div class=\"line\">        col.Add(counter4);</div><div class=\"line\">        col.Add(counter5);</div><div class=\"line\">        col.Add(counter6);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// delete the category if it already exists</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (PerformanceCounterCategory.Exists(<span class=\"string\">\"MyAspNetThreadCounters\"</span>))</div><div class=\"line\">        &#123;</div><div class=\"line\">            PerformanceCounterCategory.Delete(<span class=\"string\">\"MyAspNetThreadCounters\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// bind the counters to the PerformanceCounterCategory</span></div><div class=\"line\">        PerformanceCounterCategory category =</div><div class=\"line\">                PerformanceCounterCategory.Create(<span class=\"string\">\"MyAspNetThreadCounters\"</span>,<span class=\"string\">\"\"</span>, col);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Global-asax\"><a href=\"#Global-asax\" class=\"headerlink\" title=\"Global.asax\"></a><span id=\"global\">Global.asax</span></h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Global : System.Web</div><div class=\"line\">&#123;</div><div class=\"line\">    //BusyThreads =  TP.GetMaxThreads() –TP.GetAVailable();</div><div class=\"line\">    //If BusyThreads &gt;= TP.GetMinThreads(), then threadpool growth throttling is possible.</div><div class=\"line\"></div><div class=\"line\">    int maxIoThreads, maxWorkerThreads;</div><div class=\"line\">    ThreadPool.GetMaxThreads(out maxWorkerThreads, out maxIoThreads);</div><div class=\"line\"></div><div class=\"line\">    int freeIoThreads, freeWorkerThreads;</div><div class=\"line\">    ThreadPool.GetAvailableThreads(out freeWorkerThreads, out freeIoThreads);</div><div class=\"line\"></div><div class=\"line\">    int minIoThreads, minWorkerThreads;</div><div class=\"line\">    ThreadPool.GetMinThreads(out minWorkerThreads, out minIoThreads);</div><div class=\"line\"></div><div class=\"line\">    int busyIoThreads = maxIoThreads - freeIoThreads;</div><div class=\"line\">    int busyWorkerThreads = maxWorkerThreads - freeWorkerThreads;</div><div class=\"line\"></div><div class=\"line\">    iocp = $\"(Busy=&#123;busyIoThreads&#125;,Free=&#123;freeIoThreads&#125;,Min=&#123;minIoThreads&#125;,Max=&#123;maxIoThreads&#125;)\";</div><div class=\"line\">    worker = $\"(Busy=&#123;busyWorkerThreads&#125;,Free=&#123;freeWorkerThreads&#125;,Min=&#123;minWorkerThreads&#125;,Max=&#123;maxWorkerThreads&#125;)\";</div><div class=\"line\">    return busyWorkerThreads;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System;</div><div class=\"line\"></div><div class=\"line\">public class Global : System.Web.HttpApplication</div><div class=\"line\">&#123;</div><div class=\"line\">    public bool MonitorThreadPoolEnabled = true;</div><div class=\"line\">    protected void Application_Start(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\">        Thread t = new Thread(new ThreadStart(RefreshCounters));</div><div class=\"line\">        t.Start();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Session_Start(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Application_BeginRequest(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Application_AuthenticateRequest(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Application_Error(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Session_End(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected void Application_End(object sender, EventArgs e)</div><div class=\"line\">    &#123;</div><div class=\"line\">        MonitorThreadPoolEnabled = false;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void RefreshCounters()</div><div class=\"line\">    &#123;</div><div class=\"line\">        while (MonitorThreadPoolEnabled)</div><div class=\"line\">        &#123;</div><div class=\"line\">            ASPNETThreadInfo t = GetThreadInfo();</div><div class=\"line\">            ShowPerfCounters(t);</div><div class=\"line\">            System.Threading.Thread.Sleep(500);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public struct ASPNETThreadInfo</div><div class=\"line\">    &#123;</div><div class=\"line\">        public int MaxWorkerThreads;</div><div class=\"line\">        public int MaxIOThreads;</div><div class=\"line\">        public int MinFreeThreads;</div><div class=\"line\">        public int MinLocalRequestFreeThreads;</div><div class=\"line\">        public int AvailableWorkerThreads;</div><div class=\"line\">        public int AvailableIOThreads;</div><div class=\"line\"></div><div class=\"line\">        public bool Equals(ASPNETThreadInfo other)</div><div class=\"line\">        &#123;</div><div class=\"line\">            return (</div><div class=\"line\">            MaxWorkerThreads == other.MaxWorkerThreads &amp;&amp;</div><div class=\"line\">            MaxIOThreads == other.MaxIOThreads &amp;&amp;</div><div class=\"line\">            MinFreeThreads == other.MinFreeThreads &amp;&amp;</div><div class=\"line\">            MinLocalRequestFreeThreads == other.MinLocalRequestFreeThreads &amp;&amp;</div><div class=\"line\">            AvailableWorkerThreads == other.AvailableWorkerThreads &amp;&amp;</div><div class=\"line\">            AvailableIOThreads == other.AvailableIOThreads</div><div class=\"line\">            );</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public ASPNETThreadInfo GetThreadInfo()</div><div class=\"line\">    &#123;</div><div class=\"line\">        // use ThreadPool to get the current status</div><div class=\"line\">        int availableWorker, availableIO;</div><div class=\"line\">        int maxWorker, maxIO;</div><div class=\"line\">                    </div><div class=\"line\">        ThreadPool.GetAvailableThreads(out availableWorker, out availableIO);</div><div class=\"line\">        ThreadPool.GetMaxThreads(out maxWorker, out maxIO);            </div><div class=\"line\">        ASPNETThreadInfo threadInfo;</div><div class=\"line\">        threadInfo.AvailableWorkerThreads = (Int16)availableWorker;</div><div class=\"line\">        threadInfo.AvailableIOThreads = (Int16)availableIO;</div><div class=\"line\">        threadInfo.MaxWorkerThreads = (Int16)maxWorker;</div><div class=\"line\">        threadInfo.MaxIOThreads = (Int16)maxIO;            </div><div class=\"line\">        // hard code for now; could get this from  machine.config</div><div class=\"line\">        threadInfo.MinFreeThreads = 8;</div><div class=\"line\">        threadInfo.MinLocalRequestFreeThreads = 4;</div><div class=\"line\">        return threadInfo;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void ShowPerfCounters(ASPNETThreadInfo t)</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        // get an instance of our Available Worker Threads counter</div><div class=\"line\">        PerformanceCounter counter1 = new PerformanceCounter();</div><div class=\"line\">        counter1.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter1.CounterName = \"Available Worker Threads\";</div><div class=\"line\">        counter1.ReadOnly = false;</div><div class=\"line\"></div><div class=\"line\">        // set the value of the counter</div><div class=\"line\">        counter1.RawValue = t.AvailableWorkerThreads;</div><div class=\"line\">        counter1.Close();</div><div class=\"line\"></div><div class=\"line\">        // repeat for other counters</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter2 = new PerformanceCounter();</div><div class=\"line\">        counter2.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter2.CounterName = \"Available IO Threads\";</div><div class=\"line\">        counter2.ReadOnly = false;</div><div class=\"line\">        counter2.RawValue = t.AvailableIOThreads;</div><div class=\"line\">        counter2.Close();</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter3 = new PerformanceCounter();</div><div class=\"line\">        counter3.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter3.CounterName = \"Max Worker Threads\";</div><div class=\"line\">        counter3.ReadOnly = false;</div><div class=\"line\">        counter3.RawValue = t.MaxWorkerThreads;</div><div class=\"line\">        counter3.Close();</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter4 = new PerformanceCounter();</div><div class=\"line\">        counter4.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter4.CounterName = \"Max IO Threads\";</div><div class=\"line\">        counter4.ReadOnly = false;</div><div class=\"line\">        counter4.RawValue = t.MaxIOThreads;</div><div class=\"line\">        counter4.Close();</div><div class=\"line\"></div><div class=\"line\">        int minWorker, minIO;</div><div class=\"line\">        ThreadPool.GetMinThreads(out minWorker, out minIO);</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter5 = new PerformanceCounter();</div><div class=\"line\">        counter5.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter5.CounterName = \"Min Worker Threads\";</div><div class=\"line\">        counter5.ReadOnly = false;</div><div class=\"line\">        counter5.RawValue = minWorker;</div><div class=\"line\">        counter5.Close();</div><div class=\"line\"></div><div class=\"line\">        PerformanceCounter counter6 = new PerformanceCounter();</div><div class=\"line\">        counter6.CategoryName = \"MyAspNetThreadCounters\";</div><div class=\"line\">        counter6.CounterName = \"Min IO Threads\";</div><div class=\"line\">        counter6.ReadOnly = false;</div><div class=\"line\">        counter6.RawValue = minIO;</div><div class=\"line\">        counter6.Close();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"StartWebApp-aspx\"><a href=\"#StartWebApp-aspx\" class=\"headerlink\" title=\"StartWebApp.aspx\"></a><span id=\"startWebApp\">StartWebApp.aspx</span></h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Page_Load</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, EventArgs e</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> availableWorker, availableIO;</div><div class=\"line\">    <span class=\"keyword\">int</span> maxWorker, maxIO;</div><div class=\"line\">    <span class=\"keyword\">int</span> minWorker, minIO;</div><div class=\"line\">  </div><div class=\"line\">    ThreadPool.GetAvailableThreads(<span class=\"keyword\">out</span> availableWorker, <span class=\"keyword\">out</span> availableIO);</div><div class=\"line\">    ThreadPool.GetMaxThreads(<span class=\"keyword\">out</span> maxWorker, <span class=\"keyword\">out</span> maxIO);</div><div class=\"line\">    ThreadPool.GetMinThreads(<span class=\"keyword\">out</span> minWorker, <span class=\"keyword\">out</span> minIO);</div><div class=\"line\"></div><div class=\"line\">    Response.Write(<span class=\"string\">\"This ASP.NET application has started.&lt;br&gt;\"</span>);</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"MaxWorkerThreads:&#123;0&#125;.&lt;br&gt;\"</span>, maxWorker));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"MaxIOThreads:&#123;0&#125;.&lt;br&gt;\"</span>, maxIO));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"MinWorkerThreads:&#123;0&#125;.&lt;br&gt;\"</span>, minWorker));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"MinIOThreads:&#123;0&#125;.&lt;br&gt;\"</span>, minIO));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"AvailableWorker:&#123;0&#125;.&lt;br&gt;\"</span>, availableWorker));</div><div class=\"line\">    Response.Write(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"AvailableIO:&#123;0&#125;.&lt;br&gt;\"</span>, availableIO));</div><div class=\"line\">    Response.Write(<span class=\"string\">\"You can now close this page.\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Sleep-aspx\"><a href=\"#Sleep-aspx\" class=\"headerlink\" title=\"Sleep.aspx\"></a><span id=\"sleep\">Sleep.aspx</span></h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Page_Load</span>(<span class=\"params\">Object sender, EventArgs e</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">      <span class=\"keyword\">int</span> times = <span class=\"number\">0</span> ;</div><div class=\"line\">      <span class=\"keyword\">var</span> max = <span class=\"keyword\">int</span>.Parse(Request.QueryString.Get(<span class=\"string\">\"max\"</span>));</div><div class=\"line\">      <span class=\"keyword\">var</span> server = ConnectionMultiplexer.Connect(<span class=\"string\">\"redisserver:6379,ssl=false,password=,allowAdmin=false,connectTimeout=200\"</span>);</div><div class=\"line\">      <span class=\"keyword\">var</span> list = Enumerable.Range(<span class=\"number\">1</span>, max).ToList();</div><div class=\"line\">      Parallel.ForEach(list, (i) =&gt;</div><div class=\"line\">      &#123;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">var</span> database = server.GetDatabase();</div><div class=\"line\">          database.StringGet(<span class=\"string\">\"Cache:Key:06f305de-f163-4d49-8b98-d8bc51edf7d8\"</span>);</div><div class=\"line\">          times++;</div><div class=\"line\">      &#125;);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">int</span> availableWorker, availableIO;</div><div class=\"line\">      <span class=\"keyword\">int</span> maxWorker, maxIO;</div><div class=\"line\">      ThreadPool.SetMaxThreads(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</div><div class=\"line\">      ThreadPool.GetAvailableThreads(<span class=\"keyword\">out</span> availableWorker, <span class=\"keyword\">out</span> availableIO);</div><div class=\"line\">      ThreadPool.GetMaxThreads(<span class=\"keyword\">out</span> maxWorker, <span class=\"keyword\">out</span> maxIO);</div><div class=\"line\">      Response.Write(String.Format(<span class=\"string\">\"Connect Redis Busy:&#123;0&#125;&lt;br /&gt; &#123;1&#125;\"</span>,maxWorker - availableWorker, times));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"StackExchange-Redis-源碼\"><a href=\"#StackExchange-Redis-源碼\" class=\"headerlink\" title=\"StackExchange.Redis 源碼\"></a>StackExchange.Redis 源碼</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">GetThreadPoolStats</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"keyword\">string</span> iocp, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> worker</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//BusyThreads =  TP.GetMaxThreads() –TP.GetAVailable();</span></div><div class=\"line\">    <span class=\"comment\">//If BusyThreads &gt;= TP.GetMinThreads(), then threadpool growth throttling is possible.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> maxIoThreads, maxWorkerThreads;</div><div class=\"line\">    ThreadPool.GetMaxThreads(<span class=\"keyword\">out</span> maxWorkerThreads, <span class=\"keyword\">out</span> maxIoThreads);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> freeIoThreads, freeWorkerThreads;</div><div class=\"line\">    ThreadPool.GetAvailableThreads(<span class=\"keyword\">out</span> freeWorkerThreads, <span class=\"keyword\">out</span> freeIoThreads);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> minIoThreads, minWorkerThreads;</div><div class=\"line\">    ThreadPool.GetMinThreads(<span class=\"keyword\">out</span> minWorkerThreads, <span class=\"keyword\">out</span> minIoThreads);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> busyIoThreads = maxIoThreads - freeIoThreads;</div><div class=\"line\">    <span class=\"keyword\">int</span> busyWorkerThreads = maxWorkerThreads - freeWorkerThreads;</div><div class=\"line\"></div><div class=\"line\">    iocp = <span class=\"string\">$\"(Busy=<span class=\"subst\">&#123;busyIoThreads&#125;</span>,Free=<span class=\"subst\">&#123;freeIoThreads&#125;</span>,Min=<span class=\"subst\">&#123;minIoThreads&#125;</span>,Max=<span class=\"subst\">&#123;maxIoThreads&#125;</span>)\"</span>;</div><div class=\"line\">    worker = <span class=\"string\">$\"(Busy=<span class=\"subst\">&#123;busyWorkerThreads&#125;</span>,Free=<span class=\"subst\">&#123;freeWorkerThreads&#125;</span>,Min=<span class=\"subst\">&#123;minWorkerThreads&#125;</span>,Max=<span class=\"subst\">&#123;maxWorkerThreads&#125;</span>)\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> busyWorkerThreads;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"環境與工具\"><a href=\"#環境與工具\" class=\"headerlink\" title=\"環境與工具\"></a><span id=\"testEnvironment\">環境與工具</span></h2><ul>\n<li>Visual Studio 2015 Professional UPDATE 3</li>\n<li>Windows 10 </li>\n<li>.NET Framework 4.5</li>\n<li>StackExchange.Redis 1.0.481</li>\n<li>CPU <code>Intel® Core™ i7-5500U</code> 四核心</li>\n</ul>\n<h2 id=\"官方說明\"><a href=\"#官方說明\" class=\"headerlink\" title=\"官方說明\"></a>官方說明</h2><ul>\n<li><a href=\"https://support.microsoft.com/zh-tw/kb/821268\" target=\"_blank\" rel=\"external\">爭用、 效能不佳、 和死結 （deadlock） 當您從 ASP.NET 應用程式呼叫 Web 服務</a></li>\n<li>machine.config</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">system.web</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">processModel</span> <span class=\"attr\">autoConfig</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">maxWorkerThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">maxIoThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">minWorkerThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">minIoThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">requestQueueLimit</span>=<span class=\"string\">\"5000\"</span> <span class=\"attr\">responseDeadlockInterval</span>=<span class=\"string\">\"00:03:00\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">httpRuntime</span> <span class=\"attr\">minFreeThreads</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">minLocalRequestFreeThreads</span>=<span class=\"string\">\"xxx\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">system.web</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"建議的設定值\"><a href=\"#建議的設定值\" class=\"headerlink\" title=\"建議的設定值\"></a>建議的設定值</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">system.web</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">processModel</span> <span class=\"attr\">autoConfig</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">minWorkerThreads</span>=<span class=\"string\">\"1\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">system.web</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>.NET 官方文件的預設值與建議值</p>\n<table>\n<thead>\n<tr>\n<th>名稱</th>\n<th>預設值</th>\n<th>建議配置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>maxWorkerThreads</td>\n<td>20</td>\n<td>32767 / #Cores</td>\n</tr>\n<tr>\n<td>maxIoThreads</td>\n<td>20</td>\n<td>32767 / #Cores</td>\n</tr>\n<tr>\n<td>minWorkerThreads</td>\n<td>1</td>\n<td>maxWorkerThreads/2</td>\n</tr>\n<tr>\n<td>minIoThreads</td>\n<td>1</td>\n<td>maxIoThreads / 2</td>\n</tr>\n<tr>\n<td>minFreeThreads</td>\n<td>8</td>\n<td>88*#CPUs</td>\n</tr>\n<tr>\n<td>minLocalRequestFreeThreads</td>\n<td>4</td>\n<td>76*#CPUs</td>\n</tr>\n<tr>\n<td>maxconnection</td>\n<td>2</td>\n<td>12*CPUs</td>\n</tr>\n<tr>\n<td>executionTimeout</td>\n<td>90s</td>\n<td>未建議</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>maxWorkerThreads,minWorkerThreads,maxIoThreads,minIoThreads 設定的數值需要乘上CPU的數量,<br>例: 4 核心設定 minWorkerThreads 值 20 ,實際上的值為 80   </li>\n</ul>\n<h2 id=\"註釋\"><a href=\"#註釋\" class=\"headerlink\" title=\"註釋\"></a><span id=\"comment1\">註釋<span></span></span></h2><ol>\n<li>ThreadPool 中會有一個 queue , 其中隱含一個半秒機制 , 當 queue 靜止超過半秒 , 就會在 ThreadPool 建立一個新的 Thread  </li>\n</ol>\n<h2 id=\"記錄\"><a href=\"#記錄\" class=\"headerlink\" title=\"記錄\"></a>記錄</h2><ul>\n<li>ADO.NET 需要使用 Worker Thread</li>\n<li>Redis 需要使用 Worker Thread</li>\n<li></li>\n</ul>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx\" target=\"_blank\" rel=\"external\">Threading</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms998549.aspx\" target=\"_blank\" rel=\"external\">Improving ASP.NET Performance</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms973903.aspx\" target=\"_blank\" rel=\"external\">Programming the Thread Pool in the .NET Framework</a></li>\n<li><a href=\"https://github.com/StackExchange/StackExchange.Redis\" target=\"_blank\" rel=\"external\">StackExchange.Redis 源碼</a></li>\n<li><a href=\"https://read01.com/MenEP.html\" target=\"_blank\" rel=\"external\">雲計算之路-阿里雲上：從ASP.NET線程角度對「黑色30秒」問題的全新分析</a></li>\n<li><a href=\"https://msdn.microsoft.com/zh-tw/library/ff650682.aspx\" target=\"_blank\" rel=\"external\">How To: Monitor the ASP.NET Thread Pool Using Custom Counters</a></li>\n<li><a href=\"http://www.thejoyofcode.com/tuning_the_threadpool.aspx\" target=\"_blank\" rel=\"external\">http://www.thejoyofcode.com/tuning_the_threadpool.aspx</a></li>\n<li><a href=\"https://gist.github.com/JonCole/e65411214030f0d823cb\" target=\"_blank\" rel=\"external\">https://gist.github.com/JonCole/e65411214030f0d823cb</a></li>\n<li><a href=\"https://blogs.msdn.microsoft.com/carloc/2009/02/19/minworkerthreads-and-autoconfig/\" target=\"_blank\" rel=\"external\">https://blogs.msdn.microsoft.com/carloc/2009/02/19/minworkerthreads-and-autoconfig/</a></li>\n</ul>\n"},{"title":"ASP.Net 執行緒 概觀","date":"2016-11-04T03:49:17.000Z","_content":"## 學習筆記\n\n1. 非同步與多執行緒應用的場景並不同,不該混淆\n2. 在單核的情況下,windows會分配片段的時間\n\n\n\n## 參考\n- [Threading](https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx)\n- http://stackoverflow.com/questions/4844637/what-is-the-difference-between-concurrency-parallelism-and-asynchronous-methods","source":"_drafts/workerthread_and_iothread_2.md","raw":"---\ntitle: ASP.Net 執行緒 概觀\ndate: 2016/11/04 11:49:17\ntag:\n  - .Net Framework\n  - Thread Pool\n  - ASP.Net\n---\n## 學習筆記\n\n1. 非同步與多執行緒應用的場景並不同,不該混淆\n2. 在單核的情況下,windows會分配片段的時間\n\n\n\n## 參考\n- [Threading](https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx)\n- http://stackoverflow.com/questions/4844637/what-is-the-difference-between-concurrency-parallelism-and-asynchronous-methods","slug":"workerthread_and_iothread_2","published":0,"updated":"2016-11-10T03:43:19.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3o4s0003lgopo0tg5owt","content":"<h2 id=\"學習筆記\"><a href=\"#學習筆記\" class=\"headerlink\" title=\"學習筆記\"></a>學習筆記</h2><ol>\n<li>非同步與多執行緒應用的場景並不同,不該混淆</li>\n<li>在單核的情況下,windows會分配片段的時間</li>\n</ol>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx\" target=\"_blank\" rel=\"external\">Threading</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4844637/what-is-the-difference-between-concurrency-parallelism-and-asynchronous-methods\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/4844637/what-is-the-difference-between-concurrency-parallelism-and-asynchronous-methods</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"學習筆記\"><a href=\"#學習筆記\" class=\"headerlink\" title=\"學習筆記\"></a>學習筆記</h2><ol>\n<li>非同步與多執行緒應用的場景並不同,不該混淆</li>\n<li>在單核的情況下,windows會分配片段的時間</li>\n</ol>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx\" target=\"_blank\" rel=\"external\">Threading</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4844637/what-is-the-difference-between-concurrency-parallelism-and-asynchronous-methods\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/4844637/what-is-the-difference-between-concurrency-parallelism-and-asynchronous-methods</a></li>\n</ul>\n"},{"title":"有關 HTTP Header Content-Type","date":"2016-10-28T04:54:55.000Z","_content":"## 引言\n當我們對 Server 發出 request 的時候  \n需要註明你 request 的 Content-Type   \n以下簡單介紹一下這些格式  \n\n### 測試工具\n\n[PostMan](https://www.getpostman.com/)這套工具\n可以模擬不同的格式資料發動 request 到你的 Server\n\n---\n\n## Content-Type\n\n### `application/x-www-form-urlencoded`\n常用的Content-Type,簡單說就是KEY-VALUE的方式  \n如下, KEY firstname 的值是 marsen  \nlastname 是由使用者輸入\n\n```html\n<form>\n  First name:<br>\n  <input type=\"text\" name=\"firstname\" value=\"marsen\"><br>\n  Last name:<br>\n  <input type=\"text\" name=\"lastname\">\n</form>\n```\n同時資料會作一次url encoded,  \n產生類似下列的資料\nfirstname=marsen&lastname=lin&key%5b1%5d=value%5b1%5d\n\n---\n\n### `multipart/form-data` \n\nPostMan中的選項 `binary` 其實就是包成這種格式   \n上傳檔案會使用這種Content-Type,  \n這通常表示你的html element包含有 `<input type=\"file\">` \n\n---\n\n###  其它\nPostMan中的選項 `raw`,可以用字串組合成任意Content-Type,  \n參考[Content-Type Table](http://www.freeformatter.com/mime-types-list.html)  \n- `application/json`  \n目前主流的API會用輕巧的JSON作為傳遞資訊的媒介  \n- `text/xml`、`application/xml`  \n早期標準的Web服務通常會透過xml作為交換資訊的媒介  \n- `text/plain` \n有些email或debug的情況會使用text/plain作為Content-Type,但是一般的Request情況不建議使用  \n- 更多請參考[Spec](https://www.w3.org/TR/html5/forms.html#text/plain-encoding-algorithm)   \n\n---\n\n## 參考\n- https://imququ.com/post/four-ways-to-post-data-in-http.html\n- https://codeforgeek.com/2014/09/handle-get-post-request-express-4/\n- https://scotch.io/tutorials/use-expressjs-to-get-url-and-post-parameters\n- http://stackoverflow.com/questions/4832357/whats-the-difference-between-text-xml-vs-application-xml-for-webservice-respons?ref=mythemeco&t=pack\n- http://stackoverflow.com/questions/4526273/what-does-enctype-multipart-form-data-mean\n\n(fin)","source":"_posts/about_content_type.md","raw":"---\ntitle: 有關 HTTP Header Content-Type\ndate: 2016/10/28 12:54:55\ntag:\n  - post\n  - http\n  - html\n  - Content-Type\n---\n## 引言\n當我們對 Server 發出 request 的時候  \n需要註明你 request 的 Content-Type   \n以下簡單介紹一下這些格式  \n\n### 測試工具\n\n[PostMan](https://www.getpostman.com/)這套工具\n可以模擬不同的格式資料發動 request 到你的 Server\n\n---\n\n## Content-Type\n\n### `application/x-www-form-urlencoded`\n常用的Content-Type,簡單說就是KEY-VALUE的方式  \n如下, KEY firstname 的值是 marsen  \nlastname 是由使用者輸入\n\n```html\n<form>\n  First name:<br>\n  <input type=\"text\" name=\"firstname\" value=\"marsen\"><br>\n  Last name:<br>\n  <input type=\"text\" name=\"lastname\">\n</form>\n```\n同時資料會作一次url encoded,  \n產生類似下列的資料\nfirstname=marsen&lastname=lin&key%5b1%5d=value%5b1%5d\n\n---\n\n### `multipart/form-data` \n\nPostMan中的選項 `binary` 其實就是包成這種格式   \n上傳檔案會使用這種Content-Type,  \n這通常表示你的html element包含有 `<input type=\"file\">` \n\n---\n\n###  其它\nPostMan中的選項 `raw`,可以用字串組合成任意Content-Type,  \n參考[Content-Type Table](http://www.freeformatter.com/mime-types-list.html)  \n- `application/json`  \n目前主流的API會用輕巧的JSON作為傳遞資訊的媒介  \n- `text/xml`、`application/xml`  \n早期標準的Web服務通常會透過xml作為交換資訊的媒介  \n- `text/plain` \n有些email或debug的情況會使用text/plain作為Content-Type,但是一般的Request情況不建議使用  \n- 更多請參考[Spec](https://www.w3.org/TR/html5/forms.html#text/plain-encoding-algorithm)   \n\n---\n\n## 參考\n- https://imququ.com/post/four-ways-to-post-data-in-http.html\n- https://codeforgeek.com/2014/09/handle-get-post-request-express-4/\n- https://scotch.io/tutorials/use-expressjs-to-get-url-and-post-parameters\n- http://stackoverflow.com/questions/4832357/whats-the-difference-between-text-xml-vs-application-xml-for-webservice-respons?ref=mythemeco&t=pack\n- http://stackoverflow.com/questions/4526273/what-does-enctype-multipart-form-data-mean\n\n(fin)","slug":"about_content_type","published":1,"updated":"2016-11-10T03:43:31.111Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3o4y0004lgopq2idpnne","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>當我們對 Server 發出 request 的時候<br>需要註明你 request 的 Content-Type<br>以下簡單介紹一下這些格式  </p>\n<h3 id=\"測試工具\"><a href=\"#測試工具\" class=\"headerlink\" title=\"測試工具\"></a>測試工具</h3><p><a href=\"https://www.getpostman.com/\" target=\"_blank\" rel=\"external\">PostMan</a>這套工具<br>可以模擬不同的格式資料發動 request 到你的 Server</p>\n<hr>\n<h2 id=\"Content-Type\"><a href=\"#Content-Type\" class=\"headerlink\" title=\"Content-Type\"></a>Content-Type</h2><h3 id=\"application-x-www-form-urlencoded\"><a href=\"#application-x-www-form-urlencoded\" class=\"headerlink\" title=\"application/x-www-form-urlencoded\"></a><code>application/x-www-form-urlencoded</code></h3><p>常用的Content-Type,簡單說就是KEY-VALUE的方式<br>如下, KEY firstname 的值是 marsen<br>lastname 是由使用者輸入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  First name:<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"firstname\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"marsen\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  Last name:<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lastname\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>同時資料會作一次url encoded,<br>產生類似下列的資料<br>firstname=marsen&amp;lastname=lin&amp;key%5b1%5d=value%5b1%5d</p>\n<hr>\n<h3 id=\"multipart-form-data\"><a href=\"#multipart-form-data\" class=\"headerlink\" title=\"multipart/form-data\"></a><code>multipart/form-data</code></h3><p>PostMan中的選項 <code>binary</code> 其實就是包成這種格式<br>上傳檔案會使用這種Content-Type,<br>這通常表示你的html element包含有 <code>&lt;input type=&quot;file&quot;&gt;</code> </p>\n<hr>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>PostMan中的選項 <code>raw</code>,可以用字串組合成任意Content-Type,<br>參考<a href=\"http://www.freeformatter.com/mime-types-list.html\" target=\"_blank\" rel=\"external\">Content-Type Table</a>  </p>\n<ul>\n<li><code>application/json</code><br>目前主流的API會用輕巧的JSON作為傳遞資訊的媒介  </li>\n<li><code>text/xml</code>、<code>application/xml</code><br>早期標準的Web服務通常會透過xml作為交換資訊的媒介  </li>\n<li><code>text/plain</code><br>有些email或debug的情況會使用text/plain作為Content-Type,但是一般的Request情況不建議使用  </li>\n<li>更多請參考<a href=\"https://www.w3.org/TR/html5/forms.html#text/plain-encoding-algorithm\" target=\"_blank\" rel=\"external\">Spec</a>   </li>\n</ul>\n<hr>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://imququ.com/post/four-ways-to-post-data-in-http.html\" target=\"_blank\" rel=\"external\">https://imququ.com/post/four-ways-to-post-data-in-http.html</a></li>\n<li><a href=\"https://codeforgeek.com/2014/09/handle-get-post-request-express-4/\" target=\"_blank\" rel=\"external\">https://codeforgeek.com/2014/09/handle-get-post-request-express-4/</a></li>\n<li><a href=\"https://scotch.io/tutorials/use-expressjs-to-get-url-and-post-parameters\" target=\"_blank\" rel=\"external\">https://scotch.io/tutorials/use-expressjs-to-get-url-and-post-parameters</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4832357/whats-the-difference-between-text-xml-vs-application-xml-for-webservice-respons?ref=mythemeco&amp;t=pack\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/4832357/whats-the-difference-between-text-xml-vs-application-xml-for-webservice-respons?ref=mythemeco&amp;t=pack</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4526273/what-does-enctype-multipart-form-data-mean\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/4526273/what-does-enctype-multipart-form-data-mean</a></li>\n</ul>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>當我們對 Server 發出 request 的時候<br>需要註明你 request 的 Content-Type<br>以下簡單介紹一下這些格式  </p>\n<h3 id=\"測試工具\"><a href=\"#測試工具\" class=\"headerlink\" title=\"測試工具\"></a>測試工具</h3><p><a href=\"https://www.getpostman.com/\" target=\"_blank\" rel=\"external\">PostMan</a>這套工具<br>可以模擬不同的格式資料發動 request 到你的 Server</p>\n<hr>\n<h2 id=\"Content-Type\"><a href=\"#Content-Type\" class=\"headerlink\" title=\"Content-Type\"></a>Content-Type</h2><h3 id=\"application-x-www-form-urlencoded\"><a href=\"#application-x-www-form-urlencoded\" class=\"headerlink\" title=\"application/x-www-form-urlencoded\"></a><code>application/x-www-form-urlencoded</code></h3><p>常用的Content-Type,簡單說就是KEY-VALUE的方式<br>如下, KEY firstname 的值是 marsen<br>lastname 是由使用者輸入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></div><div class=\"line\">  First name:<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"firstname\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"marsen\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  Last name:<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lastname\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>同時資料會作一次url encoded,<br>產生類似下列的資料<br>firstname=marsen&amp;lastname=lin&amp;key%5b1%5d=value%5b1%5d</p>\n<hr>\n<h3 id=\"multipart-form-data\"><a href=\"#multipart-form-data\" class=\"headerlink\" title=\"multipart/form-data\"></a><code>multipart/form-data</code></h3><p>PostMan中的選項 <code>binary</code> 其實就是包成這種格式<br>上傳檔案會使用這種Content-Type,<br>這通常表示你的html element包含有 <code>&lt;input type=&quot;file&quot;&gt;</code> </p>\n<hr>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>PostMan中的選項 <code>raw</code>,可以用字串組合成任意Content-Type,<br>參考<a href=\"http://www.freeformatter.com/mime-types-list.html\" target=\"_blank\" rel=\"external\">Content-Type Table</a>  </p>\n<ul>\n<li><code>application/json</code><br>目前主流的API會用輕巧的JSON作為傳遞資訊的媒介  </li>\n<li><code>text/xml</code>、<code>application/xml</code><br>早期標準的Web服務通常會透過xml作為交換資訊的媒介  </li>\n<li><code>text/plain</code><br>有些email或debug的情況會使用text/plain作為Content-Type,但是一般的Request情況不建議使用  </li>\n<li>更多請參考<a href=\"https://www.w3.org/TR/html5/forms.html#text/plain-encoding-algorithm\" target=\"_blank\" rel=\"external\">Spec</a>   </li>\n</ul>\n<hr>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://imququ.com/post/four-ways-to-post-data-in-http.html\" target=\"_blank\" rel=\"external\">https://imququ.com/post/four-ways-to-post-data-in-http.html</a></li>\n<li><a href=\"https://codeforgeek.com/2014/09/handle-get-post-request-express-4/\" target=\"_blank\" rel=\"external\">https://codeforgeek.com/2014/09/handle-get-post-request-express-4/</a></li>\n<li><a href=\"https://scotch.io/tutorials/use-expressjs-to-get-url-and-post-parameters\" target=\"_blank\" rel=\"external\">https://scotch.io/tutorials/use-expressjs-to-get-url-and-post-parameters</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4832357/whats-the-difference-between-text-xml-vs-application-xml-for-webservice-respons?ref=mythemeco&amp;t=pack\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/4832357/whats-the-difference-between-text-xml-vs-application-xml-for-webservice-respons?ref=mythemeco&amp;t=pack</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4526273/what-does-enctype-multipart-form-data-mean\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/4526273/what-does-enctype-multipart-form-data-mean</a></li>\n</ul>\n<p>(fin)</p>\n"},{"title":"[記錄]powershell 初體驗","date":"2016-10-21T05:27:53.000Z","_content":"## 需求\n1. 將指定的Log記錄,匯入資料庫,產生row data\n2. 將row data 轉換成為需要的報表資料\n3. 產生報表\n\n## 規劃\n1. powershell 讀取檔案\n2. powershell 連接資料庫\n3. powershell 執行SQL\n4. powershell 作BulkInsert\n5. powershell 寫入檔案\n\n![](/images/102216_095355_PM.jpg)\n\n**簡記要點**\n- ***powershell 可以直接取用 .Net Framework 或 COM 元件***\n- ***宣告變用要用`$`字號***\n- ***`#` 是註解***\n\n### 讀取檔案\n```powershell\n#用New-Object 建立.Net StreamrReader 物件\n$reader = New-Object System.io.streamreader(get-item $filePath)\n#使用`[]`建立靜態類別讀取檔案\n$file = [System.IO.File]::ReadAllLines($filePath)  \n#直接使用Get-Content讀取文檔\n$file = Get-Content  \"C:\\filepath\\file\"\n```\n### 連線資料庫與執行語法\n```powershell\n$connection = New-Object System.Data.SQLClient.SQLConnection\n$connection.ConnectionString = \"server='$server';database='$database';uid='$user'; pwd='$pwd';Integrated Security=False;\"\n$connection.Open()\n# do something \n$connection.Close()\n```\n### BulkInsert\n- 從檔案建立DataTable\n\n```powershell\n$table = New-Object System.Data.DataTable\n#建立欄位\n$col_title = New-Object system.Data.DataColumn \"Title\",([string])\n$table.Columns.Add($col_title);\n$col_content = New-Object system.Data.DataColumn \"Content\",([string])\n$table.Columns.Add($col_content);\n$col_author = New-Object system.Data.DataColumn \"Author\",([string])\n$table.Columns.Add($col_author);\n#建立資料\nforeach($file in $files){\n  $dr = $table.NewRow();\n  $dr[\"Title\"] = $file[\"title\"]\n  $dr[\"Content\"] = $file[\"content\"]\n  $dr[\"Author\"] = $file[\"author\"]\n}\n#寫入資料表\n$table.Rows.Add($dr);\n```\n\n- 透過BulkCopy將DataTable寫入資料庫 \n\n```powershell\n$connection.Open()\n$bulkCopy = New-Object (“Data.SqlClient.SqlBulkCopy”) -ArgumentList $connection\n$bulkCopy.DestinationTableName = \"tablename\"\n$bulkCopy.WriteToServer($datatable)\n$connection.Close()\n```\n\n### 進度條\n```powershell\nWrite-Progress -Activity \"BulkInsert\" -Status \"載入百分比: 100 %\" -PercentComplete 100;\n```\n\n### 產生報表\n\n```powershell\n$datatable | export-csv C:\\Reports\\20161026.csv -Encoding UTF8\n```\n\n\n\n## 參考\n1. https://msdn.microsoft.com/en-us/powershell\n2. https://msdn.microsoft.com/en-us/powershell/scripting/getting-started/cookbooks/using-static-classes-and-methods\n3. https://cmatskas.com/execute-sql-query-with-powershell/\n4. https://blogs.technet.microsoft.com/heyscriptingguy/\n\n(fin)","source":"_posts/1st_time_with_powershell.md","raw":"---\ntitle: \"[記錄]powershell 初體驗\"\ndate: 2016/10/21 13:27:53 \ntag:\n  - powershell\n  - Database\n  - MsSQL\n  - BulkInsert\n  - 記錄\n---\n## 需求\n1. 將指定的Log記錄,匯入資料庫,產生row data\n2. 將row data 轉換成為需要的報表資料\n3. 產生報表\n\n## 規劃\n1. powershell 讀取檔案\n2. powershell 連接資料庫\n3. powershell 執行SQL\n4. powershell 作BulkInsert\n5. powershell 寫入檔案\n\n![](/images/102216_095355_PM.jpg)\n\n**簡記要點**\n- ***powershell 可以直接取用 .Net Framework 或 COM 元件***\n- ***宣告變用要用`$`字號***\n- ***`#` 是註解***\n\n### 讀取檔案\n```powershell\n#用New-Object 建立.Net StreamrReader 物件\n$reader = New-Object System.io.streamreader(get-item $filePath)\n#使用`[]`建立靜態類別讀取檔案\n$file = [System.IO.File]::ReadAllLines($filePath)  \n#直接使用Get-Content讀取文檔\n$file = Get-Content  \"C:\\filepath\\file\"\n```\n### 連線資料庫與執行語法\n```powershell\n$connection = New-Object System.Data.SQLClient.SQLConnection\n$connection.ConnectionString = \"server='$server';database='$database';uid='$user'; pwd='$pwd';Integrated Security=False;\"\n$connection.Open()\n# do something \n$connection.Close()\n```\n### BulkInsert\n- 從檔案建立DataTable\n\n```powershell\n$table = New-Object System.Data.DataTable\n#建立欄位\n$col_title = New-Object system.Data.DataColumn \"Title\",([string])\n$table.Columns.Add($col_title);\n$col_content = New-Object system.Data.DataColumn \"Content\",([string])\n$table.Columns.Add($col_content);\n$col_author = New-Object system.Data.DataColumn \"Author\",([string])\n$table.Columns.Add($col_author);\n#建立資料\nforeach($file in $files){\n  $dr = $table.NewRow();\n  $dr[\"Title\"] = $file[\"title\"]\n  $dr[\"Content\"] = $file[\"content\"]\n  $dr[\"Author\"] = $file[\"author\"]\n}\n#寫入資料表\n$table.Rows.Add($dr);\n```\n\n- 透過BulkCopy將DataTable寫入資料庫 \n\n```powershell\n$connection.Open()\n$bulkCopy = New-Object (“Data.SqlClient.SqlBulkCopy”) -ArgumentList $connection\n$bulkCopy.DestinationTableName = \"tablename\"\n$bulkCopy.WriteToServer($datatable)\n$connection.Close()\n```\n\n### 進度條\n```powershell\nWrite-Progress -Activity \"BulkInsert\" -Status \"載入百分比: 100 %\" -PercentComplete 100;\n```\n\n### 產生報表\n\n```powershell\n$datatable | export-csv C:\\Reports\\20161026.csv -Encoding UTF8\n```\n\n\n\n## 參考\n1. https://msdn.microsoft.com/en-us/powershell\n2. https://msdn.microsoft.com/en-us/powershell/scripting/getting-started/cookbooks/using-static-classes-and-methods\n3. https://cmatskas.com/execute-sql-query-with-powershell/\n4. https://blogs.technet.microsoft.com/heyscriptingguy/\n\n(fin)","slug":"1st_time_with_powershell","published":1,"updated":"2016-11-21T09:22:28.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3o5j0006lgopxzb5kr5y","content":"<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><ol>\n<li>將指定的Log記錄,匯入資料庫,產生row data</li>\n<li>將row data 轉換成為需要的報表資料</li>\n<li>產生報表</li>\n</ol>\n<h2 id=\"規劃\"><a href=\"#規劃\" class=\"headerlink\" title=\"規劃\"></a>規劃</h2><ol>\n<li>powershell 讀取檔案</li>\n<li>powershell 連接資料庫</li>\n<li>powershell 執行SQL</li>\n<li>powershell 作BulkInsert</li>\n<li>powershell 寫入檔案</li>\n</ol>\n<p><img src=\"/images/102216_095355_PM.jpg\" alt=\"\"></p>\n<p><strong>簡記要點</strong></p>\n<ul>\n<li><strong><em>powershell 可以直接取用 .Net Framework 或 COM 元件</em></strong></li>\n<li><strong><em>宣告變用要用<code>$</code>字號</em></strong></li>\n<li><strong><em><code>#</code> 是註解</em></strong></li>\n</ul>\n<h3 id=\"讀取檔案\"><a href=\"#讀取檔案\" class=\"headerlink\" title=\"讀取檔案\"></a>讀取檔案</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#用New-Object 建立.Net StreamrReader 物件</span></div><div class=\"line\"><span class=\"variable\">$reader</span> = <span class=\"built_in\">New-Object</span> System.io.streamreader(<span class=\"built_in\">get-item</span> <span class=\"variable\">$filePath</span>)</div><div class=\"line\"><span class=\"comment\">#使用`[]`建立靜態類別讀取檔案</span></div><div class=\"line\"><span class=\"variable\">$file</span> = [System.IO.File]::ReadAllLines(<span class=\"variable\">$filePath</span>)  </div><div class=\"line\"><span class=\"comment\">#直接使用Get-Content讀取文檔</span></div><div class=\"line\"><span class=\"variable\">$file</span> = <span class=\"built_in\">Get-Content</span>  <span class=\"string\">\"C:\\filepath\\file\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"連線資料庫與執行語法\"><a href=\"#連線資料庫與執行語法\" class=\"headerlink\" title=\"連線資料庫與執行語法\"></a>連線資料庫與執行語法</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$connection</span> = <span class=\"built_in\">New-Object</span> System.Data.SQLClient.SQLConnection</div><div class=\"line\"><span class=\"variable\">$connection</span>.ConnectionString = <span class=\"string\">\"server='<span class=\"variable\">$server</span>';database='<span class=\"variable\">$database</span>';uid='<span class=\"variable\">$user</span>'; pwd='<span class=\"variable\">$pwd</span>';Integrated Security=False;\"</span></div><div class=\"line\"><span class=\"variable\">$connection</span>.Open()</div><div class=\"line\"><span class=\"comment\"># do something </span></div><div class=\"line\"><span class=\"variable\">$connection</span>.Close()</div></pre></td></tr></table></figure>\n<h3 id=\"BulkInsert\"><a href=\"#BulkInsert\" class=\"headerlink\" title=\"BulkInsert\"></a>BulkInsert</h3><ul>\n<li>從檔案建立DataTable</li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$table</span> = <span class=\"built_in\">New-Object</span> System.Data.DataTable</div><div class=\"line\"><span class=\"comment\">#建立欄位</span></div><div class=\"line\"><span class=\"variable\">$col_title</span> = <span class=\"built_in\">New-Object</span> system.Data.DataColumn <span class=\"string\">\"Title\"</span>,([string])</div><div class=\"line\"><span class=\"variable\">$table</span>.Columns.Add(<span class=\"variable\">$col_title</span>);</div><div class=\"line\"><span class=\"variable\">$col_content</span> = <span class=\"built_in\">New-Object</span> system.Data.DataColumn <span class=\"string\">\"Content\"</span>,([string])</div><div class=\"line\"><span class=\"variable\">$table</span>.Columns.Add(<span class=\"variable\">$col_content</span>);</div><div class=\"line\"><span class=\"variable\">$col_author</span> = <span class=\"built_in\">New-Object</span> system.Data.DataColumn <span class=\"string\">\"Author\"</span>,([string])</div><div class=\"line\"><span class=\"variable\">$table</span>.Columns.Add(<span class=\"variable\">$col_author</span>);</div><div class=\"line\"><span class=\"comment\">#建立資料</span></div><div class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"variable\">$file</span> <span class=\"keyword\">in</span> <span class=\"variable\">$files</span>)&#123;</div><div class=\"line\">  <span class=\"variable\">$dr</span> = <span class=\"variable\">$table</span>.NewRow();</div><div class=\"line\">  <span class=\"variable\">$dr</span>[<span class=\"string\">\"Title\"</span>] = <span class=\"variable\">$file</span>[<span class=\"string\">\"title\"</span>]</div><div class=\"line\">  <span class=\"variable\">$dr</span>[<span class=\"string\">\"Content\"</span>] = <span class=\"variable\">$file</span>[<span class=\"string\">\"content\"</span>]</div><div class=\"line\">  <span class=\"variable\">$dr</span>[<span class=\"string\">\"Author\"</span>] = <span class=\"variable\">$file</span>[<span class=\"string\">\"author\"</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">#寫入資料表</span></div><div class=\"line\"><span class=\"variable\">$table</span>.Rows.Add(<span class=\"variable\">$dr</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>透過BulkCopy將DataTable寫入資料庫 </li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$connection</span>.Open()</div><div class=\"line\"><span class=\"variable\">$bulkCopy</span> = <span class=\"built_in\">New-Object</span> (“Data.SqlClient.SqlBulkCopy”) -ArgumentList <span class=\"variable\">$connection</span></div><div class=\"line\"><span class=\"variable\">$bulkCopy</span>.DestinationTableName = <span class=\"string\">\"tablename\"</span></div><div class=\"line\"><span class=\"variable\">$bulkCopy</span>.WriteToServer(<span class=\"variable\">$datatable</span>)</div><div class=\"line\"><span class=\"variable\">$connection</span>.Close()</div></pre></td></tr></table></figure>\n<h3 id=\"進度條\"><a href=\"#進度條\" class=\"headerlink\" title=\"進度條\"></a>進度條</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Write-Progress</span> -Activity <span class=\"string\">\"BulkInsert\"</span> -Status <span class=\"string\">\"載入百分比: 100 %\"</span> -PercentComplete <span class=\"number\">100</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"產生報表\"><a href=\"#產生報表\" class=\"headerlink\" title=\"產生報表\"></a>產生報表</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$datatable</span> | <span class=\"built_in\">export-csv</span> C:\\Reports\\<span class=\"number\">20161026</span>.csv -Encoding UTF8</div></pre></td></tr></table></figure>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ol>\n<li><a href=\"https://msdn.microsoft.com/en-us/powershell\" target=\"_blank\" rel=\"external\">https://msdn.microsoft.com/en-us/powershell</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/powershell/scripting/getting-started/cookbooks/using-static-classes-and-methods\" target=\"_blank\" rel=\"external\">https://msdn.microsoft.com/en-us/powershell/scripting/getting-started/cookbooks/using-static-classes-and-methods</a></li>\n<li><a href=\"https://cmatskas.com/execute-sql-query-with-powershell/\" target=\"_blank\" rel=\"external\">https://cmatskas.com/execute-sql-query-with-powershell/</a></li>\n<li><a href=\"https://blogs.technet.microsoft.com/heyscriptingguy/\" target=\"_blank\" rel=\"external\">https://blogs.technet.microsoft.com/heyscriptingguy/</a></li>\n</ol>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><ol>\n<li>將指定的Log記錄,匯入資料庫,產生row data</li>\n<li>將row data 轉換成為需要的報表資料</li>\n<li>產生報表</li>\n</ol>\n<h2 id=\"規劃\"><a href=\"#規劃\" class=\"headerlink\" title=\"規劃\"></a>規劃</h2><ol>\n<li>powershell 讀取檔案</li>\n<li>powershell 連接資料庫</li>\n<li>powershell 執行SQL</li>\n<li>powershell 作BulkInsert</li>\n<li>powershell 寫入檔案</li>\n</ol>\n<p><img src=\"/images/102216_095355_PM.jpg\" alt=\"\"></p>\n<p><strong>簡記要點</strong></p>\n<ul>\n<li><strong><em>powershell 可以直接取用 .Net Framework 或 COM 元件</em></strong></li>\n<li><strong><em>宣告變用要用<code>$</code>字號</em></strong></li>\n<li><strong><em><code>#</code> 是註解</em></strong></li>\n</ul>\n<h3 id=\"讀取檔案\"><a href=\"#讀取檔案\" class=\"headerlink\" title=\"讀取檔案\"></a>讀取檔案</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#用New-Object 建立.Net StreamrReader 物件</span></div><div class=\"line\"><span class=\"variable\">$reader</span> = <span class=\"built_in\">New-Object</span> System.io.streamreader(<span class=\"built_in\">get-item</span> <span class=\"variable\">$filePath</span>)</div><div class=\"line\"><span class=\"comment\">#使用`[]`建立靜態類別讀取檔案</span></div><div class=\"line\"><span class=\"variable\">$file</span> = [System.IO.File]::ReadAllLines(<span class=\"variable\">$filePath</span>)  </div><div class=\"line\"><span class=\"comment\">#直接使用Get-Content讀取文檔</span></div><div class=\"line\"><span class=\"variable\">$file</span> = <span class=\"built_in\">Get-Content</span>  <span class=\"string\">\"C:\\filepath\\file\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"連線資料庫與執行語法\"><a href=\"#連線資料庫與執行語法\" class=\"headerlink\" title=\"連線資料庫與執行語法\"></a>連線資料庫與執行語法</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$connection</span> = <span class=\"built_in\">New-Object</span> System.Data.SQLClient.SQLConnection</div><div class=\"line\"><span class=\"variable\">$connection</span>.ConnectionString = <span class=\"string\">\"server='<span class=\"variable\">$server</span>';database='<span class=\"variable\">$database</span>';uid='<span class=\"variable\">$user</span>'; pwd='<span class=\"variable\">$pwd</span>';Integrated Security=False;\"</span></div><div class=\"line\"><span class=\"variable\">$connection</span>.Open()</div><div class=\"line\"><span class=\"comment\"># do something </span></div><div class=\"line\"><span class=\"variable\">$connection</span>.Close()</div></pre></td></tr></table></figure>\n<h3 id=\"BulkInsert\"><a href=\"#BulkInsert\" class=\"headerlink\" title=\"BulkInsert\"></a>BulkInsert</h3><ul>\n<li>從檔案建立DataTable</li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$table</span> = <span class=\"built_in\">New-Object</span> System.Data.DataTable</div><div class=\"line\"><span class=\"comment\">#建立欄位</span></div><div class=\"line\"><span class=\"variable\">$col_title</span> = <span class=\"built_in\">New-Object</span> system.Data.DataColumn <span class=\"string\">\"Title\"</span>,([string])</div><div class=\"line\"><span class=\"variable\">$table</span>.Columns.Add(<span class=\"variable\">$col_title</span>);</div><div class=\"line\"><span class=\"variable\">$col_content</span> = <span class=\"built_in\">New-Object</span> system.Data.DataColumn <span class=\"string\">\"Content\"</span>,([string])</div><div class=\"line\"><span class=\"variable\">$table</span>.Columns.Add(<span class=\"variable\">$col_content</span>);</div><div class=\"line\"><span class=\"variable\">$col_author</span> = <span class=\"built_in\">New-Object</span> system.Data.DataColumn <span class=\"string\">\"Author\"</span>,([string])</div><div class=\"line\"><span class=\"variable\">$table</span>.Columns.Add(<span class=\"variable\">$col_author</span>);</div><div class=\"line\"><span class=\"comment\">#建立資料</span></div><div class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"variable\">$file</span> <span class=\"keyword\">in</span> <span class=\"variable\">$files</span>)&#123;</div><div class=\"line\">  <span class=\"variable\">$dr</span> = <span class=\"variable\">$table</span>.NewRow();</div><div class=\"line\">  <span class=\"variable\">$dr</span>[<span class=\"string\">\"Title\"</span>] = <span class=\"variable\">$file</span>[<span class=\"string\">\"title\"</span>]</div><div class=\"line\">  <span class=\"variable\">$dr</span>[<span class=\"string\">\"Content\"</span>] = <span class=\"variable\">$file</span>[<span class=\"string\">\"content\"</span>]</div><div class=\"line\">  <span class=\"variable\">$dr</span>[<span class=\"string\">\"Author\"</span>] = <span class=\"variable\">$file</span>[<span class=\"string\">\"author\"</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">#寫入資料表</span></div><div class=\"line\"><span class=\"variable\">$table</span>.Rows.Add(<span class=\"variable\">$dr</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>透過BulkCopy將DataTable寫入資料庫 </li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$connection</span>.Open()</div><div class=\"line\"><span class=\"variable\">$bulkCopy</span> = <span class=\"built_in\">New-Object</span> (“Data.SqlClient.SqlBulkCopy”) -ArgumentList <span class=\"variable\">$connection</span></div><div class=\"line\"><span class=\"variable\">$bulkCopy</span>.DestinationTableName = <span class=\"string\">\"tablename\"</span></div><div class=\"line\"><span class=\"variable\">$bulkCopy</span>.WriteToServer(<span class=\"variable\">$datatable</span>)</div><div class=\"line\"><span class=\"variable\">$connection</span>.Close()</div></pre></td></tr></table></figure>\n<h3 id=\"進度條\"><a href=\"#進度條\" class=\"headerlink\" title=\"進度條\"></a>進度條</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Write-Progress</span> -Activity <span class=\"string\">\"BulkInsert\"</span> -Status <span class=\"string\">\"載入百分比: 100 %\"</span> -PercentComplete <span class=\"number\">100</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"產生報表\"><a href=\"#產生報表\" class=\"headerlink\" title=\"產生報表\"></a>產生報表</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$datatable</span> | <span class=\"built_in\">export-csv</span> C:\\Reports\\<span class=\"number\">20161026</span>.csv -Encoding UTF8</div></pre></td></tr></table></figure>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ol>\n<li><a href=\"https://msdn.microsoft.com/en-us/powershell\" target=\"_blank\" rel=\"external\">https://msdn.microsoft.com/en-us/powershell</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/powershell/scripting/getting-started/cookbooks/using-static-classes-and-methods\" target=\"_blank\" rel=\"external\">https://msdn.microsoft.com/en-us/powershell/scripting/getting-started/cookbooks/using-static-classes-and-methods</a></li>\n<li><a href=\"https://cmatskas.com/execute-sql-query-with-powershell/\" target=\"_blank\" rel=\"external\">https://cmatskas.com/execute-sql-query-with-powershell/</a></li>\n<li><a href=\"https://blogs.technet.microsoft.com/heyscriptingguy/\" target=\"_blank\" rel=\"external\">https://blogs.technet.microsoft.com/heyscriptingguy/</a></li>\n</ol>\n<p>(fin)</p>\n"},{"title":"ASP.NET Thread Pool 監控","date":"2017-01-28T12:46:49.000Z","_content":"\n## 前情提要\n\n[上一次](/2016/11/21/aspdotnet_threadpool_and_redis/)說明了 .NET Thread Pool 的機制如何影響 Redis,  \n.NET Thread Pool 的機制會貫穿任何與它互動的系統或服務,  \n所以這篇會簡單描述如何對 .NET Thread Pool [建立監控](https://msdn.microsoft.com/zh-tw/library/ff650682.aspx)。\n\n## 步驟\n1. 建立監控記數器\n2. 在系統寫入監控數值\n3. 開啟效能計數器\n\n## 建立監控記數器\n\n|記數器|說明|\n|---|---|\n|Available Worker Threads|目前在 thread-pool 可以使用的 worker threads |\n|Available IO Threads|目前在 thread-pool 可以使用的 I/O threads |\n|Max Worker Threads| 最大可以建立的 worker threads 數量 |\n|Max IO Threads| 最大可以建立的 I/O threads 數量 |\n\n### 建立一個 Console 應用程式\n\n``` csharp\nusing System;\nusing System.Diagnostics;\n\nclass MyAspNetThreadCounters\n{\n  [STAThread]\n  static void Main(string[] args)\n  {\n    CreateCounters();\n    Console.WriteLine(\"MyAspNetThreadCounters performance counter category \" +\n                      \"is created. [Press Enter]\");\n    Console.ReadLine();\n  }\n\n  public static void CreateCounters()\n  {\n    CounterCreationDataCollection col =  \n      new CounterCreationDataCollection();\n\n    // Create custom counter objects\n    CounterCreationData counter1 = new CounterCreationData();\n    counter1.CounterName = \"Available Worker Threads\";\n    counter1.CounterHelp = \"The difference between the maximum number \" + \n                           \"of thread pool worker threads and the \" +\n                           \"number currently active.\";\n    counter1.CounterType = PerformanceCounterType.NumberOfItems32;\n\n    CounterCreationData counter2 = new CounterCreationData();\n    counter2.CounterName = \"Available IO Threads\";\n    counter2.CounterHelp = \"The difference between the maximum number of \" + \n                           \"thread pool IO threads and the number \"+ \n                           \"currently active.\";\n    counter2.CounterType = PerformanceCounterType.NumberOfItems32;\n\n    CounterCreationData counter3 = new CounterCreationData();\n    counter3.CounterName = \"Max Worker Threads\";\n    counter3.CounterHelp = \"The number of requests to the thread pool \"+ \n                           \"that can be active concurrently. All \"+  \n                           \"requests above that number remain queued until \" +\n                           \"thread pool worker threads become available.\";\n    counter3.CounterType = PerformanceCounterType.NumberOfItems32;\n\n    CounterCreationData counter4 = new CounterCreationData();\n    counter4.CounterName = \"Max IO Threads\";\n    counter4.CounterHelp = \"The number of requests to the thread pool \" + \n                           \"that can be active concurrently. All \"+  \n                           \"requests above that number remain queued until \" +\n                           \"thread pool IO threads become available.\";\n    counter4.CounterType = PerformanceCounterType.NumberOfItems32;\n\n    // Add custom counter objects to CounterCreationDataCollection.\n    col.Add(counter1);\n    col.Add(counter2);\n    col.Add(counter3);\n    col.Add(counter4);\n    // delete the category if it already exists\n    if(PerformanceCounterCategory.Exists(\"MyAspNetThreadCounters\"))\n    {\n      PerformanceCounterCategory.Delete(\"MyAspNetThreadCounters\");\n    }\n    // bind the counters to the PerformanceCounterCategory\n    PerformanceCounterCategory category = \n            PerformanceCounterCategory.Create(\"MyAspNetThreadCounters\", \n                                              \"\", col);\n  }\n}\n```\n\n編譯後並執行即可,  \n執行 `regedit` 開啟登錄編輯程式,  \n輸入機碼 `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services`  \n將可以找到剛剛建立的 `MyAspNetThreadCounters` 記數器\n\n## 在系統寫入監控數值\n\n在站台的 `Global.asax` 加入以下的程式碼\n\n```csharp\npublic bool MonitorThreadPoolEnabled = true;\n\nprotected void Application_Start(Object sender, EventArgs e)\n{\n  Thread t = new Thread(new ThreadStart(RefreshCounters));\n  t.Start();\n}\n\npublic void RefreshCounters()\n{\n  while (MonitorThreadPoolEnabled)\n  {\n    ASPNETThreadInfo t = GetThreadInfo();\n    ShowPerfCounters(t);\n    System.Threading.Thread.Sleep(500);\n  }\n}\n\nprotected void Application_End(Object sender, EventArgs e)\n{\n  MonitorThreadPoolEnabled = false;\n}\n\npublic struct ASPNETThreadInfo\n{\n  public int MaxWorkerThreads;\n  public int MaxIOThreads;\n  public int MinFreeThreads;\n  public int MinLocalRequestFreeThreads;\n  public int AvailableWorkerThreads;\n  public int AvailableIOThreads;\n\n  public bool Equals(ASPNETThreadInfo other)\n  {\n    return (\n      MaxWorkerThreads == other.MaxWorkerThreads &&\n      MaxIOThreads == other.MaxIOThreads &&\n      MinFreeThreads == other.MinFreeThreads &&\n      MinLocalRequestFreeThreads == other.MinLocalRequestFreeThreads &&\n      AvailableWorkerThreads == other.AvailableWorkerThreads &&\n      AvailableIOThreads == other.AvailableIOThreads\n    );\n  }\n}\n\npublic ASPNETThreadInfo GetThreadInfo()\n{\n  // use ThreadPool to get the current status\n  int availableWorker, availableIO;\n  int maxWorker, maxIO;\n\n  ThreadPool.GetAvailableThreads( out availableWorker, out availableIO);\n  ThreadPool.GetMaxThreads(out maxWorker, out maxIO);\n\n  ASPNETThreadInfo threadInfo;\n  threadInfo.AvailableWorkerThreads = (Int16)availableWorker;\n  threadInfo.AvailableIOThreads = (Int16)availableIO;\n  threadInfo.MaxWorkerThreads = (Int16)maxWorker;\n  threadInfo.MaxIOThreads = (Int16)maxIO;\n // hard code for now; could get this from  machine.config\n  threadInfo.MinFreeThreads = 8;\n  threadInfo.MinLocalRequestFreeThreads = 4;\n  return threadInfo;\n}\n\npublic void ShowPerfCounters(ASPNETThreadInfo t)\n{\n\n  // get an instance of our Available Worker Threads counter\n  PerformanceCounter counter1 = new PerformanceCounter();\n  counter1.CategoryName = \"MyAspNetThreadCounters\";\n  counter1.CounterName = \"Available Worker Threads\";\n  counter1.ReadOnly = false;\n\n  // set the value of the counter\n  counter1.RawValue = t.AvailableWorkerThreads;\n  counter1.Close();\n\n  // repeat for other counters\n\n  PerformanceCounter counter2 = new PerformanceCounter();\n  counter2.CategoryName = \"MyAspNetThreadCounters\";\n  counter2.CounterName = \"Available IO Threads\";\n  counter2.ReadOnly = false;\n  counter2.RawValue = t.AvailableIOThreads;\n  counter2.Close();\n\n  PerformanceCounter counter3 = new PerformanceCounter();\n  counter3.CategoryName = \"MyAspNetThreadCounters\";\n  counter3.CounterName = \"Max Worker Threads\";\n  counter3.ReadOnly = false;\n  counter3.RawValue = t.MaxWorkerThreads;\n  counter3.Close();\n\n  PerformanceCounter counter4 = new PerformanceCounter();\n  counter4.CategoryName = \"MyAspNetThreadCounters\";\n  counter4.CounterName = \"Max IO Threads\";\n  counter4.ReadOnly = false;\n  counter4.RawValue = t.MaxIOThreads;\n  counter4.Close();\n}\n```\n\n當你的站台重新啟動後,  \n就會定期將 Worker Thread 與  I/O Threads 的監控數值傳遞給系統。  \n\n### 開啟效能計數器\n\n1. 執行 `perfmon.exe` 開啟效能計數器\n2. 新增效能計數器(點選綠色加符號)\n3. 選取前面所建立監控記數器就能看到當前 ThreadPool 的使用狀況。\n![](https://i.imgur.com/HhlbNH2.jpg)\n\n(fin)","source":"_posts/aspdotnet_threadpool_monitor.md","raw":"---\ntitle: ASP.NET Thread Pool 監控\ndate: 2017/01/28 20:46:49\ntag:\n  - .Net Framework\n  - Thread\n  - ASP.Net\n---\n\n## 前情提要\n\n[上一次](/2016/11/21/aspdotnet_threadpool_and_redis/)說明了 .NET Thread Pool 的機制如何影響 Redis,  \n.NET Thread Pool 的機制會貫穿任何與它互動的系統或服務,  \n所以這篇會簡單描述如何對 .NET Thread Pool [建立監控](https://msdn.microsoft.com/zh-tw/library/ff650682.aspx)。\n\n## 步驟\n1. 建立監控記數器\n2. 在系統寫入監控數值\n3. 開啟效能計數器\n\n## 建立監控記數器\n\n|記數器|說明|\n|---|---|\n|Available Worker Threads|目前在 thread-pool 可以使用的 worker threads |\n|Available IO Threads|目前在 thread-pool 可以使用的 I/O threads |\n|Max Worker Threads| 最大可以建立的 worker threads 數量 |\n|Max IO Threads| 最大可以建立的 I/O threads 數量 |\n\n### 建立一個 Console 應用程式\n\n``` csharp\nusing System;\nusing System.Diagnostics;\n\nclass MyAspNetThreadCounters\n{\n  [STAThread]\n  static void Main(string[] args)\n  {\n    CreateCounters();\n    Console.WriteLine(\"MyAspNetThreadCounters performance counter category \" +\n                      \"is created. [Press Enter]\");\n    Console.ReadLine();\n  }\n\n  public static void CreateCounters()\n  {\n    CounterCreationDataCollection col =  \n      new CounterCreationDataCollection();\n\n    // Create custom counter objects\n    CounterCreationData counter1 = new CounterCreationData();\n    counter1.CounterName = \"Available Worker Threads\";\n    counter1.CounterHelp = \"The difference between the maximum number \" + \n                           \"of thread pool worker threads and the \" +\n                           \"number currently active.\";\n    counter1.CounterType = PerformanceCounterType.NumberOfItems32;\n\n    CounterCreationData counter2 = new CounterCreationData();\n    counter2.CounterName = \"Available IO Threads\";\n    counter2.CounterHelp = \"The difference between the maximum number of \" + \n                           \"thread pool IO threads and the number \"+ \n                           \"currently active.\";\n    counter2.CounterType = PerformanceCounterType.NumberOfItems32;\n\n    CounterCreationData counter3 = new CounterCreationData();\n    counter3.CounterName = \"Max Worker Threads\";\n    counter3.CounterHelp = \"The number of requests to the thread pool \"+ \n                           \"that can be active concurrently. All \"+  \n                           \"requests above that number remain queued until \" +\n                           \"thread pool worker threads become available.\";\n    counter3.CounterType = PerformanceCounterType.NumberOfItems32;\n\n    CounterCreationData counter4 = new CounterCreationData();\n    counter4.CounterName = \"Max IO Threads\";\n    counter4.CounterHelp = \"The number of requests to the thread pool \" + \n                           \"that can be active concurrently. All \"+  \n                           \"requests above that number remain queued until \" +\n                           \"thread pool IO threads become available.\";\n    counter4.CounterType = PerformanceCounterType.NumberOfItems32;\n\n    // Add custom counter objects to CounterCreationDataCollection.\n    col.Add(counter1);\n    col.Add(counter2);\n    col.Add(counter3);\n    col.Add(counter4);\n    // delete the category if it already exists\n    if(PerformanceCounterCategory.Exists(\"MyAspNetThreadCounters\"))\n    {\n      PerformanceCounterCategory.Delete(\"MyAspNetThreadCounters\");\n    }\n    // bind the counters to the PerformanceCounterCategory\n    PerformanceCounterCategory category = \n            PerformanceCounterCategory.Create(\"MyAspNetThreadCounters\", \n                                              \"\", col);\n  }\n}\n```\n\n編譯後並執行即可,  \n執行 `regedit` 開啟登錄編輯程式,  \n輸入機碼 `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services`  \n將可以找到剛剛建立的 `MyAspNetThreadCounters` 記數器\n\n## 在系統寫入監控數值\n\n在站台的 `Global.asax` 加入以下的程式碼\n\n```csharp\npublic bool MonitorThreadPoolEnabled = true;\n\nprotected void Application_Start(Object sender, EventArgs e)\n{\n  Thread t = new Thread(new ThreadStart(RefreshCounters));\n  t.Start();\n}\n\npublic void RefreshCounters()\n{\n  while (MonitorThreadPoolEnabled)\n  {\n    ASPNETThreadInfo t = GetThreadInfo();\n    ShowPerfCounters(t);\n    System.Threading.Thread.Sleep(500);\n  }\n}\n\nprotected void Application_End(Object sender, EventArgs e)\n{\n  MonitorThreadPoolEnabled = false;\n}\n\npublic struct ASPNETThreadInfo\n{\n  public int MaxWorkerThreads;\n  public int MaxIOThreads;\n  public int MinFreeThreads;\n  public int MinLocalRequestFreeThreads;\n  public int AvailableWorkerThreads;\n  public int AvailableIOThreads;\n\n  public bool Equals(ASPNETThreadInfo other)\n  {\n    return (\n      MaxWorkerThreads == other.MaxWorkerThreads &&\n      MaxIOThreads == other.MaxIOThreads &&\n      MinFreeThreads == other.MinFreeThreads &&\n      MinLocalRequestFreeThreads == other.MinLocalRequestFreeThreads &&\n      AvailableWorkerThreads == other.AvailableWorkerThreads &&\n      AvailableIOThreads == other.AvailableIOThreads\n    );\n  }\n}\n\npublic ASPNETThreadInfo GetThreadInfo()\n{\n  // use ThreadPool to get the current status\n  int availableWorker, availableIO;\n  int maxWorker, maxIO;\n\n  ThreadPool.GetAvailableThreads( out availableWorker, out availableIO);\n  ThreadPool.GetMaxThreads(out maxWorker, out maxIO);\n\n  ASPNETThreadInfo threadInfo;\n  threadInfo.AvailableWorkerThreads = (Int16)availableWorker;\n  threadInfo.AvailableIOThreads = (Int16)availableIO;\n  threadInfo.MaxWorkerThreads = (Int16)maxWorker;\n  threadInfo.MaxIOThreads = (Int16)maxIO;\n // hard code for now; could get this from  machine.config\n  threadInfo.MinFreeThreads = 8;\n  threadInfo.MinLocalRequestFreeThreads = 4;\n  return threadInfo;\n}\n\npublic void ShowPerfCounters(ASPNETThreadInfo t)\n{\n\n  // get an instance of our Available Worker Threads counter\n  PerformanceCounter counter1 = new PerformanceCounter();\n  counter1.CategoryName = \"MyAspNetThreadCounters\";\n  counter1.CounterName = \"Available Worker Threads\";\n  counter1.ReadOnly = false;\n\n  // set the value of the counter\n  counter1.RawValue = t.AvailableWorkerThreads;\n  counter1.Close();\n\n  // repeat for other counters\n\n  PerformanceCounter counter2 = new PerformanceCounter();\n  counter2.CategoryName = \"MyAspNetThreadCounters\";\n  counter2.CounterName = \"Available IO Threads\";\n  counter2.ReadOnly = false;\n  counter2.RawValue = t.AvailableIOThreads;\n  counter2.Close();\n\n  PerformanceCounter counter3 = new PerformanceCounter();\n  counter3.CategoryName = \"MyAspNetThreadCounters\";\n  counter3.CounterName = \"Max Worker Threads\";\n  counter3.ReadOnly = false;\n  counter3.RawValue = t.MaxWorkerThreads;\n  counter3.Close();\n\n  PerformanceCounter counter4 = new PerformanceCounter();\n  counter4.CategoryName = \"MyAspNetThreadCounters\";\n  counter4.CounterName = \"Max IO Threads\";\n  counter4.ReadOnly = false;\n  counter4.RawValue = t.MaxIOThreads;\n  counter4.Close();\n}\n```\n\n當你的站台重新啟動後,  \n就會定期將 Worker Thread 與  I/O Threads 的監控數值傳遞給系統。  \n\n### 開啟效能計數器\n\n1. 執行 `perfmon.exe` 開啟效能計數器\n2. 新增效能計數器(點選綠色加符號)\n3. 選取前面所建立監控記數器就能看到當前 ThreadPool 的使用狀況。\n![](https://i.imgur.com/HhlbNH2.jpg)\n\n(fin)","slug":"aspdotnet_threadpool_monitor","published":1,"updated":"2017-02-08T15:45:50.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3o5p0007lgopt2npc94p","content":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><p><a href=\"/2016/11/21/aspdotnet_threadpool_and_redis/\">上一次</a>說明了 .NET Thread Pool 的機制如何影響 Redis,<br>.NET Thread Pool 的機制會貫穿任何與它互動的系統或服務,<br>所以這篇會簡單描述如何對 .NET Thread Pool <a href=\"https://msdn.microsoft.com/zh-tw/library/ff650682.aspx\" target=\"_blank\" rel=\"external\">建立監控</a>。</p>\n<h2 id=\"步驟\"><a href=\"#步驟\" class=\"headerlink\" title=\"步驟\"></a>步驟</h2><ol>\n<li>建立監控記數器</li>\n<li>在系統寫入監控數值</li>\n<li>開啟效能計數器</li>\n</ol>\n<h2 id=\"建立監控記數器\"><a href=\"#建立監控記數器\" class=\"headerlink\" title=\"建立監控記數器\"></a>建立監控記數器</h2><table>\n<thead>\n<tr>\n<th>記數器</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Available Worker Threads</td>\n<td>目前在 thread-pool 可以使用的 worker threads</td>\n</tr>\n<tr>\n<td>Available IO Threads</td>\n<td>目前在 thread-pool 可以使用的 I/O threads</td>\n</tr>\n<tr>\n<td>Max Worker Threads</td>\n<td>最大可以建立的 worker threads 數量</td>\n</tr>\n<tr>\n<td>Max IO Threads</td>\n<td>最大可以建立的 I/O threads 數量</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"建立一個-Console-應用程式\"><a href=\"#建立一個-Console-應用程式\" class=\"headerlink\" title=\"建立一個 Console 應用程式\"></a>建立一個 Console 應用程式</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> System;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Diagnostics;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">MyAspNetThreadCounters</span></div><div class=\"line\">&#123;</div><div class=\"line\">  [STAThread]</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    CreateCounters();</div><div class=\"line\">    Console.WriteLine(<span class=\"string\">\"MyAspNetThreadCounters performance counter category \"</span> +</div><div class=\"line\">                      <span class=\"string\">\"is created. [Press Enter]\"</span>);</div><div class=\"line\">    Console.ReadLine();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateCounters</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    CounterCreationDataCollection col =  </div><div class=\"line\">      <span class=\"keyword\">new</span> CounterCreationDataCollection();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Create custom counter objects</span></div><div class=\"line\">    CounterCreationData counter1 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">    counter1.CounterName = <span class=\"string\">\"Available Worker Threads\"</span>;</div><div class=\"line\">    counter1.CounterHelp = <span class=\"string\">\"The difference between the maximum number \"</span> + </div><div class=\"line\">                           <span class=\"string\">\"of thread pool worker threads and the \"</span> +</div><div class=\"line\">                           <span class=\"string\">\"number currently active.\"</span>;</div><div class=\"line\">    counter1.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">    CounterCreationData counter2 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">    counter2.CounterName = <span class=\"string\">\"Available IO Threads\"</span>;</div><div class=\"line\">    counter2.CounterHelp = <span class=\"string\">\"The difference between the maximum number of \"</span> + </div><div class=\"line\">                           <span class=\"string\">\"thread pool IO threads and the number \"</span>+ </div><div class=\"line\">                           <span class=\"string\">\"currently active.\"</span>;</div><div class=\"line\">    counter2.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">    CounterCreationData counter3 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">    counter3.CounterName = <span class=\"string\">\"Max Worker Threads\"</span>;</div><div class=\"line\">    counter3.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span>+ </div><div class=\"line\">                           <span class=\"string\">\"that can be active concurrently. All \"</span>+  </div><div class=\"line\">                           <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                           <span class=\"string\">\"thread pool worker threads become available.\"</span>;</div><div class=\"line\">    counter3.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">    CounterCreationData counter4 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">    counter4.CounterName = <span class=\"string\">\"Max IO Threads\"</span>;</div><div class=\"line\">    counter4.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> + </div><div class=\"line\">                           <span class=\"string\">\"that can be active concurrently. All \"</span>+  </div><div class=\"line\">                           <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                           <span class=\"string\">\"thread pool IO threads become available.\"</span>;</div><div class=\"line\">    counter4.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Add custom counter objects to CounterCreationDataCollection.</span></div><div class=\"line\">    col.Add(counter1);</div><div class=\"line\">    col.Add(counter2);</div><div class=\"line\">    col.Add(counter3);</div><div class=\"line\">    col.Add(counter4);</div><div class=\"line\">    <span class=\"comment\">// delete the category if it already exists</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(PerformanceCounterCategory.Exists(<span class=\"string\">\"MyAspNetThreadCounters\"</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">      PerformanceCounterCategory.Delete(<span class=\"string\">\"MyAspNetThreadCounters\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// bind the counters to the PerformanceCounterCategory</span></div><div class=\"line\">    PerformanceCounterCategory category = </div><div class=\"line\">            PerformanceCounterCategory.Create(<span class=\"string\">\"MyAspNetThreadCounters\"</span>, </div><div class=\"line\">                                              <span class=\"string\">\"\"</span>, col);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>編譯後並執行即可,<br>執行 <code>regedit</code> 開啟登錄編輯程式,<br>輸入機碼 <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services</code><br>將可以找到剛剛建立的 <code>MyAspNetThreadCounters</code> 記數器</p>\n<h2 id=\"在系統寫入監控數值\"><a href=\"#在系統寫入監控數值\" class=\"headerlink\" title=\"在系統寫入監控數值\"></a>在系統寫入監控數值</h2><p>在站台的 <code>Global.asax</code> 加入以下的程式碼</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> MonitorThreadPoolEnabled = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Application_Start</span>(<span class=\"params\">Object sender, EventArgs e</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">  Thread t = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> ThreadStart(RefreshCounters));</div><div class=\"line\">  t.Start();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">RefreshCounters</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">while</span> (MonitorThreadPoolEnabled)</div><div class=\"line\">  &#123;</div><div class=\"line\">    ASPNETThreadInfo t = GetThreadInfo();</div><div class=\"line\">    ShowPerfCounters(t);</div><div class=\"line\">    System.Threading.Thread.Sleep(<span class=\"number\">500</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Application_End</span>(<span class=\"params\">Object sender, EventArgs e</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">  MonitorThreadPoolEnabled = <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> ASPNETThreadInfo</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> MaxWorkerThreads;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> MaxIOThreads;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> MinFreeThreads;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> MinLocalRequestFreeThreads;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> AvailableWorkerThreads;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> AvailableIOThreads;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">Equals</span>(<span class=\"params\">ASPNETThreadInfo other</span>)</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      MaxWorkerThreads == other.MaxWorkerThreads &amp;&amp;</div><div class=\"line\">      MaxIOThreads == other.MaxIOThreads &amp;&amp;</div><div class=\"line\">      MinFreeThreads == other.MinFreeThreads &amp;&amp;</div><div class=\"line\">      MinLocalRequestFreeThreads == other.MinLocalRequestFreeThreads &amp;&amp;</div><div class=\"line\">      AvailableWorkerThreads == other.AvailableWorkerThreads &amp;&amp;</div><div class=\"line\">      AvailableIOThreads == other.AvailableIOThreads</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ASPNETThreadInfo <span class=\"title\">GetThreadInfo</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">// use ThreadPool to get the current status</span></div><div class=\"line\">  <span class=\"keyword\">int</span> availableWorker, availableIO;</div><div class=\"line\">  <span class=\"keyword\">int</span> maxWorker, maxIO;</div><div class=\"line\"></div><div class=\"line\">  ThreadPool.GetAvailableThreads( <span class=\"keyword\">out</span> availableWorker, <span class=\"keyword\">out</span> availableIO);</div><div class=\"line\">  ThreadPool.GetMaxThreads(<span class=\"keyword\">out</span> maxWorker, <span class=\"keyword\">out</span> maxIO);</div><div class=\"line\"></div><div class=\"line\">  ASPNETThreadInfo threadInfo;</div><div class=\"line\">  threadInfo.AvailableWorkerThreads = (Int16)availableWorker;</div><div class=\"line\">  threadInfo.AvailableIOThreads = (Int16)availableIO;</div><div class=\"line\">  threadInfo.MaxWorkerThreads = (Int16)maxWorker;</div><div class=\"line\">  threadInfo.MaxIOThreads = (Int16)maxIO;</div><div class=\"line\"> <span class=\"comment\">// hard code for now; could get this from  machine.config</span></div><div class=\"line\">  threadInfo.MinFreeThreads = <span class=\"number\">8</span>;</div><div class=\"line\">  threadInfo.MinLocalRequestFreeThreads = <span class=\"number\">4</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> threadInfo;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ShowPerfCounters</span>(<span class=\"params\">ASPNETThreadInfo t</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// get an instance of our Available Worker Threads counter</span></div><div class=\"line\">  PerformanceCounter counter1 = <span class=\"keyword\">new</span> PerformanceCounter();</div><div class=\"line\">  counter1.CategoryName = <span class=\"string\">\"MyAspNetThreadCounters\"</span>;</div><div class=\"line\">  counter1.CounterName = <span class=\"string\">\"Available Worker Threads\"</span>;</div><div class=\"line\">  counter1.ReadOnly = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// set the value of the counter</span></div><div class=\"line\">  counter1.RawValue = t.AvailableWorkerThreads;</div><div class=\"line\">  counter1.Close();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// repeat for other counters</span></div><div class=\"line\"></div><div class=\"line\">  PerformanceCounter counter2 = <span class=\"keyword\">new</span> PerformanceCounter();</div><div class=\"line\">  counter2.CategoryName = <span class=\"string\">\"MyAspNetThreadCounters\"</span>;</div><div class=\"line\">  counter2.CounterName = <span class=\"string\">\"Available IO Threads\"</span>;</div><div class=\"line\">  counter2.ReadOnly = <span class=\"literal\">false</span>;</div><div class=\"line\">  counter2.RawValue = t.AvailableIOThreads;</div><div class=\"line\">  counter2.Close();</div><div class=\"line\"></div><div class=\"line\">  PerformanceCounter counter3 = <span class=\"keyword\">new</span> PerformanceCounter();</div><div class=\"line\">  counter3.CategoryName = <span class=\"string\">\"MyAspNetThreadCounters\"</span>;</div><div class=\"line\">  counter3.CounterName = <span class=\"string\">\"Max Worker Threads\"</span>;</div><div class=\"line\">  counter3.ReadOnly = <span class=\"literal\">false</span>;</div><div class=\"line\">  counter3.RawValue = t.MaxWorkerThreads;</div><div class=\"line\">  counter3.Close();</div><div class=\"line\"></div><div class=\"line\">  PerformanceCounter counter4 = <span class=\"keyword\">new</span> PerformanceCounter();</div><div class=\"line\">  counter4.CategoryName = <span class=\"string\">\"MyAspNetThreadCounters\"</span>;</div><div class=\"line\">  counter4.CounterName = <span class=\"string\">\"Max IO Threads\"</span>;</div><div class=\"line\">  counter4.ReadOnly = <span class=\"literal\">false</span>;</div><div class=\"line\">  counter4.RawValue = t.MaxIOThreads;</div><div class=\"line\">  counter4.Close();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>當你的站台重新啟動後,<br>就會定期將 Worker Thread 與  I/O Threads 的監控數值傳遞給系統。  </p>\n<h3 id=\"開啟效能計數器\"><a href=\"#開啟效能計數器\" class=\"headerlink\" title=\"開啟效能計數器\"></a>開啟效能計數器</h3><ol>\n<li>執行 <code>perfmon.exe</code> 開啟效能計數器</li>\n<li>新增效能計數器(點選綠色加符號)</li>\n<li>選取前面所建立監控記數器就能看到當前 ThreadPool 的使用狀況。<br><img src=\"https://i.imgur.com/HhlbNH2.jpg\" alt=\"\"></li>\n</ol>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><p><a href=\"/2016/11/21/aspdotnet_threadpool_and_redis/\">上一次</a>說明了 .NET Thread Pool 的機制如何影響 Redis,<br>.NET Thread Pool 的機制會貫穿任何與它互動的系統或服務,<br>所以這篇會簡單描述如何對 .NET Thread Pool <a href=\"https://msdn.microsoft.com/zh-tw/library/ff650682.aspx\" target=\"_blank\" rel=\"external\">建立監控</a>。</p>\n<h2 id=\"步驟\"><a href=\"#步驟\" class=\"headerlink\" title=\"步驟\"></a>步驟</h2><ol>\n<li>建立監控記數器</li>\n<li>在系統寫入監控數值</li>\n<li>開啟效能計數器</li>\n</ol>\n<h2 id=\"建立監控記數器\"><a href=\"#建立監控記數器\" class=\"headerlink\" title=\"建立監控記數器\"></a>建立監控記數器</h2><table>\n<thead>\n<tr>\n<th>記數器</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Available Worker Threads</td>\n<td>目前在 thread-pool 可以使用的 worker threads</td>\n</tr>\n<tr>\n<td>Available IO Threads</td>\n<td>目前在 thread-pool 可以使用的 I/O threads</td>\n</tr>\n<tr>\n<td>Max Worker Threads</td>\n<td>最大可以建立的 worker threads 數量</td>\n</tr>\n<tr>\n<td>Max IO Threads</td>\n<td>最大可以建立的 I/O threads 數量</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"建立一個-Console-應用程式\"><a href=\"#建立一個-Console-應用程式\" class=\"headerlink\" title=\"建立一個 Console 應用程式\"></a>建立一個 Console 應用程式</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> System;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Diagnostics;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">MyAspNetThreadCounters</span></div><div class=\"line\">&#123;</div><div class=\"line\">  [STAThread]</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    CreateCounters();</div><div class=\"line\">    Console.WriteLine(<span class=\"string\">\"MyAspNetThreadCounters performance counter category \"</span> +</div><div class=\"line\">                      <span class=\"string\">\"is created. [Press Enter]\"</span>);</div><div class=\"line\">    Console.ReadLine();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateCounters</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    CounterCreationDataCollection col =  </div><div class=\"line\">      <span class=\"keyword\">new</span> CounterCreationDataCollection();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Create custom counter objects</span></div><div class=\"line\">    CounterCreationData counter1 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">    counter1.CounterName = <span class=\"string\">\"Available Worker Threads\"</span>;</div><div class=\"line\">    counter1.CounterHelp = <span class=\"string\">\"The difference between the maximum number \"</span> + </div><div class=\"line\">                           <span class=\"string\">\"of thread pool worker threads and the \"</span> +</div><div class=\"line\">                           <span class=\"string\">\"number currently active.\"</span>;</div><div class=\"line\">    counter1.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">    CounterCreationData counter2 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">    counter2.CounterName = <span class=\"string\">\"Available IO Threads\"</span>;</div><div class=\"line\">    counter2.CounterHelp = <span class=\"string\">\"The difference between the maximum number of \"</span> + </div><div class=\"line\">                           <span class=\"string\">\"thread pool IO threads and the number \"</span>+ </div><div class=\"line\">                           <span class=\"string\">\"currently active.\"</span>;</div><div class=\"line\">    counter2.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">    CounterCreationData counter3 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">    counter3.CounterName = <span class=\"string\">\"Max Worker Threads\"</span>;</div><div class=\"line\">    counter3.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span>+ </div><div class=\"line\">                           <span class=\"string\">\"that can be active concurrently. All \"</span>+  </div><div class=\"line\">                           <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                           <span class=\"string\">\"thread pool worker threads become available.\"</span>;</div><div class=\"line\">    counter3.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">    CounterCreationData counter4 = <span class=\"keyword\">new</span> CounterCreationData();</div><div class=\"line\">    counter4.CounterName = <span class=\"string\">\"Max IO Threads\"</span>;</div><div class=\"line\">    counter4.CounterHelp = <span class=\"string\">\"The number of requests to the thread pool \"</span> + </div><div class=\"line\">                           <span class=\"string\">\"that can be active concurrently. All \"</span>+  </div><div class=\"line\">                           <span class=\"string\">\"requests above that number remain queued until \"</span> +</div><div class=\"line\">                           <span class=\"string\">\"thread pool IO threads become available.\"</span>;</div><div class=\"line\">    counter4.CounterType = PerformanceCounterType.NumberOfItems32;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Add custom counter objects to CounterCreationDataCollection.</span></div><div class=\"line\">    col.Add(counter1);</div><div class=\"line\">    col.Add(counter2);</div><div class=\"line\">    col.Add(counter3);</div><div class=\"line\">    col.Add(counter4);</div><div class=\"line\">    <span class=\"comment\">// delete the category if it already exists</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(PerformanceCounterCategory.Exists(<span class=\"string\">\"MyAspNetThreadCounters\"</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">      PerformanceCounterCategory.Delete(<span class=\"string\">\"MyAspNetThreadCounters\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// bind the counters to the PerformanceCounterCategory</span></div><div class=\"line\">    PerformanceCounterCategory category = </div><div class=\"line\">            PerformanceCounterCategory.Create(<span class=\"string\">\"MyAspNetThreadCounters\"</span>, </div><div class=\"line\">                                              <span class=\"string\">\"\"</span>, col);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>編譯後並執行即可,<br>執行 <code>regedit</code> 開啟登錄編輯程式,<br>輸入機碼 <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services</code><br>將可以找到剛剛建立的 <code>MyAspNetThreadCounters</code> 記數器</p>\n<h2 id=\"在系統寫入監控數值\"><a href=\"#在系統寫入監控數值\" class=\"headerlink\" title=\"在系統寫入監控數值\"></a>在系統寫入監控數值</h2><p>在站台的 <code>Global.asax</code> 加入以下的程式碼</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> MonitorThreadPoolEnabled = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Application_Start</span>(<span class=\"params\">Object sender, EventArgs e</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">  Thread t = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> ThreadStart(RefreshCounters));</div><div class=\"line\">  t.Start();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">RefreshCounters</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">while</span> (MonitorThreadPoolEnabled)</div><div class=\"line\">  &#123;</div><div class=\"line\">    ASPNETThreadInfo t = GetThreadInfo();</div><div class=\"line\">    ShowPerfCounters(t);</div><div class=\"line\">    System.Threading.Thread.Sleep(<span class=\"number\">500</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">Application_End</span>(<span class=\"params\">Object sender, EventArgs e</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">  MonitorThreadPoolEnabled = <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> ASPNETThreadInfo</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> MaxWorkerThreads;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> MaxIOThreads;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> MinFreeThreads;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> MinLocalRequestFreeThreads;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> AvailableWorkerThreads;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> AvailableIOThreads;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">Equals</span>(<span class=\"params\">ASPNETThreadInfo other</span>)</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      MaxWorkerThreads == other.MaxWorkerThreads &amp;&amp;</div><div class=\"line\">      MaxIOThreads == other.MaxIOThreads &amp;&amp;</div><div class=\"line\">      MinFreeThreads == other.MinFreeThreads &amp;&amp;</div><div class=\"line\">      MinLocalRequestFreeThreads == other.MinLocalRequestFreeThreads &amp;&amp;</div><div class=\"line\">      AvailableWorkerThreads == other.AvailableWorkerThreads &amp;&amp;</div><div class=\"line\">      AvailableIOThreads == other.AvailableIOThreads</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ASPNETThreadInfo <span class=\"title\">GetThreadInfo</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">// use ThreadPool to get the current status</span></div><div class=\"line\">  <span class=\"keyword\">int</span> availableWorker, availableIO;</div><div class=\"line\">  <span class=\"keyword\">int</span> maxWorker, maxIO;</div><div class=\"line\"></div><div class=\"line\">  ThreadPool.GetAvailableThreads( <span class=\"keyword\">out</span> availableWorker, <span class=\"keyword\">out</span> availableIO);</div><div class=\"line\">  ThreadPool.GetMaxThreads(<span class=\"keyword\">out</span> maxWorker, <span class=\"keyword\">out</span> maxIO);</div><div class=\"line\"></div><div class=\"line\">  ASPNETThreadInfo threadInfo;</div><div class=\"line\">  threadInfo.AvailableWorkerThreads = (Int16)availableWorker;</div><div class=\"line\">  threadInfo.AvailableIOThreads = (Int16)availableIO;</div><div class=\"line\">  threadInfo.MaxWorkerThreads = (Int16)maxWorker;</div><div class=\"line\">  threadInfo.MaxIOThreads = (Int16)maxIO;</div><div class=\"line\"> <span class=\"comment\">// hard code for now; could get this from  machine.config</span></div><div class=\"line\">  threadInfo.MinFreeThreads = <span class=\"number\">8</span>;</div><div class=\"line\">  threadInfo.MinLocalRequestFreeThreads = <span class=\"number\">4</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> threadInfo;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ShowPerfCounters</span>(<span class=\"params\">ASPNETThreadInfo t</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// get an instance of our Available Worker Threads counter</span></div><div class=\"line\">  PerformanceCounter counter1 = <span class=\"keyword\">new</span> PerformanceCounter();</div><div class=\"line\">  counter1.CategoryName = <span class=\"string\">\"MyAspNetThreadCounters\"</span>;</div><div class=\"line\">  counter1.CounterName = <span class=\"string\">\"Available Worker Threads\"</span>;</div><div class=\"line\">  counter1.ReadOnly = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// set the value of the counter</span></div><div class=\"line\">  counter1.RawValue = t.AvailableWorkerThreads;</div><div class=\"line\">  counter1.Close();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// repeat for other counters</span></div><div class=\"line\"></div><div class=\"line\">  PerformanceCounter counter2 = <span class=\"keyword\">new</span> PerformanceCounter();</div><div class=\"line\">  counter2.CategoryName = <span class=\"string\">\"MyAspNetThreadCounters\"</span>;</div><div class=\"line\">  counter2.CounterName = <span class=\"string\">\"Available IO Threads\"</span>;</div><div class=\"line\">  counter2.ReadOnly = <span class=\"literal\">false</span>;</div><div class=\"line\">  counter2.RawValue = t.AvailableIOThreads;</div><div class=\"line\">  counter2.Close();</div><div class=\"line\"></div><div class=\"line\">  PerformanceCounter counter3 = <span class=\"keyword\">new</span> PerformanceCounter();</div><div class=\"line\">  counter3.CategoryName = <span class=\"string\">\"MyAspNetThreadCounters\"</span>;</div><div class=\"line\">  counter3.CounterName = <span class=\"string\">\"Max Worker Threads\"</span>;</div><div class=\"line\">  counter3.ReadOnly = <span class=\"literal\">false</span>;</div><div class=\"line\">  counter3.RawValue = t.MaxWorkerThreads;</div><div class=\"line\">  counter3.Close();</div><div class=\"line\"></div><div class=\"line\">  PerformanceCounter counter4 = <span class=\"keyword\">new</span> PerformanceCounter();</div><div class=\"line\">  counter4.CategoryName = <span class=\"string\">\"MyAspNetThreadCounters\"</span>;</div><div class=\"line\">  counter4.CounterName = <span class=\"string\">\"Max IO Threads\"</span>;</div><div class=\"line\">  counter4.ReadOnly = <span class=\"literal\">false</span>;</div><div class=\"line\">  counter4.RawValue = t.MaxIOThreads;</div><div class=\"line\">  counter4.Close();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>當你的站台重新啟動後,<br>就會定期將 Worker Thread 與  I/O Threads 的監控數值傳遞給系統。  </p>\n<h3 id=\"開啟效能計數器\"><a href=\"#開啟效能計數器\" class=\"headerlink\" title=\"開啟效能計數器\"></a>開啟效能計數器</h3><ol>\n<li>執行 <code>perfmon.exe</code> 開啟效能計數器</li>\n<li>新增效能計數器(點選綠色加符號)</li>\n<li>選取前面所建立監控記數器就能看到當前 ThreadPool 的使用狀況。<br><img src=\"https://i.imgur.com/HhlbNH2.jpg\" alt=\"\"></li>\n</ol>\n<p>(fin)</p>\n"},{"title":"[閱讀筆記]其實，你不是沒有時間","date":"2017-03-25T16:08:46.000Z","_content":"\n## 六個工具與餐盤\n- 原則:**工具簡單至上**\n- 面對突發狀況\n\n1. 月計劃表 (`google calendar`)\n\t- 與自已約會(保留給自已的時間)^註1^\n\t- 工作與私人不要分開\n\t- 日期與期限 \n2. Todo List (`inbox`)\n\t- 提醒與集中管理\n\t- 每天都要檢查一遍^註2^ \n3. 日計劃表 (`google calendar`)\n\t- 當日約會 & 活動清單\n\t- 活動清單是你當天的籌碼 也是出現突發 \n4. 隨手記 (`筆記本&Evernote`)\n\t- 接受任務，再轉到其他工具之中^註3^\t \n5. 隨身資料庫 (`google drive`)\n\t- 將整理過的資料封存在隨手可得的地方 \n \tex: 上課或分享的簡報、 專案記錄等…有大量圖片、文件等\n6. 溝通工具 (`line & slack`)\n\t- 一天檢查電子郵件3~6次就夠了\n\n## 把時間變空間(視覺化)\n- 個人、家庭、工作取得平衡\n- 安排30分鐘規劃一天的活動\n\t- 創造性活動安排在精力最佳的時段\n\t- 安排獨處的時間\n\t- 安排恢復精力的時間\n\t- 預留時間給可能發生的突發事件\n- 將所有的事情分為紅綠黃(灰)^註4^，綠色應該越多越好，灰色越少越好。\n<table>\n<tr><td>6 am</td><td>7 am</td><td>8 am</td><td>9 am</td><td>10 am</td><td>11 am</td><td>12 am</td><td>1 pm</td></tr>\n<tr><td>5 am</td><td colspan=\"3\" rowspan=\"4\" valign=\"top\">本日活動</td><td colspan=\"3\" rowspan=\"4\" valign=\"top\">隨手記</td><td>2 pm</td></tr>\n<tr><td>4 am</td><td>3 pm</td></tr>\n<tr><td>3 am</td><td>4 pm</td></tr>\n<tr><td>2 am</td><td>5 pm</td></tr>\n<tr><td>1 am</td><td>12 am</td><td>11 pm</td><td>10 pm</td><td>9 pm</td><td>8 pm</td><td>7 pm</td><td>6 pm</td></tr>\n</table>\n\n## 應變執行，計劃趕不上變化\n- 調整事情的順序\n- 養成習慣\n- 臨機應變\n- 小心多工\n- 保留風格\n\n## 註\n1. 分別為聖的時間，請參考`與時間作朋友`\n2. 利用分別為聖的時間檢查\n3. 餐盤中間的區塊可以用來作當日的活動清單 & 隨手記\n4. 可以參考四象限 重要-緊急(紅)、不重要-緊急(黃)、重要-不緊急(綠)、不重要-不緊急(灰)\n","source":"_posts/attack_your_day.md","raw":"---\ntitle: \"[閱讀筆記]其實，你不是沒有時間\"\ndate: 2017/03/26 00:08:46\ntag:\n  - 時間管理\n  - 閱讀筆記\n---\n\n## 六個工具與餐盤\n- 原則:**工具簡單至上**\n- 面對突發狀況\n\n1. 月計劃表 (`google calendar`)\n\t- 與自已約會(保留給自已的時間)^註1^\n\t- 工作與私人不要分開\n\t- 日期與期限 \n2. Todo List (`inbox`)\n\t- 提醒與集中管理\n\t- 每天都要檢查一遍^註2^ \n3. 日計劃表 (`google calendar`)\n\t- 當日約會 & 活動清單\n\t- 活動清單是你當天的籌碼 也是出現突發 \n4. 隨手記 (`筆記本&Evernote`)\n\t- 接受任務，再轉到其他工具之中^註3^\t \n5. 隨身資料庫 (`google drive`)\n\t- 將整理過的資料封存在隨手可得的地方 \n \tex: 上課或分享的簡報、 專案記錄等…有大量圖片、文件等\n6. 溝通工具 (`line & slack`)\n\t- 一天檢查電子郵件3~6次就夠了\n\n## 把時間變空間(視覺化)\n- 個人、家庭、工作取得平衡\n- 安排30分鐘規劃一天的活動\n\t- 創造性活動安排在精力最佳的時段\n\t- 安排獨處的時間\n\t- 安排恢復精力的時間\n\t- 預留時間給可能發生的突發事件\n- 將所有的事情分為紅綠黃(灰)^註4^，綠色應該越多越好，灰色越少越好。\n<table>\n<tr><td>6 am</td><td>7 am</td><td>8 am</td><td>9 am</td><td>10 am</td><td>11 am</td><td>12 am</td><td>1 pm</td></tr>\n<tr><td>5 am</td><td colspan=\"3\" rowspan=\"4\" valign=\"top\">本日活動</td><td colspan=\"3\" rowspan=\"4\" valign=\"top\">隨手記</td><td>2 pm</td></tr>\n<tr><td>4 am</td><td>3 pm</td></tr>\n<tr><td>3 am</td><td>4 pm</td></tr>\n<tr><td>2 am</td><td>5 pm</td></tr>\n<tr><td>1 am</td><td>12 am</td><td>11 pm</td><td>10 pm</td><td>9 pm</td><td>8 pm</td><td>7 pm</td><td>6 pm</td></tr>\n</table>\n\n## 應變執行，計劃趕不上變化\n- 調整事情的順序\n- 養成習慣\n- 臨機應變\n- 小心多工\n- 保留風格\n\n## 註\n1. 分別為聖的時間，請參考`與時間作朋友`\n2. 利用分別為聖的時間檢查\n3. 餐盤中間的區塊可以用來作當日的活動清單 & 隨手記\n4. 可以參考四象限 重要-緊急(紅)、不重要-緊急(黃)、重要-不緊急(綠)、不重要-不緊急(灰)\n","slug":"attack_your_day","published":1,"updated":"2017-03-25T16:33:33.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3o5u0008lgop4xmyn7oe","content":"<h2 id=\"六個工具與餐盤\"><a href=\"#六個工具與餐盤\" class=\"headerlink\" title=\"六個工具與餐盤\"></a>六個工具與餐盤</h2><ul>\n<li>原則:<strong>工具簡單至上</strong></li>\n<li>面對突發狀況</li>\n</ul>\n<ol>\n<li>月計劃表 (<code>google calendar</code>)<ul>\n<li>與自已約會(保留給自已的時間)^註1^</li>\n<li>工作與私人不要分開</li>\n<li>日期與期限 </li>\n</ul>\n</li>\n<li>Todo List (<code>inbox</code>)<ul>\n<li>提醒與集中管理</li>\n<li>每天都要檢查一遍^註2^ </li>\n</ul>\n</li>\n<li>日計劃表 (<code>google calendar</code>)<ul>\n<li>當日約會 &amp; 活動清單</li>\n<li>活動清單是你當天的籌碼 也是出現突發 </li>\n</ul>\n</li>\n<li>隨手記 (<code>筆記本&amp;Evernote</code>)<ul>\n<li>接受任務，再轉到其他工具之中^註3^     </li>\n</ul>\n</li>\n<li>隨身資料庫 (<code>google drive</code>)<ul>\n<li>將整理過的資料封存在隨手可得的地方<br>ex: 上課或分享的簡報、 專案記錄等…有大量圖片、文件等</li>\n</ul>\n</li>\n<li>溝通工具 (<code>line &amp; slack</code>)<ul>\n<li>一天檢查電子郵件3~6次就夠了</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"把時間變空間-視覺化\"><a href=\"#把時間變空間-視覺化\" class=\"headerlink\" title=\"把時間變空間(視覺化)\"></a>把時間變空間(視覺化)</h2><ul>\n<li>個人、家庭、工作取得平衡</li>\n<li>安排30分鐘規劃一天的活動<ul>\n<li>創造性活動安排在精力最佳的時段</li>\n<li>安排獨處的時間</li>\n<li>安排恢復精力的時間</li>\n<li>預留時間給可能發生的突發事件</li>\n</ul>\n</li>\n<li>將所有的事情分為紅綠黃(灰)^註4^，綠色應該越多越好，灰色越少越好。<table><br><tr><td>6 am</td><td>7 am</td><td>8 am</td><td>9 am</td><td>10 am</td><td>11 am</td><td>12 am</td><td>1 pm</td></tr><br><tr><td>5 am</td><td colspan=\"3\" rowspan=\"4\" valign=\"top\">本日活動</td><td colspan=\"3\" rowspan=\"4\" valign=\"top\">隨手記</td><td>2 pm</td></tr><br><tr><td>4 am</td><td>3 pm</td></tr><br><tr><td>3 am</td><td>4 pm</td></tr><br><tr><td>2 am</td><td>5 pm</td></tr><br><tr><td>1 am</td><td>12 am</td><td>11 pm</td><td>10 pm</td><td>9 pm</td><td>8 pm</td><td>7 pm</td><td>6 pm</td></tr><br></table>\n\n</li>\n</ul>\n<h2 id=\"應變執行，計劃趕不上變化\"><a href=\"#應變執行，計劃趕不上變化\" class=\"headerlink\" title=\"應變執行，計劃趕不上變化\"></a>應變執行，計劃趕不上變化</h2><ul>\n<li>調整事情的順序</li>\n<li>養成習慣</li>\n<li>臨機應變</li>\n<li>小心多工</li>\n<li>保留風格</li>\n</ul>\n<h2 id=\"註\"><a href=\"#註\" class=\"headerlink\" title=\"註\"></a>註</h2><ol>\n<li>分別為聖的時間，請參考<code>與時間作朋友</code></li>\n<li>利用分別為聖的時間檢查</li>\n<li>餐盤中間的區塊可以用來作當日的活動清單 &amp; 隨手記</li>\n<li>可以參考四象限 重要-緊急(紅)、不重要-緊急(黃)、重要-不緊急(綠)、不重要-不緊急(灰)</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"六個工具與餐盤\"><a href=\"#六個工具與餐盤\" class=\"headerlink\" title=\"六個工具與餐盤\"></a>六個工具與餐盤</h2><ul>\n<li>原則:<strong>工具簡單至上</strong></li>\n<li>面對突發狀況</li>\n</ul>\n<ol>\n<li>月計劃表 (<code>google calendar</code>)<ul>\n<li>與自已約會(保留給自已的時間)^註1^</li>\n<li>工作與私人不要分開</li>\n<li>日期與期限 </li>\n</ul>\n</li>\n<li>Todo List (<code>inbox</code>)<ul>\n<li>提醒與集中管理</li>\n<li>每天都要檢查一遍^註2^ </li>\n</ul>\n</li>\n<li>日計劃表 (<code>google calendar</code>)<ul>\n<li>當日約會 &amp; 活動清單</li>\n<li>活動清單是你當天的籌碼 也是出現突發 </li>\n</ul>\n</li>\n<li>隨手記 (<code>筆記本&amp;Evernote</code>)<ul>\n<li>接受任務，再轉到其他工具之中^註3^     </li>\n</ul>\n</li>\n<li>隨身資料庫 (<code>google drive</code>)<ul>\n<li>將整理過的資料封存在隨手可得的地方<br>ex: 上課或分享的簡報、 專案記錄等…有大量圖片、文件等</li>\n</ul>\n</li>\n<li>溝通工具 (<code>line &amp; slack</code>)<ul>\n<li>一天檢查電子郵件3~6次就夠了</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"把時間變空間-視覺化\"><a href=\"#把時間變空間-視覺化\" class=\"headerlink\" title=\"把時間變空間(視覺化)\"></a>把時間變空間(視覺化)</h2><ul>\n<li>個人、家庭、工作取得平衡</li>\n<li>安排30分鐘規劃一天的活動<ul>\n<li>創造性活動安排在精力最佳的時段</li>\n<li>安排獨處的時間</li>\n<li>安排恢復精力的時間</li>\n<li>預留時間給可能發生的突發事件</li>\n</ul>\n</li>\n<li>將所有的事情分為紅綠黃(灰)^註4^，綠色應該越多越好，灰色越少越好。<table><br><tr><td>6 am</td><td>7 am</td><td>8 am</td><td>9 am</td><td>10 am</td><td>11 am</td><td>12 am</td><td>1 pm</td></tr><br><tr><td>5 am</td><td colspan=\"3\" rowspan=\"4\" valign=\"top\">本日活動</td><td colspan=\"3\" rowspan=\"4\" valign=\"top\">隨手記</td><td>2 pm</td></tr><br><tr><td>4 am</td><td>3 pm</td></tr><br><tr><td>3 am</td><td>4 pm</td></tr><br><tr><td>2 am</td><td>5 pm</td></tr><br><tr><td>1 am</td><td>12 am</td><td>11 pm</td><td>10 pm</td><td>9 pm</td><td>8 pm</td><td>7 pm</td><td>6 pm</td></tr><br></table>\n\n</li>\n</ul>\n<h2 id=\"應變執行，計劃趕不上變化\"><a href=\"#應變執行，計劃趕不上變化\" class=\"headerlink\" title=\"應變執行，計劃趕不上變化\"></a>應變執行，計劃趕不上變化</h2><ul>\n<li>調整事情的順序</li>\n<li>養成習慣</li>\n<li>臨機應變</li>\n<li>小心多工</li>\n<li>保留風格</li>\n</ul>\n<h2 id=\"註\"><a href=\"#註\" class=\"headerlink\" title=\"註\"></a>註</h2><ol>\n<li>分別為聖的時間，請參考<code>與時間作朋友</code></li>\n<li>利用分別為聖的時間檢查</li>\n<li>餐盤中間的區塊可以用來作當日的活動清單 &amp; 隨手記</li>\n<li>可以參考四象限 重要-緊急(紅)、不重要-緊急(黃)、重要-不緊急(綠)、不重要-不緊急(灰)</li>\n</ol>\n"},{"title":"ASP.NET Thread Pool 與 Redis Timeout Exception","date":"2016-11-21T08:49:17.000Z","_content":"\n\n## 概述\n_ASP.NET Thread Pool 的機制如何影響 Redis_\n\n## 案例\n\n線上維護的系統偶爾會發生 Redis Timeout Exception ,\n並在 elmah 發現以下的錯誤記錄\n\n```csharp\nTimeout performing SETEX Cache:Prod:WebAPI:Key:20161121152607, inst: 18, mgr: ExecuteSelect, err: never,  \nqueue: 0, qu: 0, qs: 0, qc: 0, wr: 0, wq: 0, in: 0, ar: 1,  \nIOCP: (Busy=0,Free=1000,Min=8,Max=1000), WORKER: (Busy=13,Free=32754,Min=8,Max=32767), clientName: TYO-MWEB \n```\n\n## 解析\n\n這時當 StackExchange.Redis 在進行同步作業的時候,  \n如果超過 `synctimeout` 的設定值(預設是1000ms), \nRedis 會佔用.NET的 workerthread \n而在 .NET 底層隱含著一個機制,\n會導致錯誤。\n\n### Thread Pool 500ms 的機制\n\n*一種簡化的說法「 ASP.NET Thread Pool 一秒能建立2個Thread。」*  \n\n設定值 `minworkerthread` 就像是遊樂場*已經開啟*的閘門, \n每當有一個遊客(Task)進來時,立即提供給它使用。\n但是當遊客(Task)變多的時候,就會開始排隊(Queue),\nASP.NET Thread Pool 隱含著一個機制,\n當它的隊伍(Queue)長達500豪秒沒有移動的話,\n就會開啟新的閘門(建立新的Thread)。\n而我的情境屬於[Burst of traffic](#burst_of_traffic),    \n突然大量 Task 湧入 Queue ,  \nThreadPool 需要大量的 Thread  \n每個新的 Thread 都需要 500ms 的反應時間 ,  \n而累積的時間超過 Task 的 Timeout 設定值時 ,  \n就會拋出Exception. \n\n\n![ASP.NET Thread Pool](/images/workerthread_and_iothread/110416_103521_AM.jpg)\n\nASP.NET Thread Pool 的排隊機制與`minworkerthread` 設定值相關。  \n可以透過調整 `machine.config` 來修正。  \n參考([爭用、 效能不佳、 和死結 （deadlock） 當您從 ASP.NET 應用程式呼叫 Web 服務](https://support.microsoft.com/zh-tw/kb/821268))。  \n\n`minworkerthread` 的預設值是 1 。  \n但是會與執行環境的CPU個數有關,  \n假設你是四核的主機,那就要乘上 4。\n\n```xml\n<system.web>\n    <processModel autoConfig=\"false\" minWorkerThreads=\"1\" />\n</system.web>    \n```\n\n### 範例\n\n當 Redis 發生 Timeout 時, \n可以透過錯誤訊息判斷其背後的原因是否與 workerthread 有關。\n在以下的例子可以看到 IOCP 與 WORKER 兩個值。\n這兩值表示 .Net ThreadPool 內的兩種執行緒,\n如果 Busy 值很高, 就有可能是 ThreadPool 來不及建立造成的錯誤。\n\n```csharp\nSystem.TimeoutException: Timeout performing MGET 2728cc84-58ae-406b-8ec8-3f962419f641,  \ninst: 1,mgr: Inactive, queue: 73, qu=6, qs=67, qc=0, wr=1/1, in=0/0  \nIOCP: (Busy=0, Free=999, Min=2,Max=1000), WORKER (Busy=7,Free=8184,Min=2,Max=8191) \n```\n\n### Error Code 說明\n\n|Error code|Details|範例|說明|\n|---|---|---|---|\n|inst|in the last time slice: 0 commands have been issued|在最後時脈：已發出0個命令|最後的時脈發出的命令個數|\n|mgr|the socket manager is performing \"socket.select\", <br />which means it is asking the OS to indicate a socket <br />that has something to do; <br /> basically: the reader is not actively reading from <br />the network because it doesn't think there<br /> is anything to do||最後的操作命令|\n|queue|  there are 73 total in-progress operations|73個正在排隊中的操作|正在排隊中的操作|\n|qu|6 of those are in unsent queue: they have not yet been written to the outbound network|6個未發送的queue|未發送的queue|\n|qs|67 of those have been sent to the server but a response is not yet available.  The response could be: Not yet sent by the server sent by the server but not yet processed by the client. |67個已發送的queue|已發送的queue|\n|qc|0 of those have seen replies but have not yet been marked as complete due to waiting on the completion loop|0個已發送未標記完成的queue|已發送未標記完成的queue|\n|wr|there is an active writer (meaning - those 6 unsent are not being ignored) bytes/activewriters |有 1 個啟用的writer,(意味著qu的工作並沒有被忽略) bytes/activewriters|bytes/activewriters|\n|in|there are no active readers and zero bytes are available to be read on the NIC bytes/activereaders|0個reader|bytes/activereaders|\n\n## 參考\n- [Threading](https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx)\n- [Improving ASP.NET Performance](https://msdn.microsoft.com/en-us/library/ms998549.aspx)\n- [Programming the Thread Pool in the .NET Framework](https://msdn.microsoft.com/en-us/library/ms973903.aspx)\n- [DiagnoseRedisErrors-ClientSide](https://gist.github.com/JonCole/db0e90bedeb3fc4823c2)\n- [ThreadPool](https://gist.github.com/JonCole/e65411214030f0d823cb)\n\n(fin)\n\n---\n\n## 其它的 Redis Error 情境 \n只作摘要式的翻譯。\n\n### Memory pressure (記憶體壓力)\n\n`Problem:`  \n記憶體不足而開始讀取虛擬記憶體(磁碟)而導致特能低落。\nMemory pressure on the client machine leads to all kinds of performance problems that can   \ndelay processing of data that was sent by the Redis instance without any delay.   \nWhen memory pressure hits, the system typically has to page data from physical memory to   \nvirtual memory which is on disk. This page faulting causes the system to slow down significantly.  \n\n`Measurement:`  \nMonitory memory usage on machine to make sure that it does not exceed available memory.\nMonitor the Page Faults/Sec perf counter. Most systems will have some page faults even during   \nnormal operation, so watch for spikes in this page faults perf counter which correspond with timeouts.  \n\n`Resolution:`   \n增加記憶體或是減少記憶體使用量\nUpgrade to a larger client VM size with more memory or dig into your memory usage patterns   \nto reduce memory consuption.  \n\n---\n\n### <span style=\"color:red;\" id=\"burst_of_traffic\">Burst of traffic</span>\n\n`Problem:`  \nThreadPool突然大量的工作湧入queue導致執行緒來不及建立。\n Bursts of traffic combined with poor ThreadPool settings can result in delays in processing   \n data already sent by the Redis Server but not yet consumed on the client side.  \n\n`測量:`   \n可以用[程式](https://github.com/JonCole/SampleCode/blob/master/ThreadPoolMonitor/ThreadPoolLogger.cs)監控 ThreadPool .  \n或是單純透過 TimeoutException 的訊息,觀察IOCP與WORKER的Busy值來判斷.   \n`Measurement:`  \nMonitor how your ThreadPool statistics change over time using code like [this](https://github.com/JonCole/SampleCode/blob/master/ThreadPoolMonitor/ThreadPoolLogger.cs).   \nYou can also look at the TimeoutException message from StackExchange.Redis.    \nHere is an example :  \n\n```csharp\nSystem.TimeoutException: Timeout performing EVAL, inst: 8, mgr: Inactive, queue: 0, qu: 0, qs: 0, qc: 0, wr: 0, wq: 0, in: 64221, ar: 0, \nIOCP: (Busy=6,Free=999,Min=2,Max=1000), WORKER: (Busy=7,Free=8184,Min=2,Max=8191)\n```\n\nIn the above message, there are several issues that are interesting:  \nNotice that in the \"IOCP\" section and the \"WORKER\" section you have a \"Busy\" value that is  \ngreater than the \"Min\" value. This means that your threadpool settings need adjusting.  \nYou can also see \"in: 64221\". This indicates that 64211 bytes have been received at the kernel   \nsocket layer but haven't yet been read by the application (e.g. StackExchange.Redis).   \nThis typically means that your application isn't reading data from the network as quickly as   \nthe server is sending it to you.  \n\n`Resolution:` \n調整ThreadPool設定  \nConfigure your ThreadPool Settings to make sure that your threadpool will scale up quickly under burst scenarios.\n\n---\n\n### High CPU usage (CPU 過載)\n\n`Problem:` \nHigh CPU usage on the client is an indication that the system cannot keep up with the work that it has been asked to perform. High CPU is a problem because the CPU is busy and it can't keep up with the work the application is asking it to do. The response from Redis can come very quickly, but because the CPU isn't keeping up with the workload, the response sits in the socket's kernel buffer waiting to be processed. If the delay is long enough, a timeout occurs in spite of the requested data having already arrived from the server.\n\n`Measurement:` \nMonitor the System Wide CPU usage through the azure portal or through the associated perf counter. \nBe careful not to monitor process CPU because a single process can have low CPU usage at the same time that overall system CPU can be high. \nWatch for spikes in CPU usage that correspond with timeouts. As a result of high CPU, \nyou may also see high \"in: XXX\" values in TimeoutException error messages as described above in the \"Burst of traffic\" section. \nNote that in newer builds of StackExchange.Redis, the client-side CPU will be printed out in the timeout error message as long as the environment doesn't block access to the CPU perf counter.\n\n`Note:` \nStackExchange.Redis version 1.1.603 or later now prints out \"local-cpu\" usage when a timeout occurs to help understand when client-side CPU usage may be affecting performance.\n\n`Resolution:` \n增加CPU或是找出CPU產生過載的原因  \nUpgrade to a larger VM size with more CPU capacity or investigate what is causing CPU spikes.\n\n---\n\n### Client Side Bandwidth Exceeded (頻寬不足)\n\n`Problem:` \nDifferent sized client machines have limitations on how much network bandwidth they have available. \nIf the client exceeds the available bandwidth, then data will not be processed on the client side as quickly as the server is sending it. This can lead to timeouts.\n\n`Measurement:` \nMonitor how your Bandwidth usage change over time using code like this. Note that this code may not run successfully in some environments with restricted permissions (like Azure WebSites).\n\n`Resolution:` \n加大頻寬或減少使用量\nIncrease Client VM size or reduce network bandwidth consumption.\n\n----\n\n### Large Request/Response Size (過大的請求/回應量)\n\n`Problem:` \n如圖所示,A與B兩個Request都太過龐大,當同時發動請求時,  \nA 回應的時間過長, 導致 B 的Timeout\nA large request/response can cause timeouts. As an example, suppose your timeout value configured is 1 second. \nYour application requests two keys (e.g. 'A' and 'B') at the same time using the same physical network connection. \nMost clients support \"Pipelining\" of requests, such that both requests 'A' and 'B' are sent on the wire to the server one after the other without waiting for the responses. \nThe server will send the responses back in the same order. If response 'A' is large enough it can eat up most of the timeout for subsequent requests.\n\nBelow, I will try to demonstrate this. In this scenario, Request 'A' and 'B' are sent quickly, \nthe server starts sending responses 'A' and 'B' quickly, but because of data transfer times, \n'B' get stuck behind the other request and times out even though the server responded quickly.\n\n```\n|-------- 1 Second Timeout (A)----------|\n|-Request A-|\n     |-------- 1 Second Timeout (B) ----------|\n     |-Request B-|\n            |- Read Response A --------|\n                                       |- Read Response B-| (**TIMEOUT**)\n```\n\n`Measurement:` \nThis is a difficult one to measure. You basically have to instrument your client code to track large requests and responses.\n\n`Resolution:`\n將所需要的資料分割成數個小片段 再分別取回\nRedis is optimized for a large number of small values, rather than a few large values. \nThe preferred solution is to break up your data into related smaller values. See here for details around why smaller values are recommended.\nIncrease the size of your VM (for client and Redis Cache Server), to get higher bandwidth capabilities, reducing data transfer times for larger responses. \nNote that getting more bandwidth on just the server or just on the client may not be enough. \nMeasure your bandwidth usage and compare it to the capabilities of the size of VM you currently have.\nIncrease the number of ConnectionMultiplexer objects you use and round-robin requests over different connections (e.g. use a connection pool). \nIf you go this route, make sure that you don't create a brand new ConnectionMultiplexer for each request as the overhead of creating the new connection will kill your performance.","source":"_posts/aspdotnet_threadpool_and_redis.md","raw":"---\ntitle: ASP.NET Thread Pool 與 Redis Timeout Exception\ndate: 2016/11/21 16:49:17\ntag:\n  - .Net Framework\n  - IO\n  - Thread\n  - ASP.Net\n  - Redis\n---\n\n\n## 概述\n_ASP.NET Thread Pool 的機制如何影響 Redis_\n\n## 案例\n\n線上維護的系統偶爾會發生 Redis Timeout Exception ,\n並在 elmah 發現以下的錯誤記錄\n\n```csharp\nTimeout performing SETEX Cache:Prod:WebAPI:Key:20161121152607, inst: 18, mgr: ExecuteSelect, err: never,  \nqueue: 0, qu: 0, qs: 0, qc: 0, wr: 0, wq: 0, in: 0, ar: 1,  \nIOCP: (Busy=0,Free=1000,Min=8,Max=1000), WORKER: (Busy=13,Free=32754,Min=8,Max=32767), clientName: TYO-MWEB \n```\n\n## 解析\n\n這時當 StackExchange.Redis 在進行同步作業的時候,  \n如果超過 `synctimeout` 的設定值(預設是1000ms), \nRedis 會佔用.NET的 workerthread \n而在 .NET 底層隱含著一個機制,\n會導致錯誤。\n\n### Thread Pool 500ms 的機制\n\n*一種簡化的說法「 ASP.NET Thread Pool 一秒能建立2個Thread。」*  \n\n設定值 `minworkerthread` 就像是遊樂場*已經開啟*的閘門, \n每當有一個遊客(Task)進來時,立即提供給它使用。\n但是當遊客(Task)變多的時候,就會開始排隊(Queue),\nASP.NET Thread Pool 隱含著一個機制,\n當它的隊伍(Queue)長達500豪秒沒有移動的話,\n就會開啟新的閘門(建立新的Thread)。\n而我的情境屬於[Burst of traffic](#burst_of_traffic),    \n突然大量 Task 湧入 Queue ,  \nThreadPool 需要大量的 Thread  \n每個新的 Thread 都需要 500ms 的反應時間 ,  \n而累積的時間超過 Task 的 Timeout 設定值時 ,  \n就會拋出Exception. \n\n\n![ASP.NET Thread Pool](/images/workerthread_and_iothread/110416_103521_AM.jpg)\n\nASP.NET Thread Pool 的排隊機制與`minworkerthread` 設定值相關。  \n可以透過調整 `machine.config` 來修正。  \n參考([爭用、 效能不佳、 和死結 （deadlock） 當您從 ASP.NET 應用程式呼叫 Web 服務](https://support.microsoft.com/zh-tw/kb/821268))。  \n\n`minworkerthread` 的預設值是 1 。  \n但是會與執行環境的CPU個數有關,  \n假設你是四核的主機,那就要乘上 4。\n\n```xml\n<system.web>\n    <processModel autoConfig=\"false\" minWorkerThreads=\"1\" />\n</system.web>    \n```\n\n### 範例\n\n當 Redis 發生 Timeout 時, \n可以透過錯誤訊息判斷其背後的原因是否與 workerthread 有關。\n在以下的例子可以看到 IOCP 與 WORKER 兩個值。\n這兩值表示 .Net ThreadPool 內的兩種執行緒,\n如果 Busy 值很高, 就有可能是 ThreadPool 來不及建立造成的錯誤。\n\n```csharp\nSystem.TimeoutException: Timeout performing MGET 2728cc84-58ae-406b-8ec8-3f962419f641,  \ninst: 1,mgr: Inactive, queue: 73, qu=6, qs=67, qc=0, wr=1/1, in=0/0  \nIOCP: (Busy=0, Free=999, Min=2,Max=1000), WORKER (Busy=7,Free=8184,Min=2,Max=8191) \n```\n\n### Error Code 說明\n\n|Error code|Details|範例|說明|\n|---|---|---|---|\n|inst|in the last time slice: 0 commands have been issued|在最後時脈：已發出0個命令|最後的時脈發出的命令個數|\n|mgr|the socket manager is performing \"socket.select\", <br />which means it is asking the OS to indicate a socket <br />that has something to do; <br /> basically: the reader is not actively reading from <br />the network because it doesn't think there<br /> is anything to do||最後的操作命令|\n|queue|  there are 73 total in-progress operations|73個正在排隊中的操作|正在排隊中的操作|\n|qu|6 of those are in unsent queue: they have not yet been written to the outbound network|6個未發送的queue|未發送的queue|\n|qs|67 of those have been sent to the server but a response is not yet available.  The response could be: Not yet sent by the server sent by the server but not yet processed by the client. |67個已發送的queue|已發送的queue|\n|qc|0 of those have seen replies but have not yet been marked as complete due to waiting on the completion loop|0個已發送未標記完成的queue|已發送未標記完成的queue|\n|wr|there is an active writer (meaning - those 6 unsent are not being ignored) bytes/activewriters |有 1 個啟用的writer,(意味著qu的工作並沒有被忽略) bytes/activewriters|bytes/activewriters|\n|in|there are no active readers and zero bytes are available to be read on the NIC bytes/activereaders|0個reader|bytes/activereaders|\n\n## 參考\n- [Threading](https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx)\n- [Improving ASP.NET Performance](https://msdn.microsoft.com/en-us/library/ms998549.aspx)\n- [Programming the Thread Pool in the .NET Framework](https://msdn.microsoft.com/en-us/library/ms973903.aspx)\n- [DiagnoseRedisErrors-ClientSide](https://gist.github.com/JonCole/db0e90bedeb3fc4823c2)\n- [ThreadPool](https://gist.github.com/JonCole/e65411214030f0d823cb)\n\n(fin)\n\n---\n\n## 其它的 Redis Error 情境 \n只作摘要式的翻譯。\n\n### Memory pressure (記憶體壓力)\n\n`Problem:`  \n記憶體不足而開始讀取虛擬記憶體(磁碟)而導致特能低落。\nMemory pressure on the client machine leads to all kinds of performance problems that can   \ndelay processing of data that was sent by the Redis instance without any delay.   \nWhen memory pressure hits, the system typically has to page data from physical memory to   \nvirtual memory which is on disk. This page faulting causes the system to slow down significantly.  \n\n`Measurement:`  \nMonitory memory usage on machine to make sure that it does not exceed available memory.\nMonitor the Page Faults/Sec perf counter. Most systems will have some page faults even during   \nnormal operation, so watch for spikes in this page faults perf counter which correspond with timeouts.  \n\n`Resolution:`   \n增加記憶體或是減少記憶體使用量\nUpgrade to a larger client VM size with more memory or dig into your memory usage patterns   \nto reduce memory consuption.  \n\n---\n\n### <span style=\"color:red;\" id=\"burst_of_traffic\">Burst of traffic</span>\n\n`Problem:`  \nThreadPool突然大量的工作湧入queue導致執行緒來不及建立。\n Bursts of traffic combined with poor ThreadPool settings can result in delays in processing   \n data already sent by the Redis Server but not yet consumed on the client side.  \n\n`測量:`   \n可以用[程式](https://github.com/JonCole/SampleCode/blob/master/ThreadPoolMonitor/ThreadPoolLogger.cs)監控 ThreadPool .  \n或是單純透過 TimeoutException 的訊息,觀察IOCP與WORKER的Busy值來判斷.   \n`Measurement:`  \nMonitor how your ThreadPool statistics change over time using code like [this](https://github.com/JonCole/SampleCode/blob/master/ThreadPoolMonitor/ThreadPoolLogger.cs).   \nYou can also look at the TimeoutException message from StackExchange.Redis.    \nHere is an example :  \n\n```csharp\nSystem.TimeoutException: Timeout performing EVAL, inst: 8, mgr: Inactive, queue: 0, qu: 0, qs: 0, qc: 0, wr: 0, wq: 0, in: 64221, ar: 0, \nIOCP: (Busy=6,Free=999,Min=2,Max=1000), WORKER: (Busy=7,Free=8184,Min=2,Max=8191)\n```\n\nIn the above message, there are several issues that are interesting:  \nNotice that in the \"IOCP\" section and the \"WORKER\" section you have a \"Busy\" value that is  \ngreater than the \"Min\" value. This means that your threadpool settings need adjusting.  \nYou can also see \"in: 64221\". This indicates that 64211 bytes have been received at the kernel   \nsocket layer but haven't yet been read by the application (e.g. StackExchange.Redis).   \nThis typically means that your application isn't reading data from the network as quickly as   \nthe server is sending it to you.  \n\n`Resolution:` \n調整ThreadPool設定  \nConfigure your ThreadPool Settings to make sure that your threadpool will scale up quickly under burst scenarios.\n\n---\n\n### High CPU usage (CPU 過載)\n\n`Problem:` \nHigh CPU usage on the client is an indication that the system cannot keep up with the work that it has been asked to perform. High CPU is a problem because the CPU is busy and it can't keep up with the work the application is asking it to do. The response from Redis can come very quickly, but because the CPU isn't keeping up with the workload, the response sits in the socket's kernel buffer waiting to be processed. If the delay is long enough, a timeout occurs in spite of the requested data having already arrived from the server.\n\n`Measurement:` \nMonitor the System Wide CPU usage through the azure portal or through the associated perf counter. \nBe careful not to monitor process CPU because a single process can have low CPU usage at the same time that overall system CPU can be high. \nWatch for spikes in CPU usage that correspond with timeouts. As a result of high CPU, \nyou may also see high \"in: XXX\" values in TimeoutException error messages as described above in the \"Burst of traffic\" section. \nNote that in newer builds of StackExchange.Redis, the client-side CPU will be printed out in the timeout error message as long as the environment doesn't block access to the CPU perf counter.\n\n`Note:` \nStackExchange.Redis version 1.1.603 or later now prints out \"local-cpu\" usage when a timeout occurs to help understand when client-side CPU usage may be affecting performance.\n\n`Resolution:` \n增加CPU或是找出CPU產生過載的原因  \nUpgrade to a larger VM size with more CPU capacity or investigate what is causing CPU spikes.\n\n---\n\n### Client Side Bandwidth Exceeded (頻寬不足)\n\n`Problem:` \nDifferent sized client machines have limitations on how much network bandwidth they have available. \nIf the client exceeds the available bandwidth, then data will not be processed on the client side as quickly as the server is sending it. This can lead to timeouts.\n\n`Measurement:` \nMonitor how your Bandwidth usage change over time using code like this. Note that this code may not run successfully in some environments with restricted permissions (like Azure WebSites).\n\n`Resolution:` \n加大頻寬或減少使用量\nIncrease Client VM size or reduce network bandwidth consumption.\n\n----\n\n### Large Request/Response Size (過大的請求/回應量)\n\n`Problem:` \n如圖所示,A與B兩個Request都太過龐大,當同時發動請求時,  \nA 回應的時間過長, 導致 B 的Timeout\nA large request/response can cause timeouts. As an example, suppose your timeout value configured is 1 second. \nYour application requests two keys (e.g. 'A' and 'B') at the same time using the same physical network connection. \nMost clients support \"Pipelining\" of requests, such that both requests 'A' and 'B' are sent on the wire to the server one after the other without waiting for the responses. \nThe server will send the responses back in the same order. If response 'A' is large enough it can eat up most of the timeout for subsequent requests.\n\nBelow, I will try to demonstrate this. In this scenario, Request 'A' and 'B' are sent quickly, \nthe server starts sending responses 'A' and 'B' quickly, but because of data transfer times, \n'B' get stuck behind the other request and times out even though the server responded quickly.\n\n```\n|-------- 1 Second Timeout (A)----------|\n|-Request A-|\n     |-------- 1 Second Timeout (B) ----------|\n     |-Request B-|\n            |- Read Response A --------|\n                                       |- Read Response B-| (**TIMEOUT**)\n```\n\n`Measurement:` \nThis is a difficult one to measure. You basically have to instrument your client code to track large requests and responses.\n\n`Resolution:`\n將所需要的資料分割成數個小片段 再分別取回\nRedis is optimized for a large number of small values, rather than a few large values. \nThe preferred solution is to break up your data into related smaller values. See here for details around why smaller values are recommended.\nIncrease the size of your VM (for client and Redis Cache Server), to get higher bandwidth capabilities, reducing data transfer times for larger responses. \nNote that getting more bandwidth on just the server or just on the client may not be enough. \nMeasure your bandwidth usage and compare it to the capabilities of the size of VM you currently have.\nIncrease the number of ConnectionMultiplexer objects you use and round-robin requests over different connections (e.g. use a connection pool). \nIf you go this route, make sure that you don't create a brand new ConnectionMultiplexer for each request as the overhead of creating the new connection will kill your performance.","slug":"aspdotnet_threadpool_and_redis","published":1,"updated":"2017-01-28T13:29:33.416Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3o6a000algop59kj0o7b","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><em>ASP.NET Thread Pool 的機制如何影響 Redis</em></p>\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><p>線上維護的系統偶爾會發生 Redis Timeout Exception ,<br>並在 elmah 發現以下的錯誤記錄</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Timeout performing SETEX Cache:Prod:WebAPI:Key:<span class=\"number\">20161121152607</span>, inst: <span class=\"number\">18</span>, mgr: ExecuteSelect, err: never,  </div><div class=\"line\">queue: <span class=\"number\">0</span>, qu: <span class=\"number\">0</span>, qs: <span class=\"number\">0</span>, qc: <span class=\"number\">0</span>, wr: <span class=\"number\">0</span>, wq: <span class=\"number\">0</span>, <span class=\"keyword\">in</span>: <span class=\"number\">0</span>, ar: <span class=\"number\">1</span>,  </div><div class=\"line\">IOCP: (Busy=<span class=\"number\">0</span>,Free=<span class=\"number\">1000</span>,Min=<span class=\"number\">8</span>,Max=<span class=\"number\">1000</span>), WORKER: (Busy=<span class=\"number\">13</span>,Free=<span class=\"number\">32754</span>,Min=<span class=\"number\">8</span>,Max=<span class=\"number\">32767</span>), clientName: TYO-MWEB</div></pre></td></tr></table></figure>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><p>這時當 StackExchange.Redis 在進行同步作業的時候,<br>如果超過 <code>synctimeout</code> 的設定值(預設是1000ms),<br>Redis 會佔用.NET的 workerthread<br>而在 .NET 底層隱含著一個機制,<br>會導致錯誤。</p>\n<h3 id=\"Thread-Pool-500ms-的機制\"><a href=\"#Thread-Pool-500ms-的機制\" class=\"headerlink\" title=\"Thread Pool 500ms 的機制\"></a>Thread Pool 500ms 的機制</h3><p><em>一種簡化的說法「 ASP.NET Thread Pool 一秒能建立2個Thread。」</em>  </p>\n<p>設定值 <code>minworkerthread</code> 就像是遊樂場<em>已經開啟</em>的閘門,<br>每當有一個遊客(Task)進來時,立即提供給它使用。<br>但是當遊客(Task)變多的時候,就會開始排隊(Queue),<br>ASP.NET Thread Pool 隱含著一個機制,<br>當它的隊伍(Queue)長達500豪秒沒有移動的話,<br>就會開啟新的閘門(建立新的Thread)。<br>而我的情境屬於<a href=\"#burst_of_traffic\">Burst of traffic</a>,<br>突然大量 Task 湧入 Queue ,<br>ThreadPool 需要大量的 Thread<br>每個新的 Thread 都需要 500ms 的反應時間 ,<br>而累積的時間超過 Task 的 Timeout 設定值時 ,<br>就會拋出Exception. </p>\n<p><img src=\"/images/workerthread_and_iothread/110416_103521_AM.jpg\" alt=\"ASP.NET Thread Pool\"></p>\n<p>ASP.NET Thread Pool 的排隊機制與<code>minworkerthread</code> 設定值相關。<br>可以透過調整 <code>machine.config</code> 來修正。<br>參考(<a href=\"https://support.microsoft.com/zh-tw/kb/821268\" target=\"_blank\" rel=\"external\">爭用、 效能不佳、 和死結 （deadlock） 當您從 ASP.NET 應用程式呼叫 Web 服務</a>)。  </p>\n<p><code>minworkerthread</code> 的預設值是 1 。<br>但是會與執行環境的CPU個數有關,<br>假設你是四核的主機,那就要乘上 4。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">system.web</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">processModel</span> <span class=\"attr\">autoConfig</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">minWorkerThreads</span>=<span class=\"string\">\"1\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">system.web</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><p>當 Redis 發生 Timeout 時,<br>可以透過錯誤訊息判斷其背後的原因是否與 workerthread 有關。<br>在以下的例子可以看到 IOCP 與 WORKER 兩個值。<br>這兩值表示 .Net ThreadPool 內的兩種執行緒,<br>如果 Busy 值很高, 就有可能是 ThreadPool 來不及建立造成的錯誤。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.TimeoutException: Timeout performing MGET <span class=\"number\">2728</span>cc84<span class=\"number\">-58</span>ae<span class=\"number\">-406</span>b<span class=\"number\">-8</span>ec8<span class=\"number\">-3</span>f962419f641,  </div><div class=\"line\">inst: <span class=\"number\">1</span>,mgr: Inactive, queue: <span class=\"number\">73</span>, qu=<span class=\"number\">6</span>, qs=<span class=\"number\">67</span>, qc=<span class=\"number\">0</span>, wr=<span class=\"number\">1</span>/<span class=\"number\">1</span>, <span class=\"keyword\">in</span>=<span class=\"number\">0</span>/<span class=\"number\">0</span>  </div><div class=\"line\">IOCP: (Busy=<span class=\"number\">0</span>, Free=<span class=\"number\">999</span>, Min=<span class=\"number\">2</span>,Max=<span class=\"number\">1000</span>), WORKER (Busy=<span class=\"number\">7</span>,Free=<span class=\"number\">8184</span>,Min=<span class=\"number\">2</span>,Max=<span class=\"number\">8191</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"Error-Code-說明\"><a href=\"#Error-Code-說明\" class=\"headerlink\" title=\"Error Code 說明\"></a>Error Code 說明</h3><table>\n<thead>\n<tr>\n<th>Error code</th>\n<th>Details</th>\n<th>範例</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>inst</td>\n<td>in the last time slice: 0 commands have been issued</td>\n<td>在最後時脈：已發出0個命令</td>\n<td>最後的時脈發出的命令個數</td>\n</tr>\n<tr>\n<td>mgr</td>\n<td>the socket manager is performing “socket.select”, <br>which means it is asking the OS to indicate a socket <br>that has something to do; <br> basically: the reader is not actively reading from <br>the network because it doesn’t think there<br> is anything to do</td>\n<td></td>\n<td>最後的操作命令</td>\n</tr>\n<tr>\n<td>queue</td>\n<td>there are 73 total in-progress operations</td>\n<td>73個正在排隊中的操作</td>\n<td>正在排隊中的操作</td>\n</tr>\n<tr>\n<td>qu</td>\n<td>6 of those are in unsent queue: they have not yet been written to the outbound network</td>\n<td>6個未發送的queue</td>\n<td>未發送的queue</td>\n</tr>\n<tr>\n<td>qs</td>\n<td>67 of those have been sent to the server but a response is not yet available.  The response could be: Not yet sent by the server sent by the server but not yet processed by the client.</td>\n<td>67個已發送的queue</td>\n<td>已發送的queue</td>\n</tr>\n<tr>\n<td>qc</td>\n<td>0 of those have seen replies but have not yet been marked as complete due to waiting on the completion loop</td>\n<td>0個已發送未標記完成的queue</td>\n<td>已發送未標記完成的queue</td>\n</tr>\n<tr>\n<td>wr</td>\n<td>there is an active writer (meaning - those 6 unsent are not being ignored) bytes/activewriters</td>\n<td>有 1 個啟用的writer,(意味著qu的工作並沒有被忽略) bytes/activewriters</td>\n<td>bytes/activewriters</td>\n</tr>\n<tr>\n<td>in</td>\n<td>there are no active readers and zero bytes are available to be read on the NIC bytes/activereaders</td>\n<td>0個reader</td>\n<td>bytes/activereaders</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx\" target=\"_blank\" rel=\"external\">Threading</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms998549.aspx\" target=\"_blank\" rel=\"external\">Improving ASP.NET Performance</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms973903.aspx\" target=\"_blank\" rel=\"external\">Programming the Thread Pool in the .NET Framework</a></li>\n<li><a href=\"https://gist.github.com/JonCole/db0e90bedeb3fc4823c2\" target=\"_blank\" rel=\"external\">DiagnoseRedisErrors-ClientSide</a></li>\n<li><a href=\"https://gist.github.com/JonCole/e65411214030f0d823cb\" target=\"_blank\" rel=\"external\">ThreadPool</a></li>\n</ul>\n<p>(fin)</p>\n<hr>\n<h2 id=\"其它的-Redis-Error-情境\"><a href=\"#其它的-Redis-Error-情境\" class=\"headerlink\" title=\"其它的 Redis Error 情境\"></a>其它的 Redis Error 情境</h2><p>只作摘要式的翻譯。</p>\n<h3 id=\"Memory-pressure-記憶體壓力\"><a href=\"#Memory-pressure-記憶體壓力\" class=\"headerlink\" title=\"Memory pressure (記憶體壓力)\"></a>Memory pressure (記憶體壓力)</h3><p><code>Problem:</code><br>記憶體不足而開始讀取虛擬記憶體(磁碟)而導致特能低落。<br>Memory pressure on the client machine leads to all kinds of performance problems that can<br>delay processing of data that was sent by the Redis instance without any delay.<br>When memory pressure hits, the system typically has to page data from physical memory to<br>virtual memory which is on disk. This page faulting causes the system to slow down significantly.  </p>\n<p><code>Measurement:</code><br>Monitory memory usage on machine to make sure that it does not exceed available memory.<br>Monitor the Page Faults/Sec perf counter. Most systems will have some page faults even during<br>normal operation, so watch for spikes in this page faults perf counter which correspond with timeouts.  </p>\n<p><code>Resolution:</code><br>增加記憶體或是減少記憶體使用量<br>Upgrade to a larger client VM size with more memory or dig into your memory usage patterns<br>to reduce memory consuption.  </p>\n<hr>\n<h3 id=\"Burst-of-traffic\"><a href=\"#Burst-of-traffic\" class=\"headerlink\" title=\"Burst of traffic\"></a><span style=\"color:red;\" id=\"burst_of_traffic\">Burst of traffic</span></h3><p><code>Problem:</code><br>ThreadPool突然大量的工作湧入queue導致執行緒來不及建立。<br> Bursts of traffic combined with poor ThreadPool settings can result in delays in processing<br> data already sent by the Redis Server but not yet consumed on the client side.  </p>\n<p><code>測量:</code><br>可以用<a href=\"https://github.com/JonCole/SampleCode/blob/master/ThreadPoolMonitor/ThreadPoolLogger.cs\" target=\"_blank\" rel=\"external\">程式</a>監控 ThreadPool .<br>或是單純透過 TimeoutException 的訊息,觀察IOCP與WORKER的Busy值來判斷.<br><code>Measurement:</code><br>Monitor how your ThreadPool statistics change over time using code like <a href=\"https://github.com/JonCole/SampleCode/blob/master/ThreadPoolMonitor/ThreadPoolLogger.cs\" target=\"_blank\" rel=\"external\">this</a>.<br>You can also look at the TimeoutException message from StackExchange.Redis.<br>Here is an example :  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.TimeoutException: Timeout performing EVAL, inst: <span class=\"number\">8</span>, mgr: Inactive, queue: <span class=\"number\">0</span>, qu: <span class=\"number\">0</span>, qs: <span class=\"number\">0</span>, qc: <span class=\"number\">0</span>, wr: <span class=\"number\">0</span>, wq: <span class=\"number\">0</span>, <span class=\"keyword\">in</span>: <span class=\"number\">64221</span>, ar: <span class=\"number\">0</span>, </div><div class=\"line\">IOCP: (Busy=<span class=\"number\">6</span>,Free=<span class=\"number\">999</span>,Min=<span class=\"number\">2</span>,Max=<span class=\"number\">1000</span>), WORKER: (Busy=<span class=\"number\">7</span>,Free=<span class=\"number\">8184</span>,Min=<span class=\"number\">2</span>,Max=<span class=\"number\">8191</span>)</div></pre></td></tr></table></figure>\n<p>In the above message, there are several issues that are interesting:<br>Notice that in the “IOCP” section and the “WORKER” section you have a “Busy” value that is<br>greater than the “Min” value. This means that your threadpool settings need adjusting.<br>You can also see “in: 64221”. This indicates that 64211 bytes have been received at the kernel<br>socket layer but haven’t yet been read by the application (e.g. StackExchange.Redis).<br>This typically means that your application isn’t reading data from the network as quickly as<br>the server is sending it to you.  </p>\n<p><code>Resolution:</code><br>調整ThreadPool設定<br>Configure your ThreadPool Settings to make sure that your threadpool will scale up quickly under burst scenarios.</p>\n<hr>\n<h3 id=\"High-CPU-usage-CPU-過載\"><a href=\"#High-CPU-usage-CPU-過載\" class=\"headerlink\" title=\"High CPU usage (CPU 過載)\"></a>High CPU usage (CPU 過載)</h3><p><code>Problem:</code><br>High CPU usage on the client is an indication that the system cannot keep up with the work that it has been asked to perform. High CPU is a problem because the CPU is busy and it can’t keep up with the work the application is asking it to do. The response from Redis can come very quickly, but because the CPU isn’t keeping up with the workload, the response sits in the socket’s kernel buffer waiting to be processed. If the delay is long enough, a timeout occurs in spite of the requested data having already arrived from the server.</p>\n<p><code>Measurement:</code><br>Monitor the System Wide CPU usage through the azure portal or through the associated perf counter.<br>Be careful not to monitor process CPU because a single process can have low CPU usage at the same time that overall system CPU can be high.<br>Watch for spikes in CPU usage that correspond with timeouts. As a result of high CPU,<br>you may also see high “in: XXX” values in TimeoutException error messages as described above in the “Burst of traffic” section.<br>Note that in newer builds of StackExchange.Redis, the client-side CPU will be printed out in the timeout error message as long as the environment doesn’t block access to the CPU perf counter.</p>\n<p><code>Note:</code><br>StackExchange.Redis version 1.1.603 or later now prints out “local-cpu” usage when a timeout occurs to help understand when client-side CPU usage may be affecting performance.</p>\n<p><code>Resolution:</code><br>增加CPU或是找出CPU產生過載的原因<br>Upgrade to a larger VM size with more CPU capacity or investigate what is causing CPU spikes.</p>\n<hr>\n<h3 id=\"Client-Side-Bandwidth-Exceeded-頻寬不足\"><a href=\"#Client-Side-Bandwidth-Exceeded-頻寬不足\" class=\"headerlink\" title=\"Client Side Bandwidth Exceeded (頻寬不足)\"></a>Client Side Bandwidth Exceeded (頻寬不足)</h3><p><code>Problem:</code><br>Different sized client machines have limitations on how much network bandwidth they have available.<br>If the client exceeds the available bandwidth, then data will not be processed on the client side as quickly as the server is sending it. This can lead to timeouts.</p>\n<p><code>Measurement:</code><br>Monitor how your Bandwidth usage change over time using code like this. Note that this code may not run successfully in some environments with restricted permissions (like Azure WebSites).</p>\n<p><code>Resolution:</code><br>加大頻寬或減少使用量<br>Increase Client VM size or reduce network bandwidth consumption.</p>\n<hr>\n<h3 id=\"Large-Request-Response-Size-過大的請求-回應量\"><a href=\"#Large-Request-Response-Size-過大的請求-回應量\" class=\"headerlink\" title=\"Large Request/Response Size (過大的請求/回應量)\"></a>Large Request/Response Size (過大的請求/回應量)</h3><p><code>Problem:</code><br>如圖所示,A與B兩個Request都太過龐大,當同時發動請求時,<br>A 回應的時間過長, 導致 B 的Timeout<br>A large request/response can cause timeouts. As an example, suppose your timeout value configured is 1 second.<br>Your application requests two keys (e.g. ‘A’ and ‘B’) at the same time using the same physical network connection.<br>Most clients support “Pipelining” of requests, such that both requests ‘A’ and ‘B’ are sent on the wire to the server one after the other without waiting for the responses.<br>The server will send the responses back in the same order. If response ‘A’ is large enough it can eat up most of the timeout for subsequent requests.</p>\n<p>Below, I will try to demonstrate this. In this scenario, Request ‘A’ and ‘B’ are sent quickly,<br>the server starts sending responses ‘A’ and ‘B’ quickly, but because of data transfer times,<br>‘B’ get stuck behind the other request and times out even though the server responded quickly.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">|-------- 1 Second Timeout (A)----------|</div><div class=\"line\">|-Request A-|</div><div class=\"line\">     |-------- 1 Second Timeout (B) ----------|</div><div class=\"line\">     |-Request B-|</div><div class=\"line\">            |- Read Response A --------|</div><div class=\"line\">                                       |- Read Response B-| (**TIMEOUT**)</div></pre></td></tr></table></figure>\n<p><code>Measurement:</code><br>This is a difficult one to measure. You basically have to instrument your client code to track large requests and responses.</p>\n<p><code>Resolution:</code><br>將所需要的資料分割成數個小片段 再分別取回<br>Redis is optimized for a large number of small values, rather than a few large values.<br>The preferred solution is to break up your data into related smaller values. See here for details around why smaller values are recommended.<br>Increase the size of your VM (for client and Redis Cache Server), to get higher bandwidth capabilities, reducing data transfer times for larger responses.<br>Note that getting more bandwidth on just the server or just on the client may not be enough.<br>Measure your bandwidth usage and compare it to the capabilities of the size of VM you currently have.<br>Increase the number of ConnectionMultiplexer objects you use and round-robin requests over different connections (e.g. use a connection pool).<br>If you go this route, make sure that you don’t create a brand new ConnectionMultiplexer for each request as the overhead of creating the new connection will kill your performance.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><em>ASP.NET Thread Pool 的機制如何影響 Redis</em></p>\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><p>線上維護的系統偶爾會發生 Redis Timeout Exception ,<br>並在 elmah 發現以下的錯誤記錄</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Timeout performing SETEX Cache:Prod:WebAPI:Key:<span class=\"number\">20161121152607</span>, inst: <span class=\"number\">18</span>, mgr: ExecuteSelect, err: never,  </div><div class=\"line\">queue: <span class=\"number\">0</span>, qu: <span class=\"number\">0</span>, qs: <span class=\"number\">0</span>, qc: <span class=\"number\">0</span>, wr: <span class=\"number\">0</span>, wq: <span class=\"number\">0</span>, <span class=\"keyword\">in</span>: <span class=\"number\">0</span>, ar: <span class=\"number\">1</span>,  </div><div class=\"line\">IOCP: (Busy=<span class=\"number\">0</span>,Free=<span class=\"number\">1000</span>,Min=<span class=\"number\">8</span>,Max=<span class=\"number\">1000</span>), WORKER: (Busy=<span class=\"number\">13</span>,Free=<span class=\"number\">32754</span>,Min=<span class=\"number\">8</span>,Max=<span class=\"number\">32767</span>), clientName: TYO-MWEB</div></pre></td></tr></table></figure>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><p>這時當 StackExchange.Redis 在進行同步作業的時候,<br>如果超過 <code>synctimeout</code> 的設定值(預設是1000ms),<br>Redis 會佔用.NET的 workerthread<br>而在 .NET 底層隱含著一個機制,<br>會導致錯誤。</p>\n<h3 id=\"Thread-Pool-500ms-的機制\"><a href=\"#Thread-Pool-500ms-的機制\" class=\"headerlink\" title=\"Thread Pool 500ms 的機制\"></a>Thread Pool 500ms 的機制</h3><p><em>一種簡化的說法「 ASP.NET Thread Pool 一秒能建立2個Thread。」</em>  </p>\n<p>設定值 <code>minworkerthread</code> 就像是遊樂場<em>已經開啟</em>的閘門,<br>每當有一個遊客(Task)進來時,立即提供給它使用。<br>但是當遊客(Task)變多的時候,就會開始排隊(Queue),<br>ASP.NET Thread Pool 隱含著一個機制,<br>當它的隊伍(Queue)長達500豪秒沒有移動的話,<br>就會開啟新的閘門(建立新的Thread)。<br>而我的情境屬於<a href=\"#burst_of_traffic\">Burst of traffic</a>,<br>突然大量 Task 湧入 Queue ,<br>ThreadPool 需要大量的 Thread<br>每個新的 Thread 都需要 500ms 的反應時間 ,<br>而累積的時間超過 Task 的 Timeout 設定值時 ,<br>就會拋出Exception. </p>\n<p><img src=\"/images/workerthread_and_iothread/110416_103521_AM.jpg\" alt=\"ASP.NET Thread Pool\"></p>\n<p>ASP.NET Thread Pool 的排隊機制與<code>minworkerthread</code> 設定值相關。<br>可以透過調整 <code>machine.config</code> 來修正。<br>參考(<a href=\"https://support.microsoft.com/zh-tw/kb/821268\" target=\"_blank\" rel=\"external\">爭用、 效能不佳、 和死結 （deadlock） 當您從 ASP.NET 應用程式呼叫 Web 服務</a>)。  </p>\n<p><code>minworkerthread</code> 的預設值是 1 。<br>但是會與執行環境的CPU個數有關,<br>假設你是四核的主機,那就要乘上 4。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">system.web</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">processModel</span> <span class=\"attr\">autoConfig</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">minWorkerThreads</span>=<span class=\"string\">\"1\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">system.web</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><p>當 Redis 發生 Timeout 時,<br>可以透過錯誤訊息判斷其背後的原因是否與 workerthread 有關。<br>在以下的例子可以看到 IOCP 與 WORKER 兩個值。<br>這兩值表示 .Net ThreadPool 內的兩種執行緒,<br>如果 Busy 值很高, 就有可能是 ThreadPool 來不及建立造成的錯誤。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.TimeoutException: Timeout performing MGET <span class=\"number\">2728</span>cc84<span class=\"number\">-58</span>ae<span class=\"number\">-406</span>b<span class=\"number\">-8</span>ec8<span class=\"number\">-3</span>f962419f641,  </div><div class=\"line\">inst: <span class=\"number\">1</span>,mgr: Inactive, queue: <span class=\"number\">73</span>, qu=<span class=\"number\">6</span>, qs=<span class=\"number\">67</span>, qc=<span class=\"number\">0</span>, wr=<span class=\"number\">1</span>/<span class=\"number\">1</span>, <span class=\"keyword\">in</span>=<span class=\"number\">0</span>/<span class=\"number\">0</span>  </div><div class=\"line\">IOCP: (Busy=<span class=\"number\">0</span>, Free=<span class=\"number\">999</span>, Min=<span class=\"number\">2</span>,Max=<span class=\"number\">1000</span>), WORKER (Busy=<span class=\"number\">7</span>,Free=<span class=\"number\">8184</span>,Min=<span class=\"number\">2</span>,Max=<span class=\"number\">8191</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"Error-Code-說明\"><a href=\"#Error-Code-說明\" class=\"headerlink\" title=\"Error Code 說明\"></a>Error Code 說明</h3><table>\n<thead>\n<tr>\n<th>Error code</th>\n<th>Details</th>\n<th>範例</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>inst</td>\n<td>in the last time slice: 0 commands have been issued</td>\n<td>在最後時脈：已發出0個命令</td>\n<td>最後的時脈發出的命令個數</td>\n</tr>\n<tr>\n<td>mgr</td>\n<td>the socket manager is performing “socket.select”, <br>which means it is asking the OS to indicate a socket <br>that has something to do; <br> basically: the reader is not actively reading from <br>the network because it doesn’t think there<br> is anything to do</td>\n<td></td>\n<td>最後的操作命令</td>\n</tr>\n<tr>\n<td>queue</td>\n<td>there are 73 total in-progress operations</td>\n<td>73個正在排隊中的操作</td>\n<td>正在排隊中的操作</td>\n</tr>\n<tr>\n<td>qu</td>\n<td>6 of those are in unsent queue: they have not yet been written to the outbound network</td>\n<td>6個未發送的queue</td>\n<td>未發送的queue</td>\n</tr>\n<tr>\n<td>qs</td>\n<td>67 of those have been sent to the server but a response is not yet available.  The response could be: Not yet sent by the server sent by the server but not yet processed by the client.</td>\n<td>67個已發送的queue</td>\n<td>已發送的queue</td>\n</tr>\n<tr>\n<td>qc</td>\n<td>0 of those have seen replies but have not yet been marked as complete due to waiting on the completion loop</td>\n<td>0個已發送未標記完成的queue</td>\n<td>已發送未標記完成的queue</td>\n</tr>\n<tr>\n<td>wr</td>\n<td>there is an active writer (meaning - those 6 unsent are not being ignored) bytes/activewriters</td>\n<td>有 1 個啟用的writer,(意味著qu的工作並沒有被忽略) bytes/activewriters</td>\n<td>bytes/activewriters</td>\n</tr>\n<tr>\n<td>in</td>\n<td>there are no active readers and zero bytes are available to be read on the NIC bytes/activereaders</td>\n<td>0個reader</td>\n<td>bytes/activereaders</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/orm-9780596527570-03-19.aspx\" target=\"_blank\" rel=\"external\">Threading</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms998549.aspx\" target=\"_blank\" rel=\"external\">Improving ASP.NET Performance</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms973903.aspx\" target=\"_blank\" rel=\"external\">Programming the Thread Pool in the .NET Framework</a></li>\n<li><a href=\"https://gist.github.com/JonCole/db0e90bedeb3fc4823c2\" target=\"_blank\" rel=\"external\">DiagnoseRedisErrors-ClientSide</a></li>\n<li><a href=\"https://gist.github.com/JonCole/e65411214030f0d823cb\" target=\"_blank\" rel=\"external\">ThreadPool</a></li>\n</ul>\n<p>(fin)</p>\n<hr>\n<h2 id=\"其它的-Redis-Error-情境\"><a href=\"#其它的-Redis-Error-情境\" class=\"headerlink\" title=\"其它的 Redis Error 情境\"></a>其它的 Redis Error 情境</h2><p>只作摘要式的翻譯。</p>\n<h3 id=\"Memory-pressure-記憶體壓力\"><a href=\"#Memory-pressure-記憶體壓力\" class=\"headerlink\" title=\"Memory pressure (記憶體壓力)\"></a>Memory pressure (記憶體壓力)</h3><p><code>Problem:</code><br>記憶體不足而開始讀取虛擬記憶體(磁碟)而導致特能低落。<br>Memory pressure on the client machine leads to all kinds of performance problems that can<br>delay processing of data that was sent by the Redis instance without any delay.<br>When memory pressure hits, the system typically has to page data from physical memory to<br>virtual memory which is on disk. This page faulting causes the system to slow down significantly.  </p>\n<p><code>Measurement:</code><br>Monitory memory usage on machine to make sure that it does not exceed available memory.<br>Monitor the Page Faults/Sec perf counter. Most systems will have some page faults even during<br>normal operation, so watch for spikes in this page faults perf counter which correspond with timeouts.  </p>\n<p><code>Resolution:</code><br>增加記憶體或是減少記憶體使用量<br>Upgrade to a larger client VM size with more memory or dig into your memory usage patterns<br>to reduce memory consuption.  </p>\n<hr>\n<h3 id=\"Burst-of-traffic\"><a href=\"#Burst-of-traffic\" class=\"headerlink\" title=\"Burst of traffic\"></a><span style=\"color:red;\" id=\"burst_of_traffic\">Burst of traffic</span></h3><p><code>Problem:</code><br>ThreadPool突然大量的工作湧入queue導致執行緒來不及建立。<br> Bursts of traffic combined with poor ThreadPool settings can result in delays in processing<br> data already sent by the Redis Server but not yet consumed on the client side.  </p>\n<p><code>測量:</code><br>可以用<a href=\"https://github.com/JonCole/SampleCode/blob/master/ThreadPoolMonitor/ThreadPoolLogger.cs\" target=\"_blank\" rel=\"external\">程式</a>監控 ThreadPool .<br>或是單純透過 TimeoutException 的訊息,觀察IOCP與WORKER的Busy值來判斷.<br><code>Measurement:</code><br>Monitor how your ThreadPool statistics change over time using code like <a href=\"https://github.com/JonCole/SampleCode/blob/master/ThreadPoolMonitor/ThreadPoolLogger.cs\" target=\"_blank\" rel=\"external\">this</a>.<br>You can also look at the TimeoutException message from StackExchange.Redis.<br>Here is an example :  </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.TimeoutException: Timeout performing EVAL, inst: <span class=\"number\">8</span>, mgr: Inactive, queue: <span class=\"number\">0</span>, qu: <span class=\"number\">0</span>, qs: <span class=\"number\">0</span>, qc: <span class=\"number\">0</span>, wr: <span class=\"number\">0</span>, wq: <span class=\"number\">0</span>, <span class=\"keyword\">in</span>: <span class=\"number\">64221</span>, ar: <span class=\"number\">0</span>, </div><div class=\"line\">IOCP: (Busy=<span class=\"number\">6</span>,Free=<span class=\"number\">999</span>,Min=<span class=\"number\">2</span>,Max=<span class=\"number\">1000</span>), WORKER: (Busy=<span class=\"number\">7</span>,Free=<span class=\"number\">8184</span>,Min=<span class=\"number\">2</span>,Max=<span class=\"number\">8191</span>)</div></pre></td></tr></table></figure>\n<p>In the above message, there are several issues that are interesting:<br>Notice that in the “IOCP” section and the “WORKER” section you have a “Busy” value that is<br>greater than the “Min” value. This means that your threadpool settings need adjusting.<br>You can also see “in: 64221”. This indicates that 64211 bytes have been received at the kernel<br>socket layer but haven’t yet been read by the application (e.g. StackExchange.Redis).<br>This typically means that your application isn’t reading data from the network as quickly as<br>the server is sending it to you.  </p>\n<p><code>Resolution:</code><br>調整ThreadPool設定<br>Configure your ThreadPool Settings to make sure that your threadpool will scale up quickly under burst scenarios.</p>\n<hr>\n<h3 id=\"High-CPU-usage-CPU-過載\"><a href=\"#High-CPU-usage-CPU-過載\" class=\"headerlink\" title=\"High CPU usage (CPU 過載)\"></a>High CPU usage (CPU 過載)</h3><p><code>Problem:</code><br>High CPU usage on the client is an indication that the system cannot keep up with the work that it has been asked to perform. High CPU is a problem because the CPU is busy and it can’t keep up with the work the application is asking it to do. The response from Redis can come very quickly, but because the CPU isn’t keeping up with the workload, the response sits in the socket’s kernel buffer waiting to be processed. If the delay is long enough, a timeout occurs in spite of the requested data having already arrived from the server.</p>\n<p><code>Measurement:</code><br>Monitor the System Wide CPU usage through the azure portal or through the associated perf counter.<br>Be careful not to monitor process CPU because a single process can have low CPU usage at the same time that overall system CPU can be high.<br>Watch for spikes in CPU usage that correspond with timeouts. As a result of high CPU,<br>you may also see high “in: XXX” values in TimeoutException error messages as described above in the “Burst of traffic” section.<br>Note that in newer builds of StackExchange.Redis, the client-side CPU will be printed out in the timeout error message as long as the environment doesn’t block access to the CPU perf counter.</p>\n<p><code>Note:</code><br>StackExchange.Redis version 1.1.603 or later now prints out “local-cpu” usage when a timeout occurs to help understand when client-side CPU usage may be affecting performance.</p>\n<p><code>Resolution:</code><br>增加CPU或是找出CPU產生過載的原因<br>Upgrade to a larger VM size with more CPU capacity or investigate what is causing CPU spikes.</p>\n<hr>\n<h3 id=\"Client-Side-Bandwidth-Exceeded-頻寬不足\"><a href=\"#Client-Side-Bandwidth-Exceeded-頻寬不足\" class=\"headerlink\" title=\"Client Side Bandwidth Exceeded (頻寬不足)\"></a>Client Side Bandwidth Exceeded (頻寬不足)</h3><p><code>Problem:</code><br>Different sized client machines have limitations on how much network bandwidth they have available.<br>If the client exceeds the available bandwidth, then data will not be processed on the client side as quickly as the server is sending it. This can lead to timeouts.</p>\n<p><code>Measurement:</code><br>Monitor how your Bandwidth usage change over time using code like this. Note that this code may not run successfully in some environments with restricted permissions (like Azure WebSites).</p>\n<p><code>Resolution:</code><br>加大頻寬或減少使用量<br>Increase Client VM size or reduce network bandwidth consumption.</p>\n<hr>\n<h3 id=\"Large-Request-Response-Size-過大的請求-回應量\"><a href=\"#Large-Request-Response-Size-過大的請求-回應量\" class=\"headerlink\" title=\"Large Request/Response Size (過大的請求/回應量)\"></a>Large Request/Response Size (過大的請求/回應量)</h3><p><code>Problem:</code><br>如圖所示,A與B兩個Request都太過龐大,當同時發動請求時,<br>A 回應的時間過長, 導致 B 的Timeout<br>A large request/response can cause timeouts. As an example, suppose your timeout value configured is 1 second.<br>Your application requests two keys (e.g. ‘A’ and ‘B’) at the same time using the same physical network connection.<br>Most clients support “Pipelining” of requests, such that both requests ‘A’ and ‘B’ are sent on the wire to the server one after the other without waiting for the responses.<br>The server will send the responses back in the same order. If response ‘A’ is large enough it can eat up most of the timeout for subsequent requests.</p>\n<p>Below, I will try to demonstrate this. In this scenario, Request ‘A’ and ‘B’ are sent quickly,<br>the server starts sending responses ‘A’ and ‘B’ quickly, but because of data transfer times,<br>‘B’ get stuck behind the other request and times out even though the server responded quickly.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">|-------- 1 Second Timeout (A)----------|</div><div class=\"line\">|-Request A-|</div><div class=\"line\">     |-------- 1 Second Timeout (B) ----------|</div><div class=\"line\">     |-Request B-|</div><div class=\"line\">            |- Read Response A --------|</div><div class=\"line\">                                       |- Read Response B-| (**TIMEOUT**)</div></pre></td></tr></table></figure>\n<p><code>Measurement:</code><br>This is a difficult one to measure. You basically have to instrument your client code to track large requests and responses.</p>\n<p><code>Resolution:</code><br>將所需要的資料分割成數個小片段 再分別取回<br>Redis is optimized for a large number of small values, rather than a few large values.<br>The preferred solution is to break up your data into related smaller values. See here for details around why smaller values are recommended.<br>Increase the size of your VM (for client and Redis Cache Server), to get higher bandwidth capabilities, reducing data transfer times for larger responses.<br>Note that getting more bandwidth on just the server or just on the client may not be enough.<br>Measure your bandwidth usage and compare it to the capabilities of the size of VM you currently have.<br>Increase the number of ConnectionMultiplexer objects you use and round-robin requests over different connections (e.g. use a connection pool).<br>If you go this route, make sure that you don’t create a brand new ConnectionMultiplexer for each request as the overhead of creating the new connection will kill your performance.</p>\n"},{"title":"CI/CD 環境建置筆記 - 使用Openshift 的 Jenkins (失敗)","date":"2017-01-15T14:16:42.000Z","_content":"\n## 前情提要\n\n- [CI/CD 環境建置筆記 - 前言<目的>](/2017/01/15/ci_use_jenkins/)\n\n## 操作記錄(失敗)\n\n### 目標: \n\n- 在 Openshift 新增一個 Jenkins Server\n\n### 失敗原因: \n\n- 我找不到方法在 Openshift 上建置的 Jenkins Server \n\n### 記錄:\n\n1. 登入OpenShift的[web console](https://openshift.redhat.com/app/console/applications)\n2. Add Application 選擇 `Jenkins Server`，使用預設設定Create Application.  \nPublic URL 設定為 http://jenkins-youraccount.rhcloud.com\n3. 連線進 http://jenkins-youraccount.rhcloud.com 會發現需要帳密登入\n4. 取得帳號密碼\n\t1. 使用 SSH 連線 Openshift 的 Jenkins Server (可以在web console 查到連結)\n\t\t`> ssh 4263*****************@jenkins-youraccount.rhcloud.com`\n\t2. 查看以下兩個檔案可以取得帳號密碼\n\t`JENKINS_USERNAME`\n\t`JENKINS_PASSWORD` \n\t\n\t \n5. 登入後，管理 Jenkins > 設定系統\n\t1. 將執行程式數量設定為 1 \n6. 選擇新增作業\n\t1. 第一步要將原始碼自Github pull下來;在原始碼管理選擇`Git` , 設定好`Repositories`、`Branches to build`\n\t\n7. **執行一次建置**，這個步驟是為了產生work space 。 \n8.  SSH 連線 Openshift，切換目錄到你的專案的work space \n\t`> ssh 4263*****************@jenkins-youraccount.rhcloud.com`\n\t`> cd app-root/data/workspace/your_project_name`\n9.  檢查一下目前Git的遠端Repo有哪些\n\t`> git remote -v`\n10. 將Openshift上的nodejs應用程式repo設為remote\n\t`>git remote add openshift ssh://5**********************@nodejs-youraccount.rhcloud.com/~/git/nodejs.git/`\n11. 推送到`openshift remote`\n失敗!!原因是權限問題，Openshift remote 是透過 SSH 連線，\n在認証公鑰的過程中，需要寫入 `~/.ssh/known_hosts` 檔案。\n但是 Openshift 建立的 Jenkins Server 登入帳號，權限並不足以寫入而造成失敗\n\n","source":"_posts/ci_use_jenkins_on_openshfit.md","raw":"---\ntitle: CI/CD 環境建置筆記 - 使用Openshift 的 Jenkins (失敗)\ndate: 2017/01/15 22:16:42\ntag:\n  - CI\n  - Jenkins\n  - Openshift\n---\n\n## 前情提要\n\n- [CI/CD 環境建置筆記 - 前言<目的>](/2017/01/15/ci_use_jenkins/)\n\n## 操作記錄(失敗)\n\n### 目標: \n\n- 在 Openshift 新增一個 Jenkins Server\n\n### 失敗原因: \n\n- 我找不到方法在 Openshift 上建置的 Jenkins Server \n\n### 記錄:\n\n1. 登入OpenShift的[web console](https://openshift.redhat.com/app/console/applications)\n2. Add Application 選擇 `Jenkins Server`，使用預設設定Create Application.  \nPublic URL 設定為 http://jenkins-youraccount.rhcloud.com\n3. 連線進 http://jenkins-youraccount.rhcloud.com 會發現需要帳密登入\n4. 取得帳號密碼\n\t1. 使用 SSH 連線 Openshift 的 Jenkins Server (可以在web console 查到連結)\n\t\t`> ssh 4263*****************@jenkins-youraccount.rhcloud.com`\n\t2. 查看以下兩個檔案可以取得帳號密碼\n\t`JENKINS_USERNAME`\n\t`JENKINS_PASSWORD` \n\t\n\t \n5. 登入後，管理 Jenkins > 設定系統\n\t1. 將執行程式數量設定為 1 \n6. 選擇新增作業\n\t1. 第一步要將原始碼自Github pull下來;在原始碼管理選擇`Git` , 設定好`Repositories`、`Branches to build`\n\t\n7. **執行一次建置**，這個步驟是為了產生work space 。 \n8.  SSH 連線 Openshift，切換目錄到你的專案的work space \n\t`> ssh 4263*****************@jenkins-youraccount.rhcloud.com`\n\t`> cd app-root/data/workspace/your_project_name`\n9.  檢查一下目前Git的遠端Repo有哪些\n\t`> git remote -v`\n10. 將Openshift上的nodejs應用程式repo設為remote\n\t`>git remote add openshift ssh://5**********************@nodejs-youraccount.rhcloud.com/~/git/nodejs.git/`\n11. 推送到`openshift remote`\n失敗!!原因是權限問題，Openshift remote 是透過 SSH 連線，\n在認証公鑰的過程中，需要寫入 `~/.ssh/known_hosts` 檔案。\n但是 Openshift 建立的 Jenkins Server 登入帳號，權限並不足以寫入而造成失敗\n\n","slug":"ci_use_jenkins_on_openshfit","published":1,"updated":"2017-01-15T16:12:04.053Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3o6p000blgop64u4k29k","content":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><ul>\n<li><a href=\"/2017/01/15/ci_use_jenkins/\">CI/CD 環境建置筆記 - 前言&lt;目的&gt;</a></li>\n</ul>\n<h2 id=\"操作記錄-失敗\"><a href=\"#操作記錄-失敗\" class=\"headerlink\" title=\"操作記錄(失敗)\"></a>操作記錄(失敗)</h2><h3 id=\"目標\"><a href=\"#目標\" class=\"headerlink\" title=\"目標:\"></a>目標:</h3><ul>\n<li>在 Openshift 新增一個 Jenkins Server</li>\n</ul>\n<h3 id=\"失敗原因\"><a href=\"#失敗原因\" class=\"headerlink\" title=\"失敗原因:\"></a>失敗原因:</h3><ul>\n<li>我找不到方法在 Openshift 上建置的 Jenkins Server </li>\n</ul>\n<h3 id=\"記錄\"><a href=\"#記錄\" class=\"headerlink\" title=\"記錄:\"></a>記錄:</h3><ol>\n<li>登入OpenShift的<a href=\"https://openshift.redhat.com/app/console/applications\" target=\"_blank\" rel=\"external\">web console</a></li>\n<li>Add Application 選擇 <code>Jenkins Server</code>，使用預設設定Create Application.<br>Public URL 設定為 <a href=\"http://jenkins-youraccount.rhcloud.com\" target=\"_blank\" rel=\"external\">http://jenkins-youraccount.rhcloud.com</a></li>\n<li>連線進 <a href=\"http://jenkins-youraccount.rhcloud.com\" target=\"_blank\" rel=\"external\">http://jenkins-youraccount.rhcloud.com</a> 會發現需要帳密登入</li>\n<li>取得帳號密碼<ol>\n<li>使用 SSH 連線 Openshift 的 Jenkins Server (可以在web console 查到連結)<br> <code>&gt; ssh 4263*****************@jenkins-youraccount.rhcloud.com</code></li>\n<li>查看以下兩個檔案可以取得帳號密碼<br><code>JENKINS_USERNAME</code><br><code>JENKINS_PASSWORD</code> </li>\n</ol>\n</li>\n</ol>\n<ol>\n<li>登入後，管理 Jenkins &gt; 設定系統<ol>\n<li>將執行程式數量設定為 1 </li>\n</ol>\n</li>\n<li><p>選擇新增作業</p>\n<ol>\n<li>第一步要將原始碼自Github pull下來;在原始碼管理選擇<code>Git</code> , 設定好<code>Repositories</code>、<code>Branches to build</code></li>\n</ol>\n</li>\n<li><p><strong>執行一次建置</strong>，這個步驟是為了產生work space 。 </p>\n</li>\n<li>SSH 連線 Openshift，切換目錄到你的專案的work space<br><code>&gt; ssh 4263*****************@jenkins-youraccount.rhcloud.com</code><br><code>&gt; cd app-root/data/workspace/your_project_name</code></li>\n<li>檢查一下目前Git的遠端Repo有哪些<br><code>&gt; git remote -v</code></li>\n<li>將Openshift上的nodejs應用程式repo設為remote<br><code>&gt;git remote add openshift ssh://5**********************@nodejs-youraccount.rhcloud.com/~/git/nodejs.git/</code></li>\n<li>推送到<code>openshift remote</code><br>失敗!!原因是權限問題，Openshift remote 是透過 SSH 連線，<br>在認証公鑰的過程中，需要寫入 <code>~/.ssh/known_hosts</code> 檔案。<br>但是 Openshift 建立的 Jenkins Server 登入帳號，權限並不足以寫入而造成失敗</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><ul>\n<li><a href=\"/2017/01/15/ci_use_jenkins/\">CI/CD 環境建置筆記 - 前言&lt;目的&gt;</a></li>\n</ul>\n<h2 id=\"操作記錄-失敗\"><a href=\"#操作記錄-失敗\" class=\"headerlink\" title=\"操作記錄(失敗)\"></a>操作記錄(失敗)</h2><h3 id=\"目標\"><a href=\"#目標\" class=\"headerlink\" title=\"目標:\"></a>目標:</h3><ul>\n<li>在 Openshift 新增一個 Jenkins Server</li>\n</ul>\n<h3 id=\"失敗原因\"><a href=\"#失敗原因\" class=\"headerlink\" title=\"失敗原因:\"></a>失敗原因:</h3><ul>\n<li>我找不到方法在 Openshift 上建置的 Jenkins Server </li>\n</ul>\n<h3 id=\"記錄\"><a href=\"#記錄\" class=\"headerlink\" title=\"記錄:\"></a>記錄:</h3><ol>\n<li>登入OpenShift的<a href=\"https://openshift.redhat.com/app/console/applications\" target=\"_blank\" rel=\"external\">web console</a></li>\n<li>Add Application 選擇 <code>Jenkins Server</code>，使用預設設定Create Application.<br>Public URL 設定為 <a href=\"http://jenkins-youraccount.rhcloud.com\" target=\"_blank\" rel=\"external\">http://jenkins-youraccount.rhcloud.com</a></li>\n<li>連線進 <a href=\"http://jenkins-youraccount.rhcloud.com\" target=\"_blank\" rel=\"external\">http://jenkins-youraccount.rhcloud.com</a> 會發現需要帳密登入</li>\n<li>取得帳號密碼<ol>\n<li>使用 SSH 連線 Openshift 的 Jenkins Server (可以在web console 查到連結)<br> <code>&gt; ssh 4263*****************@jenkins-youraccount.rhcloud.com</code></li>\n<li>查看以下兩個檔案可以取得帳號密碼<br><code>JENKINS_USERNAME</code><br><code>JENKINS_PASSWORD</code> </li>\n</ol>\n</li>\n</ol>\n<ol>\n<li>登入後，管理 Jenkins &gt; 設定系統<ol>\n<li>將執行程式數量設定為 1 </li>\n</ol>\n</li>\n<li><p>選擇新增作業</p>\n<ol>\n<li>第一步要將原始碼自Github pull下來;在原始碼管理選擇<code>Git</code> , 設定好<code>Repositories</code>、<code>Branches to build</code></li>\n</ol>\n</li>\n<li><p><strong>執行一次建置</strong>，這個步驟是為了產生work space 。 </p>\n</li>\n<li>SSH 連線 Openshift，切換目錄到你的專案的work space<br><code>&gt; ssh 4263*****************@jenkins-youraccount.rhcloud.com</code><br><code>&gt; cd app-root/data/workspace/your_project_name</code></li>\n<li>檢查一下目前Git的遠端Repo有哪些<br><code>&gt; git remote -v</code></li>\n<li>將Openshift上的nodejs應用程式repo設為remote<br><code>&gt;git remote add openshift ssh://5**********************@nodejs-youraccount.rhcloud.com/~/git/nodejs.git/</code></li>\n<li>推送到<code>openshift remote</code><br>失敗!!原因是權限問題，Openshift remote 是透過 SSH 連線，<br>在認証公鑰的過程中，需要寫入 <code>~/.ssh/known_hosts</code> 檔案。<br>但是 Openshift 建立的 Jenkins Server 登入帳號，權限並不足以寫入而造成失敗</li>\n</ol>\n"},{"title":"如何讓google analytics追踪你的Hexo Blog","date":"2016-08-25T06:12:07.000Z","_content":"## 前置作業\n1. 你要有google帳號，並申請好你的google_analytics ID\n2. 這個記錄僅針對Hexo預設的Theme有作用，未來有改Theme的話，可能會需要手動加入，再寫文章補上\n\n## 開啟_config.yml\n1. 確定一下你是使用預設的theme `landscape`\n        ## Themes: https://hexo.io/themes/\n        theme: landscape\n2. 開啟 `root/themes/landscape/_config.yml`\n3. 找到以下的設定區段\n        # Miscellaneous\n        google_analytics:\n4. 填入步驟1. 中所取得 google_analytics ID\n5. 部署網站，完成!\n\n(fin)\n","source":"_posts/add_google_analytics_to_hexo_blog_1.md","raw":"---\ntitle: 如何讓google analytics追踪你的Hexo Blog\ndate: 2016/08/25 14:12:07\ntag:\n  - blog\n  - google analytics\n---\n## 前置作業\n1. 你要有google帳號，並申請好你的google_analytics ID\n2. 這個記錄僅針對Hexo預設的Theme有作用，未來有改Theme的話，可能會需要手動加入，再寫文章補上\n\n## 開啟_config.yml\n1. 確定一下你是使用預設的theme `landscape`\n        ## Themes: https://hexo.io/themes/\n        theme: landscape\n2. 開啟 `root/themes/landscape/_config.yml`\n3. 找到以下的設定區段\n        # Miscellaneous\n        google_analytics:\n4. 填入步驟1. 中所取得 google_analytics ID\n5. 部署網站，完成!\n\n(fin)\n","slug":"add_google_analytics_to_hexo_blog_1","published":1,"updated":"2016-08-25T09:23:35.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3o70000dlgophgsd73ei","content":"<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ol>\n<li>你要有google帳號，並申請好你的google_analytics ID</li>\n<li>這個記錄僅針對Hexo預設的Theme有作用，未來有改Theme的話，可能會需要手動加入，再寫文章補上</li>\n</ol>\n<h2 id=\"開啟-config-yml\"><a href=\"#開啟-config-yml\" class=\"headerlink\" title=\"開啟_config.yml\"></a>開啟_config.yml</h2><ol>\n<li>確定一下你是使用預設的theme <code>landscape</code><pre><code>## Themes: https://hexo.io/themes/\ntheme: landscape\n</code></pre></li>\n<li>開啟 <code>root/themes/landscape/_config.yml</code></li>\n<li>找到以下的設定區段<pre><code># Miscellaneous\ngoogle_analytics:\n</code></pre></li>\n<li>填入步驟1. 中所取得 google_analytics ID</li>\n<li>部署網站，完成!</li>\n</ol>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ol>\n<li>你要有google帳號，並申請好你的google_analytics ID</li>\n<li>這個記錄僅針對Hexo預設的Theme有作用，未來有改Theme的話，可能會需要手動加入，再寫文章補上</li>\n</ol>\n<h2 id=\"開啟-config-yml\"><a href=\"#開啟-config-yml\" class=\"headerlink\" title=\"開啟_config.yml\"></a>開啟_config.yml</h2><ol>\n<li>確定一下你是使用預設的theme <code>landscape</code><pre><code>## Themes: https://hexo.io/themes/\ntheme: landscape\n</code></pre></li>\n<li>開啟 <code>root/themes/landscape/_config.yml</code></li>\n<li>找到以下的設定區段<pre><code># Miscellaneous\ngoogle_analytics:\n</code></pre></li>\n<li>填入步驟1. 中所取得 google_analytics ID</li>\n<li>部署網站，完成!</li>\n</ol>\n<p>(fin)</p>\n"},{"title":"自動化 Trello 操作","date":"2017-02-08T15:52:27.000Z","_content":"\nTrello 是一個非常方便的工作管理工具, \n最主要的功能只有 Boards 、 Lists 與 Cards,\n確可以發揮相當大的綜效功能,  \n用來當作敏捷開發的白板、安排工作項目與進度,\n作為協作的平台與工具。\n也有相當多元的外掛可以供不同的情境使用,\n開發人員也可以自行串接API與系統作整合。\n簡單記錄自動化產生 Cards 的兩種方法。\n\n## 第一種方法,使用mail\n\n1. 開啟 Menu > More\n2. 點選 Email-to-board Settings\n3. 選擇你要產生卡片的 List 與 位置(頂部或底部)\n\n![](https://i.imgur.com/PqDLtdO.gif)\n\n4. 寄信，信件格式如下\n\t- email 的 subject 會成為卡片的標題\n\t- email 的內容會成為卡片的描述\n\t- 如果有附加檔案在郵件中，會附加到卡片中\n\t- 在 subject 加入 `#label` 可以在卡片加入標籤(Labels)\n\t- 在 subject 加入 `@member` 可以在卡片加入成員(Members)\n\n\n更多請[參考](http://help.trello.com/article/809-creating-cards-by-email). \n\n## 第二種方法,使用API\n1. 登入 Trello\n2. 連線 https://developers.trello.com\n點選`Get your Application Key`. 連線到 https://trello.com/app-key\n\n### 取得Key\n![](https://i.imgur.com/bBoiUCr.jpg)\n\n### 生成Token\n\n![](https://i.imgur.com/gHsdYv8.jpg)\n\n\n![](https://i.imgur.com/bSXkChk.jpg)\n點選allow後，就會顯示你的token，特別注意登入的身份權限，\n並且千萬不要外洩你的token與key值。\n\n試打API,建立一張 Card 到指定的 List 中.\n並且設定期限(due)與標籤(labels),\n更多的API設定請[參考](https://developers.trello.com/advanced-reference).\n![](https://i.imgur.com/yk6SZYm.jpg)\n\n## 分析\n- Email:\n\t- 優點:簡單、方便、可以結合mail system 、附加檔案簡單\n\t- 缺點:部份功能無法實現(ex: 設定due date)\n- API:\n\t- 優點:靈活、Resful的API可以實現大部份的功能\n\t- 缺點:實作比較麻煩\n\n(fin)\t\n\n","source":"_posts/auto_add_trello_card.md","raw":"---\ntitle: 自動化 Trello 操作\ndate: 2017/02/08 23:52:27 \ntag:\n  - Trello\n---\n\nTrello 是一個非常方便的工作管理工具, \n最主要的功能只有 Boards 、 Lists 與 Cards,\n確可以發揮相當大的綜效功能,  \n用來當作敏捷開發的白板、安排工作項目與進度,\n作為協作的平台與工具。\n也有相當多元的外掛可以供不同的情境使用,\n開發人員也可以自行串接API與系統作整合。\n簡單記錄自動化產生 Cards 的兩種方法。\n\n## 第一種方法,使用mail\n\n1. 開啟 Menu > More\n2. 點選 Email-to-board Settings\n3. 選擇你要產生卡片的 List 與 位置(頂部或底部)\n\n![](https://i.imgur.com/PqDLtdO.gif)\n\n4. 寄信，信件格式如下\n\t- email 的 subject 會成為卡片的標題\n\t- email 的內容會成為卡片的描述\n\t- 如果有附加檔案在郵件中，會附加到卡片中\n\t- 在 subject 加入 `#label` 可以在卡片加入標籤(Labels)\n\t- 在 subject 加入 `@member` 可以在卡片加入成員(Members)\n\n\n更多請[參考](http://help.trello.com/article/809-creating-cards-by-email). \n\n## 第二種方法,使用API\n1. 登入 Trello\n2. 連線 https://developers.trello.com\n點選`Get your Application Key`. 連線到 https://trello.com/app-key\n\n### 取得Key\n![](https://i.imgur.com/bBoiUCr.jpg)\n\n### 生成Token\n\n![](https://i.imgur.com/gHsdYv8.jpg)\n\n\n![](https://i.imgur.com/bSXkChk.jpg)\n點選allow後，就會顯示你的token，特別注意登入的身份權限，\n並且千萬不要外洩你的token與key值。\n\n試打API,建立一張 Card 到指定的 List 中.\n並且設定期限(due)與標籤(labels),\n更多的API設定請[參考](https://developers.trello.com/advanced-reference).\n![](https://i.imgur.com/yk6SZYm.jpg)\n\n## 分析\n- Email:\n\t- 優點:簡單、方便、可以結合mail system 、附加檔案簡單\n\t- 缺點:部份功能無法實現(ex: 設定due date)\n- API:\n\t- 優點:靈活、Resful的API可以實現大部份的功能\n\t- 缺點:實作比較麻煩\n\n(fin)\t\n\n","slug":"auto_add_trello_card","published":1,"updated":"2017-02-08T16:24:34.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3o76000flgopdwspfbvx","content":"<p>Trello 是一個非常方便的工作管理工具,<br>最主要的功能只有 Boards 、 Lists 與 Cards,<br>確可以發揮相當大的綜效功能,<br>用來當作敏捷開發的白板、安排工作項目與進度,<br>作為協作的平台與工具。<br>也有相當多元的外掛可以供不同的情境使用,<br>開發人員也可以自行串接API與系統作整合。<br>簡單記錄自動化產生 Cards 的兩種方法。</p>\n<h2 id=\"第一種方法-使用mail\"><a href=\"#第一種方法-使用mail\" class=\"headerlink\" title=\"第一種方法,使用mail\"></a>第一種方法,使用mail</h2><ol>\n<li>開啟 Menu &gt; More</li>\n<li>點選 Email-to-board Settings</li>\n<li>選擇你要產生卡片的 List 與 位置(頂部或底部)</li>\n</ol>\n<p><img src=\"https://i.imgur.com/PqDLtdO.gif\" alt=\"\"></p>\n<ol>\n<li>寄信，信件格式如下<ul>\n<li>email 的 subject 會成為卡片的標題</li>\n<li>email 的內容會成為卡片的描述</li>\n<li>如果有附加檔案在郵件中，會附加到卡片中</li>\n<li>在 subject 加入 <code>#label</code> 可以在卡片加入標籤(Labels)</li>\n<li>在 subject 加入 <code>@member</code> 可以在卡片加入成員(Members)</li>\n</ul>\n</li>\n</ol>\n<p>更多請<a href=\"http://help.trello.com/article/809-creating-cards-by-email\" target=\"_blank\" rel=\"external\">參考</a>. </p>\n<h2 id=\"第二種方法-使用API\"><a href=\"#第二種方法-使用API\" class=\"headerlink\" title=\"第二種方法,使用API\"></a>第二種方法,使用API</h2><ol>\n<li>登入 Trello</li>\n<li>連線 <a href=\"https://developers.trello.com\" target=\"_blank\" rel=\"external\">https://developers.trello.com</a><br>點選<code>Get your Application Key</code>. 連線到 <a href=\"https://trello.com/app-key\" target=\"_blank\" rel=\"external\">https://trello.com/app-key</a></li>\n</ol>\n<h3 id=\"取得Key\"><a href=\"#取得Key\" class=\"headerlink\" title=\"取得Key\"></a>取得Key</h3><p><img src=\"https://i.imgur.com/bBoiUCr.jpg\" alt=\"\"></p>\n<h3 id=\"生成Token\"><a href=\"#生成Token\" class=\"headerlink\" title=\"生成Token\"></a>生成Token</h3><p><img src=\"https://i.imgur.com/gHsdYv8.jpg\" alt=\"\"></p>\n<p><img src=\"https://i.imgur.com/bSXkChk.jpg\" alt=\"\"><br>點選allow後，就會顯示你的token，特別注意登入的身份權限，<br>並且千萬不要外洩你的token與key值。</p>\n<p>試打API,建立一張 Card 到指定的 List 中.<br>並且設定期限(due)與標籤(labels),<br>更多的API設定請<a href=\"https://developers.trello.com/advanced-reference\" target=\"_blank\" rel=\"external\">參考</a>.<br><img src=\"https://i.imgur.com/yk6SZYm.jpg\" alt=\"\"></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>Email:<ul>\n<li>優點:簡單、方便、可以結合mail system 、附加檔案簡單</li>\n<li>缺點:部份功能無法實現(ex: 設定due date)</li>\n</ul>\n</li>\n<li>API:<ul>\n<li>優點:靈活、Resful的API可以實現大部份的功能</li>\n<li>缺點:實作比較麻煩</li>\n</ul>\n</li>\n</ul>\n<p>(fin)    </p>\n","site":{"data":{}},"excerpt":"","more":"<p>Trello 是一個非常方便的工作管理工具,<br>最主要的功能只有 Boards 、 Lists 與 Cards,<br>確可以發揮相當大的綜效功能,<br>用來當作敏捷開發的白板、安排工作項目與進度,<br>作為協作的平台與工具。<br>也有相當多元的外掛可以供不同的情境使用,<br>開發人員也可以自行串接API與系統作整合。<br>簡單記錄自動化產生 Cards 的兩種方法。</p>\n<h2 id=\"第一種方法-使用mail\"><a href=\"#第一種方法-使用mail\" class=\"headerlink\" title=\"第一種方法,使用mail\"></a>第一種方法,使用mail</h2><ol>\n<li>開啟 Menu &gt; More</li>\n<li>點選 Email-to-board Settings</li>\n<li>選擇你要產生卡片的 List 與 位置(頂部或底部)</li>\n</ol>\n<p><img src=\"https://i.imgur.com/PqDLtdO.gif\" alt=\"\"></p>\n<ol>\n<li>寄信，信件格式如下<ul>\n<li>email 的 subject 會成為卡片的標題</li>\n<li>email 的內容會成為卡片的描述</li>\n<li>如果有附加檔案在郵件中，會附加到卡片中</li>\n<li>在 subject 加入 <code>#label</code> 可以在卡片加入標籤(Labels)</li>\n<li>在 subject 加入 <code>@member</code> 可以在卡片加入成員(Members)</li>\n</ul>\n</li>\n</ol>\n<p>更多請<a href=\"http://help.trello.com/article/809-creating-cards-by-email\" target=\"_blank\" rel=\"external\">參考</a>. </p>\n<h2 id=\"第二種方法-使用API\"><a href=\"#第二種方法-使用API\" class=\"headerlink\" title=\"第二種方法,使用API\"></a>第二種方法,使用API</h2><ol>\n<li>登入 Trello</li>\n<li>連線 <a href=\"https://developers.trello.com\" target=\"_blank\" rel=\"external\">https://developers.trello.com</a><br>點選<code>Get your Application Key</code>. 連線到 <a href=\"https://trello.com/app-key\" target=\"_blank\" rel=\"external\">https://trello.com/app-key</a></li>\n</ol>\n<h3 id=\"取得Key\"><a href=\"#取得Key\" class=\"headerlink\" title=\"取得Key\"></a>取得Key</h3><p><img src=\"https://i.imgur.com/bBoiUCr.jpg\" alt=\"\"></p>\n<h3 id=\"生成Token\"><a href=\"#生成Token\" class=\"headerlink\" title=\"生成Token\"></a>生成Token</h3><p><img src=\"https://i.imgur.com/gHsdYv8.jpg\" alt=\"\"></p>\n<p><img src=\"https://i.imgur.com/bSXkChk.jpg\" alt=\"\"><br>點選allow後，就會顯示你的token，特別注意登入的身份權限，<br>並且千萬不要外洩你的token與key值。</p>\n<p>試打API,建立一張 Card 到指定的 List 中.<br>並且設定期限(due)與標籤(labels),<br>更多的API設定請<a href=\"https://developers.trello.com/advanced-reference\" target=\"_blank\" rel=\"external\">參考</a>.<br><img src=\"https://i.imgur.com/yk6SZYm.jpg\" alt=\"\"></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>Email:<ul>\n<li>優點:簡單、方便、可以結合mail system 、附加檔案簡單</li>\n<li>缺點:部份功能無法實現(ex: 設定due date)</li>\n</ul>\n</li>\n<li>API:<ul>\n<li>優點:靈活、Resful的API可以實現大部份的功能</li>\n<li>缺點:實作比較麻煩</li>\n</ul>\n</li>\n</ul>\n<p>(fin)    </p>\n"},{"title":"CI/CD 環境建置筆記(一) - 在 windows 安裝 Jenkins","date":"2017-01-15T14:16:42.000Z","_content":"\n## 前情提要\n\n- [CI/CD 環境建置筆記 - 前言<目的>](/2017/01/15/ci_use_jenkins/)\n\n## 操作記錄\n\n1. 下載並安裝Jenkins（記錄版本為2.32.1）\n2. 連線localhost:8080,會要求輸入`Administrator password`\n![](https://i.imgur.com/ik5l0sq.jpg)\n\n3. 安裝Plugins(這裡選擇預設)\n![](https://i.imgur.com/dOad35P.jpg)\n\n\n4. 安裝畫面\n![](https://i.imgur.com/6FyGHPm.jpg)\n\n5. 建立管理者帳號密碼\n![](https://i.imgur.com/AzHrJdu.jpg)\n![](https://i.imgur.com/2ct8GiO.jpg)\n\n6. 登入後,管理 Jenkins > 設定系統\n\t1. 將執行程式數量設定為 1  (安裝完預設為2,其實可以不用修改)\n\t2. `Shell` 設定為 `C:\\Windows\\system32\\cmd.exe` \n\n7. 建立第一個作業,選擇新增作業 > 輸入作業名稱 ,選擇「建立多重設定專案」\n![](https://i.imgur.com/0xkci16.jpg)\n8.  **執行一次建置**,這個步驟是為了產生work space 。\nwork space 路徑大致如下 `.\\Jenkins\\workspace\\Project name`\n\n9. 執行 console 並切換路徑至 work space \n10. 將 Openshift 上的 nodejs 應用程式 repo 設為 remote\n\t`>git remote add prod ssh://5**********************@nodejs-youraccount.rhcloud.com/~/git/nodejs.git/`\n\t\n11. 回到Jenkins,作業 > 組態 > 建置 > 新增「執行Windows批次指令」\n\t\n\t``` bat\n\tREM 測試\n\twhoami\n\tgit push prod HEAD^:master\n\t```\n\n\t1. 額外處理事項:\n\t直接在 Jenkins server 發 pr 給 openshift 時,發生 503 錯誤。\n\t使用 ssh 登入 openshift 看 log ,發現 \n\t`Node Sass does not yet support your current environment` 錯誤\n\t必須登入執行以下語法修正模組問題 `npm rebuild node-sass` \n\t\n12. 建置作業,會得到錯誤訊息\n```\n上略...\n19:44:46 Host key verification failed.\n19:44:46 fatal: Could not read from remote repository.\n下略...\n```\n\t\n原因:主機密鑰驗證失敗,這個錯誤的意思是我的 Jenkins Server 主機並不認得遠端的 Openshift Server 的 host key,主要的原因是 Jenkins Service 在執行的身份是 `NT AUTHORITY\\SYSTEM`,由於我已經有合適權限的帳號,所以只需要切換執行 Jenkins Server 的身份即可。\n![](https://i.imgur.com/HSJoXJp.jpg)\n\n如果你尚未建立遠端ssh連線的存取權限,或是對ssh連線不熟悉,可以參考文末的參考聯結。\n\n## 參考\n\n- [SSH原理与运用（一）：远程登录](http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html)\n- [SSH原理与运用（二）：远程操作与端口转发](http://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html)\n- [[Tip] Windows使用ssh對Github進行操作](https://dotblogs.com.tw/kirkchen/2013/04/23/use_ssh_to_interact_with_github_in_windows)\n- [在 Windows 使用「非對稱金鑰」來遠端登入 SSH 的方法](http://www.vixual.net/blog/archives/190)\n\n(fin)","source":"_posts/ci_use_jenkins_on_windows.md","raw":"---\ntitle: CI/CD 環境建置筆記(一) - 在 windows 安裝 Jenkins \ndate: 2017/01/15 22:16:42\ntag:\n  - CI\n  - Jenkins\n  - Openshift\n---\n\n## 前情提要\n\n- [CI/CD 環境建置筆記 - 前言<目的>](/2017/01/15/ci_use_jenkins/)\n\n## 操作記錄\n\n1. 下載並安裝Jenkins（記錄版本為2.32.1）\n2. 連線localhost:8080,會要求輸入`Administrator password`\n![](https://i.imgur.com/ik5l0sq.jpg)\n\n3. 安裝Plugins(這裡選擇預設)\n![](https://i.imgur.com/dOad35P.jpg)\n\n\n4. 安裝畫面\n![](https://i.imgur.com/6FyGHPm.jpg)\n\n5. 建立管理者帳號密碼\n![](https://i.imgur.com/AzHrJdu.jpg)\n![](https://i.imgur.com/2ct8GiO.jpg)\n\n6. 登入後,管理 Jenkins > 設定系統\n\t1. 將執行程式數量設定為 1  (安裝完預設為2,其實可以不用修改)\n\t2. `Shell` 設定為 `C:\\Windows\\system32\\cmd.exe` \n\n7. 建立第一個作業,選擇新增作業 > 輸入作業名稱 ,選擇「建立多重設定專案」\n![](https://i.imgur.com/0xkci16.jpg)\n8.  **執行一次建置**,這個步驟是為了產生work space 。\nwork space 路徑大致如下 `.\\Jenkins\\workspace\\Project name`\n\n9. 執行 console 並切換路徑至 work space \n10. 將 Openshift 上的 nodejs 應用程式 repo 設為 remote\n\t`>git remote add prod ssh://5**********************@nodejs-youraccount.rhcloud.com/~/git/nodejs.git/`\n\t\n11. 回到Jenkins,作業 > 組態 > 建置 > 新增「執行Windows批次指令」\n\t\n\t``` bat\n\tREM 測試\n\twhoami\n\tgit push prod HEAD^:master\n\t```\n\n\t1. 額外處理事項:\n\t直接在 Jenkins server 發 pr 給 openshift 時,發生 503 錯誤。\n\t使用 ssh 登入 openshift 看 log ,發現 \n\t`Node Sass does not yet support your current environment` 錯誤\n\t必須登入執行以下語法修正模組問題 `npm rebuild node-sass` \n\t\n12. 建置作業,會得到錯誤訊息\n```\n上略...\n19:44:46 Host key verification failed.\n19:44:46 fatal: Could not read from remote repository.\n下略...\n```\n\t\n原因:主機密鑰驗證失敗,這個錯誤的意思是我的 Jenkins Server 主機並不認得遠端的 Openshift Server 的 host key,主要的原因是 Jenkins Service 在執行的身份是 `NT AUTHORITY\\SYSTEM`,由於我已經有合適權限的帳號,所以只需要切換執行 Jenkins Server 的身份即可。\n![](https://i.imgur.com/HSJoXJp.jpg)\n\n如果你尚未建立遠端ssh連線的存取權限,或是對ssh連線不熟悉,可以參考文末的參考聯結。\n\n## 參考\n\n- [SSH原理与运用（一）：远程登录](http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html)\n- [SSH原理与运用（二）：远程操作与端口转发](http://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html)\n- [[Tip] Windows使用ssh對Github進行操作](https://dotblogs.com.tw/kirkchen/2013/04/23/use_ssh_to_interact_with_github_in_windows)\n- [在 Windows 使用「非對稱金鑰」來遠端登入 SSH 的方法](http://www.vixual.net/blog/archives/190)\n\n(fin)","slug":"ci_use_jenkins_on_windows","published":1,"updated":"2017-01-15T16:12:04.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3o7o000ilgopck48lax0","content":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><ul>\n<li><a href=\"/2017/01/15/ci_use_jenkins/\">CI/CD 環境建置筆記 - 前言&lt;目的&gt;</a></li>\n</ul>\n<h2 id=\"操作記錄\"><a href=\"#操作記錄\" class=\"headerlink\" title=\"操作記錄\"></a>操作記錄</h2><ol>\n<li>下載並安裝Jenkins（記錄版本為2.32.1）</li>\n<li><p>連線localhost:8080,會要求輸入<code>Administrator password</code><br><img src=\"https://i.imgur.com/ik5l0sq.jpg\" alt=\"\"></p>\n</li>\n<li><p>安裝Plugins(這裡選擇預設)<br><img src=\"https://i.imgur.com/dOad35P.jpg\" alt=\"\"></p>\n</li>\n</ol>\n<ol>\n<li><p>安裝畫面<br><img src=\"https://i.imgur.com/6FyGHPm.jpg\" alt=\"\"></p>\n</li>\n<li><p>建立管理者帳號密碼<br><img src=\"https://i.imgur.com/AzHrJdu.jpg\" alt=\"\"><br><img src=\"https://i.imgur.com/2ct8GiO.jpg\" alt=\"\"></p>\n</li>\n<li><p>登入後,管理 Jenkins &gt; 設定系統</p>\n<ol>\n<li>將執行程式數量設定為 1  (安裝完預設為2,其實可以不用修改)</li>\n<li><code>Shell</code> 設定為 <code>C:\\Windows\\system32\\cmd.exe</code> </li>\n</ol>\n</li>\n<li><p>建立第一個作業,選擇新增作業 &gt; 輸入作業名稱 ,選擇「建立多重設定專案」<br><img src=\"https://i.imgur.com/0xkci16.jpg\" alt=\"\"></p>\n</li>\n<li><p><strong>執行一次建置</strong>,這個步驟是為了產生work space 。<br>work space 路徑大致如下 <code>.\\Jenkins\\workspace\\Project name</code></p>\n</li>\n<li><p>執行 console 並切換路徑至 work space </p>\n</li>\n<li><p>將 Openshift 上的 nodejs 應用程式 repo 設為 remote<br><code>&gt;git remote add prod ssh://5**********************@nodejs-youraccount.rhcloud.com/~/git/nodejs.git/</code></p>\n</li>\n<li><p>回到Jenkins,作業 &gt; 組態 &gt; 建置 &gt; 新增「執行Windows批次指令」</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">REM 測試</span></div><div class=\"line\">whoami</div><div class=\"line\">git push prod HEAD^:master</div></pre></td></tr></table></figure>\n<ol>\n<li>額外處理事項:<br>直接在 Jenkins server 發 pr 給 openshift 時,發生 503 錯誤。<br>使用 ssh 登入 openshift 看 log ,發現<br><code>Node Sass does not yet support your current environment</code> 錯誤<br>必須登入執行以下語法修正模組問題 <code>npm rebuild node-sass</code> </li>\n</ol>\n</li>\n<li><p>建置作業,會得到錯誤訊息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">上略...</div><div class=\"line\">19:44:46 Host key verification failed.</div><div class=\"line\">19:44:46 fatal: Could not read from remote repository.</div><div class=\"line\">下略...</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>原因:主機密鑰驗證失敗,這個錯誤的意思是我的 Jenkins Server 主機並不認得遠端的 Openshift Server 的 host key,主要的原因是 Jenkins Service 在執行的身份是 <code>NT AUTHORITY\\SYSTEM</code>,由於我已經有合適權限的帳號,所以只需要切換執行 Jenkins Server 的身份即可。<br><img src=\"https://i.imgur.com/HSJoXJp.jpg\" alt=\"\"></p>\n<p>如果你尚未建立遠端ssh連線的存取權限,或是對ssh連線不熟悉,可以參考文末的參考聯結。</p>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html\" target=\"_blank\" rel=\"external\">SSH原理与运用（一）：远程登录</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html\" target=\"_blank\" rel=\"external\">SSH原理与运用（二）：远程操作与端口转发</a></li>\n<li><a href=\"https://dotblogs.com.tw/kirkchen/2013/04/23/use_ssh_to_interact_with_github_in_windows\" target=\"_blank\" rel=\"external\">[Tip] Windows使用ssh對Github進行操作</a></li>\n<li><a href=\"http://www.vixual.net/blog/archives/190\" target=\"_blank\" rel=\"external\">在 Windows 使用「非對稱金鑰」來遠端登入 SSH 的方法</a></li>\n</ul>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><ul>\n<li><a href=\"/2017/01/15/ci_use_jenkins/\">CI/CD 環境建置筆記 - 前言&lt;目的&gt;</a></li>\n</ul>\n<h2 id=\"操作記錄\"><a href=\"#操作記錄\" class=\"headerlink\" title=\"操作記錄\"></a>操作記錄</h2><ol>\n<li>下載並安裝Jenkins（記錄版本為2.32.1）</li>\n<li><p>連線localhost:8080,會要求輸入<code>Administrator password</code><br><img src=\"https://i.imgur.com/ik5l0sq.jpg\" alt=\"\"></p>\n</li>\n<li><p>安裝Plugins(這裡選擇預設)<br><img src=\"https://i.imgur.com/dOad35P.jpg\" alt=\"\"></p>\n</li>\n</ol>\n<ol>\n<li><p>安裝畫面<br><img src=\"https://i.imgur.com/6FyGHPm.jpg\" alt=\"\"></p>\n</li>\n<li><p>建立管理者帳號密碼<br><img src=\"https://i.imgur.com/AzHrJdu.jpg\" alt=\"\"><br><img src=\"https://i.imgur.com/2ct8GiO.jpg\" alt=\"\"></p>\n</li>\n<li><p>登入後,管理 Jenkins &gt; 設定系統</p>\n<ol>\n<li>將執行程式數量設定為 1  (安裝完預設為2,其實可以不用修改)</li>\n<li><code>Shell</code> 設定為 <code>C:\\Windows\\system32\\cmd.exe</code> </li>\n</ol>\n</li>\n<li><p>建立第一個作業,選擇新增作業 &gt; 輸入作業名稱 ,選擇「建立多重設定專案」<br><img src=\"https://i.imgur.com/0xkci16.jpg\" alt=\"\"></p>\n</li>\n<li><p><strong>執行一次建置</strong>,這個步驟是為了產生work space 。<br>work space 路徑大致如下 <code>.\\Jenkins\\workspace\\Project name</code></p>\n</li>\n<li><p>執行 console 並切換路徑至 work space </p>\n</li>\n<li><p>將 Openshift 上的 nodejs 應用程式 repo 設為 remote<br><code>&gt;git remote add prod ssh://5**********************@nodejs-youraccount.rhcloud.com/~/git/nodejs.git/</code></p>\n</li>\n<li><p>回到Jenkins,作業 &gt; 組態 &gt; 建置 &gt; 新增「執行Windows批次指令」</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">REM 測試</span></div><div class=\"line\">whoami</div><div class=\"line\">git push prod HEAD^:master</div></pre></td></tr></table></figure>\n<ol>\n<li>額外處理事項:<br>直接在 Jenkins server 發 pr 給 openshift 時,發生 503 錯誤。<br>使用 ssh 登入 openshift 看 log ,發現<br><code>Node Sass does not yet support your current environment</code> 錯誤<br>必須登入執行以下語法修正模組問題 <code>npm rebuild node-sass</code> </li>\n</ol>\n</li>\n<li><p>建置作業,會得到錯誤訊息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">上略...</div><div class=\"line\">19:44:46 Host key verification failed.</div><div class=\"line\">19:44:46 fatal: Could not read from remote repository.</div><div class=\"line\">下略...</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>原因:主機密鑰驗證失敗,這個錯誤的意思是我的 Jenkins Server 主機並不認得遠端的 Openshift Server 的 host key,主要的原因是 Jenkins Service 在執行的身份是 <code>NT AUTHORITY\\SYSTEM</code>,由於我已經有合適權限的帳號,所以只需要切換執行 Jenkins Server 的身份即可。<br><img src=\"https://i.imgur.com/HSJoXJp.jpg\" alt=\"\"></p>\n<p>如果你尚未建立遠端ssh連線的存取權限,或是對ssh連線不熟悉,可以參考文末的參考聯結。</p>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html\" target=\"_blank\" rel=\"external\">SSH原理与运用（一）：远程登录</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html\" target=\"_blank\" rel=\"external\">SSH原理与运用（二）：远程操作与端口转发</a></li>\n<li><a href=\"https://dotblogs.com.tw/kirkchen/2013/04/23/use_ssh_to_interact_with_github_in_windows\" target=\"_blank\" rel=\"external\">[Tip] Windows使用ssh對Github進行操作</a></li>\n<li><a href=\"http://www.vixual.net/blog/archives/190\" target=\"_blank\" rel=\"external\">在 Windows 使用「非對稱金鑰」來遠端登入 SSH 的方法</a></li>\n</ul>\n<p>(fin)</p>\n"},{"title":"[記錄]VS2015 StyleCop 誤判SA0102","date":"2017-01-11T06:51:25.000Z","_content":"## 環境\n- 作業系統:Windows 10\n- 開發工具:Visual Studio 2015 (Professional ver14.0.25431.01 Update 3)\n- StyleCop 4.7.50.0\n\n## 情境\n\n當使用C# 6 的`INTERPOLATION STRING`組合字串時，在StyleCop 4.7會誤判並回報SA0102的警告。\n\n``` c_sharp\n\treturn new ExcelResult\n\t{\n\t\tData = exportData,\n\t\tFileName = $\"{shopId}_Code_{DateTime.Now.ToString(\"yyyyMMddHHmm\")}\",\n\t\tSheetName = \"ECouponCode\"\n\t};\n```\n\n## 修正目標\n1. 將 StyleCop 4.7 更新至 StyleCop 5.0\n2. 編輯客製化的StyleCop Rules(直接將4.7的設定檔覆蓋VS會報錯)\n\n## 修正記錄\n1. 移除 StyleCop \n控制台 > 新增移除程式\n![](https://i.imgur.com/PCYZxIK.png)\n\n2. 移除 Visual Studio 上的 StyleCop \n工具 > 擴充功能和更新\n![](https://i.imgur.com/1HdVoko.png)\n\n3. 自你的程式碼移除所有對StyleCop的參考 \n`我的程式碼中並不包含對StyleCop的參考，故略過此步驟`\n\n4. 搜尋`StyleCop*.dll` 並且移除(非必要)\n\n5. 重新安裝 [StyleCop Visual Studio Extension](https://marketplace.visualstudio.com/items?itemName=ChristopheHEISER.VisualStyleCop)\n\t1.  安裝完成檢視安裝記錄檔\n![](https://i.imgur.com/Kny5aU9.png)\n\n\t2.  可以透過安裝記錄檔取得安裝路徑\n![](https://i.imgur.com/edSDREN.png)\n\n\n6. 客製修改StyleCop設定檔\n\t5-2的步驟可以找到`Settings`子資料夾，內含預設StyleCop設定檔， \n\t複制這個檔案到上一層，重新命名為`Settings.StyleCop`,\n\t透過`StyleCop.SettingsEditor`開啟`Settings.StyleCop`調整設定值。\n\t![](https://i.imgur.com/DJjoEYJ.gif)\n\n\n## 參考\n- [Github StyleCop](https://github.com/StyleCop)\n- [Github Visual-StyleCop](https://github.com/Visual-Stylecop/Visual-StyleCop/wiki)\n- [Marketplace Visual StyleCop ](https://marketplace.visualstudio.com/items?itemName=ChristopheHEISER.VisualStyleCop)\n\n(fin)\n","source":"_posts/c_sharp_6_interpolation_string_stylecop_sa0102.md","raw":"---\ntitle: \"[記錄]VS2015 StyleCop 誤判SA0102\"\ndate: 2017/01/11 14:51:25\ntag:\n  - C#\n  - StyleCop\n---\n## 環境\n- 作業系統:Windows 10\n- 開發工具:Visual Studio 2015 (Professional ver14.0.25431.01 Update 3)\n- StyleCop 4.7.50.0\n\n## 情境\n\n當使用C# 6 的`INTERPOLATION STRING`組合字串時，在StyleCop 4.7會誤判並回報SA0102的警告。\n\n``` c_sharp\n\treturn new ExcelResult\n\t{\n\t\tData = exportData,\n\t\tFileName = $\"{shopId}_Code_{DateTime.Now.ToString(\"yyyyMMddHHmm\")}\",\n\t\tSheetName = \"ECouponCode\"\n\t};\n```\n\n## 修正目標\n1. 將 StyleCop 4.7 更新至 StyleCop 5.0\n2. 編輯客製化的StyleCop Rules(直接將4.7的設定檔覆蓋VS會報錯)\n\n## 修正記錄\n1. 移除 StyleCop \n控制台 > 新增移除程式\n![](https://i.imgur.com/PCYZxIK.png)\n\n2. 移除 Visual Studio 上的 StyleCop \n工具 > 擴充功能和更新\n![](https://i.imgur.com/1HdVoko.png)\n\n3. 自你的程式碼移除所有對StyleCop的參考 \n`我的程式碼中並不包含對StyleCop的參考，故略過此步驟`\n\n4. 搜尋`StyleCop*.dll` 並且移除(非必要)\n\n5. 重新安裝 [StyleCop Visual Studio Extension](https://marketplace.visualstudio.com/items?itemName=ChristopheHEISER.VisualStyleCop)\n\t1.  安裝完成檢視安裝記錄檔\n![](https://i.imgur.com/Kny5aU9.png)\n\n\t2.  可以透過安裝記錄檔取得安裝路徑\n![](https://i.imgur.com/edSDREN.png)\n\n\n6. 客製修改StyleCop設定檔\n\t5-2的步驟可以找到`Settings`子資料夾，內含預設StyleCop設定檔， \n\t複制這個檔案到上一層，重新命名為`Settings.StyleCop`,\n\t透過`StyleCop.SettingsEditor`開啟`Settings.StyleCop`調整設定值。\n\t![](https://i.imgur.com/DJjoEYJ.gif)\n\n\n## 參考\n- [Github StyleCop](https://github.com/StyleCop)\n- [Github Visual-StyleCop](https://github.com/Visual-Stylecop/Visual-StyleCop/wiki)\n- [Marketplace Visual StyleCop ](https://marketplace.visualstudio.com/items?itemName=ChristopheHEISER.VisualStyleCop)\n\n(fin)\n","slug":"c_sharp_6_interpolation_string_stylecop_sa0102","published":1,"updated":"2017-01-11T06:52:40.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3o7r000klgoptxkhgm4l","content":"<h2 id=\"環境\"><a href=\"#環境\" class=\"headerlink\" title=\"環境\"></a>環境</h2><ul>\n<li>作業系統:Windows 10</li>\n<li>開發工具:Visual Studio 2015 (Professional ver14.0.25431.01 Update 3)</li>\n<li>StyleCop 4.7.50.0</li>\n</ul>\n<h2 id=\"情境\"><a href=\"#情境\" class=\"headerlink\" title=\"情境\"></a>情境</h2><p>當使用C# 6 的<code>INTERPOLATION STRING</code>組合字串時，在StyleCop 4.7會誤判並回報SA0102的警告。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">return new ExcelResult</div><div class=\"line\">&#123;</div><div class=\"line\">\tData = exportData,</div><div class=\"line\">\tFileName = $&quot;&#123;shopId&#125;_Code_&#123;DateTime.Now.ToString(&quot;yyyyMMddHHmm&quot;)&#125;&quot;,</div><div class=\"line\">\tSheetName = &quot;ECouponCode&quot;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"修正目標\"><a href=\"#修正目標\" class=\"headerlink\" title=\"修正目標\"></a>修正目標</h2><ol>\n<li>將 StyleCop 4.7 更新至 StyleCop 5.0</li>\n<li>編輯客製化的StyleCop Rules(直接將4.7的設定檔覆蓋VS會報錯)</li>\n</ol>\n<h2 id=\"修正記錄\"><a href=\"#修正記錄\" class=\"headerlink\" title=\"修正記錄\"></a>修正記錄</h2><ol>\n<li><p>移除 StyleCop<br>控制台 &gt; 新增移除程式<br><img src=\"https://i.imgur.com/PCYZxIK.png\" alt=\"\"></p>\n</li>\n<li><p>移除 Visual Studio 上的 StyleCop<br>工具 &gt; 擴充功能和更新<br><img src=\"https://i.imgur.com/1HdVoko.png\" alt=\"\"></p>\n</li>\n<li><p>自你的程式碼移除所有對StyleCop的參考<br><code>我的程式碼中並不包含對StyleCop的參考，故略過此步驟</code></p>\n</li>\n<li><p>搜尋<code>StyleCop*.dll</code> 並且移除(非必要)</p>\n</li>\n<li><p>重新安裝 <a href=\"https://marketplace.visualstudio.com/items?itemName=ChristopheHEISER.VisualStyleCop\" target=\"_blank\" rel=\"external\">StyleCop Visual Studio Extension</a></p>\n<ol>\n<li><p>安裝完成檢視安裝記錄檔<br><img src=\"https://i.imgur.com/Kny5aU9.png\" alt=\"\"></p>\n</li>\n<li><p>可以透過安裝記錄檔取得安裝路徑<br><img src=\"https://i.imgur.com/edSDREN.png\" alt=\"\"></p>\n</li>\n</ol>\n</li>\n</ol>\n<ol>\n<li>客製修改StyleCop設定檔<br> 5-2的步驟可以找到<code>Settings</code>子資料夾，內含預設StyleCop設定檔，<br> 複制這個檔案到上一層，重新命名為<code>Settings.StyleCop</code>,<br> 透過<code>StyleCop.SettingsEditor</code>開啟<code>Settings.StyleCop</code>調整設定值。<br> <img src=\"https://i.imgur.com/DJjoEYJ.gif\" alt=\"\"></li>\n</ol>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://github.com/StyleCop\" target=\"_blank\" rel=\"external\">Github StyleCop</a></li>\n<li><a href=\"https://github.com/Visual-Stylecop/Visual-StyleCop/wiki\" target=\"_blank\" rel=\"external\">Github Visual-StyleCop</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=ChristopheHEISER.VisualStyleCop\" target=\"_blank\" rel=\"external\">Marketplace Visual StyleCop </a></li>\n</ul>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"環境\"><a href=\"#環境\" class=\"headerlink\" title=\"環境\"></a>環境</h2><ul>\n<li>作業系統:Windows 10</li>\n<li>開發工具:Visual Studio 2015 (Professional ver14.0.25431.01 Update 3)</li>\n<li>StyleCop 4.7.50.0</li>\n</ul>\n<h2 id=\"情境\"><a href=\"#情境\" class=\"headerlink\" title=\"情境\"></a>情境</h2><p>當使用C# 6 的<code>INTERPOLATION STRING</code>組合字串時，在StyleCop 4.7會誤判並回報SA0102的警告。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">return new ExcelResult</div><div class=\"line\">&#123;</div><div class=\"line\">\tData = exportData,</div><div class=\"line\">\tFileName = $&quot;&#123;shopId&#125;_Code_&#123;DateTime.Now.ToString(&quot;yyyyMMddHHmm&quot;)&#125;&quot;,</div><div class=\"line\">\tSheetName = &quot;ECouponCode&quot;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"修正目標\"><a href=\"#修正目標\" class=\"headerlink\" title=\"修正目標\"></a>修正目標</h2><ol>\n<li>將 StyleCop 4.7 更新至 StyleCop 5.0</li>\n<li>編輯客製化的StyleCop Rules(直接將4.7的設定檔覆蓋VS會報錯)</li>\n</ol>\n<h2 id=\"修正記錄\"><a href=\"#修正記錄\" class=\"headerlink\" title=\"修正記錄\"></a>修正記錄</h2><ol>\n<li><p>移除 StyleCop<br>控制台 &gt; 新增移除程式<br><img src=\"https://i.imgur.com/PCYZxIK.png\" alt=\"\"></p>\n</li>\n<li><p>移除 Visual Studio 上的 StyleCop<br>工具 &gt; 擴充功能和更新<br><img src=\"https://i.imgur.com/1HdVoko.png\" alt=\"\"></p>\n</li>\n<li><p>自你的程式碼移除所有對StyleCop的參考<br><code>我的程式碼中並不包含對StyleCop的參考，故略過此步驟</code></p>\n</li>\n<li><p>搜尋<code>StyleCop*.dll</code> 並且移除(非必要)</p>\n</li>\n<li><p>重新安裝 <a href=\"https://marketplace.visualstudio.com/items?itemName=ChristopheHEISER.VisualStyleCop\" target=\"_blank\" rel=\"external\">StyleCop Visual Studio Extension</a></p>\n<ol>\n<li><p>安裝完成檢視安裝記錄檔<br><img src=\"https://i.imgur.com/Kny5aU9.png\" alt=\"\"></p>\n</li>\n<li><p>可以透過安裝記錄檔取得安裝路徑<br><img src=\"https://i.imgur.com/edSDREN.png\" alt=\"\"></p>\n</li>\n</ol>\n</li>\n</ol>\n<ol>\n<li>客製修改StyleCop設定檔<br> 5-2的步驟可以找到<code>Settings</code>子資料夾，內含預設StyleCop設定檔，<br> 複制這個檔案到上一層，重新命名為<code>Settings.StyleCop</code>,<br> 透過<code>StyleCop.SettingsEditor</code>開啟<code>Settings.StyleCop</code>調整設定值。<br> <img src=\"https://i.imgur.com/DJjoEYJ.gif\" alt=\"\"></li>\n</ol>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://github.com/StyleCop\" target=\"_blank\" rel=\"external\">Github StyleCop</a></li>\n<li><a href=\"https://github.com/Visual-Stylecop/Visual-StyleCop/wiki\" target=\"_blank\" rel=\"external\">Github Visual-StyleCop</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=ChristopheHEISER.VisualStyleCop\" target=\"_blank\" rel=\"external\">Marketplace Visual StyleCop </a></li>\n</ul>\n<p>(fin)</p>\n"},{"title":"匯入文字資料到MSSQL","date":"2016-08-29T09:24:55.000Z","_content":"## 前置作業\n1. 一個有權限寫入的MSSQLServer與SSMS管理工具\n2. 準備好你的檔案資料(Row Data)\n3. 這份記錄僅供參考(DB版本使用Microsoft SQL Server 2014)\n\n## 步驟記錄\n1. 開啟SSMS，連線測試SQL Server\n2. 對測試資料庫右鍵>工作>匯入資料，開啟「SQL Server匯入匯出精靈」\n3. 「開始畫面」> 下一步\n4. 「資料來源」選擇一般檔案來源，「檔案名稱」選取Row Data的檔案路徑\n5. 請依實際狀況選擇下列欄位\n     - 「略過的標頭資料列數」: 預設為0，可透過設定此欄位略過 Row Data內含註解，標頭等資料\n     - 「第一個資料列的資料行名稱」:若Row Data第一行為標頭，請勾選此欄位\n     - 左側選單選擇「資料行」>「資料列分隔符號」選擇「{CR}{LF}」、「資料行分隔符號」選擇「Tab鍵{t}」\n6. 左側選單選擇「預覽」確認匯入的資料無誤後，點擊下一步\n7. 「目的地」請選擇「SqlServer」，設定ConnectionString\n     - Data Source=1**.***.***.***;Initial Catalog=TestDB;Persist Security Info=True;User ID=tester;Password=********;\n8. 「選取來源資料表和檢視畫面」確認無誤後，點擊下一步。\n9. 「檢閱資料類型對應畫面」請忽略資料類型的警告，點擊下一步。\n10. 「執行封裝畫面」勾選「立即執行」，點擊下一步。\n11. 「完成精靈畫面」點選完成。\n12.  執行時間長短，依Row Data大小而有所差異。\n\n(fin)\n","source":"_posts/file_rowdata_import_mssql.md","raw":"---\ntitle: 匯入文字資料到MSSQL\ndate: 2016/08/29 17:24:55 \ntag:\n- DBA\n- SQL Server\n- 記錄\n---\n## 前置作業\n1. 一個有權限寫入的MSSQLServer與SSMS管理工具\n2. 準備好你的檔案資料(Row Data)\n3. 這份記錄僅供參考(DB版本使用Microsoft SQL Server 2014)\n\n## 步驟記錄\n1. 開啟SSMS，連線測試SQL Server\n2. 對測試資料庫右鍵>工作>匯入資料，開啟「SQL Server匯入匯出精靈」\n3. 「開始畫面」> 下一步\n4. 「資料來源」選擇一般檔案來源，「檔案名稱」選取Row Data的檔案路徑\n5. 請依實際狀況選擇下列欄位\n     - 「略過的標頭資料列數」: 預設為0，可透過設定此欄位略過 Row Data內含註解，標頭等資料\n     - 「第一個資料列的資料行名稱」:若Row Data第一行為標頭，請勾選此欄位\n     - 左側選單選擇「資料行」>「資料列分隔符號」選擇「{CR}{LF}」、「資料行分隔符號」選擇「Tab鍵{t}」\n6. 左側選單選擇「預覽」確認匯入的資料無誤後，點擊下一步\n7. 「目的地」請選擇「SqlServer」，設定ConnectionString\n     - Data Source=1**.***.***.***;Initial Catalog=TestDB;Persist Security Info=True;User ID=tester;Password=********;\n8. 「選取來源資料表和檢視畫面」確認無誤後，點擊下一步。\n9. 「檢閱資料類型對應畫面」請忽略資料類型的警告，點擊下一步。\n10. 「執行封裝畫面」勾選「立即執行」，點擊下一步。\n11. 「完成精靈畫面」點選完成。\n12.  執行時間長短，依Row Data大小而有所差異。\n\n(fin)\n","slug":"file_rowdata_import_mssql","published":1,"updated":"2017-03-25T16:25:35.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3o7x000mlgop8q99m44s","content":"<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ol>\n<li>一個有權限寫入的MSSQLServer與SSMS管理工具</li>\n<li>準備好你的檔案資料(Row Data)</li>\n<li>這份記錄僅供參考(DB版本使用Microsoft SQL Server 2014)</li>\n</ol>\n<h2 id=\"步驟記錄\"><a href=\"#步驟記錄\" class=\"headerlink\" title=\"步驟記錄\"></a>步驟記錄</h2><ol>\n<li>開啟SSMS，連線測試SQL Server</li>\n<li>對測試資料庫右鍵&gt;工作&gt;匯入資料，開啟「SQL Server匯入匯出精靈」</li>\n<li>「開始畫面」&gt; 下一步</li>\n<li>「資料來源」選擇一般檔案來源，「檔案名稱」選取Row Data的檔案路徑</li>\n<li>請依實際狀況選擇下列欄位<ul>\n<li>「略過的標頭資料列數」: 預設為0，可透過設定此欄位略過 Row Data內含註解，標頭等資料</li>\n<li>「第一個資料列的資料行名稱」:若Row Data第一行為標頭，請勾選此欄位</li>\n<li>左側選單選擇「資料行」&gt;「資料列分隔符號」選擇「{CR}{LF}」、「資料行分隔符號」選擇「Tab鍵{t}」</li>\n</ul>\n</li>\n<li>左側選單選擇「預覽」確認匯入的資料無誤後，點擊下一步</li>\n<li>「目的地」請選擇「SqlServer」，設定ConnectionString<ul>\n<li>Data Source=1<strong>.*</strong>.<strong><em>.</em></strong>;Initial Catalog=TestDB;Persist Security Info=True;User ID=tester;Password=<strong><em>**</em></strong>;</li>\n</ul>\n</li>\n<li>「選取來源資料表和檢視畫面」確認無誤後，點擊下一步。</li>\n<li>「檢閱資料類型對應畫面」請忽略資料類型的警告，點擊下一步。</li>\n<li>「執行封裝畫面」勾選「立即執行」，點擊下一步。</li>\n<li>「完成精靈畫面」點選完成。</li>\n<li>執行時間長短，依Row Data大小而有所差異。</li>\n</ol>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ol>\n<li>一個有權限寫入的MSSQLServer與SSMS管理工具</li>\n<li>準備好你的檔案資料(Row Data)</li>\n<li>這份記錄僅供參考(DB版本使用Microsoft SQL Server 2014)</li>\n</ol>\n<h2 id=\"步驟記錄\"><a href=\"#步驟記錄\" class=\"headerlink\" title=\"步驟記錄\"></a>步驟記錄</h2><ol>\n<li>開啟SSMS，連線測試SQL Server</li>\n<li>對測試資料庫右鍵&gt;工作&gt;匯入資料，開啟「SQL Server匯入匯出精靈」</li>\n<li>「開始畫面」&gt; 下一步</li>\n<li>「資料來源」選擇一般檔案來源，「檔案名稱」選取Row Data的檔案路徑</li>\n<li>請依實際狀況選擇下列欄位<ul>\n<li>「略過的標頭資料列數」: 預設為0，可透過設定此欄位略過 Row Data內含註解，標頭等資料</li>\n<li>「第一個資料列的資料行名稱」:若Row Data第一行為標頭，請勾選此欄位</li>\n<li>左側選單選擇「資料行」&gt;「資料列分隔符號」選擇「{CR}{LF}」、「資料行分隔符號」選擇「Tab鍵{t}」</li>\n</ul>\n</li>\n<li>左側選單選擇「預覽」確認匯入的資料無誤後，點擊下一步</li>\n<li>「目的地」請選擇「SqlServer」，設定ConnectionString<ul>\n<li>Data Source=1<strong>.*</strong>.<strong><em>.</em></strong>;Initial Catalog=TestDB;Persist Security Info=True;User ID=tester;Password=<strong><em>**</em></strong>;</li>\n</ul>\n</li>\n<li>「選取來源資料表和檢視畫面」確認無誤後，點擊下一步。</li>\n<li>「檢閱資料類型對應畫面」請忽略資料類型的警告，點擊下一步。</li>\n<li>「執行封裝畫面」勾選「立即執行」，點擊下一步。</li>\n<li>「完成精靈畫面」點選完成。</li>\n<li>執行時間長短，依Row Data大小而有所差異。</li>\n</ol>\n<p>(fin)</p>\n"},{"title":"[閱讀筆記]把時間當作朋友","date":"2016-12-04T17:54:34.000Z","_content":"\n\n\n## 零、困境\n*✖ 時間無法管理 能管理的只有你自已。*\n## 一、醒悟\n- *✖ 用思考控制思考*\n- *✖ 心智:就是心靈的智慧，用理性處理感性，控制情緒與慾望。*\n- *✖ 人會在相同的情況下作出完全相反的結論*\n  \n> ...歷史上也常常出現這種情況——其實目的都是“為了人類更好的明天”，可偏偏出現了對立的兩派人，\n他們為了原本一模一樣的理想爭執不休，甚至“拋頭顱”、“撒熱血”，犧牲幾代人的福祉。  \n>> 比如，所謂“水火不相容”的“社會主義陣營”和“資本主義陣營”。\n\n\n> 看穿這一切，擺脫自己的局限，需要心智的力量。\n  \n\n## 二、現實\n- 速成絕無可能\n- 交換才是硬道理\n- 完美永不存在\n- 未知永遠存在\n> 未知分為兩種：一種是永遠不能解決的，另一種是在可預見的未來也許能夠解決的。\n\n*✖ 吾生也有涯，而知也無涯。以有涯隨無涯，殆已！已而為知者，殆而已矣！…指窮於為薪，火傳也，不知其盡也。--莊子。養生主*\n\n*✖ 站在巨人的肩膀上*\n\n- 現狀無法馬上擺脫\n\n{% blockquote %}\n接受現狀才是最優策略——有什麼做什麼，有什麼用什麼；做什麼都做好，用什麼都用好。\n不要常常覺得苦（這會讓人忍不住顧影自憐，浪費精力與時間），而要想辦法在任何情況下找到情趣——\n——**快樂是一種本事**。\n{% endblockquote %} \n\n{% blockquote %}\n心懷“夢想”的時間越長，它的沉沒成本就越高。\n{% endblockquote %} \n\n*✖ 積沙成塔，滴水穿石，時間可以累積，也可以消耗。*\n\n- 與時間做朋友\n\n{% blockquote %}\n與時間做朋友的方法很簡單：用正確的方法做正確的事情。\n{% endblockquote %}\n\n{% blockquote %}\n儘管現實總是如此難於接受，堅強的你卻應該坦然。以上提到的種種現實，包括“速成絕無可能”、“只有付出才有收穫”、“完美永不存在”、“未知永遠存在”、“現狀無法馬上擺脫”，都既清楚又簡單，你必須要接受——不僅要接受，還要牢記；不僅要牢記，還要堅信，不容半點動搖。最好時常把自己的一些念頭記下來，然後與這幾條現實對照，看看它們是否與這些現實相符。\n{% endblockquote %} \n\n{% blockquote %}\n時間是現實的人的朋友，是不現實的人的敵人。時間不是故意要這樣做，只不過事實如此。\n{% endblockquote %} \n\n*✖ 正確的事，正確的做 ; 首先要學會判斷什麼是正確的事。*\n\n## 三、管理\n-  估算時間\n\n{% blockquote %}\n分辨任務的屬性——它是熟悉的還是陌生的呢?\n{% endblockquote %}\n\n{% blockquote %}\n對學習來說，任務“陌生”的可能性更大，因為學習本身是一個探索未知的過程。完成學習任務常常需要花費比我們想像中多得多的時間。對工作來說，任務“熟悉”的可能性更大。因為工作本身是一個應用已知的過程。\n{% endblockquote %}\n\n\n*✖ 軟體工作的這個行業，很有可能是大多數是未知的情況。*\n \n- 及時行動\n\n{% blockquote %}\n接受任務之後，什麼時候開始執行才好呢？比“越早開始越好”更切實的答案是“現在就開始”。\n{% endblockquote %}\n\n*✖ ASAP 不是一個好答案 NOW 才是。*\n\n*✖ 不求有功，但求無過是種慢性自殺，滴水穿石---會消磨掉你的累積。*\n\n- 直面困難\n\n> 效率低下的根本原因是什麼？答案是：迴避困難。\n> ……\n> ……這些問題都源自同一個習慣：專做簡單的，迴避困難的。\n\n- 關注步驟\n\n{% blockquote %}\n所謂“三思而行”在我看來就是指做任何事情之前都要考慮相關的3個方面：內容（What）、原因（Why）、方法（How）。任何任務都起碼具備3個屬性：何事（What）、何因（Why）、何法（How）。\n{% endblockquote %}\n\n{% blockquote %}\n不停地細分、拆解任務，而且越具體越好，直至每個小任務都可以由一個人獨立完成。\n{% endblockquote %}\n\n例子\n> 擴充詞彙量→托福詞彙→托福核心詞彙→21個單元→每個單元大約100 個單詞→一個單元分2次完成……\n> ▷ 先嘗試做一兩個階段，測量一下完成一個階段需要多長時間。\n▷ 按照測量的結果製作一個時間表，把其餘若干個階段所需要的時間填寫完整（最終總是需要做一些調整的）。\n▷ 背單詞需要重複，所以，每3個階段過後要留出與完成1個階段相等的時間去複習。這就意味著一共需要花費完成56（42+14）個階段的時間。\n▷ 每完成總任務的1/3，就增加與完成1個階段相等的再复習時間。這就意味著一共需要花費完成59（56+3）個階段的時間。\n▷ 學習過程中可能需要多次快速重複記憶，每次可能相當於完成3～5個階段所需要的時間。由於熟悉程度的不斷增加，每次重複記憶所需要的時間會越來越短，所以，預計進行3次重複記憶需要相當於10個階段的時間。這就意味著一共需要花費完成69（59+10）個階段的時間。\n>\n>完成每個階段的具體步驟。\n>\n>▷ 每天早晨騰出一點時間。\n▷ 把前一天背過的單詞朗讀至少2 遍。\n▷ 聽錄音，跟讀當天要背的單詞3～5遍，主要關注發音、拼寫，順帶看看詞義，能記多少就記多少，不求速成。\n▷ 上午利用閒暇時間通讀詞彙列表，並反复閱讀例句。\n▷ 下午用專門的時間把當天要背的單詞集中背2～3遍。可以一邊讀，一邊抄，一邊背，不要只是坐在那里呆呆地盯著詞彙看。\n▷ 空閒的時候反复聽當天要背的單詞，重複次數越多越好。\n▷ 晚上睡覺前複習當天背的單詞。\n\n- 並行串行\n\n*✖ 拆分細項，尋找並行的可能。*\n\n>華羅庚先生曾經用燒水泡茶為例說明過這個問題。\n>>燒水泡茶：參見《統籌方法平話及補充》，華羅庚著，中國工業出版社，1966。\n▷ 辦法甲：洗好水壺，灌上涼水，放在火上。在等待水開的時候洗茶壺、洗茶杯、拿茶葉。等到水開，泡茶喝。\n▷ 辦法乙：先做好一些準備工作，包括洗水壺、洗壺杯、拿茶葉。一切就緒，灌水、燒水，坐待水開了泡茶喝。\n▷ 辦法丙：洗淨開壺，灌上涼水，放在火上，坐待水開。水開了之後急急忙忙找茶葉、洗茶壺、茶杯，泡茶喝。\n\n*✖ 分別為聖的**時間片***\n\n>一個處理器在一個時間段內其實只能做一件事，因為它只有一個個體、一個時空。而多任務操作系統把一個長時間段劃分成很多短小的時間片，每個時間片只讓處理器執行一個進程（Process）——儘管同時可能有多個進程需要處理。在第一個時間片裡，操作系統讓處理器處理A進程；時間片的時間用完之後，無論A進程處理到什麼程度，都要被“掛起”（即，A進程這時不能再佔用處理器資源——儘管它還是被允許使用計算機的其他資源，如內存、磁盤、屏幕輸出等）；在第二個時間片裡，處理器處理的是B進程，時間用完之後，B進程將與A進程一樣被中途“掛起”；\n\n- 感知時間\n\n> 逃避責任就會帶來輕鬆，可那恰恰就是“生命中不能承受之輕”啊！\n\n*有的時候「逃避雖可恥但有用」，學會判斷什麼是可以逃避的事，什麼是不可逃避的事。*\n\n> 學著做每天的“事件日誌”（Event Log）。除了自己經歷的事件之外，\n> 一概不記，而且盡量不記感想，不記感受，只記錄事件本身。\n> ...\n> ...記錄過程要比基於結果的記錄更為詳盡\n\n例子\n>>烏里揚諾夫斯克。一九六四年四月七日。分類昆蟲學（畫兩張無名袋蛾的圖）——三小時十五分。鑑定袋蛾——二十分（1.0）。\n>>\n>>附加工作：給斯拉瓦寫信——二小時四十五分（0.5）。\n>>\n>>社會工作：植物保護小組開會——二小時二十五分。休息：給伊戈爾寫信——十分；\n>>《烏里揚諾夫斯克真理報》——十分；列夫·托爾斯泰的《塞瓦斯托波爾紀事》——一小時二十五分。\n>>\n>>基本工作合計——六小時二十分。\n\n*✖ 簡單的分類 + 事件 + 費時，最後再合計起來。*\n*(其於事實)條列式的記錄法，與時間調色盤(預定)的方法不太一樣。*\n*你可以預定你要作的事，可是你無法正確的估時 ; 這是事實，請面對這個事實。*\n*輔助上分別為聖的時間切片或許可以有所幫助*\n\n- 記錄開銷 \n\n*練習中*\n\n- 制訂預算\n\n*✖ 先養成記錄的習慣，再養成制定預算的習慣*\n*✖ 只列事情，重要/不重要*\n\n{% blockquote %}\n每個人都喜歡做有趣的事情，做的時候往往並不關心這件事到底有沒有用。可是，有趣的事不見得有用啊！\n{% endblockquote %}\n\n{% blockquote %}\n養成任何一個哪怕很小的習慣都需要掙扎。然而，貌似痛苦的掙扎過程，在將來的某個時刻終將變得其樂無窮。\n{% endblockquote %}\n\n- 計劃\n\n{% blockquote %}\n計劃成功的前提：目標現實可行\n{% endblockquote %}\n\n{% blockquote %}\n我們不是計劃著失敗，而是失敗地計劃(People don't plan to fail, they fail to plan)。\n{% endblockquote %}\n\n*✖ 簡單的判斷目標是不是現實可行*\n\n{% blockquote %}\n>證明我的目標現實可行的方法比較簡單：\n> 1. 已經有人做到了。\n> 2. 我與那個人沒有太大的差距。\n{% endblockquote %}\n\n{% blockquote %}\n> 長期計劃是需要通過實踐才能習得的能力\n{% endblockquote %}\n\n{% blockquote %}\n>沒有人能給我做職業規劃。...生活本身充滿了意外，並且，總是意外到無以復加的地步。\n{% endblockquote %}\n\n*✖ 先從記錄開始，持續一周，繼續保持記錄下試著開始分配時間。*\n*✖ 再試著從周計劃開始作規劃，練習並且保持。*\n\n{% blockquote %}\n>計劃固然重要，行動更為重要。\n{% endblockquote %}\n\n{% blockquote %}\n>任何事情，都可能經歷相同的過程：逐步熟悉，小心摸索，失敗、失敗、再失敗，\n>認真反思，捲土重來，直至成功。而最初，在我們對任務連基本的認知都沒有的時候，\n>制定出來的計劃十有八九隻不過是空談。\n{% endblockquote %}\n\n\n- 列表\n\n- 流程\n\n*✖ 預想各種可能的情境，不用一次到位，持續整合的重點在持續。*\n\n範例:\n\n\n>▷ 確定對方最可能方便接電話的時間（難以確定的時候先發短信詢問）。\n▷ 在撥打電話甚至發短信詢問對方是否方便之前準備好一切計劃溝通的內容，作好檢查列表放在手邊，確保溝通過程中不會遺漏要點。\n▷ 通話前把重要信息整理成電子文本，在通話中做必要的更新，通話結束後，馬上通過電子郵件將備忘發送給對方。\n▷ 若對方沒有接電話，則給對方發署名短信告知詳細事由， 並做好記錄，防止自己遺忘此次溝通任務。\n▷ ……\n\n- 預演\n\n> 準備不足，所以害怕。\n\n*✖ 類似一種沙箱測試，讓錯誤發生在測試階段。*\n\n- 驗收\n\n> 向自己提出一個問題並要想辦法回答清楚：“怎樣才算'做好'？\n\n```\n本篇心得: 這是需要實際操作的一篇，仍在實踐中。\n首先是記錄自已的時間花在哪裡？\n再來是制定時間的預算，分別出神聖的時間去累積一些東西(ex:學習英文、跑步); \n當習慣養成，就不再困難了，而是生活的一部份。\n同時注意工作的流程，\n1. 問自已What Why How ?\n2. 儘可能拆解工作流程的步驟到最小化，建立列表。\n3. 常常發生的工作要設想各種情境,建立SOP,以縮短時間。\n4. 陌生的工作可以透過預演來試錯。\n5. 一定要驗收。\n6. 面對困難與失敗。\n7. 及時行動!\n8. 及時行動!!\n9. 及時行動!!!\n```\n## 四、學習\n\n### 基本途徑\n\n- 體驗\n- 觀察\n- 學習\n\n*✖ 自由是可以被剝奪的。*\n\n### 經驗局限\n\n{% blockquote %}\n> 日常生活中主要的“溝通障礙”本質上幾乎都是由於溝通雙方無法讓對方理解與他們的經驗相悖的知識或信息造成的。\n{% endblockquote %}\n\n{% blockquote %}\n> 長期的進化使人類到達了今天這個高度，但是每個人在出生的那一剎那，居然與其他動物站在幾乎同樣的起點上，心智要從零開始進化。\n{% endblockquote %}\n\n{% blockquote %}\n> > 優秀的領導，能夠把人們帶到他們想去的地方；而卓越的領導，能夠把人們帶到他們應該去但是沒想過要去的地方\n> > A leader takes people where they want to go. A great leader takes people where they don't necessarily want to go, but ought to be.\n{% endblockquote %}\n\n{% blockquote %}\n> 牢記在這世界上確實存在“與現有經驗相悖的知識”，再把這句話變成經驗，用它去類比未知，而後投入大量的時間和精力去學習和掌握“科學方法論”，掙扎著進化成為真正意義上的“人”。\n{% endblockquote %}\n\n### 自學能力\n- 閱讀理解能力 ->檢索能力 -> 寫作能力 -> 實踐能力\n- 永遠保持開放的心態\n\n> 最好固定一段時間來把那些目前暫時無法理解的、支持的、反對的、無所謂的論點和觀點記錄下來。對無法理解的，寫下自己當時的疑惑何在；對支持的，記錄幾個理由或者實例；對反對的，同樣記錄幾個理由或者實例；甚至對那些無所謂的，也記錄其原因。一個有著這樣良好記錄習慣的人會獲得他人無法擁有的處理信息和知識的能力——“反芻”。這種“反芻”能力是我們避免成為“選擇性輸入”受害者的重要保障。\n\n> 在學習的時候，進展和時間的關係肯定不是線性的：所謂“一分耕耘，一分收穫”。這個關係曲線更可能是階梯狀的：學習過程中有很長時間一點進展都沒有，但從某一刻開始突飛猛進，而後又是長長的一段所謂的“平台期”。...只有經歷積累的過程，“量變到質變”的效果才會出現，才有可能突飛猛進。\n\n## 五、思考\n- [勤於思考](#c51)\n- [思維陷阱](#c52)\n- [因果關係](#c53)\n- [逆命題](#c54)\n- [舉證責任](#c55)\n- [案例局限](#c56)\n- [對立論證](#c57)\n- [張冠李戴](#c58)\n- [感悟與道理](#c59)\n- [克服恐懼](#c510)\n- [輔助工具](#c511)\n### <span id='c51'>勤於思考</span>\n\n> 人都有大腦，閒置還是使用，是個問題。\n\n1. 獨立思考\n2. 思考任務的目標、實質、意義\n\n>很多人就是這樣，堅持拒絕思考，然後用天下最累的方式生活而不自知。大哲學家羅素曾觀察到這個現象，他為之奇怪並慨嘆，“ 很多人寧願死也不願思考 ”，然後戲謔道，“ 實際上，他們確實死得很快。”\n>>Most people would die sooner than think — in fact they do so. \n— Bertrand Russell，In The ABC of Relativity，1925，P.166\n\n### <span id='c52'>思維陷阱</span>\n#### 概念不清和拒絕接受不確定性\n\n1. 概念不清\n\n{% blockquote %}\n> 學習任何知識最重要的一點，就是搞清楚它所有的基礎概念。\n{% endblockquote %}\n\n{% blockquote %}\n> 讀教科書，要先把所有概念都記下來，暫時不懂的就死記硬背。把概念牢記於心，就可以通過以後的學習和實踐反複審視它，並形成透徹理解。\n{% endblockquote %}\n\n{% blockquote %}\n> 本書強調“時間不可管理”、“我們只能管理自己”，並非咬文嚼字。“時間管理”和“自我管理”是完全不同的概念——焦點不同，方法不同，效果不同\n{% endblockquote %}\n\n2. 拒絕接受不確定性\n\n> 未知永遠存在。從本質上來看，不確定性和未知是一回事。\n\n\n### <span id='c53'>因果關係</span>\n\n#### 基礎\n\n>外因會影響內因，內因同樣會影響外因。它們相互影響，互為因果。\n> \n> 舉一個特別好玩的現象為例：在某種意義上，學生的水平決定教師的水平。\n>\n>這話並沒有說反。師生之間的有效溝通，肯定不僅是教師單方面的灌輸。越是用心的教師，越關注學生的反饋；越是用心的學生，越關注教師對他的反饋的反饋。顯然，這種溝通不僅是雙向的，還隨著雙方的用心程度而不斷增強。\n>\n>這和下棋是一樣的道理。據說，棋藝到了一定程度，棋手就會不由自主地挑選對手，因為跟高手下棋就會進步，但反過來，與“臭手”交手多了，自己的手也會變“臭”……優質的學生，對他們的教師來說，不僅是令人愉悅的教學對象（學生一點就透，老師沒有不開心的），更重要的，他們還是對教師的挑戰——這些學生有著長期而且優秀的學習經驗，也因此擁有相對良好的判斷能力，隨時可能提出一般教師無法回答的問題。經過一段時間的積累，雙方都會因為教學和溝通發生巨大的進步——只要雙方都足夠優秀，足夠用心。\n\n{% blockquote %}\n正在塑造我們的這個環境，也是我們自己（參與）塑造的\n{% endblockquote %}\n\n>#### 要做一個用心的人，要用心做事，因為這世界其實也是有“心”的。\n\n#### 雙盲測試\n\n*註: 受測者不知道安慰劑的存在，測試者則不知道誰服用了安慰劑，單純以局外人的角度觀測記錄。*\n\n> 人群中也有差不多⅓的人更易受到（來自他人或來自自身的）心理暗示的影響。也就是說，他們更可能在服用安慰劑後病情真正好轉。\n\n#### 自證預言\n\n>莫頓教授用銀行擠兌的例子說明了自證預言的作用機理：\n>>一家銀行本來運作得很正常，但不知什麼原因，出現了“這家銀行要倒閉”的流言。流言越傳越廣，導致越來越多的人信以為真，有人為防意外而跑到銀行把自己的存款提走。恐慌情緒蔓延，並且變得愈加真實，更多的人衝進銀行提走自己的存款……最終，擠兌發生了，銀行真的倒閉了。\n\n>一個原本並不存在的原因竟然“無中生有”變成了真正的原因。\n\n#### 心中恐惧失敗，才是失敗的原因。\n\n### <span id='c54'>逆命題</span> \n\n>**原命題為真，它的逆命題不一定為真。**\n>P 則 Q 等於 ~Q 則 ~P\n>但是不一定存在 Q 則 P 的關係\n\n>有70%以上的人分不清楚原命題和逆命題之間的區別。\n>\n>>參見《認知心理學》（Cognitive Psychology: A Student's Handbook，2000），邁克爾·艾森克（Michael W. Eysenck）、馬克·基恩（Mark T. Keane）合著。\n\n*✖ 心得: 人很好騙，至少70%很好騙。*\n\n\n### <span id='c55'>舉證責任</span> \n\n> \"舉證責任\"是不對等的\n> 爭論雙方的境況常常處於這種狀態：\n▷其中一方肩負沉重的舉證責任（burden of proof）\n▷另外一方則享有來自假設的恩惠（benefit of assumption）\n\n{% blockquote %}\n既然你無法證明我是錯的，那麼我就是對的。這是一種典型的邏輯錯誤\n{% endblockquote %}\n\n*✖ 套用一下邏輯學:*\n*我是對的 則 你無法証明我是錯的，恒為真。*\n*你無法証明我是錯的 則 我是錯的，恒為真。*\n*你無法證明我是錯的 則 我是對的，不恒為真*\n\n### <span id='c56'>案例局限</span> \n\n\n>最為常見的邏輯錯誤就是“以偏概全”——某種經驗在某個人身上應驗了，並不意味著該經驗在所有人身上都會起作用。\n\n*✖ 常見的推銷話術，我作得到，你也作得到。努力就會成功。*\n*這類的話術可怕的地方在於它不完全是錯的，但是你必需客觀衡量各種條件，而非局限單一案例。*\n\n### <span id='c57'>對立論證</span> \n\n{% blockquote %}\n>人們可能基於一模一樣的原因做出截然相反的決定。換句話說，用同樣的論據證明截然相反的論點。\n{% endblockquote %}\n\n{% blockquote %}\n>抱怨上司“愚蠢”的人和能夠發覺“上司的愚蠢可能有另外的解釋”的人，得到的結論和採取的行動往往截然相反。**因此，時間在他們接下來的經歷中所產生的伴隨作用也截然相反。這裡，時間再一次選擇與心智強大的人做朋友**\n{% endblockquote %}\n\n{% blockquote %}\n>一旦意識到對立論證的存在，應該**“哪一個更合理、更現實就接受哪一個”**，而非“哪一個更積極就接受哪一個”，因為後者只是自我欺騙而已。積極的並不總是好的，哪一個極端理想主義者（以及他們的想法、理念）不是積極的呢？\n{% endblockquote %}\n\n*✖ 職場上不論是留下繼續努力，或是掛冠求去都無對錯之分，而是何者更為合理。這個道理在人生的選擇上也是，需要注意對立論證的存在，堅持或放棄本無對錯，合理的判斷即可。*\n\n### <span id='c58'>張冠李戴</span>\n\n{% blockquote %}\n>論點和論據之間儘管全無邏輯聯繫，卻可以用一種“顯然合理”的姿態綁在一起。\n{% endblockquote %}\n\n舉例:\n\n>將字母A到Z分別編上1到26的分數（A=1,B=2,…,Z=26），然後比較不同單詞的分值：\n▷Knowledge（知識）得到96分\n（11+14+15+23+12+5+4+7+5=96）；\n▷Hardwork（努力）也只得到98分\n（8+1+18+4+23+15+18+11=98）；\n▷Attitude（態度）才能左右你生命的全部，\n因為它能得到100分\n（1+20+20+9+20+21+4+5=100）——滿分。\n得出結論：“態度改變一切”。\nBullshit（胡說八道）\n(2+21+12+12+19+8+9+20=103)\n\n\n### <span id='c59'>感悟與道理</span>\n\n{% blockquote %}\n“道理”應該是普適的，而“感悟”只來自個體經驗。\n{% endblockquote %}\n\n{% blockquote %}\n並非只有專家級別的新聞工作者才要分清“看法與事實之間的區別”，其實每個人都需要清楚地認識“道理”和“感悟”之間的巨大差異。\n{% endblockquote %}\n\n{% blockquote %}\n如果某個人把他們說的當作全部，把他們沒說的當作沒有，那麼這個人的智商就跟寓言中那個掩耳盜鈴的傢伙屬於同一個水平了。\n{% endblockquote %}\n\n{% blockquote %}\n人類普遍擁有的一個認知偏差就是：把成功攬到自己身上，把失敗歸咎於別人或者壞運氣。（這在心理學上有個術語，叫做“自利性偏差(Self-servingBias)”。）從這裡我們就可以知道，那些“成功者”這麼做的時候，往往並不是有意欺騙——他們甚至出於好意。\n{% endblockquote %}\n\n{% blockquote %}\n一個很實用的建議：與其關注成功者，不妨反其道而行之——努力從失敗者身上汲取經驗。\n{% endblockquote %}\n\n\n*✖ 困難的點在於，感悟難以作\"雙盲測試\"，也深受\"案例局限\"與\"安慰劑效應\"影響*\n\n### <span id='c510'>克服恐懼</span>\n\n{% blockquote %}\n“道理都明白，可就做不到”\n{% endblockquote %}\n\n### <span id='c511'>輔助工具</span>\n#### 語言\n\n{% blockquote %}\n以下一些句式最好經常使用，因為它們特別有助於獨立思考習慣的養成，並且也有刺激思考的作用：\n▷……是一回事，而……是另外一回事。\n▷……和……其實根本不是一回事。\n▷……不一定……\n▷……。可是，這並不意味著……\n▷……也許還有另外一種可能性（解釋）。\n▷……看起來像……，可是……\n▷……。而事實卻可能遠比看起來的更為複雜（簡單）。\n▷……。然而，（這個論斷）反過來（陳述）卻不一定成立……\n▷……其實很可能與……根本就沒有任何關係。\n▷……和……之間不一定是單純的因果關係，它們也可能互為因果。\n▷……和……之間的比較也許沒有任何意義。\n▷……其實不過是表面現象，其背後的本質是……\n▷……有一個通常被忽略的前提。\n▷……儘管聽起來很有道理，然而卻完全不現實。\n▷……也許有人會說……，但是這種質疑卻……\n{% endblockquote %}\n\n{% blockquote %}\n要刻意迴避的句子\n▷……難道就沒有一點可取之處嗎？\n▷……要是……就好了！\n{% endblockquote %}\n\n\n## 六、交流\n###  學會傾聽\n\n{% blockquote %}\n為了真正做到有效傾聽，最需要克制的就是“過早質疑”。\n{% endblockquote %}\n\n{% blockquote %}\n就算需要質疑，也一定要等到對方把話說完。\n{% endblockquote %}\n\n### 說與不說\n\n{% blockquote %}\n“知無不言，言無不盡”在大部分情況下是最浪費時間和精力的做法。\n{% endblockquote %}\n\n{% blockquote %}\n...在分辨談話對象之前很可能要先分辨自己，所以，\n“可與言而不與言，失人。不可與言而與之言，失言。”這是說要分辨談話的對象。\n{% endblockquote %}\n\n### 共生狀態\n\n>見瓦茨拉夫·哈維爾先生製定的《對話守則》：\n1.對話的目的是尋求真理，不是為了鬥爭。\n2.不做人身攻擊。\n3.保持主題。\n4.辯論時要用證據。\n5.不要堅持錯誤不改。\n6.要分清對話與只准自己講話的區別。\n7.對話要有記錄。\n8.盡量理解對方。\n\n{% blockquote %}\n雙方想要進行有意義的討論，最基本的要求就是雙方必須共同遵守“理性討論基本原則”。\n{% endblockquote %}\n\n{% blockquote %}\n跨越“自以為是”\n{% endblockquote %}\n\n*✖ 「緣督以為經；因其故然」--- 莊子。養生主 ; 學習應順其自然，不然會把自已累死。「知知為知知，不知為不知，是知也」---論語* \n\n{% blockquote %}\n第一個原則：有意義的討論是競合\n第二個原則：真理是獨立存在的\n第三個原則：真理不變\n{% endblockquote %}\n\n### 正確複述\n\n> 為了保證溝通順利，往往需要添加一個驗證機制，或者說反饋機制。\n\n### 勤於反思\n- 深刻了解經驗的局限\n- 時時刻刻保持警惕 \n\n> 手裡只有一把錘子，看什麼問題都像釘子\t\n\n- 用記錄，使自己能夠記住更多的經驗 \n- 通過觀察和閱讀汲取他人的經驗\n- 經常試用類比來跨越未知與已知的障礙 \n- 耐心等待以獲得不能跨越時間的經驗  \n\n\n\n## 七、應用\n### 興趣\n\n>說來說去，是順序出了問題：往往並不是有興趣才能做好，而是做好了才有興趣。人們總是搞錯順序，並對這樣的錯誤毫不知曉。雖然並非絕對，但完成大多數事情，確實都需要熟能生巧。做得多了，自然就能擅長；擅長了，自然就做得比別人好；做得比別人好了，興趣就濃起來了，而後就更喜歡做、更擅長……進入良性循環。可同樣的，做得多，就需要大量的時間投入，所謂“沒興趣”，往往不過是結果，如果將它當作“不去做好”的理由，最終的懲罰就是大量時間白白流逝。\n\n### 方法\n\n>所有學習上的成功，都只依靠兩件事——策略和堅持，而堅持本身就是最重要的策略。堅持，其實就是重複；而重複，說到底就是時間的投入，準確地說，是大量時間的投入。\n\n*✖ 你沒有實際作之前，不會知道效果如何，再在找更好的方法之前，最好的策略是堅持*\n\n### 痛苦 -比較 - 運氣\n\n### 人脈\n{% blockquote %}\n> 當我們把時間花到一個人身上的時候，相當於在他身上傾注了自己生命的一段。\n{% endblockquote %}\n\n{% blockquote %}\n> ▷專心做可以提升自己的事情，學習並擁有更多、更好的技能，成為一個值得他人交往的人。\n▷學會獨善其身，以不給他人製造麻煩為美德，用自己的獨立贏得尊重。\n{% endblockquote %}\n\n*✖ 人必自重而後人重之---你值得人家交往，人家就會來跟你交往。*\n\n### 自卑\n\n*✖  保持謙卑，認識真正的自已。*\n\n### 靈感\n\n*✖ 靈感來自於累積，筆記是一個好工具*\n\n### 鼓勵\n\n### 效率\n\n### 節奏\n\n### 物極必反\n\n>- 絕對不要盲目地試圖減少睡眠時間\n- 盡量不要減少與家庭成員交流的時間\n- 最好不要放棄你的社交時間\n\n### 自我證明\n\n\n## 參考\n\n- [電子書](http://zhibimo.com/read/xiaolai/ba-shi-jian-dang-zuo-peng-you/index.html)\n- [奇特的一生](http://www.books.com.tw/products/CN11349756)\n","source":"_posts/be_friend_with_time.md","raw":"---\ntitle: \"[閱讀筆記]把時間當作朋友\"\ndate: 2016/12/05 01:54:34\ntag:\n  - 閱讀筆記\n---\n\n\n\n## 零、困境\n*✖ 時間無法管理 能管理的只有你自已。*\n## 一、醒悟\n- *✖ 用思考控制思考*\n- *✖ 心智:就是心靈的智慧，用理性處理感性，控制情緒與慾望。*\n- *✖ 人會在相同的情況下作出完全相反的結論*\n  \n> ...歷史上也常常出現這種情況——其實目的都是“為了人類更好的明天”，可偏偏出現了對立的兩派人，\n他們為了原本一模一樣的理想爭執不休，甚至“拋頭顱”、“撒熱血”，犧牲幾代人的福祉。  \n>> 比如，所謂“水火不相容”的“社會主義陣營”和“資本主義陣營”。\n\n\n> 看穿這一切，擺脫自己的局限，需要心智的力量。\n  \n\n## 二、現實\n- 速成絕無可能\n- 交換才是硬道理\n- 完美永不存在\n- 未知永遠存在\n> 未知分為兩種：一種是永遠不能解決的，另一種是在可預見的未來也許能夠解決的。\n\n*✖ 吾生也有涯，而知也無涯。以有涯隨無涯，殆已！已而為知者，殆而已矣！…指窮於為薪，火傳也，不知其盡也。--莊子。養生主*\n\n*✖ 站在巨人的肩膀上*\n\n- 現狀無法馬上擺脫\n\n{% blockquote %}\n接受現狀才是最優策略——有什麼做什麼，有什麼用什麼；做什麼都做好，用什麼都用好。\n不要常常覺得苦（這會讓人忍不住顧影自憐，浪費精力與時間），而要想辦法在任何情況下找到情趣——\n——**快樂是一種本事**。\n{% endblockquote %} \n\n{% blockquote %}\n心懷“夢想”的時間越長，它的沉沒成本就越高。\n{% endblockquote %} \n\n*✖ 積沙成塔，滴水穿石，時間可以累積，也可以消耗。*\n\n- 與時間做朋友\n\n{% blockquote %}\n與時間做朋友的方法很簡單：用正確的方法做正確的事情。\n{% endblockquote %}\n\n{% blockquote %}\n儘管現實總是如此難於接受，堅強的你卻應該坦然。以上提到的種種現實，包括“速成絕無可能”、“只有付出才有收穫”、“完美永不存在”、“未知永遠存在”、“現狀無法馬上擺脫”，都既清楚又簡單，你必須要接受——不僅要接受，還要牢記；不僅要牢記，還要堅信，不容半點動搖。最好時常把自己的一些念頭記下來，然後與這幾條現實對照，看看它們是否與這些現實相符。\n{% endblockquote %} \n\n{% blockquote %}\n時間是現實的人的朋友，是不現實的人的敵人。時間不是故意要這樣做，只不過事實如此。\n{% endblockquote %} \n\n*✖ 正確的事，正確的做 ; 首先要學會判斷什麼是正確的事。*\n\n## 三、管理\n-  估算時間\n\n{% blockquote %}\n分辨任務的屬性——它是熟悉的還是陌生的呢?\n{% endblockquote %}\n\n{% blockquote %}\n對學習來說，任務“陌生”的可能性更大，因為學習本身是一個探索未知的過程。完成學習任務常常需要花費比我們想像中多得多的時間。對工作來說，任務“熟悉”的可能性更大。因為工作本身是一個應用已知的過程。\n{% endblockquote %}\n\n\n*✖ 軟體工作的這個行業，很有可能是大多數是未知的情況。*\n \n- 及時行動\n\n{% blockquote %}\n接受任務之後，什麼時候開始執行才好呢？比“越早開始越好”更切實的答案是“現在就開始”。\n{% endblockquote %}\n\n*✖ ASAP 不是一個好答案 NOW 才是。*\n\n*✖ 不求有功，但求無過是種慢性自殺，滴水穿石---會消磨掉你的累積。*\n\n- 直面困難\n\n> 效率低下的根本原因是什麼？答案是：迴避困難。\n> ……\n> ……這些問題都源自同一個習慣：專做簡單的，迴避困難的。\n\n- 關注步驟\n\n{% blockquote %}\n所謂“三思而行”在我看來就是指做任何事情之前都要考慮相關的3個方面：內容（What）、原因（Why）、方法（How）。任何任務都起碼具備3個屬性：何事（What）、何因（Why）、何法（How）。\n{% endblockquote %}\n\n{% blockquote %}\n不停地細分、拆解任務，而且越具體越好，直至每個小任務都可以由一個人獨立完成。\n{% endblockquote %}\n\n例子\n> 擴充詞彙量→托福詞彙→托福核心詞彙→21個單元→每個單元大約100 個單詞→一個單元分2次完成……\n> ▷ 先嘗試做一兩個階段，測量一下完成一個階段需要多長時間。\n▷ 按照測量的結果製作一個時間表，把其餘若干個階段所需要的時間填寫完整（最終總是需要做一些調整的）。\n▷ 背單詞需要重複，所以，每3個階段過後要留出與完成1個階段相等的時間去複習。這就意味著一共需要花費完成56（42+14）個階段的時間。\n▷ 每完成總任務的1/3，就增加與完成1個階段相等的再复習時間。這就意味著一共需要花費完成59（56+3）個階段的時間。\n▷ 學習過程中可能需要多次快速重複記憶，每次可能相當於完成3～5個階段所需要的時間。由於熟悉程度的不斷增加，每次重複記憶所需要的時間會越來越短，所以，預計進行3次重複記憶需要相當於10個階段的時間。這就意味著一共需要花費完成69（59+10）個階段的時間。\n>\n>完成每個階段的具體步驟。\n>\n>▷ 每天早晨騰出一點時間。\n▷ 把前一天背過的單詞朗讀至少2 遍。\n▷ 聽錄音，跟讀當天要背的單詞3～5遍，主要關注發音、拼寫，順帶看看詞義，能記多少就記多少，不求速成。\n▷ 上午利用閒暇時間通讀詞彙列表，並反复閱讀例句。\n▷ 下午用專門的時間把當天要背的單詞集中背2～3遍。可以一邊讀，一邊抄，一邊背，不要只是坐在那里呆呆地盯著詞彙看。\n▷ 空閒的時候反复聽當天要背的單詞，重複次數越多越好。\n▷ 晚上睡覺前複習當天背的單詞。\n\n- 並行串行\n\n*✖ 拆分細項，尋找並行的可能。*\n\n>華羅庚先生曾經用燒水泡茶為例說明過這個問題。\n>>燒水泡茶：參見《統籌方法平話及補充》，華羅庚著，中國工業出版社，1966。\n▷ 辦法甲：洗好水壺，灌上涼水，放在火上。在等待水開的時候洗茶壺、洗茶杯、拿茶葉。等到水開，泡茶喝。\n▷ 辦法乙：先做好一些準備工作，包括洗水壺、洗壺杯、拿茶葉。一切就緒，灌水、燒水，坐待水開了泡茶喝。\n▷ 辦法丙：洗淨開壺，灌上涼水，放在火上，坐待水開。水開了之後急急忙忙找茶葉、洗茶壺、茶杯，泡茶喝。\n\n*✖ 分別為聖的**時間片***\n\n>一個處理器在一個時間段內其實只能做一件事，因為它只有一個個體、一個時空。而多任務操作系統把一個長時間段劃分成很多短小的時間片，每個時間片只讓處理器執行一個進程（Process）——儘管同時可能有多個進程需要處理。在第一個時間片裡，操作系統讓處理器處理A進程；時間片的時間用完之後，無論A進程處理到什麼程度，都要被“掛起”（即，A進程這時不能再佔用處理器資源——儘管它還是被允許使用計算機的其他資源，如內存、磁盤、屏幕輸出等）；在第二個時間片裡，處理器處理的是B進程，時間用完之後，B進程將與A進程一樣被中途“掛起”；\n\n- 感知時間\n\n> 逃避責任就會帶來輕鬆，可那恰恰就是“生命中不能承受之輕”啊！\n\n*有的時候「逃避雖可恥但有用」，學會判斷什麼是可以逃避的事，什麼是不可逃避的事。*\n\n> 學著做每天的“事件日誌”（Event Log）。除了自己經歷的事件之外，\n> 一概不記，而且盡量不記感想，不記感受，只記錄事件本身。\n> ...\n> ...記錄過程要比基於結果的記錄更為詳盡\n\n例子\n>>烏里揚諾夫斯克。一九六四年四月七日。分類昆蟲學（畫兩張無名袋蛾的圖）——三小時十五分。鑑定袋蛾——二十分（1.0）。\n>>\n>>附加工作：給斯拉瓦寫信——二小時四十五分（0.5）。\n>>\n>>社會工作：植物保護小組開會——二小時二十五分。休息：給伊戈爾寫信——十分；\n>>《烏里揚諾夫斯克真理報》——十分；列夫·托爾斯泰的《塞瓦斯托波爾紀事》——一小時二十五分。\n>>\n>>基本工作合計——六小時二十分。\n\n*✖ 簡單的分類 + 事件 + 費時，最後再合計起來。*\n*(其於事實)條列式的記錄法，與時間調色盤(預定)的方法不太一樣。*\n*你可以預定你要作的事，可是你無法正確的估時 ; 這是事實，請面對這個事實。*\n*輔助上分別為聖的時間切片或許可以有所幫助*\n\n- 記錄開銷 \n\n*練習中*\n\n- 制訂預算\n\n*✖ 先養成記錄的習慣，再養成制定預算的習慣*\n*✖ 只列事情，重要/不重要*\n\n{% blockquote %}\n每個人都喜歡做有趣的事情，做的時候往往並不關心這件事到底有沒有用。可是，有趣的事不見得有用啊！\n{% endblockquote %}\n\n{% blockquote %}\n養成任何一個哪怕很小的習慣都需要掙扎。然而，貌似痛苦的掙扎過程，在將來的某個時刻終將變得其樂無窮。\n{% endblockquote %}\n\n- 計劃\n\n{% blockquote %}\n計劃成功的前提：目標現實可行\n{% endblockquote %}\n\n{% blockquote %}\n我們不是計劃著失敗，而是失敗地計劃(People don't plan to fail, they fail to plan)。\n{% endblockquote %}\n\n*✖ 簡單的判斷目標是不是現實可行*\n\n{% blockquote %}\n>證明我的目標現實可行的方法比較簡單：\n> 1. 已經有人做到了。\n> 2. 我與那個人沒有太大的差距。\n{% endblockquote %}\n\n{% blockquote %}\n> 長期計劃是需要通過實踐才能習得的能力\n{% endblockquote %}\n\n{% blockquote %}\n>沒有人能給我做職業規劃。...生活本身充滿了意外，並且，總是意外到無以復加的地步。\n{% endblockquote %}\n\n*✖ 先從記錄開始，持續一周，繼續保持記錄下試著開始分配時間。*\n*✖ 再試著從周計劃開始作規劃，練習並且保持。*\n\n{% blockquote %}\n>計劃固然重要，行動更為重要。\n{% endblockquote %}\n\n{% blockquote %}\n>任何事情，都可能經歷相同的過程：逐步熟悉，小心摸索，失敗、失敗、再失敗，\n>認真反思，捲土重來，直至成功。而最初，在我們對任務連基本的認知都沒有的時候，\n>制定出來的計劃十有八九隻不過是空談。\n{% endblockquote %}\n\n\n- 列表\n\n- 流程\n\n*✖ 預想各種可能的情境，不用一次到位，持續整合的重點在持續。*\n\n範例:\n\n\n>▷ 確定對方最可能方便接電話的時間（難以確定的時候先發短信詢問）。\n▷ 在撥打電話甚至發短信詢問對方是否方便之前準備好一切計劃溝通的內容，作好檢查列表放在手邊，確保溝通過程中不會遺漏要點。\n▷ 通話前把重要信息整理成電子文本，在通話中做必要的更新，通話結束後，馬上通過電子郵件將備忘發送給對方。\n▷ 若對方沒有接電話，則給對方發署名短信告知詳細事由， 並做好記錄，防止自己遺忘此次溝通任務。\n▷ ……\n\n- 預演\n\n> 準備不足，所以害怕。\n\n*✖ 類似一種沙箱測試，讓錯誤發生在測試階段。*\n\n- 驗收\n\n> 向自己提出一個問題並要想辦法回答清楚：“怎樣才算'做好'？\n\n```\n本篇心得: 這是需要實際操作的一篇，仍在實踐中。\n首先是記錄自已的時間花在哪裡？\n再來是制定時間的預算，分別出神聖的時間去累積一些東西(ex:學習英文、跑步); \n當習慣養成，就不再困難了，而是生活的一部份。\n同時注意工作的流程，\n1. 問自已What Why How ?\n2. 儘可能拆解工作流程的步驟到最小化，建立列表。\n3. 常常發生的工作要設想各種情境,建立SOP,以縮短時間。\n4. 陌生的工作可以透過預演來試錯。\n5. 一定要驗收。\n6. 面對困難與失敗。\n7. 及時行動!\n8. 及時行動!!\n9. 及時行動!!!\n```\n## 四、學習\n\n### 基本途徑\n\n- 體驗\n- 觀察\n- 學習\n\n*✖ 自由是可以被剝奪的。*\n\n### 經驗局限\n\n{% blockquote %}\n> 日常生活中主要的“溝通障礙”本質上幾乎都是由於溝通雙方無法讓對方理解與他們的經驗相悖的知識或信息造成的。\n{% endblockquote %}\n\n{% blockquote %}\n> 長期的進化使人類到達了今天這個高度，但是每個人在出生的那一剎那，居然與其他動物站在幾乎同樣的起點上，心智要從零開始進化。\n{% endblockquote %}\n\n{% blockquote %}\n> > 優秀的領導，能夠把人們帶到他們想去的地方；而卓越的領導，能夠把人們帶到他們應該去但是沒想過要去的地方\n> > A leader takes people where they want to go. A great leader takes people where they don't necessarily want to go, but ought to be.\n{% endblockquote %}\n\n{% blockquote %}\n> 牢記在這世界上確實存在“與現有經驗相悖的知識”，再把這句話變成經驗，用它去類比未知，而後投入大量的時間和精力去學習和掌握“科學方法論”，掙扎著進化成為真正意義上的“人”。\n{% endblockquote %}\n\n### 自學能力\n- 閱讀理解能力 ->檢索能力 -> 寫作能力 -> 實踐能力\n- 永遠保持開放的心態\n\n> 最好固定一段時間來把那些目前暫時無法理解的、支持的、反對的、無所謂的論點和觀點記錄下來。對無法理解的，寫下自己當時的疑惑何在；對支持的，記錄幾個理由或者實例；對反對的，同樣記錄幾個理由或者實例；甚至對那些無所謂的，也記錄其原因。一個有著這樣良好記錄習慣的人會獲得他人無法擁有的處理信息和知識的能力——“反芻”。這種“反芻”能力是我們避免成為“選擇性輸入”受害者的重要保障。\n\n> 在學習的時候，進展和時間的關係肯定不是線性的：所謂“一分耕耘，一分收穫”。這個關係曲線更可能是階梯狀的：學習過程中有很長時間一點進展都沒有，但從某一刻開始突飛猛進，而後又是長長的一段所謂的“平台期”。...只有經歷積累的過程，“量變到質變”的效果才會出現，才有可能突飛猛進。\n\n## 五、思考\n- [勤於思考](#c51)\n- [思維陷阱](#c52)\n- [因果關係](#c53)\n- [逆命題](#c54)\n- [舉證責任](#c55)\n- [案例局限](#c56)\n- [對立論證](#c57)\n- [張冠李戴](#c58)\n- [感悟與道理](#c59)\n- [克服恐懼](#c510)\n- [輔助工具](#c511)\n### <span id='c51'>勤於思考</span>\n\n> 人都有大腦，閒置還是使用，是個問題。\n\n1. 獨立思考\n2. 思考任務的目標、實質、意義\n\n>很多人就是這樣，堅持拒絕思考，然後用天下最累的方式生活而不自知。大哲學家羅素曾觀察到這個現象，他為之奇怪並慨嘆，“ 很多人寧願死也不願思考 ”，然後戲謔道，“ 實際上，他們確實死得很快。”\n>>Most people would die sooner than think — in fact they do so. \n— Bertrand Russell，In The ABC of Relativity，1925，P.166\n\n### <span id='c52'>思維陷阱</span>\n#### 概念不清和拒絕接受不確定性\n\n1. 概念不清\n\n{% blockquote %}\n> 學習任何知識最重要的一點，就是搞清楚它所有的基礎概念。\n{% endblockquote %}\n\n{% blockquote %}\n> 讀教科書，要先把所有概念都記下來，暫時不懂的就死記硬背。把概念牢記於心，就可以通過以後的學習和實踐反複審視它，並形成透徹理解。\n{% endblockquote %}\n\n{% blockquote %}\n> 本書強調“時間不可管理”、“我們只能管理自己”，並非咬文嚼字。“時間管理”和“自我管理”是完全不同的概念——焦點不同，方法不同，效果不同\n{% endblockquote %}\n\n2. 拒絕接受不確定性\n\n> 未知永遠存在。從本質上來看，不確定性和未知是一回事。\n\n\n### <span id='c53'>因果關係</span>\n\n#### 基礎\n\n>外因會影響內因，內因同樣會影響外因。它們相互影響，互為因果。\n> \n> 舉一個特別好玩的現象為例：在某種意義上，學生的水平決定教師的水平。\n>\n>這話並沒有說反。師生之間的有效溝通，肯定不僅是教師單方面的灌輸。越是用心的教師，越關注學生的反饋；越是用心的學生，越關注教師對他的反饋的反饋。顯然，這種溝通不僅是雙向的，還隨著雙方的用心程度而不斷增強。\n>\n>這和下棋是一樣的道理。據說，棋藝到了一定程度，棋手就會不由自主地挑選對手，因為跟高手下棋就會進步，但反過來，與“臭手”交手多了，自己的手也會變“臭”……優質的學生，對他們的教師來說，不僅是令人愉悅的教學對象（學生一點就透，老師沒有不開心的），更重要的，他們還是對教師的挑戰——這些學生有著長期而且優秀的學習經驗，也因此擁有相對良好的判斷能力，隨時可能提出一般教師無法回答的問題。經過一段時間的積累，雙方都會因為教學和溝通發生巨大的進步——只要雙方都足夠優秀，足夠用心。\n\n{% blockquote %}\n正在塑造我們的這個環境，也是我們自己（參與）塑造的\n{% endblockquote %}\n\n>#### 要做一個用心的人，要用心做事，因為這世界其實也是有“心”的。\n\n#### 雙盲測試\n\n*註: 受測者不知道安慰劑的存在，測試者則不知道誰服用了安慰劑，單純以局外人的角度觀測記錄。*\n\n> 人群中也有差不多⅓的人更易受到（來自他人或來自自身的）心理暗示的影響。也就是說，他們更可能在服用安慰劑後病情真正好轉。\n\n#### 自證預言\n\n>莫頓教授用銀行擠兌的例子說明了自證預言的作用機理：\n>>一家銀行本來運作得很正常，但不知什麼原因，出現了“這家銀行要倒閉”的流言。流言越傳越廣，導致越來越多的人信以為真，有人為防意外而跑到銀行把自己的存款提走。恐慌情緒蔓延，並且變得愈加真實，更多的人衝進銀行提走自己的存款……最終，擠兌發生了，銀行真的倒閉了。\n\n>一個原本並不存在的原因竟然“無中生有”變成了真正的原因。\n\n#### 心中恐惧失敗，才是失敗的原因。\n\n### <span id='c54'>逆命題</span> \n\n>**原命題為真，它的逆命題不一定為真。**\n>P 則 Q 等於 ~Q 則 ~P\n>但是不一定存在 Q 則 P 的關係\n\n>有70%以上的人分不清楚原命題和逆命題之間的區別。\n>\n>>參見《認知心理學》（Cognitive Psychology: A Student's Handbook，2000），邁克爾·艾森克（Michael W. Eysenck）、馬克·基恩（Mark T. Keane）合著。\n\n*✖ 心得: 人很好騙，至少70%很好騙。*\n\n\n### <span id='c55'>舉證責任</span> \n\n> \"舉證責任\"是不對等的\n> 爭論雙方的境況常常處於這種狀態：\n▷其中一方肩負沉重的舉證責任（burden of proof）\n▷另外一方則享有來自假設的恩惠（benefit of assumption）\n\n{% blockquote %}\n既然你無法證明我是錯的，那麼我就是對的。這是一種典型的邏輯錯誤\n{% endblockquote %}\n\n*✖ 套用一下邏輯學:*\n*我是對的 則 你無法証明我是錯的，恒為真。*\n*你無法証明我是錯的 則 我是錯的，恒為真。*\n*你無法證明我是錯的 則 我是對的，不恒為真*\n\n### <span id='c56'>案例局限</span> \n\n\n>最為常見的邏輯錯誤就是“以偏概全”——某種經驗在某個人身上應驗了，並不意味著該經驗在所有人身上都會起作用。\n\n*✖ 常見的推銷話術，我作得到，你也作得到。努力就會成功。*\n*這類的話術可怕的地方在於它不完全是錯的，但是你必需客觀衡量各種條件，而非局限單一案例。*\n\n### <span id='c57'>對立論證</span> \n\n{% blockquote %}\n>人們可能基於一模一樣的原因做出截然相反的決定。換句話說，用同樣的論據證明截然相反的論點。\n{% endblockquote %}\n\n{% blockquote %}\n>抱怨上司“愚蠢”的人和能夠發覺“上司的愚蠢可能有另外的解釋”的人，得到的結論和採取的行動往往截然相反。**因此，時間在他們接下來的經歷中所產生的伴隨作用也截然相反。這裡，時間再一次選擇與心智強大的人做朋友**\n{% endblockquote %}\n\n{% blockquote %}\n>一旦意識到對立論證的存在，應該**“哪一個更合理、更現實就接受哪一個”**，而非“哪一個更積極就接受哪一個”，因為後者只是自我欺騙而已。積極的並不總是好的，哪一個極端理想主義者（以及他們的想法、理念）不是積極的呢？\n{% endblockquote %}\n\n*✖ 職場上不論是留下繼續努力，或是掛冠求去都無對錯之分，而是何者更為合理。這個道理在人生的選擇上也是，需要注意對立論證的存在，堅持或放棄本無對錯，合理的判斷即可。*\n\n### <span id='c58'>張冠李戴</span>\n\n{% blockquote %}\n>論點和論據之間儘管全無邏輯聯繫，卻可以用一種“顯然合理”的姿態綁在一起。\n{% endblockquote %}\n\n舉例:\n\n>將字母A到Z分別編上1到26的分數（A=1,B=2,…,Z=26），然後比較不同單詞的分值：\n▷Knowledge（知識）得到96分\n（11+14+15+23+12+5+4+7+5=96）；\n▷Hardwork（努力）也只得到98分\n（8+1+18+4+23+15+18+11=98）；\n▷Attitude（態度）才能左右你生命的全部，\n因為它能得到100分\n（1+20+20+9+20+21+4+5=100）——滿分。\n得出結論：“態度改變一切”。\nBullshit（胡說八道）\n(2+21+12+12+19+8+9+20=103)\n\n\n### <span id='c59'>感悟與道理</span>\n\n{% blockquote %}\n“道理”應該是普適的，而“感悟”只來自個體經驗。\n{% endblockquote %}\n\n{% blockquote %}\n並非只有專家級別的新聞工作者才要分清“看法與事實之間的區別”，其實每個人都需要清楚地認識“道理”和“感悟”之間的巨大差異。\n{% endblockquote %}\n\n{% blockquote %}\n如果某個人把他們說的當作全部，把他們沒說的當作沒有，那麼這個人的智商就跟寓言中那個掩耳盜鈴的傢伙屬於同一個水平了。\n{% endblockquote %}\n\n{% blockquote %}\n人類普遍擁有的一個認知偏差就是：把成功攬到自己身上，把失敗歸咎於別人或者壞運氣。（這在心理學上有個術語，叫做“自利性偏差(Self-servingBias)”。）從這裡我們就可以知道，那些“成功者”這麼做的時候，往往並不是有意欺騙——他們甚至出於好意。\n{% endblockquote %}\n\n{% blockquote %}\n一個很實用的建議：與其關注成功者，不妨反其道而行之——努力從失敗者身上汲取經驗。\n{% endblockquote %}\n\n\n*✖ 困難的點在於，感悟難以作\"雙盲測試\"，也深受\"案例局限\"與\"安慰劑效應\"影響*\n\n### <span id='c510'>克服恐懼</span>\n\n{% blockquote %}\n“道理都明白，可就做不到”\n{% endblockquote %}\n\n### <span id='c511'>輔助工具</span>\n#### 語言\n\n{% blockquote %}\n以下一些句式最好經常使用，因為它們特別有助於獨立思考習慣的養成，並且也有刺激思考的作用：\n▷……是一回事，而……是另外一回事。\n▷……和……其實根本不是一回事。\n▷……不一定……\n▷……。可是，這並不意味著……\n▷……也許還有另外一種可能性（解釋）。\n▷……看起來像……，可是……\n▷……。而事實卻可能遠比看起來的更為複雜（簡單）。\n▷……。然而，（這個論斷）反過來（陳述）卻不一定成立……\n▷……其實很可能與……根本就沒有任何關係。\n▷……和……之間不一定是單純的因果關係，它們也可能互為因果。\n▷……和……之間的比較也許沒有任何意義。\n▷……其實不過是表面現象，其背後的本質是……\n▷……有一個通常被忽略的前提。\n▷……儘管聽起來很有道理，然而卻完全不現實。\n▷……也許有人會說……，但是這種質疑卻……\n{% endblockquote %}\n\n{% blockquote %}\n要刻意迴避的句子\n▷……難道就沒有一點可取之處嗎？\n▷……要是……就好了！\n{% endblockquote %}\n\n\n## 六、交流\n###  學會傾聽\n\n{% blockquote %}\n為了真正做到有效傾聽，最需要克制的就是“過早質疑”。\n{% endblockquote %}\n\n{% blockquote %}\n就算需要質疑，也一定要等到對方把話說完。\n{% endblockquote %}\n\n### 說與不說\n\n{% blockquote %}\n“知無不言，言無不盡”在大部分情況下是最浪費時間和精力的做法。\n{% endblockquote %}\n\n{% blockquote %}\n...在分辨談話對象之前很可能要先分辨自己，所以，\n“可與言而不與言，失人。不可與言而與之言，失言。”這是說要分辨談話的對象。\n{% endblockquote %}\n\n### 共生狀態\n\n>見瓦茨拉夫·哈維爾先生製定的《對話守則》：\n1.對話的目的是尋求真理，不是為了鬥爭。\n2.不做人身攻擊。\n3.保持主題。\n4.辯論時要用證據。\n5.不要堅持錯誤不改。\n6.要分清對話與只准自己講話的區別。\n7.對話要有記錄。\n8.盡量理解對方。\n\n{% blockquote %}\n雙方想要進行有意義的討論，最基本的要求就是雙方必須共同遵守“理性討論基本原則”。\n{% endblockquote %}\n\n{% blockquote %}\n跨越“自以為是”\n{% endblockquote %}\n\n*✖ 「緣督以為經；因其故然」--- 莊子。養生主 ; 學習應順其自然，不然會把自已累死。「知知為知知，不知為不知，是知也」---論語* \n\n{% blockquote %}\n第一個原則：有意義的討論是競合\n第二個原則：真理是獨立存在的\n第三個原則：真理不變\n{% endblockquote %}\n\n### 正確複述\n\n> 為了保證溝通順利，往往需要添加一個驗證機制，或者說反饋機制。\n\n### 勤於反思\n- 深刻了解經驗的局限\n- 時時刻刻保持警惕 \n\n> 手裡只有一把錘子，看什麼問題都像釘子\t\n\n- 用記錄，使自己能夠記住更多的經驗 \n- 通過觀察和閱讀汲取他人的經驗\n- 經常試用類比來跨越未知與已知的障礙 \n- 耐心等待以獲得不能跨越時間的經驗  \n\n\n\n## 七、應用\n### 興趣\n\n>說來說去，是順序出了問題：往往並不是有興趣才能做好，而是做好了才有興趣。人們總是搞錯順序，並對這樣的錯誤毫不知曉。雖然並非絕對，但完成大多數事情，確實都需要熟能生巧。做得多了，自然就能擅長；擅長了，自然就做得比別人好；做得比別人好了，興趣就濃起來了，而後就更喜歡做、更擅長……進入良性循環。可同樣的，做得多，就需要大量的時間投入，所謂“沒興趣”，往往不過是結果，如果將它當作“不去做好”的理由，最終的懲罰就是大量時間白白流逝。\n\n### 方法\n\n>所有學習上的成功，都只依靠兩件事——策略和堅持，而堅持本身就是最重要的策略。堅持，其實就是重複；而重複，說到底就是時間的投入，準確地說，是大量時間的投入。\n\n*✖ 你沒有實際作之前，不會知道效果如何，再在找更好的方法之前，最好的策略是堅持*\n\n### 痛苦 -比較 - 運氣\n\n### 人脈\n{% blockquote %}\n> 當我們把時間花到一個人身上的時候，相當於在他身上傾注了自己生命的一段。\n{% endblockquote %}\n\n{% blockquote %}\n> ▷專心做可以提升自己的事情，學習並擁有更多、更好的技能，成為一個值得他人交往的人。\n▷學會獨善其身，以不給他人製造麻煩為美德，用自己的獨立贏得尊重。\n{% endblockquote %}\n\n*✖ 人必自重而後人重之---你值得人家交往，人家就會來跟你交往。*\n\n### 自卑\n\n*✖  保持謙卑，認識真正的自已。*\n\n### 靈感\n\n*✖ 靈感來自於累積，筆記是一個好工具*\n\n### 鼓勵\n\n### 效率\n\n### 節奏\n\n### 物極必反\n\n>- 絕對不要盲目地試圖減少睡眠時間\n- 盡量不要減少與家庭成員交流的時間\n- 最好不要放棄你的社交時間\n\n### 自我證明\n\n\n## 參考\n\n- [電子書](http://zhibimo.com/read/xiaolai/ba-shi-jian-dang-zuo-peng-you/index.html)\n- [奇特的一生](http://www.books.com.tw/products/CN11349756)\n","slug":"be_friend_with_time","published":1,"updated":"2017-01-11T06:55:06.490Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3o85000nlgopd8c7r1ad","content":"<h2 id=\"零、困境\"><a href=\"#零、困境\" class=\"headerlink\" title=\"零、困境\"></a>零、困境</h2><p><em>✖ 時間無法管理 能管理的只有你自已。</em></p>\n<h2 id=\"一、醒悟\"><a href=\"#一、醒悟\" class=\"headerlink\" title=\"一、醒悟\"></a>一、醒悟</h2><ul>\n<li><em>✖ 用思考控制思考</em></li>\n<li><em>✖ 心智:就是心靈的智慧，用理性處理感性，控制情緒與慾望。</em></li>\n<li><em>✖ 人會在相同的情況下作出完全相反的結論</em></li>\n</ul>\n<blockquote>\n<p>…歷史上也常常出現這種情況——其實目的都是“為了人類更好的明天”，可偏偏出現了對立的兩派人，<br>他們為了原本一模一樣的理想爭執不休，甚至“拋頭顱”、“撒熱血”，犧牲幾代人的福祉。  </p>\n<blockquote>\n<p>比如，所謂“水火不相容”的“社會主義陣營”和“資本主義陣營”。</p>\n</blockquote>\n<p>看穿這一切，擺脫自己的局限，需要心智的力量。</p>\n</blockquote>\n<h2 id=\"二、現實\"><a href=\"#二、現實\" class=\"headerlink\" title=\"二、現實\"></a>二、現實</h2><ul>\n<li>速成絕無可能</li>\n<li>交換才是硬道理</li>\n<li>完美永不存在</li>\n<li>未知永遠存在<blockquote>\n<p>未知分為兩種：一種是永遠不能解決的，另一種是在可預見的未來也許能夠解決的。</p>\n</blockquote>\n</li>\n</ul>\n<p><em>✖ 吾生也有涯，而知也無涯。以有涯隨無涯，殆已！已而為知者，殆而已矣！…指窮於為薪，火傳也，不知其盡也。–莊子。養生主</em></p>\n<p><em>✖ 站在巨人的肩膀上</em></p>\n<ul>\n<li>現狀無法馬上擺脫</li>\n</ul>\n<blockquote><p>接受現狀才是最優策略——有什麼做什麼，有什麼用什麼；做什麼都做好，用什麼都用好。<br>不要常常覺得苦（這會讓人忍不住顧影自憐，浪費精力與時間），而要想辦法在任何情況下找到情趣——<br>——<strong>快樂是一種本事</strong>。</p>\n</blockquote> \n<blockquote><p>心懷“夢想”的時間越長，它的沉沒成本就越高。</p>\n</blockquote> \n<p><em>✖ 積沙成塔，滴水穿石，時間可以累積，也可以消耗。</em></p>\n<ul>\n<li>與時間做朋友</li>\n</ul>\n<blockquote><p>與時間做朋友的方法很簡單：用正確的方法做正確的事情。</p>\n</blockquote>\n<blockquote><p>儘管現實總是如此難於接受，堅強的你卻應該坦然。以上提到的種種現實，包括“速成絕無可能”、“只有付出才有收穫”、“完美永不存在”、“未知永遠存在”、“現狀無法馬上擺脫”，都既清楚又簡單，你必須要接受——不僅要接受，還要牢記；不僅要牢記，還要堅信，不容半點動搖。最好時常把自己的一些念頭記下來，然後與這幾條現實對照，看看它們是否與這些現實相符。</p>\n</blockquote> \n<blockquote><p>時間是現實的人的朋友，是不現實的人的敵人。時間不是故意要這樣做，只不過事實如此。</p>\n</blockquote> \n<p><em>✖ 正確的事，正確的做 ; 首先要學會判斷什麼是正確的事。</em></p>\n<h2 id=\"三、管理\"><a href=\"#三、管理\" class=\"headerlink\" title=\"三、管理\"></a>三、管理</h2><ul>\n<li>估算時間</li>\n</ul>\n<blockquote><p>分辨任務的屬性——它是熟悉的還是陌生的呢?</p>\n</blockquote>\n<blockquote><p>對學習來說，任務“陌生”的可能性更大，因為學習本身是一個探索未知的過程。完成學習任務常常需要花費比我們想像中多得多的時間。對工作來說，任務“熟悉”的可能性更大。因為工作本身是一個應用已知的過程。</p>\n</blockquote>\n<p><em>✖ 軟體工作的這個行業，很有可能是大多數是未知的情況。</em></p>\n<ul>\n<li>及時行動</li>\n</ul>\n<blockquote><p>接受任務之後，什麼時候開始執行才好呢？比“越早開始越好”更切實的答案是“現在就開始”。</p>\n</blockquote>\n<p><em>✖ ASAP 不是一個好答案 NOW 才是。</em></p>\n<p><em>✖ 不求有功，但求無過是種慢性自殺，滴水穿石—會消磨掉你的累積。</em></p>\n<ul>\n<li>直面困難</li>\n</ul>\n<blockquote>\n<p>效率低下的根本原因是什麼？答案是：迴避困難。<br>……<br>……這些問題都源自同一個習慣：專做簡單的，迴避困難的。</p>\n</blockquote>\n<ul>\n<li>關注步驟</li>\n</ul>\n<blockquote><p>所謂“三思而行”在我看來就是指做任何事情之前都要考慮相關的3個方面：內容（What）、原因（Why）、方法（How）。任何任務都起碼具備3個屬性：何事（What）、何因（Why）、何法（How）。</p>\n</blockquote>\n<blockquote><p>不停地細分、拆解任務，而且越具體越好，直至每個小任務都可以由一個人獨立完成。</p>\n</blockquote>\n<p>例子</p>\n<blockquote>\n<p>擴充詞彙量→托福詞彙→托福核心詞彙→21個單元→每個單元大約100 個單詞→一個單元分2次完成……<br>▷ 先嘗試做一兩個階段，測量一下完成一個階段需要多長時間。<br>▷ 按照測量的結果製作一個時間表，把其餘若干個階段所需要的時間填寫完整（最終總是需要做一些調整的）。<br>▷ 背單詞需要重複，所以，每3個階段過後要留出與完成1個階段相等的時間去複習。這就意味著一共需要花費完成56（42+14）個階段的時間。<br>▷ 每完成總任務的1/3，就增加與完成1個階段相等的再复習時間。這就意味著一共需要花費完成59（56+3）個階段的時間。<br>▷ 學習過程中可能需要多次快速重複記憶，每次可能相當於完成3～5個階段所需要的時間。由於熟悉程度的不斷增加，每次重複記憶所需要的時間會越來越短，所以，預計進行3次重複記憶需要相當於10個階段的時間。這就意味著一共需要花費完成69（59+10）個階段的時間。</p>\n<p>完成每個階段的具體步驟。</p>\n<p>▷ 每天早晨騰出一點時間。<br>▷ 把前一天背過的單詞朗讀至少2 遍。<br>▷ 聽錄音，跟讀當天要背的單詞3～5遍，主要關注發音、拼寫，順帶看看詞義，能記多少就記多少，不求速成。<br>▷ 上午利用閒暇時間通讀詞彙列表，並反复閱讀例句。<br>▷ 下午用專門的時間把當天要背的單詞集中背2～3遍。可以一邊讀，一邊抄，一邊背，不要只是坐在那里呆呆地盯著詞彙看。<br>▷ 空閒的時候反复聽當天要背的單詞，重複次數越多越好。<br>▷ 晚上睡覺前複習當天背的單詞。</p>\n</blockquote>\n<ul>\n<li>並行串行</li>\n</ul>\n<p><em>✖ 拆分細項，尋找並行的可能。</em></p>\n<blockquote>\n<p>華羅庚先生曾經用燒水泡茶為例說明過這個問題。</p>\n<blockquote>\n<p>燒水泡茶：參見《統籌方法平話及補充》，華羅庚著，中國工業出版社，1966。<br>▷ 辦法甲：洗好水壺，灌上涼水，放在火上。在等待水開的時候洗茶壺、洗茶杯、拿茶葉。等到水開，泡茶喝。<br>▷ 辦法乙：先做好一些準備工作，包括洗水壺、洗壺杯、拿茶葉。一切就緒，灌水、燒水，坐待水開了泡茶喝。<br>▷ 辦法丙：洗淨開壺，灌上涼水，放在火上，坐待水開。水開了之後急急忙忙找茶葉、洗茶壺、茶杯，泡茶喝。</p>\n</blockquote>\n</blockquote>\n<p><em>✖ 分別為聖的<strong>時間片</strong></em></p>\n<blockquote>\n<p>一個處理器在一個時間段內其實只能做一件事，因為它只有一個個體、一個時空。而多任務操作系統把一個長時間段劃分成很多短小的時間片，每個時間片只讓處理器執行一個進程（Process）——儘管同時可能有多個進程需要處理。在第一個時間片裡，操作系統讓處理器處理A進程；時間片的時間用完之後，無論A進程處理到什麼程度，都要被“掛起”（即，A進程這時不能再佔用處理器資源——儘管它還是被允許使用計算機的其他資源，如內存、磁盤、屏幕輸出等）；在第二個時間片裡，處理器處理的是B進程，時間用完之後，B進程將與A進程一樣被中途“掛起”；</p>\n</blockquote>\n<ul>\n<li>感知時間</li>\n</ul>\n<blockquote>\n<p>逃避責任就會帶來輕鬆，可那恰恰就是“生命中不能承受之輕”啊！</p>\n</blockquote>\n<p><em>有的時候「逃避雖可恥但有用」，學會判斷什麼是可以逃避的事，什麼是不可逃避的事。</em></p>\n<blockquote>\n<p>學著做每天的“事件日誌”（Event Log）。除了自己經歷的事件之外，<br>一概不記，而且盡量不記感想，不記感受，只記錄事件本身。<br>…<br>…記錄過程要比基於結果的記錄更為詳盡</p>\n</blockquote>\n<p>例子</p>\n<blockquote>\n<blockquote>\n<p>烏里揚諾夫斯克。一九六四年四月七日。分類昆蟲學（畫兩張無名袋蛾的圖）——三小時十五分。鑑定袋蛾——二十分（1.0）。</p>\n<p>附加工作：給斯拉瓦寫信——二小時四十五分（0.5）。</p>\n<p>社會工作：植物保護小組開會——二小時二十五分。休息：給伊戈爾寫信——十分；<br>《烏里揚諾夫斯克真理報》——十分；列夫·托爾斯泰的《塞瓦斯托波爾紀事》——一小時二十五分。</p>\n<p>基本工作合計——六小時二十分。</p>\n</blockquote>\n</blockquote>\n<p><em>✖ 簡單的分類 + 事件 + 費時，最後再合計起來。</em><br><em>(其於事實)條列式的記錄法，與時間調色盤(預定)的方法不太一樣。</em><br><em>你可以預定你要作的事，可是你無法正確的估時 ; 這是事實，請面對這個事實。</em><br><em>輔助上分別為聖的時間切片或許可以有所幫助</em></p>\n<ul>\n<li>記錄開銷 </li>\n</ul>\n<p><em>練習中</em></p>\n<ul>\n<li>制訂預算</li>\n</ul>\n<p><em>✖ 先養成記錄的習慣，再養成制定預算的習慣</em><br><em>✖ 只列事情，重要/不重要</em></p>\n<blockquote><p>每個人都喜歡做有趣的事情，做的時候往往並不關心這件事到底有沒有用。可是，有趣的事不見得有用啊！</p>\n</blockquote>\n<blockquote><p>養成任何一個哪怕很小的習慣都需要掙扎。然而，貌似痛苦的掙扎過程，在將來的某個時刻終將變得其樂無窮。</p>\n</blockquote>\n<ul>\n<li>計劃</li>\n</ul>\n<blockquote><p>計劃成功的前提：目標現實可行</p>\n</blockquote>\n<blockquote><p>我們不是計劃著失敗，而是失敗地計劃(People don’t plan to fail, they fail to plan)。</p>\n</blockquote>\n<p><em>✖ 簡單的判斷目標是不是現實可行</em></p>\n<blockquote><blockquote>\n<p>證明我的目標現實可行的方法比較簡單：</p>\n<ol>\n<li>已經有人做到了。</li>\n<li>我與那個人沒有太大的差距。</li>\n</ol>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>長期計劃是需要通過實踐才能習得的能力</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>沒有人能給我做職業規劃。…生活本身充滿了意外，並且，總是意外到無以復加的地步。</p>\n</blockquote>\n</blockquote>\n<p><em>✖ 先從記錄開始，持續一周，繼續保持記錄下試著開始分配時間。</em><br><em>✖ 再試著從周計劃開始作規劃，練習並且保持。</em></p>\n<blockquote><blockquote>\n<p>計劃固然重要，行動更為重要。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>任何事情，都可能經歷相同的過程：逐步熟悉，小心摸索，失敗、失敗、再失敗，<br>認真反思，捲土重來，直至成功。而最初，在我們對任務連基本的認知都沒有的時候，<br>制定出來的計劃十有八九隻不過是空談。</p>\n</blockquote>\n</blockquote>\n<ul>\n<li><p>列表</p>\n</li>\n<li><p>流程</p>\n</li>\n</ul>\n<p><em>✖ 預想各種可能的情境，不用一次到位，持續整合的重點在持續。</em></p>\n<p>範例:</p>\n<blockquote>\n<p>▷ 確定對方最可能方便接電話的時間（難以確定的時候先發短信詢問）。<br>▷ 在撥打電話甚至發短信詢問對方是否方便之前準備好一切計劃溝通的內容，作好檢查列表放在手邊，確保溝通過程中不會遺漏要點。<br>▷ 通話前把重要信息整理成電子文本，在通話中做必要的更新，通話結束後，馬上通過電子郵件將備忘發送給對方。<br>▷ 若對方沒有接電話，則給對方發署名短信告知詳細事由， 並做好記錄，防止自己遺忘此次溝通任務。<br>▷ ……</p>\n</blockquote>\n<ul>\n<li>預演</li>\n</ul>\n<blockquote>\n<p>準備不足，所以害怕。</p>\n</blockquote>\n<p><em>✖ 類似一種沙箱測試，讓錯誤發生在測試階段。</em></p>\n<ul>\n<li>驗收</li>\n</ul>\n<blockquote>\n<p>向自己提出一個問題並要想辦法回答清楚：“怎樣才算’做好’？</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">本篇心得: 這是需要實際操作的一篇，仍在實踐中。</div><div class=\"line\">首先是記錄自已的時間花在哪裡？</div><div class=\"line\">再來是制定時間的預算，分別出神聖的時間去累積一些東西(ex:學習英文、跑步); </div><div class=\"line\">當習慣養成，就不再困難了，而是生活的一部份。</div><div class=\"line\">同時注意工作的流程，</div><div class=\"line\">1. 問自已What Why How ?</div><div class=\"line\">2. 儘可能拆解工作流程的步驟到最小化，建立列表。</div><div class=\"line\">3. 常常發生的工作要設想各種情境,建立SOP,以縮短時間。</div><div class=\"line\">4. 陌生的工作可以透過預演來試錯。</div><div class=\"line\">5. 一定要驗收。</div><div class=\"line\">6. 面對困難與失敗。</div><div class=\"line\">7. 及時行動!</div><div class=\"line\">8. 及時行動!!</div><div class=\"line\">9. 及時行動!!!</div></pre></td></tr></table></figure>\n<h2 id=\"四、學習\"><a href=\"#四、學習\" class=\"headerlink\" title=\"四、學習\"></a>四、學習</h2><h3 id=\"基本途徑\"><a href=\"#基本途徑\" class=\"headerlink\" title=\"基本途徑\"></a>基本途徑</h3><ul>\n<li>體驗</li>\n<li>觀察</li>\n<li>學習</li>\n</ul>\n<p><em>✖ 自由是可以被剝奪的。</em></p>\n<h3 id=\"經驗局限\"><a href=\"#經驗局限\" class=\"headerlink\" title=\"經驗局限\"></a>經驗局限</h3><blockquote><blockquote>\n<p>日常生活中主要的“溝通障礙”本質上幾乎都是由於溝通雙方無法讓對方理解與他們的經驗相悖的知識或信息造成的。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>長期的進化使人類到達了今天這個高度，但是每個人在出生的那一剎那，居然與其他動物站在幾乎同樣的起點上，心智要從零開始進化。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<blockquote>\n<p>優秀的領導，能夠把人們帶到他們想去的地方；而卓越的領導，能夠把人們帶到他們應該去但是沒想過要去的地方<br>A leader takes people where they want to go. A great leader takes people where they don’t necessarily want to go, but ought to be.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>牢記在這世界上確實存在“與現有經驗相悖的知識”，再把這句話變成經驗，用它去類比未知，而後投入大量的時間和精力去學習和掌握“科學方法論”，掙扎著進化成為真正意義上的“人”。</p>\n</blockquote>\n</blockquote>\n<h3 id=\"自學能力\"><a href=\"#自學能力\" class=\"headerlink\" title=\"自學能力\"></a>自學能力</h3><ul>\n<li>閱讀理解能力 -&gt;檢索能力 -&gt; 寫作能力 -&gt; 實踐能力</li>\n<li>永遠保持開放的心態</li>\n</ul>\n<blockquote>\n<p>最好固定一段時間來把那些目前暫時無法理解的、支持的、反對的、無所謂的論點和觀點記錄下來。對無法理解的，寫下自己當時的疑惑何在；對支持的，記錄幾個理由或者實例；對反對的，同樣記錄幾個理由或者實例；甚至對那些無所謂的，也記錄其原因。一個有著這樣良好記錄習慣的人會獲得他人無法擁有的處理信息和知識的能力——“反芻”。這種“反芻”能力是我們避免成為“選擇性輸入”受害者的重要保障。</p>\n<p>在學習的時候，進展和時間的關係肯定不是線性的：所謂“一分耕耘，一分收穫”。這個關係曲線更可能是階梯狀的：學習過程中有很長時間一點進展都沒有，但從某一刻開始突飛猛進，而後又是長長的一段所謂的“平台期”。…只有經歷積累的過程，“量變到質變”的效果才會出現，才有可能突飛猛進。</p>\n</blockquote>\n<h2 id=\"五、思考\"><a href=\"#五、思考\" class=\"headerlink\" title=\"五、思考\"></a>五、思考</h2><ul>\n<li><a href=\"#c51\">勤於思考</a></li>\n<li><a href=\"#c52\">思維陷阱</a></li>\n<li><a href=\"#c53\">因果關係</a></li>\n<li><a href=\"#c54\">逆命題</a></li>\n<li><a href=\"#c55\">舉證責任</a></li>\n<li><a href=\"#c56\">案例局限</a></li>\n<li><a href=\"#c57\">對立論證</a></li>\n<li><a href=\"#c58\">張冠李戴</a></li>\n<li><a href=\"#c59\">感悟與道理</a></li>\n<li><a href=\"#c510\">克服恐懼</a></li>\n<li><a href=\"#c511\">輔助工具</a><h3 id=\"勤於思考\"><a href=\"#勤於思考\" class=\"headerlink\" title=\"勤於思考\"></a><span id=\"c51\">勤於思考</span></h3></li>\n</ul>\n<blockquote>\n<p>人都有大腦，閒置還是使用，是個問題。</p>\n</blockquote>\n<ol>\n<li>獨立思考</li>\n<li>思考任務的目標、實質、意義</li>\n</ol>\n<blockquote>\n<p>很多人就是這樣，堅持拒絕思考，然後用天下最累的方式生活而不自知。大哲學家羅素曾觀察到這個現象，他為之奇怪並慨嘆，“ 很多人寧願死也不願思考 ”，然後戲謔道，“ 實際上，他們確實死得很快。”</p>\n<blockquote>\n<p>Most people would die sooner than think — in fact they do so.<br>— Bertrand Russell，In The ABC of Relativity，1925，P.166</p>\n</blockquote>\n</blockquote>\n<h3 id=\"思維陷阱\"><a href=\"#思維陷阱\" class=\"headerlink\" title=\"思維陷阱\"></a><span id=\"c52\">思維陷阱</span></h3><h4 id=\"概念不清和拒絕接受不確定性\"><a href=\"#概念不清和拒絕接受不確定性\" class=\"headerlink\" title=\"概念不清和拒絕接受不確定性\"></a>概念不清和拒絕接受不確定性</h4><ol>\n<li>概念不清</li>\n</ol>\n<blockquote><blockquote>\n<p>學習任何知識最重要的一點，就是搞清楚它所有的基礎概念。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>讀教科書，要先把所有概念都記下來，暫時不懂的就死記硬背。把概念牢記於心，就可以通過以後的學習和實踐反複審視它，並形成透徹理解。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>本書強調“時間不可管理”、“我們只能管理自己”，並非咬文嚼字。“時間管理”和“自我管理”是完全不同的概念——焦點不同，方法不同，效果不同</p>\n</blockquote>\n</blockquote>\n<ol>\n<li>拒絕接受不確定性</li>\n</ol>\n<blockquote>\n<p>未知永遠存在。從本質上來看，不確定性和未知是一回事。</p>\n</blockquote>\n<h3 id=\"因果關係\"><a href=\"#因果關係\" class=\"headerlink\" title=\"因果關係\"></a><span id=\"c53\">因果關係</span></h3><h4 id=\"基礎\"><a href=\"#基礎\" class=\"headerlink\" title=\"基礎\"></a>基礎</h4><blockquote>\n<p>外因會影響內因，內因同樣會影響外因。它們相互影響，互為因果。</p>\n<p>舉一個特別好玩的現象為例：在某種意義上，學生的水平決定教師的水平。</p>\n<p>這話並沒有說反。師生之間的有效溝通，肯定不僅是教師單方面的灌輸。越是用心的教師，越關注學生的反饋；越是用心的學生，越關注教師對他的反饋的反饋。顯然，這種溝通不僅是雙向的，還隨著雙方的用心程度而不斷增強。</p>\n<p>這和下棋是一樣的道理。據說，棋藝到了一定程度，棋手就會不由自主地挑選對手，因為跟高手下棋就會進步，但反過來，與“臭手”交手多了，自己的手也會變“臭”……優質的學生，對他們的教師來說，不僅是令人愉悅的教學對象（學生一點就透，老師沒有不開心的），更重要的，他們還是對教師的挑戰——這些學生有著長期而且優秀的學習經驗，也因此擁有相對良好的判斷能力，隨時可能提出一般教師無法回答的問題。經過一段時間的積累，雙方都會因為教學和溝通發生巨大的進步——只要雙方都足夠優秀，足夠用心。</p>\n</blockquote>\n<blockquote><p>正在塑造我們的這個環境，也是我們自己（參與）塑造的</p>\n</blockquote>\n<blockquote>\n<h4 id=\"要做一個用心的人，要用心做事，因為這世界其實也是有“心”的。\"><a href=\"#要做一個用心的人，要用心做事，因為這世界其實也是有“心”的。\" class=\"headerlink\" title=\"要做一個用心的人，要用心做事，因為這世界其實也是有“心”的。\"></a>要做一個用心的人，要用心做事，因為這世界其實也是有“心”的。</h4></blockquote>\n<h4 id=\"雙盲測試\"><a href=\"#雙盲測試\" class=\"headerlink\" title=\"雙盲測試\"></a>雙盲測試</h4><p><em>註: 受測者不知道安慰劑的存在，測試者則不知道誰服用了安慰劑，單純以局外人的角度觀測記錄。</em></p>\n<blockquote>\n<p>人群中也有差不多⅓的人更易受到（來自他人或來自自身的）心理暗示的影響。也就是說，他們更可能在服用安慰劑後病情真正好轉。</p>\n</blockquote>\n<h4 id=\"自證預言\"><a href=\"#自證預言\" class=\"headerlink\" title=\"自證預言\"></a>自證預言</h4><blockquote>\n<p>莫頓教授用銀行擠兌的例子說明了自證預言的作用機理：</p>\n<blockquote>\n<p>一家銀行本來運作得很正常，但不知什麼原因，出現了“這家銀行要倒閉”的流言。流言越傳越廣，導致越來越多的人信以為真，有人為防意外而跑到銀行把自己的存款提走。恐慌情緒蔓延，並且變得愈加真實，更多的人衝進銀行提走自己的存款……最終，擠兌發生了，銀行真的倒閉了。</p>\n</blockquote>\n<p>一個原本並不存在的原因竟然“無中生有”變成了真正的原因。</p>\n</blockquote>\n<h4 id=\"心中恐惧失敗，才是失敗的原因。\"><a href=\"#心中恐惧失敗，才是失敗的原因。\" class=\"headerlink\" title=\"心中恐惧失敗，才是失敗的原因。\"></a>心中恐惧失敗，才是失敗的原因。</h4><h3 id=\"逆命題\"><a href=\"#逆命題\" class=\"headerlink\" title=\"逆命題\"></a><span id=\"c54\">逆命題</span></h3><blockquote>\n<p><strong>原命題為真，它的逆命題不一定為真。</strong><br>P 則 Q 等於 ~Q 則 ~P<br>但是不一定存在 Q 則 P 的關係</p>\n<p>有70%以上的人分不清楚原命題和逆命題之間的區別。</p>\n<blockquote>\n<p>參見《認知心理學》（Cognitive Psychology: A Student’s Handbook，2000），邁克爾·艾森克（Michael W. Eysenck）、馬克·基恩（Mark T. Keane）合著。</p>\n</blockquote>\n</blockquote>\n<p><em>✖ 心得: 人很好騙，至少70%很好騙。</em></p>\n<h3 id=\"舉證責任\"><a href=\"#舉證責任\" class=\"headerlink\" title=\"舉證責任\"></a><span id=\"c55\">舉證責任</span></h3><blockquote>\n<p>“舉證責任”是不對等的<br>爭論雙方的境況常常處於這種狀態：<br>▷其中一方肩負沉重的舉證責任（burden of proof）<br>▷另外一方則享有來自假設的恩惠（benefit of assumption）</p>\n</blockquote>\n<blockquote><p>既然你無法證明我是錯的，那麼我就是對的。這是一種典型的邏輯錯誤</p>\n</blockquote>\n<p><em>✖ 套用一下邏輯學:</em><br><em>我是對的 則 你無法証明我是錯的，恒為真。</em><br><em>你無法証明我是錯的 則 我是錯的，恒為真。</em><br><em>你無法證明我是錯的 則 我是對的，不恒為真</em></p>\n<h3 id=\"案例局限\"><a href=\"#案例局限\" class=\"headerlink\" title=\"案例局限\"></a><span id=\"c56\">案例局限</span></h3><blockquote>\n<p>最為常見的邏輯錯誤就是“以偏概全”——某種經驗在某個人身上應驗了，並不意味著該經驗在所有人身上都會起作用。</p>\n</blockquote>\n<p><em>✖ 常見的推銷話術，我作得到，你也作得到。努力就會成功。</em><br><em>這類的話術可怕的地方在於它不完全是錯的，但是你必需客觀衡量各種條件，而非局限單一案例。</em></p>\n<h3 id=\"對立論證\"><a href=\"#對立論證\" class=\"headerlink\" title=\"對立論證\"></a><span id=\"c57\">對立論證</span></h3><blockquote><blockquote>\n<p>人們可能基於一模一樣的原因做出截然相反的決定。換句話說，用同樣的論據證明截然相反的論點。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>抱怨上司“愚蠢”的人和能夠發覺“上司的愚蠢可能有另外的解釋”的人，得到的結論和採取的行動往往截然相反。<strong>因此，時間在他們接下來的經歷中所產生的伴隨作用也截然相反。這裡，時間再一次選擇與心智強大的人做朋友</strong></p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>一旦意識到對立論證的存在，應該<strong>“哪一個更合理、更現實就接受哪一個”</strong>，而非“哪一個更積極就接受哪一個”，因為後者只是自我欺騙而已。積極的並不總是好的，哪一個極端理想主義者（以及他們的想法、理念）不是積極的呢？</p>\n</blockquote>\n</blockquote>\n<p><em>✖ 職場上不論是留下繼續努力，或是掛冠求去都無對錯之分，而是何者更為合理。這個道理在人生的選擇上也是，需要注意對立論證的存在，堅持或放棄本無對錯，合理的判斷即可。</em></p>\n<h3 id=\"張冠李戴\"><a href=\"#張冠李戴\" class=\"headerlink\" title=\"張冠李戴\"></a><span id=\"c58\">張冠李戴</span></h3><blockquote><blockquote>\n<p>論點和論據之間儘管全無邏輯聯繫，卻可以用一種“顯然合理”的姿態綁在一起。</p>\n</blockquote>\n</blockquote>\n<p>舉例:</p>\n<blockquote>\n<p>將字母A到Z分別編上1到26的分數（A=1,B=2,…,Z=26），然後比較不同單詞的分值：<br>▷Knowledge（知識）得到96分<br>（11+14+15+23+12+5+4+7+5=96）；<br>▷Hardwork（努力）也只得到98分<br>（8+1+18+4+23+15+18+11=98）；<br>▷Attitude（態度）才能左右你生命的全部，<br>因為它能得到100分<br>（1+20+20+9+20+21+4+5=100）——滿分。<br>得出結論：“態度改變一切”。<br>Bullshit（胡說八道）<br>(2+21+12+12+19+8+9+20=103)</p>\n</blockquote>\n<h3 id=\"感悟與道理\"><a href=\"#感悟與道理\" class=\"headerlink\" title=\"感悟與道理\"></a><span id=\"c59\">感悟與道理</span></h3><blockquote><p>“道理”應該是普適的，而“感悟”只來自個體經驗。</p>\n</blockquote>\n<blockquote><p>並非只有專家級別的新聞工作者才要分清“看法與事實之間的區別”，其實每個人都需要清楚地認識“道理”和“感悟”之間的巨大差異。</p>\n</blockquote>\n<blockquote><p>如果某個人把他們說的當作全部，把他們沒說的當作沒有，那麼這個人的智商就跟寓言中那個掩耳盜鈴的傢伙屬於同一個水平了。</p>\n</blockquote>\n<blockquote><p>人類普遍擁有的一個認知偏差就是：把成功攬到自己身上，把失敗歸咎於別人或者壞運氣。（這在心理學上有個術語，叫做“自利性偏差(Self-servingBias)”。）從這裡我們就可以知道，那些“成功者”這麼做的時候，往往並不是有意欺騙——他們甚至出於好意。</p>\n</blockquote>\n<blockquote><p>一個很實用的建議：與其關注成功者，不妨反其道而行之——努力從失敗者身上汲取經驗。</p>\n</blockquote>\n<p><em>✖ 困難的點在於，感悟難以作”雙盲測試”，也深受”案例局限”與”安慰劑效應”影響</em></p>\n<h3 id=\"克服恐懼\"><a href=\"#克服恐懼\" class=\"headerlink\" title=\"克服恐懼\"></a><span id=\"c510\">克服恐懼</span></h3><blockquote><p>“道理都明白，可就做不到”</p>\n</blockquote>\n<h3 id=\"輔助工具\"><a href=\"#輔助工具\" class=\"headerlink\" title=\"輔助工具\"></a><span id=\"c511\">輔助工具</span></h3><h4 id=\"語言\"><a href=\"#語言\" class=\"headerlink\" title=\"語言\"></a>語言</h4><blockquote><p>以下一些句式最好經常使用，因為它們特別有助於獨立思考習慣的養成，並且也有刺激思考的作用：<br>▷……是一回事，而……是另外一回事。<br>▷……和……其實根本不是一回事。<br>▷……不一定……<br>▷……。可是，這並不意味著……<br>▷……也許還有另外一種可能性（解釋）。<br>▷……看起來像……，可是……<br>▷……。而事實卻可能遠比看起來的更為複雜（簡單）。<br>▷……。然而，（這個論斷）反過來（陳述）卻不一定成立……<br>▷……其實很可能與……根本就沒有任何關係。<br>▷……和……之間不一定是單純的因果關係，它們也可能互為因果。<br>▷……和……之間的比較也許沒有任何意義。<br>▷……其實不過是表面現象，其背後的本質是……<br>▷……有一個通常被忽略的前提。<br>▷……儘管聽起來很有道理，然而卻完全不現實。<br>▷……也許有人會說……，但是這種質疑卻……</p>\n</blockquote>\n<blockquote><p>要刻意迴避的句子<br>▷……難道就沒有一點可取之處嗎？<br>▷……要是……就好了！</p>\n</blockquote>\n<h2 id=\"六、交流\"><a href=\"#六、交流\" class=\"headerlink\" title=\"六、交流\"></a>六、交流</h2><h3 id=\"學會傾聽\"><a href=\"#學會傾聽\" class=\"headerlink\" title=\"學會傾聽\"></a>學會傾聽</h3><blockquote><p>為了真正做到有效傾聽，最需要克制的就是“過早質疑”。</p>\n</blockquote>\n<blockquote><p>就算需要質疑，也一定要等到對方把話說完。</p>\n</blockquote>\n<h3 id=\"說與不說\"><a href=\"#說與不說\" class=\"headerlink\" title=\"說與不說\"></a>說與不說</h3><blockquote><p>“知無不言，言無不盡”在大部分情況下是最浪費時間和精力的做法。</p>\n</blockquote>\n<blockquote><p>…在分辨談話對象之前很可能要先分辨自己，所以，<br>“可與言而不與言，失人。不可與言而與之言，失言。”這是說要分辨談話的對象。</p>\n</blockquote>\n<h3 id=\"共生狀態\"><a href=\"#共生狀態\" class=\"headerlink\" title=\"共生狀態\"></a>共生狀態</h3><blockquote>\n<p>見瓦茨拉夫·哈維爾先生製定的《對話守則》：<br>1.對話的目的是尋求真理，不是為了鬥爭。<br>2.不做人身攻擊。<br>3.保持主題。<br>4.辯論時要用證據。<br>5.不要堅持錯誤不改。<br>6.要分清對話與只准自己講話的區別。<br>7.對話要有記錄。<br>8.盡量理解對方。</p>\n</blockquote>\n<blockquote><p>雙方想要進行有意義的討論，最基本的要求就是雙方必須共同遵守“理性討論基本原則”。</p>\n</blockquote>\n<blockquote><p>跨越“自以為是”</p>\n</blockquote>\n<p><em>✖ 「緣督以為經；因其故然」— 莊子。養生主 ; 學習應順其自然，不然會把自已累死。「知知為知知，不知為不知，是知也」—論語</em> </p>\n<blockquote><p>第一個原則：有意義的討論是競合<br>第二個原則：真理是獨立存在的<br>第三個原則：真理不變</p>\n</blockquote>\n<h3 id=\"正確複述\"><a href=\"#正確複述\" class=\"headerlink\" title=\"正確複述\"></a>正確複述</h3><blockquote>\n<p>為了保證溝通順利，往往需要添加一個驗證機制，或者說反饋機制。</p>\n</blockquote>\n<h3 id=\"勤於反思\"><a href=\"#勤於反思\" class=\"headerlink\" title=\"勤於反思\"></a>勤於反思</h3><ul>\n<li>深刻了解經驗的局限</li>\n<li>時時刻刻保持警惕 </li>\n</ul>\n<blockquote>\n<p>手裡只有一把錘子，看什麼問題都像釘子    </p>\n</blockquote>\n<ul>\n<li>用記錄，使自己能夠記住更多的經驗 </li>\n<li>通過觀察和閱讀汲取他人的經驗</li>\n<li>經常試用類比來跨越未知與已知的障礙 </li>\n<li>耐心等待以獲得不能跨越時間的經驗  </li>\n</ul>\n<h2 id=\"七、應用\"><a href=\"#七、應用\" class=\"headerlink\" title=\"七、應用\"></a>七、應用</h2><h3 id=\"興趣\"><a href=\"#興趣\" class=\"headerlink\" title=\"興趣\"></a>興趣</h3><blockquote>\n<p>說來說去，是順序出了問題：往往並不是有興趣才能做好，而是做好了才有興趣。人們總是搞錯順序，並對這樣的錯誤毫不知曉。雖然並非絕對，但完成大多數事情，確實都需要熟能生巧。做得多了，自然就能擅長；擅長了，自然就做得比別人好；做得比別人好了，興趣就濃起來了，而後就更喜歡做、更擅長……進入良性循環。可同樣的，做得多，就需要大量的時間投入，所謂“沒興趣”，往往不過是結果，如果將它當作“不去做好”的理由，最終的懲罰就是大量時間白白流逝。</p>\n</blockquote>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><blockquote>\n<p>所有學習上的成功，都只依靠兩件事——策略和堅持，而堅持本身就是最重要的策略。堅持，其實就是重複；而重複，說到底就是時間的投入，準確地說，是大量時間的投入。</p>\n</blockquote>\n<p><em>✖ 你沒有實際作之前，不會知道效果如何，再在找更好的方法之前，最好的策略是堅持</em></p>\n<h3 id=\"痛苦-比較-運氣\"><a href=\"#痛苦-比較-運氣\" class=\"headerlink\" title=\"痛苦 -比較 - 運氣\"></a>痛苦 -比較 - 運氣</h3><h3 id=\"人脈\"><a href=\"#人脈\" class=\"headerlink\" title=\"人脈\"></a>人脈</h3><blockquote><blockquote>\n<p>當我們把時間花到一個人身上的時候，相當於在他身上傾注了自己生命的一段。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>▷專心做可以提升自己的事情，學習並擁有更多、更好的技能，成為一個值得他人交往的人。<br>▷學會獨善其身，以不給他人製造麻煩為美德，用自己的獨立贏得尊重。</p>\n</blockquote>\n</blockquote>\n<p><em>✖ 人必自重而後人重之—你值得人家交往，人家就會來跟你交往。</em></p>\n<h3 id=\"自卑\"><a href=\"#自卑\" class=\"headerlink\" title=\"自卑\"></a>自卑</h3><p><em>✖  保持謙卑，認識真正的自已。</em></p>\n<h3 id=\"靈感\"><a href=\"#靈感\" class=\"headerlink\" title=\"靈感\"></a>靈感</h3><p><em>✖ 靈感來自於累積，筆記是一個好工具</em></p>\n<h3 id=\"鼓勵\"><a href=\"#鼓勵\" class=\"headerlink\" title=\"鼓勵\"></a>鼓勵</h3><h3 id=\"效率\"><a href=\"#效率\" class=\"headerlink\" title=\"效率\"></a>效率</h3><h3 id=\"節奏\"><a href=\"#節奏\" class=\"headerlink\" title=\"節奏\"></a>節奏</h3><h3 id=\"物極必反\"><a href=\"#物極必反\" class=\"headerlink\" title=\"物極必反\"></a>物極必反</h3><blockquote>\n<ul>\n<li>絕對不要盲目地試圖減少睡眠時間</li>\n<li>盡量不要減少與家庭成員交流的時間</li>\n<li>最好不要放棄你的社交時間</li>\n</ul>\n</blockquote>\n<h3 id=\"自我證明\"><a href=\"#自我證明\" class=\"headerlink\" title=\"自我證明\"></a>自我證明</h3><h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"http://zhibimo.com/read/xiaolai/ba-shi-jian-dang-zuo-peng-you/index.html\" target=\"_blank\" rel=\"external\">電子書</a></li>\n<li><a href=\"http://www.books.com.tw/products/CN11349756\" target=\"_blank\" rel=\"external\">奇特的一生</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"零、困境\"><a href=\"#零、困境\" class=\"headerlink\" title=\"零、困境\"></a>零、困境</h2><p><em>✖ 時間無法管理 能管理的只有你自已。</em></p>\n<h2 id=\"一、醒悟\"><a href=\"#一、醒悟\" class=\"headerlink\" title=\"一、醒悟\"></a>一、醒悟</h2><ul>\n<li><em>✖ 用思考控制思考</em></li>\n<li><em>✖ 心智:就是心靈的智慧，用理性處理感性，控制情緒與慾望。</em></li>\n<li><em>✖ 人會在相同的情況下作出完全相反的結論</em></li>\n</ul>\n<blockquote>\n<p>…歷史上也常常出現這種情況——其實目的都是“為了人類更好的明天”，可偏偏出現了對立的兩派人，<br>他們為了原本一模一樣的理想爭執不休，甚至“拋頭顱”、“撒熱血”，犧牲幾代人的福祉。  </p>\n<blockquote>\n<p>比如，所謂“水火不相容”的“社會主義陣營”和“資本主義陣營”。</p>\n</blockquote>\n<p>看穿這一切，擺脫自己的局限，需要心智的力量。</p>\n</blockquote>\n<h2 id=\"二、現實\"><a href=\"#二、現實\" class=\"headerlink\" title=\"二、現實\"></a>二、現實</h2><ul>\n<li>速成絕無可能</li>\n<li>交換才是硬道理</li>\n<li>完美永不存在</li>\n<li>未知永遠存在<blockquote>\n<p>未知分為兩種：一種是永遠不能解決的，另一種是在可預見的未來也許能夠解決的。</p>\n</blockquote>\n</li>\n</ul>\n<p><em>✖ 吾生也有涯，而知也無涯。以有涯隨無涯，殆已！已而為知者，殆而已矣！…指窮於為薪，火傳也，不知其盡也。–莊子。養生主</em></p>\n<p><em>✖ 站在巨人的肩膀上</em></p>\n<ul>\n<li>現狀無法馬上擺脫</li>\n</ul>\n<blockquote><p>接受現狀才是最優策略——有什麼做什麼，有什麼用什麼；做什麼都做好，用什麼都用好。<br>不要常常覺得苦（這會讓人忍不住顧影自憐，浪費精力與時間），而要想辦法在任何情況下找到情趣——<br>——<strong>快樂是一種本事</strong>。</p>\n</blockquote> \n<blockquote><p>心懷“夢想”的時間越長，它的沉沒成本就越高。</p>\n</blockquote> \n<p><em>✖ 積沙成塔，滴水穿石，時間可以累積，也可以消耗。</em></p>\n<ul>\n<li>與時間做朋友</li>\n</ul>\n<blockquote><p>與時間做朋友的方法很簡單：用正確的方法做正確的事情。</p>\n</blockquote>\n<blockquote><p>儘管現實總是如此難於接受，堅強的你卻應該坦然。以上提到的種種現實，包括“速成絕無可能”、“只有付出才有收穫”、“完美永不存在”、“未知永遠存在”、“現狀無法馬上擺脫”，都既清楚又簡單，你必須要接受——不僅要接受，還要牢記；不僅要牢記，還要堅信，不容半點動搖。最好時常把自己的一些念頭記下來，然後與這幾條現實對照，看看它們是否與這些現實相符。</p>\n</blockquote> \n<blockquote><p>時間是現實的人的朋友，是不現實的人的敵人。時間不是故意要這樣做，只不過事實如此。</p>\n</blockquote> \n<p><em>✖ 正確的事，正確的做 ; 首先要學會判斷什麼是正確的事。</em></p>\n<h2 id=\"三、管理\"><a href=\"#三、管理\" class=\"headerlink\" title=\"三、管理\"></a>三、管理</h2><ul>\n<li>估算時間</li>\n</ul>\n<blockquote><p>分辨任務的屬性——它是熟悉的還是陌生的呢?</p>\n</blockquote>\n<blockquote><p>對學習來說，任務“陌生”的可能性更大，因為學習本身是一個探索未知的過程。完成學習任務常常需要花費比我們想像中多得多的時間。對工作來說，任務“熟悉”的可能性更大。因為工作本身是一個應用已知的過程。</p>\n</blockquote>\n<p><em>✖ 軟體工作的這個行業，很有可能是大多數是未知的情況。</em></p>\n<ul>\n<li>及時行動</li>\n</ul>\n<blockquote><p>接受任務之後，什麼時候開始執行才好呢？比“越早開始越好”更切實的答案是“現在就開始”。</p>\n</blockquote>\n<p><em>✖ ASAP 不是一個好答案 NOW 才是。</em></p>\n<p><em>✖ 不求有功，但求無過是種慢性自殺，滴水穿石—會消磨掉你的累積。</em></p>\n<ul>\n<li>直面困難</li>\n</ul>\n<blockquote>\n<p>效率低下的根本原因是什麼？答案是：迴避困難。<br>……<br>……這些問題都源自同一個習慣：專做簡單的，迴避困難的。</p>\n</blockquote>\n<ul>\n<li>關注步驟</li>\n</ul>\n<blockquote><p>所謂“三思而行”在我看來就是指做任何事情之前都要考慮相關的3個方面：內容（What）、原因（Why）、方法（How）。任何任務都起碼具備3個屬性：何事（What）、何因（Why）、何法（How）。</p>\n</blockquote>\n<blockquote><p>不停地細分、拆解任務，而且越具體越好，直至每個小任務都可以由一個人獨立完成。</p>\n</blockquote>\n<p>例子</p>\n<blockquote>\n<p>擴充詞彙量→托福詞彙→托福核心詞彙→21個單元→每個單元大約100 個單詞→一個單元分2次完成……<br>▷ 先嘗試做一兩個階段，測量一下完成一個階段需要多長時間。<br>▷ 按照測量的結果製作一個時間表，把其餘若干個階段所需要的時間填寫完整（最終總是需要做一些調整的）。<br>▷ 背單詞需要重複，所以，每3個階段過後要留出與完成1個階段相等的時間去複習。這就意味著一共需要花費完成56（42+14）個階段的時間。<br>▷ 每完成總任務的1/3，就增加與完成1個階段相等的再复習時間。這就意味著一共需要花費完成59（56+3）個階段的時間。<br>▷ 學習過程中可能需要多次快速重複記憶，每次可能相當於完成3～5個階段所需要的時間。由於熟悉程度的不斷增加，每次重複記憶所需要的時間會越來越短，所以，預計進行3次重複記憶需要相當於10個階段的時間。這就意味著一共需要花費完成69（59+10）個階段的時間。</p>\n<p>完成每個階段的具體步驟。</p>\n<p>▷ 每天早晨騰出一點時間。<br>▷ 把前一天背過的單詞朗讀至少2 遍。<br>▷ 聽錄音，跟讀當天要背的單詞3～5遍，主要關注發音、拼寫，順帶看看詞義，能記多少就記多少，不求速成。<br>▷ 上午利用閒暇時間通讀詞彙列表，並反复閱讀例句。<br>▷ 下午用專門的時間把當天要背的單詞集中背2～3遍。可以一邊讀，一邊抄，一邊背，不要只是坐在那里呆呆地盯著詞彙看。<br>▷ 空閒的時候反复聽當天要背的單詞，重複次數越多越好。<br>▷ 晚上睡覺前複習當天背的單詞。</p>\n</blockquote>\n<ul>\n<li>並行串行</li>\n</ul>\n<p><em>✖ 拆分細項，尋找並行的可能。</em></p>\n<blockquote>\n<p>華羅庚先生曾經用燒水泡茶為例說明過這個問題。</p>\n<blockquote>\n<p>燒水泡茶：參見《統籌方法平話及補充》，華羅庚著，中國工業出版社，1966。<br>▷ 辦法甲：洗好水壺，灌上涼水，放在火上。在等待水開的時候洗茶壺、洗茶杯、拿茶葉。等到水開，泡茶喝。<br>▷ 辦法乙：先做好一些準備工作，包括洗水壺、洗壺杯、拿茶葉。一切就緒，灌水、燒水，坐待水開了泡茶喝。<br>▷ 辦法丙：洗淨開壺，灌上涼水，放在火上，坐待水開。水開了之後急急忙忙找茶葉、洗茶壺、茶杯，泡茶喝。</p>\n</blockquote>\n</blockquote>\n<p><em>✖ 分別為聖的<strong>時間片</strong></em></p>\n<blockquote>\n<p>一個處理器在一個時間段內其實只能做一件事，因為它只有一個個體、一個時空。而多任務操作系統把一個長時間段劃分成很多短小的時間片，每個時間片只讓處理器執行一個進程（Process）——儘管同時可能有多個進程需要處理。在第一個時間片裡，操作系統讓處理器處理A進程；時間片的時間用完之後，無論A進程處理到什麼程度，都要被“掛起”（即，A進程這時不能再佔用處理器資源——儘管它還是被允許使用計算機的其他資源，如內存、磁盤、屏幕輸出等）；在第二個時間片裡，處理器處理的是B進程，時間用完之後，B進程將與A進程一樣被中途“掛起”；</p>\n</blockquote>\n<ul>\n<li>感知時間</li>\n</ul>\n<blockquote>\n<p>逃避責任就會帶來輕鬆，可那恰恰就是“生命中不能承受之輕”啊！</p>\n</blockquote>\n<p><em>有的時候「逃避雖可恥但有用」，學會判斷什麼是可以逃避的事，什麼是不可逃避的事。</em></p>\n<blockquote>\n<p>學著做每天的“事件日誌”（Event Log）。除了自己經歷的事件之外，<br>一概不記，而且盡量不記感想，不記感受，只記錄事件本身。<br>…<br>…記錄過程要比基於結果的記錄更為詳盡</p>\n</blockquote>\n<p>例子</p>\n<blockquote>\n<blockquote>\n<p>烏里揚諾夫斯克。一九六四年四月七日。分類昆蟲學（畫兩張無名袋蛾的圖）——三小時十五分。鑑定袋蛾——二十分（1.0）。</p>\n<p>附加工作：給斯拉瓦寫信——二小時四十五分（0.5）。</p>\n<p>社會工作：植物保護小組開會——二小時二十五分。休息：給伊戈爾寫信——十分；<br>《烏里揚諾夫斯克真理報》——十分；列夫·托爾斯泰的《塞瓦斯托波爾紀事》——一小時二十五分。</p>\n<p>基本工作合計——六小時二十分。</p>\n</blockquote>\n</blockquote>\n<p><em>✖ 簡單的分類 + 事件 + 費時，最後再合計起來。</em><br><em>(其於事實)條列式的記錄法，與時間調色盤(預定)的方法不太一樣。</em><br><em>你可以預定你要作的事，可是你無法正確的估時 ; 這是事實，請面對這個事實。</em><br><em>輔助上分別為聖的時間切片或許可以有所幫助</em></p>\n<ul>\n<li>記錄開銷 </li>\n</ul>\n<p><em>練習中</em></p>\n<ul>\n<li>制訂預算</li>\n</ul>\n<p><em>✖ 先養成記錄的習慣，再養成制定預算的習慣</em><br><em>✖ 只列事情，重要/不重要</em></p>\n<blockquote><p>每個人都喜歡做有趣的事情，做的時候往往並不關心這件事到底有沒有用。可是，有趣的事不見得有用啊！</p>\n</blockquote>\n<blockquote><p>養成任何一個哪怕很小的習慣都需要掙扎。然而，貌似痛苦的掙扎過程，在將來的某個時刻終將變得其樂無窮。</p>\n</blockquote>\n<ul>\n<li>計劃</li>\n</ul>\n<blockquote><p>計劃成功的前提：目標現實可行</p>\n</blockquote>\n<blockquote><p>我們不是計劃著失敗，而是失敗地計劃(People don’t plan to fail, they fail to plan)。</p>\n</blockquote>\n<p><em>✖ 簡單的判斷目標是不是現實可行</em></p>\n<blockquote><blockquote>\n<p>證明我的目標現實可行的方法比較簡單：</p>\n<ol>\n<li>已經有人做到了。</li>\n<li>我與那個人沒有太大的差距。</li>\n</ol>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>長期計劃是需要通過實踐才能習得的能力</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>沒有人能給我做職業規劃。…生活本身充滿了意外，並且，總是意外到無以復加的地步。</p>\n</blockquote>\n</blockquote>\n<p><em>✖ 先從記錄開始，持續一周，繼續保持記錄下試著開始分配時間。</em><br><em>✖ 再試著從周計劃開始作規劃，練習並且保持。</em></p>\n<blockquote><blockquote>\n<p>計劃固然重要，行動更為重要。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>任何事情，都可能經歷相同的過程：逐步熟悉，小心摸索，失敗、失敗、再失敗，<br>認真反思，捲土重來，直至成功。而最初，在我們對任務連基本的認知都沒有的時候，<br>制定出來的計劃十有八九隻不過是空談。</p>\n</blockquote>\n</blockquote>\n<ul>\n<li><p>列表</p>\n</li>\n<li><p>流程</p>\n</li>\n</ul>\n<p><em>✖ 預想各種可能的情境，不用一次到位，持續整合的重點在持續。</em></p>\n<p>範例:</p>\n<blockquote>\n<p>▷ 確定對方最可能方便接電話的時間（難以確定的時候先發短信詢問）。<br>▷ 在撥打電話甚至發短信詢問對方是否方便之前準備好一切計劃溝通的內容，作好檢查列表放在手邊，確保溝通過程中不會遺漏要點。<br>▷ 通話前把重要信息整理成電子文本，在通話中做必要的更新，通話結束後，馬上通過電子郵件將備忘發送給對方。<br>▷ 若對方沒有接電話，則給對方發署名短信告知詳細事由， 並做好記錄，防止自己遺忘此次溝通任務。<br>▷ ……</p>\n</blockquote>\n<ul>\n<li>預演</li>\n</ul>\n<blockquote>\n<p>準備不足，所以害怕。</p>\n</blockquote>\n<p><em>✖ 類似一種沙箱測試，讓錯誤發生在測試階段。</em></p>\n<ul>\n<li>驗收</li>\n</ul>\n<blockquote>\n<p>向自己提出一個問題並要想辦法回答清楚：“怎樣才算’做好’？</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">本篇心得: 這是需要實際操作的一篇，仍在實踐中。</div><div class=\"line\">首先是記錄自已的時間花在哪裡？</div><div class=\"line\">再來是制定時間的預算，分別出神聖的時間去累積一些東西(ex:學習英文、跑步); </div><div class=\"line\">當習慣養成，就不再困難了，而是生活的一部份。</div><div class=\"line\">同時注意工作的流程，</div><div class=\"line\">1. 問自已What Why How ?</div><div class=\"line\">2. 儘可能拆解工作流程的步驟到最小化，建立列表。</div><div class=\"line\">3. 常常發生的工作要設想各種情境,建立SOP,以縮短時間。</div><div class=\"line\">4. 陌生的工作可以透過預演來試錯。</div><div class=\"line\">5. 一定要驗收。</div><div class=\"line\">6. 面對困難與失敗。</div><div class=\"line\">7. 及時行動!</div><div class=\"line\">8. 及時行動!!</div><div class=\"line\">9. 及時行動!!!</div></pre></td></tr></table></figure>\n<h2 id=\"四、學習\"><a href=\"#四、學習\" class=\"headerlink\" title=\"四、學習\"></a>四、學習</h2><h3 id=\"基本途徑\"><a href=\"#基本途徑\" class=\"headerlink\" title=\"基本途徑\"></a>基本途徑</h3><ul>\n<li>體驗</li>\n<li>觀察</li>\n<li>學習</li>\n</ul>\n<p><em>✖ 自由是可以被剝奪的。</em></p>\n<h3 id=\"經驗局限\"><a href=\"#經驗局限\" class=\"headerlink\" title=\"經驗局限\"></a>經驗局限</h3><blockquote><blockquote>\n<p>日常生活中主要的“溝通障礙”本質上幾乎都是由於溝通雙方無法讓對方理解與他們的經驗相悖的知識或信息造成的。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>長期的進化使人類到達了今天這個高度，但是每個人在出生的那一剎那，居然與其他動物站在幾乎同樣的起點上，心智要從零開始進化。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<blockquote>\n<p>優秀的領導，能夠把人們帶到他們想去的地方；而卓越的領導，能夠把人們帶到他們應該去但是沒想過要去的地方<br>A leader takes people where they want to go. A great leader takes people where they don’t necessarily want to go, but ought to be.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>牢記在這世界上確實存在“與現有經驗相悖的知識”，再把這句話變成經驗，用它去類比未知，而後投入大量的時間和精力去學習和掌握“科學方法論”，掙扎著進化成為真正意義上的“人”。</p>\n</blockquote>\n</blockquote>\n<h3 id=\"自學能力\"><a href=\"#自學能力\" class=\"headerlink\" title=\"自學能力\"></a>自學能力</h3><ul>\n<li>閱讀理解能力 -&gt;檢索能力 -&gt; 寫作能力 -&gt; 實踐能力</li>\n<li>永遠保持開放的心態</li>\n</ul>\n<blockquote>\n<p>最好固定一段時間來把那些目前暫時無法理解的、支持的、反對的、無所謂的論點和觀點記錄下來。對無法理解的，寫下自己當時的疑惑何在；對支持的，記錄幾個理由或者實例；對反對的，同樣記錄幾個理由或者實例；甚至對那些無所謂的，也記錄其原因。一個有著這樣良好記錄習慣的人會獲得他人無法擁有的處理信息和知識的能力——“反芻”。這種“反芻”能力是我們避免成為“選擇性輸入”受害者的重要保障。</p>\n<p>在學習的時候，進展和時間的關係肯定不是線性的：所謂“一分耕耘，一分收穫”。這個關係曲線更可能是階梯狀的：學習過程中有很長時間一點進展都沒有，但從某一刻開始突飛猛進，而後又是長長的一段所謂的“平台期”。…只有經歷積累的過程，“量變到質變”的效果才會出現，才有可能突飛猛進。</p>\n</blockquote>\n<h2 id=\"五、思考\"><a href=\"#五、思考\" class=\"headerlink\" title=\"五、思考\"></a>五、思考</h2><ul>\n<li><a href=\"#c51\">勤於思考</a></li>\n<li><a href=\"#c52\">思維陷阱</a></li>\n<li><a href=\"#c53\">因果關係</a></li>\n<li><a href=\"#c54\">逆命題</a></li>\n<li><a href=\"#c55\">舉證責任</a></li>\n<li><a href=\"#c56\">案例局限</a></li>\n<li><a href=\"#c57\">對立論證</a></li>\n<li><a href=\"#c58\">張冠李戴</a></li>\n<li><a href=\"#c59\">感悟與道理</a></li>\n<li><a href=\"#c510\">克服恐懼</a></li>\n<li><a href=\"#c511\">輔助工具</a><h3 id=\"勤於思考\"><a href=\"#勤於思考\" class=\"headerlink\" title=\"勤於思考\"></a><span id=\"c51\">勤於思考</span></h3></li>\n</ul>\n<blockquote>\n<p>人都有大腦，閒置還是使用，是個問題。</p>\n</blockquote>\n<ol>\n<li>獨立思考</li>\n<li>思考任務的目標、實質、意義</li>\n</ol>\n<blockquote>\n<p>很多人就是這樣，堅持拒絕思考，然後用天下最累的方式生活而不自知。大哲學家羅素曾觀察到這個現象，他為之奇怪並慨嘆，“ 很多人寧願死也不願思考 ”，然後戲謔道，“ 實際上，他們確實死得很快。”</p>\n<blockquote>\n<p>Most people would die sooner than think — in fact they do so.<br>— Bertrand Russell，In The ABC of Relativity，1925，P.166</p>\n</blockquote>\n</blockquote>\n<h3 id=\"思維陷阱\"><a href=\"#思維陷阱\" class=\"headerlink\" title=\"思維陷阱\"></a><span id=\"c52\">思維陷阱</span></h3><h4 id=\"概念不清和拒絕接受不確定性\"><a href=\"#概念不清和拒絕接受不確定性\" class=\"headerlink\" title=\"概念不清和拒絕接受不確定性\"></a>概念不清和拒絕接受不確定性</h4><ol>\n<li>概念不清</li>\n</ol>\n<blockquote><blockquote>\n<p>學習任何知識最重要的一點，就是搞清楚它所有的基礎概念。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>讀教科書，要先把所有概念都記下來，暫時不懂的就死記硬背。把概念牢記於心，就可以通過以後的學習和實踐反複審視它，並形成透徹理解。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>本書強調“時間不可管理”、“我們只能管理自己”，並非咬文嚼字。“時間管理”和“自我管理”是完全不同的概念——焦點不同，方法不同，效果不同</p>\n</blockquote>\n</blockquote>\n<ol>\n<li>拒絕接受不確定性</li>\n</ol>\n<blockquote>\n<p>未知永遠存在。從本質上來看，不確定性和未知是一回事。</p>\n</blockquote>\n<h3 id=\"因果關係\"><a href=\"#因果關係\" class=\"headerlink\" title=\"因果關係\"></a><span id=\"c53\">因果關係</span></h3><h4 id=\"基礎\"><a href=\"#基礎\" class=\"headerlink\" title=\"基礎\"></a>基礎</h4><blockquote>\n<p>外因會影響內因，內因同樣會影響外因。它們相互影響，互為因果。</p>\n<p>舉一個特別好玩的現象為例：在某種意義上，學生的水平決定教師的水平。</p>\n<p>這話並沒有說反。師生之間的有效溝通，肯定不僅是教師單方面的灌輸。越是用心的教師，越關注學生的反饋；越是用心的學生，越關注教師對他的反饋的反饋。顯然，這種溝通不僅是雙向的，還隨著雙方的用心程度而不斷增強。</p>\n<p>這和下棋是一樣的道理。據說，棋藝到了一定程度，棋手就會不由自主地挑選對手，因為跟高手下棋就會進步，但反過來，與“臭手”交手多了，自己的手也會變“臭”……優質的學生，對他們的教師來說，不僅是令人愉悅的教學對象（學生一點就透，老師沒有不開心的），更重要的，他們還是對教師的挑戰——這些學生有著長期而且優秀的學習經驗，也因此擁有相對良好的判斷能力，隨時可能提出一般教師無法回答的問題。經過一段時間的積累，雙方都會因為教學和溝通發生巨大的進步——只要雙方都足夠優秀，足夠用心。</p>\n</blockquote>\n<blockquote><p>正在塑造我們的這個環境，也是我們自己（參與）塑造的</p>\n</blockquote>\n<blockquote>\n<h4 id=\"要做一個用心的人，要用心做事，因為這世界其實也是有“心”的。\"><a href=\"#要做一個用心的人，要用心做事，因為這世界其實也是有“心”的。\" class=\"headerlink\" title=\"要做一個用心的人，要用心做事，因為這世界其實也是有“心”的。\"></a>要做一個用心的人，要用心做事，因為這世界其實也是有“心”的。</h4></blockquote>\n<h4 id=\"雙盲測試\"><a href=\"#雙盲測試\" class=\"headerlink\" title=\"雙盲測試\"></a>雙盲測試</h4><p><em>註: 受測者不知道安慰劑的存在，測試者則不知道誰服用了安慰劑，單純以局外人的角度觀測記錄。</em></p>\n<blockquote>\n<p>人群中也有差不多⅓的人更易受到（來自他人或來自自身的）心理暗示的影響。也就是說，他們更可能在服用安慰劑後病情真正好轉。</p>\n</blockquote>\n<h4 id=\"自證預言\"><a href=\"#自證預言\" class=\"headerlink\" title=\"自證預言\"></a>自證預言</h4><blockquote>\n<p>莫頓教授用銀行擠兌的例子說明了自證預言的作用機理：</p>\n<blockquote>\n<p>一家銀行本來運作得很正常，但不知什麼原因，出現了“這家銀行要倒閉”的流言。流言越傳越廣，導致越來越多的人信以為真，有人為防意外而跑到銀行把自己的存款提走。恐慌情緒蔓延，並且變得愈加真實，更多的人衝進銀行提走自己的存款……最終，擠兌發生了，銀行真的倒閉了。</p>\n</blockquote>\n<p>一個原本並不存在的原因竟然“無中生有”變成了真正的原因。</p>\n</blockquote>\n<h4 id=\"心中恐惧失敗，才是失敗的原因。\"><a href=\"#心中恐惧失敗，才是失敗的原因。\" class=\"headerlink\" title=\"心中恐惧失敗，才是失敗的原因。\"></a>心中恐惧失敗，才是失敗的原因。</h4><h3 id=\"逆命題\"><a href=\"#逆命題\" class=\"headerlink\" title=\"逆命題\"></a><span id=\"c54\">逆命題</span></h3><blockquote>\n<p><strong>原命題為真，它的逆命題不一定為真。</strong><br>P 則 Q 等於 ~Q 則 ~P<br>但是不一定存在 Q 則 P 的關係</p>\n<p>有70%以上的人分不清楚原命題和逆命題之間的區別。</p>\n<blockquote>\n<p>參見《認知心理學》（Cognitive Psychology: A Student’s Handbook，2000），邁克爾·艾森克（Michael W. Eysenck）、馬克·基恩（Mark T. Keane）合著。</p>\n</blockquote>\n</blockquote>\n<p><em>✖ 心得: 人很好騙，至少70%很好騙。</em></p>\n<h3 id=\"舉證責任\"><a href=\"#舉證責任\" class=\"headerlink\" title=\"舉證責任\"></a><span id=\"c55\">舉證責任</span></h3><blockquote>\n<p>“舉證責任”是不對等的<br>爭論雙方的境況常常處於這種狀態：<br>▷其中一方肩負沉重的舉證責任（burden of proof）<br>▷另外一方則享有來自假設的恩惠（benefit of assumption）</p>\n</blockquote>\n<blockquote><p>既然你無法證明我是錯的，那麼我就是對的。這是一種典型的邏輯錯誤</p>\n</blockquote>\n<p><em>✖ 套用一下邏輯學:</em><br><em>我是對的 則 你無法証明我是錯的，恒為真。</em><br><em>你無法証明我是錯的 則 我是錯的，恒為真。</em><br><em>你無法證明我是錯的 則 我是對的，不恒為真</em></p>\n<h3 id=\"案例局限\"><a href=\"#案例局限\" class=\"headerlink\" title=\"案例局限\"></a><span id=\"c56\">案例局限</span></h3><blockquote>\n<p>最為常見的邏輯錯誤就是“以偏概全”——某種經驗在某個人身上應驗了，並不意味著該經驗在所有人身上都會起作用。</p>\n</blockquote>\n<p><em>✖ 常見的推銷話術，我作得到，你也作得到。努力就會成功。</em><br><em>這類的話術可怕的地方在於它不完全是錯的，但是你必需客觀衡量各種條件，而非局限單一案例。</em></p>\n<h3 id=\"對立論證\"><a href=\"#對立論證\" class=\"headerlink\" title=\"對立論證\"></a><span id=\"c57\">對立論證</span></h3><blockquote><blockquote>\n<p>人們可能基於一模一樣的原因做出截然相反的決定。換句話說，用同樣的論據證明截然相反的論點。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>抱怨上司“愚蠢”的人和能夠發覺“上司的愚蠢可能有另外的解釋”的人，得到的結論和採取的行動往往截然相反。<strong>因此，時間在他們接下來的經歷中所產生的伴隨作用也截然相反。這裡，時間再一次選擇與心智強大的人做朋友</strong></p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>一旦意識到對立論證的存在，應該<strong>“哪一個更合理、更現實就接受哪一個”</strong>，而非“哪一個更積極就接受哪一個”，因為後者只是自我欺騙而已。積極的並不總是好的，哪一個極端理想主義者（以及他們的想法、理念）不是積極的呢？</p>\n</blockquote>\n</blockquote>\n<p><em>✖ 職場上不論是留下繼續努力，或是掛冠求去都無對錯之分，而是何者更為合理。這個道理在人生的選擇上也是，需要注意對立論證的存在，堅持或放棄本無對錯，合理的判斷即可。</em></p>\n<h3 id=\"張冠李戴\"><a href=\"#張冠李戴\" class=\"headerlink\" title=\"張冠李戴\"></a><span id=\"c58\">張冠李戴</span></h3><blockquote><blockquote>\n<p>論點和論據之間儘管全無邏輯聯繫，卻可以用一種“顯然合理”的姿態綁在一起。</p>\n</blockquote>\n</blockquote>\n<p>舉例:</p>\n<blockquote>\n<p>將字母A到Z分別編上1到26的分數（A=1,B=2,…,Z=26），然後比較不同單詞的分值：<br>▷Knowledge（知識）得到96分<br>（11+14+15+23+12+5+4+7+5=96）；<br>▷Hardwork（努力）也只得到98分<br>（8+1+18+4+23+15+18+11=98）；<br>▷Attitude（態度）才能左右你生命的全部，<br>因為它能得到100分<br>（1+20+20+9+20+21+4+5=100）——滿分。<br>得出結論：“態度改變一切”。<br>Bullshit（胡說八道）<br>(2+21+12+12+19+8+9+20=103)</p>\n</blockquote>\n<h3 id=\"感悟與道理\"><a href=\"#感悟與道理\" class=\"headerlink\" title=\"感悟與道理\"></a><span id=\"c59\">感悟與道理</span></h3><blockquote><p>“道理”應該是普適的，而“感悟”只來自個體經驗。</p>\n</blockquote>\n<blockquote><p>並非只有專家級別的新聞工作者才要分清“看法與事實之間的區別”，其實每個人都需要清楚地認識“道理”和“感悟”之間的巨大差異。</p>\n</blockquote>\n<blockquote><p>如果某個人把他們說的當作全部，把他們沒說的當作沒有，那麼這個人的智商就跟寓言中那個掩耳盜鈴的傢伙屬於同一個水平了。</p>\n</blockquote>\n<blockquote><p>人類普遍擁有的一個認知偏差就是：把成功攬到自己身上，把失敗歸咎於別人或者壞運氣。（這在心理學上有個術語，叫做“自利性偏差(Self-servingBias)”。）從這裡我們就可以知道，那些“成功者”這麼做的時候，往往並不是有意欺騙——他們甚至出於好意。</p>\n</blockquote>\n<blockquote><p>一個很實用的建議：與其關注成功者，不妨反其道而行之——努力從失敗者身上汲取經驗。</p>\n</blockquote>\n<p><em>✖ 困難的點在於，感悟難以作”雙盲測試”，也深受”案例局限”與”安慰劑效應”影響</em></p>\n<h3 id=\"克服恐懼\"><a href=\"#克服恐懼\" class=\"headerlink\" title=\"克服恐懼\"></a><span id=\"c510\">克服恐懼</span></h3><blockquote><p>“道理都明白，可就做不到”</p>\n</blockquote>\n<h3 id=\"輔助工具\"><a href=\"#輔助工具\" class=\"headerlink\" title=\"輔助工具\"></a><span id=\"c511\">輔助工具</span></h3><h4 id=\"語言\"><a href=\"#語言\" class=\"headerlink\" title=\"語言\"></a>語言</h4><blockquote><p>以下一些句式最好經常使用，因為它們特別有助於獨立思考習慣的養成，並且也有刺激思考的作用：<br>▷……是一回事，而……是另外一回事。<br>▷……和……其實根本不是一回事。<br>▷……不一定……<br>▷……。可是，這並不意味著……<br>▷……也許還有另外一種可能性（解釋）。<br>▷……看起來像……，可是……<br>▷……。而事實卻可能遠比看起來的更為複雜（簡單）。<br>▷……。然而，（這個論斷）反過來（陳述）卻不一定成立……<br>▷……其實很可能與……根本就沒有任何關係。<br>▷……和……之間不一定是單純的因果關係，它們也可能互為因果。<br>▷……和……之間的比較也許沒有任何意義。<br>▷……其實不過是表面現象，其背後的本質是……<br>▷……有一個通常被忽略的前提。<br>▷……儘管聽起來很有道理，然而卻完全不現實。<br>▷……也許有人會說……，但是這種質疑卻……</p>\n</blockquote>\n<blockquote><p>要刻意迴避的句子<br>▷……難道就沒有一點可取之處嗎？<br>▷……要是……就好了！</p>\n</blockquote>\n<h2 id=\"六、交流\"><a href=\"#六、交流\" class=\"headerlink\" title=\"六、交流\"></a>六、交流</h2><h3 id=\"學會傾聽\"><a href=\"#學會傾聽\" class=\"headerlink\" title=\"學會傾聽\"></a>學會傾聽</h3><blockquote><p>為了真正做到有效傾聽，最需要克制的就是“過早質疑”。</p>\n</blockquote>\n<blockquote><p>就算需要質疑，也一定要等到對方把話說完。</p>\n</blockquote>\n<h3 id=\"說與不說\"><a href=\"#說與不說\" class=\"headerlink\" title=\"說與不說\"></a>說與不說</h3><blockquote><p>“知無不言，言無不盡”在大部分情況下是最浪費時間和精力的做法。</p>\n</blockquote>\n<blockquote><p>…在分辨談話對象之前很可能要先分辨自己，所以，<br>“可與言而不與言，失人。不可與言而與之言，失言。”這是說要分辨談話的對象。</p>\n</blockquote>\n<h3 id=\"共生狀態\"><a href=\"#共生狀態\" class=\"headerlink\" title=\"共生狀態\"></a>共生狀態</h3><blockquote>\n<p>見瓦茨拉夫·哈維爾先生製定的《對話守則》：<br>1.對話的目的是尋求真理，不是為了鬥爭。<br>2.不做人身攻擊。<br>3.保持主題。<br>4.辯論時要用證據。<br>5.不要堅持錯誤不改。<br>6.要分清對話與只准自己講話的區別。<br>7.對話要有記錄。<br>8.盡量理解對方。</p>\n</blockquote>\n<blockquote><p>雙方想要進行有意義的討論，最基本的要求就是雙方必須共同遵守“理性討論基本原則”。</p>\n</blockquote>\n<blockquote><p>跨越“自以為是”</p>\n</blockquote>\n<p><em>✖ 「緣督以為經；因其故然」— 莊子。養生主 ; 學習應順其自然，不然會把自已累死。「知知為知知，不知為不知，是知也」—論語</em> </p>\n<blockquote><p>第一個原則：有意義的討論是競合<br>第二個原則：真理是獨立存在的<br>第三個原則：真理不變</p>\n</blockquote>\n<h3 id=\"正確複述\"><a href=\"#正確複述\" class=\"headerlink\" title=\"正確複述\"></a>正確複述</h3><blockquote>\n<p>為了保證溝通順利，往往需要添加一個驗證機制，或者說反饋機制。</p>\n</blockquote>\n<h3 id=\"勤於反思\"><a href=\"#勤於反思\" class=\"headerlink\" title=\"勤於反思\"></a>勤於反思</h3><ul>\n<li>深刻了解經驗的局限</li>\n<li>時時刻刻保持警惕 </li>\n</ul>\n<blockquote>\n<p>手裡只有一把錘子，看什麼問題都像釘子    </p>\n</blockquote>\n<ul>\n<li>用記錄，使自己能夠記住更多的經驗 </li>\n<li>通過觀察和閱讀汲取他人的經驗</li>\n<li>經常試用類比來跨越未知與已知的障礙 </li>\n<li>耐心等待以獲得不能跨越時間的經驗  </li>\n</ul>\n<h2 id=\"七、應用\"><a href=\"#七、應用\" class=\"headerlink\" title=\"七、應用\"></a>七、應用</h2><h3 id=\"興趣\"><a href=\"#興趣\" class=\"headerlink\" title=\"興趣\"></a>興趣</h3><blockquote>\n<p>說來說去，是順序出了問題：往往並不是有興趣才能做好，而是做好了才有興趣。人們總是搞錯順序，並對這樣的錯誤毫不知曉。雖然並非絕對，但完成大多數事情，確實都需要熟能生巧。做得多了，自然就能擅長；擅長了，自然就做得比別人好；做得比別人好了，興趣就濃起來了，而後就更喜歡做、更擅長……進入良性循環。可同樣的，做得多，就需要大量的時間投入，所謂“沒興趣”，往往不過是結果，如果將它當作“不去做好”的理由，最終的懲罰就是大量時間白白流逝。</p>\n</blockquote>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><blockquote>\n<p>所有學習上的成功，都只依靠兩件事——策略和堅持，而堅持本身就是最重要的策略。堅持，其實就是重複；而重複，說到底就是時間的投入，準確地說，是大量時間的投入。</p>\n</blockquote>\n<p><em>✖ 你沒有實際作之前，不會知道效果如何，再在找更好的方法之前，最好的策略是堅持</em></p>\n<h3 id=\"痛苦-比較-運氣\"><a href=\"#痛苦-比較-運氣\" class=\"headerlink\" title=\"痛苦 -比較 - 運氣\"></a>痛苦 -比較 - 運氣</h3><h3 id=\"人脈\"><a href=\"#人脈\" class=\"headerlink\" title=\"人脈\"></a>人脈</h3><blockquote><blockquote>\n<p>當我們把時間花到一個人身上的時候，相當於在他身上傾注了自己生命的一段。</p>\n</blockquote>\n</blockquote>\n<blockquote><blockquote>\n<p>▷專心做可以提升自己的事情，學習並擁有更多、更好的技能，成為一個值得他人交往的人。<br>▷學會獨善其身，以不給他人製造麻煩為美德，用自己的獨立贏得尊重。</p>\n</blockquote>\n</blockquote>\n<p><em>✖ 人必自重而後人重之—你值得人家交往，人家就會來跟你交往。</em></p>\n<h3 id=\"自卑\"><a href=\"#自卑\" class=\"headerlink\" title=\"自卑\"></a>自卑</h3><p><em>✖  保持謙卑，認識真正的自已。</em></p>\n<h3 id=\"靈感\"><a href=\"#靈感\" class=\"headerlink\" title=\"靈感\"></a>靈感</h3><p><em>✖ 靈感來自於累積，筆記是一個好工具</em></p>\n<h3 id=\"鼓勵\"><a href=\"#鼓勵\" class=\"headerlink\" title=\"鼓勵\"></a>鼓勵</h3><h3 id=\"效率\"><a href=\"#效率\" class=\"headerlink\" title=\"效率\"></a>效率</h3><h3 id=\"節奏\"><a href=\"#節奏\" class=\"headerlink\" title=\"節奏\"></a>節奏</h3><h3 id=\"物極必反\"><a href=\"#物極必反\" class=\"headerlink\" title=\"物極必反\"></a>物極必反</h3><blockquote>\n<ul>\n<li>絕對不要盲目地試圖減少睡眠時間</li>\n<li>盡量不要減少與家庭成員交流的時間</li>\n<li>最好不要放棄你的社交時間</li>\n</ul>\n</blockquote>\n<h3 id=\"自我證明\"><a href=\"#自我證明\" class=\"headerlink\" title=\"自我證明\"></a>自我證明</h3><h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"http://zhibimo.com/read/xiaolai/ba-shi-jian-dang-zuo-peng-you/index.html\" target=\"_blank\" rel=\"external\">電子書</a></li>\n<li><a href=\"http://www.books.com.tw/products/CN11349756\" target=\"_blank\" rel=\"external\">奇特的一生</a></li>\n</ul>\n"},{"title":"CI/CD 環境建置筆記 - 前言<目的>","date":"2017-01-15T13:54:00.000Z","_content":"\n## 現有架構\n![](https://i.imgur.com/QLzPTrp.jpg)\n### 版本控制\n1. Github\n2. Openshift\nOpenshift 是實際線上服務所在,也可以稱作是我的產品(Product),\nGithub 則是單純的負責版本控制。\n### 開發流程\n作為獨立開發的專案,這個網站只是我很單純的自我介紹、練習(KATA)、學習與分享的集散地。\n原本的開發流程很單純,如上圖。完成的CODE同步到 GITHUB 後也同步上 Openshift ,\n這樣的流程雖然簡單,但是每次都要人工執行,因為其執行順序,其實都隱含著風險,\n例如:上錯版本或是產品未進版控等等…,\n而當進一步想要執行建置、編譯 、套件管理、測試、分析與產生報表時,\n產品與源碼將會產生差異(ex:產品會包含壓縮的檔案而源碼則是未壓縮的檔案)\n\n\n#### 缺點:\n1. 在這樣的架構上容易不小心發佈還在開發中的功能。\n2. Prod的來源就是程式碼,無法確保與版控一致,如此就喪失版控的用意。\n3. 難以擴展其他功能,如:建置、編譯 、套件管理、測試、分析與產生報表\n\n#### 目標:\n![](https://i.imgur.com/dHYRJKr.jpg)\n如圖所示, \n第一步 Jenkins要將原始碼自Github pull下來\n第二到第N步 Jenkins要執行建置、測試、coding style的檢查、壓縮…等等。\n最後一步 Jenkins 將會將程式碼發佈到Openshift 上面。\n中間的步驟先跳過,之後再一一補上。\n所以第一目標很簡單,\n從Github Pull再Push到Openshift。\n","source":"_posts/ci_use_jenkins.md","raw":"---\ntitle: CI/CD 環境建置筆記 - 前言<目的>\ndate: 2017/01/15 21:54:00\ntag:\n  - CI\n  - Jenkins\n---\n\n## 現有架構\n![](https://i.imgur.com/QLzPTrp.jpg)\n### 版本控制\n1. Github\n2. Openshift\nOpenshift 是實際線上服務所在,也可以稱作是我的產品(Product),\nGithub 則是單純的負責版本控制。\n### 開發流程\n作為獨立開發的專案,這個網站只是我很單純的自我介紹、練習(KATA)、學習與分享的集散地。\n原本的開發流程很單純,如上圖。完成的CODE同步到 GITHUB 後也同步上 Openshift ,\n這樣的流程雖然簡單,但是每次都要人工執行,因為其執行順序,其實都隱含著風險,\n例如:上錯版本或是產品未進版控等等…,\n而當進一步想要執行建置、編譯 、套件管理、測試、分析與產生報表時,\n產品與源碼將會產生差異(ex:產品會包含壓縮的檔案而源碼則是未壓縮的檔案)\n\n\n#### 缺點:\n1. 在這樣的架構上容易不小心發佈還在開發中的功能。\n2. Prod的來源就是程式碼,無法確保與版控一致,如此就喪失版控的用意。\n3. 難以擴展其他功能,如:建置、編譯 、套件管理、測試、分析與產生報表\n\n#### 目標:\n![](https://i.imgur.com/dHYRJKr.jpg)\n如圖所示, \n第一步 Jenkins要將原始碼自Github pull下來\n第二到第N步 Jenkins要執行建置、測試、coding style的檢查、壓縮…等等。\n最後一步 Jenkins 將會將程式碼發佈到Openshift 上面。\n中間的步驟先跳過,之後再一一補上。\n所以第一目標很簡單,\n從Github Pull再Push到Openshift。\n","slug":"ci_use_jenkins","published":1,"updated":"2017-01-15T16:12:04.052Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3o88000plgop96yfavlc","content":"<h2 id=\"現有架構\"><a href=\"#現有架構\" class=\"headerlink\" title=\"現有架構\"></a>現有架構</h2><p><img src=\"https://i.imgur.com/QLzPTrp.jpg\" alt=\"\"></p>\n<h3 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h3><ol>\n<li>Github</li>\n<li>Openshift<br>Openshift 是實際線上服務所在,也可以稱作是我的產品(Product),<br>Github 則是單純的負責版本控制。<h3 id=\"開發流程\"><a href=\"#開發流程\" class=\"headerlink\" title=\"開發流程\"></a>開發流程</h3>作為獨立開發的專案,這個網站只是我很單純的自我介紹、練習(KATA)、學習與分享的集散地。<br>原本的開發流程很單純,如上圖。完成的CODE同步到 GITHUB 後也同步上 Openshift ,<br>這樣的流程雖然簡單,但是每次都要人工執行,因為其執行順序,其實都隱含著風險,<br>例如:上錯版本或是產品未進版控等等…,<br>而當進一步想要執行建置、編譯 、套件管理、測試、分析與產生報表時,<br>產品與源碼將會產生差異(ex:產品會包含壓縮的檔案而源碼則是未壓縮的檔案)</li>\n</ol>\n<h4 id=\"缺點\"><a href=\"#缺點\" class=\"headerlink\" title=\"缺點:\"></a>缺點:</h4><ol>\n<li>在這樣的架構上容易不小心發佈還在開發中的功能。</li>\n<li>Prod的來源就是程式碼,無法確保與版控一致,如此就喪失版控的用意。</li>\n<li>難以擴展其他功能,如:建置、編譯 、套件管理、測試、分析與產生報表</li>\n</ol>\n<h4 id=\"目標\"><a href=\"#目標\" class=\"headerlink\" title=\"目標:\"></a>目標:</h4><p><img src=\"https://i.imgur.com/dHYRJKr.jpg\" alt=\"\"><br>如圖所示,<br>第一步 Jenkins要將原始碼自Github pull下來<br>第二到第N步 Jenkins要執行建置、測試、coding style的檢查、壓縮…等等。<br>最後一步 Jenkins 將會將程式碼發佈到Openshift 上面。<br>中間的步驟先跳過,之後再一一補上。<br>所以第一目標很簡單,<br>從Github Pull再Push到Openshift。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"現有架構\"><a href=\"#現有架構\" class=\"headerlink\" title=\"現有架構\"></a>現有架構</h2><p><img src=\"https://i.imgur.com/QLzPTrp.jpg\" alt=\"\"></p>\n<h3 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h3><ol>\n<li>Github</li>\n<li>Openshift<br>Openshift 是實際線上服務所在,也可以稱作是我的產品(Product),<br>Github 則是單純的負責版本控制。<h3 id=\"開發流程\"><a href=\"#開發流程\" class=\"headerlink\" title=\"開發流程\"></a>開發流程</h3>作為獨立開發的專案,這個網站只是我很單純的自我介紹、練習(KATA)、學習與分享的集散地。<br>原本的開發流程很單純,如上圖。完成的CODE同步到 GITHUB 後也同步上 Openshift ,<br>這樣的流程雖然簡單,但是每次都要人工執行,因為其執行順序,其實都隱含著風險,<br>例如:上錯版本或是產品未進版控等等…,<br>而當進一步想要執行建置、編譯 、套件管理、測試、分析與產生報表時,<br>產品與源碼將會產生差異(ex:產品會包含壓縮的檔案而源碼則是未壓縮的檔案)</li>\n</ol>\n<h4 id=\"缺點\"><a href=\"#缺點\" class=\"headerlink\" title=\"缺點:\"></a>缺點:</h4><ol>\n<li>在這樣的架構上容易不小心發佈還在開發中的功能。</li>\n<li>Prod的來源就是程式碼,無法確保與版控一致,如此就喪失版控的用意。</li>\n<li>難以擴展其他功能,如:建置、編譯 、套件管理、測試、分析與產生報表</li>\n</ol>\n<h4 id=\"目標\"><a href=\"#目標\" class=\"headerlink\" title=\"目標:\"></a>目標:</h4><p><img src=\"https://i.imgur.com/dHYRJKr.jpg\" alt=\"\"><br>如圖所示,<br>第一步 Jenkins要將原始碼自Github pull下來<br>第二到第N步 Jenkins要執行建置、測試、coding style的檢查、壓縮…等等。<br>最後一步 Jenkins 將會將程式碼發佈到Openshift 上面。<br>中間的步驟先跳過,之後再一一補上。<br>所以第一目標很簡單,<br>從Github Pull再Push到Openshift。</p>\n"},{"title":"CI/CD 環境建置筆記(二) - 在 windows 安裝 Jenkins 之旁門左道私有雲","date":"2017-04-29T03:55:16.000Z","_content":"\n## 應該要知道的事\n\n- Dropbox\n- Windows Service\n- [CI/CD 環境建置筆記(一) - 在 windows 安裝 Jenkins ](/2017/01/15/ci_use_jenkins/)\n\n## 問題\n\n在 windows 上安裝了Jenkins , 也建立了一個新的作業 ,\n讓程式可以透過 Jenkins 執行自動化部署。\n不過實務上仍有缺點，那就是只有這台機器可以執行部署 ,\n最理想的狀況是擁有一個在雲端的 CI Server ,\n隨時隨地想部署只需要能連上網 , 登入執行就好\n這部份可以試試看 `Travis-CI`、`CircleCI`之類的服務 ;\n不過對於只熟悉 Jenkins 的我來說 ,\n我想了另一套解決辦法(旁門左道) ,\n不過至少解決了我目前的需求 ,\n在公司與家中隨時都能透過本機Jenkins Server 進行部署 , \n並且不用花時間同步設定值. \n在花時間研究`Travis-CI`、`CircleCI`的部署方式之前 ,\n算是一個折衷的方式 .\n\n## 方案\n1. 首先你要有 Dropbox \n2. 下載 Windows 版的 Jenkins\n3. 安裝在 Dropbox 資料夾內\n4. 在另外一台電腦 , 進行相同的安裝\n\n想法很簡單 , 透過 Dropbox 與 Jenkins Service\n在兩台電腦安裝 Jenkins\n只要將 Jenkins Service 的啟動路徑\n設定在 Dropbox 中 , \n就可以達成我們的目標 .\n![](https://i.imgur.com/DyrNMJD.jpg)\n\n## 問題 \n1. Windows 要如何修改 Jenkins Service 的啟動路徑 ?\n\n`HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Jenkins`\n\n修改路徑以符合你本機的檔案位置即可。\n\n![](https://i.imgur.com/KGemCSe.jpg)\n\n(fin)","source":"_posts/ci_use_jenkins_on_two_windows.md","raw":"---\ntitle: CI/CD 環境建置筆記(二) - 在 windows 安裝 Jenkins 之旁門左道私有雲\ndate: 2017/04/29 11:55:16\ntag:\n  - CI\n  - Jenkins\n---\n\n## 應該要知道的事\n\n- Dropbox\n- Windows Service\n- [CI/CD 環境建置筆記(一) - 在 windows 安裝 Jenkins ](/2017/01/15/ci_use_jenkins/)\n\n## 問題\n\n在 windows 上安裝了Jenkins , 也建立了一個新的作業 ,\n讓程式可以透過 Jenkins 執行自動化部署。\n不過實務上仍有缺點，那就是只有這台機器可以執行部署 ,\n最理想的狀況是擁有一個在雲端的 CI Server ,\n隨時隨地想部署只需要能連上網 , 登入執行就好\n這部份可以試試看 `Travis-CI`、`CircleCI`之類的服務 ;\n不過對於只熟悉 Jenkins 的我來說 ,\n我想了另一套解決辦法(旁門左道) ,\n不過至少解決了我目前的需求 ,\n在公司與家中隨時都能透過本機Jenkins Server 進行部署 , \n並且不用花時間同步設定值. \n在花時間研究`Travis-CI`、`CircleCI`的部署方式之前 ,\n算是一個折衷的方式 .\n\n## 方案\n1. 首先你要有 Dropbox \n2. 下載 Windows 版的 Jenkins\n3. 安裝在 Dropbox 資料夾內\n4. 在另外一台電腦 , 進行相同的安裝\n\n想法很簡單 , 透過 Dropbox 與 Jenkins Service\n在兩台電腦安裝 Jenkins\n只要將 Jenkins Service 的啟動路徑\n設定在 Dropbox 中 , \n就可以達成我們的目標 .\n![](https://i.imgur.com/DyrNMJD.jpg)\n\n## 問題 \n1. Windows 要如何修改 Jenkins Service 的啟動路徑 ?\n\n`HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Jenkins`\n\n修改路徑以符合你本機的檔案位置即可。\n\n![](https://i.imgur.com/KGemCSe.jpg)\n\n(fin)","slug":"ci_use_jenkins_on_two_windows","published":1,"updated":"2017-05-28T06:30:24.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3o8a000qlgoptdqn6wxr","content":"<h2 id=\"應該要知道的事\"><a href=\"#應該要知道的事\" class=\"headerlink\" title=\"應該要知道的事\"></a>應該要知道的事</h2><ul>\n<li>Dropbox</li>\n<li>Windows Service</li>\n<li><a href=\"/2017/01/15/ci_use_jenkins/\">CI/CD 環境建置筆記(一) - 在 windows 安裝 Jenkins </a></li>\n</ul>\n<h2 id=\"問題\"><a href=\"#問題\" class=\"headerlink\" title=\"問題\"></a>問題</h2><p>在 windows 上安裝了Jenkins , 也建立了一個新的作業 ,<br>讓程式可以透過 Jenkins 執行自動化部署。<br>不過實務上仍有缺點，那就是只有這台機器可以執行部署 ,<br>最理想的狀況是擁有一個在雲端的 CI Server ,<br>隨時隨地想部署只需要能連上網 , 登入執行就好<br>這部份可以試試看 <code>Travis-CI</code>、<code>CircleCI</code>之類的服務 ;<br>不過對於只熟悉 Jenkins 的我來說 ,<br>我想了另一套解決辦法(旁門左道) ,<br>不過至少解決了我目前的需求 ,<br>在公司與家中隨時都能透過本機Jenkins Server 進行部署 ,<br>並且不用花時間同步設定值.<br>在花時間研究<code>Travis-CI</code>、<code>CircleCI</code>的部署方式之前 ,<br>算是一個折衷的方式 .</p>\n<h2 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h2><ol>\n<li>首先你要有 Dropbox </li>\n<li>下載 Windows 版的 Jenkins</li>\n<li>安裝在 Dropbox 資料夾內</li>\n<li>在另外一台電腦 , 進行相同的安裝</li>\n</ol>\n<p>想法很簡單 , 透過 Dropbox 與 Jenkins Service<br>在兩台電腦安裝 Jenkins<br>只要將 Jenkins Service 的啟動路徑<br>設定在 Dropbox 中 ,<br>就可以達成我們的目標 .<br><img src=\"https://i.imgur.com/DyrNMJD.jpg\" alt=\"\"></p>\n<h2 id=\"問題-1\"><a href=\"#問題-1\" class=\"headerlink\" title=\"問題\"></a>問題</h2><ol>\n<li>Windows 要如何修改 Jenkins Service 的啟動路徑 ?</li>\n</ol>\n<p><code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Jenkins</code></p>\n<p>修改路徑以符合你本機的檔案位置即可。</p>\n<p><img src=\"https://i.imgur.com/KGemCSe.jpg\" alt=\"\"></p>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"應該要知道的事\"><a href=\"#應該要知道的事\" class=\"headerlink\" title=\"應該要知道的事\"></a>應該要知道的事</h2><ul>\n<li>Dropbox</li>\n<li>Windows Service</li>\n<li><a href=\"/2017/01/15/ci_use_jenkins/\">CI/CD 環境建置筆記(一) - 在 windows 安裝 Jenkins </a></li>\n</ul>\n<h2 id=\"問題\"><a href=\"#問題\" class=\"headerlink\" title=\"問題\"></a>問題</h2><p>在 windows 上安裝了Jenkins , 也建立了一個新的作業 ,<br>讓程式可以透過 Jenkins 執行自動化部署。<br>不過實務上仍有缺點，那就是只有這台機器可以執行部署 ,<br>最理想的狀況是擁有一個在雲端的 CI Server ,<br>隨時隨地想部署只需要能連上網 , 登入執行就好<br>這部份可以試試看 <code>Travis-CI</code>、<code>CircleCI</code>之類的服務 ;<br>不過對於只熟悉 Jenkins 的我來說 ,<br>我想了另一套解決辦法(旁門左道) ,<br>不過至少解決了我目前的需求 ,<br>在公司與家中隨時都能透過本機Jenkins Server 進行部署 ,<br>並且不用花時間同步設定值.<br>在花時間研究<code>Travis-CI</code>、<code>CircleCI</code>的部署方式之前 ,<br>算是一個折衷的方式 .</p>\n<h2 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h2><ol>\n<li>首先你要有 Dropbox </li>\n<li>下載 Windows 版的 Jenkins</li>\n<li>安裝在 Dropbox 資料夾內</li>\n<li>在另外一台電腦 , 進行相同的安裝</li>\n</ol>\n<p>想法很簡單 , 透過 Dropbox 與 Jenkins Service<br>在兩台電腦安裝 Jenkins<br>只要將 Jenkins Service 的啟動路徑<br>設定在 Dropbox 中 ,<br>就可以達成我們的目標 .<br><img src=\"https://i.imgur.com/DyrNMJD.jpg\" alt=\"\"></p>\n<h2 id=\"問題-1\"><a href=\"#問題-1\" class=\"headerlink\" title=\"問題\"></a>問題</h2><ol>\n<li>Windows 要如何修改 Jenkins Service 的啟動路徑 ?</li>\n</ol>\n<p><code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Jenkins</code></p>\n<p>修改路徑以符合你本機的檔案位置即可。</p>\n<p><img src=\"https://i.imgur.com/KGemCSe.jpg\" alt=\"\"></p>\n<p>(fin)</p>\n"},{"title":"怎麼建立一個網站？(二) - 簡單用github page 建立靜態網站","date":"2016-08-27T20:56:27.000Z","_content":"## 前置作業\n- 你要有一個github帳號\n\n## 建立github page\n如果不排斥看原文，可以直接[參考](https://pages.github.com/)  \n1. 建立一個repository,並且命名為`username.github.io`,這裡的username請使用你的Github帳號的username.  \n2. clone `username.github.io` 到你的本機上.\n        > git clone https://github.com/username/username.github.io\n3. 建立一個靜態網頁 `index.html` , 隨便打點什麼。  \n        <!DOCTYPE html PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n        <HTML>\n           <HEAD>\n              <TITLE>\n                 Hello world\n              </TITLE>\n           </HEAD>\n        <BODY>\n           <H1>Hello world</H1>\n           <P>This is my github page</P>\n        </BODY>\n        </HTML>\n4. commit之後,push 到github上\n        > git add --all\n        > git commit -m \"Initial commit\"\n        > git push -u origin master\n5. 瀏覽  http://username.github.io 即完成\n\n## 使用自訂的domain      \n\n1. 首先準備好一個domain ex: username.xyz\n2. 需要在根目錄底下，放入一個 CNAME file\n檔案的內容只需要你的domain即可  \nex:\n        blog.username.xyz  \n        username.xyz\n3. 在Name Servers (例如[cloudflare](https://www.cloudflare.com/))上設定`CNAME`到github page,   \n將`blog.username.xyz` 綁定到 `username.github.io`\nex:\n\n| TYPE | NAME | VALUE | TTL |\n|---|---|---|---|---|\n| CNAME  | * | username.xyz | auto |\n| CNAME  | blog | username.github.io | auto |\n更多請參考「[購買網域到設定DNS](http://blog.marsen.me/2016/08/21/setting_DNS_with_google/)」.\n\n## 透過Hexo部署\nHexo基本概念可以參考[官方中文文件](https://hexo.io/zh-tw/docs/index.html) .\n1. 重點在於`_config.yml`的設定\n        deploy:\n          type: git\n          repository: https://github.com/username/username.github.io\n          branche: master\n2. 執行`hexo d`進行部署，這個動作會將hexo 建立出來的靜態網站(html+css+javascript+圖片等…)部署到github page上。\n\n\n(fin)\n","source":"_posts/how_to_use_github_page.md","raw":"---\ntitle: 怎麼建立一個網站？(二) - 簡單用github page 建立靜態網站\ndate: 2016/08/28 4:56:27 \ntag:\n- github\n- 記錄\n---\n## 前置作業\n- 你要有一個github帳號\n\n## 建立github page\n如果不排斥看原文，可以直接[參考](https://pages.github.com/)  \n1. 建立一個repository,並且命名為`username.github.io`,這裡的username請使用你的Github帳號的username.  \n2. clone `username.github.io` 到你的本機上.\n        > git clone https://github.com/username/username.github.io\n3. 建立一個靜態網頁 `index.html` , 隨便打點什麼。  \n        <!DOCTYPE html PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n        <HTML>\n           <HEAD>\n              <TITLE>\n                 Hello world\n              </TITLE>\n           </HEAD>\n        <BODY>\n           <H1>Hello world</H1>\n           <P>This is my github page</P>\n        </BODY>\n        </HTML>\n4. commit之後,push 到github上\n        > git add --all\n        > git commit -m \"Initial commit\"\n        > git push -u origin master\n5. 瀏覽  http://username.github.io 即完成\n\n## 使用自訂的domain      \n\n1. 首先準備好一個domain ex: username.xyz\n2. 需要在根目錄底下，放入一個 CNAME file\n檔案的內容只需要你的domain即可  \nex:\n        blog.username.xyz  \n        username.xyz\n3. 在Name Servers (例如[cloudflare](https://www.cloudflare.com/))上設定`CNAME`到github page,   \n將`blog.username.xyz` 綁定到 `username.github.io`\nex:\n\n| TYPE | NAME | VALUE | TTL |\n|---|---|---|---|---|\n| CNAME  | * | username.xyz | auto |\n| CNAME  | blog | username.github.io | auto |\n更多請參考「[購買網域到設定DNS](http://blog.marsen.me/2016/08/21/setting_DNS_with_google/)」.\n\n## 透過Hexo部署\nHexo基本概念可以參考[官方中文文件](https://hexo.io/zh-tw/docs/index.html) .\n1. 重點在於`_config.yml`的設定\n        deploy:\n          type: git\n          repository: https://github.com/username/username.github.io\n          branche: master\n2. 執行`hexo d`進行部署，這個動作會將hexo 建立出來的靜態網站(html+css+javascript+圖片等…)部署到github page上。\n\n\n(fin)\n","slug":"how_to_use_github_page","published":1,"updated":"2016-12-04T17:03:32.179Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3oe60031lgopbsh1uplh","content":"<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ul>\n<li>你要有一個github帳號</li>\n</ul>\n<h2 id=\"建立github-page\"><a href=\"#建立github-page\" class=\"headerlink\" title=\"建立github page\"></a>建立github page</h2><p>如果不排斥看原文，可以直接<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">參考</a>  </p>\n<ol>\n<li>建立一個repository,並且命名為<code>username.github.io</code>,這裡的username請使用你的Github帳號的username.  </li>\n<li>clone <code>username.github.io</code> 到你的本機上.<pre><code>&gt; git clone https://github.com/username/username.github.io\n</code></pre></li>\n<li>建立一個靜態網頁 <code>index.html</code> , 隨便打點什麼。  <pre><code>&lt;!DOCTYPE html PUBLIC &quot;-//IETF//DTD HTML 2.0//EN&quot;&gt;\n&lt;HTML&gt;\n   &lt;HEAD&gt;\n      &lt;TITLE&gt;\n         Hello world\n      &lt;/TITLE&gt;\n   &lt;/HEAD&gt;\n&lt;BODY&gt;\n   &lt;H1&gt;Hello world&lt;/H1&gt;\n   &lt;P&gt;This is my github page&lt;/P&gt;\n&lt;/BODY&gt;\n&lt;/HTML&gt;\n</code></pre></li>\n<li>commit之後,push 到github上<pre><code>&gt; git add --all\n&gt; git commit -m &quot;Initial commit&quot;\n&gt; git push -u origin master\n</code></pre></li>\n<li>瀏覽  <a href=\"http://username.github.io\" target=\"_blank\" rel=\"external\">http://username.github.io</a> 即完成</li>\n</ol>\n<h2 id=\"使用自訂的domain\"><a href=\"#使用自訂的domain\" class=\"headerlink\" title=\"使用自訂的domain\"></a>使用自訂的domain</h2><ol>\n<li>首先準備好一個domain ex: username.xyz</li>\n<li>需要在根目錄底下，放入一個 CNAME file<br>檔案的內容只需要你的domain即可<br>ex:<pre><code>blog.username.xyz  \nusername.xyz\n</code></pre></li>\n<li>在Name Servers (例如<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a>)上設定<code>CNAME</code>到github page,<br>將<code>blog.username.xyz</code> 綁定到 <code>username.github.io</code><br>ex:</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>TYPE</th>\n<th>NAME</th>\n<th>VALUE</th>\n<th>TTL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CNAME</td>\n<td>*</td>\n<td>username.xyz</td>\n<td>auto</td>\n</tr>\n<tr>\n<td>CNAME</td>\n<td>blog</td>\n<td>username.github.io</td>\n<td>auto</td>\n</tr>\n</tbody>\n</table>\n<p>更多請參考「<a href=\"http://blog.marsen.me/2016/08/21/setting_DNS_with_google/\">購買網域到設定DNS</a>」.</p>\n<h2 id=\"透過Hexo部署\"><a href=\"#透過Hexo部署\" class=\"headerlink\" title=\"透過Hexo部署\"></a>透過Hexo部署</h2><p>Hexo基本概念可以參考<a href=\"https://hexo.io/zh-tw/docs/index.html\" target=\"_blank\" rel=\"external\">官方中文文件</a> .</p>\n<ol>\n<li>重點在於<code>_config.yml</code>的設定<pre><code>deploy:\n  type: git\n  repository: https://github.com/username/username.github.io\n  branche: master\n</code></pre></li>\n<li>執行<code>hexo d</code>進行部署，這個動作會將hexo 建立出來的靜態網站(html+css+javascript+圖片等…)部署到github page上。</li>\n</ol>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ul>\n<li>你要有一個github帳號</li>\n</ul>\n<h2 id=\"建立github-page\"><a href=\"#建立github-page\" class=\"headerlink\" title=\"建立github page\"></a>建立github page</h2><p>如果不排斥看原文，可以直接<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">參考</a>  </p>\n<ol>\n<li>建立一個repository,並且命名為<code>username.github.io</code>,這裡的username請使用你的Github帳號的username.  </li>\n<li>clone <code>username.github.io</code> 到你的本機上.<pre><code>&gt; git clone https://github.com/username/username.github.io\n</code></pre></li>\n<li>建立一個靜態網頁 <code>index.html</code> , 隨便打點什麼。  <pre><code>&lt;!DOCTYPE html PUBLIC &quot;-//IETF//DTD HTML 2.0//EN&quot;&gt;\n&lt;HTML&gt;\n   &lt;HEAD&gt;\n      &lt;TITLE&gt;\n         Hello world\n      &lt;/TITLE&gt;\n   &lt;/HEAD&gt;\n&lt;BODY&gt;\n   &lt;H1&gt;Hello world&lt;/H1&gt;\n   &lt;P&gt;This is my github page&lt;/P&gt;\n&lt;/BODY&gt;\n&lt;/HTML&gt;\n</code></pre></li>\n<li>commit之後,push 到github上<pre><code>&gt; git add --all\n&gt; git commit -m &quot;Initial commit&quot;\n&gt; git push -u origin master\n</code></pre></li>\n<li>瀏覽  <a href=\"http://username.github.io\" target=\"_blank\" rel=\"external\">http://username.github.io</a> 即完成</li>\n</ol>\n<h2 id=\"使用自訂的domain\"><a href=\"#使用自訂的domain\" class=\"headerlink\" title=\"使用自訂的domain\"></a>使用自訂的domain</h2><ol>\n<li>首先準備好一個domain ex: username.xyz</li>\n<li>需要在根目錄底下，放入一個 CNAME file<br>檔案的內容只需要你的domain即可<br>ex:<pre><code>blog.username.xyz  \nusername.xyz\n</code></pre></li>\n<li>在Name Servers (例如<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a>)上設定<code>CNAME</code>到github page,<br>將<code>blog.username.xyz</code> 綁定到 <code>username.github.io</code><br>ex:</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>TYPE</th>\n<th>NAME</th>\n<th>VALUE</th>\n<th>TTL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CNAME</td>\n<td>*</td>\n<td>username.xyz</td>\n<td>auto</td>\n</tr>\n<tr>\n<td>CNAME</td>\n<td>blog</td>\n<td>username.github.io</td>\n<td>auto</td>\n</tr>\n</tbody>\n</table>\n<p>更多請參考「<a href=\"http://blog.marsen.me/2016/08/21/setting_DNS_with_google/\">購買網域到設定DNS</a>」.</p>\n<h2 id=\"透過Hexo部署\"><a href=\"#透過Hexo部署\" class=\"headerlink\" title=\"透過Hexo部署\"></a>透過Hexo部署</h2><p>Hexo基本概念可以參考<a href=\"https://hexo.io/zh-tw/docs/index.html\" target=\"_blank\" rel=\"external\">官方中文文件</a> .</p>\n<ol>\n<li>重點在於<code>_config.yml</code>的設定<pre><code>deploy:\n  type: git\n  repository: https://github.com/username/username.github.io\n  branche: master\n</code></pre></li>\n<li>執行<code>hexo d</code>進行部署，這個動作會將hexo 建立出來的靜態網站(html+css+javascript+圖片等…)部署到github page上。</li>\n</ol>\n<p>(fin)</p>\n"},{"title":".NET PDB File 介紹","date":"2016-11-28T15:54:55.000Z","_content":"\n\n### PDB(Program Database Files )\n\n\n\n**.Net原始碼在Debug mode建置後，將產生.pdb檔案，  \n其中記錄了.dll、.exe與原始碼之間的對應關係。**\n\n\n\n#### MSDN 這樣說\n\n程式資料庫 (.pdb) 檔案也稱為符號檔，可將您在原始程式檔中為類別、  \n方法和其他程式碼建立的識別項對應至專案之編譯的可執行檔中使用的識別項。\n\n\n\n原文: \n\n>_A program database (.pdb) file, also called a symbol file,_   \n_maps the identifiers that you create in source files for classes,_  \n_methods, and other code to the identifiers that are used in the_   \n_compiled executables of your project._\n\n\n### PDB 記什麼\n\n- 原始碼的檔案名稱 (source code file name)\n- 變數與行號 (lines and the local variable names.)\n\n\n\n### 偵錯工具搜尋 .pdb 檔案的順序？\n\n1. DLL 或可執行檔內部指定的位置\n2. 可能和 DLL 或可執行檔存在相同資料夾中的 .pdb 檔案。\n3. 任何本機符號快取資料夾。\n4. 任何在像是 Microsoft 符號伺服器 (如果啟用) 等位置指定的網路、網際網路或本機符號伺服器和位置。\n\n\n\n### .pdb 檔案與.dll(或可執行檔)需要完全符合\n\n偵錯工具只會載入與可執行檔建置時所建立的 .pdb 檔案完全相同之可執行檔的 .pdb 檔案  \n*相同原始碼在不同機器建置的執行檔與PDB，偵錯工具將無法進行偵錯\n\n\n\n### 看看.pdb檔的內容\n\n1. 開啟 %ProgramFiles(x86)%\\Microsoft Visual Studio 14.0\\DIA SDK\\Samples\\DIA2Dump\\dia2dump.sln\n\n\n\n2. 執行以下命令 \n`Dia2Dump pdbfilepath >> dumpfileName.txt`\nex:\n`Dia2Dump C:\\myproj\\bin\\debug\\myproj.pdb >> myproj_dump.txt`\n\n\n\n3. 輸出的結果大致如下 \n\n\n\tFunction       : In MetaData, [00001F16][0001:00001F16], len = 000000ED, GetBookList\n\tFunction attribute:\n\tFunction info:\n\t\t\t\t \n\t\n\t//中略\n\t\n\tFunction: [0001F71A][0001:0001F71A] GetSalePage b_231\n\tFunction: [00001F16][0001:00001F16] GetBookList\n\tFunction: [0001F4F0][0001:0001F4F0] GetLayoutByAd b_0\n\t\n\t//中略\n\n\t** GetBookList\n\n\tline 46 at [00001F16][0001:00001F16], len = 0x1\tD:\\Repo\\Mark_Lin\\MYPROJ\\WebAPI\\Controllers\\BookController.cs\n\tline 47 at [00001F17][0001:00001F17], len = 0x6\n\tline 48 at [00001F1D][0001:00001F1D], len = 0x1C\t\t\t\t \n\n\n\n\n\n##### 參考\n- http://anferneehardaway.pixnet.net/blog/post/6273453\n- https://msdn.microsoft.com/zh-tw/library/ms241903(v=vs.100).aspx\n- http://www.wintellect.com/devcenter/jrobbins/pdb-files-what-every-developer-must-know\n- https://blogs.msdn.microsoft.com/jimgries/2007/07/06/why-does-visual-studio-require-debugger-symbol-files-to-exactly-match-the-binary-files-that-they-were-built-with/\n\n(fin)","source":"_posts/dotnet_pdb_file.md","raw":"---\ntitle: .NET PDB File 介紹\ndate: 2016/11/28 23:54:55\ntag:\n  - .Net Framework\n---\n\n\n### PDB(Program Database Files )\n\n\n\n**.Net原始碼在Debug mode建置後，將產生.pdb檔案，  \n其中記錄了.dll、.exe與原始碼之間的對應關係。**\n\n\n\n#### MSDN 這樣說\n\n程式資料庫 (.pdb) 檔案也稱為符號檔，可將您在原始程式檔中為類別、  \n方法和其他程式碼建立的識別項對應至專案之編譯的可執行檔中使用的識別項。\n\n\n\n原文: \n\n>_A program database (.pdb) file, also called a symbol file,_   \n_maps the identifiers that you create in source files for classes,_  \n_methods, and other code to the identifiers that are used in the_   \n_compiled executables of your project._\n\n\n### PDB 記什麼\n\n- 原始碼的檔案名稱 (source code file name)\n- 變數與行號 (lines and the local variable names.)\n\n\n\n### 偵錯工具搜尋 .pdb 檔案的順序？\n\n1. DLL 或可執行檔內部指定的位置\n2. 可能和 DLL 或可執行檔存在相同資料夾中的 .pdb 檔案。\n3. 任何本機符號快取資料夾。\n4. 任何在像是 Microsoft 符號伺服器 (如果啟用) 等位置指定的網路、網際網路或本機符號伺服器和位置。\n\n\n\n### .pdb 檔案與.dll(或可執行檔)需要完全符合\n\n偵錯工具只會載入與可執行檔建置時所建立的 .pdb 檔案完全相同之可執行檔的 .pdb 檔案  \n*相同原始碼在不同機器建置的執行檔與PDB，偵錯工具將無法進行偵錯\n\n\n\n### 看看.pdb檔的內容\n\n1. 開啟 %ProgramFiles(x86)%\\Microsoft Visual Studio 14.0\\DIA SDK\\Samples\\DIA2Dump\\dia2dump.sln\n\n\n\n2. 執行以下命令 \n`Dia2Dump pdbfilepath >> dumpfileName.txt`\nex:\n`Dia2Dump C:\\myproj\\bin\\debug\\myproj.pdb >> myproj_dump.txt`\n\n\n\n3. 輸出的結果大致如下 \n\n\n\tFunction       : In MetaData, [00001F16][0001:00001F16], len = 000000ED, GetBookList\n\tFunction attribute:\n\tFunction info:\n\t\t\t\t \n\t\n\t//中略\n\t\n\tFunction: [0001F71A][0001:0001F71A] GetSalePage b_231\n\tFunction: [00001F16][0001:00001F16] GetBookList\n\tFunction: [0001F4F0][0001:0001F4F0] GetLayoutByAd b_0\n\t\n\t//中略\n\n\t** GetBookList\n\n\tline 46 at [00001F16][0001:00001F16], len = 0x1\tD:\\Repo\\Mark_Lin\\MYPROJ\\WebAPI\\Controllers\\BookController.cs\n\tline 47 at [00001F17][0001:00001F17], len = 0x6\n\tline 48 at [00001F1D][0001:00001F1D], len = 0x1C\t\t\t\t \n\n\n\n\n\n##### 參考\n- http://anferneehardaway.pixnet.net/blog/post/6273453\n- https://msdn.microsoft.com/zh-tw/library/ms241903(v=vs.100).aspx\n- http://www.wintellect.com/devcenter/jrobbins/pdb-files-what-every-developer-must-know\n- https://blogs.msdn.microsoft.com/jimgries/2007/07/06/why-does-visual-studio-require-debugger-symbol-files-to-exactly-match-the-binary-files-that-they-were-built-with/\n\n(fin)","slug":"dotnet_pdb_file","published":1,"updated":"2016-12-04T17:00:48.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3oe70032lgoprvocgch9","content":"<h3 id=\"PDB-Program-Database-Files\"><a href=\"#PDB-Program-Database-Files\" class=\"headerlink\" title=\"PDB(Program Database Files )\"></a>PDB(Program Database Files )</h3><p><strong>.Net原始碼在Debug mode建置後，將產生.pdb檔案，<br>其中記錄了.dll、.exe與原始碼之間的對應關係。</strong></p>\n<h4 id=\"MSDN-這樣說\"><a href=\"#MSDN-這樣說\" class=\"headerlink\" title=\"MSDN 這樣說\"></a>MSDN 這樣說</h4><p>程式資料庫 (.pdb) 檔案也稱為符號檔，可將您在原始程式檔中為類別、<br>方法和其他程式碼建立的識別項對應至專案之編譯的可執行檔中使用的識別項。</p>\n<p>原文: </p>\n<blockquote>\n<p><em>A program database (.pdb) file, also called a symbol file,</em><br><em>maps the identifiers that you create in source files for classes,</em><br><em>methods, and other code to the identifiers that are used in the</em><br><em>compiled executables of your project.</em></p>\n</blockquote>\n<h3 id=\"PDB-記什麼\"><a href=\"#PDB-記什麼\" class=\"headerlink\" title=\"PDB 記什麼\"></a>PDB 記什麼</h3><ul>\n<li>原始碼的檔案名稱 (source code file name)</li>\n<li>變數與行號 (lines and the local variable names.)</li>\n</ul>\n<h3 id=\"偵錯工具搜尋-pdb-檔案的順序？\"><a href=\"#偵錯工具搜尋-pdb-檔案的順序？\" class=\"headerlink\" title=\"偵錯工具搜尋 .pdb 檔案的順序？\"></a>偵錯工具搜尋 .pdb 檔案的順序？</h3><ol>\n<li>DLL 或可執行檔內部指定的位置</li>\n<li>可能和 DLL 或可執行檔存在相同資料夾中的 .pdb 檔案。</li>\n<li>任何本機符號快取資料夾。</li>\n<li>任何在像是 Microsoft 符號伺服器 (如果啟用) 等位置指定的網路、網際網路或本機符號伺服器和位置。</li>\n</ol>\n<h3 id=\"pdb-檔案與-dll-或可執行檔-需要完全符合\"><a href=\"#pdb-檔案與-dll-或可執行檔-需要完全符合\" class=\"headerlink\" title=\".pdb 檔案與.dll(或可執行檔)需要完全符合\"></a>.pdb 檔案與.dll(或可執行檔)需要完全符合</h3><p>偵錯工具只會載入與可執行檔建置時所建立的 .pdb 檔案完全相同之可執行檔的 .pdb 檔案<br>*相同原始碼在不同機器建置的執行檔與PDB，偵錯工具將無法進行偵錯</p>\n<h3 id=\"看看-pdb檔的內容\"><a href=\"#看看-pdb檔的內容\" class=\"headerlink\" title=\"看看.pdb檔的內容\"></a>看看.pdb檔的內容</h3><ol>\n<li>開啟 %ProgramFiles(x86)%\\Microsoft Visual Studio 14.0\\DIA SDK\\Samples\\DIA2Dump\\dia2dump.sln</li>\n</ol>\n<ol>\n<li>執行以下命令<br><code>Dia2Dump pdbfilepath &gt;&gt; dumpfileName.txt</code><br>ex:<br><code>Dia2Dump C:\\myproj\\bin\\debug\\myproj.pdb &gt;&gt; myproj_dump.txt</code></li>\n</ol>\n<ol>\n<li>輸出的結果大致如下 </li>\n</ol>\n<pre><code>Function       : In MetaData, [00001F16][0001:00001F16], len = 000000ED, GetBookList\nFunction attribute:\nFunction info:\n\n\n//中略\n\nFunction: [0001F71A][0001:0001F71A] GetSalePage b_231\nFunction: [00001F16][0001:00001F16] GetBookList\nFunction: [0001F4F0][0001:0001F4F0] GetLayoutByAd b_0\n\n//中略\n\n** GetBookList\n\nline 46 at [00001F16][0001:00001F16], len = 0x1    D:\\Repo\\Mark_Lin\\MYPROJ\\WebAPI\\Controllers\\BookController.cs\nline 47 at [00001F17][0001:00001F17], len = 0x6\nline 48 at [00001F1D][0001:00001F1D], len = 0x1C                 \n</code></pre><h5 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h5><ul>\n<li><a href=\"http://anferneehardaway.pixnet.net/blog/post/6273453\" target=\"_blank\" rel=\"external\">http://anferneehardaway.pixnet.net/blog/post/6273453</a></li>\n<li><a href=\"https://msdn.microsoft.com/zh-tw/library/ms241903(v=vs.100).aspx\" target=\"_blank\" rel=\"external\">https://msdn.microsoft.com/zh-tw/library/ms241903(v=vs.100).aspx</a></li>\n<li><a href=\"http://www.wintellect.com/devcenter/jrobbins/pdb-files-what-every-developer-must-know\" target=\"_blank\" rel=\"external\">http://www.wintellect.com/devcenter/jrobbins/pdb-files-what-every-developer-must-know</a></li>\n<li><a href=\"https://blogs.msdn.microsoft.com/jimgries/2007/07/06/why-does-visual-studio-require-debugger-symbol-files-to-exactly-match-the-binary-files-that-they-were-built-with/\" target=\"_blank\" rel=\"external\">https://blogs.msdn.microsoft.com/jimgries/2007/07/06/why-does-visual-studio-require-debugger-symbol-files-to-exactly-match-the-binary-files-that-they-were-built-with/</a></li>\n</ul>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"PDB-Program-Database-Files\"><a href=\"#PDB-Program-Database-Files\" class=\"headerlink\" title=\"PDB(Program Database Files )\"></a>PDB(Program Database Files )</h3><p><strong>.Net原始碼在Debug mode建置後，將產生.pdb檔案，<br>其中記錄了.dll、.exe與原始碼之間的對應關係。</strong></p>\n<h4 id=\"MSDN-這樣說\"><a href=\"#MSDN-這樣說\" class=\"headerlink\" title=\"MSDN 這樣說\"></a>MSDN 這樣說</h4><p>程式資料庫 (.pdb) 檔案也稱為符號檔，可將您在原始程式檔中為類別、<br>方法和其他程式碼建立的識別項對應至專案之編譯的可執行檔中使用的識別項。</p>\n<p>原文: </p>\n<blockquote>\n<p><em>A program database (.pdb) file, also called a symbol file,</em><br><em>maps the identifiers that you create in source files for classes,</em><br><em>methods, and other code to the identifiers that are used in the</em><br><em>compiled executables of your project.</em></p>\n</blockquote>\n<h3 id=\"PDB-記什麼\"><a href=\"#PDB-記什麼\" class=\"headerlink\" title=\"PDB 記什麼\"></a>PDB 記什麼</h3><ul>\n<li>原始碼的檔案名稱 (source code file name)</li>\n<li>變數與行號 (lines and the local variable names.)</li>\n</ul>\n<h3 id=\"偵錯工具搜尋-pdb-檔案的順序？\"><a href=\"#偵錯工具搜尋-pdb-檔案的順序？\" class=\"headerlink\" title=\"偵錯工具搜尋 .pdb 檔案的順序？\"></a>偵錯工具搜尋 .pdb 檔案的順序？</h3><ol>\n<li>DLL 或可執行檔內部指定的位置</li>\n<li>可能和 DLL 或可執行檔存在相同資料夾中的 .pdb 檔案。</li>\n<li>任何本機符號快取資料夾。</li>\n<li>任何在像是 Microsoft 符號伺服器 (如果啟用) 等位置指定的網路、網際網路或本機符號伺服器和位置。</li>\n</ol>\n<h3 id=\"pdb-檔案與-dll-或可執行檔-需要完全符合\"><a href=\"#pdb-檔案與-dll-或可執行檔-需要完全符合\" class=\"headerlink\" title=\".pdb 檔案與.dll(或可執行檔)需要完全符合\"></a>.pdb 檔案與.dll(或可執行檔)需要完全符合</h3><p>偵錯工具只會載入與可執行檔建置時所建立的 .pdb 檔案完全相同之可執行檔的 .pdb 檔案<br>*相同原始碼在不同機器建置的執行檔與PDB，偵錯工具將無法進行偵錯</p>\n<h3 id=\"看看-pdb檔的內容\"><a href=\"#看看-pdb檔的內容\" class=\"headerlink\" title=\"看看.pdb檔的內容\"></a>看看.pdb檔的內容</h3><ol>\n<li>開啟 %ProgramFiles(x86)%\\Microsoft Visual Studio 14.0\\DIA SDK\\Samples\\DIA2Dump\\dia2dump.sln</li>\n</ol>\n<ol>\n<li>執行以下命令<br><code>Dia2Dump pdbfilepath &gt;&gt; dumpfileName.txt</code><br>ex:<br><code>Dia2Dump C:\\myproj\\bin\\debug\\myproj.pdb &gt;&gt; myproj_dump.txt</code></li>\n</ol>\n<ol>\n<li>輸出的結果大致如下 </li>\n</ol>\n<pre><code>Function       : In MetaData, [00001F16][0001:00001F16], len = 000000ED, GetBookList\nFunction attribute:\nFunction info:\n\n\n//中略\n\nFunction: [0001F71A][0001:0001F71A] GetSalePage b_231\nFunction: [00001F16][0001:00001F16] GetBookList\nFunction: [0001F4F0][0001:0001F4F0] GetLayoutByAd b_0\n\n//中略\n\n** GetBookList\n\nline 46 at [00001F16][0001:00001F16], len = 0x1    D:\\Repo\\Mark_Lin\\MYPROJ\\WebAPI\\Controllers\\BookController.cs\nline 47 at [00001F17][0001:00001F17], len = 0x6\nline 48 at [00001F1D][0001:00001F1D], len = 0x1C                 \n</code></pre><h5 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h5><ul>\n<li><a href=\"http://anferneehardaway.pixnet.net/blog/post/6273453\" target=\"_blank\" rel=\"external\">http://anferneehardaway.pixnet.net/blog/post/6273453</a></li>\n<li><a href=\"https://msdn.microsoft.com/zh-tw/library/ms241903(v=vs.100).aspx\" target=\"_blank\" rel=\"external\">https://msdn.microsoft.com/zh-tw/library/ms241903(v=vs.100).aspx</a></li>\n<li><a href=\"http://www.wintellect.com/devcenter/jrobbins/pdb-files-what-every-developer-must-know\" target=\"_blank\" rel=\"external\">http://www.wintellect.com/devcenter/jrobbins/pdb-files-what-every-developer-must-know</a></li>\n<li><a href=\"https://blogs.msdn.microsoft.com/jimgries/2007/07/06/why-does-visual-studio-require-debugger-symbol-files-to-exactly-match-the-binary-files-that-they-were-built-with/\" target=\"_blank\" rel=\"external\">https://blogs.msdn.microsoft.com/jimgries/2007/07/06/why-does-visual-studio-require-debugger-symbol-files-to-exactly-match-the-binary-files-that-they-were-built-with/</a></li>\n</ul>\n<p>(fin)</p>\n"},{"title":"Hello World","date":"2016-08-13T03:32:15.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016/08/13 11:32:15 \n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2016-12-04T17:02:05.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3oec0034lgop7xpm4bvh","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"怎麼建立一個網站？(一) - 購買網域到設定DNS","date":"2016-08-21T14:12:53.000Z","_content":"\n## 前置作業\n1. 準備好你的google帳號。\n2. 可以連到美國的VPN。[google domain beta](https://atom.io/packages/atom-beautify) 台灣尚未開放\n3. 準備一張信用卡，狠狠的刷下去(挑對domain其實很便宜啦)\n4. 你的網站，什麼語言都可以，靜態的網頁也可以。  \n  *這裡我事先準備好了兩個網站,  \n  分別是用[github page](https://pages.github.com/) 與 [nodejs](https://nodejs.org) 的 [express](http://expressjs.com/),實作有機會再作記錄。\n\n\n## 設定domain\n1. github page 所建立的網站,會提供一組domain給你  \nex:`mydomain.github.io`\n2. openshift 建立的網站,一樣會提供一組domain給你  \nex:`mydomain.rhcloud.com`\n3. google domain 本身有提供 Name servers , 但是由於type`A`的domian,  \n必須指定公用ip(家中有裝hinet ADSL可以申請一組);但實際上我的兩個網站,並不需要我準備實體ip,  \n只需要使用 type `CNAME` 將我的subdomain指向原本服務的domain即可。  \nex:  \n  - blog.mydomain.me → mydomain.github.io\n  - www.mydomain.me → mydomain.rhcloud.com\n4. github page 要注意的事情，  \n你需要在你的github page 的repo root 加入一個名叫`CNAME`的檔案,\n檔案的內容很簡單, 只需要你的domain即可  \nex:\n        blog.mydomain.me  \n        mydomain.me\n\n## Bare CNAME\n大多數的時候, `CNAME` 的設定就夠了;不過對於我來說,  \n我會希望可以直接使用我的頂級domain,畢竟這樣網址可以更短一些,  \n`mydomain.me` 比 `www.mydomain.me` 更有感覺。\n\n這裡受限於google 的 Name servers , 頂級domain 必為Type`A`須綁定ip  \n這裡我們可以使用一個免費的服務[cloudflare](https://www.cloudflare.com/),來達成目的\n1. 註冊[cloudflare](https://www.cloudflare.com/)\n2. 登入後[add site](https://www.cloudflare.com/a/add-site),輸入你註冊的domain\nex:`mydomain`\n3. [cloudflare](https://www.cloudflare.com/) 會提供你至少兩組Name servers  \nex:  \n`carter.ns.cloudflare.com`  \n`tina.ns.cloudflare.com`\n4. 請先登入[google domain beta](https://atom.io/packages/atom-beautify)設定Name servers到[cloudflare](https://www.cloudflare.com/)\n5. 請依以下步驟設定\n  - \\*  → mydomain.me\n  - blog.mydomain.me → mydomain.github.io\n  - www.mydomain.me → mydomain.rhcloud.com\n6. 等待約數分鐘就ok啦\n\n## 結語\n前前後後查資料弄了一個禮拜，但是實際上設定大概1~2小時就搞定了。  \n對domain跟ip的相對關係與實務結合後更有體會了。\n\n歡迎指教討論。  \n(fin)\n","source":"_posts/setting_DNS_with_google.md","raw":"---\ntitle: 怎麼建立一個網站？(一) - 購買網域到設定DNS\ndate: 2016/08/21 22:12:53 \ntag:\n- website\n- domain\n- 記錄\n- DNS\n---\n\n## 前置作業\n1. 準備好你的google帳號。\n2. 可以連到美國的VPN。[google domain beta](https://atom.io/packages/atom-beautify) 台灣尚未開放\n3. 準備一張信用卡，狠狠的刷下去(挑對domain其實很便宜啦)\n4. 你的網站，什麼語言都可以，靜態的網頁也可以。  \n  *這裡我事先準備好了兩個網站,  \n  分別是用[github page](https://pages.github.com/) 與 [nodejs](https://nodejs.org) 的 [express](http://expressjs.com/),實作有機會再作記錄。\n\n\n## 設定domain\n1. github page 所建立的網站,會提供一組domain給你  \nex:`mydomain.github.io`\n2. openshift 建立的網站,一樣會提供一組domain給你  \nex:`mydomain.rhcloud.com`\n3. google domain 本身有提供 Name servers , 但是由於type`A`的domian,  \n必須指定公用ip(家中有裝hinet ADSL可以申請一組);但實際上我的兩個網站,並不需要我準備實體ip,  \n只需要使用 type `CNAME` 將我的subdomain指向原本服務的domain即可。  \nex:  \n  - blog.mydomain.me → mydomain.github.io\n  - www.mydomain.me → mydomain.rhcloud.com\n4. github page 要注意的事情，  \n你需要在你的github page 的repo root 加入一個名叫`CNAME`的檔案,\n檔案的內容很簡單, 只需要你的domain即可  \nex:\n        blog.mydomain.me  \n        mydomain.me\n\n## Bare CNAME\n大多數的時候, `CNAME` 的設定就夠了;不過對於我來說,  \n我會希望可以直接使用我的頂級domain,畢竟這樣網址可以更短一些,  \n`mydomain.me` 比 `www.mydomain.me` 更有感覺。\n\n這裡受限於google 的 Name servers , 頂級domain 必為Type`A`須綁定ip  \n這裡我們可以使用一個免費的服務[cloudflare](https://www.cloudflare.com/),來達成目的\n1. 註冊[cloudflare](https://www.cloudflare.com/)\n2. 登入後[add site](https://www.cloudflare.com/a/add-site),輸入你註冊的domain\nex:`mydomain`\n3. [cloudflare](https://www.cloudflare.com/) 會提供你至少兩組Name servers  \nex:  \n`carter.ns.cloudflare.com`  \n`tina.ns.cloudflare.com`\n4. 請先登入[google domain beta](https://atom.io/packages/atom-beautify)設定Name servers到[cloudflare](https://www.cloudflare.com/)\n5. 請依以下步驟設定\n  - \\*  → mydomain.me\n  - blog.mydomain.me → mydomain.github.io\n  - www.mydomain.me → mydomain.rhcloud.com\n6. 等待約數分鐘就ok啦\n\n## 結語\n前前後後查資料弄了一個禮拜，但是實際上設定大概1~2小時就搞定了。  \n對domain跟ip的相對關係與實務結合後更有體會了。\n\n歡迎指教討論。  \n(fin)\n","slug":"setting_DNS_with_google","published":1,"updated":"2016-12-04T17:07:44.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3oee0036lgop8gh8htry","content":"<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ol>\n<li>準備好你的google帳號。</li>\n<li>可以連到美國的VPN。<a href=\"https://atom.io/packages/atom-beautify\" target=\"_blank\" rel=\"external\">google domain beta</a> 台灣尚未開放</li>\n<li>準備一張信用卡，狠狠的刷下去(挑對domain其實很便宜啦)</li>\n<li>你的網站，什麼語言都可以，靜態的網頁也可以。<br>*這裡我事先準備好了兩個網站,<br>分別是用<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">github page</a> 與 <a href=\"https://nodejs.org\" target=\"_blank\" rel=\"external\">nodejs</a> 的 <a href=\"http://expressjs.com/\" target=\"_blank\" rel=\"external\">express</a>,實作有機會再作記錄。</li>\n</ol>\n<h2 id=\"設定domain\"><a href=\"#設定domain\" class=\"headerlink\" title=\"設定domain\"></a>設定domain</h2><ol>\n<li>github page 所建立的網站,會提供一組domain給你<br>ex:<code>mydomain.github.io</code></li>\n<li>openshift 建立的網站,一樣會提供一組domain給你<br>ex:<code>mydomain.rhcloud.com</code></li>\n<li>google domain 本身有提供 Name servers , 但是由於type<code>A</code>的domian,<br>必須指定公用ip(家中有裝hinet ADSL可以申請一組);但實際上我的兩個網站,並不需要我準備實體ip,<br>只需要使用 type <code>CNAME</code> 將我的subdomain指向原本服務的domain即可。<br>ex:  <ul>\n<li>blog.mydomain.me → mydomain.github.io</li>\n<li>www.mydomain.me → mydomain.rhcloud.com</li>\n</ul>\n</li>\n<li>github page 要注意的事情，<br>你需要在你的github page 的repo root 加入一個名叫<code>CNAME</code>的檔案,<br>檔案的內容很簡單, 只需要你的domain即可<br>ex:<pre><code>blog.mydomain.me  \nmydomain.me\n</code></pre></li>\n</ol>\n<h2 id=\"Bare-CNAME\"><a href=\"#Bare-CNAME\" class=\"headerlink\" title=\"Bare CNAME\"></a>Bare CNAME</h2><p>大多數的時候, <code>CNAME</code> 的設定就夠了;不過對於我來說,<br>我會希望可以直接使用我的頂級domain,畢竟這樣網址可以更短一些,<br><code>mydomain.me</code> 比 <code>www.mydomain.me</code> 更有感覺。</p>\n<p>這裡受限於google 的 Name servers , 頂級domain 必為Type<code>A</code>須綁定ip<br>這裡我們可以使用一個免費的服務<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a>,來達成目的</p>\n<ol>\n<li>註冊<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a></li>\n<li>登入後<a href=\"https://www.cloudflare.com/a/add-site\" target=\"_blank\" rel=\"external\">add site</a>,輸入你註冊的domain<br>ex:<code>mydomain</code></li>\n<li><a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a> 會提供你至少兩組Name servers<br>ex:<br><code>carter.ns.cloudflare.com</code><br><code>tina.ns.cloudflare.com</code></li>\n<li>請先登入<a href=\"https://atom.io/packages/atom-beautify\" target=\"_blank\" rel=\"external\">google domain beta</a>設定Name servers到<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a></li>\n<li>請依以下步驟設定<ul>\n<li>*  → mydomain.me</li>\n<li>blog.mydomain.me → mydomain.github.io</li>\n<li>www.mydomain.me → mydomain.rhcloud.com</li>\n</ul>\n</li>\n<li>等待約數分鐘就ok啦</li>\n</ol>\n<h2 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h2><p>前前後後查資料弄了一個禮拜，但是實際上設定大概1~2小時就搞定了。<br>對domain跟ip的相對關係與實務結合後更有體會了。</p>\n<p>歡迎指教討論。<br>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ol>\n<li>準備好你的google帳號。</li>\n<li>可以連到美國的VPN。<a href=\"https://atom.io/packages/atom-beautify\" target=\"_blank\" rel=\"external\">google domain beta</a> 台灣尚未開放</li>\n<li>準備一張信用卡，狠狠的刷下去(挑對domain其實很便宜啦)</li>\n<li>你的網站，什麼語言都可以，靜態的網頁也可以。<br>*這裡我事先準備好了兩個網站,<br>分別是用<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">github page</a> 與 <a href=\"https://nodejs.org\" target=\"_blank\" rel=\"external\">nodejs</a> 的 <a href=\"http://expressjs.com/\" target=\"_blank\" rel=\"external\">express</a>,實作有機會再作記錄。</li>\n</ol>\n<h2 id=\"設定domain\"><a href=\"#設定domain\" class=\"headerlink\" title=\"設定domain\"></a>設定domain</h2><ol>\n<li>github page 所建立的網站,會提供一組domain給你<br>ex:<code>mydomain.github.io</code></li>\n<li>openshift 建立的網站,一樣會提供一組domain給你<br>ex:<code>mydomain.rhcloud.com</code></li>\n<li>google domain 本身有提供 Name servers , 但是由於type<code>A</code>的domian,<br>必須指定公用ip(家中有裝hinet ADSL可以申請一組);但實際上我的兩個網站,並不需要我準備實體ip,<br>只需要使用 type <code>CNAME</code> 將我的subdomain指向原本服務的domain即可。<br>ex:  <ul>\n<li>blog.mydomain.me → mydomain.github.io</li>\n<li>www.mydomain.me → mydomain.rhcloud.com</li>\n</ul>\n</li>\n<li>github page 要注意的事情，<br>你需要在你的github page 的repo root 加入一個名叫<code>CNAME</code>的檔案,<br>檔案的內容很簡單, 只需要你的domain即可<br>ex:<pre><code>blog.mydomain.me  \nmydomain.me\n</code></pre></li>\n</ol>\n<h2 id=\"Bare-CNAME\"><a href=\"#Bare-CNAME\" class=\"headerlink\" title=\"Bare CNAME\"></a>Bare CNAME</h2><p>大多數的時候, <code>CNAME</code> 的設定就夠了;不過對於我來說,<br>我會希望可以直接使用我的頂級domain,畢竟這樣網址可以更短一些,<br><code>mydomain.me</code> 比 <code>www.mydomain.me</code> 更有感覺。</p>\n<p>這裡受限於google 的 Name servers , 頂級domain 必為Type<code>A</code>須綁定ip<br>這裡我們可以使用一個免費的服務<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a>,來達成目的</p>\n<ol>\n<li>註冊<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a></li>\n<li>登入後<a href=\"https://www.cloudflare.com/a/add-site\" target=\"_blank\" rel=\"external\">add site</a>,輸入你註冊的domain<br>ex:<code>mydomain</code></li>\n<li><a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a> 會提供你至少兩組Name servers<br>ex:<br><code>carter.ns.cloudflare.com</code><br><code>tina.ns.cloudflare.com</code></li>\n<li>請先登入<a href=\"https://atom.io/packages/atom-beautify\" target=\"_blank\" rel=\"external\">google domain beta</a>設定Name servers到<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a></li>\n<li>請依以下步驟設定<ul>\n<li>*  → mydomain.me</li>\n<li>blog.mydomain.me → mydomain.github.io</li>\n<li>www.mydomain.me → mydomain.rhcloud.com</li>\n</ul>\n</li>\n<li>等待約數分鐘就ok啦</li>\n</ol>\n<h2 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h2><p>前前後後查資料弄了一個禮拜，但是實際上設定大概1~2小時就搞定了。<br>對domain跟ip的相對關係與實務結合後更有體會了。</p>\n<p>歡迎指教討論。<br>(fin)</p>\n"},{"title":"怎麼建立一個網站？(三) - 簡單讓網站升級使用HTTP/2","date":"2016-09-03T17:12:15.000Z","_content":"## 應該知道的事\n- HTTP/1.1是目前被應用得最廣泛的通訊協定，也可以說是最成功的一個\n  - HTTP/1.1 基於TCP，需要三方交握。\n  - HTTP/1.1本身存在得需多問題，安全性、效率等…。\n- HTTP/2 可以有效改善HTTP/1.1的缺點，而且可以向下相容\n  - 主流的瀏覽器都開始支援了。  \n  - 只要設定好Web Server，Client 端看使用的[瀏覽器支不支援](http://caniuse.com/#feat=http2)。\n- 一流公司制定標準，二流作品牌，三流賣技術，四流作產品\n  - HTTP/2 是源自Google的SPDY。\n  - Google下一代 QUIC推動中。\n- HTTP/2 並不強制加密(HTTPS)\n  - 在主流瀏覽器為了向下相容，保留了80 port的HTTP/1.1通訊協定，用443 port 實作HTTP/2。\n  - 所以還是要走HTTPS，所以需要安全性憑証。\n  - 安全性憑証要錢(現在也有免費的)。\n  - [cloudflare](https://www.cloudflare.com/)提供免費的安全性憑証。\n\n## 前置作業\n1. 你要有[cloudflare](https://www.cloudflare.com/)帳號。\n2. 看過我之網站的設定，簡單說就是一個github page 與 透過OpenShift 這個 PaaS服務建立的網站。\n    - [怎麼建立一個網站？(一)](https://blog.marsen.me/2016/08/21/setting_DNS_with_google/)\n    - [怎麼建立一個網站？(二)](https://blog.marsen.me/2016/08/28/how_to_use_github_page/)\n\n## 配置\n1. [cloudflare](https://www.cloudflare.com/) 設定DNS，在指定的domain下，設定為「DNS and HTTP Proxy(CDN)」。\n![設定為「DNS and HTTP Proxy(CDN)」](/images/090516_021242_AM.jpg)\n2. 設定Page-Rules，這個是為了開啟SSL\n    1. 設定`SSL`為`Flexible`,輸入`*.username.com/*`。  \n這個時候你就可以瀏覽`https://blog.username.com/`,但同時也可以瀏覽`http://blog.username.com/` 。  \n我希望HTTP能自動跳轉HTTPS，這部份如果是Node建立的網站，我可以用程式作轉導，  \n但是如果是github page建立網站，就要再仰賴 [cloudflare](https://www.cloudflare.com/) 了。\n3. 設定Page-Rules，這個是為了開啟SSL\n    1. 設定`ALWAYS USE HTTPS`,輸入`http://*.username.com/*`。  \n![設定為「DNS and HTTP Proxy(CDN)」](/images/090516_023252_AM.jpg)\n\n設定完大致如下，順利的話幾分鐘就生效了。  \n![](/images/090516_023554_AM.jpg)\n\n這時候瀏覽`http://blog.username.com/`就會轉導到`https://blog.username.com/`了 。\n\n## 檢驗\n使用support HTTP/2的瀏覽器，瀏覽網頁，觀察其protocol 。\n![](/images/090516_024550_AM.jpg)\n\n(fin)\n\n## 參考\n- [了解 HTTP/2 的特色與 HTTP/1.1 的差異](https://simular.co/knowledge/site-build/68-about-http2-and-http11.html)\n- [你的網站升級到 HTTP/2 了嗎？](https://blog.alphacamp.co/2016/07/12/http2/)\n- [為什麼我們需要HTTP/2？](http://www.ithome.com.tw/voice/94371)\n- [HTTP/2登場，邁向新的紀元](http://www.ithome.com.tw/voice/94520)\n- [Google：將推動QUIC成為網路標準](http://www.ithome.com.tw/news/95353)\n","source":"_posts/http2 by cloudflare.md","raw":"---\ntitle: 怎麼建立一個網站？(三) - 簡單讓網站升級使用HTTP/2\ndate: 2016/09/04 01:12:15 \ntag:\n  - HTTP/1.1\n  - HTTP/2\n  - TCP\n---\n## 應該知道的事\n- HTTP/1.1是目前被應用得最廣泛的通訊協定，也可以說是最成功的一個\n  - HTTP/1.1 基於TCP，需要三方交握。\n  - HTTP/1.1本身存在得需多問題，安全性、效率等…。\n- HTTP/2 可以有效改善HTTP/1.1的缺點，而且可以向下相容\n  - 主流的瀏覽器都開始支援了。  \n  - 只要設定好Web Server，Client 端看使用的[瀏覽器支不支援](http://caniuse.com/#feat=http2)。\n- 一流公司制定標準，二流作品牌，三流賣技術，四流作產品\n  - HTTP/2 是源自Google的SPDY。\n  - Google下一代 QUIC推動中。\n- HTTP/2 並不強制加密(HTTPS)\n  - 在主流瀏覽器為了向下相容，保留了80 port的HTTP/1.1通訊協定，用443 port 實作HTTP/2。\n  - 所以還是要走HTTPS，所以需要安全性憑証。\n  - 安全性憑証要錢(現在也有免費的)。\n  - [cloudflare](https://www.cloudflare.com/)提供免費的安全性憑証。\n\n## 前置作業\n1. 你要有[cloudflare](https://www.cloudflare.com/)帳號。\n2. 看過我之網站的設定，簡單說就是一個github page 與 透過OpenShift 這個 PaaS服務建立的網站。\n    - [怎麼建立一個網站？(一)](https://blog.marsen.me/2016/08/21/setting_DNS_with_google/)\n    - [怎麼建立一個網站？(二)](https://blog.marsen.me/2016/08/28/how_to_use_github_page/)\n\n## 配置\n1. [cloudflare](https://www.cloudflare.com/) 設定DNS，在指定的domain下，設定為「DNS and HTTP Proxy(CDN)」。\n![設定為「DNS and HTTP Proxy(CDN)」](/images/090516_021242_AM.jpg)\n2. 設定Page-Rules，這個是為了開啟SSL\n    1. 設定`SSL`為`Flexible`,輸入`*.username.com/*`。  \n這個時候你就可以瀏覽`https://blog.username.com/`,但同時也可以瀏覽`http://blog.username.com/` 。  \n我希望HTTP能自動跳轉HTTPS，這部份如果是Node建立的網站，我可以用程式作轉導，  \n但是如果是github page建立網站，就要再仰賴 [cloudflare](https://www.cloudflare.com/) 了。\n3. 設定Page-Rules，這個是為了開啟SSL\n    1. 設定`ALWAYS USE HTTPS`,輸入`http://*.username.com/*`。  \n![設定為「DNS and HTTP Proxy(CDN)」](/images/090516_023252_AM.jpg)\n\n設定完大致如下，順利的話幾分鐘就生效了。  \n![](/images/090516_023554_AM.jpg)\n\n這時候瀏覽`http://blog.username.com/`就會轉導到`https://blog.username.com/`了 。\n\n## 檢驗\n使用support HTTP/2的瀏覽器，瀏覽網頁，觀察其protocol 。\n![](/images/090516_024550_AM.jpg)\n\n(fin)\n\n## 參考\n- [了解 HTTP/2 的特色與 HTTP/1.1 的差異](https://simular.co/knowledge/site-build/68-about-http2-and-http11.html)\n- [你的網站升級到 HTTP/2 了嗎？](https://blog.alphacamp.co/2016/07/12/http2/)\n- [為什麼我們需要HTTP/2？](http://www.ithome.com.tw/voice/94371)\n- [HTTP/2登場，邁向新的紀元](http://www.ithome.com.tw/voice/94520)\n- [Google：將推動QUIC成為網路標準](http://www.ithome.com.tw/news/95353)\n","slug":"http2 by cloudflare","published":1,"updated":"2016-12-04T17:05:32.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3oeh0037lgop5bwtxre5","content":"<h2 id=\"應該知道的事\"><a href=\"#應該知道的事\" class=\"headerlink\" title=\"應該知道的事\"></a>應該知道的事</h2><ul>\n<li>HTTP/1.1是目前被應用得最廣泛的通訊協定，也可以說是最成功的一個<ul>\n<li>HTTP/1.1 基於TCP，需要三方交握。</li>\n<li>HTTP/1.1本身存在得需多問題，安全性、效率等…。</li>\n</ul>\n</li>\n<li>HTTP/2 可以有效改善HTTP/1.1的缺點，而且可以向下相容<ul>\n<li>主流的瀏覽器都開始支援了。  </li>\n<li>只要設定好Web Server，Client 端看使用的<a href=\"http://caniuse.com/#feat=http2\" target=\"_blank\" rel=\"external\">瀏覽器支不支援</a>。</li>\n</ul>\n</li>\n<li>一流公司制定標準，二流作品牌，三流賣技術，四流作產品<ul>\n<li>HTTP/2 是源自Google的SPDY。</li>\n<li>Google下一代 QUIC推動中。</li>\n</ul>\n</li>\n<li>HTTP/2 並不強制加密(HTTPS)<ul>\n<li>在主流瀏覽器為了向下相容，保留了80 port的HTTP/1.1通訊協定，用443 port 實作HTTP/2。</li>\n<li>所以還是要走HTTPS，所以需要安全性憑証。</li>\n<li>安全性憑証要錢(現在也有免費的)。</li>\n<li><a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a>提供免費的安全性憑証。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ol>\n<li>你要有<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a>帳號。</li>\n<li>看過我之網站的設定，簡單說就是一個github page 與 透過OpenShift 這個 PaaS服務建立的網站。<ul>\n<li><a href=\"https://blog.marsen.me/2016/08/21/setting_DNS_with_google/\">怎麼建立一個網站？(一)</a></li>\n<li><a href=\"https://blog.marsen.me/2016/08/28/how_to_use_github_page/\">怎麼建立一個網站？(二)</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><ol>\n<li><a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a> 設定DNS，在指定的domain下，設定為「DNS and HTTP Proxy(CDN)」。<br><img src=\"/images/090516_021242_AM.jpg\" alt=\"設定為「DNS and HTTP Proxy(CDN)」\"></li>\n<li>設定Page-Rules，這個是為了開啟SSL<ol>\n<li>設定<code>SSL</code>為<code>Flexible</code>,輸入<code>*.username.com/*</code>。<br>這個時候你就可以瀏覽<code>https://blog.username.com/</code>,但同時也可以瀏覽<code>http://blog.username.com/</code> 。<br>我希望HTTP能自動跳轉HTTPS，這部份如果是Node建立的網站，我可以用程式作轉導，<br>但是如果是github page建立網站，就要再仰賴 <a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a> 了。</li>\n</ol>\n</li>\n<li>設定Page-Rules，這個是為了開啟SSL<ol>\n<li>設定<code>ALWAYS USE HTTPS</code>,輸入<code>http://*.username.com/*</code>。<br><img src=\"/images/090516_023252_AM.jpg\" alt=\"設定為「DNS and HTTP Proxy(CDN)」\"></li>\n</ol>\n</li>\n</ol>\n<p>設定完大致如下，順利的話幾分鐘就生效了。<br><img src=\"/images/090516_023554_AM.jpg\" alt=\"\"></p>\n<p>這時候瀏覽<code>http://blog.username.com/</code>就會轉導到<code>https://blog.username.com/</code>了 。</p>\n<h2 id=\"檢驗\"><a href=\"#檢驗\" class=\"headerlink\" title=\"檢驗\"></a>檢驗</h2><p>使用support HTTP/2的瀏覽器，瀏覽網頁，觀察其protocol 。<br><img src=\"/images/090516_024550_AM.jpg\" alt=\"\"></p>\n<p>(fin)</p>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://simular.co/knowledge/site-build/68-about-http2-and-http11.html\" target=\"_blank\" rel=\"external\">了解 HTTP/2 的特色與 HTTP/1.1 的差異</a></li>\n<li><a href=\"https://blog.alphacamp.co/2016/07/12/http2/\" target=\"_blank\" rel=\"external\">你的網站升級到 HTTP/2 了嗎？</a></li>\n<li><a href=\"http://www.ithome.com.tw/voice/94371\" target=\"_blank\" rel=\"external\">為什麼我們需要HTTP/2？</a></li>\n<li><a href=\"http://www.ithome.com.tw/voice/94520\" target=\"_blank\" rel=\"external\">HTTP/2登場，邁向新的紀元</a></li>\n<li><a href=\"http://www.ithome.com.tw/news/95353\" target=\"_blank\" rel=\"external\">Google：將推動QUIC成為網路標準</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"應該知道的事\"><a href=\"#應該知道的事\" class=\"headerlink\" title=\"應該知道的事\"></a>應該知道的事</h2><ul>\n<li>HTTP/1.1是目前被應用得最廣泛的通訊協定，也可以說是最成功的一個<ul>\n<li>HTTP/1.1 基於TCP，需要三方交握。</li>\n<li>HTTP/1.1本身存在得需多問題，安全性、效率等…。</li>\n</ul>\n</li>\n<li>HTTP/2 可以有效改善HTTP/1.1的缺點，而且可以向下相容<ul>\n<li>主流的瀏覽器都開始支援了。  </li>\n<li>只要設定好Web Server，Client 端看使用的<a href=\"http://caniuse.com/#feat=http2\" target=\"_blank\" rel=\"external\">瀏覽器支不支援</a>。</li>\n</ul>\n</li>\n<li>一流公司制定標準，二流作品牌，三流賣技術，四流作產品<ul>\n<li>HTTP/2 是源自Google的SPDY。</li>\n<li>Google下一代 QUIC推動中。</li>\n</ul>\n</li>\n<li>HTTP/2 並不強制加密(HTTPS)<ul>\n<li>在主流瀏覽器為了向下相容，保留了80 port的HTTP/1.1通訊協定，用443 port 實作HTTP/2。</li>\n<li>所以還是要走HTTPS，所以需要安全性憑証。</li>\n<li>安全性憑証要錢(現在也有免費的)。</li>\n<li><a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a>提供免費的安全性憑証。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><ol>\n<li>你要有<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a>帳號。</li>\n<li>看過我之網站的設定，簡單說就是一個github page 與 透過OpenShift 這個 PaaS服務建立的網站。<ul>\n<li><a href=\"https://blog.marsen.me/2016/08/21/setting_DNS_with_google/\">怎麼建立一個網站？(一)</a></li>\n<li><a href=\"https://blog.marsen.me/2016/08/28/how_to_use_github_page/\">怎麼建立一個網站？(二)</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><ol>\n<li><a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a> 設定DNS，在指定的domain下，設定為「DNS and HTTP Proxy(CDN)」。<br><img src=\"/images/090516_021242_AM.jpg\" alt=\"設定為「DNS and HTTP Proxy(CDN)」\"></li>\n<li>設定Page-Rules，這個是為了開啟SSL<ol>\n<li>設定<code>SSL</code>為<code>Flexible</code>,輸入<code>*.username.com/*</code>。<br>這個時候你就可以瀏覽<code>https://blog.username.com/</code>,但同時也可以瀏覽<code>http://blog.username.com/</code> 。<br>我希望HTTP能自動跳轉HTTPS，這部份如果是Node建立的網站，我可以用程式作轉導，<br>但是如果是github page建立網站，就要再仰賴 <a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">cloudflare</a> 了。</li>\n</ol>\n</li>\n<li>設定Page-Rules，這個是為了開啟SSL<ol>\n<li>設定<code>ALWAYS USE HTTPS</code>,輸入<code>http://*.username.com/*</code>。<br><img src=\"/images/090516_023252_AM.jpg\" alt=\"設定為「DNS and HTTP Proxy(CDN)」\"></li>\n</ol>\n</li>\n</ol>\n<p>設定完大致如下，順利的話幾分鐘就生效了。<br><img src=\"/images/090516_023554_AM.jpg\" alt=\"\"></p>\n<p>這時候瀏覽<code>http://blog.username.com/</code>就會轉導到<code>https://blog.username.com/</code>了 。</p>\n<h2 id=\"檢驗\"><a href=\"#檢驗\" class=\"headerlink\" title=\"檢驗\"></a>檢驗</h2><p>使用support HTTP/2的瀏覽器，瀏覽網頁，觀察其protocol 。<br><img src=\"/images/090516_024550_AM.jpg\" alt=\"\"></p>\n<p>(fin)</p>\n<h2 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h2><ul>\n<li><a href=\"https://simular.co/knowledge/site-build/68-about-http2-and-http11.html\" target=\"_blank\" rel=\"external\">了解 HTTP/2 的特色與 HTTP/1.1 的差異</a></li>\n<li><a href=\"https://blog.alphacamp.co/2016/07/12/http2/\" target=\"_blank\" rel=\"external\">你的網站升級到 HTTP/2 了嗎？</a></li>\n<li><a href=\"http://www.ithome.com.tw/voice/94371\" target=\"_blank\" rel=\"external\">為什麼我們需要HTTP/2？</a></li>\n<li><a href=\"http://www.ithome.com.tw/voice/94520\" target=\"_blank\" rel=\"external\">HTTP/2登場，邁向新的紀元</a></li>\n<li><a href=\"http://www.ithome.com.tw/news/95353\" target=\"_blank\" rel=\"external\">Google：將推動QUIC成為網路標準</a></li>\n</ul>\n"},{"title":"[活動筆記]測試即學習","date":"2017-05-19T06:03:01.000Z","_content":"## 應該知道的事:\n- 報名資訊(已結束)\n[Agile Meetup 2017/05 (2): 測試即學習](http://www.accupass.com/go/testingislearning)\n\n- 這裡不講TDD,沒有程式 \n\n## 流程\n讀這篇文章的人，或許可以找一位朋友來作相同的流程練習\n\n1. 一張不明所以的圖片當作受測對象，任意發散的詢問測試問題\n2. 分類所有的問題為WHY、HOW、WHAT\n3. 畫出Golden Circle，核心是WHY\n4. 透過WHY揭露受測對象圖片的本質(TAROT)，收斂測試範圍\n5. 重新詢問測試問題，儘可能的發散\n6. 所有人交流自已看到可能的測試問題\n7. 重複5~6步，有意識的去覺察自已的感覺\n\t- 別人注意到的問題你為什麼沒發現？\n\t- 別人如何發現問題？\n\t- 你有沒有辦法發現相同的問題(殊途同歸)？\n\n\n## 測試的概念\n\t\n1. 受測者\n2. 問題\n3. 答案\n4. 預期的結果(test oracles)\n\n![](https://i.imgur.com/Qy8F4Vw.png)\n\n## 問題的核心 Know Your Mission(KNW)\n\n1. WHY ? \n\t本次分享的重點，如何了解、探索、學習產品的知識，給客戶的價值等… 。\n2. HOW ? => 如何作到？\n3. WHAT ? => 產生測試項目\n4. TEST ? => 執行測試，回饋並且回到第一步Loop。\n\n## 應該觀注的資訊 information is learning\n1. Customer\n2. Product\n3. Project\n4. Mission\n\n透過WHY的詰問，了解你的任務(Know Your Mission) \n學習到受測對象的本質，排除不必要的測試發想。\n收斂了測試範圍，決定了測試方向。\n\n## 探索測試\n1. 儘可能的發散\n2. 摹仿別人看事情的角度\n3. 有意識的學習(mindful learning)\t\n\t- 記錄\n\t- 總結\n\t- 歸納問題的核心\n\t- 給它起一個名字(沒有專有名詞的話)\n\t- 有意識的逃離第一印象\n\t- 小心不經意的盲區(inattentional blindness)\n\t- 數量 X 練習 X 思考 X 學習 = 提昇\n\n## 回饋\n1. 刻意練習 vs 有意識的練習，類似的東西，但是沒有具體的方法\n2. 課程中提到的[影片](https://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action?language=zh-tw)\n\n\n\n\n(fin)","source":"_posts/testingislearning.md","raw":"---\ntitle: \"[活動筆記]測試即學習\"\ndate: 2017/05/19 14:03:01\ntag:\n  - Testing\n---\n## 應該知道的事:\n- 報名資訊(已結束)\n[Agile Meetup 2017/05 (2): 測試即學習](http://www.accupass.com/go/testingislearning)\n\n- 這裡不講TDD,沒有程式 \n\n## 流程\n讀這篇文章的人，或許可以找一位朋友來作相同的流程練習\n\n1. 一張不明所以的圖片當作受測對象，任意發散的詢問測試問題\n2. 分類所有的問題為WHY、HOW、WHAT\n3. 畫出Golden Circle，核心是WHY\n4. 透過WHY揭露受測對象圖片的本質(TAROT)，收斂測試範圍\n5. 重新詢問測試問題，儘可能的發散\n6. 所有人交流自已看到可能的測試問題\n7. 重複5~6步，有意識的去覺察自已的感覺\n\t- 別人注意到的問題你為什麼沒發現？\n\t- 別人如何發現問題？\n\t- 你有沒有辦法發現相同的問題(殊途同歸)？\n\n\n## 測試的概念\n\t\n1. 受測者\n2. 問題\n3. 答案\n4. 預期的結果(test oracles)\n\n![](https://i.imgur.com/Qy8F4Vw.png)\n\n## 問題的核心 Know Your Mission(KNW)\n\n1. WHY ? \n\t本次分享的重點，如何了解、探索、學習產品的知識，給客戶的價值等… 。\n2. HOW ? => 如何作到？\n3. WHAT ? => 產生測試項目\n4. TEST ? => 執行測試，回饋並且回到第一步Loop。\n\n## 應該觀注的資訊 information is learning\n1. Customer\n2. Product\n3. Project\n4. Mission\n\n透過WHY的詰問，了解你的任務(Know Your Mission) \n學習到受測對象的本質，排除不必要的測試發想。\n收斂了測試範圍，決定了測試方向。\n\n## 探索測試\n1. 儘可能的發散\n2. 摹仿別人看事情的角度\n3. 有意識的學習(mindful learning)\t\n\t- 記錄\n\t- 總結\n\t- 歸納問題的核心\n\t- 給它起一個名字(沒有專有名詞的話)\n\t- 有意識的逃離第一印象\n\t- 小心不經意的盲區(inattentional blindness)\n\t- 數量 X 練習 X 思考 X 學習 = 提昇\n\n## 回饋\n1. 刻意練習 vs 有意識的練習，類似的東西，但是沒有具體的方法\n2. 課程中提到的[影片](https://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action?language=zh-tw)\n\n\n\n\n(fin)","slug":"testingislearning","published":1,"updated":"2017-05-19T06:04:03.652Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3oem003algopiay1msjf","content":"<h2 id=\"應該知道的事\"><a href=\"#應該知道的事\" class=\"headerlink\" title=\"應該知道的事:\"></a>應該知道的事:</h2><ul>\n<li><p>報名資訊(已結束)<br><a href=\"http://www.accupass.com/go/testingislearning\" target=\"_blank\" rel=\"external\">Agile Meetup 2017/05 (2): 測試即學習</a></p>\n</li>\n<li><p>這裡不講TDD,沒有程式 </p>\n</li>\n</ul>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><p>讀這篇文章的人，或許可以找一位朋友來作相同的流程練習</p>\n<ol>\n<li>一張不明所以的圖片當作受測對象，任意發散的詢問測試問題</li>\n<li>分類所有的問題為WHY、HOW、WHAT</li>\n<li>畫出Golden Circle，核心是WHY</li>\n<li>透過WHY揭露受測對象圖片的本質(TAROT)，收斂測試範圍</li>\n<li>重新詢問測試問題，儘可能的發散</li>\n<li>所有人交流自已看到可能的測試問題</li>\n<li>重複5~6步，有意識的去覺察自已的感覺<ul>\n<li>別人注意到的問題你為什麼沒發現？</li>\n<li>別人如何發現問題？</li>\n<li>你有沒有辦法發現相同的問題(殊途同歸)？</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"測試的概念\"><a href=\"#測試的概念\" class=\"headerlink\" title=\"測試的概念\"></a>測試的概念</h2><ol>\n<li>受測者</li>\n<li>問題</li>\n<li>答案</li>\n<li>預期的結果(test oracles)</li>\n</ol>\n<p><img src=\"https://i.imgur.com/Qy8F4Vw.png\" alt=\"\"></p>\n<h2 id=\"問題的核心-Know-Your-Mission-KNW\"><a href=\"#問題的核心-Know-Your-Mission-KNW\" class=\"headerlink\" title=\"問題的核心 Know Your Mission(KNW)\"></a>問題的核心 Know Your Mission(KNW)</h2><ol>\n<li>WHY ?<br> 本次分享的重點，如何了解、探索、學習產品的知識，給客戶的價值等… 。</li>\n<li>HOW ? =&gt; 如何作到？</li>\n<li>WHAT ? =&gt; 產生測試項目</li>\n<li>TEST ? =&gt; 執行測試，回饋並且回到第一步Loop。</li>\n</ol>\n<h2 id=\"應該觀注的資訊-information-is-learning\"><a href=\"#應該觀注的資訊-information-is-learning\" class=\"headerlink\" title=\"應該觀注的資訊 information is learning\"></a>應該觀注的資訊 information is learning</h2><ol>\n<li>Customer</li>\n<li>Product</li>\n<li>Project</li>\n<li>Mission</li>\n</ol>\n<p>透過WHY的詰問，了解你的任務(Know Your Mission)<br>學習到受測對象的本質，排除不必要的測試發想。<br>收斂了測試範圍，決定了測試方向。</p>\n<h2 id=\"探索測試\"><a href=\"#探索測試\" class=\"headerlink\" title=\"探索測試\"></a>探索測試</h2><ol>\n<li>儘可能的發散</li>\n<li>摹仿別人看事情的角度</li>\n<li>有意識的學習(mindful learning)    <ul>\n<li>記錄</li>\n<li>總結</li>\n<li>歸納問題的核心</li>\n<li>給它起一個名字(沒有專有名詞的話)</li>\n<li>有意識的逃離第一印象</li>\n<li>小心不經意的盲區(inattentional blindness)</li>\n<li>數量 X 練習 X 思考 X 學習 = 提昇</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"回饋\"><a href=\"#回饋\" class=\"headerlink\" title=\"回饋\"></a>回饋</h2><ol>\n<li>刻意練習 vs 有意識的練習，類似的東西，但是沒有具體的方法</li>\n<li>課程中提到的<a href=\"https://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action?language=zh-tw\" target=\"_blank\" rel=\"external\">影片</a></li>\n</ol>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"應該知道的事\"><a href=\"#應該知道的事\" class=\"headerlink\" title=\"應該知道的事:\"></a>應該知道的事:</h2><ul>\n<li><p>報名資訊(已結束)<br><a href=\"http://www.accupass.com/go/testingislearning\" target=\"_blank\" rel=\"external\">Agile Meetup 2017/05 (2): 測試即學習</a></p>\n</li>\n<li><p>這裡不講TDD,沒有程式 </p>\n</li>\n</ul>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><p>讀這篇文章的人，或許可以找一位朋友來作相同的流程練習</p>\n<ol>\n<li>一張不明所以的圖片當作受測對象，任意發散的詢問測試問題</li>\n<li>分類所有的問題為WHY、HOW、WHAT</li>\n<li>畫出Golden Circle，核心是WHY</li>\n<li>透過WHY揭露受測對象圖片的本質(TAROT)，收斂測試範圍</li>\n<li>重新詢問測試問題，儘可能的發散</li>\n<li>所有人交流自已看到可能的測試問題</li>\n<li>重複5~6步，有意識的去覺察自已的感覺<ul>\n<li>別人注意到的問題你為什麼沒發現？</li>\n<li>別人如何發現問題？</li>\n<li>你有沒有辦法發現相同的問題(殊途同歸)？</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"測試的概念\"><a href=\"#測試的概念\" class=\"headerlink\" title=\"測試的概念\"></a>測試的概念</h2><ol>\n<li>受測者</li>\n<li>問題</li>\n<li>答案</li>\n<li>預期的結果(test oracles)</li>\n</ol>\n<p><img src=\"https://i.imgur.com/Qy8F4Vw.png\" alt=\"\"></p>\n<h2 id=\"問題的核心-Know-Your-Mission-KNW\"><a href=\"#問題的核心-Know-Your-Mission-KNW\" class=\"headerlink\" title=\"問題的核心 Know Your Mission(KNW)\"></a>問題的核心 Know Your Mission(KNW)</h2><ol>\n<li>WHY ?<br> 本次分享的重點，如何了解、探索、學習產品的知識，給客戶的價值等… 。</li>\n<li>HOW ? =&gt; 如何作到？</li>\n<li>WHAT ? =&gt; 產生測試項目</li>\n<li>TEST ? =&gt; 執行測試，回饋並且回到第一步Loop。</li>\n</ol>\n<h2 id=\"應該觀注的資訊-information-is-learning\"><a href=\"#應該觀注的資訊-information-is-learning\" class=\"headerlink\" title=\"應該觀注的資訊 information is learning\"></a>應該觀注的資訊 information is learning</h2><ol>\n<li>Customer</li>\n<li>Product</li>\n<li>Project</li>\n<li>Mission</li>\n</ol>\n<p>透過WHY的詰問，了解你的任務(Know Your Mission)<br>學習到受測對象的本質，排除不必要的測試發想。<br>收斂了測試範圍，決定了測試方向。</p>\n<h2 id=\"探索測試\"><a href=\"#探索測試\" class=\"headerlink\" title=\"探索測試\"></a>探索測試</h2><ol>\n<li>儘可能的發散</li>\n<li>摹仿別人看事情的角度</li>\n<li>有意識的學習(mindful learning)    <ul>\n<li>記錄</li>\n<li>總結</li>\n<li>歸納問題的核心</li>\n<li>給它起一個名字(沒有專有名詞的話)</li>\n<li>有意識的逃離第一印象</li>\n<li>小心不經意的盲區(inattentional blindness)</li>\n<li>數量 X 練習 X 思考 X 學習 = 提昇</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"回饋\"><a href=\"#回饋\" class=\"headerlink\" title=\"回饋\"></a>回饋</h2><ol>\n<li>刻意練習 vs 有意識的練習，類似的東西，但是沒有具體的方法</li>\n<li>課程中提到的<a href=\"https://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action?language=zh-tw\" target=\"_blank\" rel=\"external\">影片</a></li>\n</ol>\n<p>(fin)</p>\n"},{"title":"[KATA]用typescript作一個簡易的todolist(二) - 用JQuery實作","date":"2016-10-14T02:34:27.000Z","_content":"## 設計理念\n1. 顯示/新增/刪除 todolist \n2. todolist 會是一堆todoItem的集合,所以要定義todoItem的形別\n    - Content : todoItem 的內容\n    - Status : todoItem 的狀態,完成(done)、未完成(undo) ,設計成列舉\n3. 主要的功能\n    -  建立todoItem\n    -  完成todoItem\n    -  繪製todoList到前端的畫面上\n\n## 自我分析\n跟 UI 耦合太高,Render 應該與 TodoService 分離 ,\nDOM 註冊事件相依在 Service 裡面要抽離也不好抽 。\n沒有先寫測試 , 要想一想怎麼與 UI 層作隔離。\n\n\n\n## 程式碼\n\n  \n\n### 建立 BaseService\n\n```typescript\n    class BaseService<T>{\n        constructor(private type: string) {}\n        \n        List:Array<T> ;\n\n        Create(data: T) {\n            this.List.push(data);\n        }\n\n        Delete(data: T){\n            var index = this.List.indexOf(data);\n            this.List.splice(index,1) ;\n        }\n\n        Render(){\n\n        }\n    }\n\n```\n\n### 建立 todoItem interface\n\n```typescript\ninterface todoItem {\n    Content: string;\n    Status: todoStatus;\n}\n\n```\n\n### 建立 todoItem Status 列舉\n\n```typescript\nenum todoStatus{\n    undo,\n    done,    \n}\n\n```\n\n### 建立 TodoService\n\n```typescript\nclass TodoService extends BaseService<todoItem>{\n    constructor(){\n        super(\"todoItem\");        \n    }\n\n    public Render() : void {\n        let doneHtml = '';\n        let undoHtml = '';\n        \n        this.List.forEach((item)=>{\n            if(item.Status == todoStatus.done){\n                doneHtml += `<li>${item.Content}<button class=\"recover-item btn btn-default btn-xs pull-right\"><span class=\"glyphicon glyphicon-share-alt\"></span></button><button class=\"remove-item btn btn-default btn-xs pull-right\"><span class=\"glyphicon glyphicon-remove\"></span></button></li>`;\n            } else if (item.Status == todoStatus.undo){\n                undoHtml += `<li class=\"ui-state-default\"><div class=\"checkbox\"><label><input type=\"checkbox\" value=\"\" />${item.Content}</label></div></li>` ;\n            }\n        });\n        $(\"#done-items\").html(doneHtml);\n        $('#sortable').html(undoHtml);\n        $('.add-todo').val('');\n    }\n\n    Delete(data: todoItem){\n        data.Status = todoStatus.done ;\n    }\n\n\n\n    Init(){\n        //// todoList in localStorage         \n        var list = window.localStorage.getItem(\"todoList\");        \n        if(!list){\n            this.List = new Array<todoItem>();\n        }else{\n            this.List = JSON.parse(list);\n        }\n        window.onbeforeunload = (evt) => {\n            window.localStorage.setItem(\"todoList\",JSON.stringify(this.List));\n        };\n\n        // mark task as done\n        $('.todolist').on('change','#sortable li input[type=\"checkbox\"]',(evt)=>{\n            var self = evt.target;\n            var text = $(self).parent().text();\n            if($(self).prop('checked')){\n                var doneItem = this.List.filter((i)=>{return text == i.Content;})[0];\n                this.Delete(doneItem);\n                this.Render();\n            }\n        });\n\n        $('.add-todo').on('keypress',(evt) => {\n            evt.preventDefault\n            if (evt.which == 13) {\n                if($(evt.target).val() != ''){\n                    var todo = $(evt.target).val();\n                    this.Create(  {\n                        Content : $(evt.target).val() ,\n                        Status : todoStatus.undo \n                    });\n                    this.Render();                 \n                }else{\n                    // some validation\n                }\n            }\n        });\n        \n        $('.todolist').on('click', '#done-items li button.recover-item',(evt)=>{\n            var text = $(evt.target).parent().parent().text();\n            var recoverItem = this.List.filter((i)=>{return text == i.Content;})[0];\n            recoverItem.Status = todoStatus.undo ;\n            this.Render();\n        });\n\n        $('.todolist').on('click','#done-items li button.remove-item' ,(evt)=>{\n            var text = $(evt.target).parent().parent().text();\n            var removeItem = this.List.filter((i)=>{return text == i.Content;})[0];\n            var index = this.List.indexOf(removeItem);\n            this.List.splice(index,1) ;\n            this.Render();\n        });\n\n        $('#checkAll').on('click',(evt)=>{\n            this.List.forEach((item)=>{\n                item.Status = todoStatus.done;\n            });\n            this.Render();\n        });\n\n        //// Render\n        this.Render();\n    }\n}\n\n```\n\n### 使用建立好的 TodoService\n\n```typescript\nvar todoService = new TodoService();\ntodoService.Init();\n \n```\n\n(fin)","source":"_posts/todolist_by_typescript_2.md","raw":"---\ntitle: '[KATA]用typescript作一個簡易的todolist(二) - 用JQuery實作'\ndate: 2016/10/14 10:34:27\ntag: \n- kata\n- typescript\n- bootstrap\n- npm\n- jquery\n- jquery-ui\n---\n## 設計理念\n1. 顯示/新增/刪除 todolist \n2. todolist 會是一堆todoItem的集合,所以要定義todoItem的形別\n    - Content : todoItem 的內容\n    - Status : todoItem 的狀態,完成(done)、未完成(undo) ,設計成列舉\n3. 主要的功能\n    -  建立todoItem\n    -  完成todoItem\n    -  繪製todoList到前端的畫面上\n\n## 自我分析\n跟 UI 耦合太高,Render 應該與 TodoService 分離 ,\nDOM 註冊事件相依在 Service 裡面要抽離也不好抽 。\n沒有先寫測試 , 要想一想怎麼與 UI 層作隔離。\n\n\n\n## 程式碼\n\n  \n\n### 建立 BaseService\n\n```typescript\n    class BaseService<T>{\n        constructor(private type: string) {}\n        \n        List:Array<T> ;\n\n        Create(data: T) {\n            this.List.push(data);\n        }\n\n        Delete(data: T){\n            var index = this.List.indexOf(data);\n            this.List.splice(index,1) ;\n        }\n\n        Render(){\n\n        }\n    }\n\n```\n\n### 建立 todoItem interface\n\n```typescript\ninterface todoItem {\n    Content: string;\n    Status: todoStatus;\n}\n\n```\n\n### 建立 todoItem Status 列舉\n\n```typescript\nenum todoStatus{\n    undo,\n    done,    \n}\n\n```\n\n### 建立 TodoService\n\n```typescript\nclass TodoService extends BaseService<todoItem>{\n    constructor(){\n        super(\"todoItem\");        \n    }\n\n    public Render() : void {\n        let doneHtml = '';\n        let undoHtml = '';\n        \n        this.List.forEach((item)=>{\n            if(item.Status == todoStatus.done){\n                doneHtml += `<li>${item.Content}<button class=\"recover-item btn btn-default btn-xs pull-right\"><span class=\"glyphicon glyphicon-share-alt\"></span></button><button class=\"remove-item btn btn-default btn-xs pull-right\"><span class=\"glyphicon glyphicon-remove\"></span></button></li>`;\n            } else if (item.Status == todoStatus.undo){\n                undoHtml += `<li class=\"ui-state-default\"><div class=\"checkbox\"><label><input type=\"checkbox\" value=\"\" />${item.Content}</label></div></li>` ;\n            }\n        });\n        $(\"#done-items\").html(doneHtml);\n        $('#sortable').html(undoHtml);\n        $('.add-todo').val('');\n    }\n\n    Delete(data: todoItem){\n        data.Status = todoStatus.done ;\n    }\n\n\n\n    Init(){\n        //// todoList in localStorage         \n        var list = window.localStorage.getItem(\"todoList\");        \n        if(!list){\n            this.List = new Array<todoItem>();\n        }else{\n            this.List = JSON.parse(list);\n        }\n        window.onbeforeunload = (evt) => {\n            window.localStorage.setItem(\"todoList\",JSON.stringify(this.List));\n        };\n\n        // mark task as done\n        $('.todolist').on('change','#sortable li input[type=\"checkbox\"]',(evt)=>{\n            var self = evt.target;\n            var text = $(self).parent().text();\n            if($(self).prop('checked')){\n                var doneItem = this.List.filter((i)=>{return text == i.Content;})[0];\n                this.Delete(doneItem);\n                this.Render();\n            }\n        });\n\n        $('.add-todo').on('keypress',(evt) => {\n            evt.preventDefault\n            if (evt.which == 13) {\n                if($(evt.target).val() != ''){\n                    var todo = $(evt.target).val();\n                    this.Create(  {\n                        Content : $(evt.target).val() ,\n                        Status : todoStatus.undo \n                    });\n                    this.Render();                 \n                }else{\n                    // some validation\n                }\n            }\n        });\n        \n        $('.todolist').on('click', '#done-items li button.recover-item',(evt)=>{\n            var text = $(evt.target).parent().parent().text();\n            var recoverItem = this.List.filter((i)=>{return text == i.Content;})[0];\n            recoverItem.Status = todoStatus.undo ;\n            this.Render();\n        });\n\n        $('.todolist').on('click','#done-items li button.remove-item' ,(evt)=>{\n            var text = $(evt.target).parent().parent().text();\n            var removeItem = this.List.filter((i)=>{return text == i.Content;})[0];\n            var index = this.List.indexOf(removeItem);\n            this.List.splice(index,1) ;\n            this.Render();\n        });\n\n        $('#checkAll').on('click',(evt)=>{\n            this.List.forEach((item)=>{\n                item.Status = todoStatus.done;\n            });\n            this.Render();\n        });\n\n        //// Render\n        this.Render();\n    }\n}\n\n```\n\n### 使用建立好的 TodoService\n\n```typescript\nvar todoService = new TodoService();\ntodoService.Init();\n \n```\n\n(fin)","slug":"todolist_by_typescript_2","published":1,"updated":"2016-12-04T17:09:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3oeo003clgopo48zyrr0","content":"<h2 id=\"設計理念\"><a href=\"#設計理念\" class=\"headerlink\" title=\"設計理念\"></a>設計理念</h2><ol>\n<li>顯示/新增/刪除 todolist </li>\n<li>todolist 會是一堆todoItem的集合,所以要定義todoItem的形別<ul>\n<li>Content : todoItem 的內容</li>\n<li>Status : todoItem 的狀態,完成(done)、未完成(undo) ,設計成列舉</li>\n</ul>\n</li>\n<li>主要的功能<ul>\n<li>建立todoItem</li>\n<li>完成todoItem</li>\n<li>繪製todoList到前端的畫面上</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"自我分析\"><a href=\"#自我分析\" class=\"headerlink\" title=\"自我分析\"></a>自我分析</h2><p>跟 UI 耦合太高,Render 應該與 TodoService 分離 ,<br>DOM 註冊事件相依在 Service 裡面要抽離也不好抽 。<br>沒有先寫測試 , 要想一想怎麼與 UI 層作隔離。</p>\n<h2 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h2><h3 id=\"建立-BaseService\"><a href=\"#建立-BaseService\" class=\"headerlink\" title=\"建立 BaseService\"></a>建立 BaseService</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> BaseService&lt;T&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(private type: string) &#123;&#125;</div><div class=\"line\">    </div><div class=\"line\">    List:<span class=\"built_in\">Array</span>&lt;T&gt; ;</div><div class=\"line\"></div><div class=\"line\">    Create(data: T) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.List.push(data);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Delete(data: T)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> index = <span class=\"keyword\">this</span>.List.indexOf(data);</div><div class=\"line\">        <span class=\"keyword\">this</span>.List.splice(index,<span class=\"number\">1</span>) ;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Render()&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"建立-todoItem-interface\"><a href=\"#建立-todoItem-interface\" class=\"headerlink\" title=\"建立 todoItem interface\"></a>建立 todoItem interface</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> todoItem &#123;</div><div class=\"line\">    Content: <span class=\"built_in\">string</span>;</div><div class=\"line\">    Status: todoStatus;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"建立-todoItem-Status-列舉\"><a href=\"#建立-todoItem-Status-列舉\" class=\"headerlink\" title=\"建立 todoItem Status 列舉\"></a>建立 todoItem Status 列舉</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">enum</span> todoStatus&#123;</div><div class=\"line\">    undo,</div><div class=\"line\">    done,    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"建立-TodoService\"><a href=\"#建立-TodoService\" class=\"headerlink\" title=\"建立 TodoService\"></a>建立 TodoService</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> TodoService extends BaseService&lt;todoItem&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">\"todoItem\"</span>);        </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Render() : <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> doneHtml = <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"keyword\">let</span> undoHtml = <span class=\"string\">''</span>;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">this</span>.List.forEach((item)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(item.Status == todoStatus.done)&#123;</div><div class=\"line\">                doneHtml += <span class=\"string\">`&lt;li&gt;<span class=\"subst\">$&#123;item.Content&#125;</span>&lt;button class=\"recover-item btn btn-default btn-xs pull-right\"&gt;&lt;span class=\"glyphicon glyphicon-share-alt\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;button class=\"remove-item btn btn-default btn-xs pull-right\"&gt;&lt;span class=\"glyphicon glyphicon-remove\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt;`</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.Status == todoStatus.undo)&#123;</div><div class=\"line\">                undoHtml += <span class=\"string\">`&lt;li class=\"ui-state-default\"&gt;&lt;div class=\"checkbox\"&gt;&lt;label&gt;&lt;input type=\"checkbox\" value=\"\" /&gt;<span class=\"subst\">$&#123;item.Content&#125;</span>&lt;/label&gt;&lt;/div&gt;&lt;/li&gt;`</span> ;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        $(<span class=\"string\">\"#done-items\"</span>).html(doneHtml);</div><div class=\"line\">        $(<span class=\"string\">'#sortable'</span>).html(undoHtml);</div><div class=\"line\">        $(<span class=\"string\">'.add-todo'</span>).val(<span class=\"string\">''</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Delete(data: todoItem)&#123;</div><div class=\"line\">        data.Status = todoStatus.done ;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    Init()&#123;</div><div class=\"line\">        <span class=\"comment\">//// todoList in localStorage         </span></div><div class=\"line\">        <span class=\"keyword\">var</span> list = <span class=\"built_in\">window</span>.localStorage.getItem(<span class=\"string\">\"todoList\"</span>);        </div><div class=\"line\">        <span class=\"keyword\">if</span>(!list)&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.List = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>&lt;todoItem&gt;();</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.List = <span class=\"built_in\">JSON</span>.parse(list);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">window</span>.onbeforeunload = (evt) =&gt; &#123;</div><div class=\"line\">            <span class=\"built_in\">window</span>.localStorage.setItem(<span class=\"string\">\"todoList\"</span>,<span class=\"built_in\">JSON</span>.stringify(<span class=\"keyword\">this</span>.List));</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// mark task as done</span></div><div class=\"line\">        $(<span class=\"string\">'.todolist'</span>).on(<span class=\"string\">'change'</span>,<span class=\"string\">'#sortable li input[type=\"checkbox\"]'</span>,(evt)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> self = evt.target;</div><div class=\"line\">            <span class=\"keyword\">var</span> text = $(self).parent().text();</div><div class=\"line\">            <span class=\"keyword\">if</span>($(self).prop(<span class=\"string\">'checked'</span>))&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> doneItem = <span class=\"keyword\">this</span>.List.filter((i)=&gt;&#123;<span class=\"keyword\">return</span> text == i.Content;&#125;)[<span class=\"number\">0</span>];</div><div class=\"line\">                <span class=\"keyword\">this</span>.Delete(doneItem);</div><div class=\"line\">                <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        $(<span class=\"string\">'.add-todo'</span>).on(<span class=\"string\">'keypress'</span>,(evt) =&gt; &#123;</div><div class=\"line\">            evt.preventDefault</div><div class=\"line\">            <span class=\"keyword\">if</span> (evt.which == <span class=\"number\">13</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>($(evt.target).val() != <span class=\"string\">''</span>)&#123;</div><div class=\"line\">                    <span class=\"keyword\">var</span> todo = $(evt.target).val();</div><div class=\"line\">                    <span class=\"keyword\">this</span>.Create(  &#123;</div><div class=\"line\">                        Content : $(evt.target).val() ,</div><div class=\"line\">                        Status : todoStatus.undo </div><div class=\"line\">                    &#125;);</div><div class=\"line\">                    <span class=\"keyword\">this</span>.Render();                 </div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    <span class=\"comment\">// some validation</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        $(<span class=\"string\">'.todolist'</span>).on(<span class=\"string\">'click'</span>, <span class=\"string\">'#done-items li button.recover-item'</span>,(evt)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> text = $(evt.target).parent().parent().text();</div><div class=\"line\">            <span class=\"keyword\">var</span> recoverItem = <span class=\"keyword\">this</span>.List.filter((i)=&gt;&#123;<span class=\"keyword\">return</span> text == i.Content;&#125;)[<span class=\"number\">0</span>];</div><div class=\"line\">            recoverItem.Status = todoStatus.undo ;</div><div class=\"line\">            <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        $(<span class=\"string\">'.todolist'</span>).on(<span class=\"string\">'click'</span>,<span class=\"string\">'#done-items li button.remove-item'</span> ,(evt)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> text = $(evt.target).parent().parent().text();</div><div class=\"line\">            <span class=\"keyword\">var</span> removeItem = <span class=\"keyword\">this</span>.List.filter((i)=&gt;&#123;<span class=\"keyword\">return</span> text == i.Content;&#125;)[<span class=\"number\">0</span>];</div><div class=\"line\">            <span class=\"keyword\">var</span> index = <span class=\"keyword\">this</span>.List.indexOf(removeItem);</div><div class=\"line\">            <span class=\"keyword\">this</span>.List.splice(index,<span class=\"number\">1</span>) ;</div><div class=\"line\">            <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        $(<span class=\"string\">'#checkAll'</span>).on(<span class=\"string\">'click'</span>,(evt)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.List.forEach((item)=&gt;&#123;</div><div class=\"line\">                item.Status = todoStatus.done;</div><div class=\"line\">            &#125;);</div><div class=\"line\">            <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//// Render</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用建立好的-TodoService\"><a href=\"#使用建立好的-TodoService\" class=\"headerlink\" title=\"使用建立好的 TodoService\"></a>使用建立好的 TodoService</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> todoService = <span class=\"keyword\">new</span> TodoService();</div><div class=\"line\">todoService.Init();</div></pre></td></tr></table></figure>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"設計理念\"><a href=\"#設計理念\" class=\"headerlink\" title=\"設計理念\"></a>設計理念</h2><ol>\n<li>顯示/新增/刪除 todolist </li>\n<li>todolist 會是一堆todoItem的集合,所以要定義todoItem的形別<ul>\n<li>Content : todoItem 的內容</li>\n<li>Status : todoItem 的狀態,完成(done)、未完成(undo) ,設計成列舉</li>\n</ul>\n</li>\n<li>主要的功能<ul>\n<li>建立todoItem</li>\n<li>完成todoItem</li>\n<li>繪製todoList到前端的畫面上</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"自我分析\"><a href=\"#自我分析\" class=\"headerlink\" title=\"自我分析\"></a>自我分析</h2><p>跟 UI 耦合太高,Render 應該與 TodoService 分離 ,<br>DOM 註冊事件相依在 Service 裡面要抽離也不好抽 。<br>沒有先寫測試 , 要想一想怎麼與 UI 層作隔離。</p>\n<h2 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h2><h3 id=\"建立-BaseService\"><a href=\"#建立-BaseService\" class=\"headerlink\" title=\"建立 BaseService\"></a>建立 BaseService</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> BaseService&lt;T&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(private type: string) &#123;&#125;</div><div class=\"line\">    </div><div class=\"line\">    List:<span class=\"built_in\">Array</span>&lt;T&gt; ;</div><div class=\"line\"></div><div class=\"line\">    Create(data: T) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.List.push(data);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Delete(data: T)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> index = <span class=\"keyword\">this</span>.List.indexOf(data);</div><div class=\"line\">        <span class=\"keyword\">this</span>.List.splice(index,<span class=\"number\">1</span>) ;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Render()&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"建立-todoItem-interface\"><a href=\"#建立-todoItem-interface\" class=\"headerlink\" title=\"建立 todoItem interface\"></a>建立 todoItem interface</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> todoItem &#123;</div><div class=\"line\">    Content: <span class=\"built_in\">string</span>;</div><div class=\"line\">    Status: todoStatus;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"建立-todoItem-Status-列舉\"><a href=\"#建立-todoItem-Status-列舉\" class=\"headerlink\" title=\"建立 todoItem Status 列舉\"></a>建立 todoItem Status 列舉</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">enum</span> todoStatus&#123;</div><div class=\"line\">    undo,</div><div class=\"line\">    done,    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"建立-TodoService\"><a href=\"#建立-TodoService\" class=\"headerlink\" title=\"建立 TodoService\"></a>建立 TodoService</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> TodoService extends BaseService&lt;todoItem&gt;&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">\"todoItem\"</span>);        </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Render() : <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> doneHtml = <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"keyword\">let</span> undoHtml = <span class=\"string\">''</span>;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">this</span>.List.forEach((item)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(item.Status == todoStatus.done)&#123;</div><div class=\"line\">                doneHtml += <span class=\"string\">`&lt;li&gt;<span class=\"subst\">$&#123;item.Content&#125;</span>&lt;button class=\"recover-item btn btn-default btn-xs pull-right\"&gt;&lt;span class=\"glyphicon glyphicon-share-alt\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;button class=\"remove-item btn btn-default btn-xs pull-right\"&gt;&lt;span class=\"glyphicon glyphicon-remove\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;/li&gt;`</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.Status == todoStatus.undo)&#123;</div><div class=\"line\">                undoHtml += <span class=\"string\">`&lt;li class=\"ui-state-default\"&gt;&lt;div class=\"checkbox\"&gt;&lt;label&gt;&lt;input type=\"checkbox\" value=\"\" /&gt;<span class=\"subst\">$&#123;item.Content&#125;</span>&lt;/label&gt;&lt;/div&gt;&lt;/li&gt;`</span> ;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        $(<span class=\"string\">\"#done-items\"</span>).html(doneHtml);</div><div class=\"line\">        $(<span class=\"string\">'#sortable'</span>).html(undoHtml);</div><div class=\"line\">        $(<span class=\"string\">'.add-todo'</span>).val(<span class=\"string\">''</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Delete(data: todoItem)&#123;</div><div class=\"line\">        data.Status = todoStatus.done ;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    Init()&#123;</div><div class=\"line\">        <span class=\"comment\">//// todoList in localStorage         </span></div><div class=\"line\">        <span class=\"keyword\">var</span> list = <span class=\"built_in\">window</span>.localStorage.getItem(<span class=\"string\">\"todoList\"</span>);        </div><div class=\"line\">        <span class=\"keyword\">if</span>(!list)&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.List = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>&lt;todoItem&gt;();</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.List = <span class=\"built_in\">JSON</span>.parse(list);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">window</span>.onbeforeunload = (evt) =&gt; &#123;</div><div class=\"line\">            <span class=\"built_in\">window</span>.localStorage.setItem(<span class=\"string\">\"todoList\"</span>,<span class=\"built_in\">JSON</span>.stringify(<span class=\"keyword\">this</span>.List));</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// mark task as done</span></div><div class=\"line\">        $(<span class=\"string\">'.todolist'</span>).on(<span class=\"string\">'change'</span>,<span class=\"string\">'#sortable li input[type=\"checkbox\"]'</span>,(evt)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> self = evt.target;</div><div class=\"line\">            <span class=\"keyword\">var</span> text = $(self).parent().text();</div><div class=\"line\">            <span class=\"keyword\">if</span>($(self).prop(<span class=\"string\">'checked'</span>))&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> doneItem = <span class=\"keyword\">this</span>.List.filter((i)=&gt;&#123;<span class=\"keyword\">return</span> text == i.Content;&#125;)[<span class=\"number\">0</span>];</div><div class=\"line\">                <span class=\"keyword\">this</span>.Delete(doneItem);</div><div class=\"line\">                <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        $(<span class=\"string\">'.add-todo'</span>).on(<span class=\"string\">'keypress'</span>,(evt) =&gt; &#123;</div><div class=\"line\">            evt.preventDefault</div><div class=\"line\">            <span class=\"keyword\">if</span> (evt.which == <span class=\"number\">13</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>($(evt.target).val() != <span class=\"string\">''</span>)&#123;</div><div class=\"line\">                    <span class=\"keyword\">var</span> todo = $(evt.target).val();</div><div class=\"line\">                    <span class=\"keyword\">this</span>.Create(  &#123;</div><div class=\"line\">                        Content : $(evt.target).val() ,</div><div class=\"line\">                        Status : todoStatus.undo </div><div class=\"line\">                    &#125;);</div><div class=\"line\">                    <span class=\"keyword\">this</span>.Render();                 </div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    <span class=\"comment\">// some validation</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        $(<span class=\"string\">'.todolist'</span>).on(<span class=\"string\">'click'</span>, <span class=\"string\">'#done-items li button.recover-item'</span>,(evt)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> text = $(evt.target).parent().parent().text();</div><div class=\"line\">            <span class=\"keyword\">var</span> recoverItem = <span class=\"keyword\">this</span>.List.filter((i)=&gt;&#123;<span class=\"keyword\">return</span> text == i.Content;&#125;)[<span class=\"number\">0</span>];</div><div class=\"line\">            recoverItem.Status = todoStatus.undo ;</div><div class=\"line\">            <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        $(<span class=\"string\">'.todolist'</span>).on(<span class=\"string\">'click'</span>,<span class=\"string\">'#done-items li button.remove-item'</span> ,(evt)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> text = $(evt.target).parent().parent().text();</div><div class=\"line\">            <span class=\"keyword\">var</span> removeItem = <span class=\"keyword\">this</span>.List.filter((i)=&gt;&#123;<span class=\"keyword\">return</span> text == i.Content;&#125;)[<span class=\"number\">0</span>];</div><div class=\"line\">            <span class=\"keyword\">var</span> index = <span class=\"keyword\">this</span>.List.indexOf(removeItem);</div><div class=\"line\">            <span class=\"keyword\">this</span>.List.splice(index,<span class=\"number\">1</span>) ;</div><div class=\"line\">            <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        $(<span class=\"string\">'#checkAll'</span>).on(<span class=\"string\">'click'</span>,(evt)=&gt;&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.List.forEach((item)=&gt;&#123;</div><div class=\"line\">                item.Status = todoStatus.done;</div><div class=\"line\">            &#125;);</div><div class=\"line\">            <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//// Render</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.Render();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用建立好的-TodoService\"><a href=\"#使用建立好的-TodoService\" class=\"headerlink\" title=\"使用建立好的 TodoService\"></a>使用建立好的 TodoService</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> todoService = <span class=\"keyword\">new</span> TodoService();</div><div class=\"line\">todoService.Init();</div></pre></td></tr></table></figure>\n<p>(fin)</p>\n"},{"title":"這個網站的待辦事項","date":"2016-08-19T18:09:07.000Z","_content":"1. ~~github page & hexo~~\n2. ~~nodejs express & Openshift~~\n3. DNS 原理簡介\n4. gulp學習筆記\n","source":"_posts/sites_todo_list.md","raw":"---\ntitle: 這個網站的待辦事項\ndate: 2016/08/20 02:09:07\n---\n1. ~~github page & hexo~~\n2. ~~nodejs express & Openshift~~\n3. DNS 原理簡介\n4. gulp學習筆記\n","slug":"sites_todo_list","published":1,"updated":"2016-10-08T18:07:46.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3oes003elgopmfbtm2f2","content":"<ol>\n<li><del>github page &amp; hexo</del></li>\n<li><del>nodejs express &amp; Openshift</del></li>\n<li>DNS 原理簡介</li>\n<li>gulp學習筆記</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><del>github page &amp; hexo</del></li>\n<li><del>nodejs express &amp; Openshift</del></li>\n<li>DNS 原理簡介</li>\n<li>gulp學習筆記</li>\n</ol>\n"},{"title":"[KATA]用typescript作一個簡易的todolist(一) - 前置作業","date":"2016-10-08T02:34:27.000Z","_content":"## 目標\n1. 使用 typescript 開發\n2. 顯示/新增/刪除 todolist \n\n## 功能分析\n1. 只是練習,故不開發server side的程式\n2. 暫時存在 cookie 上\n3. 用 bootstrap 作簡單的樣式\n\n## 實作記錄\n\n### UI : 使用 Bootstrap _沒有必要重新打造輪子,能用的就拿來用_\n- 找到一個TODOLIST的[樣版](http://bootsnipp.com/index.php/snippets/featured/todo-example),內含 HTML 、 CSS 與 JS ,功能完整.\n- 取用[樣版](http://bootsnipp.com/index.php/snippets/featured/todo-example)的HTML .     \n- 引用 bootstrap 3.3.5 CDN上的 css .\n- 建立一個 todo.css 直接引用[樣版](http://bootsnipp.com/index.php/snippets/featured/todo-example)的 css 並加入頁面參考.\n\n\n### 開發環境 \n1. 安裝 typescript  \n`npm install typescript --save`\n2. 安裝 gulp  \n`npm install gulp`\n`npm install --global gulp` \n3. 安裝 gulp-typescript  \n`npm install gulp-typescript`\n4. 建立gulpfile.js \n\n```javascript\nvar gulp = require('gulp');\nvar tsc = require('gulp-typescript');\ngulp.task('default', function() {     \n        return gulp.src('public/javascripts/**/*.ts')\n        .pipe(tsc())\n        .pipe(gulp.dest('public/javascripts/'));\n});\n```\n\n### Typescript\n\n1. 關於 typescript 的定義檔, 以前有 tsd 與 typings兩種管理工具,現在可以更簡便的合併到 npm 作管理 .\n\n2. 透過 [TypeSearch](http://microsoft.github.io/TypeSearch/) 可以找到 [bootstrap](https://www.npmjs.com/package/@types/bootstrap) 的 typescript 定義檔.\n\n3. 執行 `npm install --save @types/bootstrap` 安裝 bootstrap (目前的版本是 Bootstrap 3.3.5) , 因為相依於 jquery 所以也會一併安裝\n\n4. 安裝 jquery-ui 的定義檔  \n`npm install --save @types/jqueryui`\n\n5. 新增檔案 `todo.ts` ,將 [樣版](http://bootsnipp.com/index.php/snippets/featured/todo-example) 的 javascript 複製貼上 .   \n   _*註:因為 typescript 是 javascript 的 superset , 完全可以相容原生 javascript, 如果有任何錯誤, TypeScript將會提示你_\n\n6. todo.ts 引用 jquery 、jquery-ui 與 bootstrap 的 typescript 定義檔.  \n        \n        /// <reference path=\"../../../node_modules/@types/jquery/index.d.ts\"/>  \n        /// <reference path=\"../../../node_modules/@types/bootstrap/index.d.ts\"/>  \n        /// <reference path=\"../../../node_modules/@types/jqueryui/index.d.ts\"/>\n\n7. 頁面載入對應的js檔,記得放置順序 jquery 要在最前面,並將放在`<\\body>`之後  \n        \n        <script src=\"http://code.jquery.com/jquery-2.2.4.min.js\"   integrity=\"sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=\"   crossorigin=\"anonymous\"></script>\n        <script src=\"//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js\"></script>\n        <script src=\"http://code.jquery.com/ui/1.12.1/jquery-ui.min.js\"   integrity=\"sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=\"   crossorigin=\"anonymous\"></script>\n\n8. 執行 `gulp` ,會產生todo.js\n\n7. 頁面載入js檔,記得要放在相依的js( jquery 、 bootstap 、 jqueryui)之後.\n        \n        <script type=\"text/javascript\" src=\"/javascripts/kata/todo.js\"></script>\n\n\n#### 截至目前為止,僅僅是在作複製樣版,同時一併處理一些基本 gulp 與 typescript 相關的配置\n#### 接下來才要開始寫 typescript \n\n(待續)\n\n#### 參考\n\n1. [關於 TypeScript 2.0 之後的模組定義檔 ( Declaration Files ) ( *.d.ts )](http://blog.miniasp.com/post/2016/08/22/TypeScript-Future-Declaration-Files.aspx)\n2. [bootsnipp](http://bootsnipp.com/)\n3. [TYPESCRIPT + EXPRESS + NODE.JS](http://com-brianflove.appspot.com/2016/03/29/typescript-express-node-js/)","source":"_posts/todolist_by_typescript_1.md","raw":"---\ntitle: '[KATA]用typescript作一個簡易的todolist(一) - 前置作業'\ndate: 2016/10/08 10:34:27\ntag: \n- kata\n- typescript\n- bootstrap\n- npm\n- jquery\n- jquery-ui\n---\n## 目標\n1. 使用 typescript 開發\n2. 顯示/新增/刪除 todolist \n\n## 功能分析\n1. 只是練習,故不開發server side的程式\n2. 暫時存在 cookie 上\n3. 用 bootstrap 作簡單的樣式\n\n## 實作記錄\n\n### UI : 使用 Bootstrap _沒有必要重新打造輪子,能用的就拿來用_\n- 找到一個TODOLIST的[樣版](http://bootsnipp.com/index.php/snippets/featured/todo-example),內含 HTML 、 CSS 與 JS ,功能完整.\n- 取用[樣版](http://bootsnipp.com/index.php/snippets/featured/todo-example)的HTML .     \n- 引用 bootstrap 3.3.5 CDN上的 css .\n- 建立一個 todo.css 直接引用[樣版](http://bootsnipp.com/index.php/snippets/featured/todo-example)的 css 並加入頁面參考.\n\n\n### 開發環境 \n1. 安裝 typescript  \n`npm install typescript --save`\n2. 安裝 gulp  \n`npm install gulp`\n`npm install --global gulp` \n3. 安裝 gulp-typescript  \n`npm install gulp-typescript`\n4. 建立gulpfile.js \n\n```javascript\nvar gulp = require('gulp');\nvar tsc = require('gulp-typescript');\ngulp.task('default', function() {     \n        return gulp.src('public/javascripts/**/*.ts')\n        .pipe(tsc())\n        .pipe(gulp.dest('public/javascripts/'));\n});\n```\n\n### Typescript\n\n1. 關於 typescript 的定義檔, 以前有 tsd 與 typings兩種管理工具,現在可以更簡便的合併到 npm 作管理 .\n\n2. 透過 [TypeSearch](http://microsoft.github.io/TypeSearch/) 可以找到 [bootstrap](https://www.npmjs.com/package/@types/bootstrap) 的 typescript 定義檔.\n\n3. 執行 `npm install --save @types/bootstrap` 安裝 bootstrap (目前的版本是 Bootstrap 3.3.5) , 因為相依於 jquery 所以也會一併安裝\n\n4. 安裝 jquery-ui 的定義檔  \n`npm install --save @types/jqueryui`\n\n5. 新增檔案 `todo.ts` ,將 [樣版](http://bootsnipp.com/index.php/snippets/featured/todo-example) 的 javascript 複製貼上 .   \n   _*註:因為 typescript 是 javascript 的 superset , 完全可以相容原生 javascript, 如果有任何錯誤, TypeScript將會提示你_\n\n6. todo.ts 引用 jquery 、jquery-ui 與 bootstrap 的 typescript 定義檔.  \n        \n        /// <reference path=\"../../../node_modules/@types/jquery/index.d.ts\"/>  \n        /// <reference path=\"../../../node_modules/@types/bootstrap/index.d.ts\"/>  \n        /// <reference path=\"../../../node_modules/@types/jqueryui/index.d.ts\"/>\n\n7. 頁面載入對應的js檔,記得放置順序 jquery 要在最前面,並將放在`<\\body>`之後  \n        \n        <script src=\"http://code.jquery.com/jquery-2.2.4.min.js\"   integrity=\"sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=\"   crossorigin=\"anonymous\"></script>\n        <script src=\"//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js\"></script>\n        <script src=\"http://code.jquery.com/ui/1.12.1/jquery-ui.min.js\"   integrity=\"sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=\"   crossorigin=\"anonymous\"></script>\n\n8. 執行 `gulp` ,會產生todo.js\n\n7. 頁面載入js檔,記得要放在相依的js( jquery 、 bootstap 、 jqueryui)之後.\n        \n        <script type=\"text/javascript\" src=\"/javascripts/kata/todo.js\"></script>\n\n\n#### 截至目前為止,僅僅是在作複製樣版,同時一併處理一些基本 gulp 與 typescript 相關的配置\n#### 接下來才要開始寫 typescript \n\n(待續)\n\n#### 參考\n\n1. [關於 TypeScript 2.0 之後的模組定義檔 ( Declaration Files ) ( *.d.ts )](http://blog.miniasp.com/post/2016/08/22/TypeScript-Future-Declaration-Files.aspx)\n2. [bootsnipp](http://bootsnipp.com/)\n3. [TYPESCRIPT + EXPRESS + NODE.JS](http://com-brianflove.appspot.com/2016/03/29/typescript-express-node-js/)","slug":"todolist_by_typescript_1","published":1,"updated":"2016-12-04T17:08:50.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3oew003flgopvxbb68vy","content":"<h2 id=\"目標\"><a href=\"#目標\" class=\"headerlink\" title=\"目標\"></a>目標</h2><ol>\n<li>使用 typescript 開發</li>\n<li>顯示/新增/刪除 todolist </li>\n</ol>\n<h2 id=\"功能分析\"><a href=\"#功能分析\" class=\"headerlink\" title=\"功能分析\"></a>功能分析</h2><ol>\n<li>只是練習,故不開發server side的程式</li>\n<li>暫時存在 cookie 上</li>\n<li>用 bootstrap 作簡單的樣式</li>\n</ol>\n<h2 id=\"實作記錄\"><a href=\"#實作記錄\" class=\"headerlink\" title=\"實作記錄\"></a>實作記錄</h2><h3 id=\"UI-使用-Bootstrap-沒有必要重新打造輪子-能用的就拿來用\"><a href=\"#UI-使用-Bootstrap-沒有必要重新打造輪子-能用的就拿來用\" class=\"headerlink\" title=\"UI : 使用 Bootstrap 沒有必要重新打造輪子,能用的就拿來用\"></a>UI : 使用 Bootstrap <em>沒有必要重新打造輪子,能用的就拿來用</em></h3><ul>\n<li>找到一個TODOLIST的<a href=\"http://bootsnipp.com/index.php/snippets/featured/todo-example\" target=\"_blank\" rel=\"external\">樣版</a>,內含 HTML 、 CSS 與 JS ,功能完整.</li>\n<li>取用<a href=\"http://bootsnipp.com/index.php/snippets/featured/todo-example\" target=\"_blank\" rel=\"external\">樣版</a>的HTML .     </li>\n<li>引用 bootstrap 3.3.5 CDN上的 css .</li>\n<li>建立一個 todo.css 直接引用<a href=\"http://bootsnipp.com/index.php/snippets/featured/todo-example\" target=\"_blank\" rel=\"external\">樣版</a>的 css 並加入頁面參考.</li>\n</ul>\n<h3 id=\"開發環境\"><a href=\"#開發環境\" class=\"headerlink\" title=\"開發環境\"></a>開發環境</h3><ol>\n<li>安裝 typescript<br><code>npm install typescript --save</code></li>\n<li>安裝 gulp<br><code>npm install gulp</code><br><code>npm install --global gulp</code> </li>\n<li>安裝 gulp-typescript<br><code>npm install gulp-typescript</code></li>\n<li>建立gulpfile.js </li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> tsc = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-typescript'</span>);</div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;     </div><div class=\"line\">        <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'public/javascripts/**/*.ts'</span>)</div><div class=\"line\">        .pipe(tsc())</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'public/javascripts/'</span>));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"Typescript\"><a href=\"#Typescript\" class=\"headerlink\" title=\"Typescript\"></a>Typescript</h3><ol>\n<li><p>關於 typescript 的定義檔, 以前有 tsd 與 typings兩種管理工具,現在可以更簡便的合併到 npm 作管理 .</p>\n</li>\n<li><p>透過 <a href=\"http://microsoft.github.io/TypeSearch/\" target=\"_blank\" rel=\"external\">TypeSearch</a> 可以找到 <a href=\"https://www.npmjs.com/package/@types/bootstrap\" target=\"_blank\" rel=\"external\">bootstrap</a> 的 typescript 定義檔.</p>\n</li>\n<li><p>執行 <code>npm install --save @types/bootstrap</code> 安裝 bootstrap (目前的版本是 Bootstrap 3.3.5) , 因為相依於 jquery 所以也會一併安裝</p>\n</li>\n<li><p>安裝 jquery-ui 的定義檔<br><code>npm install --save @types/jqueryui</code></p>\n</li>\n<li><p>新增檔案 <code>todo.ts</code> ,將 <a href=\"http://bootsnipp.com/index.php/snippets/featured/todo-example\" target=\"_blank\" rel=\"external\">樣版</a> 的 javascript 複製貼上 .<br><em>*註:因為 typescript 是 javascript 的 superset , 完全可以相容原生 javascript, 如果有任何錯誤, TypeScript將會提示你</em></p>\n</li>\n<li><p>todo.ts 引用 jquery 、jquery-ui 與 bootstrap 的 typescript 定義檔.  </p>\n<pre><code>/// &lt;reference path=&quot;../../../node_modules/@types/jquery/index.d.ts&quot;/&gt;  \n/// &lt;reference path=&quot;../../../node_modules/@types/bootstrap/index.d.ts&quot;/&gt;  \n/// &lt;reference path=&quot;../../../node_modules/@types/jqueryui/index.d.ts&quot;/&gt;\n</code></pre></li>\n<li><p>頁面載入對應的js檔,記得放置順序 jquery 要在最前面,並將放在<code>&lt;\\body&gt;</code>之後  </p>\n<pre><code>&lt;script src=&quot;http://code.jquery.com/jquery-2.2.4.min.js&quot;   integrity=&quot;sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=&quot;   crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;http://code.jquery.com/ui/1.12.1/jquery-ui.min.js&quot;   integrity=&quot;sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=&quot;   crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;\n</code></pre></li>\n<li><p>執行 <code>gulp</code> ,會產生todo.js</p>\n</li>\n<li><p>頁面載入js檔,記得要放在相依的js( jquery 、 bootstap 、 jqueryui)之後.</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;/javascripts/kata/todo.js&quot;&gt;&lt;/script&gt;\n</code></pre></li>\n</ol>\n<h4 id=\"截至目前為止-僅僅是在作複製樣版-同時一併處理一些基本-gulp-與-typescript-相關的配置\"><a href=\"#截至目前為止-僅僅是在作複製樣版-同時一併處理一些基本-gulp-與-typescript-相關的配置\" class=\"headerlink\" title=\"截至目前為止,僅僅是在作複製樣版,同時一併處理一些基本 gulp 與 typescript 相關的配置\"></a>截至目前為止,僅僅是在作複製樣版,同時一併處理一些基本 gulp 與 typescript 相關的配置</h4><h4 id=\"接下來才要開始寫-typescript\"><a href=\"#接下來才要開始寫-typescript\" class=\"headerlink\" title=\"接下來才要開始寫 typescript\"></a>接下來才要開始寫 typescript</h4><p>(待續)</p>\n<h4 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h4><ol>\n<li><a href=\"http://blog.miniasp.com/post/2016/08/22/TypeScript-Future-Declaration-Files.aspx\" target=\"_blank\" rel=\"external\">關於 TypeScript 2.0 之後的模組定義檔 ( Declaration Files ) ( *.d.ts )</a></li>\n<li><a href=\"http://bootsnipp.com/\" target=\"_blank\" rel=\"external\">bootsnipp</a></li>\n<li><a href=\"http://com-brianflove.appspot.com/2016/03/29/typescript-express-node-js/\" target=\"_blank\" rel=\"external\">TYPESCRIPT + EXPRESS + NODE.JS</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"目標\"><a href=\"#目標\" class=\"headerlink\" title=\"目標\"></a>目標</h2><ol>\n<li>使用 typescript 開發</li>\n<li>顯示/新增/刪除 todolist </li>\n</ol>\n<h2 id=\"功能分析\"><a href=\"#功能分析\" class=\"headerlink\" title=\"功能分析\"></a>功能分析</h2><ol>\n<li>只是練習,故不開發server side的程式</li>\n<li>暫時存在 cookie 上</li>\n<li>用 bootstrap 作簡單的樣式</li>\n</ol>\n<h2 id=\"實作記錄\"><a href=\"#實作記錄\" class=\"headerlink\" title=\"實作記錄\"></a>實作記錄</h2><h3 id=\"UI-使用-Bootstrap-沒有必要重新打造輪子-能用的就拿來用\"><a href=\"#UI-使用-Bootstrap-沒有必要重新打造輪子-能用的就拿來用\" class=\"headerlink\" title=\"UI : 使用 Bootstrap 沒有必要重新打造輪子,能用的就拿來用\"></a>UI : 使用 Bootstrap <em>沒有必要重新打造輪子,能用的就拿來用</em></h3><ul>\n<li>找到一個TODOLIST的<a href=\"http://bootsnipp.com/index.php/snippets/featured/todo-example\" target=\"_blank\" rel=\"external\">樣版</a>,內含 HTML 、 CSS 與 JS ,功能完整.</li>\n<li>取用<a href=\"http://bootsnipp.com/index.php/snippets/featured/todo-example\" target=\"_blank\" rel=\"external\">樣版</a>的HTML .     </li>\n<li>引用 bootstrap 3.3.5 CDN上的 css .</li>\n<li>建立一個 todo.css 直接引用<a href=\"http://bootsnipp.com/index.php/snippets/featured/todo-example\" target=\"_blank\" rel=\"external\">樣版</a>的 css 並加入頁面參考.</li>\n</ul>\n<h3 id=\"開發環境\"><a href=\"#開發環境\" class=\"headerlink\" title=\"開發環境\"></a>開發環境</h3><ol>\n<li>安裝 typescript<br><code>npm install typescript --save</code></li>\n<li>安裝 gulp<br><code>npm install gulp</code><br><code>npm install --global gulp</code> </li>\n<li>安裝 gulp-typescript<br><code>npm install gulp-typescript</code></li>\n<li>建立gulpfile.js </li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> tsc = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-typescript'</span>);</div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;     </div><div class=\"line\">        <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'public/javascripts/**/*.ts'</span>)</div><div class=\"line\">        .pipe(tsc())</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'public/javascripts/'</span>));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"Typescript\"><a href=\"#Typescript\" class=\"headerlink\" title=\"Typescript\"></a>Typescript</h3><ol>\n<li><p>關於 typescript 的定義檔, 以前有 tsd 與 typings兩種管理工具,現在可以更簡便的合併到 npm 作管理 .</p>\n</li>\n<li><p>透過 <a href=\"http://microsoft.github.io/TypeSearch/\" target=\"_blank\" rel=\"external\">TypeSearch</a> 可以找到 <a href=\"https://www.npmjs.com/package/@types/bootstrap\" target=\"_blank\" rel=\"external\">bootstrap</a> 的 typescript 定義檔.</p>\n</li>\n<li><p>執行 <code>npm install --save @types/bootstrap</code> 安裝 bootstrap (目前的版本是 Bootstrap 3.3.5) , 因為相依於 jquery 所以也會一併安裝</p>\n</li>\n<li><p>安裝 jquery-ui 的定義檔<br><code>npm install --save @types/jqueryui</code></p>\n</li>\n<li><p>新增檔案 <code>todo.ts</code> ,將 <a href=\"http://bootsnipp.com/index.php/snippets/featured/todo-example\" target=\"_blank\" rel=\"external\">樣版</a> 的 javascript 複製貼上 .<br><em>*註:因為 typescript 是 javascript 的 superset , 完全可以相容原生 javascript, 如果有任何錯誤, TypeScript將會提示你</em></p>\n</li>\n<li><p>todo.ts 引用 jquery 、jquery-ui 與 bootstrap 的 typescript 定義檔.  </p>\n<pre><code>/// &lt;reference path=&quot;../../../node_modules/@types/jquery/index.d.ts&quot;/&gt;  \n/// &lt;reference path=&quot;../../../node_modules/@types/bootstrap/index.d.ts&quot;/&gt;  \n/// &lt;reference path=&quot;../../../node_modules/@types/jqueryui/index.d.ts&quot;/&gt;\n</code></pre></li>\n<li><p>頁面載入對應的js檔,記得放置順序 jquery 要在最前面,並將放在<code>&lt;\\body&gt;</code>之後  </p>\n<pre><code>&lt;script src=&quot;http://code.jquery.com/jquery-2.2.4.min.js&quot;   integrity=&quot;sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=&quot;   crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;http://code.jquery.com/ui/1.12.1/jquery-ui.min.js&quot;   integrity=&quot;sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=&quot;   crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;\n</code></pre></li>\n<li><p>執行 <code>gulp</code> ,會產生todo.js</p>\n</li>\n<li><p>頁面載入js檔,記得要放在相依的js( jquery 、 bootstap 、 jqueryui)之後.</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;/javascripts/kata/todo.js&quot;&gt;&lt;/script&gt;\n</code></pre></li>\n</ol>\n<h4 id=\"截至目前為止-僅僅是在作複製樣版-同時一併處理一些基本-gulp-與-typescript-相關的配置\"><a href=\"#截至目前為止-僅僅是在作複製樣版-同時一併處理一些基本-gulp-與-typescript-相關的配置\" class=\"headerlink\" title=\"截至目前為止,僅僅是在作複製樣版,同時一併處理一些基本 gulp 與 typescript 相關的配置\"></a>截至目前為止,僅僅是在作複製樣版,同時一併處理一些基本 gulp 與 typescript 相關的配置</h4><h4 id=\"接下來才要開始寫-typescript\"><a href=\"#接下來才要開始寫-typescript\" class=\"headerlink\" title=\"接下來才要開始寫 typescript\"></a>接下來才要開始寫 typescript</h4><p>(待續)</p>\n<h4 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考\"></a>參考</h4><ol>\n<li><a href=\"http://blog.miniasp.com/post/2016/08/22/TypeScript-Future-Declaration-Files.aspx\" target=\"_blank\" rel=\"external\">關於 TypeScript 2.0 之後的模組定義檔 ( Declaration Files ) ( *.d.ts )</a></li>\n<li><a href=\"http://bootsnipp.com/\" target=\"_blank\" rel=\"external\">bootsnipp</a></li>\n<li><a href=\"http://com-brianflove.appspot.com/2016/03/29/typescript-express-node-js/\" target=\"_blank\" rel=\"external\">TYPESCRIPT + EXPRESS + NODE.JS</a></li>\n</ol>\n"},{"title":"IIS Tracing Log 設定","date":"2017-01-24T06:27:12.000Z","_content":"## 緣由\n當你需要Trace送到IIS的每個Request的細節(包含在pipe line各個模組之間的input/output 與 傳入的參數、header等…), \n可以透過開啟tracing log來作追蹤\n\n## 環境\n1. Windows Server 2012 R2\n2. IIS 8.5.9600.16384\n\n## 開啟 tracing log\n\n1. 新增 Tracing Rules \n![](https://i.imgur.com/4llAgOa.jpg)\n![](https://i.imgur.com/BavVoWy.gif)\n\n\n2. 開啟網站 Tracing 功能\n![](https://i.imgur.com/LUgbESR.jpg)\n![](https://i.imgur.com/aKtgj5m.jpg)\n\n## 調整 IE Security 層級\n\n1. 使用 IE 開啟 Log，因 Security 設定無法套用版型\n![](https://i.imgur.com/4VsuQWp.jpg)\n\n2. 調整ie enhanced security\n\n![](https://i.imgur.com/Lvnygqr.jpg)\n\n3. 開啟IE > 點選小齒輪，選擇  Internet Options > 點選 Security 頁籤 > 將 Internet 的 Security Level 調整為 Medium-high\n![](https://i.imgur.com/H2F06OU.jpg)\n\n4. 完成\n![](https://i.imgur.com/biiX6w8.jpg)\n\n\n\n(fin)","source":"_posts/iis_tracing_log_setting.md","raw":"---\ntitle: IIS Tracing Log 設定\ndate: 2017/01/24 14:27:12 \ntag:\n  - IIS\n  - 記錄\n---\n## 緣由\n當你需要Trace送到IIS的每個Request的細節(包含在pipe line各個模組之間的input/output 與 傳入的參數、header等…), \n可以透過開啟tracing log來作追蹤\n\n## 環境\n1. Windows Server 2012 R2\n2. IIS 8.5.9600.16384\n\n## 開啟 tracing log\n\n1. 新增 Tracing Rules \n![](https://i.imgur.com/4llAgOa.jpg)\n![](https://i.imgur.com/BavVoWy.gif)\n\n\n2. 開啟網站 Tracing 功能\n![](https://i.imgur.com/LUgbESR.jpg)\n![](https://i.imgur.com/aKtgj5m.jpg)\n\n## 調整 IE Security 層級\n\n1. 使用 IE 開啟 Log，因 Security 設定無法套用版型\n![](https://i.imgur.com/4VsuQWp.jpg)\n\n2. 調整ie enhanced security\n\n![](https://i.imgur.com/Lvnygqr.jpg)\n\n3. 開啟IE > 點選小齒輪，選擇  Internet Options > 點選 Security 頁籤 > 將 Internet 的 Security Level 調整為 Medium-high\n![](https://i.imgur.com/H2F06OU.jpg)\n\n4. 完成\n![](https://i.imgur.com/biiX6w8.jpg)\n\n\n\n(fin)","slug":"iis_tracing_log_setting","published":1,"updated":"2017-01-24T06:51:47.731Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3oey003glgopcpmhd2kc","content":"<h2 id=\"緣由\"><a href=\"#緣由\" class=\"headerlink\" title=\"緣由\"></a>緣由</h2><p>當你需要Trace送到IIS的每個Request的細節(包含在pipe line各個模組之間的input/output 與 傳入的參數、header等…),<br>可以透過開啟tracing log來作追蹤</p>\n<h2 id=\"環境\"><a href=\"#環境\" class=\"headerlink\" title=\"環境\"></a>環境</h2><ol>\n<li>Windows Server 2012 R2</li>\n<li>IIS 8.5.9600.16384</li>\n</ol>\n<h2 id=\"開啟-tracing-log\"><a href=\"#開啟-tracing-log\" class=\"headerlink\" title=\"開啟 tracing log\"></a>開啟 tracing log</h2><ol>\n<li>新增 Tracing Rules<br><img src=\"https://i.imgur.com/4llAgOa.jpg\" alt=\"\"><br><img src=\"https://i.imgur.com/BavVoWy.gif\" alt=\"\"></li>\n</ol>\n<ol>\n<li>開啟網站 Tracing 功能<br><img src=\"https://i.imgur.com/LUgbESR.jpg\" alt=\"\"><br><img src=\"https://i.imgur.com/aKtgj5m.jpg\" alt=\"\"></li>\n</ol>\n<h2 id=\"調整-IE-Security-層級\"><a href=\"#調整-IE-Security-層級\" class=\"headerlink\" title=\"調整 IE Security 層級\"></a>調整 IE Security 層級</h2><ol>\n<li><p>使用 IE 開啟 Log，因 Security 設定無法套用版型<br><img src=\"https://i.imgur.com/4VsuQWp.jpg\" alt=\"\"></p>\n</li>\n<li><p>調整ie enhanced security</p>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/Lvnygqr.jpg\" alt=\"\"></p>\n<ol>\n<li><p>開啟IE &gt; 點選小齒輪，選擇  Internet Options &gt; 點選 Security 頁籤 &gt; 將 Internet 的 Security Level 調整為 Medium-high<br><img src=\"https://i.imgur.com/H2F06OU.jpg\" alt=\"\"></p>\n</li>\n<li><p>完成<br><img src=\"https://i.imgur.com/biiX6w8.jpg\" alt=\"\"></p>\n</li>\n</ol>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"緣由\"><a href=\"#緣由\" class=\"headerlink\" title=\"緣由\"></a>緣由</h2><p>當你需要Trace送到IIS的每個Request的細節(包含在pipe line各個模組之間的input/output 與 傳入的參數、header等…),<br>可以透過開啟tracing log來作追蹤</p>\n<h2 id=\"環境\"><a href=\"#環境\" class=\"headerlink\" title=\"環境\"></a>環境</h2><ol>\n<li>Windows Server 2012 R2</li>\n<li>IIS 8.5.9600.16384</li>\n</ol>\n<h2 id=\"開啟-tracing-log\"><a href=\"#開啟-tracing-log\" class=\"headerlink\" title=\"開啟 tracing log\"></a>開啟 tracing log</h2><ol>\n<li>新增 Tracing Rules<br><img src=\"https://i.imgur.com/4llAgOa.jpg\" alt=\"\"><br><img src=\"https://i.imgur.com/BavVoWy.gif\" alt=\"\"></li>\n</ol>\n<ol>\n<li>開啟網站 Tracing 功能<br><img src=\"https://i.imgur.com/LUgbESR.jpg\" alt=\"\"><br><img src=\"https://i.imgur.com/aKtgj5m.jpg\" alt=\"\"></li>\n</ol>\n<h2 id=\"調整-IE-Security-層級\"><a href=\"#調整-IE-Security-層級\" class=\"headerlink\" title=\"調整 IE Security 層級\"></a>調整 IE Security 層級</h2><ol>\n<li><p>使用 IE 開啟 Log，因 Security 設定無法套用版型<br><img src=\"https://i.imgur.com/4VsuQWp.jpg\" alt=\"\"></p>\n</li>\n<li><p>調整ie enhanced security</p>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/Lvnygqr.jpg\" alt=\"\"></p>\n<ol>\n<li><p>開啟IE &gt; 點選小齒輪，選擇  Internet Options &gt; 點選 Security 頁籤 &gt; 將 Internet 的 Security Level 調整為 Medium-high<br><img src=\"https://i.imgur.com/H2F06OU.jpg\" alt=\"\"></p>\n</li>\n<li><p>完成<br><img src=\"https://i.imgur.com/biiX6w8.jpg\" alt=\"\"></p>\n</li>\n</ol>\n<p>(fin)</p>\n"},{"title":"[活動筆記]單元測試這樣玩就對了","date":"2017-04-22T16:01:39.000Z","_content":"## 應該知道的事:\n- 使用 C# , 但是其他語言也適用 \n- 使用 Visual Studio\n- 案例一有基本數理的專有名詞\n    - 上界(Upper Bound)、下界(lower Bound)、左邊界(Left Bound)、右邊界(Right Bound)\n- 報名資訊(已結束)\n[Agile Meetup 2017/04 意外版: 單元測試這樣玩就對了](http://www.accupass.com/go/unitestwriting)\n\n\n\n\n## 案例一、數值區間\n```\n假定給任一整數區間\nex:\n(1,6] = {2,3,4,5,6} \n[-2,4) = {-2,-1,0,1,2,3}\n透過一個function(x)檢查x是否包含在整數區間內,\n並撰寫測試,驗証 function(x)是對的。\n```\n\n### 解析 \n\n如上範例所示,\n「(」「)」小括號(parentheses)表示`OPEN`(不包含,大於或小於)\n「[」「]」中括號(square brackets)表示`CLOSE`(包含,大於等於或小於等於)\n (1,6] , 代表這個區間大於1小於等於6,包含的整數有 2、3、4、5、6 \n [-2,4), 代表這個區間大於等於-2小於4,包含的整數有-2、-1、0、1、2、3\n \n![](https://i.imgur.com/TDHhx0A.png)\n\n這題比較單純,只需要考慮所有的情況,\n並且寫成單元測試即可。\n1. x 落在區間內\n2. x 落在左邊界外\n3. x 落在右邊界外\n4. x 落在左邊界上,左邊界為`OPEN`\n5. x 落在左邊界上,左邊界為`CLOSE`\n6. x 落在右邊界上,右邊界為`OPEN`\n7. x 落在右邊界上,右邊界為`CLOSE`\n\n有幾種特殊的情境,特別說明一下\n1. 假設區間為(0,1),這個區間是不包含任何整數\n2. 假設區間為(1,1),這個區間是不包含任何整數,且不包含任何數值\n3. 假設區間為[1,1],這個區間恰巧包含1個整數,且只包含1這個整數\n4. 假設\"區間\"為[2,1],或任何左邊界大右邊界的表示,這不是一個正確的區間,將要作例外處理。\n\n讓我們回歸單元測試,\n這裡的重點是**一個測試只作一件事**,\n只把一個情境釐清,並且在測試的程式碼中\n**明確的表達測試目的**\n\n```cs\nprivate int leftBound = 1;\nprivate int rightBound = 6;\nprivate int testNum = 4;\n\n[TestMethod]\npublic void IncludeWhenLeftOpenRightClose()\n{\n    var checker = new RangeChecker(Bound.Open,this.leftBound,Bound.Close,this.rightBound);\n    bool expect = false;            \n    bool result = checker.IsContains(testNum);\n    Assert.IsTrue(result);\n}\n```\n\n## 案例二、現在時間轉字串\n```\n寫一個方法GetNowString,不傳入任何參數,\n取得現在的時間字串,需要精準到豪秒。\n再寫一個測試去測試這個方法是對的‧\n```\n### 版本1\n最簡單的寫法:\n\n```cs\npublic class DateHelper\n{\n\tpublic string GetNowString()\n\t{\n\t\treturn DateTime.Now.ToString(\"yyyy-MM-dd hh:mm:ss ff\");\n\t}\n}\n```\n撰寫測試\n```cs\n[TestMethod]\npublic void GetNowString()\n{\n\tvar \n\t//// 寫不下去,因為我們無法凍結系統的時間\n\tstring expect = \"2017-04-19 20:45:17.88\";\n\tstring result = dater.GetNowString();\n\tAssert.AreEqual(expect, result);\n}\n```\n### 解析\n`GetNowString`與系統的時間`DateTime.Now`,\n是具有耦合性,要解耦需要透過一些IoC的手段去處理。\n\n### 版本2\n利用繼承的方法,作出假的類別\n```cs\npublic class DateHelper\n{\n\tprotected DateTime now;\n\tprotected virtual DateTime GetNow()\n\t{\n\t\tnow = DateTime.Now;\n\t\treturn now;\n\t}\n\tpublic string GetNowString()\n\t{\n\t\tGetNow();\n\t\treturn now.ToString(\"yyyy-MM-dd HH:mm:ss.ff\");\n\t}\n}\n\nclass StubDateHelper: DateHelper\n{\n\tprotected override DateTime GetNow()\n\t{\n\t\treturn now;\n\t}\n\n\tpublic void SetNow(DateTime datetime)\n\t{\n\t\tnow = datetime;\n\t}\n}\n```\n撰寫測試\n```cs\n[TestMethod]\npublic void GetNowString()\n{\n\tStubDateHelper dateHelper = new StubDateHelper();\n\tvar fakeNow = new DateTime(2017,4,19,20,45,17,880);\n\tdateHelper.SetNow(fakeNow);\n\tstring expect = \"2017-04-19 20:45:17.88\";\n\tstring result = dateHelper.GetNowString();\n\tAssert.AreEqual(expect, result);\n}\n\n```\n\n### 解析\n基本上這樣就可以測試了,\n原來的代碼,經過一定的重構,\n透過`virtual`方法GetNow,\n將`Datetime.Now`作了隔離\n適當利用假類別,取代掉GetNow的方法。\n\n這樣夠好了,但是我們可以看看另一種作法\n\n### 版本3 \n先看看我們的`DateHelper`,\n在這裡我們將GetNow交由IDateProvider的類別去實作,\n如此一來就斷開了耦合性。\n```cs\npublic class DateHelper\n{\n\tprivate IDateProvider DateProvider;\n\n\tpublic DateHelper(IDateProvider dateProvider)\n\t{\n\t\tthis.DateProvider = dateProvider;\n\t}\n\tpublic string GetNowString()\n\t{\n\t\tvar now = this.DateProvider.GetNow();\n\t\treturn now.ToString(\"yyyy-MM-dd HH:mm:ss.ff\");\n\t}\n}\n```\n實作IDateProvider的類別,\n在這裡其實不重要.\n```cs\npublic class DateProviderV1 : IDateProvider\n{\n\tpublic DateTime GetNow()\n\t{\n\t\treturn DateTime.Now;\n\t}\n}\n```\n讓我們看看測試,\n在這裡我們透過一個假的`IDateProvider`的實作`DateProviderStub`,\n完成了測試,\nIDateProvider將`DateTime.Now`作了隔離,\n並且提供更容易修改的假物件(僅僅需要實作觀注的方法即可,不用擔心繼承帶來的附作用)\n\n```cs\n[TestMethod]\npublic void GetNowString()\n{\n\tDateProviderStub dateProvider = new DateProviderStub();\n\tdateProvider.now = new DateTime(2017, 4, 19, 20, 45, 17, 880);\n\tvar dateHelper = new DateHelper(dateProvider);\n\tstring expect = \"2017-04-19 20:45:17.88\";\n\tstring result = dateHelper.GetNowString();\n\tAssert.AreEqual(expect, result);\n}\n```\n```cs\npublic class DateProviderStub : IDateProvider\n{\n\tpublic DateTime now;\n\tpublic DateTime GetNow()\n\t{\n\t\treturn now;\n\t}\n}\n```\n\n### 圖例解析\n我們剛剛究竟幹了什麼？\n![](https://i.imgur.com/qeqzaoO.jpg)\n看看原本的情況,本來的方法因為相依與`Datetime`而無法測試\n![](https://i.imgur.com/Mquk1Cm.png)\n讓我們開始下刀,\n先用一個新的方法`GetNow`\n將它與待測的方法作分割,\n但是對整個類來說仍舊是耦合。\n![](https://i.imgur.com/c0Xg4vw.png)\n繼續把這刀往下切,\n我們墊一層介面,\n待測方法不再直接呼叫`GetNow`\n而是透過介面執行,當然會有額外實作介面與注入的功(請參考程式碼,不在此處繪出了.)\n![](https://i.imgur.com/8dDlWi2.png)\n最後,別忘了我們的目的\n測試原本的待測方法,\n我們可以透過一個`假的`類,\n來操控他的行為(ex:凍結時間). \n如此一來,就可進行測試了.\n![](https://i.imgur.com/c3mW59v.png)\n另外,這種被待測方法呼叫後\n會回傳一個假值的方法或類\n被叫作`STUB`\n![](https://i.imgur.com/KXvYMsx.png)\n\n## 案例三、發送郵件\n事先聲明,這題沒有程式碼,\n有興趣實作的人可以試試看.\n如果可以分享實作後的資訊給我更好XD\n```\nQ:註冊發送郵件如何寫單元測試？\n```\n\n### 解析\n很明顯的發送郵件需要依賴外部的郵件系統,\n這裡就會有耦合性,我們可以參考案例2的方式解耦\n不過發送郵件並不會有回傳值,\n我們要如何驗証正確性呢？\n\nA:檢查調用次數、參數\n\n### 圖例解析\n在案例2的單元測試,\n我們透過STUB偽造的回傳值完成測試\n並執行驗証. \n但是在沒有回傳的值的方法中(被稱作`MOCK`)\n我們只能透過傳遞的參數(如果有多載)\n與方法被調用的次數來進行驗証。\n\n![](https://i.imgur.com/zbllutC.png)\n\n\n## 重點摘要\n\n\n- 單元測試要能清楚表達測試的目的(**達意**)\n\t- 命名\n\t- 減少意外的細節\n- 單元測試一次只作一件事 \n- new 本身就是一種邏輯 一種偶合\n- static 是一種高偶合\n- 繼承也是高偶合,能使用繼承的情境很少\n\t- A is a B 通常只有這種情境才適合繼承\n- STUB & MOCK\n\t- STUB 會有回傳值,可以在 Unit Test 作驗証(ASSERT)\n\t- MOCK 沒有回傳值,可以在 MOCK 本身中 作驗証(ASSERT)\n\n## 其它\n- SLIM \n- 注入相依的幾種方式\n    - Pool\n    - Constructor\n    - Property\n- 書單 : XUnit Test Patterns\n\n## 直播影片\n_如果連結失效,煩請告知._\n- [影片1](https://www.facebook.com/AgileCommunity.tw/videos/948509765286712/)\n- [影片2](https://www.facebook.com/AgileCommunity.tw/videos/948548118616210/)\n\n文章內容如有謬誤,煩請指正.\n\n(fin)","source":"_posts/unitestwriting.md","raw":"---\ntitle: \"[活動筆記]單元測試這樣玩就對了\"\ndate: 2017/04/23 00:01:39\ntag:\n  - Unit Test\n---\n## 應該知道的事:\n- 使用 C# , 但是其他語言也適用 \n- 使用 Visual Studio\n- 案例一有基本數理的專有名詞\n    - 上界(Upper Bound)、下界(lower Bound)、左邊界(Left Bound)、右邊界(Right Bound)\n- 報名資訊(已結束)\n[Agile Meetup 2017/04 意外版: 單元測試這樣玩就對了](http://www.accupass.com/go/unitestwriting)\n\n\n\n\n## 案例一、數值區間\n```\n假定給任一整數區間\nex:\n(1,6] = {2,3,4,5,6} \n[-2,4) = {-2,-1,0,1,2,3}\n透過一個function(x)檢查x是否包含在整數區間內,\n並撰寫測試,驗証 function(x)是對的。\n```\n\n### 解析 \n\n如上範例所示,\n「(」「)」小括號(parentheses)表示`OPEN`(不包含,大於或小於)\n「[」「]」中括號(square brackets)表示`CLOSE`(包含,大於等於或小於等於)\n (1,6] , 代表這個區間大於1小於等於6,包含的整數有 2、3、4、5、6 \n [-2,4), 代表這個區間大於等於-2小於4,包含的整數有-2、-1、0、1、2、3\n \n![](https://i.imgur.com/TDHhx0A.png)\n\n這題比較單純,只需要考慮所有的情況,\n並且寫成單元測試即可。\n1. x 落在區間內\n2. x 落在左邊界外\n3. x 落在右邊界外\n4. x 落在左邊界上,左邊界為`OPEN`\n5. x 落在左邊界上,左邊界為`CLOSE`\n6. x 落在右邊界上,右邊界為`OPEN`\n7. x 落在右邊界上,右邊界為`CLOSE`\n\n有幾種特殊的情境,特別說明一下\n1. 假設區間為(0,1),這個區間是不包含任何整數\n2. 假設區間為(1,1),這個區間是不包含任何整數,且不包含任何數值\n3. 假設區間為[1,1],這個區間恰巧包含1個整數,且只包含1這個整數\n4. 假設\"區間\"為[2,1],或任何左邊界大右邊界的表示,這不是一個正確的區間,將要作例外處理。\n\n讓我們回歸單元測試,\n這裡的重點是**一個測試只作一件事**,\n只把一個情境釐清,並且在測試的程式碼中\n**明確的表達測試目的**\n\n```cs\nprivate int leftBound = 1;\nprivate int rightBound = 6;\nprivate int testNum = 4;\n\n[TestMethod]\npublic void IncludeWhenLeftOpenRightClose()\n{\n    var checker = new RangeChecker(Bound.Open,this.leftBound,Bound.Close,this.rightBound);\n    bool expect = false;            \n    bool result = checker.IsContains(testNum);\n    Assert.IsTrue(result);\n}\n```\n\n## 案例二、現在時間轉字串\n```\n寫一個方法GetNowString,不傳入任何參數,\n取得現在的時間字串,需要精準到豪秒。\n再寫一個測試去測試這個方法是對的‧\n```\n### 版本1\n最簡單的寫法:\n\n```cs\npublic class DateHelper\n{\n\tpublic string GetNowString()\n\t{\n\t\treturn DateTime.Now.ToString(\"yyyy-MM-dd hh:mm:ss ff\");\n\t}\n}\n```\n撰寫測試\n```cs\n[TestMethod]\npublic void GetNowString()\n{\n\tvar \n\t//// 寫不下去,因為我們無法凍結系統的時間\n\tstring expect = \"2017-04-19 20:45:17.88\";\n\tstring result = dater.GetNowString();\n\tAssert.AreEqual(expect, result);\n}\n```\n### 解析\n`GetNowString`與系統的時間`DateTime.Now`,\n是具有耦合性,要解耦需要透過一些IoC的手段去處理。\n\n### 版本2\n利用繼承的方法,作出假的類別\n```cs\npublic class DateHelper\n{\n\tprotected DateTime now;\n\tprotected virtual DateTime GetNow()\n\t{\n\t\tnow = DateTime.Now;\n\t\treturn now;\n\t}\n\tpublic string GetNowString()\n\t{\n\t\tGetNow();\n\t\treturn now.ToString(\"yyyy-MM-dd HH:mm:ss.ff\");\n\t}\n}\n\nclass StubDateHelper: DateHelper\n{\n\tprotected override DateTime GetNow()\n\t{\n\t\treturn now;\n\t}\n\n\tpublic void SetNow(DateTime datetime)\n\t{\n\t\tnow = datetime;\n\t}\n}\n```\n撰寫測試\n```cs\n[TestMethod]\npublic void GetNowString()\n{\n\tStubDateHelper dateHelper = new StubDateHelper();\n\tvar fakeNow = new DateTime(2017,4,19,20,45,17,880);\n\tdateHelper.SetNow(fakeNow);\n\tstring expect = \"2017-04-19 20:45:17.88\";\n\tstring result = dateHelper.GetNowString();\n\tAssert.AreEqual(expect, result);\n}\n\n```\n\n### 解析\n基本上這樣就可以測試了,\n原來的代碼,經過一定的重構,\n透過`virtual`方法GetNow,\n將`Datetime.Now`作了隔離\n適當利用假類別,取代掉GetNow的方法。\n\n這樣夠好了,但是我們可以看看另一種作法\n\n### 版本3 \n先看看我們的`DateHelper`,\n在這裡我們將GetNow交由IDateProvider的類別去實作,\n如此一來就斷開了耦合性。\n```cs\npublic class DateHelper\n{\n\tprivate IDateProvider DateProvider;\n\n\tpublic DateHelper(IDateProvider dateProvider)\n\t{\n\t\tthis.DateProvider = dateProvider;\n\t}\n\tpublic string GetNowString()\n\t{\n\t\tvar now = this.DateProvider.GetNow();\n\t\treturn now.ToString(\"yyyy-MM-dd HH:mm:ss.ff\");\n\t}\n}\n```\n實作IDateProvider的類別,\n在這裡其實不重要.\n```cs\npublic class DateProviderV1 : IDateProvider\n{\n\tpublic DateTime GetNow()\n\t{\n\t\treturn DateTime.Now;\n\t}\n}\n```\n讓我們看看測試,\n在這裡我們透過一個假的`IDateProvider`的實作`DateProviderStub`,\n完成了測試,\nIDateProvider將`DateTime.Now`作了隔離,\n並且提供更容易修改的假物件(僅僅需要實作觀注的方法即可,不用擔心繼承帶來的附作用)\n\n```cs\n[TestMethod]\npublic void GetNowString()\n{\n\tDateProviderStub dateProvider = new DateProviderStub();\n\tdateProvider.now = new DateTime(2017, 4, 19, 20, 45, 17, 880);\n\tvar dateHelper = new DateHelper(dateProvider);\n\tstring expect = \"2017-04-19 20:45:17.88\";\n\tstring result = dateHelper.GetNowString();\n\tAssert.AreEqual(expect, result);\n}\n```\n```cs\npublic class DateProviderStub : IDateProvider\n{\n\tpublic DateTime now;\n\tpublic DateTime GetNow()\n\t{\n\t\treturn now;\n\t}\n}\n```\n\n### 圖例解析\n我們剛剛究竟幹了什麼？\n![](https://i.imgur.com/qeqzaoO.jpg)\n看看原本的情況,本來的方法因為相依與`Datetime`而無法測試\n![](https://i.imgur.com/Mquk1Cm.png)\n讓我們開始下刀,\n先用一個新的方法`GetNow`\n將它與待測的方法作分割,\n但是對整個類來說仍舊是耦合。\n![](https://i.imgur.com/c0Xg4vw.png)\n繼續把這刀往下切,\n我們墊一層介面,\n待測方法不再直接呼叫`GetNow`\n而是透過介面執行,當然會有額外實作介面與注入的功(請參考程式碼,不在此處繪出了.)\n![](https://i.imgur.com/8dDlWi2.png)\n最後,別忘了我們的目的\n測試原本的待測方法,\n我們可以透過一個`假的`類,\n來操控他的行為(ex:凍結時間). \n如此一來,就可進行測試了.\n![](https://i.imgur.com/c3mW59v.png)\n另外,這種被待測方法呼叫後\n會回傳一個假值的方法或類\n被叫作`STUB`\n![](https://i.imgur.com/KXvYMsx.png)\n\n## 案例三、發送郵件\n事先聲明,這題沒有程式碼,\n有興趣實作的人可以試試看.\n如果可以分享實作後的資訊給我更好XD\n```\nQ:註冊發送郵件如何寫單元測試？\n```\n\n### 解析\n很明顯的發送郵件需要依賴外部的郵件系統,\n這裡就會有耦合性,我們可以參考案例2的方式解耦\n不過發送郵件並不會有回傳值,\n我們要如何驗証正確性呢？\n\nA:檢查調用次數、參數\n\n### 圖例解析\n在案例2的單元測試,\n我們透過STUB偽造的回傳值完成測試\n並執行驗証. \n但是在沒有回傳的值的方法中(被稱作`MOCK`)\n我們只能透過傳遞的參數(如果有多載)\n與方法被調用的次數來進行驗証。\n\n![](https://i.imgur.com/zbllutC.png)\n\n\n## 重點摘要\n\n\n- 單元測試要能清楚表達測試的目的(**達意**)\n\t- 命名\n\t- 減少意外的細節\n- 單元測試一次只作一件事 \n- new 本身就是一種邏輯 一種偶合\n- static 是一種高偶合\n- 繼承也是高偶合,能使用繼承的情境很少\n\t- A is a B 通常只有這種情境才適合繼承\n- STUB & MOCK\n\t- STUB 會有回傳值,可以在 Unit Test 作驗証(ASSERT)\n\t- MOCK 沒有回傳值,可以在 MOCK 本身中 作驗証(ASSERT)\n\n## 其它\n- SLIM \n- 注入相依的幾種方式\n    - Pool\n    - Constructor\n    - Property\n- 書單 : XUnit Test Patterns\n\n## 直播影片\n_如果連結失效,煩請告知._\n- [影片1](https://www.facebook.com/AgileCommunity.tw/videos/948509765286712/)\n- [影片2](https://www.facebook.com/AgileCommunity.tw/videos/948548118616210/)\n\n文章內容如有謬誤,煩請指正.\n\n(fin)","slug":"unitestwriting","published":1,"updated":"2017-04-23T10:40:36.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj38c3of4003ilgop91f07v4u","content":"<h2 id=\"應該知道的事\"><a href=\"#應該知道的事\" class=\"headerlink\" title=\"應該知道的事:\"></a>應該知道的事:</h2><ul>\n<li>使用 C# , 但是其他語言也適用 </li>\n<li>使用 Visual Studio</li>\n<li>案例一有基本數理的專有名詞<ul>\n<li>上界(Upper Bound)、下界(lower Bound)、左邊界(Left Bound)、右邊界(Right Bound)</li>\n</ul>\n</li>\n<li>報名資訊(已結束)<br><a href=\"http://www.accupass.com/go/unitestwriting\" target=\"_blank\" rel=\"external\">Agile Meetup 2017/04 意外版: 單元測試這樣玩就對了</a></li>\n</ul>\n<h2 id=\"案例一、數值區間\"><a href=\"#案例一、數值區間\" class=\"headerlink\" title=\"案例一、數值區間\"></a>案例一、數值區間</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">假定給任一整數區間</div><div class=\"line\">ex:</div><div class=\"line\">(1,6] = &#123;2,3,4,5,6&#125; </div><div class=\"line\">[-2,4) = &#123;-2,-1,0,1,2,3&#125;</div><div class=\"line\">透過一個function(x)檢查x是否包含在整數區間內,</div><div class=\"line\">並撰寫測試,驗証 function(x)是對的。</div></pre></td></tr></table></figure>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>如上範例所示,<br>「(」「)」小括號(parentheses)表示<code>OPEN</code>(不包含,大於或小於)<br>「[」「]」中括號(square brackets)表示<code>CLOSE</code>(包含,大於等於或小於等於)<br> (1,6] , 代表這個區間大於1小於等於6,包含的整數有 2、3、4、5、6<br> [-2,4), 代表這個區間大於等於-2小於4,包含的整數有-2、-1、0、1、2、3</p>\n<p><img src=\"https://i.imgur.com/TDHhx0A.png\" alt=\"\"></p>\n<p>這題比較單純,只需要考慮所有的情況,<br>並且寫成單元測試即可。</p>\n<ol>\n<li>x 落在區間內</li>\n<li>x 落在左邊界外</li>\n<li>x 落在右邊界外</li>\n<li>x 落在左邊界上,左邊界為<code>OPEN</code></li>\n<li>x 落在左邊界上,左邊界為<code>CLOSE</code></li>\n<li>x 落在右邊界上,右邊界為<code>OPEN</code></li>\n<li>x 落在右邊界上,右邊界為<code>CLOSE</code></li>\n</ol>\n<p>有幾種特殊的情境,特別說明一下</p>\n<ol>\n<li>假設區間為(0,1),這個區間是不包含任何整數</li>\n<li>假設區間為(1,1),這個區間是不包含任何整數,且不包含任何數值</li>\n<li>假設區間為[1,1],這個區間恰巧包含1個整數,且只包含1這個整數</li>\n<li>假設”區間”為[2,1],或任何左邊界大右邊界的表示,這不是一個正確的區間,將要作例外處理。</li>\n</ol>\n<p>讓我們回歸單元測試,<br>這裡的重點是<strong>一個測試只作一件事</strong>,<br>只把一個情境釐清,並且在測試的程式碼中<br><strong>明確的表達測試目的</strong></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> leftBound = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> rightBound = <span class=\"number\">6</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> testNum = <span class=\"number\">4</span>;</div><div class=\"line\"></div><div class=\"line\">[TestMethod]</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">IncludeWhenLeftOpenRightClose</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> checker = <span class=\"keyword\">new</span> RangeChecker(Bound.Open,<span class=\"keyword\">this</span>.leftBound,Bound.Close,<span class=\"keyword\">this</span>.rightBound);</div><div class=\"line\">    <span class=\"keyword\">bool</span> expect = <span class=\"literal\">false</span>;            </div><div class=\"line\">    <span class=\"keyword\">bool</span> result = checker.IsContains(testNum);</div><div class=\"line\">    Assert.IsTrue(result);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"案例二、現在時間轉字串\"><a href=\"#案例二、現在時間轉字串\" class=\"headerlink\" title=\"案例二、現在時間轉字串\"></a>案例二、現在時間轉字串</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">寫一個方法GetNowString,不傳入任何參數,</div><div class=\"line\">取得現在的時間字串,需要精準到豪秒。</div><div class=\"line\">再寫一個測試去測試這個方法是對的‧</div></pre></td></tr></table></figure>\n<h3 id=\"版本1\"><a href=\"#版本1\" class=\"headerlink\" title=\"版本1\"></a>版本1</h3><p>最簡單的寫法:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DateHelper</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetNowString</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> DateTime.Now.ToString(<span class=\"string\">\"yyyy-MM-dd hh:mm:ss ff\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>撰寫測試<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">[TestMethod]</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">GetNowString</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> </div><div class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span>/ 寫不下去,因為我們無法凍結系統的時間</span></div><div class=\"line\">\t<span class=\"keyword\">string</span> expect = <span class=\"string\">\"2017-04-19 20:45:17.88\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">string</span> result = dater.GetNowString();</div><div class=\"line\">\tAssert.AreEqual(expect, result);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"解析-1\"><a href=\"#解析-1\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p><code>GetNowString</code>與系統的時間<code>DateTime.Now</code>,<br>是具有耦合性,要解耦需要透過一些IoC的手段去處理。</p>\n<h3 id=\"版本2\"><a href=\"#版本2\" class=\"headerlink\" title=\"版本2\"></a>版本2</h3><p>利用繼承的方法,作出假的類別<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DateHelper</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">protected</span> DateTime now;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">virtual</span> DateTime <span class=\"title\">GetNow</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tnow = DateTime.Now;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> now;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetNowString</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tGetNow();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> now.ToString(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss.ff\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">StubDateHelper</span>: <span class=\"title\">DateHelper</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> DateTime <span class=\"title\">GetNow</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> now;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SetNow</span>(<span class=\"params\">DateTime datetime</span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tnow = datetime;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>撰寫測試<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[TestMethod]</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">GetNowString</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">\tStubDateHelper dateHelper = <span class=\"keyword\">new</span> StubDateHelper();</div><div class=\"line\">\t<span class=\"keyword\">var</span> fakeNow = <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2017</span>,<span class=\"number\">4</span>,<span class=\"number\">19</span>,<span class=\"number\">20</span>,<span class=\"number\">45</span>,<span class=\"number\">17</span>,<span class=\"number\">880</span>);</div><div class=\"line\">\tdateHelper.SetNow(fakeNow);</div><div class=\"line\">\t<span class=\"keyword\">string</span> expect = <span class=\"string\">\"2017-04-19 20:45:17.88\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">string</span> result = dateHelper.GetNowString();</div><div class=\"line\">\tAssert.AreEqual(expect, result);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"解析-2\"><a href=\"#解析-2\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>基本上這樣就可以測試了,<br>原來的代碼,經過一定的重構,<br>透過<code>virtual</code>方法GetNow,<br>將<code>Datetime.Now</code>作了隔離<br>適當利用假類別,取代掉GetNow的方法。</p>\n<p>這樣夠好了,但是我們可以看看另一種作法</p>\n<h3 id=\"版本3\"><a href=\"#版本3\" class=\"headerlink\" title=\"版本3\"></a>版本3</h3><p>先看看我們的<code>DateHelper</code>,<br>在這裡我們將GetNow交由IDateProvider的類別去實作,<br>如此一來就斷開了耦合性。<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DateHelper</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> IDateProvider DateProvider;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DateHelper</span>(<span class=\"params\">IDateProvider dateProvider</span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.DateProvider = dateProvider;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetNowString</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> now = <span class=\"keyword\">this</span>.DateProvider.GetNow();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> now.ToString(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss.ff\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>實作IDateProvider的類別,<br>在這裡其實不重要.<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DateProviderV1</span> : <span class=\"title\">IDateProvider</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> DateTime <span class=\"title\">GetNow</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> DateTime.Now;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>讓我們看看測試,<br>在這裡我們透過一個假的<code>IDateProvider</code>的實作<code>DateProviderStub</code>,<br>完成了測試,<br>IDateProvider將<code>DateTime.Now</code>作了隔離,<br>並且提供更容易修改的假物件(僅僅需要實作觀注的方法即可,不用擔心繼承帶來的附作用)</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[TestMethod]</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">GetNowString</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">\tDateProviderStub dateProvider = <span class=\"keyword\">new</span> DateProviderStub();</div><div class=\"line\">\tdateProvider.now = <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2017</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">20</span>, <span class=\"number\">45</span>, <span class=\"number\">17</span>, <span class=\"number\">880</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> dateHelper = <span class=\"keyword\">new</span> DateHelper(dateProvider);</div><div class=\"line\">\t<span class=\"keyword\">string</span> expect = <span class=\"string\">\"2017-04-19 20:45:17.88\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">string</span> result = dateHelper.GetNowString();</div><div class=\"line\">\tAssert.AreEqual(expect, result);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DateProviderStub</span> : <span class=\"title\">IDateProvider</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> DateTime now;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> DateTime <span class=\"title\">GetNow</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> now;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"圖例解析\"><a href=\"#圖例解析\" class=\"headerlink\" title=\"圖例解析\"></a>圖例解析</h3><p>我們剛剛究竟幹了什麼？<br><img src=\"https://i.imgur.com/qeqzaoO.jpg\" alt=\"\"><br>看看原本的情況,本來的方法因為相依與<code>Datetime</code>而無法測試<br><img src=\"https://i.imgur.com/Mquk1Cm.png\" alt=\"\"><br>讓我們開始下刀,<br>先用一個新的方法<code>GetNow</code><br>將它與待測的方法作分割,<br>但是對整個類來說仍舊是耦合。<br><img src=\"https://i.imgur.com/c0Xg4vw.png\" alt=\"\"><br>繼續把這刀往下切,<br>我們墊一層介面,<br>待測方法不再直接呼叫<code>GetNow</code><br>而是透過介面執行,當然會有額外實作介面與注入的功(請參考程式碼,不在此處繪出了.)<br><img src=\"https://i.imgur.com/8dDlWi2.png\" alt=\"\"><br>最後,別忘了我們的目的<br>測試原本的待測方法,<br>我們可以透過一個<code>假的</code>類,<br>來操控他的行為(ex:凍結時間).<br>如此一來,就可進行測試了.<br><img src=\"https://i.imgur.com/c3mW59v.png\" alt=\"\"><br>另外,這種被待測方法呼叫後<br>會回傳一個假值的方法或類<br>被叫作<code>STUB</code><br><img src=\"https://i.imgur.com/KXvYMsx.png\" alt=\"\"></p>\n<h2 id=\"案例三、發送郵件\"><a href=\"#案例三、發送郵件\" class=\"headerlink\" title=\"案例三、發送郵件\"></a>案例三、發送郵件</h2><p>事先聲明,這題沒有程式碼,<br>有興趣實作的人可以試試看.<br>如果可以分享實作後的資訊給我更好XD<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Q:註冊發送郵件如何寫單元測試？</div></pre></td></tr></table></figure></p>\n<h3 id=\"解析-3\"><a href=\"#解析-3\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>很明顯的發送郵件需要依賴外部的郵件系統,<br>這裡就會有耦合性,我們可以參考案例2的方式解耦<br>不過發送郵件並不會有回傳值,<br>我們要如何驗証正確性呢？</p>\n<p>A:檢查調用次數、參數</p>\n<h3 id=\"圖例解析-1\"><a href=\"#圖例解析-1\" class=\"headerlink\" title=\"圖例解析\"></a>圖例解析</h3><p>在案例2的單元測試,<br>我們透過STUB偽造的回傳值完成測試<br>並執行驗証.<br>但是在沒有回傳的值的方法中(被稱作<code>MOCK</code>)<br>我們只能透過傳遞的參數(如果有多載)<br>與方法被調用的次數來進行驗証。</p>\n<p><img src=\"https://i.imgur.com/zbllutC.png\" alt=\"\"></p>\n<h2 id=\"重點摘要\"><a href=\"#重點摘要\" class=\"headerlink\" title=\"重點摘要\"></a>重點摘要</h2><ul>\n<li>單元測試要能清楚表達測試的目的(<strong>達意</strong>)<ul>\n<li>命名</li>\n<li>減少意外的細節</li>\n</ul>\n</li>\n<li>單元測試一次只作一件事 </li>\n<li>new 本身就是一種邏輯 一種偶合</li>\n<li>static 是一種高偶合</li>\n<li>繼承也是高偶合,能使用繼承的情境很少<ul>\n<li>A is a B 通常只有這種情境才適合繼承</li>\n</ul>\n</li>\n<li>STUB &amp; MOCK<ul>\n<li>STUB 會有回傳值,可以在 Unit Test 作驗証(ASSERT)</li>\n<li>MOCK 沒有回傳值,可以在 MOCK 本身中 作驗証(ASSERT)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><ul>\n<li>SLIM </li>\n<li>注入相依的幾種方式<ul>\n<li>Pool</li>\n<li>Constructor</li>\n<li>Property</li>\n</ul>\n</li>\n<li>書單 : XUnit Test Patterns</li>\n</ul>\n<h2 id=\"直播影片\"><a href=\"#直播影片\" class=\"headerlink\" title=\"直播影片\"></a>直播影片</h2><p><em>如果連結失效,煩請告知.</em></p>\n<ul>\n<li><a href=\"https://www.facebook.com/AgileCommunity.tw/videos/948509765286712/\" target=\"_blank\" rel=\"external\">影片1</a></li>\n<li><a href=\"https://www.facebook.com/AgileCommunity.tw/videos/948548118616210/\" target=\"_blank\" rel=\"external\">影片2</a></li>\n</ul>\n<p>文章內容如有謬誤,煩請指正.</p>\n<p>(fin)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"應該知道的事\"><a href=\"#應該知道的事\" class=\"headerlink\" title=\"應該知道的事:\"></a>應該知道的事:</h2><ul>\n<li>使用 C# , 但是其他語言也適用 </li>\n<li>使用 Visual Studio</li>\n<li>案例一有基本數理的專有名詞<ul>\n<li>上界(Upper Bound)、下界(lower Bound)、左邊界(Left Bound)、右邊界(Right Bound)</li>\n</ul>\n</li>\n<li>報名資訊(已結束)<br><a href=\"http://www.accupass.com/go/unitestwriting\" target=\"_blank\" rel=\"external\">Agile Meetup 2017/04 意外版: 單元測試這樣玩就對了</a></li>\n</ul>\n<h2 id=\"案例一、數值區間\"><a href=\"#案例一、數值區間\" class=\"headerlink\" title=\"案例一、數值區間\"></a>案例一、數值區間</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">假定給任一整數區間</div><div class=\"line\">ex:</div><div class=\"line\">(1,6] = &#123;2,3,4,5,6&#125; </div><div class=\"line\">[-2,4) = &#123;-2,-1,0,1,2,3&#125;</div><div class=\"line\">透過一個function(x)檢查x是否包含在整數區間內,</div><div class=\"line\">並撰寫測試,驗証 function(x)是對的。</div></pre></td></tr></table></figure>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>如上範例所示,<br>「(」「)」小括號(parentheses)表示<code>OPEN</code>(不包含,大於或小於)<br>「[」「]」中括號(square brackets)表示<code>CLOSE</code>(包含,大於等於或小於等於)<br> (1,6] , 代表這個區間大於1小於等於6,包含的整數有 2、3、4、5、6<br> [-2,4), 代表這個區間大於等於-2小於4,包含的整數有-2、-1、0、1、2、3</p>\n<p><img src=\"https://i.imgur.com/TDHhx0A.png\" alt=\"\"></p>\n<p>這題比較單純,只需要考慮所有的情況,<br>並且寫成單元測試即可。</p>\n<ol>\n<li>x 落在區間內</li>\n<li>x 落在左邊界外</li>\n<li>x 落在右邊界外</li>\n<li>x 落在左邊界上,左邊界為<code>OPEN</code></li>\n<li>x 落在左邊界上,左邊界為<code>CLOSE</code></li>\n<li>x 落在右邊界上,右邊界為<code>OPEN</code></li>\n<li>x 落在右邊界上,右邊界為<code>CLOSE</code></li>\n</ol>\n<p>有幾種特殊的情境,特別說明一下</p>\n<ol>\n<li>假設區間為(0,1),這個區間是不包含任何整數</li>\n<li>假設區間為(1,1),這個區間是不包含任何整數,且不包含任何數值</li>\n<li>假設區間為[1,1],這個區間恰巧包含1個整數,且只包含1這個整數</li>\n<li>假設”區間”為[2,1],或任何左邊界大右邊界的表示,這不是一個正確的區間,將要作例外處理。</li>\n</ol>\n<p>讓我們回歸單元測試,<br>這裡的重點是<strong>一個測試只作一件事</strong>,<br>只把一個情境釐清,並且在測試的程式碼中<br><strong>明確的表達測試目的</strong></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> leftBound = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> rightBound = <span class=\"number\">6</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> testNum = <span class=\"number\">4</span>;</div><div class=\"line\"></div><div class=\"line\">[TestMethod]</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">IncludeWhenLeftOpenRightClose</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> checker = <span class=\"keyword\">new</span> RangeChecker(Bound.Open,<span class=\"keyword\">this</span>.leftBound,Bound.Close,<span class=\"keyword\">this</span>.rightBound);</div><div class=\"line\">    <span class=\"keyword\">bool</span> expect = <span class=\"literal\">false</span>;            </div><div class=\"line\">    <span class=\"keyword\">bool</span> result = checker.IsContains(testNum);</div><div class=\"line\">    Assert.IsTrue(result);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"案例二、現在時間轉字串\"><a href=\"#案例二、現在時間轉字串\" class=\"headerlink\" title=\"案例二、現在時間轉字串\"></a>案例二、現在時間轉字串</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">寫一個方法GetNowString,不傳入任何參數,</div><div class=\"line\">取得現在的時間字串,需要精準到豪秒。</div><div class=\"line\">再寫一個測試去測試這個方法是對的‧</div></pre></td></tr></table></figure>\n<h3 id=\"版本1\"><a href=\"#版本1\" class=\"headerlink\" title=\"版本1\"></a>版本1</h3><p>最簡單的寫法:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DateHelper</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetNowString</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> DateTime.Now.ToString(<span class=\"string\">\"yyyy-MM-dd hh:mm:ss ff\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>撰寫測試<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">[TestMethod]</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">GetNowString</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> </div><div class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span>/ 寫不下去,因為我們無法凍結系統的時間</span></div><div class=\"line\">\t<span class=\"keyword\">string</span> expect = <span class=\"string\">\"2017-04-19 20:45:17.88\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">string</span> result = dater.GetNowString();</div><div class=\"line\">\tAssert.AreEqual(expect, result);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"解析-1\"><a href=\"#解析-1\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p><code>GetNowString</code>與系統的時間<code>DateTime.Now</code>,<br>是具有耦合性,要解耦需要透過一些IoC的手段去處理。</p>\n<h3 id=\"版本2\"><a href=\"#版本2\" class=\"headerlink\" title=\"版本2\"></a>版本2</h3><p>利用繼承的方法,作出假的類別<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DateHelper</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">protected</span> DateTime now;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">virtual</span> DateTime <span class=\"title\">GetNow</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tnow = DateTime.Now;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> now;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetNowString</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tGetNow();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> now.ToString(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss.ff\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">StubDateHelper</span>: <span class=\"title\">DateHelper</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> DateTime <span class=\"title\">GetNow</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> now;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SetNow</span>(<span class=\"params\">DateTime datetime</span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tnow = datetime;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>撰寫測試<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[TestMethod]</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">GetNowString</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">\tStubDateHelper dateHelper = <span class=\"keyword\">new</span> StubDateHelper();</div><div class=\"line\">\t<span class=\"keyword\">var</span> fakeNow = <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2017</span>,<span class=\"number\">4</span>,<span class=\"number\">19</span>,<span class=\"number\">20</span>,<span class=\"number\">45</span>,<span class=\"number\">17</span>,<span class=\"number\">880</span>);</div><div class=\"line\">\tdateHelper.SetNow(fakeNow);</div><div class=\"line\">\t<span class=\"keyword\">string</span> expect = <span class=\"string\">\"2017-04-19 20:45:17.88\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">string</span> result = dateHelper.GetNowString();</div><div class=\"line\">\tAssert.AreEqual(expect, result);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"解析-2\"><a href=\"#解析-2\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>基本上這樣就可以測試了,<br>原來的代碼,經過一定的重構,<br>透過<code>virtual</code>方法GetNow,<br>將<code>Datetime.Now</code>作了隔離<br>適當利用假類別,取代掉GetNow的方法。</p>\n<p>這樣夠好了,但是我們可以看看另一種作法</p>\n<h3 id=\"版本3\"><a href=\"#版本3\" class=\"headerlink\" title=\"版本3\"></a>版本3</h3><p>先看看我們的<code>DateHelper</code>,<br>在這裡我們將GetNow交由IDateProvider的類別去實作,<br>如此一來就斷開了耦合性。<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DateHelper</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> IDateProvider DateProvider;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DateHelper</span>(<span class=\"params\">IDateProvider dateProvider</span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.DateProvider = dateProvider;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetNowString</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> now = <span class=\"keyword\">this</span>.DateProvider.GetNow();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> now.ToString(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss.ff\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>實作IDateProvider的類別,<br>在這裡其實不重要.<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DateProviderV1</span> : <span class=\"title\">IDateProvider</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> DateTime <span class=\"title\">GetNow</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> DateTime.Now;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>讓我們看看測試,<br>在這裡我們透過一個假的<code>IDateProvider</code>的實作<code>DateProviderStub</code>,<br>完成了測試,<br>IDateProvider將<code>DateTime.Now</code>作了隔離,<br>並且提供更容易修改的假物件(僅僅需要實作觀注的方法即可,不用擔心繼承帶來的附作用)</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[TestMethod]</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">GetNowString</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">\tDateProviderStub dateProvider = <span class=\"keyword\">new</span> DateProviderStub();</div><div class=\"line\">\tdateProvider.now = <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2017</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">20</span>, <span class=\"number\">45</span>, <span class=\"number\">17</span>, <span class=\"number\">880</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> dateHelper = <span class=\"keyword\">new</span> DateHelper(dateProvider);</div><div class=\"line\">\t<span class=\"keyword\">string</span> expect = <span class=\"string\">\"2017-04-19 20:45:17.88\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">string</span> result = dateHelper.GetNowString();</div><div class=\"line\">\tAssert.AreEqual(expect, result);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DateProviderStub</span> : <span class=\"title\">IDateProvider</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> DateTime now;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> DateTime <span class=\"title\">GetNow</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> now;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"圖例解析\"><a href=\"#圖例解析\" class=\"headerlink\" title=\"圖例解析\"></a>圖例解析</h3><p>我們剛剛究竟幹了什麼？<br><img src=\"https://i.imgur.com/qeqzaoO.jpg\" alt=\"\"><br>看看原本的情況,本來的方法因為相依與<code>Datetime</code>而無法測試<br><img src=\"https://i.imgur.com/Mquk1Cm.png\" alt=\"\"><br>讓我們開始下刀,<br>先用一個新的方法<code>GetNow</code><br>將它與待測的方法作分割,<br>但是對整個類來說仍舊是耦合。<br><img src=\"https://i.imgur.com/c0Xg4vw.png\" alt=\"\"><br>繼續把這刀往下切,<br>我們墊一層介面,<br>待測方法不再直接呼叫<code>GetNow</code><br>而是透過介面執行,當然會有額外實作介面與注入的功(請參考程式碼,不在此處繪出了.)<br><img src=\"https://i.imgur.com/8dDlWi2.png\" alt=\"\"><br>最後,別忘了我們的目的<br>測試原本的待測方法,<br>我們可以透過一個<code>假的</code>類,<br>來操控他的行為(ex:凍結時間).<br>如此一來,就可進行測試了.<br><img src=\"https://i.imgur.com/c3mW59v.png\" alt=\"\"><br>另外,這種被待測方法呼叫後<br>會回傳一個假值的方法或類<br>被叫作<code>STUB</code><br><img src=\"https://i.imgur.com/KXvYMsx.png\" alt=\"\"></p>\n<h2 id=\"案例三、發送郵件\"><a href=\"#案例三、發送郵件\" class=\"headerlink\" title=\"案例三、發送郵件\"></a>案例三、發送郵件</h2><p>事先聲明,這題沒有程式碼,<br>有興趣實作的人可以試試看.<br>如果可以分享實作後的資訊給我更好XD<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Q:註冊發送郵件如何寫單元測試？</div></pre></td></tr></table></figure></p>\n<h3 id=\"解析-3\"><a href=\"#解析-3\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>很明顯的發送郵件需要依賴外部的郵件系統,<br>這裡就會有耦合性,我們可以參考案例2的方式解耦<br>不過發送郵件並不會有回傳值,<br>我們要如何驗証正確性呢？</p>\n<p>A:檢查調用次數、參數</p>\n<h3 id=\"圖例解析-1\"><a href=\"#圖例解析-1\" class=\"headerlink\" title=\"圖例解析\"></a>圖例解析</h3><p>在案例2的單元測試,<br>我們透過STUB偽造的回傳值完成測試<br>並執行驗証.<br>但是在沒有回傳的值的方法中(被稱作<code>MOCK</code>)<br>我們只能透過傳遞的參數(如果有多載)<br>與方法被調用的次數來進行驗証。</p>\n<p><img src=\"https://i.imgur.com/zbllutC.png\" alt=\"\"></p>\n<h2 id=\"重點摘要\"><a href=\"#重點摘要\" class=\"headerlink\" title=\"重點摘要\"></a>重點摘要</h2><ul>\n<li>單元測試要能清楚表達測試的目的(<strong>達意</strong>)<ul>\n<li>命名</li>\n<li>減少意外的細節</li>\n</ul>\n</li>\n<li>單元測試一次只作一件事 </li>\n<li>new 本身就是一種邏輯 一種偶合</li>\n<li>static 是一種高偶合</li>\n<li>繼承也是高偶合,能使用繼承的情境很少<ul>\n<li>A is a B 通常只有這種情境才適合繼承</li>\n</ul>\n</li>\n<li>STUB &amp; MOCK<ul>\n<li>STUB 會有回傳值,可以在 Unit Test 作驗証(ASSERT)</li>\n<li>MOCK 沒有回傳值,可以在 MOCK 本身中 作驗証(ASSERT)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><ul>\n<li>SLIM </li>\n<li>注入相依的幾種方式<ul>\n<li>Pool</li>\n<li>Constructor</li>\n<li>Property</li>\n</ul>\n</li>\n<li>書單 : XUnit Test Patterns</li>\n</ul>\n<h2 id=\"直播影片\"><a href=\"#直播影片\" class=\"headerlink\" title=\"直播影片\"></a>直播影片</h2><p><em>如果連結失效,煩請告知.</em></p>\n<ul>\n<li><a href=\"https://www.facebook.com/AgileCommunity.tw/videos/948509765286712/\" target=\"_blank\" rel=\"external\">影片1</a></li>\n<li><a href=\"https://www.facebook.com/AgileCommunity.tw/videos/948548118616210/\" target=\"_blank\" rel=\"external\">影片2</a></li>\n</ul>\n<p>文章內容如有謬誤,煩請指正.</p>\n<p>(fin)</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj38c3o460000lgop2xps7bqb","tag_id":"cj38c3o4q0002lgopp40s6gl0","_id":"cj38c3o74000elgopegnvxg13"},{"post_id":"cj38c3o460000lgop2xps7bqb","tag_id":"cj38c3o5e0005lgopu9dupia3","_id":"cj38c3o7g000glgop5orpsqtc"},{"post_id":"cj38c3o460000lgop2xps7bqb","tag_id":"cj38c3o610009lgopearwnknz","_id":"cj38c3o7q000jlgopn91934cg"},{"post_id":"cj38c3o4m0001lgopdpm4h7s0","tag_id":"cj38c3o4q0002lgopp40s6gl0","_id":"cj38c3o8l000slgop2xxjb1ip"},{"post_id":"cj38c3o4m0001lgopdpm4h7s0","tag_id":"cj38c3o5e0005lgopu9dupia3","_id":"cj38c3o8l000tlgopwe2tj6tc"},{"post_id":"cj38c3o4m0001lgopdpm4h7s0","tag_id":"cj38c3o7u000llgop0ryi9dz7","_id":"cj38c3o8r000vlgopx89rg1x7"},{"post_id":"cj38c3o4m0001lgopdpm4h7s0","tag_id":"cj38c3o87000olgopzu84knwy","_id":"cj38c3o8t000wlgopxza1iltl"},{"post_id":"cj38c3o4s0003lgopo0tg5owt","tag_id":"cj38c3o4q0002lgopp40s6gl0","_id":"cj38c3o90000zlgop07f45l1o"},{"post_id":"cj38c3o4s0003lgopo0tg5owt","tag_id":"cj38c3o8n000ulgopvk8l2zlu","_id":"cj38c3o910010lgopjr21o0af"},{"post_id":"cj38c3o4s0003lgopo0tg5owt","tag_id":"cj38c3o87000olgopzu84knwy","_id":"cj38c3o960012lgopi43y4zdb"},{"post_id":"cj38c3o4y0004lgopq2idpnne","tag_id":"cj38c3o8z000ylgop4sjuifzv","_id":"cj38c3o9c0016lgop8xlzfvfp"},{"post_id":"cj38c3o4y0004lgopq2idpnne","tag_id":"cj38c3o940011lgopyjkqtjm9","_id":"cj38c3o9d0017lgop92zdkf0m"},{"post_id":"cj38c3o4y0004lgopq2idpnne","tag_id":"cj38c3o980013lgopb2exew7n","_id":"cj38c3o9e0019lgopcrlmy0oa"},{"post_id":"cj38c3o4y0004lgopq2idpnne","tag_id":"cj38c3o9b0014lgopcjqrc5kk","_id":"cj38c3o9e001algoptqu8ms8u"},{"post_id":"cj38c3o5j0006lgopxzb5kr5y","tag_id":"cj38c3o9c0015lgopndhouhsl","_id":"cj38c3o9m001flgopj3h37mrl"},{"post_id":"cj38c3o5j0006lgopxzb5kr5y","tag_id":"cj38c3o9d0018lgopu6pgw9z4","_id":"cj38c3o9n001glgophph2ny32"},{"post_id":"cj38c3o5j0006lgopxzb5kr5y","tag_id":"cj38c3o9f001blgop0v54rq1y","_id":"cj38c3o9o001ilgopvhzfnkkm"},{"post_id":"cj38c3o5j0006lgopxzb5kr5y","tag_id":"cj38c3o9f001clgopdgz6ceck","_id":"cj38c3o9p001jlgop2uvo2rop"},{"post_id":"cj38c3o5j0006lgopxzb5kr5y","tag_id":"cj38c3o610009lgopearwnknz","_id":"cj38c3o9q001llgopuum73wd9"},{"post_id":"cj38c3o5p0007lgopt2npc94p","tag_id":"cj38c3o4q0002lgopp40s6gl0","_id":"cj38c3o9s001mlgop08jr94p8"},{"post_id":"cj38c3o5p0007lgopt2npc94p","tag_id":"cj38c3o7u000llgop0ryi9dz7","_id":"cj38c3o9u001olgopm9e19g5t"},{"post_id":"cj38c3o5p0007lgopt2npc94p","tag_id":"cj38c3o87000olgopzu84knwy","_id":"cj38c3o9v001plgop91tfune5"},{"post_id":"cj38c3o5u0008lgop4xmyn7oe","tag_id":"cj38c3o9p001klgopx7xwzy94","_id":"cj38c3o9y001rlgop1uyqzqu3"},{"post_id":"cj38c3o5u0008lgop4xmyn7oe","tag_id":"cj38c3o9u001nlgop2q3k52qt","_id":"cj38c3oa1001slgop33onqhia"},{"post_id":"cj38c3o6a000algop59kj0o7b","tag_id":"cj38c3o4q0002lgopp40s6gl0","_id":"cj38c3oaf001wlgop6a54tves"},{"post_id":"cj38c3o6a000algop59kj0o7b","tag_id":"cj38c3o5e0005lgopu9dupia3","_id":"cj38c3oag001xlgopj1dkvo77"},{"post_id":"cj38c3o6a000algop59kj0o7b","tag_id":"cj38c3o7u000llgop0ryi9dz7","_id":"cj38c3oah001zlgop2azptebs"},{"post_id":"cj38c3o6a000algop59kj0o7b","tag_id":"cj38c3o87000olgopzu84knwy","_id":"cj38c3oai0020lgopajkbly4j"},{"post_id":"cj38c3o6a000algop59kj0o7b","tag_id":"cj38c3oaa001ulgopcnj1wi2g","_id":"cj38c3oam0022lgopjd6dgwwz"},{"post_id":"cj38c3o6p000blgop64u4k29k","tag_id":"cj38c3oae001vlgopv1q9b3gu","_id":"cj38c3oao0024lgops6eaqt07"},{"post_id":"cj38c3o6p000blgop64u4k29k","tag_id":"cj38c3oah001ylgopxwylzk8l","_id":"cj38c3oar0025lgopj9j44aut"},{"post_id":"cj38c3o6p000blgop64u4k29k","tag_id":"cj38c3oaj0021lgopifa7v8zc","_id":"cj38c3oav0027lgopu82d5q7v"},{"post_id":"cj38c3o70000dlgophgsd73ei","tag_id":"cj38c3oan0023lgopt23cf835","_id":"cj38c3oax0029lgopf8ljbnju"},{"post_id":"cj38c3o70000dlgophgsd73ei","tag_id":"cj38c3oat0026lgopfn70t0mo","_id":"cj38c3oaz002algophgwb9z7o"},{"post_id":"cj38c3o76000flgopdwspfbvx","tag_id":"cj38c3oaw0028lgop24esscys","_id":"cj38c3ob1002clgopfhy6x3kh"},{"post_id":"cj38c3o7o000ilgopck48lax0","tag_id":"cj38c3oae001vlgopv1q9b3gu","_id":"cj38c3ob4002glgopkysixf15"},{"post_id":"cj38c3o7o000ilgopck48lax0","tag_id":"cj38c3oah001ylgopxwylzk8l","_id":"cj38c3ob5002hlgopyqesbrig"},{"post_id":"cj38c3o7o000ilgopck48lax0","tag_id":"cj38c3oaj0021lgopifa7v8zc","_id":"cj38c3ob7002jlgopio4mgemz"},{"post_id":"cj38c3o7r000klgoptxkhgm4l","tag_id":"cj38c3ob4002flgopv8thofug","_id":"cj38c3ob8002llgopepy903in"},{"post_id":"cj38c3o7r000klgoptxkhgm4l","tag_id":"cj38c3ob6002ilgopl597fv1y","_id":"cj38c3obb002mlgopey1ko4bw"},{"post_id":"cj38c3o7x000mlgop8q99m44s","tag_id":"cj38c3ob7002klgopicbpo9t4","_id":"cj38c3obh002plgop7g2lc9hs"},{"post_id":"cj38c3o7x000mlgop8q99m44s","tag_id":"cj38c3obc002nlgopr9rsygh2","_id":"cj38c3obj002qlgopo0lj288h"},{"post_id":"cj38c3o7x000mlgop8q99m44s","tag_id":"cj38c3o610009lgopearwnknz","_id":"cj38c3obr002slgopos2bkfww"},{"post_id":"cj38c3o85000nlgopd8c7r1ad","tag_id":"cj38c3o9u001nlgop2q3k52qt","_id":"cj38c3obw002tlgop448onyv9"},{"post_id":"cj38c3o88000plgop96yfavlc","tag_id":"cj38c3oae001vlgopv1q9b3gu","_id":"cj38c3oc7002wlgopd0ix57z8"},{"post_id":"cj38c3o88000plgop96yfavlc","tag_id":"cj38c3oah001ylgopxwylzk8l","_id":"cj38c3oc9002xlgopywftvurx"},{"post_id":"cj38c3o8a000qlgoptdqn6wxr","tag_id":"cj38c3oae001vlgopv1q9b3gu","_id":"cj38c3och002zlgopuykp0ygv"},{"post_id":"cj38c3o8a000qlgoptdqn6wxr","tag_id":"cj38c3oah001ylgopxwylzk8l","_id":"cj38c3ocn0030lgop5w6o4n84"},{"post_id":"cj38c3oe70032lgoprvocgch9","tag_id":"cj38c3o4q0002lgopp40s6gl0","_id":"cj38c3oee0035lgoph68yz0j6"},{"post_id":"cj38c3oe60031lgopbsh1uplh","tag_id":"cj38c3oe90033lgopu61hll2x","_id":"cj38c3oel0039lgopiszopy0u"},{"post_id":"cj38c3oe60031lgopbsh1uplh","tag_id":"cj38c3o610009lgopearwnknz","_id":"cj38c3oeo003blgopt6axoppw"},{"post_id":"cj38c3oee0036lgop8gh8htry","tag_id":"cj38c3oek0038lgopny22ny7w","_id":"cj38c3ofi003klgop4o8qrqex"},{"post_id":"cj38c3oee0036lgop8gh8htry","tag_id":"cj38c3oer003dlgoparoebsuj","_id":"cj38c3ofj003llgopgw33c9ul"},{"post_id":"cj38c3oee0036lgop8gh8htry","tag_id":"cj38c3o610009lgopearwnknz","_id":"cj38c3ofl003nlgophkr0i39f"},{"post_id":"cj38c3oee0036lgop8gh8htry","tag_id":"cj38c3of2003hlgopairjh8bn","_id":"cj38c3ofo003olgopsuefz3x4"},{"post_id":"cj38c3oeh0037lgop5bwtxre5","tag_id":"cj38c3ofg003jlgop622ac5vi","_id":"cj38c3oft003rlgop09oii2e8"},{"post_id":"cj38c3oeh0037lgop5bwtxre5","tag_id":"cj38c3ofj003mlgopg3uhr0si","_id":"cj38c3ofu003slgopgtqxbd5o"},{"post_id":"cj38c3oeh0037lgop5bwtxre5","tag_id":"cj38c3ofp003plgoppa94ma9j","_id":"cj38c3ofy003ulgopt1chr4wf"},{"post_id":"cj38c3oem003algopiay1msjf","tag_id":"cj38c3ofs003qlgopkpqi1d80","_id":"cj38c3ofz003vlgopa3ivhq7z"},{"post_id":"cj38c3oeo003clgopo48zyrr0","tag_id":"cj38c3ofw003tlgopc6071hgq","_id":"cj38c3ogm0042lgopdvnji7tt"},{"post_id":"cj38c3oeo003clgopo48zyrr0","tag_id":"cj38c3ofz003wlgop79n6ft4k","_id":"cj38c3ogo0043lgopef5tki9m"},{"post_id":"cj38c3oeo003clgopo48zyrr0","tag_id":"cj38c3og0003xlgopnrzoawc2","_id":"cj38c3ogr0045lgopkmtzpou2"},{"post_id":"cj38c3oeo003clgopo48zyrr0","tag_id":"cj38c3og1003ylgopeqglsfsa","_id":"cj38c3ogs0046lgopph1ot5je"},{"post_id":"cj38c3oeo003clgopo48zyrr0","tag_id":"cj38c3og2003zlgopfpq5ohaq","_id":"cj38c3ogu0048lgopje1y0dvb"},{"post_id":"cj38c3oeo003clgopo48zyrr0","tag_id":"cj38c3og20040lgop7hsxywxy","_id":"cj38c3ogu0049lgopeu1uvbxz"},{"post_id":"cj38c3oew003flgopvxbb68vy","tag_id":"cj38c3ofw003tlgopc6071hgq","_id":"cj38c3oh9004elgop8ponzytv"},{"post_id":"cj38c3oew003flgopvxbb68vy","tag_id":"cj38c3ofz003wlgop79n6ft4k","_id":"cj38c3oh9004flgopqwd8oviu"},{"post_id":"cj38c3oew003flgopvxbb68vy","tag_id":"cj38c3og0003xlgopnrzoawc2","_id":"cj38c3ohb004hlgopx73w3s6m"},{"post_id":"cj38c3oew003flgopvxbb68vy","tag_id":"cj38c3og1003ylgopeqglsfsa","_id":"cj38c3ohc004ilgopv6cx4huv"},{"post_id":"cj38c3oew003flgopvxbb68vy","tag_id":"cj38c3og2003zlgopfpq5ohaq","_id":"cj38c3ohn004jlgopo5wj3q40"},{"post_id":"cj38c3oew003flgopvxbb68vy","tag_id":"cj38c3og20040lgop7hsxywxy","_id":"cj38c3ohn004klgophztlyq9h"},{"post_id":"cj38c3oey003glgopcpmhd2kc","tag_id":"cj38c3oh5004dlgopuggeivat","_id":"cj38c3ohn004llgop3yrmejg8"},{"post_id":"cj38c3oey003glgopcpmhd2kc","tag_id":"cj38c3o610009lgopearwnknz","_id":"cj38c3oho004mlgopns2qo2hp"},{"post_id":"cj38c3of4003ilgop91f07v4u","tag_id":"cj38c3oha004glgopdbfua0ch","_id":"cj38c3oho004nlgop52hu9d3i"}],"Tag":[{"name":".Net Framework","_id":"cj38c3o4q0002lgopp40s6gl0"},{"name":"IO","_id":"cj38c3o5e0005lgopu9dupia3"},{"name":"記錄","_id":"cj38c3o610009lgopearwnknz"},{"name":"Thread","_id":"cj38c3o7u000llgop0ryi9dz7"},{"name":"ASP.Net","_id":"cj38c3o87000olgopzu84knwy"},{"name":"Thread Pool","_id":"cj38c3o8n000ulgopvk8l2zlu"},{"name":"post","_id":"cj38c3o8z000ylgop4sjuifzv"},{"name":"http","_id":"cj38c3o940011lgopyjkqtjm9"},{"name":"html","_id":"cj38c3o980013lgopb2exew7n"},{"name":"Content-Type","_id":"cj38c3o9b0014lgopcjqrc5kk"},{"name":"powershell","_id":"cj38c3o9c0015lgopndhouhsl"},{"name":"Database","_id":"cj38c3o9d0018lgopu6pgw9z4"},{"name":"MsSQL","_id":"cj38c3o9f001blgop0v54rq1y"},{"name":"BulkInsert","_id":"cj38c3o9f001clgopdgz6ceck"},{"name":"時間管理","_id":"cj38c3o9p001klgopx7xwzy94"},{"name":"閱讀筆記","_id":"cj38c3o9u001nlgop2q3k52qt"},{"name":"Redis","_id":"cj38c3oaa001ulgopcnj1wi2g"},{"name":"CI","_id":"cj38c3oae001vlgopv1q9b3gu"},{"name":"Jenkins","_id":"cj38c3oah001ylgopxwylzk8l"},{"name":"Openshift","_id":"cj38c3oaj0021lgopifa7v8zc"},{"name":"blog","_id":"cj38c3oan0023lgopt23cf835"},{"name":"google analytics","_id":"cj38c3oat0026lgopfn70t0mo"},{"name":"Trello","_id":"cj38c3oaw0028lgop24esscys"},{"name":"C#","_id":"cj38c3ob4002flgopv8thofug"},{"name":"StyleCop","_id":"cj38c3ob6002ilgopl597fv1y"},{"name":"DBA","_id":"cj38c3ob7002klgopicbpo9t4"},{"name":"SQL Server","_id":"cj38c3obc002nlgopr9rsygh2"},{"name":"github","_id":"cj38c3oe90033lgopu61hll2x"},{"name":"website","_id":"cj38c3oek0038lgopny22ny7w"},{"name":"domain","_id":"cj38c3oer003dlgoparoebsuj"},{"name":"DNS","_id":"cj38c3of2003hlgopairjh8bn"},{"name":"HTTP/1.1","_id":"cj38c3ofg003jlgop622ac5vi"},{"name":"HTTP/2","_id":"cj38c3ofj003mlgopg3uhr0si"},{"name":"TCP","_id":"cj38c3ofp003plgoppa94ma9j"},{"name":"Testing","_id":"cj38c3ofs003qlgopkpqi1d80"},{"name":"kata","_id":"cj38c3ofw003tlgopc6071hgq"},{"name":"typescript","_id":"cj38c3ofz003wlgop79n6ft4k"},{"name":"bootstrap","_id":"cj38c3og0003xlgopnrzoawc2"},{"name":"npm","_id":"cj38c3og1003ylgopeqglsfsa"},{"name":"jquery","_id":"cj38c3og2003zlgopfpq5ohaq"},{"name":"jquery-ui","_id":"cj38c3og20040lgop7hsxywxy"},{"name":"IIS","_id":"cj38c3oh5004dlgopuggeivat"},{"name":"Unit Test","_id":"cj38c3oha004glgopdbfua0ch"}]}}